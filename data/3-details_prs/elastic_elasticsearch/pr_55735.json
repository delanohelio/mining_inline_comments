{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjYxMDk4", "number": 55735, "title": "[ML] Allow a certain number of ill-formatted rows when delimited format is specified", "bodyText": "While it is good to not be lenient when attempting to guess the file format, it is frustrating to users when they KNOW it is CSV but there are a few ill-formatted rows in the file (via some entry error, etc.).\nThis commit allows for up to 10% of sample rows to be considered \"bad\". These rows are effectively ignored while guessing the format.\nThis percentage of \"allows bad rows\" is only applied when the user has specified delimited formatting options. As the structure finder needs some guidance on what a \"bad row\" actually means.\nrelated to #38890", "createdAt": "2020-04-24T16:54:56Z", "url": "https://github.com/elastic/elasticsearch/pull/55735", "merged": true, "mergeCommit": {"oid": "fd554d95e462232ee9799c82ba8faea11ac481a9"}, "closed": true, "closedAt": "2020-04-29T14:24:25Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca0Xw6AH2gAyNDA4NjYxMDk4OmJiMzFiMTNiYTdhMTc3YTg2MDJmMWQ3NjEyYjI4NWU0OTIzNDMzY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccYCMogFqTQwMjYzNzM2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/bb31b13ba7a177a8602f1d7612b285e4923433cf", "committedDate": "2020-04-24T16:49:08Z", "message": "[ML] Allow a certain number of ill-formatted rows when format is specified"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTE2NTUx", "url": "https://github.com/elastic/elasticsearch/pull/55735#pullrequestreview-400116551", "createdAt": "2020-04-24T16:56:54Z", "commit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1Njo1NFrOGLgtMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1Njo1NFrOGLgtMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMzM3Nw==", "bodyText": "I am willing to change this number. Though i do think we should have some static limit as it could break the automatic header row check if too many rows are poorly formatted.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r414723377", "createdAt": "2020-04-24T16:56:54Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinderFactory.java", "diffHunk": "@@ -14,6 +14,7 @@\n \n public class DelimitedFileStructureFinderFactory implements FileStructureFinderFactory {\n \n+    static final double DEFAULT_BAD_ROWS_PERCENTAGE = 0.10d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTE3MDY4", "url": "https://github.com/elastic/elasticsearch/pull/55735#pullrequestreview-400117068", "createdAt": "2020-04-24T16:57:41Z", "commit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1Nzo0MVrOGLguzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1Nzo0MVrOGLguzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMzc4OQ==", "bodyText": "I think we should have wiggle room here as well. Because the user supplying these fields implies they expect it to be delimited.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r414723789", "createdAt": "2020-04-24T16:57:41Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/FileStructureFinderManager.java", "diffHunk": "@@ -474,14 +474,17 @@ FileStructureFinder makeBestStructureFinder(List<String> explanation, String sam\n         Character quote = overrides.getQuote();\n         Boolean shouldTrimFields = overrides.getShouldTrimFields();\n         List<FileStructureFinderFactory> factories;\n+        double allowedFractionOfBadLines = 0.0;\n         if (delimiter != null) {\n+            allowedFractionOfBadLines = DelimitedFileStructureFinderFactory.DEFAULT_BAD_ROWS_PERCENTAGE;\n \n             // If a precise delimiter is specified, we only need one structure finder\n             // factory, and we'll tolerate as little as one column in the input\n             factories = Collections.singletonList(new DelimitedFileStructureFinderFactory(delimiter, (quote == null) ? '\"' : quote, 1,\n                 (shouldTrimFields == null) ? (delimiter == '|') : shouldTrimFields));\n \n         } else if (quote != null || shouldTrimFields != null) {\n+            allowedFractionOfBadLines = DelimitedFileStructureFinderFactory.DEFAULT_BAD_ROWS_PERCENTAGE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTMzMDQ4", "url": "https://github.com/elastic/elasticsearch/pull/55735#pullrequestreview-400133048", "createdAt": "2020-04-24T17:20:47Z", "commit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyMDo0N1rOGLhlfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzozODoxOVrOGLiPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczNzc4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param allowedFractionOfBadLines How many lines of the passed sample are allowed to be considered \"bad\".\n          \n          \n            \n                 * @param allowedFractionOfBadLines How many lines (provided as a fraction from interval [0, 1]) of the passed sample are allowed to be considered \"bad\".", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r414737789", "createdAt": "2020-04-24T17:20:47Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/FileStructureFinderFactory.java", "diffHunk": "@@ -25,10 +25,11 @@\n      * @param explanation List of reasons for making decisions.  May contain items when passed and new reasons\n      *                    can be appended by this method.\n      * @param sample A sample from the file to be ingested.\n+     * @param allowedFractionOfBadLines How many lines of the passed sample are allowed to be considered \"bad\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NDA5NQ==", "bodyText": "So in your solution the size of the first row determines what is \"normal\", right?\nIf the first row has 5 fields and the rest of the rows have 6 fields each, the file will be rejected even though there is only one \"odd\" row?\nI guess that's ok (it makes the code simpler) but wanted to make sure it is a conscious decision.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r414744095", "createdAt": "2020-04-24T17:30:52Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,16 +536,25 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    if (fieldsInThisRow != fieldsInFirstRow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NDgyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Not {} because more than {} rows did not have the same number of fields as the first row({}). Bad rows {}\",\n          \n          \n            \n                                    \"Not {} because more than {} rows did not have the same number of fields as the first row ({}). Bad rows {}\",", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r414744828", "createdAt": "2020-04-24T17:31:56Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,16 +536,25 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    if (fieldsInThisRow != fieldsInFirstRow) {\n+                        illFormattedRows.add(fieldsInFirstRow);\n+                        continue;\n                     }\n \n                     fieldsInLastRow = fieldsInThisRow;\n                 }\n \n+                // We should only allow a certain percentage of ill formatted rows\n+                // as it may effects our sample sizing and down stream processing\n+                if (illFormattedRows.size() > (allowedFractionOfBadLines * numberOfRows) ) {\n+                    explanation.add(new ParameterizedMessage(\n+                        \"Not {} because more than {} rows did not have the same number of fields as the first row({}). Bad rows {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODEzNQ==", "bodyText": "I would rename it to sth resembling the allowedFractionOfBadLines parameter in the interface, e.g.: DEFAULT_ALLOWED_FRACTION_OF_BAD_LINES.\nAlso I'd consider employing the word \"max\": maxAllowedFractionOfBadLines but I do not feel very strongly about it.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r414748135", "createdAt": "2020-04-24T17:37:40Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinderFactory.java", "diffHunk": "@@ -14,6 +14,7 @@\n \n public class DelimitedFileStructureFinderFactory implements FileStructureFinderFactory {\n \n+    static final double DEFAULT_BAD_ROWS_PERCENTAGE = 0.10d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODU3Mg==", "bodyText": "That's ok for me. There has to be some default and maybe in the future that setting will become user-configurable...", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r414748572", "createdAt": "2020-04-24T17:38:19Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinderFactory.java", "diffHunk": "@@ -14,6 +14,7 @@\n \n public class DelimitedFileStructureFinderFactory implements FileStructureFinderFactory {\n \n+    static final double DEFAULT_BAD_ROWS_PERCENTAGE = 0.10d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMzM3Nw=="}, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjg4MzQ5", "url": "https://github.com/elastic/elasticsearch/pull/55735#pullrequestreview-400688349", "createdAt": "2020-04-27T07:24:50Z", "commit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoyNDo1MFrOGMUkag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0OTo0MVrOGMVgiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3MzA5OA==", "bodyText": "I think it should round up so that if the number of rows is small there's still a tolerance\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (illFormattedRows.size() > (allowedFractionOfBadLines * numberOfRows) ) {\n          \n          \n            \n                            if (illFormattedRows.size() > Math.ceil(allowedFractionOfBadLines * numberOfRows) ) {\n          \n      \n    \n    \n  \n\nBut also, this needs to short-circuit.  Imagine we have been told to analyse 50000 lines that are not delimited.  With this change the code is now going to analyse all 50000 for all 4 default delimiters before ruling out the delimited formats.  And then it's going to provide 4 explanations each listing 49999 line numbers.  Therefore I think that:\n\nThis test needs to be inside the loop above, and break when the condition fails\nThe explanation message that lists bad rows needs to be rephrased to take this into account (see my other comment)", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r415573098", "createdAt": "2020-04-27T07:24:50Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,16 +536,25 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    if (fieldsInThisRow != fieldsInFirstRow) {\n+                        illFormattedRows.add(fieldsInFirstRow);\n+                        continue;\n                     }\n \n                     fieldsInLastRow = fieldsInThisRow;\n                 }\n \n+                // We should only allow a certain percentage of ill formatted rows\n+                // as it may effects our sample sizing and down stream processing\n+                if (illFormattedRows.size() > (allowedFractionOfBadLines * numberOfRows) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NDg4OA==", "bodyText": "The message should be adjusted to take account of short-circuiting in the loop above, for example:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Not {} because more than {} rows did not have the same number of fields as the first row({}). Bad rows {}\",\n          \n          \n            \n                                    \"Not {} because {} or more rows did not have the same number of fields as the first row ({}). Bad rows {}\",", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r415574888", "createdAt": "2020-04-27T07:27:45Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,16 +536,25 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    if (fieldsInThisRow != fieldsInFirstRow) {\n+                        illFormattedRows.add(fieldsInFirstRow);\n+                        continue;\n                     }\n \n                     fieldsInLastRow = fieldsInThisRow;\n                 }\n \n+                // We should only allow a certain percentage of ill formatted rows\n+                // as it may effects our sample sizing and down stream processing\n+                if (illFormattedRows.size() > (allowedFractionOfBadLines * numberOfRows) ) {\n+                    explanation.add(new ParameterizedMessage(\n+                        \"Not {} because more than {} rows did not have the same number of fields as the first row({}). Bad rows {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NDgyOA=="}, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODUyNA==", "bodyText": "Given the way this is used later we need the bad row number.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    illFormattedRows.add(fieldsInFirstRow);\n          \n          \n            \n                                    illFormattedRows.add(numberOfRows - 1);\n          \n      \n    \n    \n  \n\nnumberOfRows - 1 is based on how it was printed in the old explanation.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r415578524", "createdAt": "2020-04-27T07:34:00Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,16 +536,25 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    if (fieldsInThisRow != fieldsInFirstRow) {\n+                        illFormattedRows.add(fieldsInFirstRow);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4ODQ4OQ==", "bodyText": "I think it's OK for this iteration, but remember before this change every single row had to have the same number of fields, so the fact that the code achieved this by anchoring to the number of fields in the first row was an implementation detail.  After this change it becomes the externally visible policy.  But since it would complicate things a lot to change that and the new way of doing things is more tolerant than the old way, let's leave this as-is and see how many people cannot analyze a file because the first row has a different number of fields.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r415588489", "createdAt": "2020-04-27T07:49:41Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,16 +536,25 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    if (fieldsInThisRow != fieldsInFirstRow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NDA5NQ=="}, "originalCommit": {"oid": "bb31b13ba7a177a8602f1d7612b285e4923433cf"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cd2d28eaddb43ba4dce7fda3a886189aff2b48f", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/0cd2d28eaddb43ba4dce7fda3a886189aff2b48f", "committedDate": "2020-04-27T15:06:50Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed2baa6f42da97701d23987dadeeed9a3228f7c", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/9ed2baa6f42da97701d23987dadeeed9a3228f7c", "committedDate": "2020-04-27T15:31:37Z", "message": "Merge branch 'master' into feature/ml-fsf-allow-lenient-delim-parsing-when-specified"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTI1Mjkx", "url": "https://github.com/elastic/elasticsearch/pull/55735#pullrequestreview-401125291", "createdAt": "2020-04-27T16:32:13Z", "commit": {"oid": "9ed2baa6f42da97701d23987dadeeed9a3228f7c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjozMjoxM1rOGMsiCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzowMzoyNVrOGMt-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk2NTcwNg==", "bodyText": "This highlights an interesting dilemma.  In this test it's obvious that the bad row is really bad and should be ignored.  But what if the bad row was this?\n2018-05-17T13:41:34\\n\n\nThen a human interpreting the file would probably say that the row just had an empty message, and should be processed as such.\nI think it would be interesting to look at the specific examples of where people have complained that we couldn't import their CSV files and see if the \"bad\" rows in the real-world examples fall into the category of unusably bad or just missing the last field.  Missing any field other than the last would fall into the category of unusably bad because it would mess up field mapping type analysis.\nThe decision of whether or not we ignore the bad rows should be documented in https://www.elastic.co/guide/en/elasticsearch/reference/master/ml-find-file-structure.html.  Probably the best place to do this is in the description of the delimiter override, where we can tell people that by explicitly specifying the delimiter we're slightly tolerant of bad lines and what happens to the bad lines.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r415965706", "createdAt": "2020-04-27T16:32:13Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinderTests.java", "diffHunk": "@@ -65,14 +65,57 @@ public void testCreateConfigsGivenCompleteCsv() throws Exception {\n         assertEquals(Collections.singletonList(\"ISO8601\"), structure.getJodaTimestampFormats());\n     }\n \n+    public void testCreateConfigsGivenIncompleteCsv() throws Exception {\n+        String sample = \"time,message\\n\" +\n+            \"2018-05-17T13:41:23,hello\\n\" +\n+            \"2018-05-17T13:41:25,hello\\n\" +\n+            \"2018-05-17T13:41:26,hello\\n\" +\n+            \"2018-05-17T13:41:27,hello\\n\" +\n+            \"2018-05-17T13:41:28,hello\\n\" +\n+            \"2018-05-17T13:41:29,hello\\n\" +\n+            \"2018-05-17T13:41:30,hello\\n\" +\n+            \"2018-05-17T13:41:31,hello\\n\" +\n+            \"2018-05-17T13:41:32,hello\\n\" +\n+            \"badrow\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed2baa6f42da97701d23987dadeeed9a3228f7c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NjY1Mw==", "bodyText": "To prove the last line (and maybe the bad line depending on the decision from my other comment) get included, it would be good to assert on the value of structure.getNumMessagesAnalyzed() here.  It should be 10 if the bad line gets excluded and 11 if it gets included.\nI actually don't understand how we're getting past the check at https://github.com/super-csv/super-csv/blob/208d3082cd5cdab39da8873cf741f8b672d1af5b/super-csv/src/main/java/org/supercsv/util/Util.java#L122-L128 which we call from \n  \n    \n      elasticsearch/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java\n    \n    \n        Lines 84 to 85\n      in\n      9521e4f\n    \n    \n    \n    \n\n        \n          \n           Util.filterListToMap(sampleRecord, columnNames, \n        \n\n        \n          \n               trimFields ? row.stream().map(field -> (field == null) ? null : field.trim()).collect(Collectors.toList()) : row); \n        \n    \n  \n\n when we hit the bad row.  SuperCSV throws an exception here, which I would have thought would terminate the analysis, so this may be a sign of some other bug that's existed for a long time or it may be working for some reason I don't understand.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r415976653", "createdAt": "2020-04-27T16:46:33Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinderTests.java", "diffHunk": "@@ -65,14 +65,57 @@ public void testCreateConfigsGivenCompleteCsv() throws Exception {\n         assertEquals(Collections.singletonList(\"ISO8601\"), structure.getJodaTimestampFormats());\n     }\n \n+    public void testCreateConfigsGivenIncompleteCsv() throws Exception {\n+        String sample = \"time,message\\n\" +\n+            \"2018-05-17T13:41:23,hello\\n\" +\n+            \"2018-05-17T13:41:25,hello\\n\" +\n+            \"2018-05-17T13:41:26,hello\\n\" +\n+            \"2018-05-17T13:41:27,hello\\n\" +\n+            \"2018-05-17T13:41:28,hello\\n\" +\n+            \"2018-05-17T13:41:29,hello\\n\" +\n+            \"2018-05-17T13:41:30,hello\\n\" +\n+            \"2018-05-17T13:41:31,hello\\n\" +\n+            \"2018-05-17T13:41:32,hello\\n\" +\n+            \"badrow\\n\" +\n+            \"2018-05-17T13:41:33,hello again\\n\";\n+        assertTrue(\"assertion failed. Explanation \" + explanation,\n+            csvFactory.canCreateFromSample(explanation, sample, 0.10));\n+\n+        String charset = randomFrom(POSSIBLE_CHARSETS);\n+        Boolean hasByteOrderMarker = randomHasByteOrderMarker(charset);\n+        FileStructureFinder structureFinder = csvFactory.createFromSample(explanation, sample, charset, hasByteOrderMarker,\n+            FileStructureFinderManager.DEFAULT_LINE_MERGE_SIZE_LIMIT, FileStructureOverrides.EMPTY_OVERRIDES, NOOP_TIMEOUT_CHECKER);\n+\n+\n+        FileStructure structure = structureFinder.getStructure();\n+\n+        assertEquals(FileStructure.Format.DELIMITED, structure.getFormat());\n+        assertEquals(charset, structure.getCharset());\n+        if (hasByteOrderMarker == null) {\n+            assertNull(structure.getHasByteOrderMarker());\n+        } else {\n+            assertEquals(hasByteOrderMarker, structure.getHasByteOrderMarker());\n+        }\n+        assertEquals(\"^\\\"?time\\\"?,\\\"?message\\\"?\", structure.getExcludeLinesPattern());\n+        assertEquals(\"time\", structure.getTimestampField());\n+        assertEquals(Collections.singletonList(\"ISO8601\"), structure.getJodaTimestampFormats());\n+        assertEquals(Arrays.asList(\"time\", \"message\"), structure.getColumnNames());\n+        assertEquals(Character.valueOf(','), structure.getDelimiter());\n+        assertEquals(Character.valueOf('\"'), structure.getQuote());\n+        assertTrue(structure.getHasHeaderRow());\n+        assertNull(structure.getMultilineStartPattern());\n+        assertNull(structure.getShouldTrimFields());\n+        assertNull(structure.getGrokPattern());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed2baa6f42da97701d23987dadeeed9a3228f7c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4OTM2Nw==", "bodyText": "I think there's a problem here that I didn't think of when I suggested to move the check inside the loop.\nIf the bad row comes very early on then this will trigger when the overall proportion of bad lines in the file is within the tolerance.\nYou should be able to reproduce this by making your bad row the second non-header row in your test case.  At the point it occurs 50% of rows will be bad.\nSo, we need a formula that will short-circuit as soon as it's impossible for the overall percentage to be within the tolerance (which will be on the first bad row in the no overrides case) but not sooner.  Unfortunately we don't know the number of CSV rows for sure because some could be multi-line.  Assuming worst case, let's make the formula work on the basis that every subsequent sample line is one row, and they're all good.  That leads to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (illFormattedRows.size() > Math.ceil(allowedFractionOfBadLines * numberOfRows)) {\n          \n          \n            \n                                    if (illFormattedRows.size() > Math.ceil(allowedFractionOfBadLines * (numberOfRows + numberOfLinesInSample - csvReader.getLineNumber()))) {\n          \n      \n    \n    \n  \n\nThere might be an off-by-one error in that formula depending on exactly what csvReader.getLineNumber() after reading a row.\nThe next problem is that numberOfLinesInSample isn't known in this method.  FileStructureFinderManager.sampleFile() knows it, so you could change that to return it and pass it through to the canCreate___ methods, or maybe there is somewhere else it's more convenient to get it from.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r415989367", "createdAt": "2020-04-27T17:03:25Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,11 +535,22 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    // TODO: might be good one day to gather a distribution of the most common field counts\n+                    // But, this would require iterating (or at least sampling) all the lines.\n+                    if (fieldsInThisRow != fieldsInFirstRow) {\n+                        illFormattedRows.add(numberOfRows - 1);\n+                        // We should only allow a certain percentage of ill formatted rows\n+                        // as it may effects our sample sizing and down stream processing\n+                        if (illFormattedRows.size() > Math.ceil(allowedFractionOfBadLines * numberOfRows)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed2baa6f42da97701d23987dadeeed9a3228f7c"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf49f1bf9537acf4453cc59a5ec54312f33c96ce", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/bf49f1bf9537acf4453cc59a5ec54312f33c96ce", "committedDate": "2020-04-28T15:10:18Z", "message": "more accurately detect bad rows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cbadec1118c2665b7777e324247ea54b612833a", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/0cbadec1118c2665b7777e324247ea54b612833a", "committedDate": "2020-04-28T15:10:30Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-fsf-allow-lenient-delim-parsing-when-specified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4d1f068a0ad464d1ca60fd5a23abbb878338168", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/b4d1f068a0ad464d1ca60fd5a23abbb878338168", "committedDate": "2020-04-28T15:25:24Z", "message": "Merge branch 'feature/ml-fsf-allow-lenient-delim-parsing-when-specified' of github.com:benwtrent/elasticsearch into feature/ml-fsf-allow-lenient-delim-parsing-when-specified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8c4cfca55707c3b405d3fb4761d01721ac71ee", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/5b8c4cfca55707c3b405d3fb4761d01721ac71ee", "committedDate": "2020-04-28T15:27:34Z", "message": "fixing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTc4MzQ3", "url": "https://github.com/elastic/elasticsearch/pull/55735#pullrequestreview-402578347", "createdAt": "2020-04-29T11:28:14Z", "commit": {"oid": "5b8c4cfca55707c3b405d3fb4761d01721ac71ee"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyODoxNFrOGN6lJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyODoxNFrOGN6lJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NDQ1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // `getLineNumber` is a current count of lines, regardless of row count\n          \n          \n            \n                                    // `getLineNumber` is a current count of lines, regardless of row count, so\n          \n          \n            \n                                    // this formula is just an approximation, but gets more accurate the further\n          \n          \n            \n                                    // through the sample you are.", "url": "https://github.com/elastic/elasticsearch/pull/55735#discussion_r417244452", "createdAt": "2020-04-29T11:28:14Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java", "diffHunk": "@@ -529,11 +536,25 @@ static boolean canCreateFromSample(List<String> explanation, String sample, int\n                         --fieldsInThisRow;\n                     }\n \n-                    if (fieldsInLastRow != fieldsInFirstRow) {\n-                        explanation.add(\"Not \" + formatName + \" because row [\" + (numberOfRows - 1) +\n-                            \"] has a different number of fields to the first row: [\" + fieldsInFirstRow + \"] and [\" +\n-                            fieldsInLastRow + \"]\");\n-                        return false;\n+                    // TODO: might be good one day to gather a distribution of the most common field counts\n+                    // But, this would require iterating (or at least sampling) all the lines.\n+                    if (fieldsInThisRow != fieldsInFirstRow) {\n+                        illFormattedRows.add(numberOfRows - 1);\n+                        // This calculation is complicated by the possibility of multi-lined CSV columns\n+                        // `getLineNumber` is a current count of lines, regardless of row count", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8c4cfca55707c3b405d3fb4761d01721ac71ee"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b65b58dc0c0457217fef558f47b680dfde0daa", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/f7b65b58dc0c0457217fef558f47b680dfde0daa", "committedDate": "2020-04-29T11:51:13Z", "message": "Update x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java\n\nCo-Authored-By: David Roberts <dave.roberts@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed6d2d66bae173de23173f88292fb8efe42dd509", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/ed6d2d66bae173de23173f88292fb8efe42dd509", "committedDate": "2020-04-29T12:08:17Z", "message": "Merge branch 'master' into feature/ml-fsf-allow-lenient-delim-parsing-when-specified"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjM3MzY0", "url": "https://github.com/elastic/elasticsearch/pull/55735#pullrequestreview-402637364", "createdAt": "2020-04-29T12:56:05Z", "commit": {"oid": "ed6d2d66bae173de23173f88292fb8efe42dd509"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 573, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}