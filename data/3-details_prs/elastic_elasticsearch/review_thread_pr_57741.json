{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTMyNTU0", "number": 57741, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxODowMFrOEDqI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMTo0M1rOEEyw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcxNTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxODowMFrOGgzj1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODowMjo1MVrOGg9WzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjM3NQ==", "bodyText": "This validation needs to be moved to the validateCompositeTemplate method, that way, when a component template is updated we will still validate the mapping is correct.\nOtherwise a composable template could be added where the mapping is in the component template, and then the component template could be updated to remove the timestamp mapping. Once we move the validation it'll be checked for both index and component templates", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r437052375", "createdAt": "2020-06-08T23:18:00Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -442,9 +444,20 @@ public ClusterState addIndexTemplateV2(final ClusterState currentState, final bo\n \n         validate(name, finalIndexTemplate);\n         logger.info(\"adding index template [{}]\", name);\n-        return ClusterState.builder(currentState)\n+        ClusterState newState = ClusterState.builder(currentState)\n             .metadata(Metadata.builder(currentState.metadata()).put(name, finalIndexTemplate))\n             .build();\n+        if (finalIndexTemplate.getDataStreamTemplate() != null) {\n+            validateDataStreamTemplate(name, finalIndexTemplate, newState);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57104471b3804152a5aebd20277f01cf71214e0b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxMjg3Nw==", "bodyText": "Thanks for catching this. I've placed the validation in the wrong place.", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r437212877", "createdAt": "2020-06-09T08:02:51Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -442,9 +444,20 @@ public ClusterState addIndexTemplateV2(final ClusterState currentState, final bo\n \n         validate(name, finalIndexTemplate);\n         logger.info(\"adding index template [{}]\", name);\n-        return ClusterState.builder(currentState)\n+        ClusterState newState = ClusterState.builder(currentState)\n             .metadata(Metadata.builder(currentState.metadata()).put(name, finalIndexTemplate))\n             .build();\n+        if (finalIndexTemplate.getDataStreamTemplate() != null) {\n+            validateDataStreamTemplate(name, finalIndexTemplate, newState);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjM3NQ=="}, "originalCommit": {"oid": "57104471b3804152a5aebd20277f01cf71214e0b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcxNjg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxODozN1rOGgzkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxODozN1rOGgzkhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjU0OA==", "bodyText": "When moving the validation to the validateCompositeTemplate method we should be able to reuse the mapping generated in that method", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r437052548", "createdAt": "2020-06-08T23:18:37Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -442,9 +444,20 @@ public ClusterState addIndexTemplateV2(final ClusterState currentState, final bo\n \n         validate(name, finalIndexTemplate);\n         logger.info(\"adding index template [{}]\", name);\n-        return ClusterState.builder(currentState)\n+        ClusterState newState = ClusterState.builder(currentState)\n             .metadata(Metadata.builder(currentState.metadata()).put(name, finalIndexTemplate))\n             .build();\n+        if (finalIndexTemplate.getDataStreamTemplate() != null) {\n+            validateDataStreamTemplate(name, finalIndexTemplate, newState);\n+        }\n+        return newState;\n+    }\n+\n+    private void validateDataStreamTemplate(String name, ComposableIndexTemplate finalIndexTemplate, ClusterState state) throws Exception {\n+        String tsFieldName = finalIndexTemplate.getDataStreamTemplate().getTimestampField();\n+        Map<String, Object> finalMapping = parseV2Mappings(\"{}\", resolveMappings(state, name), xContentRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57104471b3804152a5aebd20277f01cf71214e0b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTcwMTkwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDozNjowMFrOGh38xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDozNjowMFrOGh38xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3Mjg2OA==", "bodyText": "Super minor, but can you move this variable definition up to the top of the file (it's nice to have all the vars defined up top where we can see them)", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r438172868", "createdAt": "2020-06-10T14:36:00Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -158,4 +163,20 @@ public static ComposableIndexTemplate lookupTemplateForDataStream(String dataStr\n         return composableIndexTemplate;\n     }\n \n+    private static final Set<String> ALLOWED_TIMESTAMPFIELD_TYPES =\n+        new LinkedHashSet<>(List.of(DateFieldMapper.CONTENT_TYPE, DateFieldMapper.DATE_NANOS_CONTENT_TYPE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca0e0e8b168c581cb54b54f4f8dca740aec5af"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTczMTQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDo0MjowNFrOGh4PNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjozMjozN1rOGiQNfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NzU4OA==", "bodyText": "Unfortunately, I don't think this will work for nested fields, for example the following fails on this PR:\nPUT /_index_template/generic\n{\n  \"index_patterns\": [\"logs-*\"],\n  \"data_stream\": {\n    \"timestamp_field\": \"foo.timestamp\"\n  },\n  \"template\": {\n    \"mappings\": {\n      \"properties\": {\n        \"foo\": {\n          \"properties\": {\n            \"timestamp\": {\n              \"type\": \"date\"\n            }\n          }\n        }\n      }\n    }\n  }\n}", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r438177588", "createdAt": "2020-06-10T14:42:04Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -158,4 +163,20 @@ public static ComposableIndexTemplate lookupTemplateForDataStream(String dataStr\n         return composableIndexTemplate;\n     }\n \n+    private static final Set<String> ALLOWED_TIMESTAMPFIELD_TYPES =\n+        new LinkedHashSet<>(List.of(DateFieldMapper.CONTENT_TYPE, DateFieldMapper.DATE_NANOS_CONTENT_TYPE));\n+\n+    public static void validateTimestampFieldMapping(String timestampFieldName, Map<?, ?> mapping) {\n+        String timestampFieldMapperPath = \"properties.\" + timestampFieldName;\n+        Map<?, ?> timestampFieldMapper = ObjectPath.eval(timestampFieldMapperPath, mapping);\n+        if (timestampFieldMapper == null) {\n+            throw new IllegalArgumentException(\"expected timestamp field [\" + timestampFieldName + \"], but found no timestamp field\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca0e0e8b168c581cb54b54f4f8dca740aec5af"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MzcyOQ==", "bodyText": "Let me check, I assumed that ObjectPath.eval(...) handles nested fields.", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r438563729", "createdAt": "2020-06-11T06:13:51Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -158,4 +163,20 @@ public static ComposableIndexTemplate lookupTemplateForDataStream(String dataStr\n         return composableIndexTemplate;\n     }\n \n+    private static final Set<String> ALLOWED_TIMESTAMPFIELD_TYPES =\n+        new LinkedHashSet<>(List.of(DateFieldMapper.CONTENT_TYPE, DateFieldMapper.DATE_NANOS_CONTENT_TYPE));\n+\n+    public static void validateTimestampFieldMapping(String timestampFieldName, Map<?, ?> mapping) {\n+        String timestampFieldMapperPath = \"properties.\" + timestampFieldName;\n+        Map<?, ?> timestampFieldMapper = ObjectPath.eval(timestampFieldMapperPath, mapping);\n+        if (timestampFieldMapper == null) {\n+            throw new IllegalArgumentException(\"expected timestamp field [\" + timestampFieldName + \"], but found no timestamp field\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NzU4OA=="}, "originalCommit": {"oid": "3eca0e0e8b168c581cb54b54f4f8dca740aec5af"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3MDM2NA==", "bodyText": "\ud83e\udd26", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r438570364", "createdAt": "2020-06-11T06:32:37Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -158,4 +163,20 @@ public static ComposableIndexTemplate lookupTemplateForDataStream(String dataStr\n         return composableIndexTemplate;\n     }\n \n+    private static final Set<String> ALLOWED_TIMESTAMPFIELD_TYPES =\n+        new LinkedHashSet<>(List.of(DateFieldMapper.CONTENT_TYPE, DateFieldMapper.DATE_NANOS_CONTENT_TYPE));\n+\n+    public static void validateTimestampFieldMapping(String timestampFieldName, Map<?, ?> mapping) {\n+        String timestampFieldMapperPath = \"properties.\" + timestampFieldName;\n+        Map<?, ?> timestampFieldMapper = ObjectPath.eval(timestampFieldMapperPath, mapping);\n+        if (timestampFieldMapper == null) {\n+            throw new IllegalArgumentException(\"expected timestamp field [\" + timestampFieldName + \"], but found no timestamp field\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NzU4OA=="}, "originalCommit": {"oid": "3eca0e0e8b168c581cb54b54f4f8dca740aec5af"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYxNDkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMTo0M1rOGio3FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMTo0M1rOGio3FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NDIyOA==", "bodyText": "Super minor:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"expected timestamp field [\" + timestampFieldName + \"] to be of types [\" +\n          \n          \n            \n                            ALLOWED_TIMESTAMPFIELD_TYPES + \"], but instead found type [\" + type  + \"]\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"expected timestamp field [\" + timestampFieldName + \"] to be of types \" +\n          \n          \n            \n                            ALLOWED_TIMESTAMPFIELD_TYPES + \", but instead found type [\" + type  + \"]\");\n          \n      \n    \n    \n  \n\nTo avoid the [[]] double brackets", "url": "https://github.com/elastic/elasticsearch/pull/57741#discussion_r438974228", "createdAt": "2020-06-11T18:01:43Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -158,4 +165,16 @@ public static ComposableIndexTemplate lookupTemplateForDataStream(String dataStr\n         return composableIndexTemplate;\n     }\n \n+    public static void validateTimestampFieldMapping(String timestampFieldName, MapperService mapperService) {\n+        MappedFieldType timestampFieldMapper = mapperService.fieldType(timestampFieldName);\n+        if (timestampFieldMapper == null) {\n+            throw new IllegalArgumentException(\"expected timestamp field [\" + timestampFieldName + \"], but found no timestamp field\");\n+        }\n+        String type = timestampFieldMapper.typeName();\n+        if (ALLOWED_TIMESTAMPFIELD_TYPES.contains(type) == false) {\n+            throw new IllegalArgumentException(\"expected timestamp field [\" + timestampFieldName + \"] to be of types [\" +\n+                ALLOWED_TIMESTAMPFIELD_TYPES + \"], but instead found type [\" + type  + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d873ee0fb501fb1a7808dc4cb6d7f78cc2888f"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3578, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}