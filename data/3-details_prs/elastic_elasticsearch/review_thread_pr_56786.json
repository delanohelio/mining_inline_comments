{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MTUyODM5", "number": 56786, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1MDoyNlrOD8zqDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxMDozMlrOD87oww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDg3NTAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/FoldableNumericAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1MDoyNlrOGV-KPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1MDoyNlrOGV-KPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MTcxMA==", "bodyText": "I don't see much value in this class. It could be used as a marker but then an interface would be a better choice. The localFoldable methods are convenient but also confusing - first because folding should happen all the time (whether local or remote) and second because they can't actually fold without outside context.\nThat is, the two methods are not self sufficient, they need an external entity to work with them. And that entity already has access to their structure so instead of having the logic in two places, it can simply be moved into the rules.", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425691710", "createdAt": "2020-05-15T09:50:26Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/FoldableNumericAggregate.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.sql.expression.function.aggregate;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataTypeConverter;\n+import org.elasticsearch.xpack.ql.util.Check;\n+\n+import java.util.List;\n+\n+public abstract class FoldableNumericAggregate extends NumericAggregate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDg3NzQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Stats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1MToxNVrOGV-Lyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1MToxNVrOGV-Lyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MjEwNw==", "bodyText": "Is this really needed? The replacing happens in the optimization phase where the aggregations should be replaced already with a different construct.", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425692107", "createdAt": "2020-05-15T09:51:15Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Stats.java", "diffHunk": "@@ -31,6 +31,7 @@ public Stats replaceChildren(List<Expression> newChildren) {\n     }\n \n     public static boolean isTypeCompatible(Expression e) {\n-        return e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum;\n+        return (e instanceof Min || e instanceof Max || e instanceof Avg || e instanceof Sum)\n+            && ((FoldableNumericAggregate) e).localFoldable() == false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDg4MjMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1Mjo1NVrOGV-PEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1Mjo1NVrOGV-PEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5Mjk0Ng==", "bodyText": "I think it's more appropriate to name this:\nReplaceAggregatesWithLiterals", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425692946", "createdAt": "2020-05-15T09:52:55Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -772,6 +782,63 @@ private Expression simplify(BinaryComparison bc) {\n         }\n     }\n \n+    /**\n+     * Any numeric aggregates (avg, min, max, sum) acting on literals are converted to an iif(count(1)=0, null, literal*count(1)) for sum,\n+     * and to iif(count(1)=0,null,literal) for the other three.\n+     */\n+    private static class ReplaceAggregatesOfLiterals extends OptimizerRule<LogicalPlan> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDk3ODcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyMjo1OFrOGV_L4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyMjo1OFrOGV_L4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwODUxNQ==", "bodyText": "nit: To keep the result data type consistent we could move those 2 lines inside the trasformation as:\n Expression countOne = new Cast(EMPTY, new Count(EMPTY, new Literal(Source.EMPTY, 1, fna.dataType()), false), fna.dataType());\n                        Equals countEqZero = new Equals(EMPTY, countOne, new Literal(Source.EMPTY, 0, fna.dataType()));", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425708515", "createdAt": "2020-05-15T10:22:58Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -772,6 +782,63 @@ private Expression simplify(BinaryComparison bc) {\n         }\n     }\n \n+    /**\n+     * Any numeric aggregates (avg, min, max, sum) acting on literals are converted to an iif(count(1)=0, null, literal*count(1)) for sum,\n+     * and to iif(count(1)=0,null,literal) for the other three.\n+     */\n+    private static class ReplaceAggregatesOfLiterals extends OptimizerRule<LogicalPlan> {\n+\n+        @Override\n+        protected LogicalPlan rule(LogicalPlan p) {\n+            Holder<Boolean> isLocalRelation = new Holder<>(false);\n+            p.forEachUp(a -> {\n+                if (isLocalRelation.get() == false && a instanceof LocalRelation) {\n+                    isLocalRelation.set(true);\n+                }\n+            });\n+            \n+            // there is no need for a IIF(COUNT(1)=0,NULL,literal) for local relations, since the aggregate will be folded further down\n+            if (isLocalRelation.get()) {\n+                return p;\n+            }\n+\n+            Expression countOne = new Count(EMPTY, new Literal(Source.EMPTY, 1, DataTypes.LONG), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDk4MjY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyNDowNVrOGV_OTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyNDowNVrOGV_OTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwOTEzNQ==", "bodyText": "again for keeping the correct datatype: new Literal(argument.source(), argument.fold(), fna.dataType())", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425709135", "createdAt": "2020-05-15T10:24:05Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -772,6 +782,63 @@ private Expression simplify(BinaryComparison bc) {\n         }\n     }\n \n+    /**\n+     * Any numeric aggregates (avg, min, max, sum) acting on literals are converted to an iif(count(1)=0, null, literal*count(1)) for sum,\n+     * and to iif(count(1)=0,null,literal) for the other three.\n+     */\n+    private static class ReplaceAggregatesOfLiterals extends OptimizerRule<LogicalPlan> {\n+\n+        @Override\n+        protected LogicalPlan rule(LogicalPlan p) {\n+            Holder<Boolean> isLocalRelation = new Holder<>(false);\n+            p.forEachUp(a -> {\n+                if (isLocalRelation.get() == false && a instanceof LocalRelation) {\n+                    isLocalRelation.set(true);\n+                }\n+            });\n+            \n+            // there is no need for a IIF(COUNT(1)=0,NULL,literal) for local relations, since the aggregate will be folded further down\n+            if (isLocalRelation.get()) {\n+                return p;\n+            }\n+\n+            Expression countOne = new Count(EMPTY, new Literal(Source.EMPTY, 1, DataTypes.LONG), false);\n+            Equals countEqZero = new Equals(EMPTY, countOne, new Literal(Source.EMPTY, 0, DataTypes.LONG));\n+            \n+            LogicalPlan plan = p.transformExpressionsUp(e -> {\n+                Expression exp = e;\n+                String aliasName = null;\n+                if (exp instanceof Alias) {\n+                    exp = ((Alias) exp).child();\n+                    aliasName = ((Alias) e).name();\n+                }\n+\n+                if (exp instanceof FoldableNumericAggregate) {\n+                    FoldableNumericAggregate fna = (FoldableNumericAggregate) exp;\n+                    \n+                    if (fna.localFoldable()) {\n+                        Expression argument = fna.field();\n+                        Expression iifElseResult;\n+                        \n+                        if (exp instanceof Sum) {\n+                            iifElseResult = new Mul(new Source(Location.EMPTY, \"MUL(COUNT(1), \" + argument.sourceText() + \")\"), countOne,\n+                                Literal.of(argument));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDk4NTE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyNDo1MVrOGV_P6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyNDo1MVrOGV_P6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwOTU0Ng==", "bodyText": "and here: iifElseResult =  new Literal(argument.source(), argument.fold(), fna.dataType());", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425709546", "createdAt": "2020-05-15T10:24:51Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -772,6 +782,63 @@ private Expression simplify(BinaryComparison bc) {\n         }\n     }\n \n+    /**\n+     * Any numeric aggregates (avg, min, max, sum) acting on literals are converted to an iif(count(1)=0, null, literal*count(1)) for sum,\n+     * and to iif(count(1)=0,null,literal) for the other three.\n+     */\n+    private static class ReplaceAggregatesOfLiterals extends OptimizerRule<LogicalPlan> {\n+\n+        @Override\n+        protected LogicalPlan rule(LogicalPlan p) {\n+            Holder<Boolean> isLocalRelation = new Holder<>(false);\n+            p.forEachUp(a -> {\n+                if (isLocalRelation.get() == false && a instanceof LocalRelation) {\n+                    isLocalRelation.set(true);\n+                }\n+            });\n+            \n+            // there is no need for a IIF(COUNT(1)=0,NULL,literal) for local relations, since the aggregate will be folded further down\n+            if (isLocalRelation.get()) {\n+                return p;\n+            }\n+\n+            Expression countOne = new Count(EMPTY, new Literal(Source.EMPTY, 1, DataTypes.LONG), false);\n+            Equals countEqZero = new Equals(EMPTY, countOne, new Literal(Source.EMPTY, 0, DataTypes.LONG));\n+            \n+            LogicalPlan plan = p.transformExpressionsUp(e -> {\n+                Expression exp = e;\n+                String aliasName = null;\n+                if (exp instanceof Alias) {\n+                    exp = ((Alias) exp).child();\n+                    aliasName = ((Alias) e).name();\n+                }\n+\n+                if (exp instanceof FoldableNumericAggregate) {\n+                    FoldableNumericAggregate fna = (FoldableNumericAggregate) exp;\n+                    \n+                    if (fna.localFoldable()) {\n+                        Expression argument = fna.field();\n+                        Expression iifElseResult;\n+                        \n+                        if (exp instanceof Sum) {\n+                            iifElseResult = new Mul(new Source(Location.EMPTY, \"MUL(COUNT(1), \" + argument.sourceText() + \")\"), countOne,\n+                                Literal.of(argument));\n+                        } else {\n+                            iifElseResult = Literal.of(argument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDk5NjcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyODozMlrOGV_XIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoyODozMlrOGV_XIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxMTM5NQ==", "bodyText": "return new Alias(iif.source(), aliasName == null ? iif.sourceText() : aliasName, iif)", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425711395", "createdAt": "2020-05-15T10:28:32Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -772,6 +782,63 @@ private Expression simplify(BinaryComparison bc) {\n         }\n     }\n \n+    /**\n+     * Any numeric aggregates (avg, min, max, sum) acting on literals are converted to an iif(count(1)=0, null, literal*count(1)) for sum,\n+     * and to iif(count(1)=0,null,literal) for the other three.\n+     */\n+    private static class ReplaceAggregatesOfLiterals extends OptimizerRule<LogicalPlan> {\n+\n+        @Override\n+        protected LogicalPlan rule(LogicalPlan p) {\n+            Holder<Boolean> isLocalRelation = new Holder<>(false);\n+            p.forEachUp(a -> {\n+                if (isLocalRelation.get() == false && a instanceof LocalRelation) {\n+                    isLocalRelation.set(true);\n+                }\n+            });\n+            \n+            // there is no need for a IIF(COUNT(1)=0,NULL,literal) for local relations, since the aggregate will be folded further down\n+            if (isLocalRelation.get()) {\n+                return p;\n+            }\n+\n+            Expression countOne = new Count(EMPTY, new Literal(Source.EMPTY, 1, DataTypes.LONG), false);\n+            Equals countEqZero = new Equals(EMPTY, countOne, new Literal(Source.EMPTY, 0, DataTypes.LONG));\n+            \n+            LogicalPlan plan = p.transformExpressionsUp(e -> {\n+                Expression exp = e;\n+                String aliasName = null;\n+                if (exp instanceof Alias) {\n+                    exp = ((Alias) exp).child();\n+                    aliasName = ((Alias) e).name();\n+                }\n+\n+                if (exp instanceof FoldableNumericAggregate) {\n+                    FoldableNumericAggregate fna = (FoldableNumericAggregate) exp;\n+                    \n+                    if (fna.localFoldable()) {\n+                        Expression argument = fna.field();\n+                        Expression iifElseResult;\n+                        \n+                        if (exp instanceof Sum) {\n+                            iifElseResult = new Mul(new Source(Location.EMPTY, \"MUL(COUNT(1), \" + argument.sourceText() + \")\"), countOne,\n+                                Literal.of(argument));\n+                        } else {\n+                            iifElseResult = Literal.of(argument);\n+                        }\n+                        Source source = new Source(fna.sourceLocation(), \"IIF(COUNT(1) = 0, NULL, \" + iifElseResult.sourceText() + \")\");\n+                            \n+                        Iif iif = new Iif(source, countEqZero, Literal.NULL, iifElseResult);\n+                        return aliasName == null ? Expressions.wrapAsNamed(iif) : new Alias(iif.source(), aliasName, iif);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTAwNDY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDozMToxMlrOGV_cIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDozMToxMlrOGV_cIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxMjY3NA==", "bodyText": "Question: Is it necessary to provide new Source? It will be useful for debugging but couldn't lead to user's confusion if it's sees the transformation?", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425712674", "createdAt": "2020-05-15T10:31:12Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -772,6 +782,63 @@ private Expression simplify(BinaryComparison bc) {\n         }\n     }\n \n+    /**\n+     * Any numeric aggregates (avg, min, max, sum) acting on literals are converted to an iif(count(1)=0, null, literal*count(1)) for sum,\n+     * and to iif(count(1)=0,null,literal) for the other three.\n+     */\n+    private static class ReplaceAggregatesOfLiterals extends OptimizerRule<LogicalPlan> {\n+\n+        @Override\n+        protected LogicalPlan rule(LogicalPlan p) {\n+            Holder<Boolean> isLocalRelation = new Holder<>(false);\n+            p.forEachUp(a -> {\n+                if (isLocalRelation.get() == false && a instanceof LocalRelation) {\n+                    isLocalRelation.set(true);\n+                }\n+            });\n+            \n+            // there is no need for a IIF(COUNT(1)=0,NULL,literal) for local relations, since the aggregate will be folded further down\n+            if (isLocalRelation.get()) {\n+                return p;\n+            }\n+\n+            Expression countOne = new Count(EMPTY, new Literal(Source.EMPTY, 1, DataTypes.LONG), false);\n+            Equals countEqZero = new Equals(EMPTY, countOne, new Literal(Source.EMPTY, 0, DataTypes.LONG));\n+            \n+            LogicalPlan plan = p.transformExpressionsUp(e -> {\n+                Expression exp = e;\n+                String aliasName = null;\n+                if (exp instanceof Alias) {\n+                    exp = ((Alias) exp).child();\n+                    aliasName = ((Alias) e).name();\n+                }\n+\n+                if (exp instanceof FoldableNumericAggregate) {\n+                    FoldableNumericAggregate fna = (FoldableNumericAggregate) exp;\n+                    \n+                    if (fna.localFoldable()) {\n+                        Expression argument = fna.field();\n+                        Expression iifElseResult;\n+                        \n+                        if (exp instanceof Sum) {\n+                            iifElseResult = new Mul(new Source(Location.EMPTY, \"MUL(COUNT(1), \" + argument.sourceText() + \")\"), countOne,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254b06064a8ae9ee1fef7c37872fd7e45da96032"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTk2MjM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxMTowMVrOGWI7mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxMTowMVrOGWI7mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2ODE4Ng==", "bodyText": "Just fyi, the last two columns shifted one position to the left (but they are still legible, so that's fine).\nIt might be worth using the alias in the filter, where it makes sense.\nBut otherwise nice tests.", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425868186", "createdAt": "2020-05-15T15:11:01Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec", "diffHunk": "@@ -175,6 +175,91 @@ F    |F          |1666196|1666196        |1666196\n M    |M          |2671054|2671054        |2671054\n ;\n \n+sumLiteralWithTrueConditionAndHavingWithCount\n+SELECT SUM(1) AS c FROM test_emp WHERE 'a'='a' HAVING COUNT(1) > 0;\n+\n+      c:i       \n+---------------\n+100     \n+;       \n+\n+sumLiteralWithTwoConditionsAndGroupByField\n+SELECT SUM(10) AS s10, birth_date, SUM(1) AS c FROM test_emp WHERE (birth_date >= {ts '1959-01-01 00:00:00'}) AND (birth_date <= {ts '1959-12-31 23:59:59'}) GROUP BY 2;\n+\n+    s10:l      |      birth_date:ts     |       c:l       \n+---------------+------------------------+---------------\n+10             |1959-01-27T00:00:00.000Z|1              \n+10             |1959-04-07T00:00:00.000Z|1              \n+20             |1959-07-23T00:00:00.000Z|2              \n+10             |1959-08-10T00:00:00.000Z|1              \n+10             |1959-08-19T00:00:00.000Z|1              \n+10             |1959-10-01T00:00:00.000Z|1              \n+10             |1959-12-03T00:00:00.000Z|1              \n+10             |1959-12-25T00:00:00.000Z|1              \n+;\n+\n+sumLiteralWithGroupByAndTwoConditionsOnSum\n+SELECT first_name, SUM(1) AS c FROM test_emp GROUP BY 1 HAVING ((SUM(1) >= 0) AND (SUM(1) <= 577)) LIMIT 10;\n+\n+ first_name:s  |       c:l       \n+---------------+---------------\n+null           |10             \n+Alejandro      |1              \n+Amabile        |1              \n+Anneke         |1              \n+Anoosh         |1              \n+Arumugam       |1              \n+Basil          |1              \n+Berhard        |1              \n+Berni          |1              \n+Bezalel        |1              \n+;\n+\n+sumFieldWithSumLiteralAsCondition\n+SELECT first_name, last_name, SUM(salary) AS s, birth_date AS y, COUNT(1) FROM test_emp GROUP BY 1, 2, 4 HAVING ((SUM(1) >= 1) AND (SUM(1) <= 577)) AND ((SUM(salary) >= 35000) AND (SUM(salary) <= 45000));\n+\n+  first_name:s |   last_name:s |       s:i     |           y:ts         |   COUNT(1):l    \n+---------------+---------------+---------------+------------------------+---------------\n+null           |Brender        |36051        |1959-10-01T00:00:00.000Z|1              ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4c5c96348b457dcf487107b9aa906aa1003c637"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjE4MjQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxMDozMlrOGWLH3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxMDozMlrOGWLH3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwNDA5NA==", "bodyText": "I think we could return LONG here as COUNT is always LONG.", "url": "https://github.com/elastic/elasticsearch/pull/56786#discussion_r425904094", "createdAt": "2020-05-15T16:10:32Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -839,6 +819,21 @@ protected LogicalPlan rule(LogicalPlan p) {\n         }\n     }\n \n+    /**\n+     * A COUNT in a local relation will always be 1.\n+     */\n+    private static class ReplaceCountInLocalRelation extends OptimizerRule<Aggregate> {\n+\n+        @Override\n+        protected LogicalPlan rule(Aggregate a) {\n+            boolean hasLocalRelation = a.anyMatch(LocalRelation.class::isInstance);\n+            \n+            return hasLocalRelation ? a.transformExpressionsDown(c -> {\n+                return c instanceof Count ? new Literal(c.source(), 1, DataTypes.INTEGER) : c;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ea85c37b4ebe783c13d0b2b05297de7bf90fd9"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 430, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}