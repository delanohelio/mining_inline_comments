{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzYxMTMz", "number": 55422, "title": "Test: MockScoreScript can be cacheable", "bodyText": "", "createdAt": "2020-04-17T22:05:43Z", "url": "https://github.com/elastic/elasticsearch/pull/55422", "merged": true, "mergeCommit": {"oid": "0ed1eb5994338292a6342e7320faf4127c66dba0"}, "closed": true, "closedAt": "2020-04-20T20:16:14Z", "author": {"login": "stu-elastic"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYorkDgH2gAyNDA1MzYxMTMzOmJiYjFiNDRkOGQxN2QxZWQ5MmMyOWE1YzU3ZDRmOTViYWJlODNmMmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZj1-IgH2gAyNDA1MzYxMTMzOjBjMzkxOGYyNDVmMTRjNmJmYWFmNDExZWViM2RlYjgyZTJiZTNlMmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bbb1b44d8d17d1ed92c29a5c57d4f95babe83f2a", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/bbb1b44d8d17d1ed92c29a5c57d4f95babe83f2a", "committedDate": "2020-04-17T22:04:03Z", "message": "Test: MockScoreScript can be cacheable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700334acf7508a8ce2bc19c64c5a00c0a6ac6bad", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/700334acf7508a8ce2bc19c64c5a00c0a6ac6bad", "committedDate": "2020-04-17T22:12:08Z", "message": "Update MockPainlessScriptEngine's MockScoreScript construction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b06e1560bddff0677fffa0a7a08161e49238f0", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/06b06e1560bddff0677fffa0a7a08161e49238f0", "committedDate": "2020-04-17T22:12:32Z", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into test/score-script-cacheable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/452bae2f6c9c557fc4c778fb486d25e2ad86d9f1", "committedDate": "2020-04-17T22:41:36Z", "message": "Update ScriptScoreQuery cacheability test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODMyODE4", "url": "https://github.com/elastic/elasticsearch/pull/55422#pullrequestreview-395832818", "createdAt": "2020-04-18T00:10:50Z", "commit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Njk5NTM1", "url": "https://github.com/elastic/elasticsearch/pull/55422#pullrequestreview-396699535", "createdAt": "2020-04-20T18:18:54Z", "commit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoxODo1NFrOGIhj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyMTowM1rOGIho0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTY3OQ==", "bodyText": "\"script should query should be cacheable: \"  -> \"function script query should be cacheable\"", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411591679", "createdAt": "2020-04-20T18:18:54Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTg4NQ==", "bodyText": "\"random score should query should not be cacheable: \"  -> \"function random query should not be cacheable: \"", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411591885", "createdAt": "2020-04-20T18:19:15Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n \n-            context = createShardContext();\n-            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n-            assertNotNull(rewriteQuery.toQuery(context));\n-            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n-        }\n+        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertFalse(\"random score should query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MjkxMw==", "bodyText": "We also need to remove ScriptScoreFunctionBuilder as a condition for false in the isCacheable function (line 861-862), as for ScriptScoreFunctionBuilder case we want to return true.", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411592913", "createdAt": "2020-04-20T18:21:03Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n \n-            context = createShardContext();\n-            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n-            assertNotNull(rewriteQuery.toQuery(context));\n-            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n-        }\n+        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertFalse(\"random score should query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTg4NQ=="}, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d527ccbede9d1d9791a56c9f063f2ea35dfc18", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/e9d527ccbede9d1d9791a56c9f063f2ea35dfc18", "committedDate": "2020-04-20T18:45:32Z", "message": "Better assert messages, rm ScriptScoreFunctionBuilder from isCacheable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2db357b7aa24877d9832c53387721cb1dbd053b8", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/2db357b7aa24877d9832c53387721cb1dbd053b8", "committedDate": "2020-04-20T18:46:57Z", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into test/score-script-cacheable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c3918f245f14c6bfaaf411eeb3deb82e2be3e2a", "author": {"user": {"login": "stu-elastic", "name": "Stuart Tettemer"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c3918f245f14c6bfaaf411eeb3deb82e2be3e2a", "committedDate": "2020-04-20T18:59:49Z", "message": "Update MockScoreScript in MlNativeIntegTestCase"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3308, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}