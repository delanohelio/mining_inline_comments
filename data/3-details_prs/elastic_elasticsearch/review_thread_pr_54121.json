{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjAxMTY2", "number": 54121, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTowMTozN1rODq7hDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowNzozOFrODtNGWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzQxOTAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/SecondaryAuthentication.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTowMTozN1rOF6-6yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTowMTozN1rOF6-6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5MjU4NQ==", "bodyText": "@tvernum I made this public so that it is accessible to the ML plugin", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r397392585", "createdAt": "2020-03-24T19:01:37Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/SecondaryAuthentication.java", "diffHunk": "@@ -24,7 +24,7 @@\n  */\n public class SecondaryAuthentication {\n \n-    private static final String THREAD_CTX_KEY = \"_xpack_security_secondary_authc\";\n+    public static final String THREAD_CTX_KEY = \"_xpack_security_secondary_authc\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cfb12b7dc91c147567e4ca66b635f012df4a01"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzQzMjY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/AuthHeadersExtractor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTowNTozOVrOF6_DrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoxODoxMFrOF_odpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDg2MQ==", "bodyText": "@tvernum We are storing _xpack_security_secondary_authc as the primary auth for some of our tasks. This way we \"prefer\" the secondary auth if it was provided.\nIs simply replacing _xpack_security_authentication with the contents of _xpack_security_secondary_authc acceptable? Or are there technical limitations/details that I am missing?", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r397394861", "createdAt": "2020-03-24T19:05:39Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/AuthHeadersExtractor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils;\n+\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.security.authc.AuthenticationField;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public final class AuthHeadersExtractor {\n+\n+    private AuthHeadersExtractor() {}\n+\n+    public static Map<String, String> extractAuthHeadersAndPreferSecondaryAuth(ThreadContext context) {\n+        Map<String, String> threadHeaders = context.getHeaders();\n+        if (threadHeaders == null || threadHeaders.isEmpty()) {\n+            return new HashMap<>();\n+        }\n+\n+        Map<String, String> headers = threadHeaders.entrySet().stream()\n+            .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        String secondaryAuth = headers.get(SecondaryAuthentication.THREAD_CTX_KEY);\n+        if (secondaryAuth != null) {\n+            headers.put(AuthenticationField.AUTHENTICATION_KEY, secondaryAuth);\n+        }\n+        return headers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cfb12b7dc91c147567e4ca66b635f012df4a01"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NDQzMw==", "bodyText": "Following the test you did yesterday this looks like it works as intended now.", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r401074433", "createdAt": "2020-03-31T17:06:21Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/AuthHeadersExtractor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils;\n+\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.security.authc.AuthenticationField;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public final class AuthHeadersExtractor {\n+\n+    private AuthHeadersExtractor() {}\n+\n+    public static Map<String, String> extractAuthHeadersAndPreferSecondaryAuth(ThreadContext context) {\n+        Map<String, String> threadHeaders = context.getHeaders();\n+        if (threadHeaders == null || threadHeaders.isEmpty()) {\n+            return new HashMap<>();\n+        }\n+\n+        Map<String, String> headers = threadHeaders.entrySet().stream()\n+            .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        String secondaryAuth = headers.get(SecondaryAuthentication.THREAD_CTX_KEY);\n+        if (secondaryAuth != null) {\n+            headers.put(AuthenticationField.AUTHENTICATION_KEY, secondaryAuth);\n+        }\n+        return headers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDg2MQ=="}, "originalCommit": {"oid": "30cfb12b7dc91c147567e4ca66b635f012df4a01"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0Nzc5MQ==", "bodyText": "This isn't how I expected you would do it...\nI had presumed that you would activate the secondary authentication so that it became the only authentication and then just do what you've always done.\nSomething like:\nRunnable body = () -> {\n   final Map<String, String> headers = threadPool.getThreadContext().getHeaders();   \n   datafeedConfigProvider.updateDatefeedConfig(\n            request.getUpdate().getId(),\n            request.getUpdate(),\n            headers,\n            jobConfigProvider::validateDatafeedJob,\n            ActionListener.wrap(\n                updatedConfig -> listener.onResponse(new PutDatafeedAction.Response(updatedConfig)),\n                listener::onFailure));\n};\nSecondaryAuthentication secondaryAuth = SecondaryAuthentication.readFromContext(securityContext);\nif (secondaryAuth != null) {\n body = secondaryAuth.wrap(body);\n}\nbody.run();\n\nWe could definitely, reduce some of that boilerplate and move it into SecondaryAuthentication if it would help, but the above is how I expected secondary auth to be used.", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r402047791", "createdAt": "2020-04-02T04:40:59Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/AuthHeadersExtractor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils;\n+\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.security.authc.AuthenticationField;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public final class AuthHeadersExtractor {\n+\n+    private AuthHeadersExtractor() {}\n+\n+    public static Map<String, String> extractAuthHeadersAndPreferSecondaryAuth(ThreadContext context) {\n+        Map<String, String> threadHeaders = context.getHeaders();\n+        if (threadHeaders == null || threadHeaders.isEmpty()) {\n+            return new HashMap<>();\n+        }\n+\n+        Map<String, String> headers = threadHeaders.entrySet().stream()\n+            .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        String secondaryAuth = headers.get(SecondaryAuthentication.THREAD_CTX_KEY);\n+        if (secondaryAuth != null) {\n+            headers.put(AuthenticationField.AUTHENTICATION_KEY, secondaryAuth);\n+        }\n+        return headers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDg2MQ=="}, "originalCommit": {"oid": "30cfb12b7dc91c147567e4ca66b635f012df4a01"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1OTc1OQ==", "bodyText": "@tvernum we need the headers to be respected by _search and apply the roles that are stored in that context.\nDo the other APIs respect secondary auth headers?\nAnother pain point is BWC. As a 'new' datafeed created with secondary auth headers could be used on an 'old' node. Then security would know nothing of the secondary auth concept and the datafeed would fail.", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r402259759", "createdAt": "2020-04-02T12:03:46Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/AuthHeadersExtractor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils;\n+\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.security.authc.AuthenticationField;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public final class AuthHeadersExtractor {\n+\n+    private AuthHeadersExtractor() {}\n+\n+    public static Map<String, String> extractAuthHeadersAndPreferSecondaryAuth(ThreadContext context) {\n+        Map<String, String> threadHeaders = context.getHeaders();\n+        if (threadHeaders == null || threadHeaders.isEmpty()) {\n+            return new HashMap<>();\n+        }\n+\n+        Map<String, String> headers = threadHeaders.entrySet().stream()\n+            .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        String secondaryAuth = headers.get(SecondaryAuthentication.THREAD_CTX_KEY);\n+        if (secondaryAuth != null) {\n+            headers.put(AuthenticationField.AUTHENTICATION_KEY, secondaryAuth);\n+        }\n+        return headers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDg2MQ=="}, "originalCommit": {"oid": "30cfb12b7dc91c147567e4ca66b635f012df4a01"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NzU1Ng==", "bodyText": "Ah, I think I understand. secondaryAuth.wrap changes the stored headers so that the secondary auth header becomes the Authorization header.\nSeems more idiomatic than iterating a map :). Let experiment and see if I can get it to work this way.", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r402267556", "createdAt": "2020-04-02T12:18:10Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/AuthHeadersExtractor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils;\n+\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.security.authc.AuthenticationField;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public final class AuthHeadersExtractor {\n+\n+    private AuthHeadersExtractor() {}\n+\n+    public static Map<String, String> extractAuthHeadersAndPreferSecondaryAuth(ThreadContext context) {\n+        Map<String, String> threadHeaders = context.getHeaders();\n+        if (threadHeaders == null || threadHeaders.isEmpty()) {\n+            return new HashMap<>();\n+        }\n+\n+        Map<String, String> headers = threadHeaders.entrySet().stream()\n+            .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        String secondaryAuth = headers.get(SecondaryAuthentication.THREAD_CTX_KEY);\n+        if (secondaryAuth != null) {\n+            headers.put(AuthenticationField.AUTHENTICATION_KEY, secondaryAuth);\n+        }\n+        return headers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDg2MQ=="}, "originalCommit": {"oid": "30cfb12b7dc91c147567e4ca66b635f012df4a01"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTMyMjE5OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/anomaly-detection/apis/update-datafeed.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozMDozMlrOF8xLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozMjozMFrOF8xQ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NDY1NA==", "bodyText": "Since \"secondary authorization headers\" are an ES thing, not a global standard, I think we should have a paragraph somewhere in the security docs that says the header name is es-secondary-authorization and the format is the same as for basic auth, and then \"secondary authorization headers\" in this sentence and the equivalent one in the other 3 files should be a link to that.", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r399264654", "createdAt": "2020-03-27T13:30:32Z", "author": {"login": "droberts195"}, "path": "docs/reference/ml/anomaly-detection/apis/update-datafeed.asciidoc", "diffHunk": "@@ -35,6 +35,12 @@ IMPORTANT: When {es} {security-features} are enabled, your {dfeed} remembers\n which roles the user who updated it had at the time of update and runs the query\n using those same roles.\n \n++\n+--\n+NOTE: It is possible that secondary authorization headers are supplied in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "740e6667956ca7e3e0fbb89ba82e71b692675dbe"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NjA0Mg==", "bodyText": "Maybe the new paragraph should go at the bottom of https://www.elastic.co/guide/en/elasticsearch/reference/current/http-clients.html?", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r399266042", "createdAt": "2020-03-27T13:32:30Z", "author": {"login": "droberts195"}, "path": "docs/reference/ml/anomaly-detection/apis/update-datafeed.asciidoc", "diffHunk": "@@ -35,6 +35,12 @@ IMPORTANT: When {es} {security-features} are enabled, your {dfeed} remembers\n which roles the user who updated it had at the time of update and runs the query\n using those same roles.\n \n++\n+--\n+NOTE: It is possible that secondary authorization headers are supplied in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NDY1NA=="}, "originalCommit": {"oid": "740e6667956ca7e3e0fbb89ba82e71b692675dbe"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzI3MTMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsRestIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowNzozOFrOF-fr-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowNzozOFrOF-fr-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NTE5NQ==", "bodyText": "nit: 3 s's", "url": "https://github.com/elastic/elasticsearch/pull/54121#discussion_r401075195", "createdAt": "2020-03-31T17:07:38Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsRestIT.java", "diffHunk": "@@ -544,6 +544,46 @@ public void testInsufficientSearchPrivilegesOnPreview() throws Exception {\n                 containsString(\"[indices:data/read/field_caps] is unauthorized for user [ml_admin]\"));\n     }\n \n+    public void testSecondaryAuthSearchPrivilegesLookBack() throws Exception {\n+        setupDataAccessRole(\"airline-data\");\n+        String jobId = \"secondary-privs-put-job\";\n+        createJob(jobId, \"airline.keyword\");\n+        String datafeedId = \"datafeed-\" + jobId;\n+        // Primary auth header does not have accesss, but secondary auth does", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f821505ba013548873a1924e4d486c9eedeab425"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4177, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}