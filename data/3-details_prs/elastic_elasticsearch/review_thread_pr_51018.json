{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTM0ODc0", "number": 51018, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzoxNzozMlrODYDbNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzoxNzozMlrODYDbNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTQ4NTM0OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzoxNzozMlrOFdsWYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzoxNzo0N1rOFdsWlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3OTY1MQ==", "bodyText": "All of the exceptions that I changed to XContentParseException  are really more development errors than usage errors.", "url": "https://github.com/elastic/elasticsearch/pull/51018#discussion_r366679651", "createdAt": "2020-01-15T03:17:32Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java", "diffHunk": "@@ -123,19 +123,18 @@ public NamedXContentRegistry(List<Entry> entries) {\n         if (parsers == null) {\n             if (registry.isEmpty()) {\n                 // The \"empty\" registry will never work so we throw a better exception as a hint.\n-                throw new NamedObjectNotFoundException(\"named objects are not supported for this parser\");\n+                throw new XContentParseException(\"named objects are not supported for this parser\");\n             }\n-            throw new NamedObjectNotFoundException(\"unknown named object category [\" + categoryClass.getName() + \"]\");\n+            throw new XContentParseException(\"unknown named object category [\" + categoryClass.getName() + \"]\");\n         }\n         Entry entry = parsers.get(name);\n         if (entry == null) {\n-            throw new NamedObjectNotFoundException(parser.getTokenLocation(), \"unable to parse \" + categoryClass.getSimpleName() +\n-                \" with name [\" + name + \"]: parser not found\");\n+            throw new NamedObjectNotFoundException(parser.getTokenLocation(), \"unknown field [\" + name + \"]\", parsers.keySet());\n         }\n         if (false == entry.name.match(name, parser.getDeprecationHandler())) {\n             /* Note that this shouldn't happen because we already looked up the entry using the names but we need to call `match` anyway\n              * because it is responsible for logging deprecation warnings. */\n-            throw new NamedObjectNotFoundException(parser.getTokenLocation(),\n+            throw new XContentParseException(parser.getTokenLocation(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f7281c5c5ab398724f50a9a03e49c450573268"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3OTcwMg==", "bodyText": "And they don't have the critical candidates set.", "url": "https://github.com/elastic/elasticsearch/pull/51018#discussion_r366679702", "createdAt": "2020-01-15T03:17:47Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java", "diffHunk": "@@ -123,19 +123,18 @@ public NamedXContentRegistry(List<Entry> entries) {\n         if (parsers == null) {\n             if (registry.isEmpty()) {\n                 // The \"empty\" registry will never work so we throw a better exception as a hint.\n-                throw new NamedObjectNotFoundException(\"named objects are not supported for this parser\");\n+                throw new XContentParseException(\"named objects are not supported for this parser\");\n             }\n-            throw new NamedObjectNotFoundException(\"unknown named object category [\" + categoryClass.getName() + \"]\");\n+            throw new XContentParseException(\"unknown named object category [\" + categoryClass.getName() + \"]\");\n         }\n         Entry entry = parsers.get(name);\n         if (entry == null) {\n-            throw new NamedObjectNotFoundException(parser.getTokenLocation(), \"unable to parse \" + categoryClass.getSimpleName() +\n-                \" with name [\" + name + \"]: parser not found\");\n+            throw new NamedObjectNotFoundException(parser.getTokenLocation(), \"unknown field [\" + name + \"]\", parsers.keySet());\n         }\n         if (false == entry.name.match(name, parser.getDeprecationHandler())) {\n             /* Note that this shouldn't happen because we already looked up the entry using the names but we need to call `match` anyway\n              * because it is responsible for logging deprecation warnings. */\n-            throw new NamedObjectNotFoundException(parser.getTokenLocation(),\n+            throw new XContentParseException(parser.getTokenLocation(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3OTY1MQ=="}, "originalCommit": {"oid": "d3f7281c5c5ab398724f50a9a03e49c450573268"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4591, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}