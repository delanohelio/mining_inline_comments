{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjYwOTk3", "number": 63338, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToyMjoyMVrOErqpEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoyMDoxMVrOEtHreA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjIyODY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/InsertProcessorTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToyMjoyMVrOHej7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo1MjoyNlrOHf7e7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNzk4OQ==", "bodyText": "minor: Could you use Integer.MIN/MAX_VALUE to make it more clear?", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r501807989", "createdAt": "2020-10-08T15:22:21Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/InsertProcessorTests.java", "diffHunk": "@@ -52,33 +52,53 @@ public void testInsertWithEdgeCases() {\n         assertEquals(\"bazbar\", new Insert(EMPTY, l(\"foobar\"), l(-1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(4), l(30), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(6), l(1), l('z')).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobarbaz\", \n+        assertEquals(\"foobarbaz\",\n                 new Insert(EMPTY, l(\"foobar\"), l(7), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobar\", \n+        assertEquals(\"foobar\",\n                 new Insert(EMPTY, l(\"foobar\"), l(8), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"fzr\", new Insert(EMPTY, l(\"foobar\"), l(2), l(4), l('z')).makePipe().asProcessor().process(null));\n         assertEquals(\"CAR\", new Insert(EMPTY, l(\"FOOBAR\"), l(1), l(5), l(\"CA\")).makePipe().asProcessor().process(null));\n         assertEquals(\"z\", new Insert(EMPTY, l('f'), l(1), l(10), l('z')).makePipe().asProcessor().process(null));\n-        \n+\n         assertEquals(\"bla\", new Insert(EMPTY, l(\"\"), l(1), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n         assertEquals(\"\", new Insert(EMPTY, l(\"\"), l(2), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n     }\n-    \n+\n     public void testInsertInputsValidation() {\n         SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(5), l(1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [5]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l(3), l(66)).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [66]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(\"c\"), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [c]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [start]; received [java.lang.String]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l('z'), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [z]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [length]; received [java.lang.Character]\", siae.getMessage());\n+\n+        assertEquals(\"baroobar\", new Insert(EMPTY, l(\"foobar\"), l(-2147483647), l(1), l(\"bar\")).makePipe().asProcessor().process(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e46b970524177363d555741cee560cdf6eb247f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAxMzE4OA==", "bodyText": "@matriv OK, I will fix it", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r503013188", "createdAt": "2020-10-12T02:53:46Z", "author": {"login": "wuyinan0126"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/InsertProcessorTests.java", "diffHunk": "@@ -52,33 +52,53 @@ public void testInsertWithEdgeCases() {\n         assertEquals(\"bazbar\", new Insert(EMPTY, l(\"foobar\"), l(-1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(4), l(30), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(6), l(1), l('z')).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobarbaz\", \n+        assertEquals(\"foobarbaz\",\n                 new Insert(EMPTY, l(\"foobar\"), l(7), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobar\", \n+        assertEquals(\"foobar\",\n                 new Insert(EMPTY, l(\"foobar\"), l(8), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"fzr\", new Insert(EMPTY, l(\"foobar\"), l(2), l(4), l('z')).makePipe().asProcessor().process(null));\n         assertEquals(\"CAR\", new Insert(EMPTY, l(\"FOOBAR\"), l(1), l(5), l(\"CA\")).makePipe().asProcessor().process(null));\n         assertEquals(\"z\", new Insert(EMPTY, l('f'), l(1), l(10), l('z')).makePipe().asProcessor().process(null));\n-        \n+\n         assertEquals(\"bla\", new Insert(EMPTY, l(\"\"), l(1), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n         assertEquals(\"\", new Insert(EMPTY, l(\"\"), l(2), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n     }\n-    \n+\n     public void testInsertInputsValidation() {\n         SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(5), l(1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [5]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l(3), l(66)).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [66]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(\"c\"), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [c]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [start]; received [java.lang.String]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l('z'), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [z]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [length]; received [java.lang.Character]\", siae.getMessage());\n+\n+        assertEquals(\"baroobar\", new Insert(EMPTY, l(\"foobar\"), l(-2147483647), l(1), l(\"bar\")).makePipe().asProcessor().process(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNzk4OQ=="}, "originalCommit": {"oid": "8e46b970524177363d555741cee560cdf6eb247f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MjQ3OQ==", "bodyText": "Fix ported.", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r503242479", "createdAt": "2020-10-12T11:52:26Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/InsertProcessorTests.java", "diffHunk": "@@ -52,33 +52,53 @@ public void testInsertWithEdgeCases() {\n         assertEquals(\"bazbar\", new Insert(EMPTY, l(\"foobar\"), l(-1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(4), l(30), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"foobaz\", new Insert(EMPTY, l(\"foobar\"), l(6), l(1), l('z')).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobarbaz\", \n+        assertEquals(\"foobarbaz\",\n                 new Insert(EMPTY, l(\"foobar\"), l(7), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"foobar\", \n+        assertEquals(\"foobar\",\n                 new Insert(EMPTY, l(\"foobar\"), l(8), l(1000), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"fzr\", new Insert(EMPTY, l(\"foobar\"), l(2), l(4), l('z')).makePipe().asProcessor().process(null));\n         assertEquals(\"CAR\", new Insert(EMPTY, l(\"FOOBAR\"), l(1), l(5), l(\"CA\")).makePipe().asProcessor().process(null));\n         assertEquals(\"z\", new Insert(EMPTY, l('f'), l(1), l(10), l('z')).makePipe().asProcessor().process(null));\n-        \n+\n         assertEquals(\"bla\", new Insert(EMPTY, l(\"\"), l(1), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n         assertEquals(\"\", new Insert(EMPTY, l(\"\"), l(2), l(10), l(\"bla\")).makePipe().asProcessor().process(null));\n     }\n-    \n+\n     public void testInsertInputsValidation() {\n         SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(5), l(1), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [5]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l(3), l(66)).makePipe().asProcessor().process(null));\n         assertEquals(\"A string/char is required; received [66]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(\"c\"), l(3), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [c]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [start]; received [java.lang.String]\", siae.getMessage());\n+\n         siae = expectThrows(SqlIllegalArgumentException.class,\n                 () -> new Insert(EMPTY, l(\"foobar\"), l(1), l('z'), l(\"baz\")).makePipe().asProcessor().process(null));\n-        assertEquals(\"A number is required; received [z]\", siae.getMessage());\n+        assertEquals(\"A fixed point number is required for [length]; received [java.lang.Character]\", siae.getMessage());\n+\n+        assertEquals(\"baroobar\", new Insert(EMPTY, l(\"foobar\"), l(-2147483647), l(1), l(\"bar\")).makePipe().asProcessor().process(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNzk4OQ=="}, "originalCommit": {"oid": "8e46b970524177363d555741cee560cdf6eb247f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQ3MTkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/Check.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoyMDoxMVrOHgu8Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxMzoyN1rOHg3msQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NTUxNA==", "bodyText": "Unless we use this format elsewhere [{} .. {}] (with two dots), I would use the comma format [{}, {}].", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r504085514", "createdAt": "2020-10-13T16:20:11Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/Check.java", "diffHunk": "@@ -36,4 +36,15 @@ public static void notNull(Object object, String message, Object... values) {\n             throw new SqlIllegalArgumentException(message, values);\n         }\n     }\n+\n+    public static void isFixedNumberAndInRange(Object object, String objectName, Long from, Long to) {\n+        if ((object instanceof Number) == false || object instanceof Float || object instanceof Double) {\n+            throw new SqlIllegalArgumentException(\"A fixed point number is required for [{}]; received [{}]\", objectName,\n+                object.getClass().getTypeName());\n+        }\n+        Long longValue = ((Number) object).longValue();\n+        if (longValue < from || longValue > to) {\n+            throw new SqlIllegalArgumentException(\"[{}] equals [{}], out of the allowed range [{}..{}]\", objectName, longValue, from, to);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0532b33661fb6aeefbbef35189f0a69c977cd7dc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA5Njg0OQ==", "bodyText": "Also, I think the style of the error message we use is first state the problem, then the actual value. Something like \"[start] out of the allowed range [ ], received [{}]\". Found one example (maybe there are more with out of range values) in the Analyzer.", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r504096849", "createdAt": "2020-10-13T16:34:23Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/Check.java", "diffHunk": "@@ -36,4 +36,15 @@ public static void notNull(Object object, String message, Object... values) {\n             throw new SqlIllegalArgumentException(message, values);\n         }\n     }\n+\n+    public static void isFixedNumberAndInRange(Object object, String objectName, Long from, Long to) {\n+        if ((object instanceof Number) == false || object instanceof Float || object instanceof Double) {\n+            throw new SqlIllegalArgumentException(\"A fixed point number is required for [{}]; received [{}]\", objectName,\n+                object.getClass().getTypeName());\n+        }\n+        Long longValue = ((Number) object).longValue();\n+        if (longValue < from || longValue > to) {\n+            throw new SqlIllegalArgumentException(\"[{}] equals [{}], out of the allowed range [{}..{}]\", objectName, longValue, from, to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NTUxNA=="}, "originalCommit": {"oid": "0532b33661fb6aeefbbef35189f0a69c977cd7dc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyNzUwNQ==", "bodyText": "Good point, updated it.", "url": "https://github.com/elastic/elasticsearch/pull/63338#discussion_r504227505", "createdAt": "2020-10-13T20:13:27Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/Check.java", "diffHunk": "@@ -36,4 +36,15 @@ public static void notNull(Object object, String message, Object... values) {\n             throw new SqlIllegalArgumentException(message, values);\n         }\n     }\n+\n+    public static void isFixedNumberAndInRange(Object object, String objectName, Long from, Long to) {\n+        if ((object instanceof Number) == false || object instanceof Float || object instanceof Double) {\n+            throw new SqlIllegalArgumentException(\"A fixed point number is required for [{}]; received [{}]\", objectName,\n+                object.getClass().getTypeName());\n+        }\n+        Long longValue = ((Number) object).longValue();\n+        if (longValue < from || longValue > to) {\n+            throw new SqlIllegalArgumentException(\"[{}] equals [{}], out of the allowed range [{}..{}]\", objectName, longValue, from, to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NTUxNA=="}, "originalCommit": {"oid": "0532b33661fb6aeefbbef35189f0a69c977cd7dc"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3138, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}