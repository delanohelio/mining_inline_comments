{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTY5MjY3", "number": 57234, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowNTo0MVrOEBg7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowOTozNlrOEBhANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDIzNTkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowNTo0MlrOGdaIJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowNTo0MlrOGdaIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4OTk1OA==", "bodyText": "Can you add some javadocs please?", "url": "https://github.com/elastic/elasticsearch/pull/57234#discussion_r433489958", "createdAt": "2020-06-01T21:05:42Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.ValidationException;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.elasticsearch.cluster.metadata.IndexMetadata.INDEX_NUMBER_OF_SHARDS_SETTING;\n+\n+public class ShardLimitService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add8ff966f2404ee661f51d5bad2750dfac62498"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDI0NDY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowODozMlrOGdaNpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToxNDo1MlrOGdaZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MTM2NQ==", "bodyText": "I don't think any deprecation warning is added?", "url": "https://github.com/elastic/elasticsearch/pull/57234#discussion_r433491365", "createdAt": "2020-06-01T21:08:32Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.ValidationException;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.elasticsearch.cluster.metadata.IndexMetadata.INDEX_NUMBER_OF_SHARDS_SETTING;\n+\n+public class ShardLimitService {\n+    public static final Setting<Integer> SETTING_CLUSTER_MAX_SHARDS_PER_NODE =\n+        Setting.intSetting(\"cluster.max_shards_per_node\", 1000, 1, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    protected final AtomicInteger shardLimitPerNode = new AtomicInteger();\n+\n+    public ShardLimitService(final Settings settings, ClusterService clusterService) {\n+        this.shardLimitPerNode.set(SETTING_CLUSTER_MAX_SHARDS_PER_NODE.get(settings));\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(SETTING_CLUSTER_MAX_SHARDS_PER_NODE, this::setShardLimitPerNode);\n+    }\n+\n+    // Protected for testing purposes\n+    protected void setShardLimitPerNode(int newValue) {\n+        this.shardLimitPerNode.set(newValue);\n+    }\n+\n+    public int getShardLimitPerNode() {\n+        return shardLimitPerNode.get();\n+    }\n+\n+    /**\n+     * Checks whether an index can be created without going over the cluster shard limit.\n+     *\n+     * @param settings       the settings of the index to be created\n+     * @param state          the current cluster state\n+     * @throws ValidationException if creating this index would put the cluster over the cluster shard limit\n+     */\n+    public void validateShardLimit(final Settings settings, final ClusterState state) {\n+        final int numberOfShards = INDEX_NUMBER_OF_SHARDS_SETTING.get(settings);\n+        final int numberOfReplicas = IndexMetadata.INDEX_NUMBER_OF_REPLICAS_SETTING.get(settings);\n+        final int shardsToCreate = numberOfShards * (1 + numberOfReplicas);\n+\n+        final Optional<String> shardLimit = checkShardLimit(shardsToCreate, state);\n+        if (shardLimit.isPresent()) {\n+            final ValidationException e = new ValidationException();\n+            e.addValidationError(shardLimit.get());\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Validates whether a list of indices can be opened without going over the cluster shard limit.  Only counts indices which are\n+     * currently closed and will be opened, ignores indices which are already open.\n+     *\n+     * @param currentState The current cluster state.\n+     * @param indices The indices which are to be opened.\n+     * @throws ValidationException If this operation would take the cluster over the limit and enforcement is enabled.\n+     */\n+    public void validateShardLimit(ClusterState currentState, Index[] indices) {\n+        int shardsToOpen = Arrays.stream(indices)\n+            .filter(index -> currentState.metadata().index(index).getState().equals(IndexMetadata.State.CLOSE))\n+            .mapToInt(index -> getTotalShardCount(currentState, index))\n+            .sum();\n+\n+        Optional<String> error = checkShardLimit(shardsToOpen, currentState);\n+        if (error.isPresent()) {\n+            ValidationException ex = new ValidationException();\n+            ex.addValidationError(error.get());\n+            throw ex;\n+        }\n+    }\n+\n+    private static int getTotalShardCount(ClusterState state, Index index) {\n+        IndexMetadata indexMetadata = state.metadata().index(index);\n+        return indexMetadata.getNumberOfShards() * (1 + indexMetadata.getNumberOfReplicas());\n+    }\n+\n+    /**\n+     * Checks to see if an operation can be performed without taking the cluster over the cluster-wide shard limit. Adds a deprecation\n+     * warning or returns an error message as appropriate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add8ff966f2404ee661f51d5bad2750dfac62498"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NDMwNA==", "bodyText": "This comment is referencing a deprecation warning that's present in the 7.x branch, not master. I'll remove the reference to the deprecation warning in master but we'll need to keep emitting the deprecation warning in the backport (which I believe there are tests for).", "url": "https://github.com/elastic/elasticsearch/pull/57234#discussion_r433494304", "createdAt": "2020-06-01T21:14:52Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.ValidationException;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.elasticsearch.cluster.metadata.IndexMetadata.INDEX_NUMBER_OF_SHARDS_SETTING;\n+\n+public class ShardLimitService {\n+    public static final Setting<Integer> SETTING_CLUSTER_MAX_SHARDS_PER_NODE =\n+        Setting.intSetting(\"cluster.max_shards_per_node\", 1000, 1, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    protected final AtomicInteger shardLimitPerNode = new AtomicInteger();\n+\n+    public ShardLimitService(final Settings settings, ClusterService clusterService) {\n+        this.shardLimitPerNode.set(SETTING_CLUSTER_MAX_SHARDS_PER_NODE.get(settings));\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(SETTING_CLUSTER_MAX_SHARDS_PER_NODE, this::setShardLimitPerNode);\n+    }\n+\n+    // Protected for testing purposes\n+    protected void setShardLimitPerNode(int newValue) {\n+        this.shardLimitPerNode.set(newValue);\n+    }\n+\n+    public int getShardLimitPerNode() {\n+        return shardLimitPerNode.get();\n+    }\n+\n+    /**\n+     * Checks whether an index can be created without going over the cluster shard limit.\n+     *\n+     * @param settings       the settings of the index to be created\n+     * @param state          the current cluster state\n+     * @throws ValidationException if creating this index would put the cluster over the cluster shard limit\n+     */\n+    public void validateShardLimit(final Settings settings, final ClusterState state) {\n+        final int numberOfShards = INDEX_NUMBER_OF_SHARDS_SETTING.get(settings);\n+        final int numberOfReplicas = IndexMetadata.INDEX_NUMBER_OF_REPLICAS_SETTING.get(settings);\n+        final int shardsToCreate = numberOfShards * (1 + numberOfReplicas);\n+\n+        final Optional<String> shardLimit = checkShardLimit(shardsToCreate, state);\n+        if (shardLimit.isPresent()) {\n+            final ValidationException e = new ValidationException();\n+            e.addValidationError(shardLimit.get());\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Validates whether a list of indices can be opened without going over the cluster shard limit.  Only counts indices which are\n+     * currently closed and will be opened, ignores indices which are already open.\n+     *\n+     * @param currentState The current cluster state.\n+     * @param indices The indices which are to be opened.\n+     * @throws ValidationException If this operation would take the cluster over the limit and enforcement is enabled.\n+     */\n+    public void validateShardLimit(ClusterState currentState, Index[] indices) {\n+        int shardsToOpen = Arrays.stream(indices)\n+            .filter(index -> currentState.metadata().index(index).getState().equals(IndexMetadata.State.CLOSE))\n+            .mapToInt(index -> getTotalShardCount(currentState, index))\n+            .sum();\n+\n+        Optional<String> error = checkShardLimit(shardsToOpen, currentState);\n+        if (error.isPresent()) {\n+            ValidationException ex = new ValidationException();\n+            ex.addValidationError(error.get());\n+            throw ex;\n+        }\n+    }\n+\n+    private static int getTotalShardCount(ClusterState state, Index index) {\n+        IndexMetadata indexMetadata = state.metadata().index(index);\n+        return indexMetadata.getNumberOfShards() * (1 + indexMetadata.getNumberOfReplicas());\n+    }\n+\n+    /**\n+     * Checks to see if an operation can be performed without taking the cluster over the cluster-wide shard limit. Adds a deprecation\n+     * warning or returns an error message as appropriate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MTM2NQ=="}, "originalCommit": {"oid": "add8ff966f2404ee661f51d5bad2750dfac62498"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDI0NzU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowOTozNlrOGdaPog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToxNTo0OFrOGdaa9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MTg3NA==", "bodyText": "Super minor, but I was confused until I read the docs, maybe rename the parameter \"indicesToBeOpened\"?", "url": "https://github.com/elastic/elasticsearch/pull/57234#discussion_r433491874", "createdAt": "2020-06-01T21:09:36Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.ValidationException;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.elasticsearch.cluster.metadata.IndexMetadata.INDEX_NUMBER_OF_SHARDS_SETTING;\n+\n+public class ShardLimitService {\n+    public static final Setting<Integer> SETTING_CLUSTER_MAX_SHARDS_PER_NODE =\n+        Setting.intSetting(\"cluster.max_shards_per_node\", 1000, 1, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    protected final AtomicInteger shardLimitPerNode = new AtomicInteger();\n+\n+    public ShardLimitService(final Settings settings, ClusterService clusterService) {\n+        this.shardLimitPerNode.set(SETTING_CLUSTER_MAX_SHARDS_PER_NODE.get(settings));\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(SETTING_CLUSTER_MAX_SHARDS_PER_NODE, this::setShardLimitPerNode);\n+    }\n+\n+    // Protected for testing purposes\n+    protected void setShardLimitPerNode(int newValue) {\n+        this.shardLimitPerNode.set(newValue);\n+    }\n+\n+    public int getShardLimitPerNode() {\n+        return shardLimitPerNode.get();\n+    }\n+\n+    /**\n+     * Checks whether an index can be created without going over the cluster shard limit.\n+     *\n+     * @param settings       the settings of the index to be created\n+     * @param state          the current cluster state\n+     * @throws ValidationException if creating this index would put the cluster over the cluster shard limit\n+     */\n+    public void validateShardLimit(final Settings settings, final ClusterState state) {\n+        final int numberOfShards = INDEX_NUMBER_OF_SHARDS_SETTING.get(settings);\n+        final int numberOfReplicas = IndexMetadata.INDEX_NUMBER_OF_REPLICAS_SETTING.get(settings);\n+        final int shardsToCreate = numberOfShards * (1 + numberOfReplicas);\n+\n+        final Optional<String> shardLimit = checkShardLimit(shardsToCreate, state);\n+        if (shardLimit.isPresent()) {\n+            final ValidationException e = new ValidationException();\n+            e.addValidationError(shardLimit.get());\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Validates whether a list of indices can be opened without going over the cluster shard limit.  Only counts indices which are\n+     * currently closed and will be opened, ignores indices which are already open.\n+     *\n+     * @param currentState The current cluster state.\n+     * @param indices The indices which are to be opened.\n+     * @throws ValidationException If this operation would take the cluster over the limit and enforcement is enabled.\n+     */\n+    public void validateShardLimit(ClusterState currentState, Index[] indices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add8ff966f2404ee661f51d5bad2750dfac62498"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NDc3Mg==", "bodyText": "\ud83d\udc4d This was moved from another class which had clearer context for this, I'll update the name.", "url": "https://github.com/elastic/elasticsearch/pull/57234#discussion_r433494772", "createdAt": "2020-06-01T21:15:48Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/indices/ShardLimitService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.ValidationException;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.elasticsearch.cluster.metadata.IndexMetadata.INDEX_NUMBER_OF_SHARDS_SETTING;\n+\n+public class ShardLimitService {\n+    public static final Setting<Integer> SETTING_CLUSTER_MAX_SHARDS_PER_NODE =\n+        Setting.intSetting(\"cluster.max_shards_per_node\", 1000, 1, Setting.Property.Dynamic, Setting.Property.NodeScope);\n+    protected final AtomicInteger shardLimitPerNode = new AtomicInteger();\n+\n+    public ShardLimitService(final Settings settings, ClusterService clusterService) {\n+        this.shardLimitPerNode.set(SETTING_CLUSTER_MAX_SHARDS_PER_NODE.get(settings));\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(SETTING_CLUSTER_MAX_SHARDS_PER_NODE, this::setShardLimitPerNode);\n+    }\n+\n+    // Protected for testing purposes\n+    protected void setShardLimitPerNode(int newValue) {\n+        this.shardLimitPerNode.set(newValue);\n+    }\n+\n+    public int getShardLimitPerNode() {\n+        return shardLimitPerNode.get();\n+    }\n+\n+    /**\n+     * Checks whether an index can be created without going over the cluster shard limit.\n+     *\n+     * @param settings       the settings of the index to be created\n+     * @param state          the current cluster state\n+     * @throws ValidationException if creating this index would put the cluster over the cluster shard limit\n+     */\n+    public void validateShardLimit(final Settings settings, final ClusterState state) {\n+        final int numberOfShards = INDEX_NUMBER_OF_SHARDS_SETTING.get(settings);\n+        final int numberOfReplicas = IndexMetadata.INDEX_NUMBER_OF_REPLICAS_SETTING.get(settings);\n+        final int shardsToCreate = numberOfShards * (1 + numberOfReplicas);\n+\n+        final Optional<String> shardLimit = checkShardLimit(shardsToCreate, state);\n+        if (shardLimit.isPresent()) {\n+            final ValidationException e = new ValidationException();\n+            e.addValidationError(shardLimit.get());\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Validates whether a list of indices can be opened without going over the cluster shard limit.  Only counts indices which are\n+     * currently closed and will be opened, ignores indices which are already open.\n+     *\n+     * @param currentState The current cluster state.\n+     * @param indices The indices which are to be opened.\n+     * @throws ValidationException If this operation would take the cluster over the limit and enforcement is enabled.\n+     */\n+    public void validateShardLimit(ClusterState currentState, Index[] indices) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MTg3NA=="}, "originalCommit": {"oid": "add8ff966f2404ee661f51d5bad2750dfac62498"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3925, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}