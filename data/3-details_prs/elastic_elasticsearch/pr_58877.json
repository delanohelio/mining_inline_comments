{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTY3ODc5", "number": 58877, "title": "[ML] Perform test inference on java", "bodyText": "Moving inference to the java side can reduce overall native memory utilization and opens the door for further improvements when it comes to separating test vs training data.\nThe model is stored first from the native process. Then when all results have been read, the analytics process enters an \"inference\" phase.\nThis inference phase loads the model via the ModelLoadingService, scrolls through all the data not used for training, and infers against the model.\nThis is a continuation of #58691", "createdAt": "2020-07-01T20:22:56Z", "url": "https://github.com/elastic/elasticsearch/pull/58877", "merged": true, "mergeCommit": {"oid": "91c21b1ce646a52ffad44141247d7bcb558d2642"}, "closed": true, "closedAt": "2020-07-09T11:59:02Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwE8pzgH2gAyNDQyOTY3ODc5OjRmNGZlZmFiMTkwMTFjYjJkYzIyN2JhMTFmMDJlN2Q0ZmYyNGNmZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczNTf6gFqTQ0NTUyNjQ1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4f4fefab19011cb2dc227ba11f02e7d4ff24cff3", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/4f4fefab19011cb2dc227ba11f02e7d4ff24cff3", "committedDate": "2020-06-29T18:00:19Z", "message": "[ML] Perform test inference in java\n\nSince we are able to load the inference model\nand perform inference in java, we no longer need\nto rely on the analytics process to be performing\ntest inference on the docs that were not used for\ntraining. The benefit is that we do not need to\nsend test docs and fit them in memory of the c++\nprocess."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cabd9a2cebd196247e8ab3dd9ee390a78ea169f2", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/cabd9a2cebd196247e8ab3dd9ee390a78ea169f2", "committedDate": "2020-06-29T18:02:10Z", "message": "Unit tests for inference runner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94b1e4889a27830777f7230d08c37a9cca64171", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/b94b1e4889a27830777f7230d08c37a9cca64171", "committedDate": "2020-06-29T18:02:10Z", "message": "Stop sending test data to c++"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c18768bcfe0c444ffa09d95e744371123b4390", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/45c18768bcfe0c444ffa09d95e744371123b4390", "committedDate": "2020-06-29T18:11:37Z", "message": "Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a784d92fc1a859e8ce688238e0dd88962345b126", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/a784d92fc1a859e8ce688238e0dd88962345b126", "committedDate": "2020-07-01T18:11:42Z", "message": "Merge remote-tracking branch 'upstream/master' into HEAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ebd51acd8638fc2eb72be5820a2e4a0b3c0b87", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/e8ebd51acd8638fc2eb72be5820a2e4a0b3c0b87", "committedDate": "2020-07-01T18:11:59Z", "message": "post merge adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9fb8ae217fd8bc6287095b67041c86d5ed3f9ea", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/c9fb8ae217fd8bc6287095b67041c86d5ed3f9ea", "committedDate": "2020-07-01T20:07:08Z", "message": "adding tests, fixing minor issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d84aa88e52d6704b6789523fd3a2547c37646eeb", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/d84aa88e52d6704b6789523fd3a2547c37646eeb", "committedDate": "2020-07-02T11:01:05Z", "message": "fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b237db24c29370f356aad09fd551d8bc6368925c", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/b237db24c29370f356aad09fd551d8bc6368925c", "committedDate": "2020-07-02T18:47:37Z", "message": "Merge branch 'master' into feature/perform-test-inference-on-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a9e17d8ad5374e1f9e0fd73360b3e90b9de752", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/36a9e17d8ad5374e1f9e0fd73360b3e90b9de752", "committedDate": "2020-07-07T15:36:09Z", "message": "Rename to testRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d77048bdacdd327e4a730e1b353de15762ab477f", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/d77048bdacdd327e4a730e1b353de15762ab477f", "committedDate": "2020-07-07T15:46:33Z", "message": "Add test for cancelling inference runner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a10a46c9949c0532fde947a2f8103398b9811991", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/a10a46c9949c0532fde947a2f8103398b9811991", "committedDate": "2020-07-07T15:53:41Z", "message": "Add tests for progress with or without inference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "committedDate": "2020-07-07T16:29:15Z", "message": "Merge branch 'master' into feature/perform-test-inference-on-java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDk5NTk4", "url": "https://github.com/elastic/elasticsearch/pull/58877#pullrequestreview-444499598", "createdAt": "2020-07-08T07:57:39Z", "commit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1Nzo0MFrOGucerg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo1NzowMlrOGuerWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1NDI4Ng==", "bodyText": "Why is this set to true for RegressionEvaluationIT but false for ClassificationEvaluationIT?", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451354286", "createdAt": "2020-07-08T07:57:40Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionEvaluationIT.java", "diffHunk": "@@ -148,4 +148,9 @@ private static void indexHousesData(String indexName) {\n             fail(\"Failed to index data: \" + bulkResponse.buildFailureMessage());\n         }\n     }\n+\n+    @Override\n+    boolean supportsInference() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1ODMyMA==", "bodyText": "[nit] You can drop the parentheses here", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451358320", "createdAt": "2020-07-08T08:04:31Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/CrossValidationSplitterFactory.java", "diffHunk": "@@ -47,7 +47,7 @@ public CrossValidationSplitter create() {\n         if (config.getAnalysis() instanceof Classification) {\n             return createStratifiedSplitter((Classification) config.getAnalysis());\n         }\n-        return (row, incrementTrainingDocs, incrementTestDocs) -> incrementTrainingDocs.run();\n+        return (row) -> true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3ODE5OA==", "bodyText": "IMO the logic would be simpler (less comparisons with false) if this method was negated.", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451378198", "createdAt": "2020-07-08T08:37:55Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java", "diffHunk": "@@ -162,17 +162,21 @@ public boolean hasNext() {\n         @Override\n         public DataFrameDataExtractor.Row next() {\n             DataFrameDataExtractor.Row row = null;\n-            while ((row == null || row.shouldSkip()) && hasNext()) {\n+            while (shouldHaveMatch(row) == false && hasNext()) {\n                 advanceToNextBatchIfNecessary();\n                 row = currentDataFrameRows.get(currentDataFrameRowsIndex++);\n             }\n \n-            if (row == null || row.shouldSkip()) {\n+            if (shouldHaveMatch(row) == false) {\n                 throw ExceptionsHelper.serverError(\"no more data frame rows could be found while joining results\");\n             }\n             return row;\n         }\n \n+        private boolean shouldHaveMatch(DataFrameDataExtractor.Row row) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3OTYwMA==", "bodyText": "I think there is no need to mix List.of and Arrays.asList here. Could you choose one of them (probably Arrays.asList as the code below suggests you want to make it backportable to 7.x)?", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451379600", "createdAt": "2020-07-08T08:40:15Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java", "diffHunk": "@@ -188,12 +188,72 @@ public void testProcess_GivenTwoBatchesWhereFirstEndsWithSkippedRow() throws IOE\n         assertThat(indexedDocSource.get(\"b\"), equalTo(\"2\"));\n     }\n \n+    public void testProcess_GivenSingleBatchWithTestRows() throws IOException {\n+        givenClientHasNoFailures();\n+\n+        String dataDoc = \"{\\\"f_1\\\": \\\"foo\\\", \\\"f_2\\\": 42.0}\";\n+        String[] dataValues = {\"42.0\"};\n+        DataFrameDataExtractor.Row testRow = newTestRow(newHit(dataDoc), dataValues, 1);\n+        DataFrameDataExtractor.Row normalRow = newTrainingRow(newHit(dataDoc), dataValues, 2);\n+        givenDataFrameBatches(List.of(Arrays.asList(testRow, normalRow)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MzA3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean istraining = crossValidationSplitter.isTraining(processedRow);\n          \n          \n            \n                            boolean isTraining = crossValidationSplitter.isTraining(processedRow);", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451383076", "createdAt": "2020-07-08T08:45:42Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/StratifiedCrossValidationSplitterTests.java", "diffHunk": "@@ -211,9 +199,10 @@ public void testProcess_SelectsTrainingRowsUniformly() {\n                 }\n \n                 String[] processedRow = Arrays.copyOf(row, row.length);\n-                crossValidationSplitter.process(processedRow, this::incrementTrainingDocsCount, this::incrementTestDocsCount);\n+                boolean istraining = crossValidationSplitter.isTraining(processedRow);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4Mzk4MA==", "bodyText": "I think current and latest mean the same thing here.\nCould you use the same word for method name and variable name?", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451383980", "createdAt": "2020-07-08T08:47:11Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java", "diffHunk": "@@ -190,4 +191,9 @@ private void processMemoryUsage(MemoryUsage memoryUsage) {\n         statsHolder.setMemoryUsage(memoryUsage);\n         statsPersister.persistWithRetry(memoryUsage, memoryUsage::documentId);\n     }\n+\n+    @Nullable\n+    public String getLatestModelId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NzEwMg==", "bodyText": "Why is it 98 rather than 99?", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451387102", "createdAt": "2020-07-08T08:52:12Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InferenceRunner {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(InferenceRunner.class);\n+\n+    private static final int MAX_PROGRESS_BEFORE_COMPLETION = 98;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4ODEyMg==", "bodyText": "Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451388122", "createdAt": "2020-07-08T08:53:48Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunnerTests.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsDest;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsSource;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.RegressionTests;\n+import org.elasticsearch.xpack.core.ml.inference.results.ClassificationInferenceResults;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig;\n+import org.elasticsearch.xpack.core.ml.inference.trainedmodel.InferenceConfig;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+import org.junit.Before;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class InferenceRunnerTests extends ESTestCase {\n+\n+    private Client client;\n+    private ResultsPersisterService resultsPersisterService;\n+    private ModelLoadingService modelLoadingService;\n+    private DataFrameAnalyticsConfig config;\n+    private ProgressTracker progressTracker;\n+    private TaskId parentTaskId;\n+\n+    @Before\n+    public void setupTests() {\n+        client = mock(Client.class);\n+        resultsPersisterService = mock(ResultsPersisterService.class);\n+        config = new DataFrameAnalyticsConfig.Builder()\n+            .setId(\"test\")\n+            .setAnalysis(RegressionTests.createRandom())\n+            .setSource(new DataFrameAnalyticsSource(new String[] {\"source_index\"}, null, null))\n+            .setDest(new DataFrameAnalyticsDest(\"dest_index\", \"test_results_field\"))\n+            .build();\n+        progressTracker = ProgressTracker.fromZeroes(config.getAnalysis().getProgressPhases(), config.getAnalysis().supportsInference());\n+        parentTaskId = new TaskId(randomAlphaOfLength(10), randomLong());\n+        modelLoadingService = mock(ModelLoadingService.class);\n+    }\n+\n+    public void testInferTestDocs() {\n+        Map<String, Object> doc1 = new HashMap<>();\n+        doc1.put(\"key\", 1);\n+        Map<String, Object> doc2 = new HashMap<>();\n+        doc2.put(\"key\", 2);\n+        TestDocsIterator testDocsIterator = mock(TestDocsIterator.class);\n+        when(testDocsIterator.hasNext()).thenReturn(true, false);\n+        when(testDocsIterator.next()).thenReturn(buildSearchHits(Arrays.asList(doc1, doc2)));\n+        when(testDocsIterator.getTotalHits()).thenReturn(2L);\n+        InferenceConfig config = ClassificationConfig.EMPTY_PARAMS;\n+\n+        LocalModel localModel = localModelInferences(new ClassificationInferenceResults(1.0,\n+        \"foo\",\n+            Collections.emptyList(),\n+            config),\n+            new ClassificationInferenceResults(0.0,\n+                \"bar\",\n+                Collections.emptyList(),\n+                config));\n+\n+        InferenceRunner inferenceRunner = createInferenceRunner();\n+\n+        inferenceRunner.inferTestDocs(localModel, testDocsIterator);\n+\n+        ArgumentCaptor<BulkRequest> argumentCaptor = ArgumentCaptor.forClass(BulkRequest.class);\n+\n+        verify(resultsPersisterService).bulkIndexWithHeadersWithRetry(any(), argumentCaptor.capture(), any(), any(), any());\n+        assertThat(progressTracker.getInferenceProgressPercent(), equalTo(100));\n+\n+        BulkRequest bulkRequest = argumentCaptor.getAllValues().get(0);\n+        List<DocWriteRequest<?>> indexRequests = bulkRequest.requests();\n+        Map<String, Object> doc1Source = ((IndexRequest)indexRequests.get(0)).sourceAsMap();\n+        Map<String, Object> doc2Source = ((IndexRequest)indexRequests.get(1)).sourceAsMap();\n+\n+        assertThat(doc1Source.get(\"test_results_field\"),\n+            equalTo(new HashMap<>(){{\n+                put(\"predicted_value\", \"foo\");\n+                put(\"is_training\", false);\n+        }}));\n+        assertThat(doc2Source.get(\"test_results_field\"),\n+            equalTo(new HashMap<>(){{\n+                put(\"predicted_value\", \"bar\");\n+                put(\"is_training\", false);\n+            }}));\n+    }\n+\n+    public void testInferTestDocs_GivenCancelWasCalled() {\n+\n+        LocalModel localModel = mock(LocalModel.class);\n+\n+        TestDocsIterator infiniteDocsIterator = mock(TestDocsIterator.class);\n+        when(infiniteDocsIterator.hasNext()).thenReturn(true);\n+\n+        InferenceRunner inferenceRunner = createInferenceRunner();\n+        inferenceRunner.cancel();\n+\n+        inferenceRunner.inferTestDocs(localModel, infiniteDocsIterator);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MDI5OA==", "bodyText": "Please make it final.", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451390298", "createdAt": "2020-07-08T08:57:02Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java", "diffHunk": "@@ -44,12 +46,19 @@\n \n     private final OriginSettingClient client;\n     private final String index;\n+    private final boolean trackTotalHits;\n+    private AtomicLong totalHits = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NTM3OTkz", "url": "https://github.com/elastic/elasticsearch/pull/58877#pullrequestreview-444537993", "createdAt": "2020-07-08T08:47:33Z", "commit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo0NzozM1rOGueToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDo1NDo1OVrOGuioZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NDIyNA==", "bodyText": "nit: this is a very generic message can we be more precise. Is this testing?", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451384224", "createdAt": "2020-07-08T08:47:33Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InferenceRunner {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(InferenceRunner.class);\n+\n+    private static final int MAX_PROGRESS_BEFORE_COMPLETION = 98;\n+    private static final int RESULTS_BATCH_SIZE = 1000;\n+\n+    private final Client client;\n+    private final ModelLoadingService modelLoadingService;\n+    private final ResultsPersisterService resultsPersisterService;\n+    private final TaskId parentTaskId;\n+    private final DataFrameAnalyticsConfig config;\n+    private final ProgressTracker progressTracker;\n+    private final DataCountsTracker dataCountsTracker;\n+    private volatile boolean isCancelled;\n+\n+    public InferenceRunner(Client client, ModelLoadingService modelLoadingService, ResultsPersisterService resultsPersisterService,\n+                           TaskId parentTaskId, DataFrameAnalyticsConfig config, ProgressTracker progressTracker,\n+                           DataCountsTracker dataCountsTracker) {\n+        this.client = Objects.requireNonNull(client);\n+        this.modelLoadingService = Objects.requireNonNull(modelLoadingService);\n+        this.resultsPersisterService = Objects.requireNonNull(resultsPersisterService);\n+        this.parentTaskId = Objects.requireNonNull(parentTaskId);\n+        this.config = Objects.requireNonNull(config);\n+        this.progressTracker = Objects.requireNonNull(progressTracker);\n+        this.dataCountsTracker = Objects.requireNonNull(dataCountsTracker);\n+    }\n+\n+    public void cancel() {\n+        isCancelled = true;\n+    }\n+\n+    public void run(String modelId) {\n+        if (isCancelled) {\n+            return;\n+        }\n+\n+        LOGGER.info(\"[{}] Running inference on model [{}]\", config.getId(), modelId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4ODY2Mw==", "bodyText": "I'm pleased you've implemented the progress meter gets to fixed number then stalls for ages feature", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451388663", "createdAt": "2020-07-08T08:54:36Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InferenceRunner {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(InferenceRunner.class);\n+\n+    private static final int MAX_PROGRESS_BEFORE_COMPLETION = 98;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MDY2OA==", "bodyText": "Looks like a partial refactoring, a public method should not be called internalX.\nThis does not update the stats fields as infer() does is that intentional?", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451450668", "createdAt": "2020-07-08T10:45:56Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -80,6 +80,15 @@ void persistStats(boolean flush) {\n         }\n     }\n \n+    public InferenceResults internalInfer(Map<String, Object> fields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NTA3Ng==", "bodyText": "Whats the behaviour here if the documents in the index change between batches e.g. if more are added or removed? Will the value getTotalHits() change?", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451455076", "createdAt": "2020-07-08T10:54:59Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java", "diffHunk": "@@ -88,6 +97,9 @@ public boolean hasNext() {\n         }\n \n         SearchResponse searchResponse = doSearch(searchAfterFields());\n+        if (trackTotalHits && totalHits.get() == 0) {\n+            totalHits.set(searchResponse.getHits().getTotalHits().value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "committedDate": "2020-07-08T16:24:44Z", "message": "Addresses Przemek's review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "committedDate": "2020-07-08T16:24:46Z", "message": "More review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a7b78dbb7bfdc618f170edf465ea5a15ffbb37a", "author": {"user": {"login": "dimitris-athanasiou", "name": "Dimitris Athanasiou"}}, "url": "https://github.com/elastic/elasticsearch/commit/9a7b78dbb7bfdc618f170edf465ea5a15ffbb37a", "committedDate": "2020-07-08T16:27:27Z", "message": "Add comment for trackick total hits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "906902d322c06166258243670f2959bb337881a9", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/906902d322c06166258243670f2959bb337881a9", "committedDate": "2020-07-08T17:31:11Z", "message": "Merge branch 'master' into feature/perform-test-inference-on-java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDI0MTAw", "url": "https://github.com/elastic/elasticsearch/pull/58877#pullrequestreview-445424100", "createdAt": "2020-07-09T09:01:56Z", "commit": {"oid": "906902d322c06166258243670f2959bb337881a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NTI2NDU1", "url": "https://github.com/elastic/elasticsearch/pull/58877#pullrequestreview-445526455", "createdAt": "2020-07-09T11:26:17Z", "commit": {"oid": "906902d322c06166258243670f2959bb337881a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2342, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}