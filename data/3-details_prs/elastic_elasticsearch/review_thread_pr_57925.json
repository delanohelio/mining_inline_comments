{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzY1ODQ0", "number": 57925, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMjozMFrOEERDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo0NzoyM1rOEK-yYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTA5MTkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMjozMFrOGhx5Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo1ODoxNVrOGiCWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MzYzNA==", "bodyText": "I think this should have been RejectedExecutionException instead of ESRejectedExecutionException. Though I think widening it to Exception may not be a bad idea given that not being able to schedule this means not being able to return a response to the user.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438073634", "createdAt": "2020-06-10T12:12:30Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -218,17 +217,19 @@ private void internalAddCompletionListener(ActionListener<AsyncSearchResponse> l\n                 // ensure that we consumes the listener only once\n                 AtomicBoolean hasRun = new AtomicBoolean(false);\n                 long id = completionId++;\n-\n                 final Cancellable cancellable;\n                 try {\n-                    cancellable = threadPool.schedule(() -> {\n-                        if (hasRun.compareAndSet(false, true)) {\n-                            // timeout occurred before completion\n-                            removeCompletionListener(id);\n-                            listener.onResponse(getResponseWithHeaders());\n-                        }\n-                    }, waitForCompletion, \"generic\");\n-                } catch (EsRejectedExecutionException exc) {\n+                     cancellable = threadPool.schedule(\n+                         () -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // timeout occurred before completion\n+                                removeCompletionListener(id);\n+                                listener.onResponse(getResponseWithHeaders());\n+                            }\n+                        },\n+                        waitForCompletion,\n+                        \"generic\");\n+                } catch(Exception exc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MzIwNg==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438343206", "createdAt": "2020-06-10T18:58:15Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -218,17 +217,19 @@ private void internalAddCompletionListener(ActionListener<AsyncSearchResponse> l\n                 // ensure that we consumes the listener only once\n                 AtomicBoolean hasRun = new AtomicBoolean(false);\n                 long id = completionId++;\n-\n                 final Cancellable cancellable;\n                 try {\n-                    cancellable = threadPool.schedule(() -> {\n-                        if (hasRun.compareAndSet(false, true)) {\n-                            // timeout occurred before completion\n-                            removeCompletionListener(id);\n-                            listener.onResponse(getResponseWithHeaders());\n-                        }\n-                    }, waitForCompletion, \"generic\");\n-                } catch (EsRejectedExecutionException exc) {\n+                     cancellable = threadPool.schedule(\n+                         () -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // timeout occurred before completion\n+                                removeCompletionListener(id);\n+                                listener.onResponse(getResponseWithHeaders());\n+                            }\n+                        },\n+                        waitForCompletion,\n+                        \"generic\");\n+                } catch(Exception exc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MzYzNA=="}, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTA5NjYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxNDowMVrOGhx8Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxNDowMVrOGhx8Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDQxNQ==", "bodyText": "I have not found a simple way to test this. Unit testing a transport action is a bit of a nightmare with all the required dependencies. And from an integ test, how do I trigger a failure when scheduling the wait for completion thread?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438074415", "createdAt": "2020-06-10T12:14:01Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -136,6 +136,11 @@ public void onFailure(Exception exc) {\n \n                 @Override\n                 public void onFailure(Exception exc) {\n+                    //this will only ever be called when there's an issue registering the completion listener. Mostly the issue will be\n+                    //when scheduling the thread that returns a response after the wait for completion timeout.\n+                    //Note that addCompletionListener may be executed asynchronously as it has to wait for onListShards to be called,\n+                    //which is why we need to rely on the listener rather than catching.\n+                    taskManager.unregister(searchTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTA5ODE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxNDoyOVrOGhx9NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMjoxNFrOGiCd_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDY3Ng==", "bodyText": "here I added the same catch that we have below for storeFinalResponse. It's based on paranoia, but should not hurt?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438074676", "createdAt": "2020-06-10T12:14:29Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -183,18 +188,26 @@ private void onFinalResponse(CancellableTask submitTask,\n                                  AsyncSearchResponse response,\n                                  Runnable nextAction) {\n         if (submitTask.isCancelled() || searchTask.isCancelled()) {\n-            // the task was cancelled so we ensure that there is nothing stored in the response index.\n-            store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n-                resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n-                exc -> {\n-                    logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\", searchTask.getExecutionId()), exc);\n-                    unregisterTaskAndMoveOn(searchTask, nextAction);\n-                }));\n+            try {\n+                // the task was cancelled so we ensure that there is nothing stored in the response index.\n+                store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n+                    resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n+                    exc -> {\n+                        logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                            searchTask.getExecutionId().getEncoded()), exc);\n+                        unregisterTaskAndMoveOn(searchTask, nextAction);\n+                    }));\n+            } catch(Exception exc) {\n+                logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                        searchTask.getExecutionId().getEncoded()),\n+                    exc);\n+                unregisterTaskAndMoveOn(searchTask, nextAction);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTIxMg==", "bodyText": "We could also make the try/catch in deleteResponse and call onFailure instead of throwing an exception ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438345212", "createdAt": "2020-06-10T19:02:14Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -183,18 +188,26 @@ private void onFinalResponse(CancellableTask submitTask,\n                                  AsyncSearchResponse response,\n                                  Runnable nextAction) {\n         if (submitTask.isCancelled() || searchTask.isCancelled()) {\n-            // the task was cancelled so we ensure that there is nothing stored in the response index.\n-            store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n-                resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n-                exc -> {\n-                    logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\", searchTask.getExecutionId()), exc);\n-                    unregisterTaskAndMoveOn(searchTask, nextAction);\n-                }));\n+            try {\n+                // the task was cancelled so we ensure that there is nothing stored in the response index.\n+                store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n+                    resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n+                    exc -> {\n+                        logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                            searchTask.getExecutionId().getEncoded()), exc);\n+                        unregisterTaskAndMoveOn(searchTask, nextAction);\n+                    }));\n+            } catch(Exception exc) {\n+                logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                        searchTask.getExecutionId().getEncoded()),\n+                    exc);\n+                unregisterTaskAndMoveOn(searchTask, nextAction);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDY3Ng=="}, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDc0MDU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMToxN1rOGiCcPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMToxN1rOGiCcPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NDc2NA==", "bodyText": "I was thinking of this and I don't think we should add the failure here. It can be transient so a retry may fix the issue.  I'd prefer that we try/catch the call to toAsyncSearchResponse and use a plain ActionListener to notify the failure, wdyt ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438344764", "createdAt": "2020-06-10T19:01:17Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -150,8 +150,19 @@ void addShardFailure(int shardIndex, ShardSearchFailure failure) {\n      * This method is synchronized to ensure that we don't perform final reduces concurrently.\n      */\n     synchronized AsyncSearchResponse toAsyncSearchResponse(AsyncSearchTask task, long expirationTime) {\n-        return new AsyncSearchResponse(task.getExecutionId().getEncoded(), findOrBuildResponse(task),\n-                failure, isPartial, frozen == false, task.getStartTime(), expirationTime);\n+        SearchResponse searchResponse = null;\n+        Exception error = failure;\n+        try {\n+            searchResponse = findOrBuildResponse(task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzgyNjQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo0NTo0NFrOGqAh9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0OTo1N1rOGq9TOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMjA3MQ==", "bodyText": "I think this is simpler and even preserves status codes, not sure why we were using guessRootCauses", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r446702071", "createdAt": "2020-06-28T21:45:44Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -130,17 +131,7 @@ synchronized void updateWithFailure(Exception exc) {\n         //note that when search fails, we may have gotten partial results before the failure. In that case async\n         // search will return an error plus the last partial results that were collected.\n         this.isPartial = true;\n-        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(exc);\n-        if (rootCauses == null || rootCauses.length == 0) {\n-            this.failure = new ElasticsearchException(exc.getMessage(), exc) {\n-                @Override\n-                protected String getExceptionName() {\n-                    return getExceptionName(getCause());\n-                }\n-            };\n-        } else {\n-            this.failure = rootCauses[0];\n-        }\n+        this.failure = ExceptionsHelper.convertToElastic(exc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzcyMA==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447697720", "createdAt": "2020-06-30T13:49:57Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -130,17 +131,7 @@ synchronized void updateWithFailure(Exception exc) {\n         //note that when search fails, we may have gotten partial results before the failure. In that case async\n         // search will return an error plus the last partial results that were collected.\n         this.isPartial = true;\n-        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(exc);\n-        if (rootCauses == null || rootCauses.length == 0) {\n-            this.failure = new ElasticsearchException(exc.getMessage(), exc) {\n-                @Override\n-                protected String getExceptionName() {\n-                    return getExceptionName(getCause());\n-                }\n-            };\n-        } else {\n-            this.failure = rootCauses[0];\n-        }\n+        this.failure = ExceptionsHelper.convertToElastic(exc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMjA3MQ=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDMwNTEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0NDo0NFrOGq9EWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNjoxOFrOGrcC3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MzkxMg==", "bodyText": "should we copy the completion listeners in the synchronized block to avoid concurrent delete (unregister) ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447693912", "createdAt": "2020-06-30T13:44:44Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMTQzNw==", "bodyText": "good idea", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448201437", "createdAt": "2020-07-01T08:26:18Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MzkxMg=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDMxNDE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0Njo0M1rOGq9KHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxMTozMlrOGrbgBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTM5MQ==", "bodyText": "we still need to cancel the cancellable on failure", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447695391", "createdAt": "2020-06-30T13:46:43Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -220,38 +218,45 @@ private void internalAddCompletionListener(ActionListener<AsyncSearchResponse> l\n                 // ensure that we consumes the listener only once\n                 AtomicBoolean hasRun = new AtomicBoolean(false);\n                 long id = completionId++;\n-\n                 final Cancellable cancellable;\n                 try {\n-                    cancellable = threadPool.schedule(() -> {\n-                        if (hasRun.compareAndSet(false, true)) {\n-                            // timeout occurred before completion\n-                            removeCompletionListener(id);\n-                            listener.onResponse(getResponseWithHeaders());\n-                        }\n-                    }, waitForCompletion, \"generic\");\n-                } catch (EsRejectedExecutionException exc) {\n+                     cancellable = threadPool.schedule(\n+                         () -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // timeout occurred before completion\n+                                removeCompletionListener(id);\n+                                getResponseWithHeaders(listener);\n+                            }\n+                        },\n+                        waitForCompletion,\n+                        \"generic\");\n+                } catch(Exception exc) {\n                     listener.onFailure(exc);\n                     return;\n                 }\n-                completionListeners.put(id, resp -> {\n-                    if (hasRun.compareAndSet(false, true)) {\n-                        // completion occurred before timeout\n-                        cancellable.cancel();\n-                        listener.onResponse(resp);\n-                    }\n-                });\n+                completionListeners.register(\n+                    id,\n+                    ActionListener.wrap(\n+                        resp -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // completion occurred before timeout\n+                                cancellable.cancel();\n+                                listener.onResponse(resp);\n+                            }\n+                        },\n+                        listener::onFailure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MjUxNg==", "bodyText": "yes indeed :)", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448192516", "createdAt": "2020-07-01T08:11:32Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -220,38 +218,45 @@ private void internalAddCompletionListener(ActionListener<AsyncSearchResponse> l\n                 // ensure that we consumes the listener only once\n                 AtomicBoolean hasRun = new AtomicBoolean(false);\n                 long id = completionId++;\n-\n                 final Cancellable cancellable;\n                 try {\n-                    cancellable = threadPool.schedule(() -> {\n-                        if (hasRun.compareAndSet(false, true)) {\n-                            // timeout occurred before completion\n-                            removeCompletionListener(id);\n-                            listener.onResponse(getResponseWithHeaders());\n-                        }\n-                    }, waitForCompletion, \"generic\");\n-                } catch (EsRejectedExecutionException exc) {\n+                     cancellable = threadPool.schedule(\n+                         () -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // timeout occurred before completion\n+                                removeCompletionListener(id);\n+                                getResponseWithHeaders(listener);\n+                            }\n+                        },\n+                        waitForCompletion,\n+                        \"generic\");\n+                } catch(Exception exc) {\n                     listener.onFailure(exc);\n                     return;\n                 }\n-                completionListeners.put(id, resp -> {\n-                    if (hasRun.compareAndSet(false, true)) {\n-                        // completion occurred before timeout\n-                        cancellable.cancel();\n-                        listener.onResponse(resp);\n-                    }\n-                });\n+                completionListeners.register(\n+                    id,\n+                    ActionListener.wrap(\n+                        resp -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // completion occurred before timeout\n+                                cancellable.cancel();\n+                                listener.onResponse(resp);\n+                            }\n+                        },\n+                        listener::onFailure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTM5MQ=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDMyNDM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0OTowMFrOGq9QbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTowMzo1OVrOGrhRrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzAwNQ==", "bodyText": "The other solution would be to build the error response when catching the exception in getResponse ? This way we don't need to differentiate between a failure during partial reduce and a fatal failure. They both return an async search response that contains a failure ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447697005", "createdAt": "2020-06-30T13:49:00Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);\n+        //TODO is clearing the map necessary? we will only execute the listeners once anyways\n+        //completionListeners.clear();\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse}.\n      */\n-    private AsyncSearchResponse getResponse() {\n-        assert searchResponse.get() != null;\n-        checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis);\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, false);\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse} and restores the response headers\n      * in the local thread context.\n      */\n-    private AsyncSearchResponse getResponseWithHeaders() {\n+    private void getResponseWithHeaders(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, true);\n+    }\n+\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener, boolean restoreResponseHeaders) {\n         assert searchResponse.get() != null;\n         checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponseWithHeaders(this, expirationTimeMillis);\n+        AsyncSearchResponse asyncSearchResponse;\n+        try {\n+            asyncSearchResponse = searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis, restoreResponseHeaders);\n+        } catch(Exception e) {\n+            listener.onFailure(e);\n+            return;\n+        }\n+        listener.onResponse(asyncSearchResponse);\n+    }\n+\n+    AsyncSearchResponse buildErrorResponse(SearchResponse searchResponse, Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwODQzNg==", "bodyText": "That is along the lines of what I had in the first iteration, and I believe it defeats the purpose of holding ActionListeners instead of Consumers. We have three places that require different behaviour currently when we get reduction failures:\n\nsubmit when the timeout expires, we treat is a fatal failure and cancel the search task\nsubmit when the response completes, we already returned, we store async search response\nget: we treat it as a transient failure\n\nI think we could maintain the behaviour listed above even if we did not hold action listeners? Only when getting a response the consumer should check if it holds a failure and act accordingly?\nI am not sure though if you meant on changing also some of this behaviour, especially because I don't completely follow your statement \" This way we don't need to differentiate between a failure during partial reduce and a fatal failure.\".\nI was actually wondering if we should be more clear with the user, maybe wrapping the exception, and let them know when the exception comes from search and when it comes from async search. I can see how using suppressed exceptions gives you all that happened but it's hard to decipher and debug.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448208436", "createdAt": "2020-07-01T08:38:06Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);\n+        //TODO is clearing the map necessary? we will only execute the listeners once anyways\n+        //completionListeners.clear();\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse}.\n      */\n-    private AsyncSearchResponse getResponse() {\n-        assert searchResponse.get() != null;\n-        checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis);\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, false);\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse} and restores the response headers\n      * in the local thread context.\n      */\n-    private AsyncSearchResponse getResponseWithHeaders() {\n+    private void getResponseWithHeaders(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, true);\n+    }\n+\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener, boolean restoreResponseHeaders) {\n         assert searchResponse.get() != null;\n         checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponseWithHeaders(this, expirationTimeMillis);\n+        AsyncSearchResponse asyncSearchResponse;\n+        try {\n+            asyncSearchResponse = searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis, restoreResponseHeaders);\n+        } catch(Exception e) {\n+            listener.onFailure(e);\n+            return;\n+        }\n+        listener.onResponse(asyncSearchResponse);\n+    }\n+\n+    AsyncSearchResponse buildErrorResponse(SearchResponse searchResponse, Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzAwNQ=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNTg4MA==", "bodyText": "What I meant is that the context of the failure is important so we should leave it to the consumer ? In general, and sorry for the back and forth on this, I think we should always return an AsyncSearchResponse even in the case of a failure.\nThe failure can be transient, in such case is_running should be true (the search action is still running).\nI also don't think we should cancel the search if we have a failure when reducing a partial search response. We should return the response with the transient failure and the metadata associated with the current search (number of shards, id, ...). That would simplify the handling of failures and would be consistent with transient failures in get ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448225880", "createdAt": "2020-07-01T09:08:33Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);\n+        //TODO is clearing the map necessary? we will only execute the listeners once anyways\n+        //completionListeners.clear();\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse}.\n      */\n-    private AsyncSearchResponse getResponse() {\n-        assert searchResponse.get() != null;\n-        checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis);\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, false);\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse} and restores the response headers\n      * in the local thread context.\n      */\n-    private AsyncSearchResponse getResponseWithHeaders() {\n+    private void getResponseWithHeaders(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, true);\n+    }\n+\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener, boolean restoreResponseHeaders) {\n         assert searchResponse.get() != null;\n         checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponseWithHeaders(this, expirationTimeMillis);\n+        AsyncSearchResponse asyncSearchResponse;\n+        try {\n+            asyncSearchResponse = searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis, restoreResponseHeaders);\n+        } catch(Exception e) {\n+            listener.onFailure(e);\n+            return;\n+        }\n+        listener.onResponse(asyncSearchResponse);\n+    }\n+\n+    AsyncSearchResponse buildErrorResponse(SearchResponse searchResponse, Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzAwNQ=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDMyNg==", "bodyText": "Ok I need to give this a try, especially as the first iteration did not have yet the described different behaviour in submit and get. I think that the main argument for this is to simplify things, adding action listeners adds complexity and having to call buildErrorResponse from submit is weird and should be removed if possible, which is kind of why I initially went down that route :)", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448230326", "createdAt": "2020-07-01T09:16:19Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);\n+        //TODO is clearing the map necessary? we will only execute the listeners once anyways\n+        //completionListeners.clear();\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse}.\n      */\n-    private AsyncSearchResponse getResponse() {\n-        assert searchResponse.get() != null;\n-        checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis);\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, false);\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse} and restores the response headers\n      * in the local thread context.\n      */\n-    private AsyncSearchResponse getResponseWithHeaders() {\n+    private void getResponseWithHeaders(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, true);\n+    }\n+\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener, boolean restoreResponseHeaders) {\n         assert searchResponse.get() != null;\n         checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponseWithHeaders(this, expirationTimeMillis);\n+        AsyncSearchResponse asyncSearchResponse;\n+        try {\n+            asyncSearchResponse = searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis, restoreResponseHeaders);\n+        } catch(Exception e) {\n+            listener.onFailure(e);\n+            return;\n+        }\n+        listener.onResponse(asyncSearchResponse);\n+    }\n+\n+    AsyncSearchResponse buildErrorResponse(SearchResponse searchResponse, Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzAwNQ=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4NzE0OA==", "bodyText": "having gone back to the consumer approach, I see the \"context\" argument better. Returning async search response is more convenient as it holds the needed info to tell what is happening, while an exception alone does not say much besides that an error has happened.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448287148", "createdAt": "2020-07-01T11:03:59Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);\n+        //TODO is clearing the map necessary? we will only execute the listeners once anyways\n+        //completionListeners.clear();\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse}.\n      */\n-    private AsyncSearchResponse getResponse() {\n-        assert searchResponse.get() != null;\n-        checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis);\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, false);\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse} and restores the response headers\n      * in the local thread context.\n      */\n-    private AsyncSearchResponse getResponseWithHeaders() {\n+    private void getResponseWithHeaders(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, true);\n+    }\n+\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener, boolean restoreResponseHeaders) {\n         assert searchResponse.get() != null;\n         checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponseWithHeaders(this, expirationTimeMillis);\n+        AsyncSearchResponse asyncSearchResponse;\n+        try {\n+            asyncSearchResponse = searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis, restoreResponseHeaders);\n+        } catch(Exception e) {\n+            listener.onFailure(e);\n+            return;\n+        }\n+        listener.onResponse(asyncSearchResponse);\n+    }\n+\n+    AsyncSearchResponse buildErrorResponse(SearchResponse searchResponse, Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzAwNQ=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDM1NzI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/FailReduceAggPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1NTo0NVrOGq9k0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNzoyMVrOGrdfng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMjIyNA==", "bodyText": "You don't really need a full plugin since we only use the FailReduceInternalAgg and are in charge of the registry in  AsyncSearchTaskTests  ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447702224", "createdAt": "2020-06-30T13:55:45Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/FailReduceAggPlugin.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.common.breaker.CircuitBreaker;\n+import org.elasticsearch.common.breaker.CircuitBreakingException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ContextParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SearchPlugin;\n+import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorBase;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FailReduceAggPlugin extends Plugin implements SearchPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNTE4Mg==", "bodyText": "the plugin is used in AsyncSearchActionIT not in AsyncSearchTaskTests", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448225182", "createdAt": "2020-07-01T09:07:21Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/FailReduceAggPlugin.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.common.breaker.CircuitBreaker;\n+import org.elasticsearch.common.breaker.CircuitBreakingException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ContextParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SearchPlugin;\n+import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorBase;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FailReduceAggPlugin extends Plugin implements SearchPlugin {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMjIyNA=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDEwODk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTowOToxM1rOGrhb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTowOToxM1rOGrhb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4OTc1MQ==", "bodyText": "++, we should return the current stats (number of shards, shard failures, ...) and just omit the partial aggs.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448289751", "createdAt": "2020-07-01T11:09:13Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -191,14 +171,33 @@ private SearchResponse findOrBuildResponse(AsyncSearchTask task) {\n \n     /**\n      * Creates an {@link AsyncSearchResponse} based on the current state of the mutable response.\n-     * This method also restores the response headers in the current thread context if the final response is available.\n+     * The final reduce of the aggregations is executed if needed (partial response).\n+     * This method is synchronized to ensure that we don't perform final reduces concurrently.\n+     * This method also restores the response headers in the current thread context when requested, if the final response is available.\n      */\n-    synchronized AsyncSearchResponse toAsyncSearchResponseWithHeaders(AsyncSearchTask task, long expirationTime) {\n-        AsyncSearchResponse resp = toAsyncSearchResponse(task, expirationTime);\n-        if (responseHeaders != null) {\n+    synchronized AsyncSearchResponse toAsyncSearchResponse(AsyncSearchTask task,\n+                                                           long expirationTime,\n+                                                           boolean restoreResponseHeaders) {\n+        if (restoreResponseHeaders && responseHeaders != null) {\n             restoreResponseHeadersContext(threadContext, responseHeaders);\n         }\n-        return resp;\n+        return new AsyncSearchResponse(task.getExecutionId().getEncoded(), findOrBuildResponse(task),\n+            failure, isPartial, frozen == false, task.getStartTime(), expirationTime);\n+    }\n+\n+    synchronized AsyncSearchResponse buildErrorResponse(AsyncSearchTask task,\n+                                                        long expirationTime,\n+                                                        ElasticsearchException exception) {\n+        ElasticsearchException error;\n+        if (this.failure == null) {\n+            error = exception;\n+        } else {\n+            error = this.failure;\n+            error.addSuppressed(exception);\n+        }\n+        //TODO add some search response here rather than null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e73685a5e74662506a721eec59322845729b8a4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc0MTIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToxMDo1MVrOGsEVeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo0NDoyNFrOGsVlqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTU2Mg==", "bodyText": "is the additional wrapping ok? I think it's odd that we have to have it, but useful to clarify where errors come from: async search or search execution.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448861562", "createdAt": "2020-07-02T09:10:51Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -405,12 +425,10 @@ public void onResponse(SearchResponse response) {\n \n         @Override\n         public void onFailure(Exception exc) {\n-            if (searchResponse.get() == null) {\n-                // if the failure occurred before calling onListShards\n-                searchResponse.compareAndSet(null,\n-                    new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n-            }\n-            searchResponse.get().updateWithFailure(exc);\n+            // if the failure occurred before calling onListShards\n+            searchResponse.compareAndSet(null, new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n+            searchResponse.get().updateWithFailure(new ElasticsearchStatusException(\"error while executing search\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8927ca1ad90c54a33c275d0fc5b7ba73d2e970"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NDIzNQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449144235", "createdAt": "2020-07-02T16:44:24Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -405,12 +425,10 @@ public void onResponse(SearchResponse response) {\n \n         @Override\n         public void onFailure(Exception exc) {\n-            if (searchResponse.get() == null) {\n-                // if the failure occurred before calling onListShards\n-                searchResponse.compareAndSet(null,\n-                    new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n-            }\n-            searchResponse.get().updateWithFailure(exc);\n+            // if the failure occurred before calling onListShards\n+            searchResponse.compareAndSet(null, new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n+            searchResponse.get().updateWithFailure(new ElasticsearchStatusException(\"error while executing search\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTU2Mg=="}, "originalCommit": {"oid": "9a8927ca1ad90c54a33c275d0fc5b7ba73d2e970"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQ5MjUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo0NToyN1rOGsVoUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo1NToxMlrOGsV8gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NDkxNQ==", "bodyText": "Can you reword this comment to make it understandable ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449144915", "createdAt": "2020-07-02T16:45:27Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -126,7 +126,10 @@ public void onFailure(Exception exc) {\n \n                 @Override\n                 public void onFailure(Exception exc) {\n-                    submitListener.onFailure(exc);\n+                    //this will only ever be called when there's an issue scheduling the thread will invoke\n+                    //the completion listener once the wait for completion timeout expires", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MDA4MQ==", "bodyText": "ops ok", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449150081", "createdAt": "2020-07-02T16:55:12Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -126,7 +126,10 @@ public void onFailure(Exception exc) {\n \n                 @Override\n                 public void onFailure(Exception exc) {\n-                    submitListener.onFailure(exc);\n+                    //this will only ever be called when there's an issue scheduling the thread will invoke\n+                    //the completion listener once the wait for completion timeout expires", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NDkxNQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQ5OTIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo0NzoyM1rOGsVsgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDo1NToyN1rOGssmrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ==", "bodyText": "I don't think you can make that change without breaking BWC ? You'd need to wrap the exception if we read from an earlier version ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449145985", "createdAt": "2020-07-02T16:47:23Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NjIzMA==", "bodyText": "Although I think we should stick to an  Exception here to keep things simple", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449146230", "createdAt": "2020-07-02T16:47:50Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MDU0Ng==", "bodyText": "I thought I have checked and this is fine. I haven't changed how the exception gets serialized? it was in fact always an elasticsearch exception before I think? I will check again.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449150546", "createdAt": "2020-07-02T16:55:58Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyNjEwNA==", "bodyText": "I am double checking: this change is not required but I think it simplifies things (I could also simplify the status method which I missed before) yet I agree that we have to make sure it does not break anything.\nThe failure in MutableSearchResponse has always been an ElasticsearchException , and it used to be the only exception that gets passed in when building an AsyncSearchResponse. With this change we can also have a reduce exception, but that is still an ElasticsearchException. So, effectively, ElasticsearchException is the only exception that AsyncSearchResponse will ever hold. I think as long as we don't modify how we serialize it over the wire (by removing the type of exception because we already know its type) we should be ok? Is there anything I am missing that could cause a bw comp breakage?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449226104", "createdAt": "2020-07-02T19:30:17Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0MjA1MQ==", "bodyText": "We had issues there before. The ElasticsearchException can be serialized over the wire and deserialized as another exception if it is not registered so I'd prefer that we keep Exception for now. I am not sure why do you think it simplifies things ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449242051", "createdAt": "2020-07-02T20:08:22Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxNzU5Mw==", "bodyText": "I think it simplifies things because it is super confusing to declare an exception when what we carry is always ElasticsearchException, and it simplifies returning the correct status, no guessing needed. I do get nervous though about the cast in StreamInput#readException, it is trappy and I was also wondering if this is not too risky. I reverted this bit, but I still don't get what it would break :) Possibly though it is wise to keep things as-is because async responses are stored in the index using the wire format which makes things tricky when it comes to bw comp.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449517593", "createdAt": "2020-07-03T10:46:37Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMTMyNA==", "bodyText": "Yep the casting is trappy so +1 to keep it as is for the moment. We can change the way exceptions are handled in a follow up but that should be only for new versions imo.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449521324", "createdAt": "2020-07-03T10:55:27Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1664, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}