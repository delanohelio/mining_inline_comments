{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3Mzc3Njcy", "number": 61092, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyODozMlrOEaB-HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo1MDo0MVrOEaFpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzMwNzE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyODozMlrOHDMzCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyODozMlrOHDMzCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNzQ1MQ==", "bodyText": "Great addition of explicitBoolParam.\nNot relevant for this PR, but I remember for IpFieldMapper ignored_maformed we use a simple bool param,  may be we need to convert it to explictBoolParam as well.", "url": "https://github.com/elastic/elasticsearch/pull/61092#discussion_r473117451", "createdAt": "2020-08-19T15:28:32Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "diffHunk": "@@ -265,6 +271,35 @@ private void toXContent(XContentBuilder builder, boolean includeDefaults) throws\n             return new Parameter<>(name, updateable, () -> defaultValue, (n, c, o) -> XContentMapValues.nodeBooleanValue(o), initializer);\n         }\n \n+        /**\n+         * Defines a parameter that takes the values {@code true} or {@code false}, and will always serialize\n+         * its value if configured.\n+         * @param name          the parameter name\n+         * @param updateable    whether the parameter can be changed by a mapping update\n+         * @param initializer   a function that reads the parameter value from an existing mapper\n+         * @param defaultValue  the default value, to be used if the parameter is undefined in a mapping\n+         */\n+        public static Parameter<Explicit<Boolean>> explicitBoolParam(String name, boolean updateable,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b09c36946dd6d89f3c1fb848b64b197da97bdae"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzQ4ODU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoxMjoxOFrOHDOlPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowNjo1OFrOHD_4mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0NjY4NQ==", "bodyText": "Should we combine these 2 conditions with OR?", "url": "https://github.com/elastic/elasticsearch/pull/61092#discussion_r473146685", "createdAt": "2020-08-19T16:12:18Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "diffHunk": "@@ -81,9 +82,14 @@ public final ParametrizedFieldMapper merge(Mapper mergeWith) {\n             throw new IllegalArgumentException(\"mapper [\" + name() + \"] cannot be changed from type [\"\n                 + contentType() + \"] to [\" + mergeWith.getClass().getSimpleName() + \"]\");\n         }\n+        String mergeWithContentType = ((FieldMapper)mergeWith).contentType();\n         if (Objects.equals(this.getClass(), mergeWith.getClass()) == false) {\n             throw new IllegalArgumentException(\"mapper [\" + name() + \"] cannot be changed from type [\"\n-                + contentType() + \"] to [\" + ((FieldMapper) mergeWith).contentType() + \"]\");\n+                + contentType() + \"] to [\" + mergeWithContentType + \"]\");\n+        }\n+        if (Objects.equals(contentType(), mergeWithContentType) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b09c36946dd6d89f3c1fb848b64b197da97bdae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDQ1Ng==", "bodyText": "I'm actually thinking that we should rely entirely on contentType, as that will allow us to do things like 'upgrade' an enum field to a keyword field, but that's for later.", "url": "https://github.com/elastic/elasticsearch/pull/61092#discussion_r473954456", "createdAt": "2020-08-20T13:06:58Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "diffHunk": "@@ -81,9 +82,14 @@ public final ParametrizedFieldMapper merge(Mapper mergeWith) {\n             throw new IllegalArgumentException(\"mapper [\" + name() + \"] cannot be changed from type [\"\n                 + contentType() + \"] to [\" + mergeWith.getClass().getSimpleName() + \"]\");\n         }\n+        String mergeWithContentType = ((FieldMapper)mergeWith).contentType();\n         if (Objects.equals(this.getClass(), mergeWith.getClass()) == false) {\n             throw new IllegalArgumentException(\"mapper [\" + name() + \"] cannot be changed from type [\"\n-                + contentType() + \"] to [\" + ((FieldMapper) mergeWith).contentType() + \"]\");\n+                + contentType() + \"] to [\" + mergeWithContentType + \"]\");\n+        }\n+        if (Objects.equals(contentType(), mergeWithContentType) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0NjY4NQ=="}, "originalCommit": {"oid": "1b09c36946dd6d89f3c1fb848b64b197da97bdae"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzkwNDUwOnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0OTozN1rOHDSzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowODo1NFrOHD_9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxNTgzMQ==", "bodyText": "You are not using a method Parameter.doubleParameter that you introduced?", "url": "https://github.com/elastic/elasticsearch/pull/61092#discussion_r473215831", "createdAt": "2020-08-19T17:49:37Z", "author": {"login": "mayya-sharipova"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "diffHunk": "@@ -59,124 +54,82 @@\n import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n /** A {@link FieldMapper} for scaled floats. Values are internally multiplied\n  *  by a scaling factor and rounded to the closest long. */\n-public class ScaledFloatFieldMapper extends FieldMapper {\n+public class ScaledFloatFieldMapper extends ParametrizedFieldMapper {\n \n     public static final String CONTENT_TYPE = \"scaled_float\";\n+\n     // use the same default as numbers\n     private static final Setting<Boolean> COERCE_SETTING = NumberFieldMapper.COERCE_SETTING;\n-    private static final FieldType FIELD_TYPE = new FieldType();\n-    static {\n-        FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);\n+\n+    private static ScaledFloatFieldMapper toType(FieldMapper in) {\n+        return (ScaledFloatFieldMapper) in;\n     }\n \n-    public static class Builder extends FieldMapper.Builder<Builder> {\n+    public static class Builder extends ParametrizedFieldMapper.Builder {\n \n-        private boolean scalingFactorSet = false;\n-        private double scalingFactor;\n-        private Boolean ignoreMalformed;\n-        private Boolean coerce;\n-        private Double nullValue;\n+        private final Parameter<Boolean> indexed = Parameter.indexParam(m -> toType(m).indexed, true);\n+        private final Parameter<Boolean> hasDocValues = Parameter.docValuesParam(m -> toType(m).hasDocValues, true);\n+        private final Parameter<Boolean> stored = Parameter.storeParam(m -> toType(m).stored, false);\n \n-        public Builder(String name) {\n-            super(name, FIELD_TYPE);\n-            builder = this;\n-        }\n+        private final Parameter<Explicit<Boolean>> ignoreMalformed;\n+        private final Parameter<Explicit<Boolean>> coerce;\n \n-        public Builder ignoreMalformed(boolean ignoreMalformed) {\n-            this.ignoreMalformed = ignoreMalformed;\n-            return builder;\n-        }\n+        private final Parameter<Double> scalingFactor = new Parameter<>(\"scaling_factor\", false, () -> null,\n+            (n, c, o) -> XContentMapValues.nodeDoubleValue(o), m -> toType(m).scalingFactor)\n+            .setValidator(v -> {\n+                if (v == null) {\n+                    throw new IllegalArgumentException(\"Field [scaling_factor] is required\");\n+                }\n+                if (Double.isFinite(v) == false || v <= 0) {\n+                    throw new IllegalArgumentException(\"[scaling_factor] must be a positive number, got [\" + v + \"]\");\n+                }\n+            });\n+        private final Parameter<Double> nullValue = new Parameter<>(\"null_value\", false, () -> null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b09c36946dd6d89f3c1fb848b64b197da97bdae"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NTYxNw==", "bodyText": "Annoyingly, we can't because we need to take null as a default value in order to check that it has been set, and Parameter.doubleParameter doesn't allow you to do that.", "url": "https://github.com/elastic/elasticsearch/pull/61092#discussion_r473955617", "createdAt": "2020-08-20T13:08:54Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "diffHunk": "@@ -59,124 +54,82 @@\n import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n /** A {@link FieldMapper} for scaled floats. Values are internally multiplied\n  *  by a scaling factor and rounded to the closest long. */\n-public class ScaledFloatFieldMapper extends FieldMapper {\n+public class ScaledFloatFieldMapper extends ParametrizedFieldMapper {\n \n     public static final String CONTENT_TYPE = \"scaled_float\";\n+\n     // use the same default as numbers\n     private static final Setting<Boolean> COERCE_SETTING = NumberFieldMapper.COERCE_SETTING;\n-    private static final FieldType FIELD_TYPE = new FieldType();\n-    static {\n-        FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);\n+\n+    private static ScaledFloatFieldMapper toType(FieldMapper in) {\n+        return (ScaledFloatFieldMapper) in;\n     }\n \n-    public static class Builder extends FieldMapper.Builder<Builder> {\n+    public static class Builder extends ParametrizedFieldMapper.Builder {\n \n-        private boolean scalingFactorSet = false;\n-        private double scalingFactor;\n-        private Boolean ignoreMalformed;\n-        private Boolean coerce;\n-        private Double nullValue;\n+        private final Parameter<Boolean> indexed = Parameter.indexParam(m -> toType(m).indexed, true);\n+        private final Parameter<Boolean> hasDocValues = Parameter.docValuesParam(m -> toType(m).hasDocValues, true);\n+        private final Parameter<Boolean> stored = Parameter.storeParam(m -> toType(m).stored, false);\n \n-        public Builder(String name) {\n-            super(name, FIELD_TYPE);\n-            builder = this;\n-        }\n+        private final Parameter<Explicit<Boolean>> ignoreMalformed;\n+        private final Parameter<Explicit<Boolean>> coerce;\n \n-        public Builder ignoreMalformed(boolean ignoreMalformed) {\n-            this.ignoreMalformed = ignoreMalformed;\n-            return builder;\n-        }\n+        private final Parameter<Double> scalingFactor = new Parameter<>(\"scaling_factor\", false, () -> null,\n+            (n, c, o) -> XContentMapValues.nodeDoubleValue(o), m -> toType(m).scalingFactor)\n+            .setValidator(v -> {\n+                if (v == null) {\n+                    throw new IllegalArgumentException(\"Field [scaling_factor] is required\");\n+                }\n+                if (Double.isFinite(v) == false || v <= 0) {\n+                    throw new IllegalArgumentException(\"[scaling_factor] must be a positive number, got [\" + v + \"]\");\n+                }\n+            });\n+        private final Parameter<Double> nullValue = new Parameter<>(\"null_value\", false, () -> null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxNTgzMQ=="}, "originalCommit": {"oid": "1b09c36946dd6d89f3c1fb848b64b197da97bdae"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzkwODQ5OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo1MDo0MVrOHDS1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo1MDo0MVrOHDS1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxNjQ0NQ==", "bodyText": "You are not using a method Parameter.doubleParameter that you introduced?", "url": "https://github.com/elastic/elasticsearch/pull/61092#discussion_r473216445", "createdAt": "2020-08-19T17:50:41Z", "author": {"login": "mayya-sharipova"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java", "diffHunk": "@@ -59,124 +54,82 @@\n import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n /** A {@link FieldMapper} for scaled floats. Values are internally multiplied\n  *  by a scaling factor and rounded to the closest long. */\n-public class ScaledFloatFieldMapper extends FieldMapper {\n+public class ScaledFloatFieldMapper extends ParametrizedFieldMapper {\n \n     public static final String CONTENT_TYPE = \"scaled_float\";\n+\n     // use the same default as numbers\n     private static final Setting<Boolean> COERCE_SETTING = NumberFieldMapper.COERCE_SETTING;\n-    private static final FieldType FIELD_TYPE = new FieldType();\n-    static {\n-        FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);\n+\n+    private static ScaledFloatFieldMapper toType(FieldMapper in) {\n+        return (ScaledFloatFieldMapper) in;\n     }\n \n-    public static class Builder extends FieldMapper.Builder<Builder> {\n+    public static class Builder extends ParametrizedFieldMapper.Builder {\n \n-        private boolean scalingFactorSet = false;\n-        private double scalingFactor;\n-        private Boolean ignoreMalformed;\n-        private Boolean coerce;\n-        private Double nullValue;\n+        private final Parameter<Boolean> indexed = Parameter.indexParam(m -> toType(m).indexed, true);\n+        private final Parameter<Boolean> hasDocValues = Parameter.docValuesParam(m -> toType(m).hasDocValues, true);\n+        private final Parameter<Boolean> stored = Parameter.storeParam(m -> toType(m).stored, false);\n \n-        public Builder(String name) {\n-            super(name, FIELD_TYPE);\n-            builder = this;\n-        }\n+        private final Parameter<Explicit<Boolean>> ignoreMalformed;\n+        private final Parameter<Explicit<Boolean>> coerce;\n \n-        public Builder ignoreMalformed(boolean ignoreMalformed) {\n-            this.ignoreMalformed = ignoreMalformed;\n-            return builder;\n-        }\n+        private final Parameter<Double> scalingFactor = new Parameter<>(\"scaling_factor\", false, () -> null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b09c36946dd6d89f3c1fb848b64b197da97bdae"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2479, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}