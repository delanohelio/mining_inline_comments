{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNjk0MDA4", "number": 55931, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoyMjo0MVrOD3n7Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzozMzo0NFrOD3oO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjUyMzk1OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/cluster/coordination/DeterministicTaskQueue.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoyMjo0MVrOGN-iNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzozMjoyN1rOGN--XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwOTIzOA==", "bodyText": "Could we instead return EsExecutors.newDirectExecutorService(); if Names.SAME.equals(name)?\nShould we also return the same (non-direct) executor service each time too rather than constructing a new one each time?", "url": "https://github.com/elastic/elasticsearch/pull/55931#discussion_r417309238", "createdAt": "2020-04-29T13:22:41Z", "author": {"login": "DaveCTurner"}, "path": "test/framework/src/main/java/org/elasticsearch/cluster/coordination/DeterministicTaskQueue.java", "diffHunk": "@@ -323,12 +326,13 @@ public ThreadPoolStats stats() {\n \n             @Override\n             public ExecutorService generic() {\n-                return getExecutorService(runnableWrapper);\n+                return executor(Names.GENERIC);\n             }\n \n             @Override\n             public ExecutorService executor(String name) {\n-                return getExecutorService(runnableWrapper);\n+                return executors.computeIfAbsent(name, key -> getExecutorService(runnableWrapper,\n+                        Names.SAME.equals(key) ? Runnable::run : DeterministicTaskQueue.this::scheduleNow));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a73f62f275f33b396c06e3c45052a1ee9d37de"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMjk0NQ==", "bodyText": "Should we also return the same (non-direct) executor service each time too rather than constructing a new one each time?\n\nI mean for all other names, your change to cache them by name looks good but I don't think we need to distinguish the non-direct executors from each other either.", "url": "https://github.com/elastic/elasticsearch/pull/55931#discussion_r417312945", "createdAt": "2020-04-29T13:27:49Z", "author": {"login": "DaveCTurner"}, "path": "test/framework/src/main/java/org/elasticsearch/cluster/coordination/DeterministicTaskQueue.java", "diffHunk": "@@ -323,12 +326,13 @@ public ThreadPoolStats stats() {\n \n             @Override\n             public ExecutorService generic() {\n-                return getExecutorService(runnableWrapper);\n+                return executor(Names.GENERIC);\n             }\n \n             @Override\n             public ExecutorService executor(String name) {\n-                return getExecutorService(runnableWrapper);\n+                return executors.computeIfAbsent(name, key -> getExecutorService(runnableWrapper,\n+                        Names.SAME.equals(key) ? Runnable::run : DeterministicTaskQueue.this::scheduleNow));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwOTIzOA=="}, "originalCommit": {"oid": "78a73f62f275f33b396c06e3c45052a1ee9d37de"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNjQ0NQ==", "bodyText": "Yea you're right on both points. Much simpler now :)", "url": "https://github.com/elastic/elasticsearch/pull/55931#discussion_r417316445", "createdAt": "2020-04-29T13:32:27Z", "author": {"login": "original-brownbear"}, "path": "test/framework/src/main/java/org/elasticsearch/cluster/coordination/DeterministicTaskQueue.java", "diffHunk": "@@ -323,12 +326,13 @@ public ThreadPoolStats stats() {\n \n             @Override\n             public ExecutorService generic() {\n-                return getExecutorService(runnableWrapper);\n+                return executor(Names.GENERIC);\n             }\n \n             @Override\n             public ExecutorService executor(String name) {\n-                return getExecutorService(runnableWrapper);\n+                return executors.computeIfAbsent(name, key -> getExecutorService(runnableWrapper,\n+                        Names.SAME.equals(key) ? Runnable::run : DeterministicTaskQueue.this::scheduleNow));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwOTIzOA=="}, "originalCommit": {"oid": "78a73f62f275f33b396c06e3c45052a1ee9d37de"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjU3NDcwOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/cluster/coordination/DeterministicTaskQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzozMzo0NFrOGN_B8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzozMzo0NFrOGN_B8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNzM2Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/55931#discussion_r417317362", "createdAt": "2020-04-29T13:33:44Z", "author": {"login": "DaveCTurner"}, "path": "test/framework/src/main/java/org/elasticsearch/cluster/coordination/DeterministicTaskQueue.java", "diffHunk": "@@ -323,12 +325,12 @@ public ThreadPoolStats stats() {\n \n             @Override\n             public ExecutorService generic() {\n-                return getExecutorService(runnableWrapper);\n+                return executor(Names.GENERIC);\n             }\n \n             @Override\n             public ExecutorService executor(String name) {\n-                return getExecutorService(runnableWrapper);\n+                return Names.SAME.equals(name) ? EsExecutors.newDirectExecutorService() : forkingExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5c57e13e434c927cf15c09b542e81d5b12b43c"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2507, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}