{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwMjI4NDE3", "number": 57787, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyMTo0NlrOEDQDuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMTozMTozOVrOEEEGOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQ0MjgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlActionTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyMTo0NlrOGgKwQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyMTo0NlrOGgKwQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MzgxMQ==", "bodyText": "Changed this one since Eclipse cannot run it (it's an invalid method name according to the Java conventions).", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436383811", "createdAt": "2020-06-07T17:21:46Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlActionTestCase.java", "diffHunk": "@@ -162,8 +152,9 @@ public void cleanup() throws Exception {\n                 name = spec.note();\n             }\n             if (Strings.isNullOrEmpty(name)) {\n-                name = spec.query();\n+                name = \"\" + (counter.get() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQ0MjkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/mapping-default.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyMjowNFrOGgKwVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyMjowNFrOGgKwVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MzgzMA==", "bodyText": "Using aliases just like in ECS.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436383830", "createdAt": "2020-06-07T17:22:04Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/mapping-default.json", "diffHunk": "@@ -3,10 +3,18 @@\n         \"command_line\" : {\n             \"type\" : \"keyword\"\n         },\n+        \"event_type\" : {\n+            \"type\" : \"keyword\"\n+        },\n         \"event\" : {\n             \"properties\" : {\n                 \"category\" : {\n-                    \"type\" : \"keyword\"\n+                    \"type\" : \"alias\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQ0MzIxOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyMjoyOFrOGgKweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyMjoyOFrOGgKweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4Mzg2NQ==", "bodyText": "These were already in the test_queries file.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436383865", "createdAt": "2020-06-07T17:22:28Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -187,28 +187,6 @@ query = \"file where 66.0 / serial_event_id == 1\"\n expected_event_ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 46]\n query = \"process where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 54 or 70 + serial_event_id < 100\"\n \n-[[queries]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQ0NDU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyNDo0M1rOGgKxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzozMToxOVrOGgK0Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDAzNg==", "bodyText": "@astefan @rw-access case sensitivity biting back. We need to figure out where we stand on this by the end of the month.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436384036", "createdAt": "2020-06-07T17:24:43Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -12,6 +12,15 @@\n # query = 'process where serial_event_id = 1'\n # expected_event_ids  = [1]\n \n+\n+# fails because of string check - msbuild does not match MSBuild", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDc3OA==", "bodyText": "My other PRs for case sensitivity and the updates to the tests themselves should help", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436384778", "createdAt": "2020-06-07T17:31:19Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -12,6 +12,15 @@\n # query = 'process where serial_event_id = 1'\n # expected_event_ids  = [1]\n \n+\n+# fails because of string check - msbuild does not match MSBuild", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDAzNg=="}, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQ0NDk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/rest/src/test/resources/rest-api-spec/test/eql/10_basic.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyNToxNVrOGgKxVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyNToxNVrOGgKxVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDA4Ng==", "bodyText": "Currently the tie breaker is mandatory - which makes sense for ECS and our tests but not the rest, I plan to make it optional.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436384086", "createdAt": "2020-06-07T17:25:15Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/rest/src/test/resources/rest-api-spec/test/eql/10_basic.yml", "diffHunk": "@@ -9,6 +9,7 @@ setup:\n               _id:    1\n           - event:\n               - category: process\n+              - sequence: 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODQ0NTQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzoyNTo1NVrOGgKxkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1MzoyM1rOGhLJtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDE0Ng==", "bodyText": "This needs to be cleaned-up since we don't use it - future work if anybody wants to pick it.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436384146", "createdAt": "2020-06-07T17:25:55Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchRequest.java", "diffHunk": "@@ -272,6 +293,7 @@ public boolean equals(Object o) {\n                 Objects.equals(indicesOptions, that.indicesOptions) &&\n                 Objects.equals(filter, that.filter) &&\n                 Objects.equals(timestampField, that.timestampField) &&\n+                Objects.equals(tieBreakerField, that.tieBreakerField) &&\n                 Objects.equals(eventCategoryField, that.eventCategoryField) &&\n                 Objects.equals(implicitJoinKeyField, that.implicitJoinKeyField) &&\n                 Objects.equals(searchAfterBuilder, that.searchAfterBuilder) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzODkwMw==", "bodyText": "Btw, this is about implictJoinKeyField not tieBreakerField.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437438903", "createdAt": "2020-06-09T13:53:23Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchRequest.java", "diffHunk": "@@ -272,6 +293,7 @@ public boolean equals(Object o) {\n                 Objects.equals(indicesOptions, that.indicesOptions) &&\n                 Objects.equals(filter, that.filter) &&\n                 Objects.equals(timestampField, that.timestampField) &&\n+                Objects.equals(tieBreakerField, that.tieBreakerField) &&\n                 Objects.equals(eventCategoryField, that.eventCategoryField) &&\n                 Objects.equals(implicitJoinKeyField, that.implicitJoinKeyField) &&\n                 Objects.equals(searchAfterBuilder, that.searchAfterBuilder) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDE0Ng=="}, "originalCommit": {"oid": "c8b81962ffec29346efea821293f1dae68698847"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ5MDU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/SequenceStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo0Njo1OVrOGg675g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzowMjo0NVrOGhUAbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MzIyMg==", "bodyText": "Unnecessary empty line?", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437173222", "createdAt": "2020-06-09T06:46:59Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/SequenceStateMachine.java", "diffHunk": "@@ -27,17 +27,24 @@\n     /** this ignores the key */\n     private final long[] timestampMarkers;\n \n+    private final Comparable<Object>[] tieBreakerMarkers;\n+    private final boolean hasTieBreaker;\n+\n     private final int completionStage;\n \n     /** list of completed sequences - separate to avoid polluting the other stages */\n     private final List<Sequence> completed;\n \n-    public SequenceStateMachine(int stages) {\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public SequenceStateMachine(int stages, boolean hasTieBreaker) {\n         this.completionStage = stages - 1;\n         this.stageToKeys = new StageToKeys(completionStage);\n         this.keyToSequences = new KeyToSequences(completionStage);\n         this.timestampMarkers = new long[completionStage];\n+        this.tieBreakerMarkers = new Comparable[completionStage];\n         this.completed = new LinkedList<>();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4Mzk4Mw==", "bodyText": "I've added it to differentiate between value vs collection initialization.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437583983", "createdAt": "2020-06-09T17:02:45Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/SequenceStateMachine.java", "diffHunk": "@@ -27,17 +27,24 @@\n     /** this ignores the key */\n     private final long[] timestampMarkers;\n \n+    private final Comparable<Object>[] tieBreakerMarkers;\n+    private final boolean hasTieBreaker;\n+\n     private final int completionStage;\n \n     /** list of completed sequences - separate to avoid polluting the other stages */\n     private final List<Sequence> completed;\n \n-    public SequenceStateMachine(int stages) {\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public SequenceStateMachine(int stages, boolean hasTieBreaker) {\n         this.completionStage = stages - 1;\n         this.stageToKeys = new StageToKeys(completionStage);\n         this.keyToSequences = new KeyToSequences(completionStage);\n         this.timestampMarkers = new long[completionStage];\n+        this.tieBreakerMarkers = new Comparable[completionStage];\n         this.completed = new LinkedList<>();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MzIyMg=="}, "originalCommit": {"oid": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDM1ODYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TimeOrdinal.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDozOToyN1rOGhDbWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NDoxNVrOGhLNVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjM0NA==", "bodyText": "Ordinal doesn't feel right in this context tbh. How about TimeOrdering?", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437312344", "createdAt": "2020-06-09T10:39:27Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TimeOrdinal.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.sequence;\n+\n+import org.elasticsearch.xpack.ql.capabilities.Resolvable;\n+import org.elasticsearch.xpack.ql.expression.Attribute;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+\n+/**\n+ * Time ordinal for a given event.\n+ * It is an internal construct that wraps the mandatory timestamp attribute and the optional application tie-breaker.\n+ */\n+public class TimeOrdinal implements Resolvable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTgyOA==", "bodyText": "It's not the order per se but rather where in the stream an event stands. And it's not just the time but also the tiebreaker that define the position in the stream.", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437439828", "createdAt": "2020-06-09T13:54:15Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TimeOrdinal.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.sequence;\n+\n+import org.elasticsearch.xpack.ql.capabilities.Resolvable;\n+import org.elasticsearch.xpack.ql.expression.Attribute;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+\n+/**\n+ * Time ordinal for a given event.\n+ * It is an internal construct that wraps the mandatory timestamp attribute and the optional application tie-breaker.\n+ */\n+public class TimeOrdinal implements Resolvable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjM0NA=="}, "originalCommit": {"oid": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDM4ODI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plan/physical/SequenceExec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDo0ODo0N1rOGhDt9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDo0ODo0N1rOGhDt9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxNzEwOQ==", "bodyText": "I know this is old code, but shouldn't this be called timestamp?", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437317109", "createdAt": "2020-06-09T10:48:47Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plan/physical/SequenceExec.java", "diffHunk": "@@ -16,52 +16,59 @@\n import org.elasticsearch.xpack.ql.expression.NamedExpression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.util.CollectionUtils;\n \n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n \n import static java.util.Collections.singletonList;\n+import static org.elasticsearch.xpack.ql.util.CollectionUtils.combine;\n \n public class SequenceExec extends PhysicalPlan {\n \n     private final List<List<Attribute>> keys;\n     private final Attribute timestamp;\n+    private final Attribute tieBreaker;\n \n     public SequenceExec(Source source,\n                         List<List<Attribute>> keys,\n                         List<PhysicalPlan> matches,\n                         List<Attribute> untilKeys,\n                         PhysicalPlan until,\n-                        Attribute timestampField) {\n-        this(source, CollectionUtils.combine(matches, until), CollectionUtils.combine(keys, singletonList(untilKeys)), timestampField);\n+                        Attribute timestampField,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjk2ODg4OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMTozMTozOVrOGhdMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1MjowN1rOGhzTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDQ5Mg==", "bodyText": "tiebreaker is one word, tiebreaker_field maybe?", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437734492", "createdAt": "2020-06-09T21:31:39Z", "author": {"login": "aleksmaus"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "diffHunk": "@@ -43,9 +43,11 @@\n     private int fetchSize = 50;\n     private SearchAfterBuilder searchAfterBuilder;\n     private String query;\n+    private String tieBreakerField;\n \n     static final String KEY_FILTER = \"filter\";\n     static final String KEY_TIMESTAMP_FIELD = \"timestamp_field\";\n+    static final String KEY_TIE_BREAKER_FIELD = \"tie_breaker_field\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76fff87bea723b8b55745ad6eb11dabc4702a1b6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NjcwOA==", "bodyText": "https://en.wikipedia.org/wiki/Tiebreaker", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r438096708", "createdAt": "2020-06-10T12:52:07Z", "author": {"login": "aleksmaus"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "diffHunk": "@@ -43,9 +43,11 @@\n     private int fetchSize = 50;\n     private SearchAfterBuilder searchAfterBuilder;\n     private String query;\n+    private String tieBreakerField;\n \n     static final String KEY_FILTER = \"filter\";\n     static final String KEY_TIMESTAMP_FIELD = \"timestamp_field\";\n+    static final String KEY_TIE_BREAKER_FIELD = \"tie_breaker_field\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDQ5Mg=="}, "originalCommit": {"oid": "76fff87bea723b8b55745ad6eb11dabc4702a1b6"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3611, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}