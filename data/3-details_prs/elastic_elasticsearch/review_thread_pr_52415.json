{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTU4MTk5", "number": 52415, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo0NDo1OFrODjGm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTo1ODozMFrODjtBcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTM0OTk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo0NDo1OFrOFuuQsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozNDowOFrOFvQhUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNjc1Mw==", "bodyText": "Should we make this configurable?", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r384536753", "createdAt": "2020-02-26T14:44:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.elasticsearch.xpack.idp.saml.support.SamlInit;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.Signer;\n+import org.w3c.dom.Element;\n+\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML2_POST_BINDING_URI;\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML2_REDIRECT_BINDING_URI;\n+import static org.opensaml.saml.saml2.core.NameIDType.PERSISTENT;\n+import static org.opensaml.saml.saml2.core.NameIDType.TRANSIENT;\n+import static org.opensaml.xmlsec.signature.Signature.DEFAULT_ELEMENT_NAME;\n+import static org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS;\n+import static org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256;\n+\n+public class SamlMetadataGenerator {\n+\n+    private final SamlFactory samlFactory;\n+    private final SamlIdentityProvider idp;\n+    private final Logger logger = LogManager.getLogger(SamlMetadataGenerator.class);\n+\n+    public SamlMetadataGenerator(SamlFactory samlFactory, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.idp = idp;\n+        SamlInit.initialize();\n+    }\n+\n+    public void generateMetadata(String spEntityId, ActionListener<SamlGenerateMetadataResponse> listener) {\n+        try {\n+            // this will be async\n+            SamlServiceProvider sp = idp.getRegisteredServiceProvider(spEntityId);\n+            if (null == sp) {\n+                listener.onFailure(new IllegalArgumentException(\"Service provider with Entity ID [\" + spEntityId\n+                    + \"] is not registered with this Identity Provider\"));\n+                return;\n+            }\n+            EntityDescriptor metadata = buildEntityDescriptor(sp);\n+            final X509Credential signingCredential = idp.getMetadataSigningCredential();\n+            Element metadataElement = possiblySignDescriptor(metadata, signingCredential);\n+            listener.onResponse(new SamlGenerateMetadataResponse(samlFactory.toString(metadataElement, false)));\n+        } catch (Exception e) {\n+            logger.debug(\"Error generating IDP metadata to share with [\" + spEntityId + \"]\", e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    EntityDescriptor buildEntityDescriptor(SamlServiceProvider sp) throws Exception {\n+        final SamlIdPMetadataBuilder builder = new SamlIdPMetadataBuilder(idp.getEntityId())\n+            .wantAuthnRequestsSigned(sp.shouldSignAuthnRequests())\n+            .withSingleSignOnServiceUrl(SAML2_REDIRECT_BINDING_URI,\n+                idp.getSingleSignOnEndpoint(SAML2_REDIRECT_BINDING_URI))\n+            .withSingleSignOnServiceUrl(SAML2_POST_BINDING_URI,\n+                idp.getSingleSignOnEndpoint(SAML2_POST_BINDING_URI))\n+            .withSingleLogoutServiceUrl(SAML2_REDIRECT_BINDING_URI,\n+                idp.getSingleLogoutEndpoint(SAML2_REDIRECT_BINDING_URI))\n+            .withSingleLogoutServiceUrl(SAML2_POST_BINDING_URI,\n+                idp.getSingleLogoutEndpoint(SAML2_POST_BINDING_URI))\n+            .withSigningCertificate(idp.getSigningCredential().getEntityCertificate())\n+            .withNameIdFormat(PERSISTENT)\n+            .withNameIdFormat(TRANSIENT)\n+            .organization(idp.getOrganization())\n+            .withContact(idp.getTechnicalContact());\n+        return builder.build();\n+    }\n+\n+    Element possiblySignDescriptor(EntityDescriptor descriptor, X509Credential signingCredential) throws MarshallingException,\n+        SignatureException {\n+        EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+        if (null == signingCredential) {\n+            return marshaller.marshall(descriptor);\n+        } else {\n+            Signature signature = samlFactory.buildObject(Signature.class, DEFAULT_ELEMENT_NAME);\n+            signature.setSigningCredential(signingCredential);\n+            signature.setSignatureAlgorithm(ALGO_ID_SIGNATURE_RSA_SHA256);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e536026f3ba1b9388f245ab9776248b3f642d4a9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5ODA2NA==", "bodyText": "Not now. We're already implementing more than the absolute minimum we need. We really need to focus on MVP here.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385098064", "createdAt": "2020-02-27T12:34:08Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.elasticsearch.xpack.idp.saml.support.SamlInit;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.Signer;\n+import org.w3c.dom.Element;\n+\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML2_POST_BINDING_URI;\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML2_REDIRECT_BINDING_URI;\n+import static org.opensaml.saml.saml2.core.NameIDType.PERSISTENT;\n+import static org.opensaml.saml.saml2.core.NameIDType.TRANSIENT;\n+import static org.opensaml.xmlsec.signature.Signature.DEFAULT_ELEMENT_NAME;\n+import static org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS;\n+import static org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256;\n+\n+public class SamlMetadataGenerator {\n+\n+    private final SamlFactory samlFactory;\n+    private final SamlIdentityProvider idp;\n+    private final Logger logger = LogManager.getLogger(SamlMetadataGenerator.class);\n+\n+    public SamlMetadataGenerator(SamlFactory samlFactory, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.idp = idp;\n+        SamlInit.initialize();\n+    }\n+\n+    public void generateMetadata(String spEntityId, ActionListener<SamlGenerateMetadataResponse> listener) {\n+        try {\n+            // this will be async\n+            SamlServiceProvider sp = idp.getRegisteredServiceProvider(spEntityId);\n+            if (null == sp) {\n+                listener.onFailure(new IllegalArgumentException(\"Service provider with Entity ID [\" + spEntityId\n+                    + \"] is not registered with this Identity Provider\"));\n+                return;\n+            }\n+            EntityDescriptor metadata = buildEntityDescriptor(sp);\n+            final X509Credential signingCredential = idp.getMetadataSigningCredential();\n+            Element metadataElement = possiblySignDescriptor(metadata, signingCredential);\n+            listener.onResponse(new SamlGenerateMetadataResponse(samlFactory.toString(metadataElement, false)));\n+        } catch (Exception e) {\n+            logger.debug(\"Error generating IDP metadata to share with [\" + spEntityId + \"]\", e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    EntityDescriptor buildEntityDescriptor(SamlServiceProvider sp) throws Exception {\n+        final SamlIdPMetadataBuilder builder = new SamlIdPMetadataBuilder(idp.getEntityId())\n+            .wantAuthnRequestsSigned(sp.shouldSignAuthnRequests())\n+            .withSingleSignOnServiceUrl(SAML2_REDIRECT_BINDING_URI,\n+                idp.getSingleSignOnEndpoint(SAML2_REDIRECT_BINDING_URI))\n+            .withSingleSignOnServiceUrl(SAML2_POST_BINDING_URI,\n+                idp.getSingleSignOnEndpoint(SAML2_POST_BINDING_URI))\n+            .withSingleLogoutServiceUrl(SAML2_REDIRECT_BINDING_URI,\n+                idp.getSingleLogoutEndpoint(SAML2_REDIRECT_BINDING_URI))\n+            .withSingleLogoutServiceUrl(SAML2_POST_BINDING_URI,\n+                idp.getSingleLogoutEndpoint(SAML2_POST_BINDING_URI))\n+            .withSigningCertificate(idp.getSigningCredential().getEntityCertificate())\n+            .withNameIdFormat(PERSISTENT)\n+            .withNameIdFormat(TRANSIENT)\n+            .organization(idp.getOrganization())\n+            .withContact(idp.getTechnicalContact());\n+        return builder.build();\n+    }\n+\n+    Element possiblySignDescriptor(EntityDescriptor descriptor, X509Credential signingCredential) throws MarshallingException,\n+        SignatureException {\n+        EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+        if (null == signingCredential) {\n+            return marshaller.marshall(descriptor);\n+        } else {\n+            Signature signature = samlFactory.buildObject(Signature.class, DEFAULT_ELEMENT_NAME);\n+            signature.setSigningCredential(signingCredential);\n+            signature.setSignatureAlgorithm(ALGO_ID_SIGNATURE_RSA_SHA256);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNjc1Mw=="}, "originalCommit": {"oid": "e536026f3ba1b9388f245ab9776248b3f642d4a9"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTQzMDQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/test/IdpSamlTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTowMjoyOVrOFuvBRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0MDo1NlrOFvQtfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0OTE4OQ==", "bodyText": "@tvernum your upstream issue seems to be resolved in opensaml 3.4 but we use 3.4.5 here and it still actually has the same problematic behavior, reproducible (without this fix) with\n./gradlew ':x-pack:plugin:identity-provider:test' --tests \"org.elasticsearch.xpack.idp.saml.idp.SamlIdpMetadataBuilderTests.testMetadataGenerationWithAllParameters\" -Dtests.seed=15A837259F3EDCCF -Dtests.security.manager=true -Dtests.locale=tr -Dtests.timezone=America/Glace_Bay -Dcompiler.java=13\n\nwhich creates metadata with key usage : <md:KeyDescriptor use=\"s\u0131gn\u0131ng\"> , note \u0131 vs i", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r384549189", "createdAt": "2020-02-26T15:02:29Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/test/IdpSamlTestCase.java", "diffHunk": "@@ -22,30 +28,59 @@\n import org.opensaml.security.x509.X509Credential;\n import org.w3c.dom.Element;\n \n-import javax.xml.XMLConstants;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.StringWriter;\n import java.io.UncheckedIOException;\n import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n import java.security.PrivateKey;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n \n import static org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport.getUnmarshallerFactory;\n \n public abstract class IdpSamlTestCase extends ESTestCase {\n \n+    private static Locale restoreLocale;\n+\n+    @BeforeClass\n+    public static void localeChecks() throws Exception {\n+        Logger logger = LogManager.getLogger(IdpSamlTestCase.class);\n+        SamlInit.initialize();\n+        if (isTurkishLocale()) {\n+            // See: https://github.com/elastic/elasticsearch/issues/29824", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMTE4Mg==", "bodyText": "They fixed the KeyDescriptorUnmarshaller but not the KeyDescriptorMarshaller \ud83e\udd26\u200d\u2642", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385101182", "createdAt": "2020-02-27T12:40:56Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/test/IdpSamlTestCase.java", "diffHunk": "@@ -22,30 +28,59 @@\n import org.opensaml.security.x509.X509Credential;\n import org.w3c.dom.Element;\n \n-import javax.xml.XMLConstants;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.StringWriter;\n import java.io.UncheckedIOException;\n import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n import java.security.PrivateKey;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n \n import static org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport.getUnmarshallerFactory;\n \n public abstract class IdpSamlTestCase extends ESTestCase {\n \n+    private static Locale restoreLocale;\n+\n+    @BeforeClass\n+    public static void localeChecks() throws Exception {\n+        Logger logger = LogManager.getLogger(IdpSamlTestCase.class);\n+        SamlInit.initialize();\n+        if (isTurkishLocale()) {\n+            // See: https://github.com/elastic/elasticsearch/issues/29824", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0OTE4OQ=="}, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg5NTg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNjoyNlrOFvQCig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNjoyNlrOFvQCig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDE4Ng==", "bodyText": "I don't think Generate is needed in these names. SamlMetadataAction would be sufficient.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385090186", "createdAt": "2020-02-27T12:16:26Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataAction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+public class SamlGenerateMetadataAction extends ActionType<SamlGenerateMetadataResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg5OTI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNzozM1rOFvQEhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNDo1OTo0OVrOFvpi-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDY5NQ==", "bodyText": "There's no need to override this if it doesn't have a body.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385090695", "createdAt": "2020-02-27T12:17:33Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SamlGenerateMetadataRequest extends ActionRequest {\n+\n+    private String spEntityId;\n+\n+    public SamlGenerateMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        spEntityId = in.readString();\n+    }\n+\n+    public SamlGenerateMetadataRequest(String spEntityId) {\n+        this.spEntityId = Objects.requireNonNull(spEntityId, \"Service Provider entity id must be provided\");\n+    }\n+\n+    public SamlGenerateMetadataRequest() {\n+        this.spEntityId = null;\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMjI5NQ==", "bodyText": "But ActionRequest#validate is abstract so I don't really have a choice :/", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385122295", "createdAt": "2020-02-27T13:23:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SamlGenerateMetadataRequest extends ActionRequest {\n+\n+    private String spEntityId;\n+\n+    public SamlGenerateMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        spEntityId = in.readString();\n+    }\n+\n+    public SamlGenerateMetadataRequest(String spEntityId) {\n+        this.spEntityId = Objects.requireNonNull(spEntityId, \"Service Provider entity id must be provided\");\n+    }\n+\n+    public SamlGenerateMetadataRequest() {\n+        this.spEntityId = null;\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDY5NQ=="}, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODA5MQ==", "bodyText": "Ah, so it is. Sorry, I forgot that was the case.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508091", "createdAt": "2020-02-28T04:59:49Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SamlGenerateMetadataRequest extends ActionRequest {\n+\n+    private String spEntityId;\n+\n+    public SamlGenerateMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        spEntityId = in.readString();\n+    }\n+\n+    public SamlGenerateMetadataRequest(String spEntityId) {\n+        this.spEntityId = Objects.requireNonNull(spEntityId, \"Service Provider entity id must be provided\");\n+    }\n+\n+    public SamlGenerateMetadataRequest() {\n+        this.spEntityId = null;\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDY5NQ=="}, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkwMDc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxODowMlrOFvQFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxODowMlrOFvQFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SamlGenerateMetadataResponse( String xmlString) {\n          \n          \n            \n                public SamlGenerateMetadataResponse(String xmlString) {", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385090925", "createdAt": "2020-02-27T12:18:02Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataResponse.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SamlGenerateMetadataResponse extends ActionResponse {\n+\n+    private final String xmlString;\n+\n+    public SamlGenerateMetadataResponse(StreamInput in) throws IOException {\n+        super(in);\n+        this.xmlString = in.readString();\n+    }\n+\n+    public SamlGenerateMetadataResponse( String xmlString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkxMDIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyMToxNlrOFvQLAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTowMTozMVrOFvpkFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ==", "bodyText": "Did you have a reason for putting this in the body rather than as a URL/query parameter?", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385092355", "createdAt": "2020-02-27T12:21:16Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlGenerateMetadataRequest extends BaseRestHandler {\n+\n+    static final ObjectParser<SamlGenerateMetadataRequest, Void> PARSER =\n+        new ObjectParser<>(\"idp_generate_metadata\", SamlGenerateMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareString(SamlGenerateMetadataRequest::setSpEntityId, new ParseField(\"sp_entity_id\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyODExMA==", "bodyText": "No, I think I had this as a POST originally so that I wouldn't have to worry about the ugliness of\nGET https://node1.example.com/_idp/saml/sp/https%3A%2F%2Fsp.entityid.org\n\nOn the other hand, GET makes sense and I thought I'd change it but the change was nto completed.\nI assume we will be doing the same in the registration API ( with PUT in that case ). Thoughts?", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385128110", "createdAt": "2020-02-27T13:34:41Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlGenerateMetadataRequest extends BaseRestHandler {\n+\n+    static final ObjectParser<SamlGenerateMetadataRequest, Void> PARSER =\n+        new ObjectParser<>(\"idp_generate_metadata\", SamlGenerateMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareString(SamlGenerateMetadataRequest::setSpEntityId, new ParseField(\"sp_entity_id\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ=="}, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1ODgzNA==", "bodyText": "GET it is.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385158834", "createdAt": "2020-02-27T14:25:37Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlGenerateMetadataRequest extends BaseRestHandler {\n+\n+    static final ObjectParser<SamlGenerateMetadataRequest, Void> PARSER =\n+        new ObjectParser<>(\"idp_generate_metadata\", SamlGenerateMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareString(SamlGenerateMetadataRequest::setSpEntityId, new ParseField(\"sp_entity_id\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ=="}, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODM3Mw==", "bodyText": "What you've got in the most recent commit is what I expected.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508373", "createdAt": "2020-02-28T05:01:31Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlGenerateMetadataRequest extends BaseRestHandler {\n+\n+    static final ObjectParser<SamlGenerateMetadataRequest, Void> PARSER =\n+        new ObjectParser<>(\"idp_generate_metadata\", SamlGenerateMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareString(SamlGenerateMetadataRequest::setSpEntityId, new ParseField(\"sp_entity_id\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ=="}, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkzMDc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyODoxOFrOFvQXLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyODoxOFrOFvQXLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NTQ2OQ==", "bodyText": "Nit, extra line", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385095469", "createdAt": "2020-02-27T12:28:18Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.MapBuilder;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.metadata.ContactPerson;\n+import org.opensaml.saml.saml2.metadata.ContactPersonTypeEnumeration;\n+import org.opensaml.saml.saml2.metadata.EmailAddress;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.GivenName;\n+import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n+import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n+import org.opensaml.saml.saml2.metadata.NameIDFormat;\n+import org.opensaml.saml.saml2.metadata.Organization;\n+import org.opensaml.saml.saml2.metadata.OrganizationDisplayName;\n+import org.opensaml.saml.saml2.metadata.OrganizationName;\n+import org.opensaml.saml.saml2.metadata.OrganizationURL;\n+import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n+import org.opensaml.saml.saml2.metadata.SingleSignOnService;\n+import org.opensaml.saml.saml2.metadata.SurName;\n+import org.opensaml.saml.saml2.metadata.impl.ContactPersonBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EmailAddressBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.GivenNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.IDPSSODescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.KeyDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.NameIDFormatBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationDisplayNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationURLBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleLogoutServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleSignOnServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SurNameBuilder;\n+import org.opensaml.security.credential.UsageType;\n+import org.opensaml.xmlsec.keyinfo.KeyInfoSupport;\n+import org.opensaml.xmlsec.signature.KeyInfo;\n+import org.opensaml.xmlsec.signature.impl.KeyInfoBuilder;\n+\n+import java.net.URL;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SamlIdPMetadataBuilder {\n+\n+    private Locale locale;\n+    private final String entityId;\n+    private Set<String> nameIdFormats;\n+    private boolean wantAuthnRequestsSigned;\n+    private Map<String, URL> singleSignOnServiceUrls = new HashMap<>();\n+    private Map<String, URL> singleLogoutServiceUrls = new HashMap<>();\n+    private List<X509Certificate> signingCertificates;\n+    private OrganizationInfo organization;\n+    private final List<ContactInfo> contacts;\n+\n+\n+    public SamlIdPMetadataBuilder(String entityId) {\n+        this.entityId = entityId;\n+        this.locale = Locale.getDefault();\n+        this.contacts = new ArrayList<>();\n+        this.nameIdFormats = new HashSet<>();\n+        this.signingCertificates = new ArrayList<>();\n+        this.wantAuthnRequestsSigned = false;\n+    }\n+\n+    public SamlIdPMetadataBuilder withLocale(Locale locale) {\n+        this.locale = locale;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withNameIdFormat(String nameIdFormat) {\n+        if (Strings.isNullOrEmpty(nameIdFormat) == false) {\n+            this.nameIdFormats.add(nameIdFormat);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder wantAuthnRequestsSigned(boolean wants) {\n+        this.wantAuthnRequestsSigned = wants;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleSignOnServiceUrl(String binding, URL url) {\n+        if ( null != url) {\n+            this.singleSignOnServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleLogoutServiceUrl(String binding, URL url) {\n+        if (null != url) {\n+            this.singleLogoutServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificates(List<X509Certificate> signingCertificates) {\n+        if (null != signingCertificates) {\n+            this.signingCertificates.addAll(signingCertificates);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificate(X509Certificate signingCertificate) {\n+        return withSigningCertificates(Collections.singletonList(signingCertificate));\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(OrganizationInfo organization) {\n+        if (null != organization) {\n+            this.organization = organization;\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(String orgName, String displayName, String url) {\n+        return organization(new OrganizationInfo(orgName, displayName, url));\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(ContactInfo contact) {\n+        if (null != contact) {\n+            this.contacts.add(contact);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(String type, String givenName, String surName, String email) {\n+        return withContact(new ContactInfo(ContactInfo.getType(type), givenName, surName, email));\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkzMTg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyODozOFrOFvQXzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyODozOFrOFvQXzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NTYyOQ==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final IDPSSODescriptor idpssoDescriptor = new IDPSSODescriptorBuilder().buildObject();\n          \n          \n            \n                    final IDPSSODescriptor idpSsoDescriptor = new IDPSSODescriptorBuilder().buildObject();", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385095629", "createdAt": "2020-02-27T12:28:38Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.MapBuilder;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.metadata.ContactPerson;\n+import org.opensaml.saml.saml2.metadata.ContactPersonTypeEnumeration;\n+import org.opensaml.saml.saml2.metadata.EmailAddress;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.GivenName;\n+import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n+import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n+import org.opensaml.saml.saml2.metadata.NameIDFormat;\n+import org.opensaml.saml.saml2.metadata.Organization;\n+import org.opensaml.saml.saml2.metadata.OrganizationDisplayName;\n+import org.opensaml.saml.saml2.metadata.OrganizationName;\n+import org.opensaml.saml.saml2.metadata.OrganizationURL;\n+import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n+import org.opensaml.saml.saml2.metadata.SingleSignOnService;\n+import org.opensaml.saml.saml2.metadata.SurName;\n+import org.opensaml.saml.saml2.metadata.impl.ContactPersonBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EmailAddressBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.GivenNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.IDPSSODescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.KeyDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.NameIDFormatBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationDisplayNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationURLBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleLogoutServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleSignOnServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SurNameBuilder;\n+import org.opensaml.security.credential.UsageType;\n+import org.opensaml.xmlsec.keyinfo.KeyInfoSupport;\n+import org.opensaml.xmlsec.signature.KeyInfo;\n+import org.opensaml.xmlsec.signature.impl.KeyInfoBuilder;\n+\n+import java.net.URL;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SamlIdPMetadataBuilder {\n+\n+    private Locale locale;\n+    private final String entityId;\n+    private Set<String> nameIdFormats;\n+    private boolean wantAuthnRequestsSigned;\n+    private Map<String, URL> singleSignOnServiceUrls = new HashMap<>();\n+    private Map<String, URL> singleLogoutServiceUrls = new HashMap<>();\n+    private List<X509Certificate> signingCertificates;\n+    private OrganizationInfo organization;\n+    private final List<ContactInfo> contacts;\n+\n+\n+    public SamlIdPMetadataBuilder(String entityId) {\n+        this.entityId = entityId;\n+        this.locale = Locale.getDefault();\n+        this.contacts = new ArrayList<>();\n+        this.nameIdFormats = new HashSet<>();\n+        this.signingCertificates = new ArrayList<>();\n+        this.wantAuthnRequestsSigned = false;\n+    }\n+\n+    public SamlIdPMetadataBuilder withLocale(Locale locale) {\n+        this.locale = locale;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withNameIdFormat(String nameIdFormat) {\n+        if (Strings.isNullOrEmpty(nameIdFormat) == false) {\n+            this.nameIdFormats.add(nameIdFormat);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder wantAuthnRequestsSigned(boolean wants) {\n+        this.wantAuthnRequestsSigned = wants;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleSignOnServiceUrl(String binding, URL url) {\n+        if ( null != url) {\n+            this.singleSignOnServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleLogoutServiceUrl(String binding, URL url) {\n+        if (null != url) {\n+            this.singleLogoutServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificates(List<X509Certificate> signingCertificates) {\n+        if (null != signingCertificates) {\n+            this.signingCertificates.addAll(signingCertificates);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificate(X509Certificate signingCertificate) {\n+        return withSigningCertificates(Collections.singletonList(signingCertificate));\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(OrganizationInfo organization) {\n+        if (null != organization) {\n+            this.organization = organization;\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(String orgName, String displayName, String url) {\n+        return organization(new OrganizationInfo(orgName, displayName, url));\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(ContactInfo contact) {\n+        if (null != contact) {\n+            this.contacts.add(contact);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(String type, String givenName, String surName, String email) {\n+        return withContact(new ContactInfo(ContactInfo.getType(type), givenName, surName, email));\n+    }\n+\n+\n+    public EntityDescriptor build() throws CertificateEncodingException {\n+        final IDPSSODescriptor idpssoDescriptor = new IDPSSODescriptorBuilder().buildObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzU2ODYxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTowMzoyNFrOFvplhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTowMzoyNFrOFvplhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODc0MA==", "bodyText": "I would call this either\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RestSamlMetadataRequestAction extends BaseRestHandler {\n          \n          \n            \n            public class RestGetSamlMetadataAction extends BaseRestHandler {\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RestSamlMetadataRequestAction extends BaseRestHandler {\n          \n          \n            \n            public class RestSamlMetadataAction extends BaseRestHandler {", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508740", "createdAt": "2020-02-28T05:03:24Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlMetadataRequestAction extends BaseRestHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c4b174149581dd795101a66ce5121c1f30c7bf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzU2OTY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTowNDowMVrOFvpmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTowNDowMVrOFvpmGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODg4OQ==", "bodyText": "I'd probably change this name, based on what you decide to call the class.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508889", "createdAt": "2020-02-28T05:04:01Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlMetadataRequestAction extends BaseRestHandler {\n+\n+    @Override\n+    public String getName() {\n+        return \"saml_idp_generate_metadata\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c4b174149581dd795101a66ce5121c1f30c7bf"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzY0NDAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTo1ODozMFrOFvqRVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNTo1ODozMFrOFvqRVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUxOTk1Nw==", "bodyText": "Tiny nit, our names typically end in _action.\nTBH I don't know why - it's already obvious it's an action.", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385519957", "createdAt": "2020-02-28T05:58:30Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java", "diffHunk": "@@ -23,11 +23,11 @@\n \n import static org.elasticsearch.rest.RestRequest.Method.GET;\n \n-public class RestSamlMetadataRequestAction extends BaseRestHandler {\n+public class RestSamlMetadataAction extends BaseRestHandler {\n \n     @Override\n     public String getName() {\n-        return \"saml_idp_generate_metadata\";\n+        return \"saml_metadata\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2929f1cfd0ac4330d1308a2a63596ab42421f7a1"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3929, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}