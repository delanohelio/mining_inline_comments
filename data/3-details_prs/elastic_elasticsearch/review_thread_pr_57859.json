{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTE2MzA5", "number": 57859, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDowMjo0MlrOEDs_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDowMjo0MlrOEDs_Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzE4MjI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDowMjo0MlrOGg3_yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDowMjo0MlrOGg3_yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNTA2NA==", "bodyText": "Can we remove this method and acquire recoveryRef inside  onNewClusterState instead?", "url": "https://github.com/elastic/elasticsearch/pull/57859#discussion_r437125064", "createdAt": "2020-06-09T04:02:42Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java", "diffHunk": "@@ -348,59 +348,72 @@ public void messageReceived(final RecoveryTranslogOperationsRequest request, fin\n                     return;\n                 }\n \n-                final ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger, threadPool.getThreadContext());\n-                final Consumer<Exception> retryOnMappingException = exception -> {\n-                    // in very rare cases a translog replay from primary is processed before a mapping update on this node\n-                    // which causes local mapping changes since the mapping (clusterstate) might not have arrived on this node.\n-                    logger.debug(\"delaying recovery due to missing mapping changes\", exception);\n-                    // we do not need to use a timeout here since the entire recovery mechanism has an inactivity protection (it will be\n-                    // canceled)\n-                    observer.waitForNextChange(new ClusterStateObserver.Listener() {\n-                        @Override\n-                        public void onNewClusterState(ClusterState state) {\n-                            try {\n-                                messageReceived(request, channel, task);\n-                            } catch (Exception e) {\n-                                listener.onFailure(e);\n-                            }\n-                        }\n+                performTranslogOps(request, listener);\n+            }\n+        }\n+\n+        private void performTranslogOps(final RecoveryTranslogOperationsRequest request, final ActionListener<Void> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5717051689b73ecc984a071da768186573715251"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1718, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}