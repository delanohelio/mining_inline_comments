{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczOTY4NzUx", "number": 61589, "title": "[ML] Check and install the latest template in the DFA executor", "bodyText": "After an upgrade new templates are installed by the master node. During a rolling upgrade it is possible that a worker node will be upgraded before the master in which case the required templates will not have been installed. If the worker creates the new index it will be created without any mappings as the matching template has not bee installed yet.\nBefore a DFA task starts check that the latest template is installed and install it if necessary.\nNon issue as this addresses a problem in unreleased code", "createdAt": "2020-08-26T15:01:44Z", "url": "https://github.com/elastic/elasticsearch/pull/61589", "merged": true, "mergeCommit": {"oid": "5b051ba9a1fd62bacff194eabfcbb65d67c93562"}, "closed": true, "closedAt": "2020-09-02T10:25:54Z", "author": {"login": "davidkyle"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCt2atgFqTQ3NTYyNjI1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEj4FSABqjM3MTM3OTAxMzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjI2MjU2", "url": "https://github.com/elastic/elasticsearch/pull/61589#pullrequestreview-475626256", "createdAt": "2020-08-26T15:50:15Z", "commit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1MDoxNVrOHHSj_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1MDoxNVrOHHSj_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNjIwNA==", "bodyText": "Is this sufficient to mark the task as failed? Is there any other clean up to do?", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r477406204", "createdAt": "2020-08-26T15:50:15Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -698,6 +703,20 @@ protected void nodeOperation(AllocatedPersistentTask task, StartDataFrameAnalyti\n                 return;\n             }\n \n+            ActionListener<Boolean> templateCheckListener = ActionListener.wrap(\n+                ok -> executeTask(analyticsTaskState, task),\n+                error -> {\n+                    Throwable cause = ExceptionsHelper.unwrapCause(error);\n+                    String msg = \"Failed to create internal index template [\" + inferenceIndexTemplate.getTemplateName() + \"]\";\n+                    logger.error(msg, cause);\n+                    task.markAsFailed(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjM1Njc3", "url": "https://github.com/elastic/elasticsearch/pull/61589#pullrequestreview-475635677", "createdAt": "2020-08-26T16:00:47Z", "commit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjowMDo0N1rOHHTAbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjowMDo0N1rOHHTAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzQ4NQ==", "bodyText": "I am not sold on this. Since INFERENCE_TEMPLATE is public and static, I am wondering if TransportStartDataFrameAnalyticsAction.TaskExecutor.java has a static array that it creates of all the templates it cares about.", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r477413485", "createdAt": "2020-08-26T16:00:47Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -599,21 +601,24 @@ public void onFailure(Exception e) {\n         private final DataFrameAnalyticsAuditor auditor;\n         private final MlMemoryTracker memoryTracker;\n         private final IndexNameExpressionResolver resolver;\n+        private final IndexTemplateConfig inferenceIndexTemplate;\n \n         private volatile int maxMachineMemoryPercent;\n         private volatile int maxLazyMLNodes;\n         private volatile int maxOpenJobs;\n         private volatile ClusterState clusterState;\n \n         public TaskExecutor(Settings settings, Client client, ClusterService clusterService, DataFrameAnalyticsManager manager,\n-                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver) {\n+                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver,\n+                            IndexTemplateConfig inferenceIndexTemplate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTAyNjEw", "url": "https://github.com/elastic/elasticsearch/pull/61589#pullrequestreview-476502610", "createdAt": "2020-08-27T08:34:52Z", "commit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNDo1MlrOHIGGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNDo1MlrOHIGGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MDUyNA==", "bodyText": "nit: should this be hasIndexTemplate?", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478250524", "createdAt": "2020-08-27T08:34:52Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "diffHunk": "@@ -215,4 +219,52 @@ private static void updateWriteAlias(Client client,\n                 listener::onFailure),\n             client.admin().indices()::aliases);\n     }\n+\n+    /**\n+     * Installs the index template specified by {@code templateConfig} if it is not in already\n+     * installed in {@code clusterState}.\n+     *\n+     * The check for presence is simple and will return the listener on\n+     * the calling thread if successful. If the template has to be installed\n+     * an async call will be made.\n+     *\n+     * @param clusterState The cluster state\n+     * @param client For putting the template\n+     * @param templateConfig The config\n+     * @param listener Async listener\n+     */\n+    public static void installIndexTemplateIfRequired(\n+        ClusterState clusterState,\n+        Client client,\n+        IndexTemplateConfig templateConfig,\n+        ActionListener<Boolean> listener\n+    ) {\n+        String templateName = templateConfig.getTemplateName();\n+\n+        // The check for existence of the template is against the cluster state, so very cheap\n+        if (haveIndexTemplate(clusterState, templateName)) {\n+            listener.onResponse(true);\n+            return;\n+        }\n+\n+        PutIndexTemplateRequest request = new PutIndexTemplateRequest(templateName)\n+            .source(templateConfig.loadBytes(), XContentType.JSON);\n+        request.masterNodeTimeout(TimeValue.timeValueMinutes(1));\n+\n+        ActionListener<AcknowledgedResponse> innerListener = ActionListener.wrap(\n+            response ->  {\n+                if (response.isAcknowledged() == false) {\n+                    logger.error(\"error adding legacy template [{}], request was not acknowledged\", templateName);\n+                }\n+                listener.onResponse(response.isAcknowledged());\n+            },\n+            listener::onFailure);\n+\n+        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, request, innerListener,\n+            client.admin().indices()::putTemplate);\n+    }\n+\n+    static boolean haveIndexTemplate(ClusterState state, String templateName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTA0MzQ5", "url": "https://github.com/elastic/elasticsearch/pull/61589#pullrequestreview-476504349", "createdAt": "2020-08-27T08:37:03Z", "commit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNzowM1rOHIGLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNzowM1rOHIGLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MTgzNQ==", "bodyText": "Should we make this a warn? If it's an error I would expect it causes listener.onFailure to fire.", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478251835", "createdAt": "2020-08-27T08:37:03Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "diffHunk": "@@ -215,4 +219,52 @@ private static void updateWriteAlias(Client client,\n                 listener::onFailure),\n             client.admin().indices()::aliases);\n     }\n+\n+    /**\n+     * Installs the index template specified by {@code templateConfig} if it is not in already\n+     * installed in {@code clusterState}.\n+     *\n+     * The check for presence is simple and will return the listener on\n+     * the calling thread if successful. If the template has to be installed\n+     * an async call will be made.\n+     *\n+     * @param clusterState The cluster state\n+     * @param client For putting the template\n+     * @param templateConfig The config\n+     * @param listener Async listener\n+     */\n+    public static void installIndexTemplateIfRequired(\n+        ClusterState clusterState,\n+        Client client,\n+        IndexTemplateConfig templateConfig,\n+        ActionListener<Boolean> listener\n+    ) {\n+        String templateName = templateConfig.getTemplateName();\n+\n+        // The check for existence of the template is against the cluster state, so very cheap\n+        if (haveIndexTemplate(clusterState, templateName)) {\n+            listener.onResponse(true);\n+            return;\n+        }\n+\n+        PutIndexTemplateRequest request = new PutIndexTemplateRequest(templateName)\n+            .source(templateConfig.loadBytes(), XContentType.JSON);\n+        request.masterNodeTimeout(TimeValue.timeValueMinutes(1));\n+\n+        ActionListener<AcknowledgedResponse> innerListener = ActionListener.wrap(\n+            response ->  {\n+                if (response.isAcknowledged() == false) {\n+                    logger.error(\"error adding legacy template [{}], request was not acknowledged\", templateName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NTk2MDkx", "url": "https://github.com/elastic/elasticsearch/pull/61589#pullrequestreview-476596091", "createdAt": "2020-08-27T10:42:03Z", "commit": {"oid": "c1cbc38ee04108dc90ca74ef55975b449f351998"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MjowM1rOHIKlEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MzoxMVrOHIKnCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMzk4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testInstallIndexTemplateIfRequired_TemplateExist() {\n          \n          \n            \n                public void testInstallIndexTemplateIfRequired_TemplateExists() {", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478323985", "createdAt": "2020-08-27T10:42:03Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "diffHunk": "@@ -116,6 +120,34 @@ public void verifyNoMoreInteractionsWithMocks() {\n         verifyNoMoreInteractions(indicesAdminClient, listener);\n     }\n \n+    public void testInstallIndexTemplateIfRequired_TemplateExist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cbc38ee04108dc90ca74ef55975b449f351998"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyNDQ4OA==", "bodyText": "Could add the following line here?\ninOrder.verifyNoMoreInteractions();", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478324488", "createdAt": "2020-08-27T10:43:11Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "diffHunk": "@@ -116,6 +120,34 @@ public void verifyNoMoreInteractionsWithMocks() {\n         verifyNoMoreInteractions(indicesAdminClient, listener);\n     }\n \n+    public void testInstallIndexTemplateIfRequired_TemplateExist() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap(),\n+            Collections.singletonMap(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                createIndexTemplateMetaData(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                    Collections.singletonList(InferenceIndexConstants.LATEST_INDEX_NAME))));\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"not_a_real_file.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        verify(listener).onResponse(true);\n+        verifyNoMoreInteractions(client);\n+    }\n+\n+    public void testInstallIndexTemplateIfRequired() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap());\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"/org/elasticsearch/xpack/core/ml/inference_index_template.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        InOrder inOrder = inOrder(indicesAdminClient, listener);\n+        inOrder.verify(indicesAdminClient).putTemplate(any(), any());\n+        inOrder.verify(listener).onResponse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cbc38ee04108dc90ca74ef55975b449f351998"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NjM3NzI4", "url": "https://github.com/elastic/elasticsearch/pull/61589#pullrequestreview-476637728", "createdAt": "2020-08-27T11:46:08Z", "commit": {"oid": "cbe2ceffcaed50172de7ff9ff60e480773a7f14a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "730e10c9869383bf66dd15bb72f98be7905b3ecd", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/730e10c9869383bf66dd15bb72f98be7905b3ecd", "committedDate": "2020-09-01T09:20:36Z", "message": "Check and install the latest template in the DFA executor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baa361291eb5ab6df976467255ebd32341ca0296", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/baa361291eb5ab6df976467255ebd32341ca0296", "committedDate": "2020-09-01T09:20:36Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d34786f87c5541bb997387e8bbeaa6cc4b9f4fa", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/3d34786f87c5541bb997387e8bbeaa6cc4b9f4fa", "committedDate": "2020-09-01T09:20:36Z", "message": "Mark as failed if put template fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6642f6b5852989bcca07f0ee04cfb20dfdaf10", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/fa6642f6b5852989bcca07f0ee04cfb20dfdaf10", "committedDate": "2020-09-01T09:20:36Z", "message": "Address review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d892f6ac55f15820b441a54ad4237d1c55f6f23", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/3d892f6ac55f15820b441a54ad4237d1c55f6f23", "committedDate": "2020-09-01T09:20:36Z", "message": "typo in test name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbe2ceffcaed50172de7ff9ff60e480773a7f14a", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/cbe2ceffcaed50172de7ff9ff60e480773a7f14a", "committedDate": "2020-08-27T11:31:04Z", "message": "typo in test name"}, "afterCommit": {"oid": "3d892f6ac55f15820b441a54ad4237d1c55f6f23", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/3d892f6ac55f15820b441a54ad4237d1c55f6f23", "committedDate": "2020-09-01T09:20:36Z", "message": "typo in test name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4573, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}