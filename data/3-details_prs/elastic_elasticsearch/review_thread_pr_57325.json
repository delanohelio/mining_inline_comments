{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODExMjU4", "number": 57325, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowMzoxOFrOEAtvJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowODo0MlrOEB_k9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTg0ODA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowMzoxOFrOGcKquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowMzoxOFrOGcKquw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODA5MQ==", "bodyText": "This line is the only functionality change, the rest of this PR is tests.", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r432188091", "createdAt": "2020-05-29T00:03:18Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java", "diffHunk": "@@ -72,7 +72,7 @@\n \n     private String[] indices = EMPTY_ARRAY;\n \n-    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandHidden();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjU5MjkzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SnapshotIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOToxMTo0MlrOGc3uxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjozMzoxMVrOGdgIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjQwNg==", "bodyText": "This test failed because the .security index could not be restored (either because it was never deleted as part of the test or auto re-created).", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r432926406", "createdAt": "2020-05-31T09:11:42Z", "author": {"login": "original-brownbear"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SnapshotIT.java", "diffHunk": "@@ -285,6 +286,49 @@ public void testRestoreSnapshot() throws IOException {\n         assertThat(restoreInfo.failedShards(), equalTo(0));\n     }\n \n+    public void testSnapshotHidden() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4ODIzMA==", "bodyText": "Thanks, I believe I've fixed this test - there were a few issues with it.", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r433588230", "createdAt": "2020-06-02T02:33:11Z", "author": {"login": "gwbrown"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/SnapshotIT.java", "diffHunk": "@@ -285,6 +286,49 @@ public void testRestoreSnapshot() throws IOException {\n         assertThat(restoreInfo.failedShards(), equalTo(0));\n     }\n \n+    public void testSnapshotHidden() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjQwNg=="}, "originalCommit": {"oid": "193e2518b1da319914dd274f27ccbdb974a6a748"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTU5NzYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODoyNDoxNVrOGdnPMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MjoyMFrOGeE-lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNDc1NA==", "bodyText": "This seems kind of wrong to me. We're adding something to the request here only so that we can log the deprecation warning accordingly?", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r433704754", "createdAt": "2020-06-02T08:24:15Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java", "diffHunk": "@@ -72,7 +73,9 @@\n \n     private String[] indices = EMPTY_ARRAY;\n \n-    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandHidden();\n+\n+    private boolean defaultExpandWildcards = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62eea3fdd3e7f3e28553346131da13a2977e260"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjAyMQ==", "bodyText": "Yeah, that felt wrong when I was writing it, and after sleeping on it I'm not sure what I was thinking. I've reverted the commit that adds the deprecation warning (and this field in service of it) and will do some more work on that part and break it out into another PR so we can get this into patch releases as appropriate quickly.", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r434192021", "createdAt": "2020-06-02T21:42:20Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java", "diffHunk": "@@ -72,7 +73,9 @@\n \n     private String[] indices = EMPTY_ARRAY;\n \n-    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandHidden();\n+\n+    private boolean defaultExpandWildcards = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNDc1NA=="}, "originalCommit": {"oid": "c62eea3fdd3e7f3e28553346131da13a2977e260"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTI1NDg0OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowNzoxMFrOGeLVcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowNzoxMFrOGeLVcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjE3OA==", "bodyText": "NIT: extra empty line", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r434296178", "createdAt": "2020-06-03T04:07:10Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -3826,6 +3827,136 @@ public void testBulkDeleteWithOverlappingPatterns() {\n         assertThat(getSnapshotsResponse.getSnapshots(\"test-repo\"), empty());\n     }\n \n+    public void testHiddenIndicesIncludedInSnapshot() {\n+        Client client = client();\n+        final String normalIndex = \"normal-index\";\n+        final String hiddenIndex = \"hidden-index\";\n+        final String dottedHiddenIndex = \".index-hidden\";\n+        final String repoName = \"test-repo\";\n+\n+        logger.info(\"-->  creating repository\");\n+        assertAcked(client.admin().cluster().preparePutRepository(repoName).setType(\"fs\").setSettings(randomRepoSettings()));\n+\n+        logger.info(\"--> creating indices\");\n+        createIndex(normalIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+        createIndex(hiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        createIndex(dottedHiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        ensureGreen();\n+\n+        logger.info(\"--> indexing some data\");\n+        for (int i = 0; i < 100; i++) {\n+            indexDoc(normalIndex, Integer.toString(i), \"foo\", \"bar\" + i);\n+            indexDoc(hiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+            indexDoc(dottedHiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+        }\n+        refresh();\n+        assertHitCount(client.prepareSearch(normalIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(hiddenIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(dottedHiddenIndex).setSize(0).get(), 100L);\n+\n+        logger.info(\"--> taking a snapshot\");\n+        final String snapName = \"test-snap\";\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(repoName, snapName)\n+            .setWaitForCompletion(true).setIndices(randomFrom(\"*\", \"_all\")).get();\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),\n+            equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n+\n+        List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots(repoName)\n+            .setSnapshots(randomFrom(snapName, \"_all\", \"*\", \"*-snap\", \"test*\")).get().getSnapshots(repoName);\n+        assertThat(snapshotInfos.size(), equalTo(1));\n+        SnapshotInfo snapshotInfo = snapshotInfos.get(0);\n+        assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS));\n+        assertThat(snapshotInfo.version(), equalTo(Version.CURRENT));\n+\n+        logger.info(\"--> deleting indices\");\n+        cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+\n+        // Verify that hidden indices get restored with a wildcard restore\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex, dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+        }\n+\n+        // Verify that exclusions work on hidden indices\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\", \"-.*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(normalIndex, hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored with a non-star pattern\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"hid*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored by fully specified name\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(dottedHiddenIndex)\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(dottedHiddenIndex);\n+        }\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTI1NTg4OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowNzo1OFrOGeLWFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowNzo1OFrOGeLWFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjM0Mw==", "bodyText": "No need  to manually wipe these in the last step of the test as the tear-down logic will take care of it?", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r434296343", "createdAt": "2020-06-03T04:07:58Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -3826,6 +3827,136 @@ public void testBulkDeleteWithOverlappingPatterns() {\n         assertThat(getSnapshotsResponse.getSnapshots(\"test-repo\"), empty());\n     }\n \n+    public void testHiddenIndicesIncludedInSnapshot() {\n+        Client client = client();\n+        final String normalIndex = \"normal-index\";\n+        final String hiddenIndex = \"hidden-index\";\n+        final String dottedHiddenIndex = \".index-hidden\";\n+        final String repoName = \"test-repo\";\n+\n+        logger.info(\"-->  creating repository\");\n+        assertAcked(client.admin().cluster().preparePutRepository(repoName).setType(\"fs\").setSettings(randomRepoSettings()));\n+\n+        logger.info(\"--> creating indices\");\n+        createIndex(normalIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+        createIndex(hiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        createIndex(dottedHiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        ensureGreen();\n+\n+        logger.info(\"--> indexing some data\");\n+        for (int i = 0; i < 100; i++) {\n+            indexDoc(normalIndex, Integer.toString(i), \"foo\", \"bar\" + i);\n+            indexDoc(hiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+            indexDoc(dottedHiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+        }\n+        refresh();\n+        assertHitCount(client.prepareSearch(normalIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(hiddenIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(dottedHiddenIndex).setSize(0).get(), 100L);\n+\n+        logger.info(\"--> taking a snapshot\");\n+        final String snapName = \"test-snap\";\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(repoName, snapName)\n+            .setWaitForCompletion(true).setIndices(randomFrom(\"*\", \"_all\")).get();\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),\n+            equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n+\n+        List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots(repoName)\n+            .setSnapshots(randomFrom(snapName, \"_all\", \"*\", \"*-snap\", \"test*\")).get().getSnapshots(repoName);\n+        assertThat(snapshotInfos.size(), equalTo(1));\n+        SnapshotInfo snapshotInfo = snapshotInfos.get(0);\n+        assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS));\n+        assertThat(snapshotInfo.version(), equalTo(Version.CURRENT));\n+\n+        logger.info(\"--> deleting indices\");\n+        cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+\n+        // Verify that hidden indices get restored with a wildcard restore\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex, dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+        }\n+\n+        // Verify that exclusions work on hidden indices\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\", \"-.*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(normalIndex, hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored with a non-star pattern\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"hid*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored by fully specified name\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(dottedHiddenIndex)\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(dottedHiddenIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTI1Njg2OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowODo0MlrOGeLWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDowODo0MlrOGeLWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjQ5MQ==", "bodyText": "Can we use get instead of actionGet here and in other places in the new test to get full stack traces on failures?", "url": "https://github.com/elastic/elasticsearch/pull/57325#discussion_r434296491", "createdAt": "2020-06-03T04:08:42Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -3826,6 +3827,136 @@ public void testBulkDeleteWithOverlappingPatterns() {\n         assertThat(getSnapshotsResponse.getSnapshots(\"test-repo\"), empty());\n     }\n \n+    public void testHiddenIndicesIncludedInSnapshot() {\n+        Client client = client();\n+        final String normalIndex = \"normal-index\";\n+        final String hiddenIndex = \"hidden-index\";\n+        final String dottedHiddenIndex = \".index-hidden\";\n+        final String repoName = \"test-repo\";\n+\n+        logger.info(\"-->  creating repository\");\n+        assertAcked(client.admin().cluster().preparePutRepository(repoName).setType(\"fs\").setSettings(randomRepoSettings()));\n+\n+        logger.info(\"--> creating indices\");\n+        createIndex(normalIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+        createIndex(hiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        createIndex(dottedHiddenIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,3))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(IndexMetadata.SETTING_INDEX_HIDDEN, true)\n+            .build());\n+        ensureGreen();\n+\n+        logger.info(\"--> indexing some data\");\n+        for (int i = 0; i < 100; i++) {\n+            indexDoc(normalIndex, Integer.toString(i), \"foo\", \"bar\" + i);\n+            indexDoc(hiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+            indexDoc(dottedHiddenIndex, Integer.toString(i), \"foo\", \"baz\" + i);\n+        }\n+        refresh();\n+        assertHitCount(client.prepareSearch(normalIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(hiddenIndex).setSize(0).get(), 100L);\n+        assertHitCount(client.prepareSearch(dottedHiddenIndex).setSize(0).get(), 100L);\n+\n+        logger.info(\"--> taking a snapshot\");\n+        final String snapName = \"test-snap\";\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(repoName, snapName)\n+            .setWaitForCompletion(true).setIndices(randomFrom(\"*\", \"_all\")).get();\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n+        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),\n+            equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n+\n+        List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots(repoName)\n+            .setSnapshots(randomFrom(snapName, \"_all\", \"*\", \"*-snap\", \"test*\")).get().getSnapshots(repoName);\n+        assertThat(snapshotInfos.size(), equalTo(1));\n+        SnapshotInfo snapshotInfo = snapshotInfos.get(0);\n+        assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS));\n+        assertThat(snapshotInfo.version(), equalTo(Version.CURRENT));\n+\n+        logger.info(\"--> deleting indices\");\n+        cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+\n+        // Verify that hidden indices get restored with a wildcard restore\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex, dottedHiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(true));\n+            cluster().wipeIndices(normalIndex, hiddenIndex, dottedHiddenIndex);\n+        }\n+\n+        // Verify that exclusions work on hidden indices\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"*\", \"-.*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(normalIndex, hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(normalIndex, hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored with a non-star pattern\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(\"hid*\")\n+                .execute().actionGet();\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),\n+                equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards()));\n+            assertThat(restoreSnapshotResponse.getRestoreInfo().indices(), containsInAnyOrder(hiddenIndex));\n+            ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n+            assertThat(clusterState.getMetadata().hasIndex(normalIndex), equalTo(false));\n+            assertThat(clusterState.getMetadata().hasIndex(hiddenIndex), equalTo(true));\n+            assertThat(clusterState.getMetadata().hasIndex(dottedHiddenIndex), equalTo(false));\n+            cluster().wipeIndices(hiddenIndex);\n+        }\n+\n+        // Verify that hidden indices can be restored by fully specified name\n+        {\n+            RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster()\n+                .prepareRestoreSnapshot(repoName, snapName)\n+                .setWaitForCompletion(true)\n+                .setIndices(dottedHiddenIndex)\n+                .execute().actionGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e7ad3b6753b5b8d5af8008e14ff8594b5cde88"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3866, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}