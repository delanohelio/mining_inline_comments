{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NDY1MTI0", "number": 51472, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1NjowN1rODa4nng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxODowOVrODbPGUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTE3MjE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/snapshots/SourceOnlySnapshotRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1NjowN1rOFiDbsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1NjowN1rOFiDbsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MjE0Nw==", "bodyText": "Let's mark this part as WIP, we can do a nicer thing so that in the e.g. cat repo list the type is correctly displayed for the source only repo (could just do this via an override to the getMetaData on the source only repo), I'd just like to get confirmation of the approach before doing that :)", "url": "https://github.com/elastic/elasticsearch/pull/51472#discussion_r371252147", "createdAt": "2020-01-27T13:56:07Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/snapshots/SourceOnlySnapshotRepository.java", "diffHunk": "@@ -202,8 +202,7 @@ public Repository create(RepositoryMetaData metaData, Function<String, Repositor\n                     throw new IllegalArgumentException(DELEGATE_TYPE.getKey() + \" must be set\");\n                 }\n                 Repository.Factory factory = typeLookup.apply(delegateType);\n-                return new SourceOnlySnapshotRepository(factory.create(new RepositoryMetaData(metaData.name(),\n-                    delegateType, metaData.settings()), typeLookup));\n+                return new SourceOnlySnapshotRepository(factory.create(metaData, typeLookup));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4942c52815af2e4322cda8d7462f1d61cdee25"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODIxMDk0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/snapshots/RepositoryFilterUserMetadataIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDo0NDoxMVrOFigfjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDo0NDoxMVrOFigfjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcyODI3MQ==", "bodyText": "Bit of a complicated test for a simple thing like this but I didn't want to add this on top of other already complicated snapshot tests.", "url": "https://github.com/elastic/elasticsearch/pull/51472#discussion_r371728271", "createdAt": "2020-01-28T10:44:11Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/snapshots/RepositoryFilterUserMetadataIT.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.snapshots;\n+\n+import org.apache.lucene.index.IndexCommit;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.snapshots.IndexShardSnapshotStatus;\n+import org.elasticsearch.index.store.Store;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.RepositoryPlugin;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.repositories.Repository;\n+import org.elasticsearch.repositories.ShardGenerations;\n+import org.elasticsearch.repositories.fs.FsRepository;\n+import org.elasticsearch.test.ESIntegTestCase;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.is;\n+\n+public class RepositoryFilterUserMetadataIT extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc8d16376cc703ebf946088ceac53ec37d0863b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODg1NTIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/Repository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxODowOVrOFimk3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxODowOVrOFimk3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyNzkzMg==", "bodyText": "perhaps call this method adaptUserMetadata?", "url": "https://github.com/elastic/elasticsearch/pull/51472#discussion_r371827932", "createdAt": "2020-01-28T14:18:09Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/repositories/Repository.java", "diffHunk": "@@ -234,4 +237,12 @@ void restoreShard(Store store, SnapshotId snapshotId, IndexId indexId, ShardId s\n      * @param state new cluster state\n      */\n     void updateState(ClusterState state);\n+\n+    /**\n+     * Hook that allows a repository to filter the user supplied snapshot metadata in {@link SnapshotsInProgress.Entry#userMetadata()}\n+     * during snapshot initialization.\n+     */\n+    default Map<String, Object> filterUserMetadata(Map<String, Object> userMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc8d16376cc703ebf946088ceac53ec37d0863b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4378, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}