{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzU1MTY2", "number": 66365, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyNzo0NFrOFF1jKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNjowNjo1NlrOFGAa_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY0NTUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyNzo0NFrOIGi1Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyNzo0NFrOIGi1Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczMzA3OQ==", "bodyText": "No problem here, but refactoring to make it also go through a method that filters the headers, for good measure.", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r543733079", "createdAt": "2020-12-15T22:27:44Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java", "diffHunk": "@@ -381,18 +380,15 @@ public static Client wrapClient(Client client, Map<String, String> headers) {\n         if (headers.isEmpty()) {\n             return client;\n         } else {\n-            final ThreadContext threadContext = client.threadPool().getThreadContext();\n-            Map<String, String> filteredHeaders = headers.entrySet().stream()\n-                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))\n-                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+            Map<String, String> filteredHeaders = ClientHelper.filterSecurityHeaders(headers);\n+            if (filteredHeaders.isEmpty()) {\n+                return client;\n+            }\n             return new FilterClient(client) {\n                 @Override\n                 protected <Request extends ActionRequest, Response extends ActionResponse>\n                 void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n-                    final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false);\n-                    try (ThreadContext.StoredContext ignore = stashWithHeaders(threadContext, filteredHeaders)) {\n-                        super.doExecute(action, request, new ContextPreservingActionListener<>(supplier, listener));\n-                    }\n+                    ClientHelper.executeWithHeadersAsync(filteredHeaders, null, client, action, request, listener);\n                 }\n             };\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23efe8b367a8c05f47d9eef12c68c076f5b63c1d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY0NjM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyODowMVrOIGi14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyODowMVrOIGi14g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczMzIxOA==", "bodyText": "the problem.", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r543733218", "createdAt": "2020-12-15T22:28:01Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -136,7 +137,7 @@ public void onFailure(Exception exc) {\n \n     private SearchRequest createSearchRequest(SubmitAsyncSearchRequest request, Task submitTask, TimeValue keepAlive) {\n         String docID = UUIDs.randomBase64UUID();\n-        Map<String, String> originHeaders = nodeClient.threadPool().getThreadContext().getHeaders();\n+        Map<String, String> originHeaders = ClientHelper.filterSecurityHeaders(nodeClient.threadPool().getThreadContext().getHeaders());\n         SearchRequest searchRequest = new SearchRequest(request.getSearchRequest()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23efe8b367a8c05f47d9eef12c68c076f5b63c1d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY0ODU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyODo0N1rOIGi3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyODo0N1rOIGi3Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczMzU4Nw==", "bodyText": "Unfortunately, I cannot link to the the ClientHelper methods that do the filtering (different proj).", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r543733587", "createdAt": "2020-12-15T22:28:47Z", "author": {"login": "albertzaharovits"}, "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -320,7 +320,13 @@ public String getHeader(String key) {\n     }\n \n     /**\n-     * Returns all of the request contexts headers\n+     * Returns all of the request headers from the thread's context.<br>\n+     * <b>Be advised, headers might contain credentials.</b>\n+     * In order to avoid storing, and erroneously exposing, such headers,\n+     * it is recommended to instead store security headers that prove\n+     * the credentials have been verified successfully, and which are\n+     * internal to the system, in the sense that they cannot be sent\n+     * by the clients.\n      */\n     public Map<String, String> getHeaders() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23efe8b367a8c05f47d9eef12c68c076f5b63c1d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY2MTM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/async/AsyncTaskManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMjozMlrOIGi-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMjozMlrOIGi-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNTUzNQ==", "bodyText": "Another problem.", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r543735535", "createdAt": "2020-12-15T22:32:32Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/async/AsyncTaskManagementService.java", "diffHunk": "@@ -193,7 +195,7 @@ private void storeResults(T searchTask, StoredAsyncResponse<Response> storedResp\n     private void storeResults(T searchTask, StoredAsyncResponse<Response> storedResponse, ActionListener<Void> finalListener) {\n         try {\n             asyncTaskIndexService.createResponse(searchTask.getExecutionId().getDocId(),\n-                threadPool.getThreadContext().getHeaders(), storedResponse, ActionListener.wrap(\n+                searchTask.getOriginHeaders(), storedResponse, ActionListener.wrap(\n                     // We should only unregister after the result is saved\n                     resp -> {\n                         logger.trace(() -> new ParameterizedMessage(\"stored eql search results for [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23efe8b367a8c05f47d9eef12c68c076f5b63c1d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY2NjY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/action/TransportPreviewTransformAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNDowN1rOIGjCAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNDowN1rOIGjCAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNjMyMA==", "bodyText": "Not really a problem, but good measure.", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r543736320", "createdAt": "2020-12-15T22:34:07Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/action/TransportPreviewTransformAction.java", "diffHunk": "@@ -189,7 +189,7 @@ private void getPreview(\n             mappings.set(deducedMappings);\n             function.preview(\n                 client,\n-                threadPool.getThreadContext().getHeaders(),\n+                ClientHelper.filterSecurityHeaders(threadPool.getThreadContext().getHeaders()),\n                 source,\n                 deducedMappings,\n                 NUMBER_OF_PREVIEW_BUCKETS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23efe8b367a8c05f47d9eef12c68c076f5b63c1d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY3MTc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/transport/actions/TransportExecuteWatchAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNTozM1rOIGjE6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNTozM1rOIGjE6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNzA2Nw==", "bodyText": "Not really a problem, but good measure.", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r543737067", "createdAt": "2020-12-15T22:35:33Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/transport/actions/TransportExecuteWatchAction.java", "diffHunk": "@@ -121,8 +121,7 @@ private void executeWatch(\n              * Ensure that the headers from the incoming request are used instead those of the stored watch otherwise the watch would run\n              * as the user who stored the watch, but it needs to run as the user who executes this request.\n              */\n-            final Map<String, String> headers = new HashMap<>(threadPool.getThreadContext().getHeaders());\n-            watch.status().setHeaders(headers);\n+            watch.status().setHeaders(ClientHelper.filterSecurityHeaders(threadPool.getThreadContext().getHeaders()));\n \n             final String triggerType = watch.trigger().type();\n             final TriggerEvent triggerEvent = triggerService.simulateEvent(triggerType, watch.id(), request.getTriggerData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23efe8b367a8c05f47d9eef12c68c076f5b63c1d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODQyNjg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ClientHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNjowNjo1NlrOIGzfrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzo0MTo1OVrOIHocgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwNjA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean assertsEnabled = false;\n          \n          \n            \n                    assert assertsEnabled = true;\n          \n          \n            \n                    if (assertsEnabled) {\n          \n          \n            \n                    if (org.elasticsearch.Assertions.ENABLED) {", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r544006062", "createdAt": "2020-12-16T06:06:56Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ClientHelper.java", "diffHunk": "@@ -31,13 +33,29 @@\n  */\n public final class ClientHelper {\n \n+    private static Pattern authorizationHeaderPattern = Pattern.compile(\"\\\\s*\" + Pattern.quote(\"Authorization\") + \"\\\\s*\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    public static void assertNoAuthorizationHeader(Map<String, String> headers) {\n+        boolean assertsEnabled = false;\n+        assert assertsEnabled = true;\n+        if (assertsEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae382bc292fbfd395c60369f75ce09bb13760e06"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3MzYwMw==", "bodyText": "Nice! TIL.", "url": "https://github.com/elastic/elasticsearch/pull/66365#discussion_r544873603", "createdAt": "2020-12-17T07:41:59Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ClientHelper.java", "diffHunk": "@@ -31,13 +33,29 @@\n  */\n public final class ClientHelper {\n \n+    private static Pattern authorizationHeaderPattern = Pattern.compile(\"\\\\s*\" + Pattern.quote(\"Authorization\") + \"\\\\s*\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    public static void assertNoAuthorizationHeader(Map<String, String> headers) {\n+        boolean assertsEnabled = false;\n+        assert assertsEnabled = true;\n+        if (assertsEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwNjA2Mg=="}, "originalCommit": {"oid": "ae382bc292fbfd395c60369f75ce09bb13760e06"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4626, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}