{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTQ4NzEx", "number": 62600, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1MDowMVrOEk5fQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1Mjo0MFrOEk5i0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTI2MDgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/BitArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1MDowMVrOHUGIVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1MDowMVrOHUGIVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNDAwNg==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while(++wordNum < bits.size()) {\n          \n          \n            \n                    while (++wordNum < bits.size()) {", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490834006", "createdAt": "2020-09-18T09:50:01Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/util/BitArray.java", "diffHunk": "@@ -50,6 +50,37 @@ public void set(long index) {\n         bits.set(wordNum, bits.get(wordNum) | bitmask(index));\n     }\n \n+    /** this = this OR other */\n+    public void or(BitArray other) {\n+        or(other.bits);\n+    }\n+\n+    private void or(final LongArray otherArr) {\n+        long pos = otherArr.size();\n+        bits = bigArrays.grow(bits, pos + 1);\n+        final LongArray thisArr = this.bits;\n+        while (--pos >= 0) {\n+            thisArr.set(pos, thisArr.get(pos) | otherArr.get(pos));\n+        }\n+    }\n+\n+    public long nextSetBit(long index) {\n+        long wordNum = wordNum(index);\n+        long word = bits.get(wordNum) >> index;  // skip all the bits to the right of index\n+\n+        if (word!=0) {\n+            return index + Long.numberOfTrailingZeros(word);\n+        }\n+\n+        while(++wordNum < bits.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434fd2aa80e12a8c42c0444079432eb211ba2b71"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTI2ODk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1MjoyM1rOHUGNQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDowNToxNVrOHUGm7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTI2NQ==", "bodyText": "Should it use Long.MAX_VALUE instead of DocIdSetIterator.NO_MORE_DOCS ?", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490835265", "createdAt": "2020-09-18T09:52:23Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "diffHunk": "@@ -288,29 +289,30 @@ public void collect(int doc, long bucketOrd) throws IOException {\n \n         @Override\n         public void postCollect() throws IOException {\n-            final FixedBitSet allVisitedOrds = new FixedBitSet(maxOrd);\n-            for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                final FixedBitSet bits = visitedOrds.get(bucket);\n-                if (bits != null) {\n-                    allVisitedOrds.or(bits);\n+            try (BitArray allVisitedOrds = new BitArray(maxOrd, bigArrays)) {\n+                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                    final BitArray bits = visitedOrds.get(bucket);\n+                    if (bits != null) {\n+                        allVisitedOrds.or(bits);\n+                    }\n                 }\n-            }\n \n-            final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n-            try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n-                for (int ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                        ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                    final BytesRef value = values.lookupOrd(ord);\n-                    MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n-                    hashes.set(ord, hash.h1);\n-                }\n+                try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n+                    final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n+                    for (long ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434fd2aa80e12a8c42c0444079432eb211ba2b71"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0MTgzNg==", "bodyText": "Yes", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490841836", "createdAt": "2020-09-18T10:05:15Z", "author": {"login": "iverase"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "diffHunk": "@@ -288,29 +289,30 @@ public void collect(int doc, long bucketOrd) throws IOException {\n \n         @Override\n         public void postCollect() throws IOException {\n-            final FixedBitSet allVisitedOrds = new FixedBitSet(maxOrd);\n-            for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                final FixedBitSet bits = visitedOrds.get(bucket);\n-                if (bits != null) {\n-                    allVisitedOrds.or(bits);\n+            try (BitArray allVisitedOrds = new BitArray(maxOrd, bigArrays)) {\n+                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                    final BitArray bits = visitedOrds.get(bucket);\n+                    if (bits != null) {\n+                        allVisitedOrds.or(bits);\n+                    }\n                 }\n-            }\n \n-            final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n-            try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n-                for (int ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                        ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                    final BytesRef value = values.lookupOrd(ord);\n-                    MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n-                    hashes.set(ord, hash.h1);\n-                }\n+                try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n+                    final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n+                    for (long ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTI2NQ=="}, "originalCommit": {"oid": "434fd2aa80e12a8c42c0444079432eb211ba2b71"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTI2OTI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1MjoyOVrOHUGNcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1MjoyOVrOHUGNcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTMxMw==", "bodyText": "same here ?", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490835313", "createdAt": "2020-09-18T09:52:29Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "diffHunk": "@@ -288,29 +289,30 @@ public void collect(int doc, long bucketOrd) throws IOException {\n \n         @Override\n         public void postCollect() throws IOException {\n-            final FixedBitSet allVisitedOrds = new FixedBitSet(maxOrd);\n-            for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                final FixedBitSet bits = visitedOrds.get(bucket);\n-                if (bits != null) {\n-                    allVisitedOrds.or(bits);\n+            try (BitArray allVisitedOrds = new BitArray(maxOrd, bigArrays)) {\n+                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                    final BitArray bits = visitedOrds.get(bucket);\n+                    if (bits != null) {\n+                        allVisitedOrds.or(bits);\n+                    }\n                 }\n-            }\n \n-            final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n-            try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n-                for (int ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                        ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                    final BytesRef value = values.lookupOrd(ord);\n-                    MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n-                    hashes.set(ord, hash.h1);\n-                }\n+                try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n+                    final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n+                    for (long ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n+                         ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434fd2aa80e12a8c42c0444079432eb211ba2b71"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTI2OTkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1Mjo0MFrOHUGN0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo1Mjo0MFrOHUGN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNTQxMQ==", "bodyText": "and here ;)", "url": "https://github.com/elastic/elasticsearch/pull/62600#discussion_r490835411", "createdAt": "2020-09-18T09:52:40Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregator.java", "diffHunk": "@@ -288,29 +289,30 @@ public void collect(int doc, long bucketOrd) throws IOException {\n \n         @Override\n         public void postCollect() throws IOException {\n-            final FixedBitSet allVisitedOrds = new FixedBitSet(maxOrd);\n-            for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                final FixedBitSet bits = visitedOrds.get(bucket);\n-                if (bits != null) {\n-                    allVisitedOrds.or(bits);\n+            try (BitArray allVisitedOrds = new BitArray(maxOrd, bigArrays)) {\n+                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                    final BitArray bits = visitedOrds.get(bucket);\n+                    if (bits != null) {\n+                        allVisitedOrds.or(bits);\n+                    }\n                 }\n-            }\n \n-            final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n-            try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n-                for (int ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                        ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                    final BytesRef value = values.lookupOrd(ord);\n-                    MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n-                    hashes.set(ord, hash.h1);\n-                }\n+                try (LongArray hashes = bigArrays.newLongArray(maxOrd, false)) {\n+                    final MurmurHash3.Hash128 hash = new MurmurHash3.Hash128();\n+                    for (long ord = allVisitedOrds.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n+                         ord = ord + 1 < maxOrd ? allVisitedOrds.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n+                        final BytesRef value = values.lookupOrd(ord);\n+                        MurmurHash3.hash128(value.bytes, value.offset, value.length, 0, hash);\n+                        hashes.set(ord, hash.h1);\n+                    }\n \n-                for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n-                    final FixedBitSet bits = visitedOrds.get(bucket);\n-                    if (bits != null) {\n-                        for (int ord = bits.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n-                                ord = ord + 1 < maxOrd ? bits.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {\n-                            counts.collect(bucket, hashes.get(ord));\n+                    for (long bucket = visitedOrds.size() - 1; bucket >= 0; --bucket) {\n+                        final BitArray bits = visitedOrds.get(bucket);\n+                        if (bits != null) {\n+                            for (long ord = bits.nextSetBit(0); ord < DocIdSetIterator.NO_MORE_DOCS;\n+                                 ord = ord + 1 < maxOrd ? bits.nextSetBit(ord + 1) : DocIdSetIterator.NO_MORE_DOCS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434fd2aa80e12a8c42c0444079432eb211ba2b71"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3455, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}