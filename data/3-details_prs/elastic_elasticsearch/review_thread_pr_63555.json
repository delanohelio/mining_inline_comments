{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTc1NjUz", "number": 63555, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNTo0M1rOEsoaRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNjoxMVrOEsoa7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjM0ODg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/search/MatchQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNTo0M1rOHf-p6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNTo0M1rOHf-p6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NDQ0Mg==", "bodyText": "Maybe assert that this != TextSearchInfo.NONE?", "url": "https://github.com/elastic/elasticsearch/pull/63555#discussion_r503294442", "createdAt": "2020-10-12T13:25:43Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/search/MatchQuery.java", "diffHunk": "@@ -297,13 +307,7 @@ protected final Query parseInternal(Type type, String fieldName, MatchQueryBuild\n     }\n \n     protected Analyzer getAnalyzer(MappedFieldType fieldType, boolean quoted) {\n-        // We check here that the field supports text searches and therefore has an analyzer -\n-        // if it doesn't, we can bail out early without doing any further parsing.\n         TextSearchInfo tsi = fieldType.getTextSearchInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802fc6b5263c2a6880cd02c4dcc3edef737ad00b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjM1MDU1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNjoxMVrOHf-q8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNjoxMVrOHf-q8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NDcwNw==", "bodyText": "check that this is a MatchNoDocsQuery?", "url": "https://github.com/elastic/elasticsearch/pull/63555#discussion_r503294707", "createdAt": "2020-10-12T13:26:11Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java", "diffHunk": "@@ -297,7 +297,16 @@ public void testExactOnUnsupportedField() throws Exception {\n         query.toQuery(context); // no exception\n     }\n \n-    public void testParseFailsWithMultipleFields() throws IOException {\n+    public void testLenientFlag() throws Exception {\n+        MatchQueryBuilder query = new MatchQueryBuilder(BINARY_FIELD_NAME, \"test\");\n+        QueryShardContext context = createShardContext();\n+        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n+        assertEquals(\"Field [mapped_binary] of type [binary does not support match queries\", e.getMessage());\n+        query.lenient(true);\n+        query.toQuery(context); // no exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802fc6b5263c2a6880cd02c4dcc3edef737ad00b"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2936, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}