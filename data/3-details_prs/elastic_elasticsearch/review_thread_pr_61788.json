{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDk5Njkz", "number": 61788, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzowMjowNFrOEe_-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo1MToxN1rOEfYQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTQwOTM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/DefaultSearchContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzowMjowNFrOHLAGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzozMDoyNVrOHLgs6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5NzkyNA==", "bodyText": "Since we use the ContextIndexSearcher only in DefaultSearchContext I wonder if that would be cleaner to extend Closeable and to close the searcher here ?", "url": "https://github.com/elastic/elasticsearch/pull/61788#discussion_r481297924", "createdAt": "2020-09-01T17:02:04Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/DefaultSearchContext.java", "diffHunk": "@@ -186,6 +186,7 @@\n     @Override\n     public void doClose() {\n         engineSearcher.close();\n+        this.searcher.clearQueryCancellations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982ced496e626c0d945e083d42b71176e5063865"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgzMjE2OA==", "bodyText": "++, fixed in 50043b1", "url": "https://github.com/elastic/elasticsearch/pull/61788#discussion_r481832168", "createdAt": "2020-09-02T07:30:25Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/search/DefaultSearchContext.java", "diffHunk": "@@ -186,6 +186,7 @@\n     @Override\n     public void doClose() {\n         engineSearcher.close();\n+        this.searcher.clearQueryCancellations();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5NzkyNA=="}, "originalCommit": {"oid": "982ced496e626c0d945e083d42b71176e5063865"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTQyMTcwOnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/search/SearchLeakIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzowNTozM1rOHLANsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzozNToyNFrOHLg9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5OTg4OQ==", "bodyText": "What is your plan with this test ? I don't think it's necessary to commit at least not in this form ?", "url": "https://github.com/elastic/elasticsearch/pull/61788#discussion_r481299889", "createdAt": "2020-09-01T17:05:33Z", "author": {"login": "jimczi"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/search/SearchLeakIT.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.ExceptionsHelper;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.index.IndexRequestBuilder;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.breaker.CircuitBreakingException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeUnit;\n+import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.BucketOrder;\n+import org.elasticsearch.test.ESIntegTestCase;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static org.elasticsearch.search.aggregations.AggregationBuilders.cardinality;\n+import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;\n+import static org.hamcrest.Matchers.lessThan;\n+\n+public class SearchLeakIT extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982ced496e626c0d945e083d42b71176e5063865"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgzNjM4MQ==", "bodyText": "I was torn on this too. I dislike the extended runtime and GC checking. It would be nice to be able to catch such leaks, but I recognize that it is probably better handled elsewhere (like rally and monitoring for heap usage).\nI replaced it with an integration test that only verifies that the request breaker accounting is done correctly for cardinality aggs (and discovered a bug I introduced in the process).", "url": "https://github.com/elastic/elasticsearch/pull/61788#discussion_r481836381", "createdAt": "2020-09-02T07:35:24Z", "author": {"login": "henningandersen"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/search/SearchLeakIT.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.ExceptionsHelper;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.index.IndexRequestBuilder;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.breaker.CircuitBreakingException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeUnit;\n+import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.BucketOrder;\n+import org.elasticsearch.test.ESIntegTestCase;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static org.elasticsearch.search.aggregations.AggregationBuilders.cardinality;\n+import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;\n+import static org.hamcrest.Matchers.lessThan;\n+\n+public class SearchLeakIT extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5OTg4OQ=="}, "originalCommit": {"oid": "982ced496e626c0d945e083d42b71176e5063865"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzM4NzIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo1MToxN1rOHLno2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo1MToxN1rOHLno2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0NTgxNw==", "bodyText": "Can you add a comment on why we're clearing the list on close ? It's easy to forget and/or to remove if we don't explain the possible leak in the reader.", "url": "https://github.com/elastic/elasticsearch/pull/61788#discussion_r481945817", "createdAt": "2020-09-02T09:51:17Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -118,6 +119,15 @@ public void removeQueryCancellation(Runnable action) {\n         this.cancellable.remove(action);\n     }\n \n+    @Override\n+    public void close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e033e48233aeaee518fd874aa092b871bfd62f1"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1800, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}