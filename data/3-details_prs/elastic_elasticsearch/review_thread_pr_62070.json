{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNTY3OTY5", "number": 62070, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxMDo0N1rOEhHHTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxMDo0N1rOEhHHTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTU1MDIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxMDo0N1rOHOPnhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxOTo1N1rOHOqxsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5Nzk5MA==", "bodyText": "changedCount++;?", "url": "https://github.com/elastic/elasticsearch/pull/62070#discussion_r484697990", "createdAt": "2020-09-08T07:10:47Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1887,55 +1887,67 @@ public boolean assertAllListenersResolved() {\n                         execute(ClusterState currentState, List<UpdateIndexShardSnapshotStatusRequest> tasks) {\n             int changedCount = 0;\n             final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n-            final Map<String, Set<ShardId>> reusedShardIdsByRepo = new HashMap<>();\n+            final List<UpdateIndexShardSnapshotStatusRequest> unconsumedTasks = new ArrayList<>(tasks);\n             for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n-                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder();\n-                boolean updated = false;\n-\n-                for (UpdateIndexShardSnapshotStatusRequest updateSnapshotState : tasks) {\n+                if (entry.state().completed()) {\n+                    entries.add(entry);\n+                    continue;\n+                }\n+                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+                for (Iterator<UpdateIndexShardSnapshotStatusRequest> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n+                    final UpdateIndexShardSnapshotStatusRequest updateSnapshotState = iterator.next();\n+                    final Snapshot updatedSnapshot = updateSnapshotState.snapshot();\n+                    final String updatedRepository = updatedSnapshot.getRepository();\n+                    if (entry.repository().equals(updatedRepository) == false) {\n+                        continue;\n+                    }\n                     final ShardId finishedShardId = updateSnapshotState.shardId();\n-                    if (entry.snapshot().equals(updateSnapshotState.snapshot())) {\n-                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updateSnapshotState.snapshot(),\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resend shard status after a disconnect\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n                                 finishedShardId, updateSnapshotState.status().state());\n-                        if (updated == false) {\n-                            shards.putAll(entry.shards());\n-                            updated = true;\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n                         shards.put(finishedShardId, updateSnapshotState.status());\n                         changedCount++;\n                     } else {\n-                        final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n-                        final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n-                                && reusedShardIds.contains(finishedShardId) == false) {\n-                            final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                                continue;\n-                            }\n-                            if (updated == false) {\n-                                shards.putAll(entry.shards());\n-                                updated = true;\n-                            }\n-                            final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n-                            logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n-                                    finishedStatus.nodeId(), finishedStatus.generation());\n-                            shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n-                            reusedShardIds.add(finishedShardId);\n+                        final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n+                        if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n+                            continue;\n+                        }\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n+                        final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n+                        logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n+                                finishedStatus.nodeId(), finishedStatus.generation());\n+                        shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n+                        iterator.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c560fff6a67ee5d596566cef0c0816daa000b23"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNjA2Ng==", "bodyText": "We only counted the updates to existing running snapshots so far but not the updates that made new shard snapshots start. I don't have much of an opinion here but I think I like the current approach marginally better than counting up here as well. It at least allows you to judge how well state update batching is working if you turn on trace logging (if you count an update either once or twice it's more confusing).", "url": "https://github.com/elastic/elasticsearch/pull/62070#discussion_r484736066", "createdAt": "2020-09-08T08:17:56Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1887,55 +1887,67 @@ public boolean assertAllListenersResolved() {\n                         execute(ClusterState currentState, List<UpdateIndexShardSnapshotStatusRequest> tasks) {\n             int changedCount = 0;\n             final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n-            final Map<String, Set<ShardId>> reusedShardIdsByRepo = new HashMap<>();\n+            final List<UpdateIndexShardSnapshotStatusRequest> unconsumedTasks = new ArrayList<>(tasks);\n             for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n-                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder();\n-                boolean updated = false;\n-\n-                for (UpdateIndexShardSnapshotStatusRequest updateSnapshotState : tasks) {\n+                if (entry.state().completed()) {\n+                    entries.add(entry);\n+                    continue;\n+                }\n+                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+                for (Iterator<UpdateIndexShardSnapshotStatusRequest> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n+                    final UpdateIndexShardSnapshotStatusRequest updateSnapshotState = iterator.next();\n+                    final Snapshot updatedSnapshot = updateSnapshotState.snapshot();\n+                    final String updatedRepository = updatedSnapshot.getRepository();\n+                    if (entry.repository().equals(updatedRepository) == false) {\n+                        continue;\n+                    }\n                     final ShardId finishedShardId = updateSnapshotState.shardId();\n-                    if (entry.snapshot().equals(updateSnapshotState.snapshot())) {\n-                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updateSnapshotState.snapshot(),\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resend shard status after a disconnect\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n                                 finishedShardId, updateSnapshotState.status().state());\n-                        if (updated == false) {\n-                            shards.putAll(entry.shards());\n-                            updated = true;\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n                         shards.put(finishedShardId, updateSnapshotState.status());\n                         changedCount++;\n                     } else {\n-                        final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n-                        final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n-                                && reusedShardIds.contains(finishedShardId) == false) {\n-                            final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                                continue;\n-                            }\n-                            if (updated == false) {\n-                                shards.putAll(entry.shards());\n-                                updated = true;\n-                            }\n-                            final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n-                            logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n-                                    finishedStatus.nodeId(), finishedStatus.generation());\n-                            shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n-                            reusedShardIds.add(finishedShardId);\n+                        final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n+                        if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n+                            continue;\n+                        }\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n+                        final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n+                        logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n+                                finishedStatus.nodeId(), finishedStatus.generation());\n+                        shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n+                        iterator.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5Nzk5MA=="}, "originalCommit": {"oid": "0c560fff6a67ee5d596566cef0c0816daa000b23"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc1MjM3MQ==", "bodyText": "Note that we later on down use if (changedCount) to determine if a CS update is needed.", "url": "https://github.com/elastic/elasticsearch/pull/62070#discussion_r484752371", "createdAt": "2020-09-08T08:43:29Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1887,55 +1887,67 @@ public boolean assertAllListenersResolved() {\n                         execute(ClusterState currentState, List<UpdateIndexShardSnapshotStatusRequest> tasks) {\n             int changedCount = 0;\n             final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n-            final Map<String, Set<ShardId>> reusedShardIdsByRepo = new HashMap<>();\n+            final List<UpdateIndexShardSnapshotStatusRequest> unconsumedTasks = new ArrayList<>(tasks);\n             for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n-                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder();\n-                boolean updated = false;\n-\n-                for (UpdateIndexShardSnapshotStatusRequest updateSnapshotState : tasks) {\n+                if (entry.state().completed()) {\n+                    entries.add(entry);\n+                    continue;\n+                }\n+                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+                for (Iterator<UpdateIndexShardSnapshotStatusRequest> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n+                    final UpdateIndexShardSnapshotStatusRequest updateSnapshotState = iterator.next();\n+                    final Snapshot updatedSnapshot = updateSnapshotState.snapshot();\n+                    final String updatedRepository = updatedSnapshot.getRepository();\n+                    if (entry.repository().equals(updatedRepository) == false) {\n+                        continue;\n+                    }\n                     final ShardId finishedShardId = updateSnapshotState.shardId();\n-                    if (entry.snapshot().equals(updateSnapshotState.snapshot())) {\n-                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updateSnapshotState.snapshot(),\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resend shard status after a disconnect\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n                                 finishedShardId, updateSnapshotState.status().state());\n-                        if (updated == false) {\n-                            shards.putAll(entry.shards());\n-                            updated = true;\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n                         shards.put(finishedShardId, updateSnapshotState.status());\n                         changedCount++;\n                     } else {\n-                        final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n-                        final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n-                                && reusedShardIds.contains(finishedShardId) == false) {\n-                            final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                                continue;\n-                            }\n-                            if (updated == false) {\n-                                shards.putAll(entry.shards());\n-                                updated = true;\n-                            }\n-                            final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n-                            logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n-                                    finishedStatus.nodeId(), finishedStatus.generation());\n-                            shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n-                            reusedShardIds.add(finishedShardId);\n+                        final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n+                        if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n+                            continue;\n+                        }\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n+                        final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n+                        logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n+                                finishedStatus.nodeId(), finishedStatus.generation());\n+                        shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n+                        iterator.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5Nzk5MA=="}, "originalCommit": {"oid": "0c560fff6a67ee5d596566cef0c0816daa000b23"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc1MjgyMQ==", "bodyText": "Perhaps we can count both separately (and  expose in log message)", "url": "https://github.com/elastic/elasticsearch/pull/62070#discussion_r484752821", "createdAt": "2020-09-08T08:44:13Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1887,55 +1887,67 @@ public boolean assertAllListenersResolved() {\n                         execute(ClusterState currentState, List<UpdateIndexShardSnapshotStatusRequest> tasks) {\n             int changedCount = 0;\n             final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n-            final Map<String, Set<ShardId>> reusedShardIdsByRepo = new HashMap<>();\n+            final List<UpdateIndexShardSnapshotStatusRequest> unconsumedTasks = new ArrayList<>(tasks);\n             for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n-                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder();\n-                boolean updated = false;\n-\n-                for (UpdateIndexShardSnapshotStatusRequest updateSnapshotState : tasks) {\n+                if (entry.state().completed()) {\n+                    entries.add(entry);\n+                    continue;\n+                }\n+                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+                for (Iterator<UpdateIndexShardSnapshotStatusRequest> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n+                    final UpdateIndexShardSnapshotStatusRequest updateSnapshotState = iterator.next();\n+                    final Snapshot updatedSnapshot = updateSnapshotState.snapshot();\n+                    final String updatedRepository = updatedSnapshot.getRepository();\n+                    if (entry.repository().equals(updatedRepository) == false) {\n+                        continue;\n+                    }\n                     final ShardId finishedShardId = updateSnapshotState.shardId();\n-                    if (entry.snapshot().equals(updateSnapshotState.snapshot())) {\n-                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updateSnapshotState.snapshot(),\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resend shard status after a disconnect\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n                                 finishedShardId, updateSnapshotState.status().state());\n-                        if (updated == false) {\n-                            shards.putAll(entry.shards());\n-                            updated = true;\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n                         shards.put(finishedShardId, updateSnapshotState.status());\n                         changedCount++;\n                     } else {\n-                        final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n-                        final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n-                                && reusedShardIds.contains(finishedShardId) == false) {\n-                            final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                                continue;\n-                            }\n-                            if (updated == false) {\n-                                shards.putAll(entry.shards());\n-                                updated = true;\n-                            }\n-                            final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n-                            logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n-                                    finishedStatus.nodeId(), finishedStatus.generation());\n-                            shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n-                            reusedShardIds.add(finishedShardId);\n+                        final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n+                        if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n+                            continue;\n+                        }\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n+                        final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n+                        logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n+                                finishedStatus.nodeId(), finishedStatus.generation());\n+                        shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n+                        iterator.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5Nzk5MA=="}, "originalCommit": {"oid": "0c560fff6a67ee5d596566cef0c0816daa000b23"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc2MzkyNw==", "bodyText": "Note that we later on down use if (changedCount) to determine if a CS update is needed.\n\nIt is actually very important that we do that. Otherwise a dangling data node that re-sends its shard updates long after the snapshot has finished might result in two queued up snapshots having the same shard start snapshotting.\nI just realized that even with this check that is still a possibility though and we have a (very unlikely) bug here in fact in situations where data nodes resend their updates after a snapshot has finished.\nReproducing this requires a pretty tricky test and a fix needs additional changes to this loop. Maybe we can take the straight forward speedups that don't change behavior in here here separately now as is and I'll refactor this in a follow-up that also fixes the above bug?", "url": "https://github.com/elastic/elasticsearch/pull/62070#discussion_r484763927", "createdAt": "2020-09-08T09:01:41Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1887,55 +1887,67 @@ public boolean assertAllListenersResolved() {\n                         execute(ClusterState currentState, List<UpdateIndexShardSnapshotStatusRequest> tasks) {\n             int changedCount = 0;\n             final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n-            final Map<String, Set<ShardId>> reusedShardIdsByRepo = new HashMap<>();\n+            final List<UpdateIndexShardSnapshotStatusRequest> unconsumedTasks = new ArrayList<>(tasks);\n             for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n-                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder();\n-                boolean updated = false;\n-\n-                for (UpdateIndexShardSnapshotStatusRequest updateSnapshotState : tasks) {\n+                if (entry.state().completed()) {\n+                    entries.add(entry);\n+                    continue;\n+                }\n+                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+                for (Iterator<UpdateIndexShardSnapshotStatusRequest> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n+                    final UpdateIndexShardSnapshotStatusRequest updateSnapshotState = iterator.next();\n+                    final Snapshot updatedSnapshot = updateSnapshotState.snapshot();\n+                    final String updatedRepository = updatedSnapshot.getRepository();\n+                    if (entry.repository().equals(updatedRepository) == false) {\n+                        continue;\n+                    }\n                     final ShardId finishedShardId = updateSnapshotState.shardId();\n-                    if (entry.snapshot().equals(updateSnapshotState.snapshot())) {\n-                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updateSnapshotState.snapshot(),\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resend shard status after a disconnect\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n                                 finishedShardId, updateSnapshotState.status().state());\n-                        if (updated == false) {\n-                            shards.putAll(entry.shards());\n-                            updated = true;\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n                         shards.put(finishedShardId, updateSnapshotState.status());\n                         changedCount++;\n                     } else {\n-                        final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n-                        final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n-                                && reusedShardIds.contains(finishedShardId) == false) {\n-                            final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                                continue;\n-                            }\n-                            if (updated == false) {\n-                                shards.putAll(entry.shards());\n-                                updated = true;\n-                            }\n-                            final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n-                            logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n-                                    finishedStatus.nodeId(), finishedStatus.generation());\n-                            shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n-                            reusedShardIds.add(finishedShardId);\n+                        final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n+                        if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n+                            continue;\n+                        }\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n+                        final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n+                        logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n+                                finishedStatus.nodeId(), finishedStatus.generation());\n+                        shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n+                        iterator.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5Nzk5MA=="}, "originalCommit": {"oid": "0c560fff6a67ee5d596566cef0c0816daa000b23"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc2NzQzOA==", "bodyText": "Nevermind actually, the fix fits in here just fine. On it.", "url": "https://github.com/elastic/elasticsearch/pull/62070#discussion_r484767438", "createdAt": "2020-09-08T09:07:39Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1887,55 +1887,67 @@ public boolean assertAllListenersResolved() {\n                         execute(ClusterState currentState, List<UpdateIndexShardSnapshotStatusRequest> tasks) {\n             int changedCount = 0;\n             final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n-            final Map<String, Set<ShardId>> reusedShardIdsByRepo = new HashMap<>();\n+            final List<UpdateIndexShardSnapshotStatusRequest> unconsumedTasks = new ArrayList<>(tasks);\n             for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n-                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder();\n-                boolean updated = false;\n-\n-                for (UpdateIndexShardSnapshotStatusRequest updateSnapshotState : tasks) {\n+                if (entry.state().completed()) {\n+                    entries.add(entry);\n+                    continue;\n+                }\n+                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+                for (Iterator<UpdateIndexShardSnapshotStatusRequest> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n+                    final UpdateIndexShardSnapshotStatusRequest updateSnapshotState = iterator.next();\n+                    final Snapshot updatedSnapshot = updateSnapshotState.snapshot();\n+                    final String updatedRepository = updatedSnapshot.getRepository();\n+                    if (entry.repository().equals(updatedRepository) == false) {\n+                        continue;\n+                    }\n                     final ShardId finishedShardId = updateSnapshotState.shardId();\n-                    if (entry.snapshot().equals(updateSnapshotState.snapshot())) {\n-                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updateSnapshotState.snapshot(),\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resend shard status after a disconnect\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n                                 finishedShardId, updateSnapshotState.status().state());\n-                        if (updated == false) {\n-                            shards.putAll(entry.shards());\n-                            updated = true;\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n                         shards.put(finishedShardId, updateSnapshotState.status());\n                         changedCount++;\n                     } else {\n-                        final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n-                        final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n-                                && reusedShardIds.contains(finishedShardId) == false) {\n-                            final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                                continue;\n-                            }\n-                            if (updated == false) {\n-                                shards.putAll(entry.shards());\n-                                updated = true;\n-                            }\n-                            final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n-                            logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n-                                    finishedStatus.nodeId(), finishedStatus.generation());\n-                            shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n-                            reusedShardIds.add(finishedShardId);\n+                        final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n+                        if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n+                            continue;\n+                        }\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n+                        final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n+                        logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n+                                finishedStatus.nodeId(), finishedStatus.generation());\n+                        shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n+                        iterator.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5Nzk5MA=="}, "originalCommit": {"oid": "0c560fff6a67ee5d596566cef0c0816daa000b23"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0Mjk2Mg==", "bodyText": "Alright I pushed 5c05dc1 and eb14918 to keep two counts for the log message.\nAlso, I made a change there that fixes the bug I was talking about. Currently, if a dangling data node were to send a shard update for a snapshot that is long gone from the CS it might trigger a queued up shard snapshot to start and another snapshot for that shard is already running. This is only a possibility if it gets batched up with a shard update for an existing in-progress snapshot due to the changedCount condition so it's incredibly unlikely in practice and I'm having a very hard timing coding up a test for it (even in SnapshotsResiliencyTests I can't seem to find a scenario where this kind of CS update batching occurs at any non-trivial frequency so far). I still think this is a valid fix, plus it actually improves performance to check if a task has even been reused as well to a trivial degree in some corner cases I suppose.", "url": "https://github.com/elastic/elasticsearch/pull/62070#discussion_r485142962", "createdAt": "2020-09-08T19:19:57Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1887,55 +1887,67 @@ public boolean assertAllListenersResolved() {\n                         execute(ClusterState currentState, List<UpdateIndexShardSnapshotStatusRequest> tasks) {\n             int changedCount = 0;\n             final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n-            final Map<String, Set<ShardId>> reusedShardIdsByRepo = new HashMap<>();\n+            final List<UpdateIndexShardSnapshotStatusRequest> unconsumedTasks = new ArrayList<>(tasks);\n             for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n-                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder();\n-                boolean updated = false;\n-\n-                for (UpdateIndexShardSnapshotStatusRequest updateSnapshotState : tasks) {\n+                if (entry.state().completed()) {\n+                    entries.add(entry);\n+                    continue;\n+                }\n+                ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+                for (Iterator<UpdateIndexShardSnapshotStatusRequest> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n+                    final UpdateIndexShardSnapshotStatusRequest updateSnapshotState = iterator.next();\n+                    final Snapshot updatedSnapshot = updateSnapshotState.snapshot();\n+                    final String updatedRepository = updatedSnapshot.getRepository();\n+                    if (entry.repository().equals(updatedRepository) == false) {\n+                        continue;\n+                    }\n                     final ShardId finishedShardId = updateSnapshotState.shardId();\n-                    if (entry.snapshot().equals(updateSnapshotState.snapshot())) {\n-                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updateSnapshotState.snapshot(),\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resend shard status after a disconnect\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n                                 finishedShardId, updateSnapshotState.status().state());\n-                        if (updated == false) {\n-                            shards.putAll(entry.shards());\n-                            updated = true;\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n                         shards.put(finishedShardId, updateSnapshotState.status());\n                         changedCount++;\n                     } else {\n-                        final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n-                        final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n-                                && reusedShardIds.contains(finishedShardId) == false) {\n-                            final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                                continue;\n-                            }\n-                            if (updated == false) {\n-                                shards.putAll(entry.shards());\n-                                updated = true;\n-                            }\n-                            final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n-                            logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n-                                    finishedStatus.nodeId(), finishedStatus.generation());\n-                            shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n-                            reusedShardIds.add(finishedShardId);\n+                        final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n+                        if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n+                            continue;\n+                        }\n+                        if (shards == null) {\n+                            shards = ImmutableOpenMap.builder(entry.shards());\n                         }\n+                        final ShardSnapshotStatus finishedStatus = updateSnapshotState.status();\n+                        logger.trace(\"Starting [{}] on [{}] with generation [{}]\", finishedShardId,\n+                                finishedStatus.nodeId(), finishedStatus.generation());\n+                        shards.put(finishedShardId, new ShardSnapshotStatus(finishedStatus.nodeId(), finishedStatus.generation()));\n+                        iterator.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5Nzk5MA=="}, "originalCommit": {"oid": "0c560fff6a67ee5d596566cef0c0816daa000b23"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1651, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}