{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MDM1NzYz", "number": 64825, "title": "Complete replacing member data with decorations in the ir tree", "bodyText": "This change replaces all the member data in the ir nodes with decorations instead. This completes the transition to a decoration system in the ir tree. This change allows for maximum flexibility when modifying existing phases or adding additional phases.", "createdAt": "2020-11-09T20:59:04Z", "url": "https://github.com/elastic/elasticsearch/pull/64825", "merged": true, "mergeCommit": {"oid": "a44ad560a23ee2570d5faaecc3de73e555c51608"}, "closed": true, "closedAt": "2020-12-03T20:01:08Z", "author": {"login": "jdconrad"}, "timelineItems": {"totalCount": 80, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMtIoegH2gAyNTE4MDM1NzYzOjBhMWI1ZWQwOTI3MDRhMWMyNWQxNTA5MjEzYjE2OTY2ZDI2M2M5YzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdinzlTAH2gAyNTE4MDM1NzYzOmYxNzQ5NjkwZjcxYmU3N2VhZjNhMTE4ODVjM2RlOTUyMzU5ZDYzYjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0a1b5ed092704a1c25d1509213b16966d263c9c1", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/0a1b5ed092704a1c25d1509213b16966d263c9c1", "committedDate": "2020-09-26T16:39:29Z", "message": "make location final in IRNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d62d0752fb2a99ae998fcab291c0f709bded0f5", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/7d62d0752fb2a99ae998fcab291c0f709bded0f5", "committedDate": "2020-09-26T17:18:49Z", "message": "add scoping for script, class, and method to WriteScope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "712b0a8965bba0939acd0f8e73932796eddc7238", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/712b0a8965bba0939acd0f8e73932796eddc7238", "committedDate": "2020-09-26T17:36:01Z", "message": "update scope to include classwriter and methodwriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "committedDate": "2020-09-26T17:56:22Z", "message": "move loop labels to writescope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65502b186dbd52a0c784a52a83b1fb659e3a6abc", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/65502b186dbd52a0c784a52a83b1fb659e3a6abc", "committedDate": "2020-09-26T18:22:52Z", "message": "move try/catch labels to WriteScope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7231b5ebd24838d08a18b46615849ab7842667eb", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/7231b5ebd24838d08a18b46615849ab7842667eb", "committedDate": "2020-09-26T20:26:14Z", "message": "move write to an external phase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18098089e58987981be7c35788a1a8b93e3bcbb5", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/18098089e58987981be7c35788a1a8b93e3bcbb5", "committedDate": "2020-09-26T21:42:15Z", "message": "convert expression type to ir decoration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab7ab346732b15568ad76fbb2ac6f70310a9dfa", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/fab7ab346732b15568ad76fbb2ac6f70310a9dfa", "committedDate": "2020-09-27T19:33:17Z", "message": "update ir decoration system"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3dd61762299bcfb2175d8c630ee04a7ec369967", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/c3dd61762299bcfb2175d8c630ee04a7ec369967", "committedDate": "2020-09-27T20:09:27Z", "message": "all escape ir decoration added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0cb44623a02b1046dd1dd7922523369ed4a0dd5", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0cb44623a02b1046dd1dd7922523369ed4a0dd5", "committedDate": "2020-09-27T22:11:26Z", "message": "some progress on moving to ir decorations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "599403addc35379422d7a20f5b279de35d21b4cc", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/599403addc35379422d7a20f5b279de35d21b4cc", "committedDate": "2020-09-27T22:56:43Z", "message": "more progress on ir decorations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb4baf4e7df15a72935db985c0590184252f6c2a", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/bb4baf4e7df15a72935db985c0590184252f6c2a", "committedDate": "2020-09-29T00:08:57Z", "message": "update all ir nodes to use ir decorations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae8d2a1f12069641171f0013205b5887c7dfcd6a", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/ae8d2a1f12069641171f0013205b5887c7dfcd6a", "committedDate": "2020-09-30T14:38:56Z", "message": "Merge branch 'master' into proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "760b9b940997249b18947d6da787d338f2a9dc38", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/760b9b940997249b18947d6da787d338f2a9dc38", "committedDate": "2020-10-05T16:36:09Z", "message": "Merge branch 'master' into proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "committedDate": "2020-10-05T17:04:18Z", "message": "Merge branch 'proto' into proto2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "committedDate": "2020-10-08T19:53:15Z", "message": "Merge branch 'master' into proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879afcac4496aa42f0d57c3485a94d11575bfe4c", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/879afcac4496aa42f0d57c3485a94d11575bfe4c", "committedDate": "2020-10-08T19:53:23Z", "message": "Merge branch 'proto' into proto2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49397f77f269c06949af28d6a0b33e8f5d653018", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/49397f77f269c06949af28d6a0b33e8f5d653018", "committedDate": "2020-10-08T20:17:35Z", "message": "response to pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c8082f74654dccabbb2ee339e9089623f445fb3", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c8082f74654dccabbb2ee339e9089623f445fb3", "committedDate": "2020-10-08T21:21:07Z", "message": "Merge branch 'master' into proto2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883486155e6f1c304fe53b5c8ef09ee255964141", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/883486155e6f1c304fe53b5c8ef09ee255964141", "committedDate": "2020-10-08T21:32:23Z", "message": "Merge branch 'proto2' into proto3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e31faeae9f99ed35a64d812596604b342fbc63f1", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/e31faeae9f99ed35a64d812596604b342fbc63f1", "committedDate": "2020-10-16T19:07:24Z", "message": "Merge branch 'master' into proto2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16031ac02038b84fd67bdc650a3f374ba9c8b927", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/16031ac02038b84fd67bdc650a3f374ba9c8b927", "committedDate": "2020-10-16T19:07:32Z", "message": "Merge branch 'proto2' into proto3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902b2ba328e4f9e3fc0a3d5f3809e257e396d2a4", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/902b2ba328e4f9e3fc0a3d5f3809e257e396d2a4", "committedDate": "2020-10-16T19:51:59Z", "message": "response to pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c245ddd2784cc981bfa207bbb5074ae73f4b5422", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/c245ddd2784cc981bfa207bbb5074ae73f4b5422", "committedDate": "2020-10-16T20:53:25Z", "message": "Merge branch 'master' into proto3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bfe0db6687dfe3269ef82b771f11269c0702b57", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/4bfe0db6687dfe3269ef82b771f11269c0702b57", "committedDate": "2020-10-19T16:32:50Z", "message": "Merge branch 'master' into proto3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e025b887a4018c746f944293b59f4276a6d43170", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/e025b887a4018c746f944293b59f4276a6d43170", "committedDate": "2020-10-19T16:49:40Z", "message": "Merge branch 'proto3' into proto4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "committedDate": "2020-10-22T17:01:04Z", "message": "Merge branch 'master' into proto3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b22e832b888257ab748b0191a868171928c09629", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/b22e832b888257ab748b0191a868171928c09629", "committedDate": "2020-10-22T17:01:14Z", "message": "Merge branch 'proto3' into proto4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376eda6647a7ce28433183830d3956c7faab513f", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/376eda6647a7ce28433183830d3956c7faab513f", "committedDate": "2020-10-22T18:09:32Z", "message": "response to pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a66b3936a904f5591cb5899edf3618faa8415b47", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/a66b3936a904f5591cb5899edf3618faa8415b47", "committedDate": "2020-10-22T22:06:32Z", "message": "Merge branch 'master' into proto4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "084cfe10473577b0c093fb1ff5db6e006950ed2b", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/084cfe10473577b0c093fb1ff5db6e006950ed2b", "committedDate": "2020-10-26T15:58:17Z", "message": "Merge branch 'master' into proto4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f3e98230120f60bc2e4717dd866630a5f4ab5e", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/40f3e98230120f60bc2e4717dd866630a5f4ab5e", "committedDate": "2020-10-26T16:55:35Z", "message": "Merge branch 'proto4' into proto5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b80b1f16c4c4d1324d0f7fa135dab422ac54f411", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/b80b1f16c4c4d1324d0f7fa135dab422ac54f411", "committedDate": "2020-10-30T15:29:52Z", "message": "Merge branch 'master' into proto4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0959d19140ce68754367fe9235218f2bd5dc9bc3", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/0959d19140ce68754367fe9235218f2bd5dc9bc3", "committedDate": "2020-10-30T15:29:59Z", "message": "Merge branch 'proto4' into proto5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79cb97c798506de691603b0ca899027314d815bf", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/79cb97c798506de691603b0ca899027314d815bf", "committedDate": "2020-10-30T15:33:00Z", "message": "response to pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7246f01921a4fe205123bcd24c01b9b2c13e6993", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/7246f01921a4fe205123bcd24c01b9b2c13e6993", "committedDate": "2020-11-09T19:55:20Z", "message": "Merge branch 'master' into proto5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/9fd09303030302a2545e8734d8076e8ffab4aa78", "committedDate": "2020-11-09T20:51:49Z", "message": "Merge branch 'proto5' into proto6"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDI1MTU1", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527425155", "createdAt": "2020-11-10T17:12:33Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMjozNFrOHwm1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMjozNFrOHwm1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyOTk0OA==", "bodyText": "IRDCast", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520729948", "createdAt": "2020-11-10T17:12:34Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CastNode.java", "diffHunk": "@@ -20,24 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class CastNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private PainlessCast cast;\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDI1NzQ2", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527425746", "createdAt": "2020-11-10T17:13:11Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMzoxMVrOHwm3Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMzoxMVrOHwm3Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMDM4Nw==", "bodyText": "IRDOperation", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520730387", "createdAt": "2020-11-10T17:13:11Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BooleanNode.java", "diffHunk": "@@ -20,24 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class BooleanNode extends BinaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Operation operation;\n-\n-    public void setOperation(Operation operation) {\n-        this.operation = operation;\n-    }\n-\n-    public Operation getOperation() {\n-        return operation;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDI2MzU2", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527426356", "createdAt": "2020-11-10T17:13:50Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMzo1MFrOHwm48g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMzo1MFrOHwm48g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMDg2Ng==", "bodyText": "IRCAllEscape", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520730866", "createdAt": "2020-11-10T17:13:50Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BlockNode.java", "diffHunk": "@@ -39,19 +39,7 @@ public void addStatementNode(StatementNode statementNode) {\n         return statementNodes;\n     }\n \n-    /* ---- end tree structure, begin node data ---- */\n-\n-    private boolean doAllEscape;\n-\n-    public void setAllEscape(boolean doAllEscape) {\n-        this.doAllEscape = doAllEscape;\n-    }\n-\n-    public boolean doAllEscape() {\n-        return doAllEscape;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- end tree structure, begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDI2Njgx", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527426681", "createdAt": "2020-11-10T17:14:10Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNDoxMFrOHwm55g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNDoxMFrOHwm55g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMTExMA==", "bodyText": "IRDExceptionType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520731110", "createdAt": "2020-11-10T17:14:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -26,26 +26,8 @@\n \n     /* ---- begin tree structure ---- */\n \n-    private Class<?> exceptionType;\n-    private String symbol;\n     private BlockNode blockNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDI2OTkx", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527426991", "createdAt": "2020-11-10T17:14:30Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNDozMFrOHwm68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNDozMFrOHwm68g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMTM3OA==", "bodyText": "newline.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520731378", "createdAt": "2020-11-10T17:14:30Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -638,7 +694,8 @@ public void visitCatch(CatchNode irCatchNode, WriteScope writeScope) {\n         MethodWriter methodWriter = writeScope.getMethodWriter();\n         methodWriter.writeStatementOffset(irCatchNode.getLocation());\n \n-        Variable variable = writeScope.defineVariable(irCatchNode.getExceptionType(), irCatchNode.getSymbol());\n+        Variable variable = writeScope.defineVariable(\n+                irCatchNode.getDecorationValue(IRDExceptionType.class), irCatchNode.getDecorationValue(IRDSymbol.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 293}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDI5MTg3", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527429187", "createdAt": "2020-11-10T17:16:52Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNjo1MlrOHwnBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNjo1MlrOHwnBQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMjk5Mw==", "bodyText": "IRDOperation", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520732993", "createdAt": "2020-11-10T17:16:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ComparisonNode.java", "diffHunk": "@@ -20,38 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class ComparisonNode extends BinaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Operation operation;\n-    private Class<?> comparisonType;\n-\n-    public void setOperation(Operation operation) {\n-        this.operation = operation;\n-    }\n-\n-    public Operation getOperation() {\n-        return operation;\n-    }\n-\n-    public void setComparisonType(Class<?> comparisonType) {\n-        this.comparisonType = comparisonType;\n-    }\n-\n-    public Class<?> getComparisonType() {\n-        return comparisonType;\n-    }\n-\n-    public String getComparisonCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(comparisonType);\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDI5ODI1", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527429825", "createdAt": "2020-11-10T17:17:34Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNzozNFrOHwnDKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNzozNFrOHwnDKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMzQ4Mw==", "bodyText": "IRDConstant", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520733483", "createdAt": "2020-11-10T17:17:34Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ConstantNode.java", "diffHunk": "@@ -24,19 +24,7 @@\n \n public class ConstantNode extends ExpressionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Object constant;\n-\n-    public void setConstant(Object constant) {\n-        this.constant = constant;\n-    }\n-\n-    public Object getConstant() {\n-        return constant;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDMzNTI2", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527433526", "createdAt": "2020-11-10T17:21:40Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMTo0MVrOHwnOVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMTo0MVrOHwnOVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjM0MQ==", "bodyText": "Clean this up, temp var?", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520736341", "createdAt": "2020-11-10T17:21:41Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 480}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDMzNzQ2", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527433746", "createdAt": "2020-11-10T17:21:55Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMTo1NVrOHwnPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMTo1NVrOHwnPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjUyNA==", "bodyText": "Temp var?", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520736524", "createdAt": "2020-11-10T17:21:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 485}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDMzODUy", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527433852", "createdAt": "2020-11-10T17:22:02Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMjowMlrOHwnPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMjowMlrOHwnPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjU4NQ==", "bodyText": "temp var", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520736585", "createdAt": "2020-11-10T17:22:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                     }\n                 }\n \n                 irLeftConstantNode.attachDecoration(new IRDExpressionType(boolean.class));\n                 scope.accept(irLeftConstantNode);\n             } else if (operation == Operation.NE || operation == Operation.NER) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() != (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 497}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDM0Mzcz", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527434373", "createdAt": "2020-11-10T17:22:39Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMjozOVrOHwnQ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMjozOVrOHwnQ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNzAwOQ==", "bodyText": "temp var.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520737009", "createdAt": "2020-11-10T17:22:39Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                     }\n                 }\n \n                 irLeftConstantNode.attachDecoration(new IRDExpressionType(boolean.class));\n                 scope.accept(irLeftConstantNode);\n             } else if (operation == Operation.NE || operation == Operation.NER) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() != (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() != (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() != (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 504}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDYwMjA1", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527460205", "createdAt": "2020-11-10T17:53:02Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1MzowMlrOHwogCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1MzowMlrOHwogCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NzI1Nw==", "bodyText": "IRDDeclarationType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520757257", "createdAt": "2020-11-10T17:53:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationNode.java", "diffHunk": "@@ -37,32 +36,7 @@ public ExpressionNode getExpressionNode() {\n         return expressionNode;\n     }\n \n-    /* ---- end tree structure, begin node data ---- */\n-\n-    protected String name;\n-    protected Class<?> declarationType;\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setDeclarationType(Class<?> declarationType) {\n-        this.declarationType = declarationType;\n-    }\n-\n-    public Class<?> getDeclarationType() {\n-        return declarationType;\n-    }\n-\n-    public String getDeclarationCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(declarationType);\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- end tree structure, begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDYxNjg1", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527461685", "createdAt": "2020-11-10T17:54:48Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NDo0OFrOHwokpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NDo0OFrOHwokpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1ODQzNg==", "bodyText": "does this replace setDefReferenceEncoding?  If so add the Def prefix in there, Encoding is too general.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520758436", "createdAt": "2020-11-10T17:54:48Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/IRDecorations.java", "diffHunk": "@@ -74,15 +84,328 @@ public String toString() {\n \n     public static class IRDFlags extends IRDecoration<Integer> {\n \n-        public IRDFlags(Integer flags) {\n-            super(Objects.requireNonNull(flags));\n+        public IRDFlags(Integer value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRCAllEscape implements IRCondition {\n+\n+        private IRCAllEscape() {\n+\n+        }\n+    }\n+\n+    public static class IRDCast extends IRDecoration<PainlessCast> {\n+\n+        public IRDCast(PainlessCast value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDExceptionType extends IRDType {\n+\n+        public IRDExceptionType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDSymbol extends IRDecoration<String> {\n+\n+        public IRDSymbol(String value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDComparisonType extends IRDType {\n+\n+        public IRDComparisonType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDConstant extends IRDecoration<Object> {\n+\n+        public IRDConstant(Object value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDDeclarationType extends IRDType {\n+\n+        public IRDDeclarationType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDName extends IRDecoration<String> {\n+\n+        public IRDName(String value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDEncoding extends IRDecoration<String> {\n+\n+        public IRDEncoding(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDYzMDE3", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527463017", "createdAt": "2020-11-10T17:56:20Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NjoyMFrOHwoofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NjoyMFrOHwoofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTQyMQ==", "bodyText": "?", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520759421", "createdAt": "2020-11-10T17:56:20Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DoWhileLoopNode.java", "diffHunk": "@@ -22,7 +22,7 @@\n import org.elasticsearch.painless.Location;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class DoWhileLoopNode extends LoopNode {\n+public class DoWhileLoopNode extends ConditionNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDYzMzQ1", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527463345", "createdAt": "2020-11-10T17:56:44Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Njo0NVrOHwopfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Njo0NVrOHwopfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTY3Nw==", "bodyText": "IRDSize", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520759677", "createdAt": "2020-11-10T17:56:45Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "diffHunk": "@@ -24,28 +24,7 @@\n \n public class DupNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int size;\n-    private int depth;\n-\n-    public void setSize(int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDYzNDYx", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527463461", "createdAt": "2020-11-10T17:56:52Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Njo1MlrOHwop2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Njo1MlrOHwop2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTc3MQ==", "bodyText": "IRDDepth", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520759771", "createdAt": "2020-11-10T17:56:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "diffHunk": "@@ -24,28 +24,7 @@\n \n public class DupNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int size;\n-    private int depth;\n-\n-    public void setSize(int size) {\n-        this.size = size;\n-    }\n-\n-    public int getSize() {\n-        return size;\n-    }\n-\n-    public void setDepth(int depth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDYzOTI0", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527463924", "createdAt": "2020-11-10T17:57:28Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzoyOFrOHworPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzoyOFrOHworPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDEyNw==", "bodyText": "What's this?  It's missing now.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760127", "createdAt": "2020-11-10T17:57:28Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -464,8 +509,7 @@ protected ExpressionNode buildLoadStore(int accessDepth, Location location, bool\n                 // this is a compound assignment and requires and additional dup to re-access the prefix\n                 DupNode dupNode = new DupNode(location);\n                 dupNode.attachDecoration(new IRDExpressionType(void.class));\n-                dupNode.setSize(accessDepth);\n-                dupNode.setDepth(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 251}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDY0NDI2", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527464426", "createdAt": "2020-11-10T17:58:03Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODowM1rOHwosyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODowM1rOHwosyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDUyMQ==", "bodyText": "Too long.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760521", "createdAt": "2020-11-10T17:58:03Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -861,16 +931,18 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 if (userAssignmentNode.postIfRead()) {\n                     irDupNode = new DupNode(irLoadNode.getLocation());\n                     irDupNode.attachDecoration(irLoadNode.getDecoration(IRDExpressionType.class));\n-                    irDupNode.setSize(MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 474}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDY0NjUx", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527464651", "createdAt": "2020-11-10T17:58:18Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODoxOVrOHwotcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODoxOVrOHwotcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDY4OQ==", "bodyText": "Too long.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760689", "createdAt": "2020-11-10T17:58:19Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -861,16 +931,18 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 if (userAssignmentNode.postIfRead()) {\n                     irDupNode = new DupNode(irLoadNode.getLocation());\n                     irDupNode.attachDecoration(irLoadNode.getDecoration(IRDExpressionType.class));\n-                    irDupNode.setSize(MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize()));\n+                    irDupNode.attachDecoration(new IRDDepth(accessDepth));\n                     irDupNode.setChildNode(irLoadNode);\n                     irLoadNode = irDupNode;\n                 // the value is read from after the assignment (pre-increment/compound)\n                 } else {\n                     irDupNode = new DupNode(irStoreNode.getLocation());\n-                    irDupNode.attachDecoration(new IRDExpressionType(irStoreNode.getStoreType()));\n-                    irDupNode.setSize(MethodWriter.getType(irStoreNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDExpressionType(irStoreNode.getDecorationValue(IRDStoreType.class)));\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irStoreNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 486}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDY0Nzgy", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527464782", "createdAt": "2020-11-10T17:58:28Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODoyOFrOHwot3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODoyOFrOHwot3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDc5OA==", "bodyText": "Too long.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760798", "createdAt": "2020-11-10T17:58:28Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -909,16 +981,17 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n \n                 DupNode irDupNode = new DupNode(irValueNode.getLocation());\n                 irDupNode.attachDecoration(irValueNode.getDecoration(IRDExpressionType.class));\n-                irDupNode.setSize(MethodWriter.getType(irValueNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                irDupNode.setDepth(accessDepth);\n+                irDupNode.attachDecoration(new IRDSize(\n+                        MethodWriter.getType(irValueNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 507}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDcwMDU4", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527470058", "createdAt": "2020-11-10T18:04:51Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNDo1MlrOHwo9mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNDo1MlrOHwo9mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NDgyNQ==", "bodyText": "IRDModifiers", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520764825", "createdAt": "2020-11-10T18:04:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDcwMTc4", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527470178", "createdAt": "2020-11-10T18:05:00Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNTowMFrOHwo97A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNTowMFrOHwo97A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NDkwOA==", "bodyText": "IRDFieldType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520764908", "createdAt": "2020-11-10T18:05:00Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {\n-        this.modifiers = modifiers;\n-    }\n-\n-    public int getModifiers() {\n-        return modifiers;\n-    }\n-\n-    public void setFieldType(Class<?> fieldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDcxODc3", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527471877", "createdAt": "2020-11-10T18:07:12Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzoxM1rOHwpCzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzoxM1rOHwpCzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjE1OA==", "bodyText": "IRDName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766158", "createdAt": "2020-11-10T18:07:13Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {\n-        this.modifiers = modifiers;\n-    }\n-\n-    public int getModifiers() {\n-        return modifiers;\n-    }\n-\n-    public void setFieldType(Class<?> fieldType) {\n-        this.fieldType = fieldType;\n-    }\n-\n-    public Class<?> getFieldType() {\n-        return fieldType;\n-    }\n-\n-    public String getFieldCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(fieldType);\n-    }\n-\n-    public void setName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDcyMDgw", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527472080", "createdAt": "2020-11-10T18:07:30Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzozMFrOHwpDgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzozMFrOHwpDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjMzOQ==", "bodyText": "newline.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766339", "createdAt": "2020-11-10T18:07:30Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -553,7 +608,8 @@ public void visitDeclaration(DeclarationNode irDeclarationNode, WriteScope write\n         MethodWriter methodWriter = writeScope.getMethodWriter();\n         methodWriter.writeStatementOffset(irDeclarationNode.getLocation());\n \n-        Variable variable = writeScope.defineVariable(irDeclarationNode.getDeclarationType(), irDeclarationNode.getName());\n+        Variable variable = writeScope.defineVariable(\n+                irDeclarationNode.getDecorationValue(IRDDeclarationType.class), irDeclarationNode.getDecorationValue(IRDName.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 265}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDcyNDAw", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527472400", "createdAt": "2020-11-10T18:07:55Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzo1NlrOHwpEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzo1NlrOHwpEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjU4MQ==", "bodyText": "new lines.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766581", "createdAt": "2020-11-10T18:07:56Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -1537,7 +1597,8 @@ public void visitInvokeCallDef(InvokeCallDefNode irInvokeCallDefNode, WriteScope\n                 irInvokeCallDefNode.getDecorationValue(IRDExpressionType.class)), asmParameterTypes);\n \n         boostrapArguments.add(0, defCallRecipe.toString());\n-        methodWriter.invokeDefCall(irInvokeCallDefNode.getName(), methodType, DefBootstrap.METHOD_CALL, boostrapArguments.toArray());\n+        methodWriter.invokeDefCall(\n+                irInvokeCallDefNode.getDecorationValue(IRDName.class), methodType, DefBootstrap.METHOD_CALL, boostrapArguments.toArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 740}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDcyNzMx", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527472731", "createdAt": "2020-11-10T18:08:26Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowODoyNlrOHwpFgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowODoyNlrOHwpFgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2Njg1MA==", "bodyText": "IRDVariableType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766850", "createdAt": "2020-11-10T18:08:26Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc0MTc3", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527474177", "createdAt": "2020-11-10T18:10:16Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDoxNlrOHwpJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDoxNlrOHwpJ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2Nzk2Mg==", "bodyText": "IRDVariableName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520767962", "createdAt": "2020-11-10T18:10:16Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc0MzY3", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527474367", "createdAt": "2020-11-10T18:10:31Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDozMlrOHwpKgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDozMlrOHwpKgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODEyOA==", "bodyText": "IRDCast", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520768128", "createdAt": "2020-11-10T18:10:32Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc0NjYw", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527474660", "createdAt": "2020-11-10T18:10:55Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDo1NVrOHwpLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDo1NVrOHwpLYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODM1NQ==", "bodyText": "newlines.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520768355", "createdAt": "2020-11-10T18:10:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -664,8 +809,8 @@ public void visitCast(CastNode irCastNode, Consumer<ExpressionNode> scope) {\n         if (irCastNode.getChildNode() instanceof ConstantNode &&\n                 PainlessLookupUtility.isConstantType(irCastNode.getDecorationValue(IRDExpressionType.class))) {\n             ConstantNode irConstantNode = (ConstantNode)irCastNode.getChildNode();\n-            irConstantNode.setConstant(\n-                    AnalyzerCaster.constCast(irCastNode.getLocation(), irConstantNode.getConstant(), irCastNode.getCast()));\n+            irConstantNode.attachDecoration(new IRDConstant(AnalyzerCaster.constCast(irCastNode.getLocation(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 678}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc1MjMw", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527475230", "createdAt": "2020-11-10T18:11:40Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMTo0MFrOHwpNFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMTo0MFrOHwpNFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODc5MA==", "bodyText": "IRDArrayType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520768790", "createdAt": "2020-11-10T18:11:40Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc1Njk4", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527475698", "createdAt": "2020-11-10T18:12:18Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMjoxOFrOHwpOiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMjoxOFrOHwpOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTE2Mw==", "bodyText": "IRDArrayName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520769163", "createdAt": "2020-11-10T18:12:18Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc2MzI3", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527476327", "createdAt": "2020-11-10T18:13:10Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMzoxMFrOHwpQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMzoxMFrOHwpQSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTYxMQ==", "bodyText": "IRDIndexType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520769611", "createdAt": "2020-11-10T18:13:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc2OTU1", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527476955", "createdAt": "2020-11-10T18:14:02Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDowM1rOHwpSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDowM1rOHwpSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MDA3MA==", "bodyText": "IRDIndexName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520770070", "createdAt": "2020-11-10T18:14:03Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {\n-        this.indexType = indexType;\n-    }\n-\n-    public Class<?> getIndexType() {\n-        return indexType;\n-    }\n-\n-    public String getIndexCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(indexType);\n-    }\n-\n-    public void setIndexName(String indexName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc3NDYz", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527477463", "createdAt": "2020-11-10T18:14:42Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDo0M1rOHwpTvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDo0M1rOHwpTvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MDQ5NA==", "bodyText": "IRDIndexedType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520770494", "createdAt": "2020-11-10T18:14:43Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {\n-        this.indexType = indexType;\n-    }\n-\n-    public Class<?> getIndexType() {\n-        return indexType;\n-    }\n-\n-    public String getIndexCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(indexType);\n-    }\n-\n-    public void setIndexName(String indexName) {\n-        this.indexName = indexName;\n-    }\n-\n-    public String getIndexName() {\n-        return indexName;\n-    }\n-\n-    public void setIndexedType(Class<?> indexedType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc4OTIw", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527478920", "createdAt": "2020-11-10T18:16:38Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNjozOFrOHwpYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNjozOFrOHwpYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MTY0NQ==", "bodyText": "IRDVariableType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520771645", "createdAt": "2020-11-10T18:16:38Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc5NTA0", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527479504", "createdAt": "2020-11-10T18:17:21Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNzoyMVrOHwpaJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNzoyMVrOHwpaJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjEzMw==", "bodyText": "IRDVariableName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520772133", "createdAt": "2020-11-10T18:17:21Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDgwMDE4", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527480018", "createdAt": "2020-11-10T18:18:03Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxODowM1rOHwpbtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxODowM1rOHwpbtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjUzNA==", "bodyText": "IRDCast", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520772534", "createdAt": "2020-11-10T18:18:03Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDg4Njg5", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-527488689", "createdAt": "2020-11-10T18:29:58Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyOTo1OVrOHwp2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyOTo1OVrOHwp2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTMxMw==", "bodyText": "IRDIterableType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520779313", "createdAt": "2020-11-10T18:29:59Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setIteratorType(Class<?> iteratorType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDc3NTQ4", "url": "https://github.com/elastic/elasticsearch/pull/64825#pullrequestreview-528077548", "createdAt": "2020-11-11T11:11:35Z", "commit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e4b7d48e008c2ac41e6584a733ac8dc1aa42ea", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/36e4b7d48e008c2ac41e6584a733ac8dc1aa42ea", "committedDate": "2020-12-03T14:50:43Z", "message": "Merge branch 'master' into proto6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2bb70f7d55cb53339064301283bd2ca9cef7b09", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/d2bb70f7d55cb53339064301283bd2ca9cef7b09", "committedDate": "2020-12-03T17:17:40Z", "message": "partial response to pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2a0e4d25c04722c50892af271189912279fcd61", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/f2a0e4d25c04722c50892af271189912279fcd61", "committedDate": "2020-12-03T18:25:43Z", "message": "add brief description to each ir decoration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1749690f71be77eaf3a11885c3de952359d63b2", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1749690f71be77eaf3a11885c3de952359d63b2", "committedDate": "2020-12-03T18:53:18Z", "message": "Merge branch 'master' into proto6"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1105, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}