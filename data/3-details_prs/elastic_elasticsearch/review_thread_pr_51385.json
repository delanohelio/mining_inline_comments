{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NjEyNTkw", "number": 51385, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTowNjoxNVrODa1pPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoxOToyNlrODnx-jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDY4NDc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/IndexService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTowNjoxNVrOFh-8lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTowNjoxNVrOFh-8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3ODY0NQ==", "bodyText": "nit: remove change", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r371178645", "createdAt": "2020-01-27T11:06:15Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/IndexService.java", "diffHunk": "@@ -223,6 +226,8 @@ public IndexService(\n         this.globalCheckpointTask = new AsyncGlobalCheckpointTask(this);\n         this.retentionLeaseSyncTask = new AsyncRetentionLeaseSyncTask(this);\n         updateFsyncTaskIfNecessary();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a14a6e90d1a4c65910e287c9c2984ef96ef5a2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDcyNjI1OnYy", "diffSide": "RIGHT", "path": "docs/reference/query-dsl.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToyMDowOFrOFh_Ufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToyMDowOFrOFh_Ufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4NDc2Nw==", "bodyText": "nit: s/tp/to", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r371184767", "createdAt": "2020-01-27T11:20:08Z", "author": {"login": "jimczi"}, "path": "docs/reference/query-dsl.asciidoc", "diffHunk": "@@ -25,6 +25,14 @@ or to alter their behaviour (such as the\n \n Query clauses behave differently depending on whether they are used in\n <<query-filter-context,query context or filter context>>.\n+\n+[[query-dsl-disallow-slow]]\n+== Disallow slow queries\n+Certain queries like <<query-dsl-fuzzy-query,`fuzzy`>>, <<query-dsl-prefix-query,`prefix`>>,\n+<<query-dsl-regexp-query,`regexp`>> and <<query-dsl-bool-query,`wildcard`>> ,\n+that are usually slow performance can affect the cluster performance.\n+The execution of such queries can be prevented by setting the value of the `search.disallow_slow_queries`\n+setting to `true` (defaults tp `false`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a14a6e90d1a4c65910e287c9c2984ef96ef5a2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTkxMjQyOnYy", "diffSide": "RIGHT", "path": "docs/reference/query-dsl.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzoxMDoyNFrOFiKitQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzoxMDoyNFrOFiKitQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2ODYyOQ==", "bodyText": "I think we need to expand a bit more here on what qualifies as a slow query. This will help users understand why some queries are protected by this setting while other queries are not. And this will also help make a decision whether a query qualifies as slow or not as we add more queries in the future:\n\nQueries that need to do linear scans to identify matches:\n\nscript queries\n\n\nQueries that have a high up-front cost:\n\nfuzzy queries\nprefix queries without index_prefixes\nwildcard queries\nrange queries on keyword fields\njoin queries\nqueries on 6.x geo shapes\n\n\nQueries that may have a high per-document cost\n\npercolate queries", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r371368629", "createdAt": "2020-01-27T17:10:24Z", "author": {"login": "jpountz"}, "path": "docs/reference/query-dsl.asciidoc", "diffHunk": "@@ -25,6 +25,14 @@ or to alter their behaviour (such as the\n \n Query clauses behave differently depending on whether they are used in\n <<query-filter-context,query context or filter context>>.\n+\n+[[query-dsl-disallow-slow]]\n+== Disallow slow queries\n+Certain queries like <<query-dsl-fuzzy-query,`fuzzy`>>, <<query-dsl-prefix-query,`prefix`>>,\n+<<query-dsl-regexp-query,`regexp`>> and <<query-dsl-bool-query,`wildcard`>> ,\n+that are usually slow performance can affect the cluster performance.\n+The execution of such queries can be prevented by setting the value of the `search.disallow_slow_queries`\n+setting to `true` (defaults to `false`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "181d838fa68b788c3c09d96b5e419078ff836cd4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTAxOTY4OnYy", "diffSide": "RIGHT", "path": "docs/reference/query-dsl.asciidoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODozNToxNlrOFnGVlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxMjo1M1rOFoouVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MjYxMw==", "bodyText": "I was expecting this one to be fine since it finds matches using another query?", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376542613", "createdAt": "2020-02-07T18:35:16Z", "author": {"login": "jpountz"}, "path": "docs/reference/query-dsl.asciidoc", "diffHunk": "@@ -25,6 +25,27 @@ or to alter their behaviour (such as the\n \n Query clauses behave differently depending on whether they are used in\n <<query-filter-context,query context or filter context>>.\n+\n+[[query-dsl-allow-expensive-queries]]\n+Allow expensive queries::\n+Execution of certain types of queries have usually slow performance, which can affect the cluster performance.\n+Those queries can be categorised as follows:\n+* Queries that need to do linear scans to identify matches:\n+** <<query-dsl-script-query, `script queries`>>\n+** <<query-dsl-script-score-query, `script score queries`>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c5e1c755a8696bbb601738b80cca9421161fa3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1MzQ0Mg==", "bodyText": "It was a suggestion by @jimczi to also include those, since I guess the custom score calculation could decrease performance ?", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376553442", "createdAt": "2020-02-07T18:58:47Z", "author": {"login": "matriv"}, "path": "docs/reference/query-dsl.asciidoc", "diffHunk": "@@ -25,6 +25,27 @@ or to alter their behaviour (such as the\n \n Query clauses behave differently depending on whether they are used in\n <<query-filter-context,query context or filter context>>.\n+\n+[[query-dsl-allow-expensive-queries]]\n+Allow expensive queries::\n+Execution of certain types of queries have usually slow performance, which can affect the cluster performance.\n+Those queries can be categorised as follows:\n+* Queries that need to do linear scans to identify matches:\n+** <<query-dsl-script-query, `script queries`>>\n+** <<query-dsl-script-score-query, `script score queries`>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MjYxMw=="}, "originalCommit": {"oid": "d1c5e1c755a8696bbb601738b80cca9421161fa3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NDU4Mg==", "bodyText": "I can see how this can be true with a complex score function. Let's move it to the Queries that may have a high per-document cost section, since it's about scoring, not matching?", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r378154582", "createdAt": "2020-02-12T10:12:53Z", "author": {"login": "jpountz"}, "path": "docs/reference/query-dsl.asciidoc", "diffHunk": "@@ -25,6 +25,27 @@ or to alter their behaviour (such as the\n \n Query clauses behave differently depending on whether they are used in\n <<query-filter-context,query context or filter context>>.\n+\n+[[query-dsl-allow-expensive-queries]]\n+Allow expensive queries::\n+Execution of certain types of queries have usually slow performance, which can affect the cluster performance.\n+Those queries can be categorised as follows:\n+* Queries that need to do linear scans to identify matches:\n+** <<query-dsl-script-query, `script queries`>>\n+** <<query-dsl-script-score-query, `script score queries`>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MjYxMw=="}, "originalCommit": {"oid": "d1c5e1c755a8696bbb601738b80cca9421161fa3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTAyNjAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/IndexModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODozNzozNVrOFnGZdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTowOTo0N1rOFnKX7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MzYwNw==", "bodyText": "can't we have tests call the other constructor instead and pass ()->true?", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376543607", "createdAt": "2020-02-07T18:37:35Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/IndexModule.java", "diffHunk": "@@ -144,13 +145,24 @@ public IndexModule(\n             final IndexSettings indexSettings,\n             final AnalysisRegistry analysisRegistry,\n             final EngineFactory engineFactory,\n-            final Map<String, IndexStorePlugin.DirectoryFactory> directoryFactories) {\n+            final Map<String, IndexStorePlugin.DirectoryFactory> directoryFactories,\n+            final BooleanSupplier isAllowExpensiveQueries) {\n         this.indexSettings = indexSettings;\n         this.analysisRegistry = analysisRegistry;\n         this.engineFactory = Objects.requireNonNull(engineFactory);\n         this.searchOperationListeners.add(new SearchSlowLog(indexSettings));\n         this.indexOperationListeners.add(new IndexingSlowLog(indexSettings));\n         this.directoryFactories = Collections.unmodifiableMap(directoryFactories);\n+        this.isAllowExpensiveQueries = isAllowExpensiveQueries;\n+    }\n+\n+    // For testing\n+    IndexModule(\n+            final IndexSettings indexSettings,\n+            final AnalysisRegistry analysisRegistry,\n+            final EngineFactory engineFactory,\n+            final Map<String, IndexStorePlugin.DirectoryFactory> directoryFactories) {\n+        this(indexSettings, analysisRegistry, engineFactory, directoryFactories, () -> true);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c5e1c755a8696bbb601738b80cca9421161fa3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwODc0OA==", "bodyText": "Yep, that's easy to do.", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376608748", "createdAt": "2020-02-07T21:09:47Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/index/IndexModule.java", "diffHunk": "@@ -144,13 +145,24 @@ public IndexModule(\n             final IndexSettings indexSettings,\n             final AnalysisRegistry analysisRegistry,\n             final EngineFactory engineFactory,\n-            final Map<String, IndexStorePlugin.DirectoryFactory> directoryFactories) {\n+            final Map<String, IndexStorePlugin.DirectoryFactory> directoryFactories,\n+            final BooleanSupplier isAllowExpensiveQueries) {\n         this.indexSettings = indexSettings;\n         this.analysisRegistry = analysisRegistry;\n         this.engineFactory = Objects.requireNonNull(engineFactory);\n         this.searchOperationListeners.add(new SearchSlowLog(indexSettings));\n         this.indexOperationListeners.add(new IndexingSlowLog(indexSettings));\n         this.directoryFactories = Collections.unmodifiableMap(directoryFactories);\n+        this.isAllowExpensiveQueries = isAllowExpensiveQueries;\n+    }\n+\n+    // For testing\n+    IndexModule(\n+            final IndexSettings indexSettings,\n+            final AnalysisRegistry analysisRegistry,\n+            final EngineFactory engineFactory,\n+            final Map<String, IndexStorePlugin.DirectoryFactory> directoryFactories) {\n+        this(indexSettings, analysisRegistry, engineFactory, directoryFactories, () -> true);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MzYwNw=="}, "originalCommit": {"oid": "d1c5e1c755a8696bbb601738b80cca9421161fa3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTAyOTM0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODozODozNFrOFnGbZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxMDoyNVrOFnKYxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NDEwMA==", "bodyText": "can we avoid duplicating constructors?", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376544100", "createdAt": "2020-02-07T18:38:34Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -92,12 +93,35 @@\n \n     private final Index fullyQualifiedIndex;\n     private final Predicate<String> indexNameMatcher;\n+    private final BooleanSupplier isAllowExpensiveQueries;\n \n     private final Map<String, Query> namedQueries = new HashMap<>();\n     private boolean allowUnmappedFields;\n     private boolean mapUnmappedFieldAsString;\n     private NestedScope nestedScope;\n \n+    public QueryShardContext(int shardId,\n+                             IndexSettings indexSettings,\n+                             BigArrays bigArrays,\n+                             BitsetFilterCache bitsetFilterCache,\n+                             BiFunction<MappedFieldType, String, IndexFieldData<?>> indexFieldDataLookup,\n+                             MapperService mapperService,\n+                             SimilarityService similarityService,\n+                             ScriptService scriptService,\n+                             NamedXContentRegistry xContentRegistry,\n+                             NamedWriteableRegistry namedWriteableRegistry,\n+                             Client client,\n+                             IndexSearcher searcher,\n+                             LongSupplier nowInMillis,\n+                             String clusterAlias,\n+                             Predicate<String> indexNameMatcher,\n+                             BooleanSupplier isAllowExpensiveQueries) {\n+        this(shardId, indexSettings, bigArrays, bitsetFilterCache, indexFieldDataLookup, mapperService, similarityService,\n+                scriptService, xContentRegistry, namedWriteableRegistry, client, searcher, nowInMillis, indexNameMatcher,\n+                new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexSettings.getIndex().getName()),\n+                        indexSettings.getIndex().getUUID()), isAllowExpensiveQueries);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c5e1c755a8696bbb601738b80cca9421161fa3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwODk2NQ==", "bodyText": "There are ~20 usages of this in tests, so no big deal, I can remove the constructor.", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376608965", "createdAt": "2020-02-07T21:10:25Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -92,12 +93,35 @@\n \n     private final Index fullyQualifiedIndex;\n     private final Predicate<String> indexNameMatcher;\n+    private final BooleanSupplier isAllowExpensiveQueries;\n \n     private final Map<String, Query> namedQueries = new HashMap<>();\n     private boolean allowUnmappedFields;\n     private boolean mapUnmappedFieldAsString;\n     private NestedScope nestedScope;\n \n+    public QueryShardContext(int shardId,\n+                             IndexSettings indexSettings,\n+                             BigArrays bigArrays,\n+                             BitsetFilterCache bitsetFilterCache,\n+                             BiFunction<MappedFieldType, String, IndexFieldData<?>> indexFieldDataLookup,\n+                             MapperService mapperService,\n+                             SimilarityService similarityService,\n+                             ScriptService scriptService,\n+                             NamedXContentRegistry xContentRegistry,\n+                             NamedWriteableRegistry namedWriteableRegistry,\n+                             Client client,\n+                             IndexSearcher searcher,\n+                             LongSupplier nowInMillis,\n+                             String clusterAlias,\n+                             Predicate<String> indexNameMatcher,\n+                             BooleanSupplier isAllowExpensiveQueries) {\n+        this(shardId, indexSettings, bigArrays, bitsetFilterCache, indexFieldDataLookup, mapperService, similarityService,\n+                scriptService, xContentRegistry, namedWriteableRegistry, client, searcher, nowInMillis, indexNameMatcher,\n+                new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexSettings.getIndex().getName()),\n+                        indexSettings.getIndex().getUUID()), isAllowExpensiveQueries);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NDEwMA=="}, "originalCommit": {"oid": "d1c5e1c755a8696bbb601738b80cca9421161fa3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjA4Mzk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozOToyNVrOFnhRwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozOToyNVrOFnhRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4NDAwMA==", "bodyText": "Can this just be allowExpensiveQueries()?  Otherwise it reads very strangely.", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376984000", "createdAt": "2020-02-10T10:39:25Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -192,6 +197,10 @@ public BitSetProducer bitsetFilter(Query filter) {\n         return bitsetFilterCache.getBitSetProducer(filter);\n     }\n \n+    public boolean isAllowExpensiveQueries() {\n+        return isAllowExpensiveQueries.getAsBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fdab2b9ffc0fba7a73f77bb1b01201f2380fd73"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjE1NjgzOnYy", "diffSide": "RIGHT", "path": "docs/reference/query-dsl.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMTowMTozM1rOFnh99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMTowMTozM1rOFnh99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5NTMxNg==", "bodyText": "Certain types of queries will generally execute slowly due to the way they are implemented, which can affect the stability of your cluster.", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376995316", "createdAt": "2020-02-10T11:01:33Z", "author": {"login": "romseygeek"}, "path": "docs/reference/query-dsl.asciidoc", "diffHunk": "@@ -25,6 +25,27 @@ or to alter their behaviour (such as the\n \n Query clauses behave differently depending on whether they are used in\n <<query-filter-context,query context or filter context>>.\n+\n+[[query-dsl-allow-expensive-queries]]\n+Allow expensive queries::\n+Execution of certain types of queries have usually slow performance, which can affect the cluster performance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fdab2b9ffc0fba7a73f77bb1b01201f2380fd73"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjE2MzIxOnYy", "diffSide": "RIGHT", "path": "docs/reference/query-dsl/prefix-query.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMTowMzo0MlrOFniCBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMTowMzo0MlrOFniCBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5NjM1Nw==", "bodyText": "However, if <<index-prefixes, index_prefixes>> are enabled, an optimised query is built which is not considered slow, and will be executed in spite of this setting.", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r376996357", "createdAt": "2020-02-10T11:03:42Z", "author": {"login": "romseygeek"}, "path": "docs/reference/query-dsl/prefix-query.asciidoc", "diffHunk": "@@ -64,4 +64,12 @@ GET /_search\n You can speed up prefix queries using the <<index-prefixes,`index_prefixes`>>\n mapping parameter. If enabled, {es} indexes prefixes between 2 and 5\n characters in a separate field. This lets {es} run prefix queries more\n-efficiently at the cost of a larger index.\n\\ No newline at end of file\n+efficiently at the cost of a larger index.\n+\n+[[prefix-query-allow-expensive-queries]]\n+===== Allow expensive queries\n+Prefix queries will not be executed if <<query-dsl-allow-expensive-queries, `search.allow_expensive_queries`>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fdab2b9ffc0fba7a73f77bb1b01201f2380fd73"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDM5ODg0OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/320_disallow_queries.yml", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoxOToyNlrOF1-X8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDo0Nzo1NFrOF1_Ntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MDc4NQ==", "bodyText": "heya @matriv I think this assertion is problematic, it works with the java runner due to the semantics of HashMap.get , but it may fail with test runners written in other languages. I believe that the setting is not returned, is it? I was chatting to @karmi about this and the proper way to do this null check would be is_false: search.allow_expensive_queries . Would you mind please changing this?", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r392140785", "createdAt": "2020-03-13T10:19:26Z", "author": {"login": "javanna"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/320_disallow_queries.yml", "diffHunk": "@@ -0,0 +1,330 @@\n+---\n+setup:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      indices.create:\n+        index: test\n+        body:\n+          mappings:\n+            properties:\n+              text:\n+                type: text\n+                analyzer: standard\n+                fields:\n+                  raw:\n+                    type: keyword\n+              nested1:\n+                type: nested\n+\n+  - do:\n+      bulk:\n+        refresh: true\n+        body:\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"1\"}}'\n+          - '{\"text\" : \"Some like it hot, some like it cold\", \"nested1\": [{\"foo\": \"bar1\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"2\"}}'\n+          - '{\"text\" : \"Its cold outside, theres no kind of atmosphere\", \"nested1\": [{\"foo\": \"bar2\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"3\"}}'\n+          - '{\"text\" : \"Baby its cold there outside\", \"nested1\": [{\"foo\": \"bar3\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"4\"}}'\n+          - '{\"text\" : \"Outside it is cold and wet\", \"nested1\": [{\"foo\": \"bar4\"}]}'\n+\n+---\n+teardown:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      cluster.put_settings:\n+        body:\n+          transient:\n+            search.allow_expensive_queries: null\n+\n+---\n+\"Test disallow expensive queries\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  ### Check for initial setting = null -> false\n+  - do:\n+      cluster.get_settings:\n+        flat_settings: true\n+\n+  - match: {search.allow_expensive_queries: null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4774178122ea936043b58e11d295b017ec100a3d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0Mzk0Mg==", "bodyText": "To clarify, this fails in the Go client runner, what works is is_false: { search.allow_expensive_queries: null }.", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r392143942", "createdAt": "2020-03-13T10:25:45Z", "author": {"login": "karmi"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/320_disallow_queries.yml", "diffHunk": "@@ -0,0 +1,330 @@\n+---\n+setup:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      indices.create:\n+        index: test\n+        body:\n+          mappings:\n+            properties:\n+              text:\n+                type: text\n+                analyzer: standard\n+                fields:\n+                  raw:\n+                    type: keyword\n+              nested1:\n+                type: nested\n+\n+  - do:\n+      bulk:\n+        refresh: true\n+        body:\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"1\"}}'\n+          - '{\"text\" : \"Some like it hot, some like it cold\", \"nested1\": [{\"foo\": \"bar1\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"2\"}}'\n+          - '{\"text\" : \"Its cold outside, theres no kind of atmosphere\", \"nested1\": [{\"foo\": \"bar2\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"3\"}}'\n+          - '{\"text\" : \"Baby its cold there outside\", \"nested1\": [{\"foo\": \"bar3\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"4\"}}'\n+          - '{\"text\" : \"Outside it is cold and wet\", \"nested1\": [{\"foo\": \"bar4\"}]}'\n+\n+---\n+teardown:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      cluster.put_settings:\n+        body:\n+          transient:\n+            search.allow_expensive_queries: null\n+\n+---\n+\"Test disallow expensive queries\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  ### Check for initial setting = null -> false\n+  - do:\n+      cluster.get_settings:\n+        flat_settings: true\n+\n+  - match: {search.allow_expensive_queries: null}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MDc4NQ=="}, "originalCommit": {"oid": "4774178122ea936043b58e11d295b017ec100a3d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTMyMA==", "bodyText": "does is_false accept field values like match? I thought the right syntax would be is_false: search.allow_expensive_queries", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r392145320", "createdAt": "2020-03-13T10:28:19Z", "author": {"login": "javanna"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/320_disallow_queries.yml", "diffHunk": "@@ -0,0 +1,330 @@\n+---\n+setup:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      indices.create:\n+        index: test\n+        body:\n+          mappings:\n+            properties:\n+              text:\n+                type: text\n+                analyzer: standard\n+                fields:\n+                  raw:\n+                    type: keyword\n+              nested1:\n+                type: nested\n+\n+  - do:\n+      bulk:\n+        refresh: true\n+        body:\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"1\"}}'\n+          - '{\"text\" : \"Some like it hot, some like it cold\", \"nested1\": [{\"foo\": \"bar1\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"2\"}}'\n+          - '{\"text\" : \"Its cold outside, theres no kind of atmosphere\", \"nested1\": [{\"foo\": \"bar2\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"3\"}}'\n+          - '{\"text\" : \"Baby its cold there outside\", \"nested1\": [{\"foo\": \"bar3\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"4\"}}'\n+          - '{\"text\" : \"Outside it is cold and wet\", \"nested1\": [{\"foo\": \"bar4\"}]}'\n+\n+---\n+teardown:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      cluster.put_settings:\n+        body:\n+          transient:\n+            search.allow_expensive_queries: null\n+\n+---\n+\"Test disallow expensive queries\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  ### Check for initial setting = null -> false\n+  - do:\n+      cluster.get_settings:\n+        flat_settings: true\n+\n+  - match: {search.allow_expensive_queries: null}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MDc4NQ=="}, "originalCommit": {"oid": "4774178122ea936043b58e11d295b017ec100a3d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTQwMA==", "bodyText": "is_false: search.allow_expensive_queries works with Java.\nis_false: { search.allow_expensive_queries: null }doesn't and also seems semantically wrong?", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r392149400", "createdAt": "2020-03-13T10:36:47Z", "author": {"login": "matriv"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/320_disallow_queries.yml", "diffHunk": "@@ -0,0 +1,330 @@\n+---\n+setup:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      indices.create:\n+        index: test\n+        body:\n+          mappings:\n+            properties:\n+              text:\n+                type: text\n+                analyzer: standard\n+                fields:\n+                  raw:\n+                    type: keyword\n+              nested1:\n+                type: nested\n+\n+  - do:\n+      bulk:\n+        refresh: true\n+        body:\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"1\"}}'\n+          - '{\"text\" : \"Some like it hot, some like it cold\", \"nested1\": [{\"foo\": \"bar1\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"2\"}}'\n+          - '{\"text\" : \"Its cold outside, theres no kind of atmosphere\", \"nested1\": [{\"foo\": \"bar2\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"3\"}}'\n+          - '{\"text\" : \"Baby its cold there outside\", \"nested1\": [{\"foo\": \"bar3\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"4\"}}'\n+          - '{\"text\" : \"Outside it is cold and wet\", \"nested1\": [{\"foo\": \"bar4\"}]}'\n+\n+---\n+teardown:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      cluster.put_settings:\n+        body:\n+          transient:\n+            search.allow_expensive_queries: null\n+\n+---\n+\"Test disallow expensive queries\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  ### Check for initial setting = null -> false\n+  - do:\n+      cluster.get_settings:\n+        flat_settings: true\n+\n+  - match: {search.allow_expensive_queries: null}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MDc4NQ=="}, "originalCommit": {"oid": "4774178122ea936043b58e11d295b017ec100a3d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NDU1MQ==", "bodyText": "My bad, sorry \u2014 is_false: search.allow_expensive_queries is correct.", "url": "https://github.com/elastic/elasticsearch/pull/51385#discussion_r392154551", "createdAt": "2020-03-13T10:47:54Z", "author": {"login": "karmi"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/320_disallow_queries.yml", "diffHunk": "@@ -0,0 +1,330 @@\n+---\n+setup:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      indices.create:\n+        index: test\n+        body:\n+          mappings:\n+            properties:\n+              text:\n+                type: text\n+                analyzer: standard\n+                fields:\n+                  raw:\n+                    type: keyword\n+              nested1:\n+                type: nested\n+\n+  - do:\n+      bulk:\n+        refresh: true\n+        body:\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"1\"}}'\n+          - '{\"text\" : \"Some like it hot, some like it cold\", \"nested1\": [{\"foo\": \"bar1\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"2\"}}'\n+          - '{\"text\" : \"Its cold outside, theres no kind of atmosphere\", \"nested1\": [{\"foo\": \"bar2\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"3\"}}'\n+          - '{\"text\" : \"Baby its cold there outside\", \"nested1\": [{\"foo\": \"bar3\"}]}'\n+          - '{\"index\": {\"_index\": \"test\", \"_id\": \"4\"}}'\n+          - '{\"text\" : \"Outside it is cold and wet\", \"nested1\": [{\"foo\": \"bar4\"}]}'\n+\n+---\n+teardown:\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  - do:\n+      cluster.put_settings:\n+        body:\n+          transient:\n+            search.allow_expensive_queries: null\n+\n+---\n+\"Test disallow expensive queries\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: \"implemented in 8.0.0\"\n+\n+  ### Check for initial setting = null -> false\n+  - do:\n+      cluster.get_settings:\n+        flat_settings: true\n+\n+  - match: {search.allow_expensive_queries: null}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MDc4NQ=="}, "originalCommit": {"oid": "4774178122ea936043b58e11d295b017ec100a3d"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4358, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}