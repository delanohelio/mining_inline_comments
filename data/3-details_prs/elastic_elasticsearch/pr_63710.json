{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzIzNzc3", "number": 63710, "title": "SQL: Fix incorrect parameter resolution", "bodyText": "For example in the query SELECT ? FROM test with a single integer\n(value = 100) parameter the ? turns into an Alias (child=Literal(100),name=\"?\") or if we try to print it back into SQL, SELECT 100  as ? FROM test.\nA problem arises when multiple ? is in the query with the same type.\nFor example the SELECT ?, ? FROM test query with integer parameters\n(value=100, 200) will turn into SELECT 100 as ?, 200 as ? FROM test.\nThis commit changes the way aliases are assigned: the first unaliased\nparameter will stay ?, but from the 2nd unaliased parameter literal\na counter will be added to the alias (?2, ?3, ...).\nCallout: This will introduce a change for the users: a query with\nmultiple unaliased parameters (but each parameter with different\ntypes) successfully executed before and returned the results with\nmultiple ? columns (although must have accessed via index from the\nresult set instead of alias). Now all, but the first column will have a\nsuffix ( ? -> ?n).\nFix #56013", "createdAt": "2020-10-15T00:16:21Z", "url": "https://github.com/elastic/elasticsearch/pull/63710", "merged": true, "mergeCommit": {"oid": "620cd16011dfef82ef3412565b4e9939213d89e3"}, "closed": true, "closedAt": "2020-11-04T21:37:13Z", "author": {"login": "palesz"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSmX7YAH2gAyNTAzNzIzNzc3OjYyMGQ4YjQ1OGI1ZGU0OTU1ZGM2YmEwMzIxMTliZDJiOGU5MjEyZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZPwUtAH2gAyNTAzNzIzNzc3OjYyYTJmOTBjYjYwYWVlYzc4MjM2ZjlkZjk1NTBiNDlkYmJkOWZkMzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "620d8b458b5de4955dc6ba032119bd2b8e9212f5", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/620d8b458b5de4955dc6ba032119bd2b8e9212f5", "committedDate": "2020-10-15T00:10:24Z", "message": "SQL: Fix incorrect parameter resolution\n\nParameters in the SQL query marked as `?` turn into an `UnresolvedAlias`\nin the parsed tree, aliasing (without a name) the `Literal` representing\nthe passed in parameter value.\n\nFor example in the query `SELECT ? FROM test` with a single integer\n(value = 100) parameter the ? turns into an `UnresolvedAlias\n(child=Literal(100))` or if we try to print it back into SQL, `SELECT\n100 as ? FROM test`.\n\nA problem arises when multiple `?` is in the query, since the `SELECT ?,\n? FROM test` query with integer parameters (value=100, 200) will turn\ninto `SELECT 100 as ?, 200 as ? FROM test`. You guessed it correctly,\nname conflict is the underlying issue.\n\nThe `UnresolvedAlias`es will be assigned the same name and are turned\ninto `Alias(name=\"?\")` objects by the `Analyzer`.\nThe problem ultimately comes down to the fact that `Alias`es in the\n`QueryFolder`. The `Alias`es eventually put into an `AttributeMap`,\nbut not directly. First the collection of `Alias`es gets turned into a\n`java.util.LinkedHashMap<Attribute, Expression>` which later get's\nturned an `AttributeMap`. The key in the map gets created using `Alias\n.toAttribute()`, but the `LinkedHashMap<>` uses the `Attribute.equals()`\n and `Attribute.hashCode()` methods which only take into the account the\n`name` field of the attribute vs `Attribute.semanticEquals()` and\n`Attribute.semanticHash()` that take into account the `name` and `id`\nfields (used by the `AttributeMap`).\nThe name-based equality check in the `LinkedHashMap` essentially\nde-duplicates the `Alias`es based on the name and that is why one of the\nattributes cannot be resolved (resolution uses both `name` and `id`).\n\nThis fix deprecates the `AttributeMap(Map)` constructor, makes sure that\nthe `AttributeMap`s are populated from `Stream`s or `Iterable`s\ndirectly, so no deduplication happens based on the names of the\n`Attribute`s.\n\nNote: The `SELECT 100 as ?, 200 as ? FROM test` query will result in two\ncolumns named as `?` in the results. Alternatively I could have just\ngenerated different names for the `UnresolvedAlias` objects, but that\nwould just hide the above mentioned bug in the code.\n\nFix #56013"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40254dc1d530031a17807c971c84102d8d389c59", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/40254dc1d530031a17807c971c84102d8d389c59", "committedDate": "2020-10-15T00:21:00Z", "message": "Import fixes (checkstyle errors)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d0568e008441aab892921705269325b23a80e5d", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/4d0568e008441aab892921705269325b23a80e5d", "committedDate": "2020-10-27T20:54:17Z", "message": "Revert of the previous changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db8ad10afa59bb41f8812941724f190f2da38f1e", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/db8ad10afa59bb41f8812941724f190f2da38f1e", "committedDate": "2020-10-27T20:55:09Z", "message": "Merge remote-tracking branch 'origin/master' into fix/56013"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03e9a75458a09086a5e7d7ea1e8cb852caea2135", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/03e9a75458a09086a5e7d7ea1e8cb852caea2135", "committedDate": "2020-10-27T21:10:51Z", "message": "SQL: Fix incorrect parameter resolution\n\nFor example in the query `SELECT ? FROM test` with a single integer\n(value = 100) parameter the ? turns into an `UnresolvedAlias\n(child=Literal(100))` or if we try to print it back into SQL, `SELECT\n100 as ? FROM test`.\n\nA problem arises when multiple `?` is in the query with the same type.\nFor example the `SELECT ?, ? FROM test` query with integer parameters\n(value=100, 200) will turn into `SELECT 100 as ?, 200 as ? FROM test`.\n\nThis commit changes the way aliases are assigned: the first unaliased\nparameter will stay `?`, but from the 2nd unaliased parameter literal\na counter will be added to the alias (`?2`, `?3`, ...).\n\nCallout: This will introduce a change for the users: a query with\nmultiple unaliased parameters (but each parameter with different\ntypes) successfully executed before and returned the results with\nmultiple `?` columns (although must have accessed via index from the\nresult set instead of alias).\n\nFix #56013"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzY2MzE2", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-518366316", "createdAt": "2020-10-28T06:56:14Z", "commit": {"oid": "03e9a75458a09086a5e7d7ea1e8cb852caea2135"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae10b2cc250d7449b1389f0fabcbad477834e4e", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/7ae10b2cc250d7449b1389f0fabcbad477834e4e", "committedDate": "2020-10-28T20:34:04Z", "message": "Moved down the modifications into the `SqlParser`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61461d7c52872dceac82dc4318f0142f79a5fbc", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/b61461d7c52872dceac82dc4318f0142f79a5fbc", "committedDate": "2020-10-28T21:53:57Z", "message": "Refactor: using SqlParameter instead of Tuple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d734d9e209731aff1ab4bd9dd0a5798db4d85b", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/94d734d9e209731aff1ab4bd9dd0a5798db4d85b", "committedDate": "2020-10-28T21:53:58Z", "message": "Switched to the faster implementation of the parameter lookup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/c205e9d2d14405b17b26f111a0e5263bd70e1fb9", "committedDate": "2020-10-28T22:00:52Z", "message": "Doc fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzU0MjQ5", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-519354249", "createdAt": "2020-10-29T06:05:53Z", "commit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNTo1NFrOHqMSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjoxMjo1OFrOHqMhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMzQ2NQ==", "bodyText": "Please revert. The PRs should contain the minimal number of changes needed and not affect the rest of the code", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r514003465", "createdAt": "2020-10-29T06:05:54Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java", "diffHunk": "@@ -956,8 +956,7 @@ private boolean hasUnresolvedAliases(List<? extends NamedExpression> expressions\n \n         private List<NamedExpression> assignAliases(List<? extends NamedExpression> exprs) {\n             List<NamedExpression> newExpr = new ArrayList<>(exprs.size());\n-            for (int i = 0; i < exprs.size(); i++) {\n-                NamedExpression expr = exprs.get(i);\n+            for (NamedExpression expr : exprs) {\n                 NamedExpression transformed = (NamedExpression) expr.transformUp(ua -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNjcxNA==", "bodyText": "Incorrect style (use == false instead of !).\nI'm not sure what this check tries to prevent...", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r514006714", "createdAt": "2020-10-29T06:11:44Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java", "diffHunk": "@@ -767,6 +777,16 @@ private SqlTypedParamValue param(TerminalNode node) {\n         return params.get(token);\n     }\n \n+    private SqlParser.SqlParameter param(ParserRuleContext ctx) {\n+        if (!ctx.getStart().equals(ctx.getStop())) {\n+            throw new ParsingException(source(ctx), \"Single PARAM literal expected\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNzMyMA==", "bodyText": "incorrect formatting paramIndex + 1", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r514007320", "createdAt": "2020-10-29T06:12:58Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlParser.java", "diffHunk": "@@ -240,26 +261,28 @@ public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int\n     private static class ParametrizedTokenSource implements TokenSource {\n \n         private TokenSource delegate;\n-        private Map<Token, SqlTypedParamValue> paramTokens;\n-        private int param;\n+        private Map<Token, SqlParameter> paramTokens;\n+        private int paramIndex;\n         private List<SqlTypedParamValue> params;\n \n-        ParametrizedTokenSource(TokenSource delegate, Map<Token, SqlTypedParamValue> paramTokens, List<SqlTypedParamValue> params) {\n+        ParametrizedTokenSource(TokenSource delegate,\n+                                Map<Token, SqlParameter> paramTokens,\n+                                List<SqlTypedParamValue> params) {\n             this.delegate = delegate;\n             this.paramTokens = paramTokens;\n             this.params = params;\n-            param = 0;\n+            paramIndex = 0;\n         }\n \n         @Override\n         public Token nextToken() {\n             Token token = delegate.nextToken();\n             if (token.getType() == SqlBaseLexer.PARAM) {\n-                if (param >= params.size()) {\n+                if (paramIndex >= params.size()) {\n                     throw new ParsingException(\"Not enough actual parameters {} \", params.size());\n                 }\n-                paramTokens.put(token, params.get(param));\n-                param++;\n+                paramTokens.put(token, new SqlParameter(paramIndex+1, params.get(paramIndex)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NjkzMTMw", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-519693130", "createdAt": "2020-10-29T13:58:48Z", "commit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo1ODo0OFrOHqdHdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo1ODo0OFrOHqdHdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3OTI4Nw==", "bodyText": "In *QL (and Elasticsearch) codebase, the general style for these assertions is either assertThat(X, instanceof(Y)) (more in ES) or assertTrue(X instanceof Y) (more in *QL). Mockito isA seems to be used in the x-pack Security plugin only. I'd suggest going with a *QL-wide consistent approach and use the assertTrue variant, if it's not too much trouble.", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r514279287", "createdAt": "2020-10-29T13:58:48Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/ParamLiteralTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.parser;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.expression.Alias;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.NamedExpression;\n+import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.LessThan;\n+import org.elasticsearch.xpack.ql.plan.logical.Filter;\n+import org.elasticsearch.xpack.ql.plan.logical.LogicalPlan;\n+import org.elasticsearch.xpack.ql.plan.logical.Project;\n+import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;\n+\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.ql.type.DateUtils.UTC;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.isA;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class ParamLiteralTests extends ESTestCase {\n+\n+    private final SqlParser parser = new SqlParser();\n+\n+    private LogicalPlan parse(String sql, SqlTypedParamValue... parameters) {\n+        return parser.createStatement(sql, List.of(parameters), UTC);\n+    }\n+\n+    public void testMultipleParamLiteralsWithUnresolvedAliases() {\n+        LogicalPlan logicalPlan = parse(\"SELECT ?, ? FROM test\",\n+            new SqlTypedParamValue(\"integer\", 100),\n+            new SqlTypedParamValue(\"integer\", 200)\n+        );\n+        List<? extends NamedExpression> projections = ((Project) logicalPlan.children().get(0)).projections();\n+        assertThat(projections, everyItem(isA(Alias.class)));\n+        assertThat(projections.get(0).toString(), startsWith(\"100 AS ?1#\"));\n+        assertThat(projections.get(1).toString(), startsWith(\"200 AS ?2#\"));\n+    }\n+\n+    public void testMultipleParamLiteralsWithUnresolvedAliasesAndWhereClause() {\n+        LogicalPlan logicalPlan = parse(\"SELECT ?, ? FROM test WHERE 1 < ?\",\n+            new SqlTypedParamValue(\"integer\", 100),\n+            new SqlTypedParamValue(\"integer\", 200),\n+            new SqlTypedParamValue(\"integer\", 300)\n+        );\n+        Project project = (Project) logicalPlan.children().get(0);\n+        List<? extends NamedExpression> projections = project.projections();\n+        assertThat(projections, everyItem(isA(Alias.class)));\n+        assertThat(projections.get(0).toString(), startsWith(\"100 AS ?1#\"));\n+        assertThat(projections.get(1).toString(), startsWith(\"200 AS ?2#\"));\n+        assertThat(project.children().get(0), isA(Filter.class));\n+        Filter filter = (Filter) project.children().get(0);\n+        assertThat(filter.condition(), isA(LessThan.class));\n+        LessThan condition = (LessThan) filter.condition();\n+        assertThat(condition.left(), isA(Literal.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzQ0MjY5", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-519744269", "createdAt": "2020-10-29T14:46:34Z", "commit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0NjozNFrOHqfYXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0NjozNFrOHqfYXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxNjM4MQ==", "bodyText": "or assertEquals(Literal.class, condition.left().getClass()", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r514316381", "createdAt": "2020-10-29T14:46:34Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/parser/ParamLiteralTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.parser;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.expression.Alias;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.NamedExpression;\n+import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.LessThan;\n+import org.elasticsearch.xpack.ql.plan.logical.Filter;\n+import org.elasticsearch.xpack.ql.plan.logical.LogicalPlan;\n+import org.elasticsearch.xpack.ql.plan.logical.Project;\n+import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;\n+\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.ql.type.DateUtils.UTC;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.isA;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class ParamLiteralTests extends ESTestCase {\n+\n+    private final SqlParser parser = new SqlParser();\n+\n+    private LogicalPlan parse(String sql, SqlTypedParamValue... parameters) {\n+        return parser.createStatement(sql, List.of(parameters), UTC);\n+    }\n+\n+    public void testMultipleParamLiteralsWithUnresolvedAliases() {\n+        LogicalPlan logicalPlan = parse(\"SELECT ?, ? FROM test\",\n+            new SqlTypedParamValue(\"integer\", 100),\n+            new SqlTypedParamValue(\"integer\", 200)\n+        );\n+        List<? extends NamedExpression> projections = ((Project) logicalPlan.children().get(0)).projections();\n+        assertThat(projections, everyItem(isA(Alias.class)));\n+        assertThat(projections.get(0).toString(), startsWith(\"100 AS ?1#\"));\n+        assertThat(projections.get(1).toString(), startsWith(\"200 AS ?2#\"));\n+    }\n+\n+    public void testMultipleParamLiteralsWithUnresolvedAliasesAndWhereClause() {\n+        LogicalPlan logicalPlan = parse(\"SELECT ?, ? FROM test WHERE 1 < ?\",\n+            new SqlTypedParamValue(\"integer\", 100),\n+            new SqlTypedParamValue(\"integer\", 200),\n+            new SqlTypedParamValue(\"integer\", 300)\n+        );\n+        Project project = (Project) logicalPlan.children().get(0);\n+        List<? extends NamedExpression> projections = project.projections();\n+        assertThat(projections, everyItem(isA(Alias.class)));\n+        assertThat(projections.get(0).toString(), startsWith(\"100 AS ?1#\"));\n+        assertThat(projections.get(1).toString(), startsWith(\"200 AS ?2#\"));\n+        assertThat(project.children().get(0), isA(Filter.class));\n+        Filter filter = (Filter) project.children().get(0);\n+        assertThat(filter.condition(), isA(LessThan.class));\n+        LessThan condition = (LessThan) filter.condition();\n+        assertThat(condition.left(), isA(Literal.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3OTI4Nw=="}, "originalCommit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5ODEyNzUx", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-519812751", "createdAt": "2020-10-29T15:48:48Z", "commit": {"oid": "c205e9d2d14405b17b26f111a0e5263bd70e1fb9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2e46de012f0c77bb8f84e21a61a952b01afaee9", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/f2e46de012f0c77bb8f84e21a61a952b01afaee9", "committedDate": "2020-10-30T15:08:47Z", "message": "PR suggestions and moved changes mostly to `visitParamLiteral`\n\nNote: Now the `visitParamLiteral` reads into the parent context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cefcc611792a6c16eb79e4ef434a86eb3038c9c", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/2cefcc611792a6c16eb79e4ef434a86eb3038c9c", "committedDate": "2020-10-30T19:58:21Z", "message": "Root cause fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1d31c6ecbc60b53d812ba980b044de72ffcd6f", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/fa1d31c6ecbc60b53d812ba980b044de72ffcd6f", "committedDate": "2020-10-30T19:58:35Z", "message": "Revert unnecessary changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd308794a8583727f517f06da8a485655cc6eaa", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/ecd308794a8583727f517f06da8a485655cc6eaa", "committedDate": "2020-10-30T20:04:21Z", "message": "Cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "541b4c9ce0029709f6cb126292f3cd9884fe416b", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/541b4c9ce0029709f6cb126292f3cd9884fe416b", "committedDate": "2020-11-02T14:49:30Z", "message": "Removed the `System.out.println` calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb184d19de61dcb3af708505aebf30d578f31dd", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/6bb184d19de61dcb3af708505aebf30d578f31dd", "committedDate": "2020-11-03T15:18:06Z", "message": "Additional tests and `AttributeMap.builder` name changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cd3dc057757003b20d03367b234dde4f65c7c39", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/9cd3dc057757003b20d03367b234dde4f65c7c39", "committedDate": "2020-11-03T15:44:12Z", "message": "Additional tests and `AttributeMap.builder` name changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09cfe08be5deb9463f097cba05dd0b74047cc538", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/09cfe08be5deb9463f097cba05dd0b74047cc538", "committedDate": "2020-11-03T15:56:45Z", "message": "Merge remote-tracking branch 'origin/master' into fix/56013"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7fead3119f0d0ea7d8c3c90f1d75930d7a739ed", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/f7fead3119f0d0ea7d8c3c90f1d75930d7a739ed", "committedDate": "2020-11-03T16:00:46Z", "message": "Whitespace revert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNjc1ODIy", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-522675822", "createdAt": "2020-11-03T16:32:56Z", "commit": {"oid": "f7fead3119f0d0ea7d8c3c90f1d75930d7a739ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjozMjo1N1rOHs2-wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjozMjo1N1rOHs2-wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwMDE5Mg==", "bodyText": "Will merge these two lines before squash.", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r516800192", "createdAt": "2020-11-03T16:32:57Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "diffHunk": "@@ -189,11 +189,12 @@ public Verifier(Metrics metrics) {\n             plan.forEachExpressionsUp(e -> {\n                 if (e instanceof Alias) {\n                     Alias a = (Alias) e;\n-                    collectRefs.put(a.toAttribute(), a.child());\n+                    Attribute attr = a.toAttribute();\n+                    collectRefs.put(attr, a.child());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fead3119f0d0ea7d8c3c90f1d75930d7a739ed"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODM2ODA5", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-522836809", "createdAt": "2020-11-03T20:05:49Z", "commit": {"oid": "f7fead3119f0d0ea7d8c3c90f1d75930d7a739ed"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDowNTo1MFrOHs-pOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDowNzowMlrOHs-sMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyNTc1NA==", "bodyText": "Work adding a few more variations here:\nSELECT 3, 5, 3, SELECT 5, 3, 3, 3 with and without FROM.", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r516925754", "createdAt": "2020-11-03T20:05:50Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/select.sql-spec", "diffHunk": "@@ -48,6 +48,8 @@ SELECT salary, first_name, salary AS x, salary y FROM test_emp ORDER BY y LIMIT\n \n constantWithLimit\n SELECT 3 FROM \"test_emp\" LIMIT 5;\n+sameConstantsWithLimit\n+SELECT 3, 3, 5 FROM \"test_emp\" LIMIT 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fead3119f0d0ea7d8c3c90f1d75930d7a739ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyNjUxMw==", "bodyText": "You need the checks to pass before merging so you'll have to do it anyway, better do it sooner rather than later.", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r516926513", "createdAt": "2020-11-03T20:07:02Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "diffHunk": "@@ -189,11 +189,12 @@ public Verifier(Metrics metrics) {\n             plan.forEachExpressionsUp(e -> {\n                 if (e instanceof Alias) {\n                     Alias a = (Alias) e;\n-                    collectRefs.put(a.toAttribute(), a.child());\n+                    Attribute attr = a.toAttribute();\n+                    collectRefs.put(attr, a.child());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwMDE5Mg=="}, "originalCommit": {"oid": "f7fead3119f0d0ea7d8c3c90f1d75930d7a739ed"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bee8a7dd25ed44fbf719471786fa4238fda66b14", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/bee8a7dd25ed44fbf719471786fa4238fda66b14", "committedDate": "2020-11-03T22:40:50Z", "message": "PR suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTM2NjM4", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-522936638", "createdAt": "2020-11-03T23:01:41Z", "commit": {"oid": "bee8a7dd25ed44fbf719471786fa4238fda66b14"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowMTo0MlrOHtDiiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowMTo0MlrOHtDiiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNTk2MQ==", "bodyText": "Maybe also check the returned values with get() from the map, can be done in the next PR though.", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r517005961", "createdAt": "2020-11-03T23:01:42Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/AttributeMapTests.java", "diffHunk": "@@ -37,6 +38,47 @@ private static Attribute a(String name) {\n         return new AttributeMap<>(map);\n     }\n \n+    public void testAttributeMapWithSameAliasesCanResolveAttributes() {\n+        Alias param1 = createIntParameterAlias(1, 100);\n+        Alias param2 = createIntParameterAlias(2, 100);\n+        assertTrue(param1.equals(param2));\n+        assertTrue(param1.semanticEquals(param2));\n+        // equality on literals\n+        assertTrue(param1.child().equals(param2.child()));\n+        assertTrue(param1.child().semanticEquals(param2.child()));\n+        assertTrue(param1.toAttribute().equals(param2.toAttribute()));\n+        assertFalse(param1.toAttribute().semanticEquals(param2.toAttribute()));\n+\n+        Map<Attribute, Expression> collectRefs = new LinkedHashMap<>();\n+        for (Alias a : List.of(param1, param2)) {\n+            collectRefs.put(a.toAttribute(), a.child());\n+        }\n+        // we can look up the same item by both attributes\n+        assertNotNull(collectRefs.get(param1.toAttribute()));\n+        assertNotNull(collectRefs.get(param2.toAttribute()));\n+        AttributeMap<Expression> attributeMap = new AttributeMap<>(collectRefs);\n+\n+        // validate that all Alias can be e\n+        assertTrue(attributeMap.containsKey(param1.toAttribute()));\n+        assertFalse(attributeMap.containsKey(param2.toAttribute())); // results in unknown attribute exception\n+\n+        AttributeMap.Builder<Expression> mapBuilder = AttributeMap.builder();\n+        for (Alias a : List.of(param1, param2)) {\n+            mapBuilder.put(a.toAttribute(), a.child());\n+        }\n+        AttributeMap<Expression> newAttributeMap = mapBuilder.build();\n+\n+        assertTrue(newAttributeMap.containsKey(param1.toAttribute()));\n+        assertTrue(newAttributeMap.containsKey(param2.toAttribute())); // no more unknown attribute exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee8a7dd25ed44fbf719471786fa4238fda66b14"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzI4Nzky", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-523328792", "createdAt": "2020-11-04T12:49:31Z", "commit": {"oid": "bee8a7dd25ed44fbf719471786fa4238fda66b14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjo0OTozMVrOHtWq7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjo0OTozMVrOHtWq7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxOTQwNQ==", "bodyText": "nit: \"~ wrapper collided\" or some other comment correction (can be the next PR, obv.)", "url": "https://github.com/elastic/elasticsearch/pull/63710#discussion_r517319405", "createdAt": "2020-11-04T12:49:31Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/AttributeMapTests.java", "diffHunk": "@@ -37,6 +38,47 @@ private static Attribute a(String name) {\n         return new AttributeMap<>(map);\n     }\n \n+    public void testAttributeMapWithSameAliasesCanResolveAttributes() {\n+        Alias param1 = createIntParameterAlias(1, 100);\n+        Alias param2 = createIntParameterAlias(2, 100);\n+        assertTrue(param1.equals(param2));\n+        assertTrue(param1.semanticEquals(param2));\n+        // equality on literals\n+        assertTrue(param1.child().equals(param2.child()));\n+        assertTrue(param1.child().semanticEquals(param2.child()));\n+        assertTrue(param1.toAttribute().equals(param2.toAttribute()));\n+        assertFalse(param1.toAttribute().semanticEquals(param2.toAttribute()));\n+\n+        Map<Attribute, Expression> collectRefs = new LinkedHashMap<>();\n+        for (Alias a : List.of(param1, param2)) {\n+            collectRefs.put(a.toAttribute(), a.child());\n+        }\n+        // we can look up the same item by both attributes\n+        assertNotNull(collectRefs.get(param1.toAttribute()));\n+        assertNotNull(collectRefs.get(param2.toAttribute()));\n+        AttributeMap<Expression> attributeMap = new AttributeMap<>(collectRefs);\n+\n+        // validate that all Alias can be e", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee8a7dd25ed44fbf719471786fa4238fda66b14"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzI4ODg3", "url": "https://github.com/elastic/elasticsearch/pull/63710#pullrequestreview-523328887", "createdAt": "2020-11-04T12:49:38Z", "commit": {"oid": "bee8a7dd25ed44fbf719471786fa4238fda66b14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62a2f90cb60aeec78236f9df9550b49dbbd9fd30", "author": {"user": {"login": "palesz", "name": "Andras Palinkas"}}, "url": "https://github.com/elastic/elasticsearch/commit/62a2f90cb60aeec78236f9df9550b49dbbd9fd30", "committedDate": "2020-11-04T15:46:42Z", "message": "Merge remote-tracking branch 'origin/master' into fix/56013"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3971, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}