{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDU3OTQz", "number": 54521, "title": "[DOCS] EQL: Document `endsWith` function", "bodyText": "Adds documentation for the EQL endsWith function.\nRelates to #54442.", "createdAt": "2020-03-31T16:43:30Z", "url": "https://github.com/elastic/elasticsearch/pull/54521", "merged": true, "mergeCommit": {"oid": "e86e148ee40c351fc866fd61fa206d212cccf4d0"}, "closed": true, "closedAt": "2020-04-01T14:13:48Z", "author": {"login": "jrodewig"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTFy1zAH2gAyMzk2NDU3OTQzOjljOGZjZDVkZjUzYjEyMDQyOGM4MzNmOTRjNzVhNjAyNDdmMDQyMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTX6JHAH2gAyMzk2NDU3OTQzOjUwOGJlMDYxZDZiZTgyYTgwMjg2MzY4ODc2NWM0NjMyM2YxMjI4M2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c8fcd5df53b120428c833f94c75a60247f04237", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/9c8fcd5df53b120428c833f94c75a60247f04237", "committedDate": "2020-03-31T16:35:42Z", "message": "[DOCS] EQL: Document `endsWith` function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDkwNDA4", "url": "https://github.com/elastic/elasticsearch/pull/54521#pullrequestreview-385490408", "createdAt": "2020-04-01T11:19:53Z", "commit": {"oid": "9c8fcd5df53b120428c833f94c75a60247f04237"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToxOTo1NFrOF-8F9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyMTowOVrOF-8IdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MDU5Ng==", "bodyText": "With this PR I realized one small aspect here. It should be valid for all other string functions, though.\nOne can use a text field in the function and there won't be any exception and the query will work if that text field will have a keyword sub-field.\nFor example, the following mapping\n        \"hostname\" : {\n            \"type\" : \"text\",\n            \"fields\" : {\n                \"keyword\" : {\n                    \"type\" : \"keyword\",\n                    \"ignore_above\" : 256\n                }\n            }\n        }\n\nand the query process where endsWith(hostname, \"foo\") == true won't trigger an error.", "url": "https://github.com/elastic/elasticsearch/pull/54521#discussion_r401540596", "createdAt": "2020-04-01T11:19:54Z", "author": {"login": "astefan"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -8,8 +8,71 @@ experimental::[]\n \n {es} supports the following EQL functions:\n \n+* <<eql-fn-endswith>>\n * <<eql-fn-substring>>\n \n+[discrete]\n+[[eql-fn-endswith]]\n+=== `endsWith`\n+\n+Returns `true` if a source string ends with a provided substring.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+endsWith(\"regsvr32.exe\", \".exe\")          // returns true\n+endsWith(\"regsvr32.exe\", \".dll\")          // returns false\n+endsWith(\"\", \"\")                          // returns true\n+\n+// file.name = \"regsvr32.exe\"\n+endsWith(file.name, \".exe\")               // returns true\n+endsWith(file.name, \".dll\")               // returns false\n+\n+// file.extension = \".exe\"\n+endsWith(\"regsvr32.exe\", file.extension)  // returns true\n+endsWith(\"ntdll.dll\", file.name)          // returns false\n+\n+// file.name = [ \"ntdll.dll\", \"regsvr32.exe\" ]\n+endsWith(file.name, \".dll\")               // returns true\n+endsWith(file.name, \".exe\")               // returns false\n+\n+// null handling\n+endsWith(\"regsvr32.exe\", null)            // returns null\n+endsWith(\"\", null)                        // returns null \n+endsWith(null, \".exe\")                    // returns null\n+endsWith(null, null)                      // returns null\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+endsWith(<source>, <substring>)\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n+(Required, string or `null`)\n+Source string. If `null`, the function returns `null`.\n++\n+If using a field as the argument, this parameter only supports the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8fcd5df53b120428c833f94c75a60247f04237"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MDg2NQ==", "bodyText": "This function is case insensitive, as well. And I believe it's worth being mentioned in docs.", "url": "https://github.com/elastic/elasticsearch/pull/54521#discussion_r401540865", "createdAt": "2020-04-01T11:20:25Z", "author": {"login": "astefan"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -8,8 +8,71 @@ experimental::[]\n \n {es} supports the following EQL functions:\n \n+* <<eql-fn-endswith>>\n * <<eql-fn-substring>>\n \n+[discrete]\n+[[eql-fn-endswith]]\n+=== `endsWith`\n+\n+Returns `true` if a source string ends with a provided substring.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8fcd5df53b120428c833f94c75a60247f04237"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MTIzNw==", "bodyText": "Valid statement for the other parameter, as well.", "url": "https://github.com/elastic/elasticsearch/pull/54521#discussion_r401541237", "createdAt": "2020-04-01T11:21:09Z", "author": {"login": "astefan"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -8,8 +8,71 @@ experimental::[]\n \n {es} supports the following EQL functions:\n \n+* <<eql-fn-endswith>>\n * <<eql-fn-substring>>\n \n+[discrete]\n+[[eql-fn-endswith]]\n+=== `endsWith`\n+\n+Returns `true` if a source string ends with a provided substring.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+endsWith(\"regsvr32.exe\", \".exe\")          // returns true\n+endsWith(\"regsvr32.exe\", \".dll\")          // returns false\n+endsWith(\"\", \"\")                          // returns true\n+\n+// file.name = \"regsvr32.exe\"\n+endsWith(file.name, \".exe\")               // returns true\n+endsWith(file.name, \".dll\")               // returns false\n+\n+// file.extension = \".exe\"\n+endsWith(\"regsvr32.exe\", file.extension)  // returns true\n+endsWith(\"ntdll.dll\", file.name)          // returns false\n+\n+// file.name = [ \"ntdll.dll\", \"regsvr32.exe\" ]\n+endsWith(file.name, \".dll\")               // returns true\n+endsWith(file.name, \".exe\")               // returns false\n+\n+// null handling\n+endsWith(\"regsvr32.exe\", null)            // returns null\n+endsWith(\"\", null)                        // returns null \n+endsWith(null, \".exe\")                    // returns null\n+endsWith(null, null)                      // returns null\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+endsWith(<source>, <substring>)\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n+(Required, string or `null`)\n+Source string. If `null`, the function returns `null`.\n++\n+If using a field as the argument, this parameter only supports the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MDU5Ng=="}, "originalCommit": {"oid": "9c8fcd5df53b120428c833f94c75a60247f04237"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "508be061d6be82a802863688765c46323f12283a", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/508be061d6be82a802863688765c46323f12283a", "committedDate": "2020-04-01T13:41:58Z", "message": "address review feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1402, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}