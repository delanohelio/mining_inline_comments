{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzM2NjM3", "number": 54673, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyOTo0NVrODuIE7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyOTo0NVrODuIE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjkzNDIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncActionBranchingStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyOTo0NVrOF_9MxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyOTo0NVrOF_9MxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzMwMQ==", "bodyText": "Super minor nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\"Cannot call getNextStepKey before performAction\");\n          \n          \n            \n                        throw new IllegalStateException(\"cannot call getNextStepKey before performAction\");", "url": "https://github.com/elastic/elasticsearch/pull/54673#discussion_r402607301", "createdAt": "2020-04-02T21:29:45Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncActionBranchingStep.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This step wraps an {@link AsyncActionStep} in order to be able to manipulate what the next step will be, depending on the result of the\n+ * wrapped {@link AsyncActionStep}.\n+ * <p>\n+ * If the action response is complete, the {@link AsyncActionBranchingStep}'s nextStepKey will be the nextStepKey of the wrapped action. If\n+ * the response is incomplete the nextStepKey will be the provided {@link AsyncActionBranchingStep#nextKeyOnIncompleteResponse}.\n+ * Failures encountered whilst executing the wrapped action will be propagated directly.\n+ */\n+public class AsyncActionBranchingStep extends AsyncActionStep {\n+    private final AsyncActionStep stepToExecute;\n+\n+    private StepKey nextKeyOnIncompleteResponse;\n+    private SetOnce<Boolean> onResponseResult;\n+\n+    public AsyncActionBranchingStep(AsyncActionStep stepToExecute, StepKey nextKeyOnIncompleteResponse, Client client) {\n+        // super.nextStepKey is set to null since it is not used by this step\n+        super(stepToExecute.getKey(), null, client);\n+        this.stepToExecute = stepToExecute;\n+        this.nextKeyOnIncompleteResponse = nextKeyOnIncompleteResponse;\n+        this.onResponseResult = new SetOnce<>();\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void performAction(IndexMetadata indexMetadata, ClusterState currentClusterState, ClusterStateObserver observer,\n+                              Listener listener) {\n+        stepToExecute.performAction(indexMetadata, currentClusterState, observer, new Listener() {\n+            @Override\n+            public void onResponse(boolean complete) {\n+                onResponseResult.set(complete);\n+                listener.onResponse(complete);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                listener.onFailure(e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public final StepKey getNextStepKey() {\n+        if (onResponseResult.get() == null) {\n+            throw new IllegalStateException(\"Cannot call getNextStepKey before performAction\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414f8451f4e2e42bd9a85aacdc9c0d9cadd7bfb7"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3973, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}