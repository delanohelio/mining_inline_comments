{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzExMTgx", "number": 61428, "title": "EQL: Replace SearchHit in response with Event", "bodyText": "The building block of the eql response is currently the SearchHit. This\nis a problem since it is tied to an actual search, and thus has scoring,\nhighlighting, shard information and a lot of other things that are not\nrelevant for EQL.\nThis becomes a problem when doing sequence queries since the response is\nnot generated from one search query and thus there are no SearchHits to\nspeak of.\nEmulating one is not just conceptually incorrect but also problematic\nsince most of the data is missed or made-up.\nAs such this PR introduces a simple class, Event, that maps nicely to\nthe terminology while hiding the ES internals (the use of SearchHit or\nGetResult/GetResponse depending on the API used).\nFix #59764\nFix #59779", "createdAt": "2020-08-21T15:49:09Z", "url": "https://github.com/elastic/elasticsearch/pull/61428", "merged": true, "mergeCommit": {"oid": "997376fbe6ef2894038968842f5e0635731ede65"}, "closed": true, "closedAt": "2020-08-25T11:27:57Z", "author": {"login": "costin"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBGx3BgH2gAyNDcxNzExMTgxOjhkZGM5Y2EzZmFkNjMwOWYzNjVkMzlmZDIwMzQ2YmMwOTIzYTNkMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCVClngFqTQ3NDM2MTkzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ddc9ca3fad6309f365d39fd20346bc0923a3d29", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/8ddc9ca3fad6309f365d39fd20346bc0923a3d29", "committedDate": "2020-08-21T15:45:03Z", "message": "EQL: Replace SearchHit in response with Event\n\nThe building block of the eql response is currently the SearchHit. This\nis a problem since it is tied to an actual search, and thus has scoring,\nhighlighting, shard information and a lot of other things that are not\nrelevant for EQL.\nThis becomes a problem when doing sequence queries since the response is\nnot generated from one search query and thus there are no SearchHits to\nspeak of.\nEmulating one is not just conceptually incorrect but also problematic\nsince most of the data is missed or made-up.\n\nAs such this PR introduces a simple class, Event, that maps nicely to\nthe terminology while hiding the ES internals (the use of SearchHit or\nGetResult/GetResponse depending on the API used).\n\nFix #59764\nFix #59779"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjA0NjY3", "url": "https://github.com/elastic/elasticsearch/pull/61428#pullrequestreview-472604667", "createdAt": "2020-08-21T15:52:29Z", "commit": {"oid": "8ddc9ca3fad6309f365d39fd20346bc0923a3d29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1MjozMFrOHEygWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1MjozMFrOHEygWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MzgzNA==", "bodyText": "This bit caused a lot of wasted time trying to figure out why the response was not working. I had to use the deprecated form since the form above gave incorrect results - the json was mangled with some extra characters and I'm not sure where those occurred. Initially I assumed it's a compressed stream but it's not since the source is always uncompressed from the underlying object.\nSo maybe it's stored in JSON format ... don't know.\n@imotov any ideas?", "url": "https://github.com/elastic/elasticsearch/pull/61428#discussion_r474783834", "createdAt": "2020-08-21T15:52:30Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java", "diffHunk": "@@ -179,6 +182,110 @@ public String toString() {\n         return Strings.toString(this);\n     }\n \n+    // Event\n+    public static class Event implements Writeable, ToXContentObject {\n+\n+        private static final class Fields {\n+            static final String INDEX = GetResult._INDEX;\n+            static final String ID = GetResult._ID;\n+            static final String SOURCE = SourceFieldMapper.NAME;\n+        }\n+\n+        private static final ParseField INDEX = new ParseField(Fields.INDEX);\n+        private static final ParseField ID = new ParseField(Fields.ID);\n+        private static final ParseField SOURCE = new ParseField(Fields.SOURCE);\n+\n+        private static final ConstructingObjectParser<Event, Void> PARSER =\n+                new ConstructingObjectParser<>(\"eql/search_response_event\", true,\n+                        args -> new Event((String) args[0], (String) args[1], (BytesReference) args[2]));\n+\n+        static {\n+            PARSER.declareString(constructorArg(), INDEX);\n+            PARSER.declareString(constructorArg(), ID);\n+            PARSER.declareObject(constructorArg(), (p, c) -> {\n+                try (XContentBuilder builder = XContentBuilder.builder(p.contentType().xContent())) {\n+                    builder.copyCurrentStructure(p);\n+                    return BytesReference.bytes(builder);\n+                }\n+            }, SOURCE);\n+        }\n+\n+        private final String index;\n+        private final String id;\n+        private final BytesReference source;\n+\n+        public Event(String index, String id, BytesReference source) {\n+            this.index = index;\n+            this.id = id;\n+            this.source = source;\n+        }\n+        \n+        public Event(StreamInput in) throws IOException {\n+            index = in.readString();\n+            id = in.readString();\n+            source = in.readBytesReference();\n+        }\n+\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n+            out.writeString(index);\n+            out.writeString(id);\n+            out.writeBytesReference(source);\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            builder.startObject();\n+            builder.field(Fields.INDEX, index);\n+            builder.field(Fields.ID, id);\n+            //XContentHelper.writeRawField(Fields.SOURCE, source, builder.contentType(), builder, params);\n+            XContentHelper.writeRawField(Fields.SOURCE, source, builder, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddc9ca3fad6309f365d39fd20346bc0923a3d29"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjExNTg2", "url": "https://github.com/elastic/elasticsearch/pull/61428#pullrequestreview-472611586", "createdAt": "2020-08-21T16:02:21Z", "commit": {"oid": "8ddc9ca3fad6309f365d39fd20346bc0923a3d29"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowMjoyMVrOHEy0nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowMjoyMVrOHEy0nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTAyMA==", "bodyText": "We also need to remove docs for _version, seq_no, and primary_term params (located right above this one). I can do that in a follow-up PR if wanted.", "url": "https://github.com/elastic/elasticsearch/pull/61428#discussion_r474789020", "createdAt": "2020-08-21T16:02:21Z", "author": {"login": "jrodewig"}, "path": "docs/reference/eql/eql-search-api.asciidoc", "diffHunk": "@@ -442,11 +442,6 @@ doesn\u2019t overwrite a newer version. See <<optimistic-concurrency-control>>.\n (integer)\n Primary term assigned to the document. See <<optimistic-concurrency-control>>.\n \n-`_score`::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddc9ca3fad6309f365d39fd20346bc0923a3d29"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda6d22ebc32e5d38ca7cb9052354ef09af9991f", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/cda6d22ebc32e5d38ca7cb9052354ef09af9991f", "committedDate": "2020-08-24T21:19:11Z", "message": "Fix EqlSearchResponseTests.testFromXContent\n\nAdds proper check for source comparison."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODc5NzY2", "url": "https://github.com/elastic/elasticsearch/pull/61428#pullrequestreview-473879766", "createdAt": "2020-08-24T21:47:07Z", "commit": {"oid": "cda6d22ebc32e5d38ca7cb9052354ef09af9991f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzYxOTMx", "url": "https://github.com/elastic/elasticsearch/pull/61428#pullrequestreview-474361931", "createdAt": "2020-08-25T10:52:39Z", "commit": {"oid": "cda6d22ebc32e5d38ca7cb9052354ef09af9991f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1MjozOVrOHGSjWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1MjozOVrOHGSjWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NzQ2NA==", "bodyText": "What does As mean?", "url": "https://github.com/elastic/elasticsearch/pull/61428#discussion_r476357464", "createdAt": "2020-08-25T10:52:39Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/AsEventListener.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.xpack.eql.execution.payload.EventPayload;\n+import org.elasticsearch.xpack.eql.session.Payload;\n+\n+public class AsEventListener implements ActionListener<SearchResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda6d22ebc32e5d38ca7cb9052354ef09af9991f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4641, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}