{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODczOTIx", "number": 53919, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTozODowOFrODqFxnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo0Mzo1N1rODqR7gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDYxNDA3OnYy", "diffSide": "LEFT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTozODowOFrOF5qEcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTozODowOFrOF5qEcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjQxNg==", "bodyText": "No need to deprecate here. We have never documented this threadpool and it was always seen as an internal setting.\nHaving it set will not prevent ES from starting up cleanly so I don't see anyone getting hurt here.", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396002416", "createdAt": "2020-03-21T15:38:08Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryPlugin.java", "diffHunk": "@@ -80,15 +74,6 @@ AzureStorageService createAzureStoreService(final Settings settings) {\n         );\n     }\n \n-    @Override\n-    public List<ExecutorBuilder<?>> getExecutorBuilders(Settings settings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3e01d3deb8ea8150ab113866d4a6d8379ed6de"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDYxNTQzOnYy", "diffSide": "RIGHT", "path": "test/fixtures/azure-fixture/src/main/java/fixture/azure/AzureHttpHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTo0MDoxN1rOF5qFHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTo0MDoxN1rOF5qFHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjU4OQ==", "bodyText": "Since we needed the request body again I refactored things like we did for the other mocks to full drain the input first thing here as well to keep things simple.", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396002589", "createdAt": "2020-03-21T15:40:17Z", "author": {"login": "original-brownbear"}, "path": "test/fixtures/azure-fixture/src/main/java/fixture/azure/AzureHttpHandler.java", "diffHunk": "@@ -67,18 +72,21 @@ public void handle(final HttpExchange exchange) throws IOException {\n             assert read == -1 : \"Request body should have been empty but saw [\" + read + \"]\";\n         }\n         try {\n+            // Request body is closed in the finally block\n+            final BytesReference requestBody = Streams.readFully(Streams.noCloseStream(exchange.getRequestBody()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3e01d3deb8ea8150ab113866d4a6d8379ed6de"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDYxNTg2OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/plugin-metadata/plugin-security.policy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTo0MDo1NlrOF5qFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTo0MDo1NlrOF5qFUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjY0Mw==", "bodyText": "From #53903 this will go away once #53903 is merged, I just set it to be able to run 3rd party tests locally and verify this actually works now.", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396002643", "createdAt": "2020-03-21T15:40:56Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/plugin-metadata/plugin-security.policy", "diffHunk": "@@ -20,4 +20,5 @@\n grant {\n   // azure client opens socket connections for to access repository\n   permission java.net.SocketPermission \"*\", \"connect\";\n+  permission java.lang.RuntimePermission \"setFactory\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3e01d3deb8ea8150ab113866d4a6d8379ed6de"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjU5MzIzOnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo0MDozMFrOF57T1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoyMjowM1rOF5-95w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4NDg4Nw==", "bodyText": "In case of more than 256 blobs to delete, this will log the same message multiple times right?", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396284887", "createdAt": "2020-03-23T08:40:30Z", "author": {"login": "tlrx"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java", "diffHunk": "@@ -187,72 +188,61 @@ public boolean blobExists(String account, String container, String blob) throws\n         });\n     }\n \n-    public void deleteBlob(String account, String container, String blob) throws URISyntaxException, StorageException {\n+    public void deleteBlobsIgnoringIfNotExists(String account, String container, Collection<String> blobs)\n+            throws URISyntaxException, StorageException {\n         final Tuple<CloudBlobClient, Supplier<OperationContext>> client = client(account);\n         // Container name must be lower case.\n         final CloudBlobContainer blobContainer = client.v1().getContainerReference(container);\n-        logger.trace(() -> new ParameterizedMessage(\"delete blob for container [{}], blob [{}]\", container, blob));\n-        SocketAccess.doPrivilegedVoidException(() -> {\n-            final CloudBlockBlob azureBlob = blobContainer.getBlockBlobReference(blob);\n-            logger.trace(() -> new ParameterizedMessage(\"container [{}]: blob [{}] found. removing.\", container, blob));\n-            azureBlob.delete(DeleteSnapshotsOption.NONE, null, null, client.v2().get());\n-        });\n+        final Iterator<String> blobIterator = blobs.iterator();\n+        int currentBatchSize = 0;\n+        while (blobIterator.hasNext()) {\n+            final BlobDeleteBatchOperation batchDeleteOp = new BlobDeleteBatchOperation();\n+            do {\n+                batchDeleteOp.addSubOperation(blobContainer.getBlockBlobReference(blobIterator.next()),\n+                    DeleteSnapshotsOption.NONE, null, null);\n+                ++currentBatchSize;\n+            } while (blobIterator.hasNext() && currentBatchSize < Constants.BATCH_MAX_REQUESTS);\n+            currentBatchSize = 0;\n+            logger.trace(() -> new ParameterizedMessage(\"delete blobs for container [{}], blob [{}]\", container, blobs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145569833c91e08a36f6880b3c26c48444c1c20d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0NDgwNw==", "bodyText": "Right :) moved the log statement to the beginning of the method now", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396344807", "createdAt": "2020-03-23T10:22:03Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java", "diffHunk": "@@ -187,72 +188,61 @@ public boolean blobExists(String account, String container, String blob) throws\n         });\n     }\n \n-    public void deleteBlob(String account, String container, String blob) throws URISyntaxException, StorageException {\n+    public void deleteBlobsIgnoringIfNotExists(String account, String container, Collection<String> blobs)\n+            throws URISyntaxException, StorageException {\n         final Tuple<CloudBlobClient, Supplier<OperationContext>> client = client(account);\n         // Container name must be lower case.\n         final CloudBlobContainer blobContainer = client.v1().getContainerReference(container);\n-        logger.trace(() -> new ParameterizedMessage(\"delete blob for container [{}], blob [{}]\", container, blob));\n-        SocketAccess.doPrivilegedVoidException(() -> {\n-            final CloudBlockBlob azureBlob = blobContainer.getBlockBlobReference(blob);\n-            logger.trace(() -> new ParameterizedMessage(\"container [{}]: blob [{}] found. removing.\", container, blob));\n-            azureBlob.delete(DeleteSnapshotsOption.NONE, null, null, client.v2().get());\n-        });\n+        final Iterator<String> blobIterator = blobs.iterator();\n+        int currentBatchSize = 0;\n+        while (blobIterator.hasNext()) {\n+            final BlobDeleteBatchOperation batchDeleteOp = new BlobDeleteBatchOperation();\n+            do {\n+                batchDeleteOp.addSubOperation(blobContainer.getBlockBlobReference(blobIterator.next()),\n+                    DeleteSnapshotsOption.NONE, null, null);\n+                ++currentBatchSize;\n+            } while (blobIterator.hasNext() && currentBatchSize < Constants.BATCH_MAX_REQUESTS);\n+            currentBatchSize = 0;\n+            logger.trace(() -> new ParameterizedMessage(\"delete blobs for container [{}], blob [{}]\", container, blobs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4NDg4Nw=="}, "originalCommit": {"oid": "145569833c91e08a36f6880b3c26c48444c1c20d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjYwMDYwOnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobStoreRepositoryTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo0MjozN1rOF57Ygg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoyMDoxNVrOF5-55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4NjA4Mg==", "bodyText": "Batch request does not prefix with the container name, right?", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396286082", "createdAt": "2020-03-23T08:42:37Z", "author": {"login": "tlrx"}, "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobStoreRepositoryTests.java", "diffHunk": "@@ -64,7 +64,7 @@ protected Settings repositorySettings() {\n \n     @Override\n     protected Map<String, HttpHandler> createHttpHandlers() {\n-        return Collections.singletonMap(\"/container\", new AzureBlobStoreHttpHandler(\"container\"));\n+        return Collections.singletonMap(\"/\", new AzureBlobStoreHttpHandler(\"container\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145569833c91e08a36f6880b3c26c48444c1c20d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0Mzc4Mw==", "bodyText": "Jup exactly, that's why I had to expand the context here", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396343783", "createdAt": "2020-03-23T10:20:15Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobStoreRepositoryTests.java", "diffHunk": "@@ -64,7 +64,7 @@ protected Settings repositorySettings() {\n \n     @Override\n     protected Map<String, HttpHandler> createHttpHandlers() {\n-        return Collections.singletonMap(\"/container\", new AzureBlobStoreHttpHandler(\"container\"));\n+        return Collections.singletonMap(\"/\", new AzureBlobStoreHttpHandler(\"container\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4NjA4Mg=="}, "originalCommit": {"oid": "145569833c91e08a36f6880b3c26c48444c1c20d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjYwNTQ2OnYy", "diffSide": "RIGHT", "path": "test/fixtures/azure-fixture/src/main/java/fixture/azure/AzureHttpHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo0Mzo1N1rOF57bdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo0Mzo1N1rOF57bdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4NjgzOQ==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/elastic/elasticsearch/pull/53919#discussion_r396286839", "createdAt": "2020-03-23T08:43:57Z", "author": {"login": "tlrx"}, "path": "test/fixtures/azure-fixture/src/main/java/fixture/azure/AzureHttpHandler.java", "diffHunk": "@@ -190,6 +198,45 @@ public void handle(final HttpExchange exchange) throws IOException {\n                 exchange.sendResponseHeaders(RestStatus.OK.getStatus(), response.length);\n                 exchange.getResponseBody().write(response);\n \n+            } else if (Regex.simpleMatch(\"POST /?comp=batch\", request)) {\n+                // Batch Delete (https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch)\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(requestBody.streamInput()))) {\n+                    final Set<String> toDelete = reader.lines().filter(l -> l.startsWith(\"DELETE\"))\n+                        .map(l -> l.split(\" \")[1]).collect(Collectors.toSet());\n+                    final BytesStreamOutput baos = new BytesStreamOutput();\n+                    final String batchSeparator = \"batchresponse_\" + UUIDs.randomBase64UUID();\n+                    try (Writer writer = new OutputStreamWriter(baos)) {\n+                        int contentId = 0;\n+                        for (String b : toDelete) {\n+                            writer.write(\"\\r\\n--\" + batchSeparator + \"\\r\\n\" +\n+                                \"Content-Type: application/http \\r\\n\" +\n+                                \"Content-ID: \" + contentId++ + \" \\r\\n\");\n+                            if (blobs.remove(b) == null) {\n+                                writer.write(\"\\r\\nHTTP/1.1 404 The specified blob does not exist. \\r\\n\" +\n+                                    \"x-ms-error-code: BlobNotFound \\r\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145569833c91e08a36f6880b3c26c48444c1c20d"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4193, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}