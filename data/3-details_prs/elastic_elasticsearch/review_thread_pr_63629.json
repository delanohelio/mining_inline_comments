{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNTI0MjQx", "number": 63629, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyNTo0MFrOEtQm5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyNDozNFrOEtZWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODkzNDc3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyNTo0MFrOHg86Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjo1MToxOVrOHieKqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDM3NA==", "bodyText": "I forget what the plan is for expanding this beyond just hard-coding this to only test against minor. I think we need some infra for being able to download rest test artifacts but we could also do test against \"staged\" right now.  I think a better intermediare step would be to use BwcVersions.forPreviousUnreleased here to iterate over any existing unreleased BWC branches.", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504314374", "createdAt": "2020-10-13T23:25:40Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODY0OA==", "bodyText": "The plan is to (manually) deploy zip artifacts that include all of the tests and apis that are found in source for prior releases (and introduce a new task for new releases). Then we can iterate over all of the latest of bugfix version per minor.  We will also want to iterate over the latest bugfix and staged too, which will need to be sourced from git just like here.\nI am hesitant to introduce that right now because I think all previous released and bugfix/staged would live under a different lifecycle task (which can be introduced later). The tests against BWC minor are wired in via check so that normal YAML tests will run, followed by the compatible YAML tests. I believe that we need to keep at least one compatible test as part of the primary check per project and for now it is bwc:minor , but in future (for performance reasons) we may want to consider to be previous released minor.\nI think it will all get there before release, but holding off a little bit on the introduction of the new lifecycle allow me to focus on a few other things first.", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504898648", "createdAt": "2020-10-14T18:49:52Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDM3NA=="}, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDA3Mw==", "bodyText": "The way we handle BWC checks wrt lifecycle tasks now is that we have a bwcTestSnapshots which is wired to check and this task tests only snapshot bwc versions, so in this case for master that would be 7.x, 7.10 and 7.9 (until it goes GA). All release versions are tested explicity and not when running check. I think we want to continue with this pattern of check running all active dev code.", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504924073", "createdAt": "2020-10-14T19:35:15Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDM3NA=="}, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NjkxNw==", "bodyText": "I think the primary difference here is that this will be applied for each and every project, as opposed to a special purpose project. For example, I make a change to the reindex module, do we want to have to checkout 3 branches of source code and run 3 additional test clusters ? (same applies for every module/plugin)\nToday, most dev workflows don't result in executing the bwcTestSnapshots, resulting in CI to run the that special purpose project(s). I think we should introduce a new task(s) to run the full compat set of tests that will be run via CI, but we need to be careful with how much additional testing per (normal) project.\nI think my comfort level is 1 additional set of REST tests per project that are executed via :myproject:check, and rely on CI job(s) for the rest of the compatibility. I believe that testing against bwc:minor or the latest release will be sufficient for the majority of the cases and can rely on special CI jobs for the long tail.", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504986917", "createdAt": "2020-10-14T21:37:55Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDM3NA=="}, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk5NjgwOQ==", "bodyText": "Ah, I see what you are saying. That being said, I think even effectively doubling the rest tests across the board is a bit much since the vast majority of changes are unlikely to impact REST compatibility. I think in terms of task lifecycle we probably want to completely decouple this stuff from check or introduce some other more lightweight variant for folks to run locally. We'll also most likely end up splitting all this into it's own CI jobs.\nDo we have runtimes on this stuff?", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504996809", "createdAt": "2020-10-14T21:53:34Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDM3NA=="}, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMDczNw==", "bodyText": "The runtimes will be approximately equal to the normal yamlRestTests.\nfor example: https://gradle-enterprise.elastic.co/s/p65q5te3ybeni/tests?search=yamlRestTest (part1)\nand https://gradle-enterprise.elastic.co/s/72gyujegdjpp2/tests?search=yamlRestTest (part2)\n\nI think in terms of task lifecycle we probably want to completely decouple this stuff from check or introduce some other more lightweight variant for folks to run locally.\n\nI am good with that especially after double checking the runtimes.  I don't know of a way to make a light weight check that would be effective ... if we decouple with check we should probably introduce a compatTestSnapshots that runs the equivalent of bwcTestSnapshots (sourcing from the possible 3 git sources) in a separate CI job run per PR. Additionally we would want a compatTestAll that would not run per PR but likely a dedicated job.\nAll good conversations, but abit outside the scope of this PR and can decouple the check and introduce separate lifecycle tasks in future PR.", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r505030737", "createdAt": "2020-10-14T22:38:16Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDM3NA=="}, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwNzg4MA==", "bodyText": "I wonder if we should consider these tests \"bwc\" tests for the purposes of the bwc_tests_enabled flag. We already have some logic to separate out bwc testing into its own job, as well as allow devs to disable bwc testing when in the process of backporting BWC changes. We don't necessarily have to do that now though, we can leave this as a TODO.", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r505907880", "createdAt": "2020-10-15T22:51:19Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDM3NA=="}, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODkzNzA3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyNjo1MFrOHg87dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyNzoxMFrOHhKToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDc0Mg==", "bodyText": "Why are we doing this in the task configuration? I think this should be up where we create the configuration and dependency.", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504314742", "createdAt": "2020-10-13T23:26:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));\n+\n         Provider<CopyRestApiTask> copyCompatYamlSpecTask = project.getTasks()\n             .register(\"copyRestApiCompatSpecsTask\", CopyRestApiTask.class, task -> {\n+                project.getDependencies().add(bwcMinorConfig.getName(), bwcMinor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMzkyMA==", "bodyText": "+1", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504533920", "createdAt": "2020-10-14T09:27:10Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));\n+\n         Provider<CopyRestApiTask> copyCompatYamlSpecTask = project.getTasks()\n             .register(\"copyRestApiCompatSpecsTask\", CopyRestApiTask.class, task -> {\n+                project.getDependencies().add(bwcMinorConfig.getName(), bwcMinor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNDc0Mg=="}, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk0MDA3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyODoyMFrOHg89TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyODoyMFrOHg89TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNTIxMw==", "bodyText": "shouldn't we really be referencing config here instead of bwcMinorConfig even though they are almost certain to be the same?", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504315213", "createdAt": "2020-10-13T23:28:20Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));\n+\n         Provider<CopyRestApiTask> copyCompatYamlSpecTask = project.getTasks()\n             .register(\"copyRestApiCompatSpecsTask\", CopyRestApiTask.class, task -> {\n+                project.getDependencies().add(bwcMinorConfig.getName(), bwcMinor);\n+                task.dependsOn(bwcMinorConfig);\n+                task.coreConfig = bwcMinorConfig;\n+                task.xpackConfig = bwcMinorConfig;\n+                task.additionalConfig = bwcMinorConfig;\n                 task.includeCore.set(extension.restApi.getIncludeCore());\n                 task.includeXpack.set(extension.restApi.getIncludeXpack());\n                 task.sourceSetName = SOURCE_SET_NAME;\n                 task.skipHasRestTestCheck = true;\n-                task.coreConfig = compatSpec;\n-                project.getDependencies()\n-                    .add(\n-                        task.coreConfig.getName(),\n-                        project.files(checkoutDir.resolve(\"rest-api-spec/src/main/resources\").resolve(RELATIVE_API_PATH))\n-                    );\n-                task.xpackConfig = xpackCompatSpec;\n-                project.getDependencies()\n-                    .add(\n-                        task.xpackConfig.getName(),\n-                        project.files(checkoutDir.resolve(\"x-pack/plugin/src/test/resources\").resolve(RELATIVE_API_PATH))\n-                    );\n-                task.additionalConfig = additionalCompatSpec;\n-                // per project can define custom specifications\n-                project.getDependencies()\n-                    .add(\n-                        task.additionalConfig.getName(),\n-                        project.files(\n-                            getCompatProjectPath(project, checkoutDir).resolve(\"src/yamlRestTest/resources\").resolve(RELATIVE_API_PATH)\n-                        )\n-                    );\n-                task.dependsOn(task.coreConfig);\n-                task.dependsOn(task.xpackConfig);\n-                task.dependsOn(task.additionalConfig);\n-                task.dependsOn(\":distribution:bwc:minor:checkoutBwcBranch\");\n+                task.coreConfigToFileTree = config -> project.fileTree(\n+                    bwcMinorConfig.getSingleFile().toPath().resolve(\"rest-api-spec/src/main/resources\").resolve(RELATIVE_API_PATH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk0MjAzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyOToxOVrOHg8-gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyOToxOVrOHg8-gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNTUyMQ==", "bodyText": "Should we make the spec folders constants as well?", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504315521", "createdAt": "2020-10-13T23:29:19Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,84 +74,54 @@ public void apply(Project project) {\n         ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n         testCluster.setTestDistribution(TestDistribution.DEFAULT);\n \n-        // TODO: once https://github.com/elastic/elasticsearch/pull/62473 lands refactor this to reference the checkoutDir as an artifact\n-        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n-        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n-            .getBuildDir()\n-            .toPath()\n-            .resolve(\"bwc\")\n-            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n-\n         // copy compatible rest specs\n-        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n-        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n-        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Configuration bwcMinorConfig = project.getConfigurations().create(\"bwcMinor\");\n+        Dependency bwcMinor = project.getDependencies().project(Map.of(\"path\", \":distribution:bwc:minor\", \"configuration\", \"checkout\"));\n+\n         Provider<CopyRestApiTask> copyCompatYamlSpecTask = project.getTasks()\n             .register(\"copyRestApiCompatSpecsTask\", CopyRestApiTask.class, task -> {\n+                project.getDependencies().add(bwcMinorConfig.getName(), bwcMinor);\n+                task.dependsOn(bwcMinorConfig);\n+                task.coreConfig = bwcMinorConfig;\n+                task.xpackConfig = bwcMinorConfig;\n+                task.additionalConfig = bwcMinorConfig;\n                 task.includeCore.set(extension.restApi.getIncludeCore());\n                 task.includeXpack.set(extension.restApi.getIncludeXpack());\n                 task.sourceSetName = SOURCE_SET_NAME;\n                 task.skipHasRestTestCheck = true;\n-                task.coreConfig = compatSpec;\n-                project.getDependencies()\n-                    .add(\n-                        task.coreConfig.getName(),\n-                        project.files(checkoutDir.resolve(\"rest-api-spec/src/main/resources\").resolve(RELATIVE_API_PATH))\n-                    );\n-                task.xpackConfig = xpackCompatSpec;\n-                project.getDependencies()\n-                    .add(\n-                        task.xpackConfig.getName(),\n-                        project.files(checkoutDir.resolve(\"x-pack/plugin/src/test/resources\").resolve(RELATIVE_API_PATH))\n-                    );\n-                task.additionalConfig = additionalCompatSpec;\n-                // per project can define custom specifications\n-                project.getDependencies()\n-                    .add(\n-                        task.additionalConfig.getName(),\n-                        project.files(\n-                            getCompatProjectPath(project, checkoutDir).resolve(\"src/yamlRestTest/resources\").resolve(RELATIVE_API_PATH)\n-                        )\n-                    );\n-                task.dependsOn(task.coreConfig);\n-                task.dependsOn(task.xpackConfig);\n-                task.dependsOn(task.additionalConfig);\n-                task.dependsOn(\":distribution:bwc:minor:checkoutBwcBranch\");\n+                task.coreConfigToFileTree = config -> project.fileTree(\n+                    bwcMinorConfig.getSingleFile().toPath().resolve(\"rest-api-spec/src/main/resources\").resolve(RELATIVE_API_PATH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDM2NjIwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyNDozNFrOHhKNCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyNDozNFrOHhKNCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMjIzMw==", "bodyText": "Not strictly related but since we're here: can we change this task to use the ProjectLayout Service here instead of referencing the project object. This helps us moving (slowly) towards supporting the gradle configuration cache (https://docs.gradle.org/current/userguide/configuration_cache.html) You can inject the service e.g. via constructor and annotating that constructor with @Inject", "url": "https://github.com/elastic/elasticsearch/pull/63629#discussion_r504532233", "createdAt": "2020-10-14T09:24:34Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -117,21 +122,21 @@ public FileTree getInputDir() {\n         FileTree xpackFileTree = null;\n         if (includeXpack.get().isEmpty() == false) {\n             xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n-            xpackFileTree = xpackConfig.getAsFileTree().matching(xpackPatternSet);\n+            xpackFileTree = xpackConfigToFileTree.apply(xpackConfig).matching(xpackPatternSet);\n         }\n         boolean projectHasYamlRestTests = skipHasRestTestCheck || projectHasYamlRestTests();\n         if (includeCore.get().isEmpty() == false || projectHasYamlRestTests) {\n             if (BuildParams.isInternal()) {\n                 corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n-                coreFileTree = coreConfig.getAsFileTree().matching(corePatternSet); // directory on disk\n+                coreFileTree = coreConfigToFileTree.apply(coreConfig).matching(corePatternSet); // directory on disk\n             } else {\n                 coreFileTree = coreConfig.getAsFileTree(); // jar file\n             }\n         }\n \n         ConfigurableFileCollection fileCollection = additionalConfig == null\n             ? getProject().files(coreFileTree, xpackFileTree)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df3e61688cb5842d23ac1a65df8ddacba220ee4"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2987, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}