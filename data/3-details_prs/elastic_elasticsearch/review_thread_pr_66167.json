{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTQyNzAy", "number": 66167, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1NzozNlrOFDfZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoxNzoyNFrOFFdKQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA0NDUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1NzozNlrOIDKgSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1NzozNlrOIDKgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4ODc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.error(\"[\" + jobId + \"] error while extracting data\", e);\n          \n          \n            \n                            LOGGER.error(new ParameterizedMessage(\"[{}] error while extracting data\", jobId), e);\n          \n      \n    \n    \n  \n\nGreat to log the full trace now!!!", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540188744", "createdAt": "2020-12-10T13:57:36Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -318,7 +320,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n             try {\n                 extractedData = dataExtractor.next();\n             } catch (Exception e) {\n-                LOGGER.debug(\"[\" + jobId + \"] error while extracting data\", e);\n+                LOGGER.error(\"[\" + jobId + \"] error while extracting data\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72a8dd490b594997cee05b0525f86ce77a04843"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA0NTQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1Nzo1MFrOIDKg4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1Nzo1MFrOIDKg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4ODg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOGGER.error(\"[\" + jobId + \"] error while posting data\", e);\n          \n          \n            \n                            LOGGER.error(new ParameterizedMessage(\"[{}] error while posting data\", jobId), e);", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540188898", "createdAt": "2020-12-10T13:57:50Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -350,7 +352,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n                     if (isIsolated) {\n                         return;\n                     }\n-                    LOGGER.debug(\"[\" + jobId + \"] error while posting data\", e);\n+                    LOGGER.error(\"[\" + jobId + \"] error while posting data\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72a8dd490b594997cee05b0525f86ce77a04843"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA1NDA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1OTozNVrOIDKmCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0MTowMFrOIDMiBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MDIxOQ==", "bodyText": "Anyway to add the rest of the shard failures as suppressed?", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540190219", "createdAt": "2020-12-10T13:59:35Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {\n-       return org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+        // circuit breaking exceptions are at the bottom\n+        Throwable unwrappedThrowable = org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+\n+        if (unwrappedThrowable instanceof SearchPhaseExecutionException) {\n+            SearchPhaseExecutionException searchPhaseException = (SearchPhaseExecutionException) unwrappedThrowable;\n+            for (ShardSearchFailure shardFailure : searchPhaseException.shardFailures()) {\n+                Throwable unwrappedShardFailure = org.elasticsearch.ExceptionsHelper.unwrapCause(shardFailure.getCause());\n+\n+                if (unwrappedShardFailure instanceof ElasticsearchException) {\n+                    return unwrappedShardFailure;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72a8dd490b594997cee05b0525f86ce77a04843"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NDIyMg==", "bodyText": "Trying something like that can make the message unreadable. Note we're already logging the SearchPhaseExecutionException.\nI think there are 2 scenarios:\n\nthe search fails because of some user error (e.g. time field doesn't exist in some index). In this scenario there will be a single cause and we'll bubble it up.\nthe search fails due to the cluster being unstable. Here, we will have many shard failures. I think in this scenario we'd have to look at the logs anyhow to debug what's happening.\n\nHaving said that, I'm open to suggestions if you see another way.", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540194222", "createdAt": "2020-12-10T14:05:04Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {\n-       return org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+        // circuit breaking exceptions are at the bottom\n+        Throwable unwrappedThrowable = org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+\n+        if (unwrappedThrowable instanceof SearchPhaseExecutionException) {\n+            SearchPhaseExecutionException searchPhaseException = (SearchPhaseExecutionException) unwrappedThrowable;\n+            for (ShardSearchFailure shardFailure : searchPhaseException.shardFailures()) {\n+                Throwable unwrappedShardFailure = org.elasticsearch.ExceptionsHelper.unwrapCause(shardFailure.getCause());\n+\n+                if (unwrappedShardFailure instanceof ElasticsearchException) {\n+                    return unwrappedShardFailure;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MDIxOQ=="}, "originalCommit": {"oid": "c72a8dd490b594997cee05b0525f86ce77a04843"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMTk1Nw==", "bodyText": "I haven't explored this for search, but for indexing I use a similar method that tries to get the most important error. That means you could loop through the shard failures and get the most problematic one, e.g. IllegalArgumentException > RuntimeException, because the IAE is irrecoverable, the RE might just be a 429 (too manu requests).\nHaving that said: \"it depends\" on what you are aiming for with this", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540221957", "createdAt": "2020-12-10T14:41:00Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {\n-       return org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+        // circuit breaking exceptions are at the bottom\n+        Throwable unwrappedThrowable = org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+\n+        if (unwrappedThrowable instanceof SearchPhaseExecutionException) {\n+            SearchPhaseExecutionException searchPhaseException = (SearchPhaseExecutionException) unwrappedThrowable;\n+            for (ShardSearchFailure shardFailure : searchPhaseException.shardFailures()) {\n+                Throwable unwrappedShardFailure = org.elasticsearch.ExceptionsHelper.unwrapCause(shardFailure.getCause());\n+\n+                if (unwrappedShardFailure instanceof ElasticsearchException) {\n+                    return unwrappedShardFailure;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MDIxOQ=="}, "originalCommit": {"oid": "c72a8dd490b594997cee05b0525f86ce77a04843"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjE4NDM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyNTo1OFrOIDLz1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNzo1NlrOIFV9Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMDEzNA==", "bodyText": "I think this is a bad name as it collides with org.elasticsearch.ExceptionsHelper.unwrapCause\nNot saying getRootCauseException is a good one, maybe something that indicates the intent: unwrapping search responses, e.g. unwrapSearchException or findSearchExceptionRootCause.\nI think this method should not become a general exception handling method, but only for handling search errors. Otherwise the chances are high that code sharing lead to undesired bugs.\nFor that reason I think it would be good to move it out of the ml subpackage (despite this is just a logical but not technically limiting) into a more common area.\nTransform should use this without indirection.", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540210134", "createdAt": "2020-12-10T14:25:58Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxODkyNw==", "bodyText": "It is basically an unwrapCause that also handles SearchPhaseExecutionException. The problem with SearchPhaseExecutionException is that it doesn't implement ElasticsearchWrapperException. Let's discuss this further offline.", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540218927", "createdAt": "2020-12-10T14:37:09Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMDEzNA=="}, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzU1NA==", "bodyText": "OK, I have refactored the code to keep a method named findSearchExceptionRootCause instead of replacing unwrapCause.", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r542473554", "createdAt": "2020-12-14T15:27:56Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMDEzNA=="}, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjE5NzU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyODoyN1rOIDL7jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyODoyN1rOIDL7jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMjEwOA==", "bodyText": "see my 1st comment, this makes no sense to me", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540212108", "createdAt": "2020-12-10T14:28:27Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java", "diffHunk": "@@ -19,4 +19,11 @@\n         }\n         return obj;\n     }\n+\n+    /**\n+     * @see org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper#unwrapCause(Throwable)\n+     */\n+    public static Throwable unwrapCause(Throwable t) {\n+        return org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper.unwrapCause(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjIxMDM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozMDo1N1rOIDMDPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozNDo0MFrOIDMOkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDA3OA==", "bodyText": "now that you made it an error: should it be audited as well?", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540214078", "createdAt": "2020-12-10T14:30:57Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -318,7 +321,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n             try {\n                 extractedData = dataExtractor.next();\n             } catch (Exception e) {\n-                LOGGER.debug(\"[\" + jobId + \"] error while extracting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while extracting data\", jobId), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNjk3Ng==", "bodyText": "ProblemTracker makes sure this is audited", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540216976", "createdAt": "2020-12-10T14:34:40Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -318,7 +321,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n             try {\n                 extractedData = dataExtractor.next();\n             } catch (Exception e) {\n-                LOGGER.debug(\"[\" + jobId + \"] error while extracting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while extracting data\", jobId), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDA3OA=="}, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjIxMTQ0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozMTowOVrOIDMD2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozNDo0NFrOIDMOww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDIzNA==", "bodyText": "audit, too?", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540214234", "createdAt": "2020-12-10T14:31:09Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -350,7 +353,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n                     if (isIsolated) {\n                         return;\n                     }\n-                    LOGGER.debug(\"[\" + jobId + \"] error while posting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while posting data\", jobId), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNzAyNw==", "bodyText": "ProblemTracker makes sure this is audited", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540217027", "createdAt": "2020-12-10T14:34:44Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -350,7 +353,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n                     if (isIsolated) {\n                         return;\n                     }\n-                    LOGGER.debug(\"[\" + jobId + \"] error while posting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while posting data\", jobId), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDIzNA=="}, "originalCommit": {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjY0OTYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoxNzoyNFrOIF-RYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODozODo1MlrOIF_G0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNDA1MQ==", "bodyText": "Is this cross-package dependency ok?\nI'd consider introducing ExceptionsHelper class under org.elasticsearch.xpack.core.common instead.", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r543134051", "createdAt": "2020-12-15T08:17:24Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java", "diffHunk": "@@ -19,4 +19,11 @@\n         }\n         return obj;\n     }\n+\n+    /**\n+     * @see org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper#findSearchExceptionRootCause(Throwable)\n+     */\n+    public static Throwable findSearchExceptionRootCause(Throwable t) {\n+        return org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper.findSearchExceptionRootCause(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8a7806a75d7a5cae4855b8a4a259f341f5e60"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0NzczMA==", "bodyText": "We discussed this with Hendrik. It's not great but harmless otherwise. Adding another ExceptionsHelper class is marginally worse. There is much to improve in our exceptions handling framework. I am going to raise an issue that once fixed should make this method unnecessary.", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r543147730", "createdAt": "2020-12-15T08:38:52Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java", "diffHunk": "@@ -19,4 +19,11 @@\n         }\n         return obj;\n     }\n+\n+    /**\n+     * @see org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper#findSearchExceptionRootCause(Throwable)\n+     */\n+    public static Throwable findSearchExceptionRootCause(Throwable t) {\n+        return org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper.findSearchExceptionRootCause(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNDA1MQ=="}, "originalCommit": {"oid": "33c8a7806a75d7a5cae4855b8a4a259f341f5e60"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4732, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}