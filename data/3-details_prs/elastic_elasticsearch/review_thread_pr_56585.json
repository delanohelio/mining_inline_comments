{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjUwODE0", "number": 56585, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMDoyNFrOD7mhkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0MjozMFrOD8VE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODIzNzYxOnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMDoyNFrOGUBm9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo1MzoyN1rOGUC9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTA2MQ==", "bodyText": "I'm not really sure if we should ignore the exception here or propagate it.", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r423651061", "createdAt": "2020-05-12T11:10:24Z", "author": {"login": "fcofdez"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStore.java", "diffHunk": "@@ -411,4 +411,14 @@ private static String buildKey(String keyPath, String s) {\n         assert s != null;\n         return keyPath + s;\n     }\n+\n+    @Override\n+    public Map<String, Long> stats() {\n+        try {\n+            return storageService.stats(clientName).toMap();\n+        } catch (IOException e) {\n+            logger.error(() -> new ParameterizedMessage(\"unable to get GCS usage stats for client [{}]\", clientName), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3MzExOQ==", "bodyText": "This ties in with my other comment. I think the problem is that we are tracking per client instead of per repository stats now. Regardless, I think if we fail to get a client (however we will do that going forward then) here we should just propagate the exception here, no point in hiding it :)\nAlso, we tend to not log error for this kind of thing, I think just warn would be more in line with how we log elsewhere here.", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r423673119", "createdAt": "2020-05-12T11:53:27Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStore.java", "diffHunk": "@@ -411,4 +411,14 @@ private static String buildKey(String keyPath, String s) {\n         assert s != null;\n         return keyPath + s;\n     }\n+\n+    @Override\n+    public Map<String, Long> stats() {\n+        try {\n+            return storageService.stats(clientName).toMap();\n+        } catch (IOException e) {\n+            logger.error(() -> new ParameterizedMessage(\"unable to get GCS usage stats for client [{}]\", clientName), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTA2MQ=="}, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODIzOTgzOnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMTowNFrOGUBoWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMTowNFrOGUBoWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTQxOA==", "bodyText": "I would appreciate some feedback on better naming here.", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r423651418", "createdAt": "2020-05-12T11:11:04Z", "author": {"login": "fcofdez"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "diffHunk": "@@ -173,4 +198,107 @@ static Integer toTimeout(final TimeValue timeout) {\n         return Math.toIntExact(timeout.getMillis());\n     }\n \n+    private static class StorageService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODI0MDIyOnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMToxMVrOGUBonw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTowNzoyNlrOGUsjcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTQ4Nw==", "bodyText": "We talked about this a while back: It might still be nice to get insight on the failure rate for APIs. Let's count these under a different key like LIST_FAILED and GET_FAILED (with respective counters on the stats object added)?", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r423651487", "createdAt": "2020-05-12T11:11:11Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.gcs;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+final class GoogleCloudStorageHttpStatsCollector implements HttpResponseInterceptor {\n+    // The specification for the current API (v1) endpoints can be found at:\n+    // https://cloud.google.com/storage/docs/json_api/v1\n+    private static final List<HttpRequestTracker> trackers =\n+        List.of(\n+            HttpRequestTracker.get(\"/download/storage/v1/b/[a-z0-9._-]+/o/.+\",\n+                GoogleCloudStorageOperationsStats::trackGetObjectOperation),\n+\n+            HttpRequestTracker.get(\"/storage/v1/b/[a-z0-9._-]+/o/.+\",\n+                GoogleCloudStorageOperationsStats::trackGetObjectOperation),\n+\n+            HttpRequestTracker.get(\"/storage/v1/b/[a-z0-9._-]+/o\",\n+                GoogleCloudStorageOperationsStats::trackListObjectsOperation)\n+            );\n+\n+    private final GoogleCloudStorageOperationsStats gcsOperationStats;\n+\n+    GoogleCloudStorageHttpStatsCollector(final GoogleCloudStorageOperationsStats gcsOperationStats) {\n+        this.gcsOperationStats = gcsOperationStats;\n+    }\n+\n+    @Override\n+    public void interceptResponse(final HttpResponse response) {\n+        // Unsuccessful requests aren't billable, so we don't take those into account.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1NDY3Mw==", "bodyText": "This one is still open, let's do it here or add a TODO for it.", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424354673", "createdAt": "2020-05-13T11:07:26Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.gcs;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+final class GoogleCloudStorageHttpStatsCollector implements HttpResponseInterceptor {\n+    // The specification for the current API (v1) endpoints can be found at:\n+    // https://cloud.google.com/storage/docs/json_api/v1\n+    private static final List<HttpRequestTracker> trackers =\n+        List.of(\n+            HttpRequestTracker.get(\"/download/storage/v1/b/[a-z0-9._-]+/o/.+\",\n+                GoogleCloudStorageOperationsStats::trackGetObjectOperation),\n+\n+            HttpRequestTracker.get(\"/storage/v1/b/[a-z0-9._-]+/o/.+\",\n+                GoogleCloudStorageOperationsStats::trackGetObjectOperation),\n+\n+            HttpRequestTracker.get(\"/storage/v1/b/[a-z0-9._-]+/o\",\n+                GoogleCloudStorageOperationsStats::trackListObjectsOperation)\n+            );\n+\n+    private final GoogleCloudStorageOperationsStats gcsOperationStats;\n+\n+    GoogleCloudStorageHttpStatsCollector(final GoogleCloudStorageOperationsStats gcsOperationStats) {\n+        this.gcsOperationStats = gcsOperationStats;\n+    }\n+\n+    @Override\n+    public void interceptResponse(final HttpResponse response) {\n+        // Unsuccessful requests aren't billable, so we don't take those into account.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTQ4Nw=="}, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODI0Njg1OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMzoxN1rOGUBssQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMzoxN1rOGUBssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MjUyOQ==", "bodyText": "Just a style thing, we use matchesCriteria(httpRequest) == false here instead of !", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r423652529", "createdAt": "2020-05-12T11:13:17Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.gcs;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+final class GoogleCloudStorageHttpStatsCollector implements HttpResponseInterceptor {\n+    // The specification for the current API (v1) endpoints can be found at:\n+    // https://cloud.google.com/storage/docs/json_api/v1\n+    private static final List<HttpRequestTracker> trackers =\n+        List.of(\n+            HttpRequestTracker.get(\"/download/storage/v1/b/[a-z0-9._-]+/o/.+\",\n+                GoogleCloudStorageOperationsStats::trackGetObjectOperation),\n+\n+            HttpRequestTracker.get(\"/storage/v1/b/[a-z0-9._-]+/o/.+\",\n+                GoogleCloudStorageOperationsStats::trackGetObjectOperation),\n+\n+            HttpRequestTracker.get(\"/storage/v1/b/[a-z0-9._-]+/o\",\n+                GoogleCloudStorageOperationsStats::trackListObjectsOperation)\n+            );\n+\n+    private final GoogleCloudStorageOperationsStats gcsOperationStats;\n+\n+    GoogleCloudStorageHttpStatsCollector(final GoogleCloudStorageOperationsStats gcsOperationStats) {\n+        this.gcsOperationStats = gcsOperationStats;\n+    }\n+\n+    @Override\n+    public void interceptResponse(final HttpResponse response) {\n+        // Unsuccessful requests aren't billable, so we don't take those into account.\n+        if (!response.isSuccessStatusCode())\n+            return;\n+\n+        final HttpRequest request = response.getRequest();\n+        for (HttpRequestTracker tracker : trackers) {\n+            if (tracker.track(request, gcsOperationStats)) {\n+                return;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Http request tracker that allows to track certain HTTP requests based on the following criteria:\n+     * <ul>\n+     *     <li>The HTTP request method</li>\n+     *     <li>An URI path regex expression</li>\n+     * </ul>\n+     *\n+     * The requests that match the previous criteria are tracked using the {@code statsTracker} function.\n+     */\n+    private final static class HttpRequestTracker {\n+        private final String method;\n+        private final Pattern pathPattern;\n+        private final Consumer<GoogleCloudStorageOperationsStats> statsTracker;\n+\n+        private HttpRequestTracker(final String method,\n+                                   final String pathPattern,\n+                                   final Consumer<GoogleCloudStorageOperationsStats> statsTracker) {\n+            this.method = method;\n+            this.pathPattern = Pattern.compile(pathPattern);\n+            this.statsTracker = statsTracker;\n+        }\n+\n+        private static HttpRequestTracker get(final String pathPattern,\n+                                              final Consumer<GoogleCloudStorageOperationsStats> statsConsumer) {\n+            return new HttpRequestTracker(\"GET\", pathPattern, statsConsumer);\n+        }\n+\n+        /**\n+         * Tracks the provided http request if it matches the criteria defined by this tracker.\n+         *\n+         * @param httpRequest the http request to be tracked\n+         * @param stats the operation tracker\n+         *\n+         * @return {@code true} if the http request was tracked, {@code false} otherwise.\n+         */\n+        private boolean track(final HttpRequest httpRequest, final GoogleCloudStorageOperationsStats stats) {\n+            if (!matchesCriteria(httpRequest))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODMyNzc2OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTozODozMlrOGUCfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToxMzoyMVrOGUsuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2NTQ4MQ==", "bodyText": "The fact that we're matching any bucket name here shows an interesting problem with the implementation.\nYou can technically use a client instance across multiple repositories and hence buckets/paths. If we expose the stats per repository but use the client across multiple repositories, then the numbers will be wrong.\nSince we can't really have a way of enabling the tracking for specific requests (at least I don't think we can, but maybe we can find a way?) like we do in S3, we need to find some other mechanism for separating requests here.  A possible alternative may be to just not share clients across repositories (not great but it's relatively rare that clients get shared anyway and if there's no way of hooking into the client on a per request basis then I don't see another option). That would mean a little work by making org.elasticsearch.repositories.gcs.GoogleCloudStorageService#getStorageService take two arguments: the client name for finding the settings and the repository name to uniquely identify the repository but I think it's not too bad.", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r423665481", "createdAt": "2020-05-12T11:38:32Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.gcs;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+final class GoogleCloudStorageHttpStatsCollector implements HttpResponseInterceptor {\n+    // The specification for the current API (v1) endpoints can be found at:\n+    // https://cloud.google.com/storage/docs/json_api/v1\n+    private static final List<HttpRequestTracker> trackers =\n+        List.of(\n+            HttpRequestTracker.get(\"/download/storage/v1/b/[a-z0-9._-]+/o/.+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1NzQzMg==", "bodyText": "This is still open, I'm still a fan of adding the bucket name here I think and it should work flawlessly now that we have a client per repository. Seems like very little effort to do this and it makes the matching a little safer/more specific/(faster).", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424357432", "createdAt": "2020-05-13T11:13:21Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageHttpStatsCollector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.gcs;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+final class GoogleCloudStorageHttpStatsCollector implements HttpResponseInterceptor {\n+    // The specification for the current API (v1) endpoints can be found at:\n+    // https://cloud.google.com/storage/docs/json_api/v1\n+    private static final List<HttpRequestTracker> trackers =\n+        List.of(\n+            HttpRequestTracker.get(\"/download/storage/v1/b/[a-z0-9._-]+/o/.+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2NTQ4MQ=="}, "originalCommit": {"oid": "a25cbd4d33feb13279210e91597ff9332732c17c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTU1ODgzOnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo1NDozMFrOGUiY6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo1NDozMFrOGUiY6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4ODEzOQ==", "bodyText": "I think we can do this way shorter (no need for our owned named builder implementation) by simply doing this:\n        final HttpTransportOptions httpTransportOptions = new HttpTransportOptions(HttpTransportOptions.newBuilder()\n                .setConnectTimeout(toTimeout(clientSettings.getConnectTimeout()))\n                .setReadTimeout(toTimeout(clientSettings.getReadTimeout()))\n                .setHttpTransportFactory(() -> httpTransport)) {\n\n            @Override\n            public HttpRequestInitializer getHttpRequestInitializer(ServiceOptions<?, ?> serviceOptions) {\n                HttpRequestInitializer requestInitializer = super.getHttpRequestInitializer(serviceOptions);\n\n                return (httpRequest) -> {\n                    if (requestInitializer != null)\n                        requestInitializer.initialize(httpRequest);\n\n                    httpRequest.setResponseInterceptor(httpStatsCollector);\n                };\n            }\n        };\nright?", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424188139", "createdAt": "2020-05-13T05:54:30Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "diffHunk": "@@ -82,41 +77,73 @@ public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClie\n      * method.\n      *\n      * @param clientName name of the client settings used to create the client\n+     * @param repositoryName name of the repository that would use the client\n+     * @param stats the stats collector used to gather information about the underlying SKD API calls.\n      * @return a cached client storage instance that can be used to manage objects\n      *         (blobs)\n      */\n-    public Storage client(final String clientName) throws IOException {\n-        final LazyInitializable<Storage, IOException> lazyClient = clientsCache.get().get(clientName);\n-        if (lazyClient == null) {\n-            throw new IllegalArgumentException(\"Unknown client name [\" + clientName + \"]. Existing client configs: \"\n-                    + Strings.collectionToDelimitedString(clientsCache.get().keySet(), \",\"));\n+    public Storage client(final String clientName,\n+                          final String repositoryName,\n+                          final GoogleCloudStorageOperationsStats stats) throws IOException {\n+        {\n+            final Storage storage = clientCache.get(clientKey(clientName, repositoryName));\n+            if (storage != null) {\n+                return storage;\n+            }\n+        }\n+        synchronized (this) {\n+            final Storage existing = clientCache.get(clientKey(clientName, repositoryName));\n+\n+            if (existing != null) {\n+                return existing;\n+            }\n+\n+            final GoogleCloudStorageClientSettings settings = clientSettings.get(clientName);\n+\n+            if (settings == null) {\n+                throw new IllegalArgumentException(\"Unknown client name [\" + clientName + \"]. Existing client configs: \"\n+                    + Strings.collectionToDelimitedString(clientSettings.keySet(), \",\"));\n+            }\n+\n+            logger.debug(() -> new ParameterizedMessage(\"creating GCS client with client_name [{}], endpoint [{}]\", clientName,\n+                settings.getHost()));\n+            final Storage storage = createClient(settings, stats);\n+            clientCache = Maps.copyMapWithAddedEntry(clientCache, clientKey(clientName, repositoryName), storage);\n+            return storage;\n         }\n-        return lazyClient.getOrCompute();\n+    }\n+\n+    private String clientKey(String clientName, String repositoryName) {\n+        return clientName + \"-\" + repositoryName;\n     }\n \n     /**\n      * Creates a client that can be used to manage Google Cloud Storage objects. The client is thread-safe.\n      *\n-     * @param clientName name of client settings to use, including secure settings\n-     * @param clientSettings name of client settings to use, including secure settings\n+     * @param clientSettings client settings to use, including secure settings\n+     * @param stats the stats collector to use by the underlying SDK\n      * @return a new client storage instance that can be used to manage objects\n      *         (blobs)\n      */\n-    private Storage createClient(String clientName, GoogleCloudStorageClientSettings clientSettings) throws IOException {\n-        logger.debug(() -> new ParameterizedMessage(\"creating GCS client with client_name [{}], endpoint [{}]\", clientName,\n-                clientSettings.getHost()));\n+    private Storage createClient(GoogleCloudStorageClientSettings clientSettings,\n+                                 GoogleCloudStorageOperationsStats stats) throws IOException {\n         final HttpTransport httpTransport = SocketAccess.doPrivilegedIOException(() -> {\n             final NetHttpTransport.Builder builder = new NetHttpTransport.Builder();\n             // requires java.lang.RuntimePermission \"setFactory\"\n             // Pin the TLS trust certificates.\n             builder.trustCertificates(GoogleUtils.getCertificateTrustStore());\n             return builder.build();\n         });\n-        final HttpTransportOptions httpTransportOptions = HttpTransportOptions.newBuilder()\n+\n+        final GoogleCloudStorageHttpStatsCollector httpStatsCollector = new GoogleCloudStorageHttpStatsCollector(stats);\n+\n+        final HttpTransportOptions httpTransportOptions = HttpTransportWithResponseInterceptorOptions.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7191b1aa045bfc8f57fc245c4c4c3af1eb733899"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTU1OTM5OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo1NDo0OVrOGUiZQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo1NDo0OVrOGUiZQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4ODIyNg==", "bodyText": "NIT: revert empty line", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424188226", "createdAt": "2020-05-13T05:54:49Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "diffHunk": "@@ -82,41 +77,73 @@ public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClie\n      * method.\n      *\n      * @param clientName name of the client settings used to create the client\n+     * @param repositoryName name of the repository that would use the client\n+     * @param stats the stats collector used to gather information about the underlying SKD API calls.\n      * @return a cached client storage instance that can be used to manage objects\n      *         (blobs)\n      */\n-    public Storage client(final String clientName) throws IOException {\n-        final LazyInitializable<Storage, IOException> lazyClient = clientsCache.get().get(clientName);\n-        if (lazyClient == null) {\n-            throw new IllegalArgumentException(\"Unknown client name [\" + clientName + \"]. Existing client configs: \"\n-                    + Strings.collectionToDelimitedString(clientsCache.get().keySet(), \",\"));\n+    public Storage client(final String clientName,\n+                          final String repositoryName,\n+                          final GoogleCloudStorageOperationsStats stats) throws IOException {\n+        {\n+            final Storage storage = clientCache.get(clientKey(clientName, repositoryName));\n+            if (storage != null) {\n+                return storage;\n+            }\n+        }\n+        synchronized (this) {\n+            final Storage existing = clientCache.get(clientKey(clientName, repositoryName));\n+\n+            if (existing != null) {\n+                return existing;\n+            }\n+\n+            final GoogleCloudStorageClientSettings settings = clientSettings.get(clientName);\n+\n+            if (settings == null) {\n+                throw new IllegalArgumentException(\"Unknown client name [\" + clientName + \"]. Existing client configs: \"\n+                    + Strings.collectionToDelimitedString(clientSettings.keySet(), \",\"));\n+            }\n+\n+            logger.debug(() -> new ParameterizedMessage(\"creating GCS client with client_name [{}], endpoint [{}]\", clientName,\n+                settings.getHost()));\n+            final Storage storage = createClient(settings, stats);\n+            clientCache = Maps.copyMapWithAddedEntry(clientCache, clientKey(clientName, repositoryName), storage);\n+            return storage;\n         }\n-        return lazyClient.getOrCompute();\n+    }\n+\n+    private String clientKey(String clientName, String repositoryName) {\n+        return clientName + \"-\" + repositoryName;\n     }\n \n     /**\n      * Creates a client that can be used to manage Google Cloud Storage objects. The client is thread-safe.\n      *\n-     * @param clientName name of client settings to use, including secure settings\n-     * @param clientSettings name of client settings to use, including secure settings\n+     * @param clientSettings client settings to use, including secure settings\n+     * @param stats the stats collector to use by the underlying SDK\n      * @return a new client storage instance that can be used to manage objects\n      *         (blobs)\n      */\n-    private Storage createClient(String clientName, GoogleCloudStorageClientSettings clientSettings) throws IOException {\n-        logger.debug(() -> new ParameterizedMessage(\"creating GCS client with client_name [{}], endpoint [{}]\", clientName,\n-                clientSettings.getHost()));\n+    private Storage createClient(GoogleCloudStorageClientSettings clientSettings,\n+                                 GoogleCloudStorageOperationsStats stats) throws IOException {\n         final HttpTransport httpTransport = SocketAccess.doPrivilegedIOException(() -> {\n             final NetHttpTransport.Builder builder = new NetHttpTransport.Builder();\n             // requires java.lang.RuntimePermission \"setFactory\"\n             // Pin the TLS trust certificates.\n             builder.trustCertificates(GoogleUtils.getCertificateTrustStore());\n             return builder.build();\n         });\n-        final HttpTransportOptions httpTransportOptions = HttpTransportOptions.newBuilder()\n+\n+        final GoogleCloudStorageHttpStatsCollector httpStatsCollector = new GoogleCloudStorageHttpStatsCollector(stats);\n+\n+        final HttpTransportOptions httpTransportOptions = HttpTransportWithResponseInterceptorOptions.builder()\n             .setConnectTimeout(toTimeout(clientSettings.getConnectTimeout()))\n             .setReadTimeout(toTimeout(clientSettings.getReadTimeout()))\n             .setHttpTransportFactory(() -> httpTransport)\n+            .setHttpResponseInterceptor(httpStatsCollector)\n             .build();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7191b1aa045bfc8f57fc245c4c4c3af1eb733899"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTU1OTkyOnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo1NTowMlrOGUiZhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo1NTowMlrOGUiZhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4ODI5NA==", "bodyText": "See above, I don't think we need this", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424188294", "createdAt": "2020-05-13T05:55:02Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "diffHunk": "@@ -173,4 +200,97 @@ static Integer toTimeout(final TimeValue timeout) {\n         return Math.toIntExact(timeout.getMillis());\n     }\n \n+    /**\n+     * Custom HttpTransportOptions that allows injecting an {@link HttpResponseInterceptor}, this is not possible\n+     * with the public API provided by the SDK.\n+     */\n+    private static class HttpTransportWithResponseInterceptorOptions extends HttpTransportOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7191b1aa045bfc8f57fc245c4c4c3af1eb733899"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTU5ODA0OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoxMjo0MVrOGUiwpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoxMjo0MVrOGUiwpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5NDIxMw==", "bodyText": "The approach here looks fine now in general but we need to enhance it to deal with closing repositories somehow don't we?\nOtherwise, we get two problems:\n\nIf we close a repository its client will still be in this map, effectively creating a memory leak? (looks like we're actually making a similar mistake in org.elasticsearch.repositories.s3.S3Service#derivedClientSettings that we could fix eventually ... but leaking full Storage instances seems a little scarier since they hold on to non-trivial resources with the internal http client and such)\nIf we close a repository and re-create it at a later date, we'll the stats instance from the previous repository right? (see below)", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424194213", "createdAt": "2020-05-13T06:12:41Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "diffHunk": "@@ -32,25 +36,26 @@\n import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.collect.MapBuilder;\n import org.elasticsearch.common.unit.TimeValue;\n-import org.elasticsearch.common.util.LazyInitializable;\n+import org.elasticsearch.common.util.Maps;\n \n import java.io.IOException;\n import java.net.URI;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.stream.Collectors;\n \n import static java.util.Collections.emptyMap;\n \n public class GoogleCloudStorageService {\n-    \n+\n     private static final Logger logger = LogManager.getLogger(GoogleCloudStorageService.class);\n \n+    private volatile Map<String, GoogleCloudStorageClientSettings> clientSettings = emptyMap();\n+\n     /**\n      * Dictionary of client instances. Client instances are built lazily from the\n-     * latest settings.\n+     * latest settings. Each repository has its own client instance identified by\n+     * a key created using {@link #clientKey(String, String)}.\n      */\n-    private final AtomicReference<Map<String, LazyInitializable<Storage, IOException>>> clientsCache = new AtomicReference<>(emptyMap());\n+    private volatile Map<String, Storage> clientCache = emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7191b1aa045bfc8f57fc245c4c4c3af1eb733899"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTYwMTE4OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoxMzo1MlrOGUiylw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoxMzo1MlrOGUiylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5NDcxMQ==", "bodyText": "See my comment above, if we close and reopen a repository then it looks like we could get an old Storage instance here that doesn't use the passed stats but rather the stats from the previous repository right?", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424194711", "createdAt": "2020-05-13T06:13:52Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "diffHunk": "@@ -82,41 +77,73 @@ public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClie\n      * method.\n      *\n      * @param clientName name of the client settings used to create the client\n+     * @param repositoryName name of the repository that would use the client\n+     * @param stats the stats collector used to gather information about the underlying SKD API calls.\n      * @return a cached client storage instance that can be used to manage objects\n      *         (blobs)\n      */\n-    public Storage client(final String clientName) throws IOException {\n-        final LazyInitializable<Storage, IOException> lazyClient = clientsCache.get().get(clientName);\n-        if (lazyClient == null) {\n-            throw new IllegalArgumentException(\"Unknown client name [\" + clientName + \"]. Existing client configs: \"\n-                    + Strings.collectionToDelimitedString(clientsCache.get().keySet(), \",\"));\n+    public Storage client(final String clientName,\n+                          final String repositoryName,\n+                          final GoogleCloudStorageOperationsStats stats) throws IOException {\n+        {\n+            final Storage storage = clientCache.get(clientKey(clientName, repositoryName));\n+            if (storage != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7191b1aa045bfc8f57fc245c4c4c3af1eb733899"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTY0Njk0OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjozMzoyMlrOGUjOkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjozMzoyMlrOGUjOkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMTg3Mw==", "bodyText": "NIT: redundant empty line", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424201873", "createdAt": "2020-05-13T06:33:22Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageServiceTests.java", "diffHunk": "@@ -92,31 +97,54 @@ public void testReinitClientSettings() throws Exception {\n         final Settings settings2 = Settings.builder().setSecureSettings(secureSettings2).build();\n         try (GoogleCloudStoragePlugin plugin = new GoogleCloudStoragePlugin(settings1)) {\n             final GoogleCloudStorageService storageService = plugin.storageService;\n-            final Storage client11 = storageService.client(\"gcs1\");\n+            GoogleCloudStorageOperationsStats statsCollector = new GoogleCloudStorageOperationsStats();\n+            final Storage client11 = storageService.client(\"gcs1\", \"repo\", statsCollector);\n             assertThat(client11.getOptions().getProjectId(), equalTo(\"project_gcs11\"));\n-            final Storage client12 = storageService.client(\"gcs2\");\n+            final Storage client12 = storageService.client(\"gcs2\", \"repo\", statsCollector);\n             assertThat(client12.getOptions().getProjectId(), equalTo(\"project_gcs12\"));\n             // client 3 is missing\n-            final IllegalArgumentException e1 = expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs3\"));\n+            final IllegalArgumentException e1 =\n+                expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs3\", \"repo\", statsCollector));\n             assertThat(e1.getMessage(), containsString(\"Unknown client name [gcs3].\"));\n             // update client settings\n             plugin.reload(settings2);\n             // old client 1 not changed\n             assertThat(client11.getOptions().getProjectId(), equalTo(\"project_gcs11\"));\n             // new client 1 is changed\n-            final Storage client21 = storageService.client(\"gcs1\");\n+            final Storage client21 = storageService.client(\"gcs1\", \"repo\", statsCollector);\n             assertThat(client21.getOptions().getProjectId(), equalTo(\"project_gcs21\"));\n             // old client 2 not changed\n             assertThat(client12.getOptions().getProjectId(), equalTo(\"project_gcs12\"));\n             // new client2 is gone\n-            final IllegalArgumentException e2 = expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs2\"));\n+            final IllegalArgumentException e2 =\n+                expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs2\", \"repo\", statsCollector));\n             assertThat(e2.getMessage(), containsString(\"Unknown client name [gcs2].\"));\n             // client 3 emerged\n-            final Storage client23 = storageService.client(\"gcs3\");\n+            final Storage client23 = storageService.client(\"gcs3\", \"repo\", statsCollector);\n             assertThat(client23.getOptions().getProjectId(), equalTo(\"project_gcs23\"));\n         }\n     }\n \n+    public void testClientsAreNotSharedAcrossRepositories() throws Exception {\n+        final MockSecureSettings secureSettings1 = new MockSecureSettings();\n+        secureSettings1.setFile(\"gcs.client.gcs1.credentials_file\", serviceAccountFileContent(\"test_project\"));\n+        final Settings settings = Settings.builder().setSecureSettings(secureSettings1).build();\n+        try (GoogleCloudStoragePlugin plugin = new GoogleCloudStoragePlugin(settings)) {\n+            final GoogleCloudStorageService storageService = plugin.storageService;\n+\n+            final Storage repo1Client =\n+                storageService.client(\"gcs1\", \"repo1\", new GoogleCloudStorageOperationsStats());\n+            final Storage repo2Client =\n+                storageService.client(\"gcs1\", \"repo2\", new GoogleCloudStorageOperationsStats());\n+            final Storage repo1ClientSecondInstance =\n+                storageService.client(\"gcs1\", \"repo1\", new GoogleCloudStorageOperationsStats());\n+\n+            assertThat(repo1Client, is(not(theInstance(repo2Client))));\n+            assertThat(repo1Client, is(theInstance(repo1ClientSecondInstance)));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7191b1aa045bfc8f57fc245c4c4c3af1eb733899"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg1OTMyOnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozOTozOVrOGVMvJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozOTozOVrOGVMvJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MTk1Nw==", "bodyText": "NIT: we have the assertNotSame(repo1Client, repo2Client) shortcut here :)", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424881957", "createdAt": "2020-05-14T05:39:39Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageServiceTests.java", "diffHunk": "@@ -92,31 +97,53 @@ public void testReinitClientSettings() throws Exception {\n         final Settings settings2 = Settings.builder().setSecureSettings(secureSettings2).build();\n         try (GoogleCloudStoragePlugin plugin = new GoogleCloudStoragePlugin(settings1)) {\n             final GoogleCloudStorageService storageService = plugin.storageService;\n-            final Storage client11 = storageService.client(\"gcs1\");\n+            GoogleCloudStorageOperationsStats statsCollector = new GoogleCloudStorageOperationsStats(\"bucket\");\n+            final Storage client11 = storageService.client(\"gcs1\", \"repo\", statsCollector);\n             assertThat(client11.getOptions().getProjectId(), equalTo(\"project_gcs11\"));\n-            final Storage client12 = storageService.client(\"gcs2\");\n+            final Storage client12 = storageService.client(\"gcs2\", \"repo\", statsCollector);\n             assertThat(client12.getOptions().getProjectId(), equalTo(\"project_gcs12\"));\n             // client 3 is missing\n-            final IllegalArgumentException e1 = expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs3\"));\n+            final IllegalArgumentException e1 =\n+                expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs3\", \"repo\", statsCollector));\n             assertThat(e1.getMessage(), containsString(\"Unknown client name [gcs3].\"));\n             // update client settings\n             plugin.reload(settings2);\n             // old client 1 not changed\n             assertThat(client11.getOptions().getProjectId(), equalTo(\"project_gcs11\"));\n             // new client 1 is changed\n-            final Storage client21 = storageService.client(\"gcs1\");\n+            final Storage client21 = storageService.client(\"gcs1\", \"repo\", statsCollector);\n             assertThat(client21.getOptions().getProjectId(), equalTo(\"project_gcs21\"));\n             // old client 2 not changed\n             assertThat(client12.getOptions().getProjectId(), equalTo(\"project_gcs12\"));\n             // new client2 is gone\n-            final IllegalArgumentException e2 = expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs2\"));\n+            final IllegalArgumentException e2 =\n+                expectThrows(IllegalArgumentException.class, () -> storageService.client(\"gcs2\", \"repo\", statsCollector));\n             assertThat(e2.getMessage(), containsString(\"Unknown client name [gcs2].\"));\n             // client 3 emerged\n-            final Storage client23 = storageService.client(\"gcs3\");\n+            final Storage client23 = storageService.client(\"gcs3\", \"repo\", statsCollector);\n             assertThat(client23.getOptions().getProjectId(), equalTo(\"project_gcs23\"));\n         }\n     }\n \n+    public void testClientsAreNotSharedAcrossRepositories() throws Exception {\n+        final MockSecureSettings secureSettings1 = new MockSecureSettings();\n+        secureSettings1.setFile(\"gcs.client.gcs1.credentials_file\", serviceAccountFileContent(\"test_project\"));\n+        final Settings settings = Settings.builder().setSecureSettings(secureSettings1).build();\n+        try (GoogleCloudStoragePlugin plugin = new GoogleCloudStoragePlugin(settings)) {\n+            final GoogleCloudStorageService storageService = plugin.storageService;\n+\n+            final Storage repo1Client =\n+                storageService.client(\"gcs1\", \"repo1\", new GoogleCloudStorageOperationsStats(\"bucket\"));\n+            final Storage repo2Client =\n+                storageService.client(\"gcs1\", \"repo2\", new GoogleCloudStorageOperationsStats(\"bucket\"));\n+            final Storage repo1ClientSecondInstance =\n+                storageService.client(\"gcs1\", \"repo1\", new GoogleCloudStorageOperationsStats(\"bucket\"));\n+\n+            assertThat(repo1Client, is(not(theInstance(repo2Client))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4620f03f4affd8de1cdc80fc1164c58e936deb48"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg2NDc3OnYy", "diffSide": "RIGHT", "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0MjozMFrOGVMycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0MjozMFrOGVMycA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjgwMA==", "bodyText": "I just realized this working on #56703, do we even need to do this compound key magic? We can just cache the clients by repositoryName and it's all good as far as I can see? We never have two repos by the same name, so we can keep this simple right?", "url": "https://github.com/elastic/elasticsearch/pull/56585#discussion_r424882800", "createdAt": "2020-05-14T05:42:30Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageService.java", "diffHunk": "@@ -82,41 +75,88 @@ public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClie\n      * method.\n      *\n      * @param clientName name of the client settings used to create the client\n+     * @param repositoryName name of the repository that would use the client\n+     * @param stats the stats collector used to gather information about the underlying SKD API calls.\n      * @return a cached client storage instance that can be used to manage objects\n      *         (blobs)\n      */\n-    public Storage client(final String clientName) throws IOException {\n-        final LazyInitializable<Storage, IOException> lazyClient = clientsCache.get().get(clientName);\n-        if (lazyClient == null) {\n-            throw new IllegalArgumentException(\"Unknown client name [\" + clientName + \"]. Existing client configs: \"\n-                    + Strings.collectionToDelimitedString(clientsCache.get().keySet(), \",\"));\n+    public Storage client(final String clientName,\n+                          final String repositoryName,\n+                          final GoogleCloudStorageOperationsStats stats) throws IOException {\n+        {\n+            final Storage storage = clientCache.get(clientKey(clientName, repositoryName));\n+            if (storage != null) {\n+                return storage;\n+            }\n         }\n-        return lazyClient.getOrCompute();\n+        synchronized (this) {\n+            final Storage existing = clientCache.get(clientKey(clientName, repositoryName));\n+\n+            if (existing != null) {\n+                return existing;\n+            }\n+\n+            final GoogleCloudStorageClientSettings settings = clientSettings.get(clientName);\n+\n+            if (settings == null) {\n+                throw new IllegalArgumentException(\"Unknown client name [\" + clientName + \"]. Existing client configs: \"\n+                    + Strings.collectionToDelimitedString(clientSettings.keySet(), \",\"));\n+            }\n+\n+            logger.debug(() -> new ParameterizedMessage(\"creating GCS client with client_name [{}], endpoint [{}]\", clientName,\n+                settings.getHost()));\n+            final Storage storage = createClient(settings, stats);\n+            clientCache = Maps.copyMapWithAddedEntry(clientCache, clientKey(clientName, repositoryName), storage);\n+            return storage;\n+        }\n+    }\n+\n+    private String clientKey(String clientName, String repositoryName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4620f03f4affd8de1cdc80fc1164c58e936deb48"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 455, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}