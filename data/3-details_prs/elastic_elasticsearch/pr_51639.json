{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Njc2MjEx", "number": 51639, "title": "Wire Percentiles aggregator into new VS framework", "bodyText": "This required a bit of a refactor to percentiles itself.  Before, the Builder would switch on the chosen algo to generate an algo-specific factory.  This doesn't work (or at least, would be difficult) in the new VS framework.\nThis refactor consolidates both factories together and introduces a PercentilesConfig object to act as a standardized way to pass algo-specific parameters through the factory.  This object is then used when deciding which kind of aggregator to create\nNote: CoreValuesSourceType.HISTOGRAM still lives in core, and will be moved in a subsequent PR.", "createdAt": "2020-01-29T17:22:15Z", "url": "https://github.com/elastic/elasticsearch/pull/51639", "merged": true, "mergeCommit": {"oid": "24669387918b8a010147b840c2aae2ea0b20a048"}, "closed": true, "closedAt": "2020-01-31T18:14:09Z", "author": {"login": "polyfractal"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_JPXMgH2gAyMzY4Njc2MjExOmE5NTRiMTUwMDU5ZDhjNDA5MGM1ZWY1MDY0YTYwZDgxMjQ2ZWQ3MWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_xNQRgH2gAyMzY4Njc2MjExOmQ0YjY0MjY4OGQyNTQzZTQ4NmQ4ZWE3YmI5OWU2Y2I2MTFhNGRiZGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a954b150059d8c4090c5ef5064a60d81246ed71c", "author": {"user": {"login": "polyfractal", "name": "Zachary Tong"}}, "url": "https://github.com/elastic/elasticsearch/commit/a954b150059d8c4090c5ef5064a60d81246ed71c", "committedDate": "2020-01-29T17:18:05Z", "message": "Wire Percentiles aggregator into new VS framework\n\nThis required a bit of a refactor to percentiles itself.  Before,\nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least, would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core, and will\nbe moved in a subsequent PR."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTUxNjc1", "url": "https://github.com/elastic/elasticsearch/pull/51639#pullrequestreview-351551675", "createdAt": "2020-01-31T14:45:39Z", "commit": {"oid": "a954b150059d8c4090c5ef5064a60d81246ed71c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo0NTozOVrOFkNjSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo0NTozOVrOFkNjSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxNTA4MQ==", "bodyText": "In the builder, we throw IllegalStateException for an unknown method.  Even if we never expect to hit this, we should be consistent.  I don't know which is correct, but we should pick one and use it.", "url": "https://github.com/elastic/elasticsearch/pull/51639#discussion_r373515081", "createdAt": "2020-01-31T14:45:39Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentilesAggregatorFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.metrics;\n+\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationExecutionException;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesAggregationBuilder.PercentilesConfig;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.AggregatorSupplier;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This factory is used to generate both TDigest and HDRHisto aggregators, depending\n+ * on the selected method\n+ */\n+class PercentilesAggregatorFactory extends ValuesSourceAggregatorFactory {\n+\n+    private final double[] percents;\n+    private final PercentilesConfig percentilesConfig;\n+    private final boolean keyed;\n+\n+    static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(PercentilesAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM),\n+            new PercentilesAggregatorSupplier() {\n+                @Override\n+                public Aggregator build(String name, ValuesSource valuesSource, SearchContext context, Aggregator parent,\n+                                        double[] percents, PercentilesConfig percentilesConfig, boolean keyed, DocValueFormat formatter,\n+                                        List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {\n+\n+                    if (percentilesConfig.getMethod().equals(PercentilesMethod.TDIGEST)) {\n+                        double compression = ((PercentilesConfig.TDigestConfig)percentilesConfig).getCompression();\n+                        return new TDigestPercentilesAggregator(name, valuesSource, context, parent, percents, compression, keyed,\n+                            formatter, pipelineAggregators, metaData);\n+                    } else if (percentilesConfig.getMethod().equals(PercentilesMethod.HDR)) {\n+                        int numSigFig = ((PercentilesConfig.HdrHistoConfig)percentilesConfig).getNumberOfSignificantValueDigits();\n+                        return new HDRPercentilesAggregator(name, valuesSource, context, parent, percents, numSigFig, keyed,\n+                            formatter, pipelineAggregators, metaData);\n+                    }\n+\n+                    // This should already have thrown but just in case\n+                    throw new IllegalArgumentException(\"Unknown percentiles method: [\" + percentilesConfig.getMethod().toString() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a954b150059d8c4090c5ef5064a60d81246ed71c"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b642688d2543e486d8ea7bb99e6cb611a4dbda", "author": {"user": {"login": "polyfractal", "name": "Zachary Tong"}}, "url": "https://github.com/elastic/elasticsearch/commit/d4b642688d2543e486d8ea7bb99e6cb611a4dbda", "committedDate": "2020-01-31T15:51:59Z", "message": "Use IllegalStateException with unknown methods"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3061, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}