{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTk4MjIz", "number": 63963, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMjozNlrOEwXELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODo1ODoxN1rOFCzt9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ1MDA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMjozNlrOHl3k_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMjozNlrOHl3k_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2OTk1MA==", "bodyText": "I am not sure if we should pursue this. But without it, we'd never have the same searcher id between copies except with searchable snapshots.", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r509469950", "createdAt": "2020-10-21T17:22:36Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java", "diffHunk": "@@ -35,12 +42,48 @@\n \n     private final ShardId shardId;\n     private final FilterDirectoryReader.SubReaderWrapper wrapper;\n+    private final CheckedFunction<DirectoryReader, String, IOException> readerIdGenerator;\n+    private final String readerId;\n \n-    private ElasticsearchDirectoryReader(DirectoryReader in, FilterDirectoryReader.SubReaderWrapper wrapper,\n-            ShardId shardId) throws IOException {\n+    private ElasticsearchDirectoryReader(DirectoryReader in, FilterDirectoryReader.SubReaderWrapper wrapper, ShardId shardId,\n+                                         CheckedFunction<DirectoryReader, String, IOException> readerIdGenerator) throws IOException {\n         super(in, wrapper);\n         this.wrapper = wrapper;\n         this.shardId = shardId;\n+        this.readerIdGenerator = readerIdGenerator;\n+        this.readerId = readerIdGenerator.apply(in);\n+    }\n+\n+    /**\n+     * If two readers have the same reader id, then their underlying reader must consist of the same list of segments.\n+     */\n+    @Nullable\n+    public String getReaderId() {\n+        return readerId;\n+    }\n+\n+    public static String getReaderIdFromSegmentInfos(SegmentInfos segmentInfos, BooleanSupplier fullyCommitted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db30e62f405741884e325805ef4de80f1f9949d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDE5MDc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1NDo0OFrOHmTFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1NDo0OFrOHmTFHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyMDU0Mg==", "bodyText": "It is not clear to me that this is valid across different shard copies. The id generation starts somewhere random and then increments. I acknowledge the risk is small and I did not dig deeply into whether this increases the risk of collissions over using more standard uuid generation.", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r509920542", "createdAt": "2020-10-22T06:54:48Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java", "diffHunk": "@@ -35,12 +42,48 @@\n \n     private final ShardId shardId;\n     private final FilterDirectoryReader.SubReaderWrapper wrapper;\n+    private final CheckedFunction<DirectoryReader, String, IOException> readerIdGenerator;\n+    private final String readerId;\n \n-    private ElasticsearchDirectoryReader(DirectoryReader in, FilterDirectoryReader.SubReaderWrapper wrapper,\n-            ShardId shardId) throws IOException {\n+    private ElasticsearchDirectoryReader(DirectoryReader in, FilterDirectoryReader.SubReaderWrapper wrapper, ShardId shardId,\n+                                         CheckedFunction<DirectoryReader, String, IOException> readerIdGenerator) throws IOException {\n         super(in, wrapper);\n         this.wrapper = wrapper;\n         this.shardId = shardId;\n+        this.readerIdGenerator = readerIdGenerator;\n+        this.readerId = readerIdGenerator.apply(in);\n+    }\n+\n+    /**\n+     * If two readers have the same reader id, then their underlying reader must consist of the same list of segments.\n+     */\n+    @Nullable\n+    public String getReaderId() {\n+        return readerId;\n+    }\n+\n+    public static String getReaderIdFromSegmentInfos(SegmentInfos segmentInfos, BooleanSupplier fullyCommitted) {\n+        // Here we prefer using an id composed of the ids of the underlying segments instead of the id of the commit because\n+        // the commit id changes whenever IndexWriter#commit is called although the segment files stay unchanged. A file-based\n+        // recovery creates a new commit to associate the new translog uuid. Hence, the commit ids of the primary and replicas\n+        // are always different although they can have the identical segment files.\n+        final MessageDigest md = MessageDigests.sha256();\n+        for (SegmentCommitInfo sci : segmentInfos) {\n+            final byte[] segmentId = sci.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db30e62f405741884e325805ef4de80f1f9949d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTE2NTAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/Engine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNjo0ODowNVrOH4uEAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxOTozOFrOH9i-zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzNjk5Mg==", "bodyText": "identical content at the Lucene document level.\n\nMaybe:\nidentical Lucene level indices, i.e., identical segments with same docs using same doc-ids.", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r529236992", "createdAt": "2020-11-24T06:48:05Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/index/engine/Engine.java", "diffHunk": "@@ -1205,6 +1205,15 @@ public final void close() {\n         protected abstract void doClose();\n \n         protected abstract Searcher acquireSearcherInternal(String source);\n+\n+        /**\n+         * Returns a commit id associated with this searcher if it's opened from an index commit; otherwise, return null.\n+         * Two searcher with the same commit id must have identical content at the Lucene document level.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f310d4702cbc689e925cca048cd40b45da1096"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5ODMxOA==", "bodyText": "see 193b631", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r534298318", "createdAt": "2020-12-02T16:19:38Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/index/engine/Engine.java", "diffHunk": "@@ -1205,6 +1205,15 @@ public final void close() {\n         protected abstract void doClose();\n \n         protected abstract Searcher acquireSearcherInternal(String source);\n+\n+        /**\n+         * Returns a commit id associated with this searcher if it's opened from an index commit; otherwise, return null.\n+         * Two searcher with the same commit id must have identical content at the Lucene document level.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzNjk5Mg=="}, "originalCommit": {"oid": "47f310d4702cbc689e925cca048cd40b45da1096"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTIxMjY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzowNjozMlrOH4ugvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxOToxOVrOH9i93w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NDM0OQ==", "bodyText": "StringHelper.idToString mentions in its javadoc that it is for debugging purposes.\nI wonder if we should use:\nBase64.getEncoder().encodeToString(id)\ninstead like we do in CommitId.toString().", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r529244349", "createdAt": "2020-11-24T07:06:32Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java", "diffHunk": "@@ -107,6 +109,7 @@ public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats\n                 // yet this makes sure nobody else does. including some testing tools that try to be messy\n                 indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null;\n                 this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory);\n+                this.commitId = StringHelper.idToString(this.lastCommittedSegmentInfos.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f310d4702cbc689e925cca048cd40b45da1096"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5ODA3OQ==", "bodyText": "++, addressed in 05fcf38", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r534298079", "createdAt": "2020-12-02T16:19:19Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java", "diffHunk": "@@ -107,6 +109,7 @@ public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats\n                 // yet this makes sure nobody else does. including some testing tools that try to be messy\n                 indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null;\n                 this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory);\n+                this.commitId = StringHelper.idToString(this.lastCommittedSegmentInfos.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NDM0OQ=="}, "originalCommit": {"oid": "47f310d4702cbc689e925cca048cd40b45da1096"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTMxNDU3OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/indices/state/CloseIndexIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzo0MDoxN1rOH4vecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzo0MDoxN1rOH4vecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2MDE0Ng==", "bodyText": "Could we also set replicas=1 and then check that the recovered copy has the same commit id?", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r529260146", "createdAt": "2020-11-24T07:40:17Z", "author": {"login": "henningandersen"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/indices/state/CloseIndexIT.java", "diffHunk": "@@ -472,6 +474,34 @@ public void testResyncPropagatePrimaryTerm() throws Exception {\n         }\n     }\n \n+    public void testCommitIdInSearcher() throws Exception {\n+        final String indexName = \"test_commit_id\";\n+        createIndex(indexName, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+        indexRandom(randomBoolean(), randomBoolean(), randomBoolean(), IntStream.range(0, randomIntBetween(0, 50))\n+            .mapToObj(n -> client().prepareIndex(indexName).setSource(\"num\", n)).collect(toList()));\n+        ensureGreen(indexName);\n+        assertAcked(client().admin().indices().prepareClose(indexName));\n+        assertIndexIsClosed(indexName);\n+        ensureGreen(indexName);\n+        final String nodeWithPrimary = Iterables.get(internalCluster().nodesInclude(indexName), 0);\n+        IndexShard shard = internalCluster().getInstance(IndicesService.class, nodeWithPrimary)\n+            .indexService(resolveIndex(indexName)).getShard(0);\n+        final String commitId;\n+        try (Engine.SearcherSupplier searcherSupplier = shard.acquireSearcherSupplier(randomFrom(Engine.SearcherScope.values()))) {\n+            assertNotNull(searcherSupplier.getCommitId());\n+            commitId = searcherSupplier.getCommitId();\n+        }\n+        internalCluster().restartNode(nodeWithPrimary);\n+        ensureGreen(indexName);\n+        shard = internalCluster().getInstance(IndicesService.class, nodeWithPrimary).indexService(resolveIndex(indexName)).getShard(0);\n+        try (Engine.SearcherSupplier searcherSupplier = shard.acquireSearcherSupplier(randomFrom(Engine.SearcherScope.values()))) {\n+            assertThat(searcherSupplier.getCommitId(), equalTo(commitId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f310d4702cbc689e925cca048cd40b45da1096"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDg4ODIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/lucene/Lucene.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODo1ODoxN1rOICJeBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo0MzoyN1rOIDVkSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyMzIwNA==", "bodyText": "can this get some javadocs?", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r539123204", "createdAt": "2020-12-09T08:58:17Z", "author": {"login": "s1monw"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/Lucene.java", "diffHunk": "@@ -808,6 +809,10 @@ public void delete() {\n         }\n     }\n \n+    public static String getCommitId(SegmentInfos segmentInfos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193b631a5c6f48e6a12beb1e0e6b04fee97c5fb9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2OTk5Mw==", "bodyText": "Sure, added in 193b631.", "url": "https://github.com/elastic/elasticsearch/pull/63963#discussion_r540369993", "createdAt": "2020-12-10T17:43:27Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/Lucene.java", "diffHunk": "@@ -808,6 +809,10 @@ public void delete() {\n         }\n     }\n \n+    public static String getCommitId(SegmentInfos segmentInfos) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyMzIwNA=="}, "originalCommit": {"oid": "193b631a5c6f48e6a12beb1e0e6b04fee97c5fb9"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4354, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}