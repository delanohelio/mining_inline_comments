{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTMxMDA4", "number": 53558, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjozODo1NFrODoASnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDoyNTo1N1rODoRILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjc0Mzk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjozODo1NFrOF2VRfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjozODo1NFrOF2VRfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNTk2Nw==", "bodyText": "Use Strings.hasText(name) == false instead of !", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392515967", "createdAt": "2020-03-13T22:38:54Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeReadRequest;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Request that to retrieve one or more component templates\n+ */\n+public class GetComponentTemplateRequest extends MasterNodeReadRequest<GetComponentTemplateRequest> {\n+\n+    private String[] names;\n+\n+    public GetComponentTemplateRequest() { }\n+\n+    public GetComponentTemplateRequest(String... names) {\n+        this.names = names;\n+    }\n+\n+    public GetComponentTemplateRequest(StreamInput in) throws IOException {\n+        super(in);\n+        names = in.readStringArray();\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeStringArray(names);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (names == null) {\n+            validationException = addValidationError(\"names is null or empty\", validationException);\n+        } else {\n+            for (String name : names) {\n+                if (name == null || !Strings.hasText(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjc0ODU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0MTo0OFrOF2VUVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyMToxNVrOF27yEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNjY5NA==", "bodyText": "empty names is allowed, right? To return all templates?", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392516694", "createdAt": "2020-03-13T22:41:48Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeReadRequest;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Request that to retrieve one or more component templates\n+ */\n+public class GetComponentTemplateRequest extends MasterNodeReadRequest<GetComponentTemplateRequest> {\n+\n+    private String[] names;\n+\n+    public GetComponentTemplateRequest() { }\n+\n+    public GetComponentTemplateRequest(String... names) {\n+        this.names = names;\n+    }\n+\n+    public GetComponentTemplateRequest(StreamInput in) throws IOException {\n+        super(in);\n+        names = in.readStringArray();\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeStringArray(names);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (names == null) {\n+            validationException = addValidationError(\"names is null or empty\", validationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0Njg5Ng==", "bodyText": "It is, an empty array, but not null in this case", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r393146896", "createdAt": "2020-03-16T16:21:15Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeReadRequest;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Request that to retrieve one or more component templates\n+ */\n+public class GetComponentTemplateRequest extends MasterNodeReadRequest<GetComponentTemplateRequest> {\n+\n+    private String[] names;\n+\n+    public GetComponentTemplateRequest() { }\n+\n+    public GetComponentTemplateRequest(String... names) {\n+        this.names = names;\n+    }\n+\n+    public GetComponentTemplateRequest(StreamInput in) throws IOException {\n+        super(in);\n+        names = in.readStringArray();\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeStringArray(names);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (names == null) {\n+            validationException = addValidationError(\"names is null or empty\", validationException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNjY5NA=="}, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjc1MDUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/TransportGetComponentTemplateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0MzoxM1rOF2VVgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0MzoxM1rOF2VVgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNjk5Mw==", "bodyText": "You can move it above if and reuse", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392516993", "createdAt": "2020-03-13T22:43:13Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/TransportGetComponentTemplateAction.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.TransportMasterNodeReadAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class TransportGetComponentTemplateAction extends\n+    TransportMasterNodeReadAction<GetComponentTemplateRequest, GetComponentTemplateResponse> {\n+\n+    @Inject\n+    public TransportGetComponentTemplateAction(TransportService transportService, ClusterService clusterService,\n+                                               ThreadPool threadPool, ActionFilters actionFilters,\n+                                               IndexNameExpressionResolver indexNameExpressionResolver) {\n+        super(GetComponentTemplateAction.NAME, transportService, clusterService, threadPool, actionFilters,\n+            GetComponentTemplateRequest::new, indexNameExpressionResolver);\n+    }\n+\n+    @Override\n+    protected String executor() {\n+        return ThreadPool.Names.SAME;\n+    }\n+\n+    @Override\n+    protected GetComponentTemplateResponse read(StreamInput in) throws IOException {\n+        return new GetComponentTemplateResponse(in);\n+    }\n+\n+    @Override\n+    protected ClusterBlockException checkBlock(GetComponentTemplateRequest request, ClusterState state) {\n+        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task, GetComponentTemplateRequest request, ClusterState state,\n+                                   ActionListener<GetComponentTemplateResponse> listener) {\n+        final Map<String, ComponentTemplate> results;\n+\n+        // If we did not ask for a specific name, then we return all templates\n+        if (request.names().length == 0) {\n+            results = new HashMap<>(state.metaData().componentTemplates());\n+        } else {\n+            results = new HashMap<>();\n+        }\n+\n+        Map<String, ComponentTemplate> allTemplates = state.metaData().componentTemplates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjc1MjgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutComponentTemplateRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0NDozOVrOF2VW8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0NDozOVrOF2VW8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNzM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (name == null) {\n          \n          \n            \n                    if (name == null || Strings.hasText(name) == false) {", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392517360", "createdAt": "2020-03-13T22:44:39Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.put;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * A request for putting a single component template into the cluster state\n+ */\n+public class PutComponentTemplateRequest extends MasterNodeRequest<PutComponentTemplateRequest> {\n+    private final String name;\n+    @Nullable\n+    private String cause;\n+    private boolean create;\n+    private ComponentTemplate componentTemplate;\n+\n+    public PutComponentTemplateRequest(StreamInput in) throws IOException {\n+        super(in);\n+        this.name = in.readString();\n+        this.cause = in.readOptionalString();\n+        this.create = in.readBoolean();\n+        this.componentTemplate = new ComponentTemplate(in);\n+    }\n+\n+    /**\n+     * Constructs a new put component template request with the provided name.\n+     */\n+    public PutComponentTemplateRequest(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeString(name);\n+        out.writeOptionalString(cause);\n+        out.writeBoolean(create);\n+        this.componentTemplate.writeTo(out);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (name == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTQ3NDI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/delete/DeleteComponentTemplateAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDoxNzowM1rOF2tRvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MToxMVrOF28lpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwOTI0Ng==", "bodyText": "Perhaps inline the request and transport actions classes into each action class?\nI think this will save some LOC.", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392909246", "createdAt": "2020-03-16T10:17:03Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/delete/DeleteComponentTemplateAction.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.delete;\n+\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+\n+public class DeleteComponentTemplateAction extends ActionType<AcknowledgedResponse> {\n+\n+    public static final DeleteComponentTemplateAction INSTANCE = new DeleteComponentTemplateAction();\n+    public static final String NAME = \"cluster:admin/component_template/delete\";\n+\n+    private DeleteComponentTemplateAction() {\n+        super(NAME, AcknowledgedResponse::new);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE2MDEwMA==", "bodyText": "Sure, I can do that", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r393160100", "createdAt": "2020-03-16T16:41:11Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/delete/DeleteComponentTemplateAction.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.delete;\n+\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+\n+public class DeleteComponentTemplateAction extends ActionType<AcknowledgedResponse> {\n+\n+    public static final DeleteComponentTemplateAction INSTANCE = new DeleteComponentTemplateAction();\n+    public static final String NAME = \"cluster:admin/component_template/delete\";\n+\n+    private DeleteComponentTemplateAction() {\n+        super(NAME, AcknowledgedResponse::new);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwOTI0Ng=="}, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTQ4MDQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDoxODo1OFrOF2tVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MToxOFrOF28l4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMDI0NQ==", "bodyText": "maybe move the body of this method and remove method into a static method?\nThis will make writing unit tests easier.", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392910245", "createdAt": "2020-03-16T10:18:58Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -132,6 +134,98 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n         });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putComponentTemplate(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                     final ComponentTemplate template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-component-template [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    if (create && currentState.metaData().componentTemplates().containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE2MDE2MQ==", "bodyText": "Will do, and I'll add a unit test for it.", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r393160161", "createdAt": "2020-03-16T16:41:18Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -132,6 +134,98 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n         });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putComponentTemplate(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                     final ComponentTemplate template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-component-template [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    if (create && currentState.metaData().componentTemplates().containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMDI0NQ=="}, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTUwMjUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateResponse.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDoyNTo1N1rOF2tjmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyNjozNlrOF27_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMzgxNw==", "bodyText": "Should we return a json array here? If I recall correctly, for new apis we try to return arrays instead of keyed json objects.", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392913817", "createdAt": "2020-03-16T10:25:57Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class GetComponentTemplateResponse extends ActionResponse implements ToXContentObject {\n+\n+    private final Map<String, ComponentTemplate> componentTemplates;\n+\n+    public GetComponentTemplateResponse(StreamInput in) throws IOException {\n+        super(in);\n+        int size = in.readVInt();\n+        componentTemplates = new HashMap<>();\n+        for (int i = 0 ; i < size ; i++) {\n+            componentTemplates.put(in.readString(), new ComponentTemplate(in));\n+        }\n+    }\n+\n+    public GetComponentTemplateResponse(Map<String, ComponentTemplate> componentTemplates) {\n+        this.componentTemplates = componentTemplates;\n+    }\n+\n+    public Map<String, ComponentTemplate> getComponentTemplates() {\n+        return componentTemplates;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(componentTemplates.size());\n+        for (Map.Entry<String, ComponentTemplate> componentTemplate : componentTemplates.entrySet()) {\n+            out.writeString(componentTemplate.getKey());\n+            componentTemplate.getValue().writeTo(out);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        GetComponentTemplateResponse that = (GetComponentTemplateResponse) o;\n+        return Objects.equals(componentTemplates, that.componentTemplates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(componentTemplates);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MjQwMg==", "bodyText": "I'm on the fence about this, on one hand I wanted to try and match the existing templates API output to be as \"familiar\" to folks as possible, but I know that a lot of people like the newer format of arrays of json objects (I really don't -_-). I can go either way, if you think it's valuable to have it in the new format then I can change it, what do you think @martijnvg?", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r393082402", "createdAt": "2020-03-16T14:50:16Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class GetComponentTemplateResponse extends ActionResponse implements ToXContentObject {\n+\n+    private final Map<String, ComponentTemplate> componentTemplates;\n+\n+    public GetComponentTemplateResponse(StreamInput in) throws IOException {\n+        super(in);\n+        int size = in.readVInt();\n+        componentTemplates = new HashMap<>();\n+        for (int i = 0 ; i < size ; i++) {\n+            componentTemplates.put(in.readString(), new ComponentTemplate(in));\n+        }\n+    }\n+\n+    public GetComponentTemplateResponse(Map<String, ComponentTemplate> componentTemplates) {\n+        this.componentTemplates = componentTemplates;\n+    }\n+\n+    public Map<String, ComponentTemplate> getComponentTemplates() {\n+        return componentTemplates;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(componentTemplates.size());\n+        for (Map.Entry<String, ComponentTemplate> componentTemplate : componentTemplates.entrySet()) {\n+            out.writeString(componentTemplate.getKey());\n+            componentTemplate.getValue().writeTo(out);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        GetComponentTemplateResponse that = (GetComponentTemplateResponse) o;\n+        return Objects.equals(componentTemplates, that.componentTemplates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(componentTemplates);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMzgxNw=="}, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MDQyNw==", "bodyText": "I think because eventually all APIs that return multiple objects will move to return an array instead of a json object with a keyed json object, so I'd be in favor of returning the new format here. @jakelandis what do you think?", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r393150427", "createdAt": "2020-03-16T16:26:36Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class GetComponentTemplateResponse extends ActionResponse implements ToXContentObject {\n+\n+    private final Map<String, ComponentTemplate> componentTemplates;\n+\n+    public GetComponentTemplateResponse(StreamInput in) throws IOException {\n+        super(in);\n+        int size = in.readVInt();\n+        componentTemplates = new HashMap<>();\n+        for (int i = 0 ; i < size ; i++) {\n+            componentTemplates.put(in.readString(), new ComponentTemplate(in));\n+        }\n+    }\n+\n+    public GetComponentTemplateResponse(Map<String, ComponentTemplate> componentTemplates) {\n+        this.componentTemplates = componentTemplates;\n+    }\n+\n+    public Map<String, ComponentTemplate> getComponentTemplates() {\n+        return componentTemplates;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(componentTemplates.size());\n+        for (Map.Entry<String, ComponentTemplate> componentTemplate : componentTemplates.entrySet()) {\n+            out.writeString(componentTemplate.getKey());\n+            componentTemplate.getValue().writeTo(out);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        GetComponentTemplateResponse that = (GetComponentTemplateResponse) o;\n+        return Objects.equals(componentTemplates, that.componentTemplates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(componentTemplates);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMzgxNw=="}, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3242, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}