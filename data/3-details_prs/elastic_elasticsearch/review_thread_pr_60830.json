{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTIzODky", "number": 60830, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoxMTo1OVrOEV5YCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0ODoxMlrOEYaIOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzk1NTkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoxMTo1OVrOG86e7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0ODozNVrOHAulsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUyNTkzMg==", "bodyText": "I'm trying to mimic what we support in core. It works, so far as I can tell. It is kind of amazing we allow this at all, but we do!", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r466525932", "createdAt": "2020-08-06T16:11:59Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.MatchNoDocsQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.common.time.DateMathParser;\n+import org.elasticsearch.index.mapper.BooleanFieldMapper;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptBooleanFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldTermQuery;\n+\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class ScriptBooleanMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final BooleanScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptBooleanMappedFieldType(String name, Script script, BooleanScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return BooleanFieldMapper.CONTENT_TYPE;\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public DocValueFormat docValueFormat(String format, ZoneId timeZone) {\n+        if (format != null) {\n+            throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] does not support custom formats\");\n+        }\n+        if (timeZone != null) {\n+            throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] does not support custom time zones\");\n+        }\n+        return DocValueFormat.BOOLEAN;\n+    }\n+\n+    @Override\n+    public ScriptBooleanFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName, Supplier<SearchLookup> searchLookup) {\n+        return new ScriptBooleanFieldData.Builder(name(), leafFactory(searchLookup.get()));\n+    }\n+\n+    private BooleanScriptFieldScript.LeafFactory leafFactory(SearchLookup searchLookup) {\n+        return scriptFactory.newFactory(script.getParams(), searchLookup);\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);\n+        return new BooleanScriptFieldExistsQuery(script, leafFactory(context.lookup()), name());\n+    }\n+\n+    @Override\n+    public Query rangeQuery(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNTM2Mw==", "bodyText": "oh boy :)", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r470525363", "createdAt": "2020-08-14T09:48:35Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.MatchNoDocsQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.common.time.DateMathParser;\n+import org.elasticsearch.index.mapper.BooleanFieldMapper;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptBooleanFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldTermQuery;\n+\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class ScriptBooleanMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final BooleanScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptBooleanMappedFieldType(String name, Script script, BooleanScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return BooleanFieldMapper.CONTENT_TYPE;\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public DocValueFormat docValueFormat(String format, ZoneId timeZone) {\n+        if (format != null) {\n+            throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] does not support custom formats\");\n+        }\n+        if (timeZone != null) {\n+            throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] does not support custom time zones\");\n+        }\n+        return DocValueFormat.BOOLEAN;\n+    }\n+\n+    @Override\n+    public ScriptBooleanFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName, Supplier<SearchLookup> searchLookup) {\n+        return new ScriptBooleanFieldData.Builder(name(), leafFactory(searchLookup.get()));\n+    }\n+\n+    private BooleanScriptFieldScript.LeafFactory leafFactory(SearchLookup searchLookup) {\n+        return scriptFactory.newFactory(script.getParams(), searchLookup);\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);\n+        return new BooleanScriptFieldExistsQuery(script, leafFactory(context.lookup()), name());\n+    }\n+\n+    @Override\n+    public Query rangeQuery(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUyNTkzMg=="}, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDI4ODAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptBooleanDocValues.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0NjoxN1rOHAuhhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDo0MTo1NVrOHBruJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNDI5NA==", "bodyText": "I must say that multiple values for booleans look really weird, especially trying to summarize multiple values into one, and re-sorting them. Is this behaviour documented anywhere?", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r470524294", "createdAt": "2020-08-14T09:46:17Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptBooleanDocValues.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.elasticsearch.index.fielddata.AbstractSortedNumericDocValues;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+\n+import java.io.IOException;\n+\n+public final class ScriptBooleanDocValues extends AbstractSortedNumericDocValues {\n+    private final BooleanScriptFieldScript script;\n+    private int cursor;\n+\n+    ScriptBooleanDocValues(BooleanScriptFieldScript script) {\n+        this.script = script;\n+    }\n+\n+    @Override\n+    public boolean advanceExact(int docId) {\n+        script.runForDoc(docId);\n+        cursor = 0;\n+        return script.trues() > 0 || script.falses() > 0;\n+    }\n+\n+    @Override\n+    public long nextValue() throws IOException {\n+        // Emit all false values before all true values\n+        return cursor++ < script.falses() ? 0 : 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUyNjk0OA==", "bodyText": "I'm not sure it is, though it is what happens when you use doc values for out of the box booleans.", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r471526948", "createdAt": "2020-08-17T14:41:55Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptBooleanDocValues.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.elasticsearch.index.fielddata.AbstractSortedNumericDocValues;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+\n+import java.io.IOException;\n+\n+public final class ScriptBooleanDocValues extends AbstractSortedNumericDocValues {\n+    private final BooleanScriptFieldScript script;\n+    private int cursor;\n+\n+    ScriptBooleanDocValues(BooleanScriptFieldScript script) {\n+        this.script = script;\n+    }\n+\n+    @Override\n+    public boolean advanceExact(int docId) {\n+        script.runForDoc(docId);\n+        cursor = 0;\n+        return script.trues() > 0 || script.falses() > 0;\n+    }\n+\n+    @Override\n+    public long nextValue() throws IOException {\n+        // Emit all false values before all true values\n+        return cursor++ < script.falses() ? 0 : 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNDI5NA=="}, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDI4OTkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptBooleanFieldData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0Njo1OFrOHAuiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDo0OToyMFrOHBsBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNDU4Ng==", "bodyText": "I never realized this either: booleans are double????", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r470524586", "createdAt": "2020-08-14T09:46:58Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptBooleanFieldData.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.elasticsearch.ExceptionsHelper;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.plain.LeafLongFieldData;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+\n+import java.io.IOException;\n+\n+public final class ScriptBooleanFieldData extends IndexNumericFieldData {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+        private final String name;\n+        private final BooleanScriptFieldScript.LeafFactory leafFactory;\n+\n+        public Builder(String name, BooleanScriptFieldScript.LeafFactory leafFactory) {\n+            this.name = name;\n+            this.leafFactory = leafFactory;\n+        }\n+\n+        @Override\n+        public ScriptBooleanFieldData build(IndexFieldDataCache cache, CircuitBreakerService breakerService, MapperService mapperService) {\n+            return new ScriptBooleanFieldData(name, leafFactory);\n+        }\n+    }\n+\n+    private final String fieldName;\n+    private final BooleanScriptFieldScript.LeafFactory leafFactory;\n+\n+    private ScriptBooleanFieldData(String fieldName, BooleanScriptFieldScript.LeafFactory leafFactory) {\n+        this.fieldName = fieldName;\n+        this.leafFactory = leafFactory;\n+    }\n+\n+    @Override\n+    public String getFieldName() {\n+        return fieldName;\n+    }\n+\n+    @Override\n+    public ValuesSourceType getValuesSourceType() {\n+        return CoreValuesSourceType.BOOLEAN;\n+    }\n+\n+    @Override\n+    public ScriptBooleanLeafFieldData load(LeafReaderContext context) {\n+        try {\n+            return loadDirect(context);\n+        } catch (Exception e) {\n+            throw ExceptionsHelper.convertToElastic(e);\n+        }\n+    }\n+\n+    @Override\n+    public ScriptBooleanLeafFieldData loadDirect(LeafReaderContext context) throws IOException {\n+        return new ScriptBooleanLeafFieldData(new ScriptBooleanDocValues(leafFactory.newInstance(context)));\n+    }\n+\n+    @Override\n+    public NumericType getNumericType() {\n+        return NumericType.DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzMTg0MA==", "bodyText": "Ooops, copy and paste error. Fixing.", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r471531840", "createdAt": "2020-08-17T14:49:20Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptBooleanFieldData.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.elasticsearch.ExceptionsHelper;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.plain.LeafLongFieldData;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+\n+import java.io.IOException;\n+\n+public final class ScriptBooleanFieldData extends IndexNumericFieldData {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+        private final String name;\n+        private final BooleanScriptFieldScript.LeafFactory leafFactory;\n+\n+        public Builder(String name, BooleanScriptFieldScript.LeafFactory leafFactory) {\n+            this.name = name;\n+            this.leafFactory = leafFactory;\n+        }\n+\n+        @Override\n+        public ScriptBooleanFieldData build(IndexFieldDataCache cache, CircuitBreakerService breakerService, MapperService mapperService) {\n+            return new ScriptBooleanFieldData(name, leafFactory);\n+        }\n+    }\n+\n+    private final String fieldName;\n+    private final BooleanScriptFieldScript.LeafFactory leafFactory;\n+\n+    private ScriptBooleanFieldData(String fieldName, BooleanScriptFieldScript.LeafFactory leafFactory) {\n+        this.fieldName = fieldName;\n+        this.leafFactory = leafFactory;\n+    }\n+\n+    @Override\n+    public String getFieldName() {\n+        return fieldName;\n+    }\n+\n+    @Override\n+    public ValuesSourceType getValuesSourceType() {\n+        return CoreValuesSourceType.BOOLEAN;\n+    }\n+\n+    @Override\n+    public ScriptBooleanLeafFieldData load(LeafReaderContext context) {\n+        try {\n+            return loadDirect(context);\n+        } catch (Exception e) {\n+            throw ExceptionsHelper.convertToElastic(e);\n+        }\n+    }\n+\n+    @Override\n+    public ScriptBooleanLeafFieldData loadDirect(LeafReaderContext context) throws IOException {\n+        return new ScriptBooleanLeafFieldData(new ScriptBooleanDocValues(leafFactory.newInstance(context)));\n+    }\n+\n+    @Override\n+    public NumericType getNumericType() {\n+        return NumericType.DOUBLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNDU4Ng=="}, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDI5MzcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0ODoxMlrOHAulDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNjo0OFrOHCLk_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNTE5Nw==", "bodyText": "why do we throw? Shouldn't we borrow the logic from https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/index/mapper/BooleanFieldMapper.java#L157 ?", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r470525197", "createdAt": "2020-08-14T09:48:12Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.MatchNoDocsQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.common.time.DateMathParser;\n+import org.elasticsearch.index.mapper.BooleanFieldMapper;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptBooleanFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldTermQuery;\n+\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class ScriptBooleanMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final BooleanScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptBooleanMappedFieldType(String name, Script script, BooleanScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return BooleanFieldMapper.CONTENT_TYPE;\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1MTI1Mw==", "bodyText": "I can do that, but I don't think it is ever called!", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r471551253", "createdAt": "2020-08-17T15:18:18Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.MatchNoDocsQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.common.time.DateMathParser;\n+import org.elasticsearch.index.mapper.BooleanFieldMapper;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptBooleanFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldTermQuery;\n+\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class ScriptBooleanMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final BooleanScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptBooleanMappedFieldType(String name, Script script, BooleanScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return BooleanFieldMapper.CONTENT_TYPE;\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNTE5Nw=="}, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODg5Mw==", "bodyText": "oh well I did not realize it was unused, in that case I am good with throwing, but add a comment?", "url": "https://github.com/elastic/elasticsearch/pull/60830#discussion_r472048893", "createdAt": "2020-08-18T09:36:48Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.MatchNoDocsQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.common.time.DateMathParser;\n+import org.elasticsearch.index.mapper.BooleanFieldMapper;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.BooleanScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptBooleanFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.BooleanScriptFieldTermQuery;\n+\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class ScriptBooleanMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final BooleanScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptBooleanMappedFieldType(String name, Script script, BooleanScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return BooleanFieldMapper.CONTENT_TYPE;\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNTE5Nw=="}, "originalCommit": {"oid": "f5d113a6d83958b28fe3412a31d447226e63fa10"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2588, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}