{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjEwNTYw", "number": 53882, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo1NjoyMVrODqg3eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0MjoyOFrODtlzzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTA1MjczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/analysis/LowercaseNormalizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo1NjoyMVrOF6TtoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo1NjoyMVrOF6TtoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDcwNA==", "bodyText": "Small note, this could just be TokenStream stream = new LowerCaseFilter(tokenizer);.", "url": "https://github.com/elastic/elasticsearch/pull/53882#discussion_r396684704", "createdAt": "2020-03-23T18:56:21Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/analysis/LowercaseNormalizer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.analysis;\n+\n+import org.apache.lucene.analysis.Analyzer;\n+import org.apache.lucene.analysis.LowerCaseFilter;\n+import org.apache.lucene.analysis.TokenStream;\n+import org.apache.lucene.analysis.Tokenizer;\n+import org.apache.lucene.analysis.core.KeywordTokenizer;\n+\n+/** Normalizer used to lowercase values */\n+public final class LowercaseNormalizer extends Analyzer {\n+\n+    @Override\n+    protected TokenStreamComponents createComponents(String s) {\n+        final Tokenizer tokenizer = new KeywordTokenizer();\n+        TokenStream stream = tokenizer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562a7301dfff96eb610ae87afc3cb61d0a2f56ec"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTA3MzQ0OnYy", "diffSide": "RIGHT", "path": "docs/reference/analysis/normalizers.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowMjoyMVrOF6T7TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowMjoyMVrOF6T7TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4ODIwNQ==", "bodyText": "This looks like a typo, although it existed before your change too. I think it can just be \"Custom normalizers take a list of <<analysis-charfilters, character filters>> and ...\".", "url": "https://github.com/elastic/elasticsearch/pull/53882#discussion_r396688205", "createdAt": "2020-03-23T19:02:21Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/analysis/normalizers.asciidoc", "diffHunk": "@@ -13,11 +13,13 @@ following: `arabic_normalization`, `asciifolding`, `bengali_normalization`,\n `persian_normalization`, `scandinavian_folding`, `serbian_normalization`,\n `sorani_normalization`, `uppercase`.\n \n+Elasticsearch ships with a `lowercase` built-in normalizer. For other forms of\n+normalization a custom configuration is required.\n+\n [float]\n === Custom normalizers\n \n-Elasticsearch does not ship with built-in normalizers so far, so the only way\n-to get one is by building a custom one. Custom normalizers take a list of char\n+Custom normalizers take a list of char", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562a7301dfff96eb610ae87afc3cb61d0a2f56ec"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA2OTk4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0MTo1N1rOF-nb1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0MTo1N1rOF-nb1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMjEzMg==", "bodyText": "I think it'd make sense for this check to live in AnalysisRegistryTests, because it is really testing our analyzer registration behavior instead of anything specific to the keyword field mapper. I took a look and it seems straightforward to add a test there.", "url": "https://github.com/elastic/elasticsearch/pull/53882#discussion_r401202132", "createdAt": "2020-03-31T20:41:57Z", "author": {"login": "jtibshirani"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java", "diffHunk": "@@ -381,6 +391,54 @@ public void testNormalizer() throws IOException {\n         assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n         assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n     }\n+    \n+    // Test that a name clash with a custom normalizer will favour the index's normalizer rather than the out-of-the-box \n+    // one of the same name. (However this \"feature\" will be removed with https://github.com/elastic/elasticsearch/issues/22263 ) \n+    public void testNameClashNormalizer() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835b1f95b484b6be065f25b4c8112f8573e55c37"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMxOTgwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0MjoyOFrOF_Gvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0MjoyOFrOF_Gvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNTEzOA==", "bodyText": "Super small comment, extra whitespace.", "url": "https://github.com/elastic/elasticsearch/pull/53882#discussion_r401715138", "createdAt": "2020-04-01T15:42:28Z", "author": {"login": "jtibshirani"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java", "diffHunk": "@@ -381,7 +389,7 @@ public void testNormalizer() throws IOException {\n         assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n         assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5387a514debd5455ac15772d13d28564ce38a54e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}