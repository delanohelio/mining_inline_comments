{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDM5NjM3", "number": 52176, "title": "Add unit tests for reading JVM options files", "bodyText": "This commit adds some unit tests to cover the reading of JVM options files.", "createdAt": "2020-02-11T01:54:15Z", "url": "https://github.com/elastic/elasticsearch/pull/52176", "merged": true, "mergeCommit": {"oid": "1199ae536a3fe6c57728978fb1f6def389490f16"}, "closed": true, "closedAt": "2020-02-12T01:54:41Z", "author": {"login": "jasontedor"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDHy0hAH2gAyMzczNDM5NjM3OmZmZGE3MTg5ZWQxMTY3NGZiODI1OTg4ODdjZWEyMjNjZDExZjJiOTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDaI8EgH2gAyMzczNDM5NjM3OjI3NGE3YmJmMGEzMzc5OWMyMTVlODEyYzZiMjMyOWRiNjNmNDRlOWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ffda7189ed11674fb82598887cea223cd11f2b99", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/ffda7189ed11674fb82598887cea223cd11f2b99", "committedDate": "2020-02-11T01:52:42Z", "message": "Add unit tests for reading JVM options files\n\nThis commit adds some unit tests to cover the reading of JVM options\nfiles."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d48f6ae16e1fde854f160615374fb38b5c792fce", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/d48f6ae16e1fde854f160615374fb38b5c792fce", "committedDate": "2020-02-11T04:36:02Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6", "committedDate": "2020-02-11T12:47:56Z", "message": "Ensure temp directory exists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NjM1Njcx", "url": "https://github.com/elastic/elasticsearch/pull/52176#pullrequestreview-356635671", "createdAt": "2020-02-11T13:00:20Z", "commit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMDoyMFrOFoIAuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMDoyMFrOFoIAuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ==", "bodyText": "@mark-vieira Am I missing something why this isn't necessary in other tests? Without this, in the :distribution:tools:launchers:test tests, the directory wouldn't exist on a clean run and the tests would fail?", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377618619", "createdAt": "2020-02-11T13:00:20Z", "author": {"login": "jasontedor"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NjM2MDM5", "url": "https://github.com/elastic/elasticsearch/pull/52176#pullrequestreview-356636039", "createdAt": "2020-02-11T13:00:53Z", "commit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMDo1M1rOFoIB4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMDo1M1rOFoIB4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODkxNA==", "bodyText": "This is what is triggering the need for the temporary directory to exist.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377618914", "createdAt": "2020-02-11T13:00:53Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/214c4a6609649b0f998a770be52d00da17809b88", "committedDate": "2020-02-11T19:53:55Z", "message": "Merge branch 'master' into read-jvm-options-files-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTkyNDk1", "url": "https://github.com/elastic/elasticsearch/pull/52176#pullrequestreview-356992495", "createdAt": "2020-02-11T21:03:37Z", "commit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowMzozOFrOFoY_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowNjoxM1rOFoZEYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw==", "bodyText": "Should we provide a message for this assertion such as \"Expected NoSuchFileException but no exception was thrown\"?", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377896843", "createdAt": "2020-02-11T21:03:38Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5ODA4MQ==", "bodyText": "Same as above, seems it would be helpful to provide a message here to avoid a generic AssertionError.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377898081", "createdAt": "2020-02-11T21:06:13Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();\n+        } catch (final NoSuchFileException expected) {\n+            // this is expected, the root JVM options file must exist\n+        }\n+    }\n+\n+    public void testReadRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        final Path rootJvmOptions = config.resolve(\"jvm.options\");\n+        Files.write(rootJvmOptions, List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"), StandardOpenOption.CREATE_NEW, StandardOpenOption.APPEND);\n+        if (randomBoolean()) {\n+            // an empty jvm.options.d directory should be irrelevant\n+            Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        }\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectory() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"heap.options\"),\n+            List.of(\"# comment\", \"-Xms384m\", \"-Xmx384m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\", \"-Xms384m\", \"-Xmx384m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectoryInOrder() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"first.options\"),\n+            List.of(\"# comment\", \"-Xms384m\", \"-Xmx384m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"second.options\"),\n+            List.of(\"# comment\", \"-Xms512m\", \"-Xmx512m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\", \"-Xms384m\", \"-Xmx384m\", \"-Xms512m\", \"-Xmx512m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectoryIgnoresFilesNotNamedOptions() throws IOException,\n+        JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createFile(config.resolve(\"jvm.options\"));\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"heap.not-named-options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, empty());\n+    }\n+\n+    public void testFileContainsInvalidLinesThrowsParserException() throws IOException {\n+        final Path config = newTempDir();\n+        final Path rootJvmOptions = config.resolve(\"jvm.options\");\n+        Files.write(rootJvmOptions, List.of(\"XX:+UseG1GC\"), StandardOpenOption.CREATE_NEW, StandardOpenOption.APPEND);\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDM5ODU3", "url": "https://github.com/elastic/elasticsearch/pull/52176#pullrequestreview-357039857", "createdAt": "2020-02-11T22:20:44Z", "commit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMDo0NFrOFobSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMDo0NFrOFobSUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNDQxOQ==", "bodyText": "Maybe?\nfor (String opt : esJavaOpts.split(\"\\\\s+\")) {\n    if (opt.isBlank() == false) {\n        jvmOptions.add(opt);\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377934419", "createdAt": "2020-02-11T22:20:44Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java", "diffHunk": "@@ -127,6 +127,29 @@ public static void main(final String[] args) throws InterruptedException, IOExce\n         throws InterruptedException,\n         IOException,\n         JvmOptionsFileParserException {\n+\n+        final List<String> jvmOptions = readJvmOptionsFiles(config);\n+\n+        if (esJavaOpts != null) {\n+            jvmOptions.addAll(\n+                Arrays.stream(esJavaOpts.split(\"\\\\s+\")).filter(Predicate.not(String::isBlank)).collect(Collectors.toUnmodifiableList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "274a7bbf0a33799c215e812c6b2329db63f44e9a", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/274a7bbf0a33799c215e812c6b2329db63f44e9a", "committedDate": "2020-02-11T23:15:09Z", "message": "Add messages"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2511, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}