{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDk4NjM4", "number": 57254, "title": "[ML] add max_model_memory parameter to forecast request", "bodyText": "This adds a max_model_memory setting to forecast requests.\nThis setting can take a string value that is formatted according to byte sizes (i.e. \"50mb\", \"150mb\").\nThe default value is 20mb.\nThere is a HARD limit at 500mb which will throw an error if used.\nIf the limit is larger than 40% the anomaly job's configured model limit, the forecast limit is reduced to be strictly lower than that value. This reduction is logged and audited.\nrelated native change: elastic/ml-cpp#1238\ncloses: #56420", "createdAt": "2020-05-27T20:31:52Z", "url": "https://github.com/elastic/elasticsearch/pull/57254", "merged": true, "mergeCommit": {"oid": "ec67787a2e3dece32bb259caee36a1cb4d376ec8"}, "closed": true, "closedAt": "2020-05-29T12:59:51Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclfRNWAH2gAyNDI0MDk4NjM4OmZhMjJiOGRiZjg1NDQ0NmVmY2M1ZmY4MTk0NzdkNjliNWQ4OGRmNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmBlZ_AFqTQyMDkwMzg2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/fa22b8dbf854446efcc5ff819477d69b5d88df5d", "committedDate": "2020-05-27T20:27:08Z", "message": "[ML] add max_model_memory parameter to forecast request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTI3NjE3", "url": "https://github.com/elastic/elasticsearch/pull/57254#pullrequestreview-419927617", "createdAt": "2020-05-28T09:20:01Z", "commit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyMDowMVrOGbsw4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyNzoyOFrOGbtBnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5ODE0NQ==", "bodyText": "I know we do it like this in other places, however: There is a XContentParseException which I think fits better (its a specialization of IAE).", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431698145", "createdAt": "2020-05-28T09:20:01Z", "author": {"login": "hendrikmuhs"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/ForecastJobRequest.java", "diffHunk": "@@ -47,11 +51,20 @@\n             (request, val) -> request.setDuration(TimeValue.parseTimeValue(val, DURATION.getPreferredName())), DURATION);\n         PARSER.declareString(\n             (request, val) -> request.setExpiresIn(TimeValue.parseTimeValue(val, EXPIRES_IN.getPreferredName())), EXPIRES_IN);\n+        PARSER.declareField(ForecastJobRequest::setMaxModelMemory, (p, c) -> {\n+            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {\n+                return ByteSizeValue.parseBytesSizeValue(p.text(), MAX_MODEL_MEMORY.getPreferredName());\n+            } else if (p.currentToken() == XContentParser.Token.VALUE_NUMBER) {\n+                return new ByteSizeValue(p.longValue());\n+            }\n+            throw new IllegalArgumentException(\"Unsupported token [\" + p.currentToken() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5OTEzMQ==", "bodyText": "XContentParseException maybe?", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431699131", "createdAt": "2020-05-28T09:21:47Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/ForecastJobAction.java", "diffHunk": "@@ -47,6 +50,14 @@ private ForecastJobAction() {\n             PARSER.declareString((request, jobId) -> request.jobId = jobId, Job.ID);\n             PARSER.declareString(Request::setDuration, DURATION);\n             PARSER.declareString(Request::setExpiresIn, EXPIRES_IN);\n+            PARSER.declareField(Request::setMaxModelMemory, (p, c) -> {\n+                if (p.currentToken() == XContentParser.Token.VALUE_STRING) {\n+                    return ByteSizeValue.parseBytesSizeValue(p.text(), MAX_MODEL_MEMORY.getPreferredName()).getBytes();\n+                } else if (p.currentToken() == XContentParser.Token.VALUE_NUMBER) {\n+                    return p.longValue();\n+                }\n+                throw new IllegalArgumentException(\"Unsupported token [\" + p.currentToken() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5OTgwMQ==", "bodyText": "should we have minimum? A limit of 1 byte doesn't make sense.", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431699801", "createdAt": "2020-05-28T09:22:53Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/ForecastJobAction.java", "diffHunk": "@@ -116,9 +134,20 @@ public void setExpiresIn(TimeValue expiresIn) {\n             }\n         }\n \n+        public void setMaxModelMemory(long numBytes) {\n+            if (numBytes <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMjQzMQ==", "bodyText": "nit: you used the constant in the if, so it makes sense to use it here, too", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431702431", "createdAt": "2020-05-28T09:27:28Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -140,5 +175,14 @@ static void validate(Job job, ForecastJobAction.Request request) {\n                                 + duration.getStringRep() + \"/\" + bucketSpan.getStringRep() + \"]\");\n             }\n         }\n+\n+        if (request.getMaxModelMemory() != null) {\n+            if (request.getMaxModelMemory() >= FORECAST_LOCAL_STORAGE_LIMIT.getBytes()) {\n+                throw ExceptionsHelper.badRequestException(\n+                    \"[{}] must be less than 500MB\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTU0MjAx", "url": "https://github.com/elastic/elasticsearch/pull/57254#pullrequestreview-419954201", "createdAt": "2020-05-28T09:55:40Z", "commit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo1NTo0MFrOGbuAug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoxOTo0MFrOGbu0KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxODU4Ng==", "bodyText": "This should be PRE_6_1_DEFAULT_MODEL_MEMORY_LIMIT_MB.  After 6.1 we don't let the model memory limit be null, so the post-6.1 limit is always explicitly set.  (We had to do this to achieve BWC when we changed the default in 6.1.)", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431718586", "createdAt": "2020-05-28T09:55:40Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMTg5MQ==", "bodyText": "I think we should just make the default null.  Doing it the way it's currently done means there's a weird situation where an explicitly configured forecast memory of 20mb works without capping for a job with a 10mb model_memory_limit, but an explicitly configured forecast memory of 19mb is capped and generates an audit message.", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431721891", "createdAt": "2020-05-28T10:01:23Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMjYyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String msg = \"requested forecast limit [\" +\n          \n          \n            \n                        String msg = \"requested forecast memory limit [\" +", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431722623", "createdAt": "2020-05-28T10:02:40Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);\n+        if (adjustedMax != requestedLimit) {\n+            String msg = \"requested forecast limit [\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyMzM2MA==", "bodyText": "Why subtract 1 from allowedMax?", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431723360", "createdAt": "2020-05-28T10:04:00Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyOTE2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"] exceeded [\" + allowedMax +\n          \n          \n            \n                            \"] bytes exceeded [\" + allowedMax +", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431729169", "createdAt": "2020-05-28T10:14:38Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);\n+        if (adjustedMax != requestedLimit) {\n+            String msg = \"requested forecast limit [\" +\n+                requestedLimit +\n+                \"] exceeded [\" + allowedMax +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyOTMwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"] (40% of the anomaly job memory limit). Reducing to allowed maximum before running forecast.\";\n          \n          \n            \n                            \"] bytes (40% of the job memory limit). Reducing to allowed maximum before running forecast.\";", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431729304", "createdAt": "2020-05-28T10:14:51Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportForecastJobAction.java", "diffHunk": "@@ -124,6 +139,26 @@ private void getForecastRequestStats(String jobId, String forecastId, ActionList\n         jobResultsProvider.getForecastRequestStats(jobId, forecastId, forecastRequestStatsHandler, listener::onFailure);\n     }\n \n+    static Long getAdjustedMemoryLimit(Job job, Long requestedLimit, AbstractAuditor<? extends AbstractAuditMessage> auditor) {\n+        if (requestedLimit == null || requestedLimit == DEFAULT_MAX_MODEL_MEMORY.getBytes()) {\n+            return null;\n+        }\n+        long jobLimitMegaBytes = job.getAnalysisLimits() == null || job.getAnalysisLimits().getModelMemoryLimit() == null ?\n+            AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB :\n+            job.getAnalysisLimits().getModelMemoryLimit();\n+        long allowedMax = (long)(new ByteSizeValue(jobLimitMegaBytes, ByteSizeUnit.MB).getBytes() * 0.40);\n+        long adjustedMax = Math.min(requestedLimit, allowedMax - 1);\n+        if (adjustedMax != requestedLimit) {\n+            String msg = \"requested forecast limit [\" +\n+                requestedLimit +\n+                \"] exceeded [\" + allowedMax +\n+                \"] (40% of the anomaly job memory limit). Reducing to allowed maximum before running forecast.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczMTc1Mg==", "bodyText": "There is probably a docs file where this information needs adding too.", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431731752", "createdAt": "2020-05-28T10:19:40Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/api/ml.forecast.json", "diffHunk": "@@ -31,6 +31,11 @@\n         \"type\":\"time\",\n         \"required\":false,\n         \"description\":\"The time interval after which the forecast expires. Expired forecasts will be deleted at the first opportunity.\"\n+      },\n+      \"max_model_memory\":{\n+        \"type\":\"string\",\n+        \"required\":false,\n+        \"description\":\"The max memory able to be used by the forecast. Default is 20mb.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa22b8dbf854446efcc5ff819477d69b5d88df5d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea859dd1472443107a5c1ba1066e92a07eb34c8e", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/ea859dd1472443107a5c1ba1066e92a07eb34c8e", "committedDate": "2020-05-28T11:54:04Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-add-forecast-max-memory-setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca717c74816231a7c0cd1bbe87535da416c0de2a", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/ca717c74816231a7c0cd1bbe87535da416c0de2a", "committedDate": "2020-05-28T13:21:42Z", "message": "addressing PR comments, fixing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTQwMjQ0", "url": "https://github.com/elastic/elasticsearch/pull/57254#pullrequestreview-420140244", "createdAt": "2020-05-28T14:03:45Z", "commit": {"oid": "ca717c74816231a7c0cd1bbe87535da416c0de2a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDowMzo0NVrOGb2pGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDowMzo0NVrOGb2pGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1OTk5NA==", "bodyText": "sorry, me again: should we use 0 as default?", "url": "https://github.com/elastic/elasticsearch/pull/57254#discussion_r431859994", "createdAt": "2020-05-28T14:03:45Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/ForecastJobAction.java", "diffHunk": "@@ -116,9 +140,26 @@ public void setExpiresIn(TimeValue expiresIn) {\n             }\n         }\n \n+        public void setMaxModelMemory(long numBytes) {\n+            if (numBytes < MIN_MODEL_MEMORY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca717c74816231a7c0cd1bbe87535da416c0de2a"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjEzNTEy", "url": "https://github.com/elastic/elasticsearch/pull/57254#pullrequestreview-420213512", "createdAt": "2020-05-28T15:11:40Z", "commit": {"oid": "ca717c74816231a7c0cd1bbe87535da416c0de2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTAzODYx", "url": "https://github.com/elastic/elasticsearch/pull/57254#pullrequestreview-420903861", "createdAt": "2020-05-29T12:25:58Z", "commit": {"oid": "ca717c74816231a7c0cd1bbe87535da416c0de2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4091, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}