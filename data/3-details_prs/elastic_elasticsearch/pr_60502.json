{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5OTU1MDk4", "number": 60502, "title": "[ML] Implement AucRoc metric for classification", "bodyText": "This PR implements AucRoc metric for evaluating classification.\nIt achieves it the following way:\n\nadds new field (top_classes_field) to the Classification evaluation object\nadds new metric (AucRoc) under classification package\nadds new method (EvaluationMetric::getRequiredFields) by which each metric may request fields it needs for its calculation\n\nIt also introduces a few refactorings:\n\nfield names interesting to the evaluation flow are now stored in the EvaluationFields object (reused by all the evaluation types)\nEvaluationMetric::aggs now accepts the new EvaluationFields object instead of the individual field names\ncalculation code is shared between classification.AucRoc and outlierdetection.AucRoc classes using a base class (AbstractAucRoc)\n\nThe newly added fields are never indexed (persisted) so they don't require mappings.\nRelates #62160", "createdAt": "2020-07-31T09:19:17Z", "url": "https://github.com/elastic/elasticsearch/pull/60502", "merged": true, "mergeCommit": {"oid": "cd1a27f273fc7880b7354862bd5ff52f9fbc9c94"}, "closed": true, "closedAt": "2020-09-30T06:56:24Z", "author": {"login": "przemekwitek"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBAXOwABqjM2Nzg1NTIwODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN2b_jABqjM4MjI3ODY3MjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a9f18af61442090245d23a109f2e8fa144b29e6", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/9a9f18af61442090245d23a109f2e8fa144b29e6", "committedDate": "2020-07-31T09:18:17Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "f5b8e8f05a556a9218fc1e28fdcf4f97e0c338c9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f5b8e8f05a556a9218fc1e28fdcf4f97e0c338c9", "committedDate": "2020-08-21T08:15:59Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5b8e8f05a556a9218fc1e28fdcf4f97e0c338c9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f5b8e8f05a556a9218fc1e28fdcf4f97e0c338c9", "committedDate": "2020-08-21T08:15:59Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "5238ef131722baaddbacb47adb940142ceb3e903", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/5238ef131722baaddbacb47adb940142ceb3e903", "committedDate": "2020-08-24T12:10:24Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5238ef131722baaddbacb47adb940142ceb3e903", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/5238ef131722baaddbacb47adb940142ceb3e903", "committedDate": "2020-08-24T12:10:24Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "268189ab6a86d46bd38f33ad9575b40880745e17", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/268189ab6a86d46bd38f33ad9575b40880745e17", "committedDate": "2020-08-25T12:42:25Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa4dd1359f4167078c6ed656724cc87d64d2c845", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/fa4dd1359f4167078c6ed656724cc87d64d2c845", "committedDate": "2020-08-26T07:28:18Z", "message": "Fix yml tests"}, "afterCommit": {"oid": "31b30d5d371e19c5618fc124c203c7e744184bdc", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/31b30d5d371e19c5618fc124c203c7e744184bdc", "committedDate": "2020-08-26T08:27:46Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31b30d5d371e19c5618fc124c203c7e744184bdc", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/31b30d5d371e19c5618fc124c203c7e744184bdc", "committedDate": "2020-08-26T08:27:46Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "7118804926e43727ff3e5b1364fc22f02818d568", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/7118804926e43727ff3e5b1364fc22f02818d568", "committedDate": "2020-08-26T11:08:01Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7118804926e43727ff3e5b1364fc22f02818d568", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/7118804926e43727ff3e5b1364fc22f02818d568", "committedDate": "2020-08-26T11:08:01Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "d8a61aa3fae1824c8b68683eabcfd8ce601ae2cc", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/d8a61aa3fae1824c8b68683eabcfd8ce601ae2cc", "committedDate": "2020-08-26T11:31:17Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8a61aa3fae1824c8b68683eabcfd8ce601ae2cc", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/d8a61aa3fae1824c8b68683eabcfd8ce601ae2cc", "committedDate": "2020-08-26T11:31:17Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "cd6d20abac5cc5b4cbf54aa7ec4c96cce9bace5d", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/cd6d20abac5cc5b4cbf54aa7ec4c96cce9bace5d", "committedDate": "2020-08-27T06:25:44Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd6d20abac5cc5b4cbf54aa7ec4c96cce9bace5d", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/cd6d20abac5cc5b4cbf54aa7ec4c96cce9bace5d", "committedDate": "2020-08-27T06:25:44Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "2b1f9f3c431c04e0fd322cfdcb104a41c883c917", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b1f9f3c431c04e0fd322cfdcb104a41c883c917", "committedDate": "2020-08-27T07:25:23Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b1f9f3c431c04e0fd322cfdcb104a41c883c917", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b1f9f3c431c04e0fd322cfdcb104a41c883c917", "committedDate": "2020-08-27T07:25:23Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "4c96cc5a67c3e8ff3ef884f0b39ad996f0bde0a9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c96cc5a67c3e8ff3ef884f0b39ad996f0bde0a9", "committedDate": "2020-09-08T06:29:22Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c96cc5a67c3e8ff3ef884f0b39ad996f0bde0a9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c96cc5a67c3e8ff3ef884f0b39ad996f0bde0a9", "committedDate": "2020-09-08T06:29:22Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "c0a07e4eb82f214a3663e740142df472c779bb06", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0a07e4eb82f214a3663e740142df472c779bb06", "committedDate": "2020-09-08T13:13:28Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0a07e4eb82f214a3663e740142df472c779bb06", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0a07e4eb82f214a3663e740142df472c779bb06", "committedDate": "2020-09-08T13:13:28Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "3ced241ddc73bd295ba4bdfcd44864a7cdb67430", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/3ced241ddc73bd295ba4bdfcd44864a7cdb67430", "committedDate": "2020-09-08T13:28:32Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ced241ddc73bd295ba4bdfcd44864a7cdb67430", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/3ced241ddc73bd295ba4bdfcd44864a7cdb67430", "committedDate": "2020-09-08T13:28:32Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "61a7cf408d415dbc31ececca31699ae4b0c8979e", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/61a7cf408d415dbc31ececca31699ae4b0c8979e", "committedDate": "2020-09-09T09:59:30Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61a7cf408d415dbc31ececca31699ae4b0c8979e", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/61a7cf408d415dbc31ececca31699ae4b0c8979e", "committedDate": "2020-09-09T09:59:30Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "3f5f0c9f2d1bd56ac8367dbb69aae1420135218d", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/3f5f0c9f2d1bd56ac8367dbb69aae1420135218d", "committedDate": "2020-09-09T10:32:51Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f5f0c9f2d1bd56ac8367dbb69aae1420135218d", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/3f5f0c9f2d1bd56ac8367dbb69aae1420135218d", "committedDate": "2020-09-09T10:32:51Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "9c70df71ad342ef67d982f196f00f0bcfadeb018", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/9c70df71ad342ef67d982f196f00f0bcfadeb018", "committedDate": "2020-09-09T11:12:50Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c70df71ad342ef67d982f196f00f0bcfadeb018", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/9c70df71ad342ef67d982f196f00f0bcfadeb018", "committedDate": "2020-09-09T11:12:50Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "95c85aa521a699ef3c8637b4492a5e79eedb3aa4", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/95c85aa521a699ef3c8637b4492a5e79eedb3aa4", "committedDate": "2020-09-09T11:59:35Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95c85aa521a699ef3c8637b4492a5e79eedb3aa4", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/95c85aa521a699ef3c8637b4492a5e79eedb3aa4", "committedDate": "2020-09-09T11:59:35Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "1dc8a0d9ebf11f205e79a57a0463d42551e3a2ff", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/1dc8a0d9ebf11f205e79a57a0463d42551e3a2ff", "committedDate": "2020-09-09T12:47:58Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dc8a0d9ebf11f205e79a57a0463d42551e3a2ff", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/1dc8a0d9ebf11f205e79a57a0463d42551e3a2ff", "committedDate": "2020-09-09T12:47:58Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "65dff00209489d0fe11eee1c749a4787e5504ecb", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/65dff00209489d0fe11eee1c749a4787e5504ecb", "committedDate": "2020-09-09T12:56:07Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65dff00209489d0fe11eee1c749a4787e5504ecb", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/65dff00209489d0fe11eee1c749a4787e5504ecb", "committedDate": "2020-09-09T12:56:07Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "4a44d7cb1a219ba35e772f6eb1f9e1b05b323304", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/4a44d7cb1a219ba35e772f6eb1f9e1b05b323304", "committedDate": "2020-09-09T13:05:27Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a44d7cb1a219ba35e772f6eb1f9e1b05b323304", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/4a44d7cb1a219ba35e772f6eb1f9e1b05b323304", "committedDate": "2020-09-09T13:05:27Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "7478cf9ebb1de37626aabcd3aeb87344103d19eb", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/7478cf9ebb1de37626aabcd3aeb87344103d19eb", "committedDate": "2020-09-10T05:44:18Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7478cf9ebb1de37626aabcd3aeb87344103d19eb", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/7478cf9ebb1de37626aabcd3aeb87344103d19eb", "committedDate": "2020-09-10T05:44:18Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "da2577d38b028183297d4ac3fc698f378e5ac30d", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/da2577d38b028183297d4ac3fc698f378e5ac30d", "committedDate": "2020-09-10T06:33:20Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da2577d38b028183297d4ac3fc698f378e5ac30d", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/da2577d38b028183297d4ac3fc698f378e5ac30d", "committedDate": "2020-09-10T06:33:20Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "efc4ec35a7be295ea34406a7986814df6591fec0", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/efc4ec35a7be295ea34406a7986814df6591fec0", "committedDate": "2020-09-10T07:05:06Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efc4ec35a7be295ea34406a7986814df6591fec0", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/efc4ec35a7be295ea34406a7986814df6591fec0", "committedDate": "2020-09-10T07:05:06Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "f516ddfeae888d2073a4fb5d624a3503fb9e6617", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f516ddfeae888d2073a4fb5d624a3503fb9e6617", "committedDate": "2020-09-10T07:27:47Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f516ddfeae888d2073a4fb5d624a3503fb9e6617", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f516ddfeae888d2073a4fb5d624a3503fb9e6617", "committedDate": "2020-09-10T07:27:47Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "f2c19b3a03454357a5439b86aea6868545c5d755", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f2c19b3a03454357a5439b86aea6868545c5d755", "committedDate": "2020-09-10T07:36:12Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2c19b3a03454357a5439b86aea6868545c5d755", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f2c19b3a03454357a5439b86aea6868545c5d755", "committedDate": "2020-09-10T07:36:12Z", "message": "Implement AucRoc metric for classification"}, "afterCommit": {"oid": "a366fbbf67fb8cffaee3ca1327467693c0db0d49", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/a366fbbf67fb8cffaee3ca1327467693c0db0d49", "committedDate": "2020-09-10T08:25:49Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTA5NzM3", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-485909737", "createdAt": "2020-09-10T13:07:56Z", "commit": {"oid": "0c27a1000c15439c9db0b169294ff74de4008aba"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzowNzo1N1rOHPyrlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxMjozMlrOHPy4Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyMTA0Ng==", "bodyText": "Many of these classes return the same thing in getRequiredFields. Consider making it a default method of EvaluationMetric", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r486321046", "createdAt": "2020-09-10T13:07:57Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AbstractConfusionMatrixMetric.java", "diffHunk": "@@ -65,13 +67,19 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         return builder;\n     }\n \n+    @Override\n+    public Set<String> getRequiredFields() {\n+        return Set.of(EvaluationFields.ACTUAL_FIELD.getPreferredName(), EvaluationFields.PREDICTED_PROBABILITY_FIELD.getPreferredName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c27a1000c15439c9db0b169294ff74de4008aba"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNDI2Nw==", "bodyText": "actual field is a number or bool?\npredicted field is a number?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r486324267", "createdAt": "2020-09-10T13:12:32Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/OutlierDetection.java", "diffHunk": "@@ -50,30 +51,33 @@ public static OutlierDetection fromXContent(XContentParser parser) {\n         return PARSER.apply(parser, null);\n     }\n \n-    static QueryBuilder actualIsTrueQuery(String actualField) {\n+    public static QueryBuilder actualIsTrueQuery(String actualField) {\n         return QueryBuilders.queryStringQuery(actualField + \": (1 OR true)\");\n     }\n \n     /**\n-     * The field where the actual class is marked up.\n-     * The value of this field is assumed to either be 1 or 0, or true or false.\n+     * The collection of fields in the index being evaluated.\n+     *   fields.getActualField() is assumed to either be 1 or 0, or true or false.\n+     *   fields.getPredictedField() is assumed to be a number in [0.0, 1.0].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c384b15ad75b6b1a2b143a8c19193b49ff4ffca0"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c384b15ad75b6b1a2b143a8c19193b49ff4ffca0", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/c384b15ad75b6b1a2b143a8c19193b49ff4ffca0", "committedDate": "2020-09-10T13:07:08Z", "message": "Use ignoreUnmapped flag on nested queries so that the search doesn't fail when the nested field is absent;\nAdd validation that requires that either all the nested fields are specified or none of them are;"}, "afterCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/bfb68f21fa26d11562d02185f0509a9e7a4abae8", "committedDate": "2020-09-14T08:32:31Z", "message": "Apply review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjcyNzUz", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-487672753", "createdAt": "2020-09-14T11:47:11Z", "commit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0NzoxMVrOHRP_tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowMToxN1rOHRQcSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0OTkwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            registeredMetricName(Classification.NAME, AbstractAucRoc.NAME),\n          \n          \n            \n                            registeredMetricName(Classification.NAME, AucRoc.NAME),\n          \n      \n    \n    \n  \n\nI am not sure we should randomly choose AbstraceAucRoc here.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487849909", "createdAt": "2020-09-14T11:47:11Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/MlEvaluationNamedXContentProvider.java", "diffHunk": "@@ -163,29 +173,27 @@ public static String registeredMetricName(String evaluationName, String metricNa\n                 RSquared::new),\n \n             // Evaluation metrics results\n-            new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n-                registeredMetricName(OutlierDetection.NAME, AucRoc.NAME),\n-                AucRoc.Result::new),\n             new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n                 registeredMetricName(OutlierDetection.NAME, ScoreByThresholdResult.NAME),\n                 ScoreByThresholdResult::new),\n             new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n                 registeredMetricName(OutlierDetection.NAME, ConfusionMatrix.NAME),\n                 ConfusionMatrix.Result::new),\n+            new NamedWriteableRegistry.Entry(EvaluationMetricResult.class,\n+                registeredMetricName(Classification.NAME, AbstractAucRoc.NAME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDQ2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final ParseField NAME = new ParseField(\"auc_roc\");\n          \n      \n    \n    \n  \n\nI don't think this class should provide this. Either all subclasses respect it and use it (i.e. don't supply their own name), or we should provide it at all.\nThe mix between the two will only cause bugs.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487850466", "createdAt": "2020-09-14T11:48:20Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDYwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public String getName() {\n          \n          \n            \n                    return NAME.getPreferredName();\n          \n          \n            \n                }", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487850602", "createdAt": "2020-09-14T11:48:37Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");\n+\n+    protected AbstractAucRoc() {}\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MTgyMg==", "bodyText": "As mentioned in the comment on AbstractAucRoc.\nHaving both supply this parsefield name is going to lead to confusion. I think a cleaner abstraction would be that only one supplies the writable and xcontent names.\nI could go either way it being only supplied by the abstract class or only by the concrete class.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487851822", "createdAt": "2020-09-14T11:50:55Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AucRoc.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.filter.Filter;\n+import org.elasticsearch.search.aggregations.bucket.nested.Nested;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationFields;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationParameters;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public class AucRoc extends AbstractAucRoc {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MzQ1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (out.getVersion().onOrAfter(Version.CURRENT)) {\n          \n          \n            \n                    if (out.getVersion().onOrAfter(Version.V_8_0_0)) {", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487853454", "createdAt": "2020-09-14T11:54:07Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -109,17 +154,34 @@ public String getWriteableName() {\n \n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n-        out.writeString(actualField);\n-        out.writeString(predictedField);\n+        out.writeString(fields.getActualField());\n+        if (out.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MzUxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (in.getVersion().onOrAfter(Version.CURRENT)) {\n          \n          \n            \n                    if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487853518", "createdAt": "2020-09-14T11:54:14Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -77,8 +122,13 @@ public Classification(String actualField, String predictedField, @Nullable List<\n     }\n \n     public Classification(StreamInput in) throws IOException {\n-        this.actualField = in.readString();\n-        this.predictedField = in.readString();\n+        if (in.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NDI5Ng==", "bodyText": "See previous comment around abstract writable names vs concrete ones.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487854296", "createdAt": "2020-09-14T11:55:45Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/outlierdetection/AucRoc.java", "diffHunk": "@@ -58,30 +53,29 @@\n  * When this is used for multi-class classification, it will calculate the ROC\n  * curve of each class versus the rest.\n  */\n-public class AucRoc implements EvaluationMetric {\n+public class AucRoc extends AbstractAucRoc {\n \n     public static final ParseField NAME = new ParseField(\"auc_roc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NzIyNQ==", "bodyText": "I understand that removing the abstract auc_roc NAME might cause issues here. But the subclasses could supply a concrete version of these results class or the abstract is the thing that supplies the serialization names.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487857225", "createdAt": "2020-09-14T12:01:17Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AbstractAucRoc.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Area under the curve (AUC) of the receiver operating characteristic (ROC).\n+ * The ROC curve is a plot of the TPR (true positive rate) against\n+ * the FPR (false positive rate) over a varying threshold.\n+ *\n+ * This particular implementation is making use of ES aggregations\n+ * to calculate the curve. It then uses the trapezoidal rule to calculate\n+ * the AUC.\n+ *\n+ * In particular, in order to calculate the ROC, we get percentiles of TP\n+ * and FP against the predicted probability. We call those Rate-Threshold\n+ * curves. We then scan ROC points from each Rate-Threshold curve against the\n+ * other using interpolation. This gives us an approximation of the ROC curve\n+ * that has the advantage of being efficient and resilient to some edge cases.\n+ *\n+ * When this is used for multi-class classification, it will calculate the ROC\n+ * curve of each class versus the rest.\n+ */\n+public abstract class AbstractAucRoc implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"auc_roc\");\n+\n+    protected AbstractAucRoc() {}\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+\n+    protected static double[] percentilesArray(Percentiles percentiles, String errorIfUndefined) {\n+        double[] result = new double[99];\n+        percentiles.forEach(percentile -> {\n+            if (Double.isNaN(percentile.getValue())) {\n+                throw ExceptionsHelper.badRequestException(errorIfUndefined);\n+            }\n+            result[((int) percentile.getPercent()) - 1] = percentile.getValue();\n+        });\n+        return result;\n+    }\n+\n+    /**\n+     * Visible for testing\n+     */\n+    protected static List<AucRocPoint> buildAucRocCurve(double[] tpPercentiles, double[] fpPercentiles) {\n+        assert tpPercentiles.length == fpPercentiles.length;\n+        assert tpPercentiles.length == 99;\n+\n+        List<AucRocPoint> aucRocCurve = new ArrayList<>();\n+        aucRocCurve.add(new AucRocPoint(0.0, 0.0, 1.0));\n+        aucRocCurve.add(new AucRocPoint(1.0, 1.0, 0.0));\n+        RateThresholdCurve tpCurve = new RateThresholdCurve(tpPercentiles, true);\n+        RateThresholdCurve fpCurve = new RateThresholdCurve(fpPercentiles, false);\n+        aucRocCurve.addAll(tpCurve.scanPoints(fpCurve));\n+        aucRocCurve.addAll(fpCurve.scanPoints(tpCurve));\n+        Collections.sort(aucRocCurve);\n+        return aucRocCurve;\n+    }\n+\n+    /**\n+     * Visible for testing\n+     */\n+    protected static double calculateAucScore(List<AucRocPoint> rocCurve) {\n+        // Calculates AUC based on the trapezoid rule\n+        double aucRoc = 0.0;\n+        for (int i = 1; i < rocCurve.size(); i++) {\n+            AucRocPoint left = rocCurve.get(i - 1);\n+            AucRocPoint right = rocCurve.get(i);\n+            aucRoc += (right.fpr - left.fpr) * (right.tpr + left.tpr) / 2;\n+        }\n+        return aucRoc;\n+    }\n+\n+    private static class RateThresholdCurve {\n+\n+        private final double[] percentiles;\n+        private final boolean isTp;\n+\n+        private RateThresholdCurve(double[] percentiles, boolean isTp) {\n+            this.percentiles = percentiles;\n+            this.isTp = isTp;\n+        }\n+\n+        private double getRate(int index) {\n+            return 1 - 0.01 * (index + 1);\n+        }\n+\n+        private double getThreshold(int index) {\n+            return percentiles[index];\n+        }\n+\n+        private double interpolateRate(double threshold) {\n+            int binarySearchResult = Arrays.binarySearch(percentiles, threshold);\n+            if (binarySearchResult >= 0) {\n+                return getRate(binarySearchResult);\n+            } else {\n+                int right = (binarySearchResult * -1) -1;\n+                int left = right - 1;\n+                if (right >= percentiles.length) {\n+                    return 0.0;\n+                } else if (left < 0) {\n+                    return 1.0;\n+                } else {\n+                    double rightRate = getRate(right);\n+                    double leftRate = getRate(left);\n+                    return interpolate(threshold, percentiles[left], leftRate, percentiles[right], rightRate);\n+                }\n+            }\n+        }\n+\n+        private List<AucRocPoint> scanPoints(RateThresholdCurve againstCurve) {\n+            List<AucRocPoint> points = new ArrayList<>();\n+            for (int index = 0; index < percentiles.length; index++) {\n+                double rate = getRate(index);\n+                double scannedThreshold = getThreshold(index);\n+                double againstRate = againstCurve.interpolateRate(scannedThreshold);\n+                AucRocPoint point;\n+                if (isTp) {\n+                    point = new AucRocPoint(rate, againstRate, scannedThreshold);\n+                } else {\n+                    point = new AucRocPoint(againstRate, rate, scannedThreshold);\n+                }\n+                points.add(point);\n+            }\n+            return points;\n+        }\n+    }\n+\n+    public static final class AucRocPoint implements Comparable<AucRocPoint>, ToXContentObject, Writeable {\n+\n+        private final double tpr;\n+        private final double fpr;\n+        private final double threshold;\n+\n+        AucRocPoint(double tpr, double fpr, double threshold) {\n+            this.tpr = tpr;\n+            this.fpr = fpr;\n+            this.threshold = threshold;\n+        }\n+\n+        private AucRocPoint(StreamInput in) throws IOException {\n+            this.tpr = in.readDouble();\n+            this.fpr = in.readDouble();\n+            this.threshold = in.readDouble();\n+        }\n+\n+        @Override\n+        public int compareTo(AucRocPoint o) {\n+            return Comparator.comparingDouble((AucRocPoint p) -> p.threshold).reversed()\n+                .thenComparing(p -> p.fpr)\n+                .thenComparing(p -> p.tpr)\n+                .compare(this, o);\n+        }\n+\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n+            out.writeDouble(tpr);\n+            out.writeDouble(fpr);\n+            out.writeDouble(threshold);\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            builder.startObject();\n+            builder.field(\"tpr\", tpr);\n+            builder.field(\"fpr\", fpr);\n+            builder.field(\"threshold\", threshold);\n+            builder.endObject();\n+            return builder;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            AucRocPoint that = (AucRocPoint) o;\n+            return tpr == that.tpr\n+                && fpr == that.fpr\n+                && threshold == that.threshold;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(tpr, fpr, threshold);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return Strings.toString(this);\n+        }\n+    }\n+\n+    private static double interpolate(double x, double x1, double y1, double x2, double y2) {\n+        return y1 + (x - x1) * (y2 - y1) / (x2 - x1);\n+    }\n+\n+    public static class Result implements EvaluationMetricResult {\n+\n+        private final double score;\n+        private final List<AucRocPoint> curve;\n+\n+        public Result(double score, List<AucRocPoint> curve) {\n+            this.score = score;\n+            this.curve = Objects.requireNonNull(curve);\n+        }\n+\n+        public Result(StreamInput in) throws IOException {\n+            this.score = in.readDouble();\n+            this.curve = in.readList(AucRocPoint::new);\n+        }\n+\n+        public double getScore() {\n+            return score;\n+        }\n+\n+        public List<AucRocPoint> getCurve() {\n+            return Collections.unmodifiableList(curve);\n+        }\n+\n+        @Override\n+        public String getWriteableName() {\n+            return registeredMetricName(Classification.NAME, NAME);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 251}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzAyOTg5", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-487702989", "createdAt": "2020-09-14T12:30:28Z", "commit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozMDoyOFrOHRRcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMDozOVrOHRSnyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzYxOQ==", "bodyText": "Let's not use Map.of as it doesn't backport well to 7.x", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487873619", "createdAt": "2020-09-14T12:30:28Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "diffHunk": "@@ -391,7 +391,11 @@ public boolean supportsCategoricalFields() {\n             return additionalProperties;\n         }\n         additionalProperties.put(resultsFieldName + \".\" + predictionFieldName, dependentVariableMapping);\n-        additionalProperties.put(resultsFieldName + \".top_classes.class_name\", dependentVariableMapping);\n+        additionalProperties.put(\n+            resultsFieldName + \".top_classes\",\n+            Map.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NDIzOA==", "bodyText": "to be complete, shall we also include mappings for the probability field?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487874238", "createdAt": "2020-09-14T12:31:31Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "diffHunk": "@@ -391,7 +391,11 @@ public boolean supportsCategoricalFields() {\n             return additionalProperties;\n         }\n         additionalProperties.put(resultsFieldName + \".\" + predictionFieldName, dependentVariableMapping);\n-        additionalProperties.put(resultsFieldName + \".top_classes.class_name\", dependentVariableMapping);\n+        additionalProperties.put(\n+            resultsFieldName + \".top_classes\",\n+            Map.of(\n+                \"type\", ObjectMapper.NESTED_CONTENT_TYPE,\n+                \"properties\", Map.of(\"class_name\", dependentVariableMapping)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3ODY4Mg==", "bodyText": "extract in a method checkRequiredFieldsAreSet or similar?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487878682", "createdAt": "2020-09-14T12:38:54Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "diffHunk": "@@ -59,6 +57,22 @@\n             throw ExceptionsHelper.badRequestException(\"[{}] must have one or more metrics\", getName());\n         }\n         Collections.sort(metrics, Comparator.comparing(EvaluationMetric::getName));\n+        for (Tuple<String, String> requiredField : getFields().listAll()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MjgxOQ==", "bodyText": "Could we have a method List<QueryBuilder> EvaluationFields.buildExistsQueries()? Would that allow us to delete the explicit getters from EvaluationFields?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487882819", "createdAt": "2020-09-14T12:45:34Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/Evaluation.java", "diffHunk": "@@ -70,16 +84,46 @@ default SearchSourceBuilder buildSearch(EvaluationParameters parameters, QueryBu\n         Objects.requireNonNull(userProvidedQueryBuilder);\n         BoolQueryBuilder boolQuery =\n             QueryBuilders.boolQuery()\n-                // Verify existence of required fields\n-                .filter(QueryBuilders.existsQuery(getActualField()))\n-                .filter(QueryBuilders.existsQuery(getPredictedField()))\n-                // Apply user-provided query\n-                .filter(userProvidedQueryBuilder);\n+                // Verify existence of the actual field (which is always required)\n+                .filter(QueryBuilders.existsQuery(getFields().getActualField()));\n+        if (getFields().getPredictedField() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTQ1OQ==", "bodyText": "I wonder if we need this validation. We already validate that all fields required by the metrics are specified. Don't those two overlap?", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487891459", "createdAt": "2020-09-14T12:58:27Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/Classification.java", "diffHunk": "@@ -50,25 +61,59 @@ public static Classification fromXContent(XContentParser parser) {\n     }\n \n     /**\n-     * The field containing the actual value\n-     * The value of this field is assumed to be categorical\n+     * The collection of fields in the index being evaluated.\n+     *   fields.getActualField() is assumed to be a ground truth label.\n+     *   fields.getPredictedField() is assumed to be a predicted label.\n+     *   fields.getPredictedClassNameField() is assumed to be nested under fields.getResultsNestedField().\n+     *   fields.getPredictedProbabilityField() is assumed to be nested under fields.getResultsNestedField().\n      */\n-    private final String actualField;\n-\n-    /**\n-     * The field containing the predicted value\n-     * The value of this field is assumed to be categorical\n-     */\n-    private final String predictedField;\n+    private final EvaluationFields fields;\n \n     /**\n      * The list of metrics to calculate\n      */\n     private final List<EvaluationMetric> metrics;\n \n-    public Classification(String actualField, String predictedField, @Nullable List<EvaluationMetric> metrics) {\n-        this.actualField = ExceptionsHelper.requireNonNull(actualField, ACTUAL_FIELD);\n-        this.predictedField = ExceptionsHelper.requireNonNull(predictedField, PREDICTED_FIELD);\n+    public Classification(String actualField,\n+                          @Nullable String predictedField,\n+                          @Nullable String resultsNestedField,\n+                          @Nullable String predictedClassNameField,\n+                          @Nullable String predictedProbabilityField,\n+                          @Nullable List<EvaluationMetric> metrics) {\n+        // If any of these fields is specified, all of them must be specified.\n+        if (resultsNestedField != null || predictedClassNameField != null || predictedProbabilityField != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjkzOA==", "bodyText": "I think we should explain here that this calculates AUC ROC for a specific class. Plus, we need to think where we explain what happens to the docs that don't have the target class in the top classes.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r487892938", "createdAt": "2020-09-14T13:00:39Z", "author": {"login": "dimitris-athanasiou"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -164,6 +164,11 @@ belongs.\n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve. Default value is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb68f21fa26d11562d02185f0509a9e7a4abae8"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1230d57ae50fa7b8e65b2b94e8b803a47e76f47", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/b1230d57ae50fa7b8e65b2b94e8b803a47e76f47", "committedDate": "2020-09-15T07:59:48Z", "message": "Apply review comments"}, "afterCommit": {"oid": "a42677b64ce8a8999d021ba8050842fcfbdb25bc", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/a42677b64ce8a8999d021ba8050842fcfbdb25bc", "committedDate": "2020-09-15T08:23:03Z", "message": "Apply review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NDQ2NDk0", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-488446494", "createdAt": "2020-09-15T08:28:21Z", "commit": {"oid": "a42677b64ce8a8999d021ba8050842fcfbdb25bc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoyODoyMVrOHR2pZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoyODoyMVrOHR2pZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4MzE3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                It is calculated for a particular class X (provided as \"class_name\")\n          \n          \n            \n                It is calculated for a specific class (provided as \"class_name\")\n          \n      \n    \n    \n  \n\nSmall change that might simplify the sentence.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r488483175", "createdAt": "2020-09-15T08:28:21Z", "author": {"login": "szabosteve"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,36 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`results_nested_field`::\n+  (Optional, string) The field of the `index` which is a nested array of results.\n+\n+`predicted_class_name_field`::\n+  (Optional, string) The field of the `index` which contains the predicted class name.\n+  Must be nested under `results_nested_field`.\n+\n+`predicted_probability_field`::\n+  (Optional, string) The field of the `index` which contains the probability of\n+  whether the item belongs to the class in question or not.\n+  Must be nested under `results_nested_field`.\n+\n `metrics`::\n   (Optional, object) Specifies the metrics that are used for the evaluation.\n   Available metrics:\n \n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve.\n+    It is calculated for a particular class X (provided as \"class_name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42677b64ce8a8999d021ba8050842fcfbdb25bc"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a42677b64ce8a8999d021ba8050842fcfbdb25bc", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/a42677b64ce8a8999d021ba8050842fcfbdb25bc", "committedDate": "2020-09-15T08:23:03Z", "message": "Apply review comments"}, "afterCommit": {"oid": "b5f7305d71633dd7fa89f891f64a3600088a50c2", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/b5f7305d71633dd7fa89f891f64a3600088a50c2", "committedDate": "2020-09-15T11:20:28Z", "message": "Apply review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjA1MTAz", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-488605103", "createdAt": "2020-09-15T11:56:30Z", "commit": {"oid": "5ec62a4755201801b79dee667909725361e3dbc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ec62a4755201801b79dee667909725361e3dbc0", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/5ec62a4755201801b79dee667909725361e3dbc0", "committedDate": "2020-09-15T11:49:49Z", "message": "Fix compile error"}, "afterCommit": {"oid": "eabaefa39259f57a7b6a49011b53fef694069218", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/eabaefa39259f57a7b6a49011b53fef694069218", "committedDate": "2020-09-15T12:11:21Z", "message": "Fix compile error"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d088fafb362400ea84962a21e55aba5b022eff71", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/d088fafb362400ea84962a21e55aba5b022eff71", "committedDate": "2020-09-17T13:18:03Z", "message": "Apply review comment"}, "afterCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a", "committedDate": "2020-09-17T13:46:41Z", "message": "Fix org.elasticsearch.client.RestHighLevelClientTests.testProvidedNamedXContents after merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODA1Mzk1", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-491805395", "createdAt": "2020-09-18T21:56:51Z", "commit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo1Njo1MVrOHUdHnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo1Njo1MVrOHUdHnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxMDY1NQ==", "bodyText": "predicted_class_field\n\nWe can fix this in a subsequent PR if necessary, but this option doesn't appear in the right order alphabetically.", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r491210655", "createdAt": "2020-09-18T21:56:51Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,41 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`predicted_class_field`::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODA2ODY3", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-491806867", "createdAt": "2020-09-18T22:00:51Z", "commit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjowMDo1MVrOHUdROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjowMDo1MVrOHUdROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxMzExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  (i.e. in the auc_roc.doc_count field).\n          \n          \n            \n                  (`auc_roc.doc_count` field).", "url": "https://github.com/elastic/elasticsearch/pull/60502#discussion_r491213112", "createdAt": "2020-09-18T22:00:51Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/evaluate-dfanalytics.asciidoc", "diffHunk": "@@ -154,16 +154,41 @@ belongs.\n   The data type of this field must be categorical.\n   \n `predicted_field`::\n-  (Required, string) The field in the `index` that contains the predicted value, \n+  (Optional, string) The field in the `index` which contains the predicted value,\n   in other words the results of the {classanalysis}.\n \n+`predicted_class_field`::\n+  (Optional, string) The field of the `index` which contains the predicted class name.\n+\n+`predicted_probability_field`::\n+  (Optional, string) The field of the `index` which contains the probability of\n+  whether the item belongs to the class in question or not.\n+\n `metrics`::\n   (Optional, object) Specifies the metrics that are used for the evaluation.\n   Available metrics:\n \n   `accuracy`:::\n     (Optional, object) Accuracy of predictions (per-class and overall).\n \n+  `auc_roc`:::\n+    (Optional, object) The AUC ROC (area under the curve of the receiver\n+    operating characteristic) score and optionally the curve.\n+    It is calculated for a specific class (provided as \"class_name\")\n+    treated as positive.\n+\n+    `class_name`::::\n+      (Required, string) Name of the only class that will be treated as\n+      positive during AUC ROC calculation. Other classes will be treated as\n+      negative (\"one-vs-all\" strategy). Documents which do not have `class_name`\n+      in the list of their top classes will not be taken into account for evaluation.\n+      The number of documents taken into account is returned in the evaluation result\n+      (i.e. in the auc_roc.doc_count field).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/fbbf3a61bc5ee88f18f99ddb4926c39e8abea68a", "committedDate": "2020-09-17T13:46:41Z", "message": "Fix org.elasticsearch.client.RestHighLevelClientTests.testProvidedNamedXContents after merge"}, "afterCommit": {"oid": "ced0818215269828d8198d641ad5d91bd2d852ab", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/ced0818215269828d8198d641ad5d91bd2d852ab", "committedDate": "2020-09-21T08:48:51Z", "message": "Apply review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ced0818215269828d8198d641ad5d91bd2d852ab", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/ced0818215269828d8198d641ad5d91bd2d852ab", "committedDate": "2020-09-21T08:48:51Z", "message": "Apply review comments."}, "afterCommit": {"oid": "fe85e5c33eacaff060d2dc221e09ed11b93f30a9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe85e5c33eacaff060d2dc221e09ed11b93f30a9", "committedDate": "2020-09-28T09:28:52Z", "message": "Add top_classes_field to the Classification evaluation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDU0NDE4", "url": "https://github.com/elastic/elasticsearch/pull/60502#pullrequestreview-498454418", "createdAt": "2020-09-29T13:14:55Z", "commit": {"oid": "fe85e5c33eacaff060d2dc221e09ed11b93f30a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeba04e99449a6be5eb6e79970815c21b373bdd5", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/aeba04e99449a6be5eb6e79970815c21b373bdd5", "committedDate": "2020-09-30T06:03:20Z", "message": "Implement AucRoc metric for classification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243576e8403e4c7daa301359d2e360d4a1992073", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/243576e8403e4c7daa301359d2e360d4a1992073", "committedDate": "2020-09-30T06:03:20Z", "message": "Revert HLRC changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a1b503336a6e3e3ef3b8f006ba9df9ee43f1e3f", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/8a1b503336a6e3e3ef3b8f006ba9df9ee43f1e3f", "committedDate": "2020-09-30T06:03:20Z", "message": "Revert HLRC changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fd073a5b33f75ff966bae63e3e784b2828fb709", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/6fd073a5b33f75ff966bae63e3e784b2828fb709", "committedDate": "2020-09-30T06:03:20Z", "message": "Revert HLRC changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d6317d320c9b560fc409595c0c8d1fbdbc7129", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f0d6317d320c9b560fc409595c0c8d1fbdbc7129", "committedDate": "2020-09-30T06:03:20Z", "message": "Use ignoreUnmapped flag on nested queries so that the search doesn't fail when the nested field is absent;\nAdd validation that requires that either all the nested fields are specified or none of them are;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4673c74586d3b429c92e10cc0e3deb1787b18275", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/4673c74586d3b429c92e10cc0e3deb1787b18275", "committedDate": "2020-09-30T06:03:20Z", "message": "Apply review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea136d718126680ce656fd920f6353a9cd4b1cb9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/ea136d718126680ce656fd920f6353a9cd4b1cb9", "committedDate": "2020-09-30T06:03:20Z", "message": "Apply review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126cb7d342108580f2af1e50bcd138964c7603a6", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/126cb7d342108580f2af1e50bcd138964c7603a6", "committedDate": "2020-09-30T06:03:21Z", "message": "Fix compile error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "147398f8381d32f9cc1e6f9d47435509615ba28a", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/147398f8381d32f9cc1e6f9d47435509615ba28a", "committedDate": "2020-09-30T06:03:21Z", "message": "Apply docs-related review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21efd55ef18b05f31e5161e553bfae7f0c096d5b", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/21efd55ef18b05f31e5161e553bfae7f0c096d5b", "committedDate": "2020-09-30T06:03:21Z", "message": "Fix bug in Classification::getExplicitlyMappedFields method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aff0a887a1e5863043253d5a1098f6b3cada935", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/0aff0a887a1e5863043253d5a1098f6b3cada935", "committedDate": "2020-09-30T06:03:21Z", "message": "Add doc_count field; Make exception messages more detailed;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18b742897b02fbcca2b0a19a8ea352b81ff64869", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/18b742897b02fbcca2b0a19a8ea352b81ff64869", "committedDate": "2020-09-30T06:03:21Z", "message": "Adapt outlier_detection.AucRoc to have the same error messages as classification.AucRoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "782e7d2d01654b6bf1067b4dde67d93e96e479e9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/782e7d2d01654b6bf1067b4dde67d93e96e479e9", "committedDate": "2020-09-30T06:03:21Z", "message": "Fix error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ac4e5af63afd02cb12ac0706e63c3611723f94", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/40ac4e5af63afd02cb12ac0706e63c3611723f94", "committedDate": "2020-09-30T06:03:21Z", "message": "Rename predicted_class_name_field to predicted_class_field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f5b82e8749a53d42419d713d3422293b2454414", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/0f5b82e8749a53d42419d713d3422293b2454414", "committedDate": "2020-09-30T06:03:21Z", "message": "Remove redundant evaluation.classification.results_nested_field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f831d9f1d5855a999ed786d6c97ad90f9022318c", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f831d9f1d5855a999ed786d6c97ad90f9022318c", "committedDate": "2020-09-30T06:03:21Z", "message": "Fix ml-with-security yaml tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e6ca5f891f592d682ec9ad1a99032a5d9fad7a", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0e6ca5f891f592d682ec9ad1a99032a5d9fad7a", "committedDate": "2020-09-30T06:03:22Z", "message": "Apply default values for predicted_class_field and predicted_probability_field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa082183d03b6c7be4daf47945c6963849ea2216", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/aa082183d03b6c7be4daf47945c6963849ea2216", "committedDate": "2020-09-30T06:03:22Z", "message": "Apply review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d707184e94f39c0a6142596a7eb8103bcf1e290", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/6d707184e94f39c0a6142596a7eb8103bcf1e290", "committedDate": "2020-09-30T06:03:22Z", "message": "Fix org.elasticsearch.client.RestHighLevelClientTests.testProvidedNamedXContents after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "634eb2e4871d722bcc9f44952d250bb37c8713e1", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/634eb2e4871d722bcc9f44952d250bb37c8713e1", "committedDate": "2020-09-30T06:03:22Z", "message": "Apply review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f99bad1760b59e6dcc35507a921c82bbd4c92527", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f99bad1760b59e6dcc35507a921c82bbd4c92527", "committedDate": "2020-09-30T06:03:22Z", "message": "Add top_classes_field to the Classification evaluation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe85e5c33eacaff060d2dc221e09ed11b93f30a9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe85e5c33eacaff060d2dc221e09ed11b93f30a9", "committedDate": "2020-09-28T09:28:52Z", "message": "Add top_classes_field to the Classification evaluation."}, "afterCommit": {"oid": "f99bad1760b59e6dcc35507a921c82bbd4c92527", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/f99bad1760b59e6dcc35507a921c82bbd4c92527", "committedDate": "2020-09-30T06:03:22Z", "message": "Add top_classes_field to the Classification evaluation."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3548, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}