{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjA0MjQw", "number": 52258, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxMDowNlrODfHiaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxMDowNlrODfHiaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTU1OTQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxMDowNlrOFoooOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoxNDowOFrOFooxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1MzAxOA==", "bodyText": "Let's include data.bytes.length in the message too, just in case.", "url": "https://github.com/elastic/elasticsearch/pull/52258#discussion_r378153018", "createdAt": "2020-02-12T10:10:06Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -257,6 +258,27 @@ public String toString() {\n             '}';\n     }\n \n+    private InputStream openBlobStream(int part, long pos, long length) throws IOException {\n+        final InputStream stream;\n+        if (fileInfo.metadata().hashEqualsContents() == false) {\n+            stream = blobContainer.readBlob(fileInfo.partName(part), pos, length);\n+        } else {\n+            // extract blob content from metadata hash\n+            final BytesRef data = fileInfo.metadata().hash();\n+            if (part > 0) {\n+                assert fileInfo.numberOfParts() >= part;\n+                for (int i = 0; i < part; i++) {\n+                    pos += fileInfo.partBytes(i);\n+                }\n+            }\n+            if ((pos < 0L) || (length < 0L) || (pos + length > data.bytes.length)) {\n+                throw new IllegalArgumentException(\"Invalid arguments (pos=\" + pos + \", length=\" + length + \") for hash content\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd65970d095fceaef36c1736080e3c9cc61fa2ec"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NTM1NA==", "bodyText": "Sure", "url": "https://github.com/elastic/elasticsearch/pull/52258#discussion_r378155354", "createdAt": "2020-02-12T10:14:08Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -257,6 +258,27 @@ public String toString() {\n             '}';\n     }\n \n+    private InputStream openBlobStream(int part, long pos, long length) throws IOException {\n+        final InputStream stream;\n+        if (fileInfo.metadata().hashEqualsContents() == false) {\n+            stream = blobContainer.readBlob(fileInfo.partName(part), pos, length);\n+        } else {\n+            // extract blob content from metadata hash\n+            final BytesRef data = fileInfo.metadata().hash();\n+            if (part > 0) {\n+                assert fileInfo.numberOfParts() >= part;\n+                for (int i = 0; i < part; i++) {\n+                    pos += fileInfo.partBytes(i);\n+                }\n+            }\n+            if ((pos < 0L) || (length < 0L) || (pos + length > data.bytes.length)) {\n+                throw new IllegalArgumentException(\"Invalid arguments (pos=\" + pos + \", length=\" + length + \") for hash content\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1MzAxOA=="}, "originalCommit": {"oid": "dd65970d095fceaef36c1736080e3c9cc61fa2ec"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4788, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}