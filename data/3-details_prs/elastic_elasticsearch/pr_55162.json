{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjI3NTE0", "number": 55162, "title": "[7.x] Add analytics plugin usage stats to _xpack/usage (#54911)", "bodyText": "Adds analytics plugin usage stats to _xpack/usage.\nCloses #54847\n@nik9000, @polyfractal I will have to do some change to #54911 once this PR is merged to make it backward compatible. I discovered some issues during porting. Basically I will have to forward port these changes in AnalyticsStatsAction.java. Since there are significant changes in this backport I would love to get a review from one of you.", "createdAt": "2020-04-14T14:42:05Z", "url": "https://github.com/elastic/elasticsearch/pull/55162", "merged": true, "mergeCommit": {"oid": "1754e50cbd2dd80aba6f943cd9b1a57d9dd322ed"}, "closed": true, "closedAt": "2020-04-14T21:03:15Z", "author": {"login": "imotov"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXkfmHAH2gAyNDAzMjI3NTE0OjljNDg3YWQwMDk1MzY0ODg2NDY3YzgxMjZmODVlOGUzNjQyYjg4OTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXpV3iAFqTM5MzI1OTkxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c487ad0095364886467c8126f85e8e3642b8897", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/9c487ad0095364886467c8126f85e8e3642b8897", "committedDate": "2020-04-14T14:37:26Z", "message": "Add analytics plugin usage stats to _xpack/usage (#54911)\n\nAdds analytics plugin usage stats to _xpack/usage.\n\nCloses #54847"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa308986a3c5f0a0ec6ef619f8d0f27c511c520c", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/fa308986a3c5f0a0ec6ef619f8d0f27c511c520c", "committedDate": "2020-04-14T15:49:16Z", "message": "Fix serialization names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a21f01195b59102dc61f3c27470820cad1cbe109", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/a21f01195b59102dc61f3c27470820cad1cbe109", "committedDate": "2020-04-14T15:53:44Z", "message": "Rename test for consistency with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdfae910db885f398d1715e7d60927bd26c90f7", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/5cdfae910db885f398d1715e7d60927bd26c90f7", "committedDate": "2020-04-14T17:46:18Z", "message": "Make index name in test more unique"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c081089e932eba5132fe93d7ba2aa5c64ee9702", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/7c081089e932eba5132fe93d7ba2aa5c64ee9702", "committedDate": "2020-04-14T18:15:08Z", "message": "Suppress warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjU5OTE4", "url": "https://github.com/elastic/elasticsearch/pull/55162#pullrequestreview-393259918", "createdAt": "2020-04-14T20:12:32Z", "commit": {"oid": "7c081089e932eba5132fe93d7ba2aa5c64ee9702"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMjozM1rOGFfIjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMjozM1rOGFfIjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNjE1OA==", "bodyText": "Should this be a VLong not ZLong?", "url": "https://github.com/elastic/elasticsearch/pull/55162#discussion_r408406158", "createdAt": "2020-04-14T20:12:33Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/action/AnalyticsStatsAction.java", "diffHunk": "@@ -97,109 +110,84 @@ protected void writeNodesTo(StreamOutput out, List<NodeResponse> nodes) throws I\n             out.writeList(nodes);\n         }\n \n+        public EnumCounters<Item> getStats() {\n+            List<EnumCounters<Item>> countersPerNode = getNodes()\n+                .stream()\n+                .map(AnalyticsStatsAction.NodeResponse::getStats)\n+                .collect(Collectors.toList());\n+            return EnumCounters.merge(Item.class, countersPerNode);\n+        }\n+\n         @Override\n         public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-            builder.startArray(\"stats\");\n-            for (NodeResponse node : getNodes()) {\n-                node.toXContent(builder, params);\n+            EnumCounters<Item> stats = getStats();\n+            builder.startObject(\"stats\");\n+            for (Item item : Item.values()) {\n+                builder.field(item.name().toLowerCase(Locale.ROOT) + \"_usage\", stats.get(item));\n             }\n-            builder.endArray();\n-\n+            builder.endObject();\n             return builder;\n         }\n     }\n \n-    public static class NodeResponse extends BaseNodeResponse implements ToXContentObject {\n-        static final ParseField BOXPLOT_USAGE = new ParseField(\"boxplot_usage\");\n-        static final ParseField CUMULATIVE_CARDINALITY_USAGE = new ParseField(\"cumulative_cardinality_usage\");\n-        static final ParseField STRING_STATS_USAGE = new ParseField(\"string_stats_usage\");\n-        static final ParseField TOP_METRICS_USAGE = new ParseField(\"top_metrics_usage\");\n-        static final ParseField T_TEST_USAGE = new ParseField(\"t_test_usage\");\n-\n-        private final long boxplotUsage;\n-        private final long cumulativeCardinalityUsage;\n-        private final long stringStatsUsage;\n-        private final long topMetricsUsage;\n-        private final long ttestUsage;\n-\n-        public NodeResponse(DiscoveryNode node, long boxplotUsage, long cumulativeCardinalityUsage, long stringStatsUsage,\n-                long topMetricsUsage, long ttestUsage) {\n+    public static class NodeResponse extends BaseNodeResponse {\n+        private final EnumCounters<Item> counters;\n+\n+        public NodeResponse(DiscoveryNode node, EnumCounters<Item> counters) {\n             super(node);\n-            this.boxplotUsage = boxplotUsage;\n-            this.cumulativeCardinalityUsage = cumulativeCardinalityUsage;\n-            this.stringStatsUsage = stringStatsUsage;\n-            this.topMetricsUsage = topMetricsUsage;\n-            this.ttestUsage = ttestUsage;\n+            this.counters = counters;\n         }\n \n         public NodeResponse(StreamInput in) throws IOException {\n             super(in);\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                boxplotUsage = in.readVLong();\n-            } else {\n-                boxplotUsage = 0;\n-            }\n-            cumulativeCardinalityUsage = in.readZLong();\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                stringStatsUsage = in.readVLong();\n-                topMetricsUsage = in.readVLong();\n-            } else {\n-                topMetricsUsage = 0;\n-                stringStatsUsage = 0;\n-            }\n             if (in.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                ttestUsage = in.readVLong();\n+                counters = new EnumCounters<>(in, Item.class);\n             } else {\n-                ttestUsage = 0;\n+                counters = new EnumCounters<>(Item.class);\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.BOXPLOT, in.readVLong());\n+                }\n+                counters.inc(Item.CUMULATIVE_CARDINALITY, in.readZLong());\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.STRING_STATS, in.readVLong());\n+                    counters.inc(Item.TOP_METRICS, in.readVLong());\n+                }\n             }\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(boxplotUsage);\n-            }\n-            out.writeVLong(cumulativeCardinalityUsage);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(stringStatsUsage);\n-                out.writeVLong(topMetricsUsage);\n-            }\n             if (out.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                out.writeVLong(ttestUsage);\n+                counters.writeTo(out);\n+            } else {\n+                if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    out.writeVLong(counters.get(Item.BOXPLOT));\n+                }\n+                out.writeZLong(counters.get(Item.CUMULATIVE_CARDINALITY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c081089e932eba5132fe93d7ba2aa5c64ee9702"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3546, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}