{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NzgzNjg2", "number": 62564, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1MzowMFrOEkozoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozNTowMlrOEk1d2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODUyNzY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1MzowMFrOHTseYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1MzowMFrOHTseYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMzY2NQ==", "bodyText": "nit...as this is technically not a suffix any longer :D\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String STATE_DOC_ID_SUFFIX = \"_classification_state#\";\n          \n          \n            \n                private static final String STATE_DOC_ID_INFIX = \"_classification_state#\";", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490413665", "createdAt": "2020-09-17T16:53:00Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java", "diffHunk": "@@ -55,7 +55,7 @@\n     public static final ParseField RANDOMIZE_SEED = new ParseField(\"randomize_seed\");\n     public static final ParseField FEATURE_PROCESSORS = new ParseField(\"feature_processors\");\n \n-    private static final String STATE_DOC_ID_SUFFIX = \"_classification_state#1\";\n+    private static final String STATE_DOC_ID_SUFFIX = \"_classification_state#\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODUyOTEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Regression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1MzoyMVrOHTsfNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1MzoyMVrOHTsfNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMzg3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String STATE_DOC_ID_SUFFIX = \"_regression_state#\";\n          \n          \n            \n                private static final String STATE_DOC_ID_INFIX = \"_regression_state#\";", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490413879", "createdAt": "2020-09-17T16:53:21Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Regression.java", "diffHunk": "@@ -51,7 +51,7 @@\n     public static final ParseField LOSS_FUNCTION_PARAMETER = new ParseField(\"loss_function_parameter\");\n     public static final ParseField FEATURE_PROCESSORS = new ParseField(\"feature_processors\");\n \n-    private static final String STATE_DOC_ID_SUFFIX = \"_regression_state#1\";\n+    private static final String STATE_DOC_ID_SUFFIX = \"_regression_state#\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU4NjM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteDataFrameAnalyticsAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyOTowOFrOHT_vcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTozMzoxMFrOHUFe2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyOTMzMA==", "bodyText": "Is this recursion needed? Would it be possible to delete all the #1, #2, etc. in one deleteByQuery request?\nI know we don't know the number of state docs in advance, but maybe we could apply some id pattern?", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490729330", "createdAt": "2020-09-18T06:29:08Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteDataFrameAnalyticsAction.java", "diffHunk": "@@ -242,17 +241,46 @@ private void deleteState(ParentTaskAssigningClient parentTaskClient,\n                              DataFrameAnalyticsConfig config,\n                              TimeValue timeout,\n                              ActionListener<BulkByScrollResponse> listener) {\n-        List<String> ids = new ArrayList<>();\n-        ids.add(StoredProgress.documentId(config.getId()));\n-        if (config.getAnalysis().persistsState()) {\n-            ids.add(config.getAnalysis().getStateDocId(config.getId()));\n+        ActionListener<Boolean> deleteModelStateListener = ActionListener.wrap(\n+            r -> executeDeleteByQuery(\n+                    parentTaskClient,\n+                    AnomalyDetectorsIndex.jobStateIndexPattern(),\n+                    QueryBuilders.idsQuery().addIds(StoredProgress.documentId(config.getId())),\n+                    timeout,\n+                    listener\n+                )\n+            , listener::onFailure\n+        );\n+\n+        deleteModelState(parentTaskClient, config, timeout, 1, deleteModelStateListener);\n+    }\n+\n+    private void deleteModelState(ParentTaskAssigningClient parentTaskClient,\n+                                  DataFrameAnalyticsConfig config,\n+                                  TimeValue timeout,\n+                                  int docNum,\n+                                  ActionListener<Boolean> listener) {\n+        if (config.getAnalysis().persistsState() == false) {\n+            listener.onResponse(true);\n+            return;\n         }\n+\n+        IdsQueryBuilder query = QueryBuilders.idsQuery().addIds(config.getAnalysis().getStateDocIdPrefix(config.getId()) + docNum);\n         executeDeleteByQuery(\n             parentTaskClient,\n             AnomalyDetectorsIndex.jobStateIndexPattern(),\n-            QueryBuilders.idsQuery().addIds(ids.toArray(String[]::new)),\n+            query,\n             timeout,\n-            listener\n+            ActionListener.wrap(\n+                response -> {\n+                    if (response.getDeleted() > 0) {\n+                        deleteModelState(parentTaskClient, config, timeout, docNum + 1, listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMzM4Ng==", "bodyText": "Unfortunately can't have a pattern query for ids.\nNote, however, this is not a real recursion. As the client call is async, each deleteModelState call completes immediately. We then make the new call when we get a response from the client.", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490823386", "createdAt": "2020-09-18T09:33:10Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteDataFrameAnalyticsAction.java", "diffHunk": "@@ -242,17 +241,46 @@ private void deleteState(ParentTaskAssigningClient parentTaskClient,\n                              DataFrameAnalyticsConfig config,\n                              TimeValue timeout,\n                              ActionListener<BulkByScrollResponse> listener) {\n-        List<String> ids = new ArrayList<>();\n-        ids.add(StoredProgress.documentId(config.getId()));\n-        if (config.getAnalysis().persistsState()) {\n-            ids.add(config.getAnalysis().getStateDocId(config.getId()));\n+        ActionListener<Boolean> deleteModelStateListener = ActionListener.wrap(\n+            r -> executeDeleteByQuery(\n+                    parentTaskClient,\n+                    AnomalyDetectorsIndex.jobStateIndexPattern(),\n+                    QueryBuilders.idsQuery().addIds(StoredProgress.documentId(config.getId())),\n+                    timeout,\n+                    listener\n+                )\n+            , listener::onFailure\n+        );\n+\n+        deleteModelState(parentTaskClient, config, timeout, 1, deleteModelStateListener);\n+    }\n+\n+    private void deleteModelState(ParentTaskAssigningClient parentTaskClient,\n+                                  DataFrameAnalyticsConfig config,\n+                                  TimeValue timeout,\n+                                  int docNum,\n+                                  ActionListener<Boolean> listener) {\n+        if (config.getAnalysis().persistsState() == false) {\n+            listener.onResponse(true);\n+            return;\n         }\n+\n+        IdsQueryBuilder query = QueryBuilders.idsQuery().addIds(config.getAnalysis().getStateDocIdPrefix(config.getId()) + docNum);\n         executeDeleteByQuery(\n             parentTaskClient,\n             AnomalyDetectorsIndex.jobStateIndexPattern(),\n-            QueryBuilders.idsQuery().addIds(ids.toArray(String[]::new)),\n+            query,\n             timeout,\n-            listener\n+            ActionListener.wrap(\n+                response -> {\n+                    if (response.getDeleted() > 0) {\n+                        deleteModelState(parentTaskClient, config, timeout, docNum + 1, listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyOTMzMA=="}, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU4OTk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteDataFrameAnalyticsAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozMDoyMVrOHT_xYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzowMjo0NVrOHV46vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyOTgyNQ==", "bodyText": "Does UnusedStateRemover class need to be changed too?", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490729825", "createdAt": "2020-09-18T06:30:21Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteDataFrameAnalyticsAction.java", "diffHunk": "@@ -242,17 +241,46 @@ private void deleteState(ParentTaskAssigningClient parentTaskClient,\n                              DataFrameAnalyticsConfig config,\n                              TimeValue timeout,\n                              ActionListener<BulkByScrollResponse> listener) {\n-        List<String> ids = new ArrayList<>();\n-        ids.add(StoredProgress.documentId(config.getId()));\n-        if (config.getAnalysis().persistsState()) {\n-            ids.add(config.getAnalysis().getStateDocId(config.getId()));\n+        ActionListener<Boolean> deleteModelStateListener = ActionListener.wrap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNDY4Nw==", "bodyText": "No because the corresponding job id extractors (see Classification.extractJobIdFromStateDoc and Regression.extractJobIdFromStateDoc) successfully extract the job id regardless of the document number that follows the infix.", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r492714687", "createdAt": "2020-09-22T13:02:45Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteDataFrameAnalyticsAction.java", "diffHunk": "@@ -242,17 +241,46 @@ private void deleteState(ParentTaskAssigningClient parentTaskClient,\n                              DataFrameAnalyticsConfig config,\n                              TimeValue timeout,\n                              ActionListener<BulkByScrollResponse> listener) {\n-        List<String> ids = new ArrayList<>();\n-        ids.add(StoredProgress.documentId(config.getId()));\n-        if (config.getAnalysis().persistsState()) {\n-            ids.add(config.getAnalysis().getStateDocId(config.getId()));\n+        ActionListener<Boolean> deleteModelStateListener = ActionListener.wrap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyOTgyNQ=="}, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYwMTg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/NativeAnalyticsProcess.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozNTowMlrOHT_4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo0MzoyNVrOHUF68Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMTYxMw==", "bodyText": "This comment is somewhat related to the one about using recursion. Could we fetch all the state docs at once using some pattern-matched query?\nIf not, and if\nwe expect  many state docs to exist, we could try to fetch them in batches (by adding ids #1, #2, ..., #10 to one ids query) to reduce the number of queries.\nPlease disregard the above if we expect the number of docs to be small so there is no need for premature optimization.", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490731613", "createdAt": "2020-09-18T06:35:02Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/NativeAnalyticsProcess.java", "diffHunk": "@@ -56,10 +59,23 @@ public AnalyticsProcessConfig getConfig() {\n     }\n \n     @Override\n-    public void restoreState(BytesReference state) throws IOException {\n-        Objects.requireNonNull(state);\n+    public void restoreState(Client client, String stateDocIdPrefix) throws IOException {\n+        Objects.requireNonNull(stateDocIdPrefix);\n         try (OutputStream restoreStream = processRestoreStream()) {\n-            StateToProcessWriterHelper.writeStateToStream(state, restoreStream);\n+            int docNum = 0;\n+            while (true) {\n+                if (isProcessKilled()) {\n+                    return;\n+                }\n+\n+                SearchResponse stateResponse = client.prepareSearch(AnomalyDetectorsIndex.jobStateIndexPattern())\n+                    .setSize(1)\n+                    .setQuery(QueryBuilders.idsQuery().addIds(stateDocIdPrefix + ++docNum)).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNDQ3Mg==", "bodyText": "Could we fetch all the state docs at once using some pattern-matched query?\n\nWe deliberately fetch one at a time because if there is more than one then all but the last will be quite big (~16MB in size).  The reason why we split the state over multiple documents is to avoid using all the JVM heap with a massive model state that we have to hold in memory in its entirety.\nThere should probably be a comment to say we are deliberately only bringing one document into memory at a time because they are big.", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490814472", "createdAt": "2020-09-18T09:16:52Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/NativeAnalyticsProcess.java", "diffHunk": "@@ -56,10 +59,23 @@ public AnalyticsProcessConfig getConfig() {\n     }\n \n     @Override\n-    public void restoreState(BytesReference state) throws IOException {\n-        Objects.requireNonNull(state);\n+    public void restoreState(Client client, String stateDocIdPrefix) throws IOException {\n+        Objects.requireNonNull(stateDocIdPrefix);\n         try (OutputStream restoreStream = processRestoreStream()) {\n-            StateToProcessWriterHelper.writeStateToStream(state, restoreStream);\n+            int docNum = 0;\n+            while (true) {\n+                if (isProcessKilled()) {\n+                    return;\n+                }\n+\n+                SearchResponse stateResponse = client.prepareSearch(AnomalyDetectorsIndex.jobStateIndexPattern())\n+                    .setSize(1)\n+                    .setQuery(QueryBuilders.idsQuery().addIds(stateDocIdPrefix + ++docNum)).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMTYxMw=="}, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzMDU3Nw==", "bodyText": "The reason why we split the state over multiple documents is to avoid using all the JVM heap with a massive model state that we have to hold in memory in its entirety.\n\nGreat, thanks for explaining that!", "url": "https://github.com/elastic/elasticsearch/pull/62564#discussion_r490830577", "createdAt": "2020-09-18T09:43:25Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/NativeAnalyticsProcess.java", "diffHunk": "@@ -56,10 +59,23 @@ public AnalyticsProcessConfig getConfig() {\n     }\n \n     @Override\n-    public void restoreState(BytesReference state) throws IOException {\n-        Objects.requireNonNull(state);\n+    public void restoreState(Client client, String stateDocIdPrefix) throws IOException {\n+        Objects.requireNonNull(stateDocIdPrefix);\n         try (OutputStream restoreStream = processRestoreStream()) {\n-            StateToProcessWriterHelper.writeStateToStream(state, restoreStream);\n+            int docNum = 0;\n+            while (true) {\n+                if (isProcessKilled()) {\n+                    return;\n+                }\n+\n+                SearchResponse stateResponse = client.prepareSearch(AnomalyDetectorsIndex.jobStateIndexPattern())\n+                    .setSize(1)\n+                    .setQuery(QueryBuilders.idsQuery().addIds(stateDocIdPrefix + ++docNum)).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMTYxMw=="}, "originalCommit": {"oid": "bcdb6b5d76a0e7918997bfa5e6afac9f96071e86"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3564, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}