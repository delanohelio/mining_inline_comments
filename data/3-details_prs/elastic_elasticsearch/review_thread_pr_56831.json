{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjU0MTM3", "number": 56831, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyODoyOFrOD-tCEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyODoyOFrOD-tCEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDc2MTEyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptedMetricAggContextsTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyODoyOFrOGY-ACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOToyMjowMFrOGY_r9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNDgyNw==", "bodyText": "I think assertThat with hamcrest matchers will give a nicer error message here if this fails.", "url": "https://github.com/elastic/elasticsearch/pull/56831#discussion_r428834827", "createdAt": "2020-05-21T18:28:28Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptedMetricAggContextsTests.java", "diffHunk": "@@ -91,6 +91,33 @@ public void testMapBasic() throws IOException {\n         assertEquals(1.0, state.get(\"testField\"));\n     }\n \n+    public void testReturnSource() throws IOException {\n+        ScriptedMetricAggContexts.MapScript.Factory factory = scriptEngine.compile(\"test\",\n+                \"state._source = params._source\", ScriptedMetricAggContexts.MapScript.CONTEXT, Collections.emptyMap());\n+\n+        Map<String, Object> params = new HashMap<>();\n+        Map<String, Object> state = new HashMap<>();\n+\n+        MemoryIndex index = new MemoryIndex();\n+        // we don't need a real index, just need to construct a LeafReaderContext which cannot be mocked\n+        LeafReaderContext leafReaderContext = index.createSearcher().getIndexReader().leaves().get(0);\n+\n+        SearchLookup lookup = mock(SearchLookup.class);\n+        LeafSearchLookup leafLookup = mock(LeafSearchLookup.class);\n+        when(lookup.getLeafSearchLookup(leafReaderContext)).thenReturn(leafLookup);\n+        SourceLookup sourceLookup = mock(SourceLookup.class);\n+        when(leafLookup.asMap()).thenReturn(Collections.singletonMap(\"_source\", sourceLookup));\n+        when(sourceLookup.loadSourceIfNeeded()).thenReturn(Collections.singletonMap(\"test\", 1));\n+        ScriptedMetricAggContexts.MapScript.LeafFactory leafFactory = factory.newFactory(params, state, lookup);\n+        ScriptedMetricAggContexts.MapScript script = leafFactory.newInstance(leafReaderContext);\n+\n+        script.execute();\n+\n+        assert(state.containsKey(\"_source\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd314ccb0cd80da6d26d0a62424eec3c62d6fe2f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjQ1Mg==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/56831#discussion_r428862452", "createdAt": "2020-05-21T19:22:00Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptedMetricAggContextsTests.java", "diffHunk": "@@ -91,6 +91,33 @@ public void testMapBasic() throws IOException {\n         assertEquals(1.0, state.get(\"testField\"));\n     }\n \n+    public void testReturnSource() throws IOException {\n+        ScriptedMetricAggContexts.MapScript.Factory factory = scriptEngine.compile(\"test\",\n+                \"state._source = params._source\", ScriptedMetricAggContexts.MapScript.CONTEXT, Collections.emptyMap());\n+\n+        Map<String, Object> params = new HashMap<>();\n+        Map<String, Object> state = new HashMap<>();\n+\n+        MemoryIndex index = new MemoryIndex();\n+        // we don't need a real index, just need to construct a LeafReaderContext which cannot be mocked\n+        LeafReaderContext leafReaderContext = index.createSearcher().getIndexReader().leaves().get(0);\n+\n+        SearchLookup lookup = mock(SearchLookup.class);\n+        LeafSearchLookup leafLookup = mock(LeafSearchLookup.class);\n+        when(lookup.getLeafSearchLookup(leafReaderContext)).thenReturn(leafLookup);\n+        SourceLookup sourceLookup = mock(SourceLookup.class);\n+        when(leafLookup.asMap()).thenReturn(Collections.singletonMap(\"_source\", sourceLookup));\n+        when(sourceLookup.loadSourceIfNeeded()).thenReturn(Collections.singletonMap(\"test\", 1));\n+        ScriptedMetricAggContexts.MapScript.LeafFactory leafFactory = factory.newFactory(params, state, lookup);\n+        ScriptedMetricAggContexts.MapScript script = leafFactory.newInstance(leafReaderContext);\n+\n+        script.execute();\n+\n+        assert(state.containsKey(\"_source\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNDgyNw=="}, "originalCommit": {"oid": "dd314ccb0cd80da6d26d0a62424eec3c62d6fe2f"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 301, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}