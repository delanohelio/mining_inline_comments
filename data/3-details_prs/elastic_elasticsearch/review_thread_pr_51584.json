{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzIwMDg5", "number": 51584, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0MTo1NVrODbsmyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNToyMlrODbtCZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzY4OTY4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0MTo1NVrOFjVNlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0MjowNVrOFjYhEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MjAyMg==", "bodyText": "Should this be isFinal to better match nomenclature in java?", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372592022", "createdAt": "2020-01-29T19:41:55Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0NjE2MA==", "bodyText": "Changed.", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372646160", "createdAt": "2020-01-29T21:42:05Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MjAyMg=="}, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcyNjQwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1Mzo1NFrOFjVkKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0MjozNFrOFjYh6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NzgwMg==", "bodyText": "maybe call this BlockScope?", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372597802", "createdAt": "2020-01-29T19:53:54Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;\n+\n+        public Variable(Class<?> type, String name, boolean isReadOnly) {\n+            this.type = Objects.requireNonNull(type);\n+            this.name = Objects.requireNonNull(name);\n+            this.isReadOnly = isReadOnly;\n+        }\n+\n+        public Class<?> getType() {\n+            return type;\n+        }\n+\n+        public String getCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(type);\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public boolean isReadOnly() {\n+            return isReadOnly;\n+        }\n+    }\n+\n+    public static class FunctionScope extends Scope {\n+\n+        protected final Class<?> returnType;\n+        protected final Set<String> areReadFrom = new HashSet<>();\n+\n+        public FunctionScope(Class<?> returnType) {\n+            this.returnType = Objects.requireNonNull(returnType);\n+        }\n+\n+        @Override\n+        public boolean isVariableDefined(String name) {\n+            return variables.containsKey(name);\n+        }\n+\n+        @Override\n+        public Variable getVariable(Location location, String name) {\n+            Objects.requireNonNull(location);\n+            Objects.requireNonNull(name);\n+\n+            Variable variable = variables.get(name);\n+\n+            if (variable == null) {\n+                throw location.createError(new IllegalArgumentException(\"variable [\" + name + \"] is not defined\"));\n+            }\n+\n+            areReadFrom.add(name);\n+\n+            return variable;\n+        }\n+\n+        @Override\n+        public Class<?> getReturnType() {\n+            return returnType;\n+        }\n+\n+        @Override\n+        public String getReturnCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(returnType);\n+        }\n+\n+        public Set<String> getReadFrom() {\n+            return Collections.unmodifiableSet(areReadFrom);\n+        }\n+    }\n+\n+    public static class LambdaScope extends Scope {\n+\n+        protected final Scope parent;\n+        protected final Class<?> returnType;\n+        protected final Set<Variable> captures = new HashSet<>();\n+\n+        protected LambdaScope(Scope parent, Class<?> returnType) {\n+            this.parent = parent;\n+            this.returnType = returnType;\n+        }\n+\n+        @Override\n+        public boolean isVariableDefined(String name) {\n+            if (variables.containsKey(name)) {\n+                return true;\n+            }\n+\n+            return parent.isVariableDefined(name);\n+        }\n+\n+        @Override\n+        public Variable getVariable(Location location, String name) {\n+            Objects.requireNonNull(location);\n+            Objects.requireNonNull(name);\n+\n+            Variable variable = variables.get(name);\n+\n+            if (variable == null) {\n+                variable = parent.getVariable(location, name);\n+                variable = new Variable(variable.getType(), variable.getName(), true);\n+                captures.add(variable);\n+            }\n+\n+            return variable;\n+        }\n+\n+        @Override\n+        public Class<?> getReturnType() {\n+            return returnType;\n+        }\n+\n+        @Override\n+        public String getReturnCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(returnType);\n+        }\n+\n+        public Set<Variable> getCaptures() {\n+            return Collections.unmodifiableSet(captures);\n+        }\n+    }\n+\n+    public static class LocalScope extends Scope {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0NjM3Nw==", "bodyText": "Changed.", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372646377", "createdAt": "2020-01-29T21:42:34Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;\n+\n+        public Variable(Class<?> type, String name, boolean isReadOnly) {\n+            this.type = Objects.requireNonNull(type);\n+            this.name = Objects.requireNonNull(name);\n+            this.isReadOnly = isReadOnly;\n+        }\n+\n+        public Class<?> getType() {\n+            return type;\n+        }\n+\n+        public String getCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(type);\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public boolean isReadOnly() {\n+            return isReadOnly;\n+        }\n+    }\n+\n+    public static class FunctionScope extends Scope {\n+\n+        protected final Class<?> returnType;\n+        protected final Set<String> areReadFrom = new HashSet<>();\n+\n+        public FunctionScope(Class<?> returnType) {\n+            this.returnType = Objects.requireNonNull(returnType);\n+        }\n+\n+        @Override\n+        public boolean isVariableDefined(String name) {\n+            return variables.containsKey(name);\n+        }\n+\n+        @Override\n+        public Variable getVariable(Location location, String name) {\n+            Objects.requireNonNull(location);\n+            Objects.requireNonNull(name);\n+\n+            Variable variable = variables.get(name);\n+\n+            if (variable == null) {\n+                throw location.createError(new IllegalArgumentException(\"variable [\" + name + \"] is not defined\"));\n+            }\n+\n+            areReadFrom.add(name);\n+\n+            return variable;\n+        }\n+\n+        @Override\n+        public Class<?> getReturnType() {\n+            return returnType;\n+        }\n+\n+        @Override\n+        public String getReturnCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(returnType);\n+        }\n+\n+        public Set<String> getReadFrom() {\n+            return Collections.unmodifiableSet(areReadFrom);\n+        }\n+    }\n+\n+    public static class LambdaScope extends Scope {\n+\n+        protected final Scope parent;\n+        protected final Class<?> returnType;\n+        protected final Set<Variable> captures = new HashSet<>();\n+\n+        protected LambdaScope(Scope parent, Class<?> returnType) {\n+            this.parent = parent;\n+            this.returnType = returnType;\n+        }\n+\n+        @Override\n+        public boolean isVariableDefined(String name) {\n+            if (variables.containsKey(name)) {\n+                return true;\n+            }\n+\n+            return parent.isVariableDefined(name);\n+        }\n+\n+        @Override\n+        public Variable getVariable(Location location, String name) {\n+            Objects.requireNonNull(location);\n+            Objects.requireNonNull(name);\n+\n+            Variable variable = variables.get(name);\n+\n+            if (variable == null) {\n+                variable = parent.getVariable(location, name);\n+                variable = new Variable(variable.getType(), variable.getName(), true);\n+                captures.add(variable);\n+            }\n+\n+            return variable;\n+        }\n+\n+        @Override\n+        public Class<?> getReturnType() {\n+            return returnType;\n+        }\n+\n+        @Override\n+        public String getReturnCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(returnType);\n+        }\n+\n+        public Set<Variable> getCaptures() {\n+            return Collections.unmodifiableSet(captures);\n+        }\n+    }\n+\n+    public static class LocalScope extends Scope {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NzgwMg=="}, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzc0MjQyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1OTozOFrOFjVuhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo1NjowM1rOFjaaBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMDQ1Mg==", "bodyText": "Could you please add comments throughout these scope classes on the differences between each scope's behavior? There are slight differences between each scope and it is not obvious what the reasons are for those differences.", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372600452", "createdAt": "2020-01-29T19:59:38Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;\n+\n+        public Variable(Class<?> type, String name, boolean isReadOnly) {\n+            this.type = Objects.requireNonNull(type);\n+            this.name = Objects.requireNonNull(name);\n+            this.isReadOnly = isReadOnly;\n+        }\n+\n+        public Class<?> getType() {\n+            return type;\n+        }\n+\n+        public String getCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(type);\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public boolean isReadOnly() {\n+            return isReadOnly;\n+        }\n+    }\n+\n+    public static class FunctionScope extends Scope {\n+\n+        protected final Class<?> returnType;\n+        protected final Set<String> areReadFrom = new HashSet<>();\n+\n+        public FunctionScope(Class<?> returnType) {\n+            this.returnType = Objects.requireNonNull(returnType);\n+        }\n+\n+        @Override\n+        public boolean isVariableDefined(String name) {\n+            return variables.containsKey(name);\n+        }\n+\n+        @Override\n+        public Variable getVariable(Location location, String name) {\n+            Objects.requireNonNull(location);\n+            Objects.requireNonNull(name);\n+\n+            Variable variable = variables.get(name);\n+\n+            if (variable == null) {\n+                throw location.createError(new IllegalArgumentException(\"variable [\" + name + \"] is not defined\"));\n+            }\n+\n+            areReadFrom.add(name);\n+\n+            return variable;\n+        }\n+\n+        @Override\n+        public Class<?> getReturnType() {\n+            return returnType;\n+        }\n+\n+        @Override\n+        public String getReturnCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(returnType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NzEyNQ==", "bodyText": "Added numerous javadoc style comments throughout Scope to try to clarify the subtle differences.", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372677125", "createdAt": "2020-01-29T22:56:03Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;\n+\n+        public Variable(Class<?> type, String name, boolean isReadOnly) {\n+            this.type = Objects.requireNonNull(type);\n+            this.name = Objects.requireNonNull(name);\n+            this.isReadOnly = isReadOnly;\n+        }\n+\n+        public Class<?> getType() {\n+            return type;\n+        }\n+\n+        public String getCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(type);\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public boolean isReadOnly() {\n+            return isReadOnly;\n+        }\n+    }\n+\n+    public static class FunctionScope extends Scope {\n+\n+        protected final Class<?> returnType;\n+        protected final Set<String> areReadFrom = new HashSet<>();\n+\n+        public FunctionScope(Class<?> returnType) {\n+            this.returnType = Objects.requireNonNull(returnType);\n+        }\n+\n+        @Override\n+        public boolean isVariableDefined(String name) {\n+            return variables.containsKey(name);\n+        }\n+\n+        @Override\n+        public Variable getVariable(Location location, String name) {\n+            Objects.requireNonNull(location);\n+            Objects.requireNonNull(name);\n+\n+            Variable variable = variables.get(name);\n+\n+            if (variable == null) {\n+                throw location.createError(new IllegalArgumentException(\"variable [\" + name + \"] is not defined\"));\n+            }\n+\n+            areReadFrom.add(name);\n+\n+            return variable;\n+        }\n+\n+        @Override\n+        public Class<?> getReturnType() {\n+            return returnType;\n+        }\n+\n+        @Override\n+        public String getReturnCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(returnType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMDQ1Mg=="}, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzc2MDM2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNToyMlrOFjV5cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0NTozMlrOFjYnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzI0OA==", "bodyText": "Maybe we could use \"used\" terminology instead of \"read from\", as the latter is difficult to read (is it \"reed\" or \"red\"). I would also just have it called \"used\" or \"usedVariables\", not \"areUsed\" since \"are\" and \"is\" imply the type should be boolean. Also can you please add a comment explaining the semantics (eg used means getVariable was called for that name).", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372603248", "createdAt": "2020-01-29T20:05:22Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;\n+\n+        public Variable(Class<?> type, String name, boolean isReadOnly) {\n+            this.type = Objects.requireNonNull(type);\n+            this.name = Objects.requireNonNull(name);\n+            this.isReadOnly = isReadOnly;\n+        }\n+\n+        public Class<?> getType() {\n+            return type;\n+        }\n+\n+        public String getCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(type);\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public boolean isReadOnly() {\n+            return isReadOnly;\n+        }\n+    }\n+\n+    public static class FunctionScope extends Scope {\n+\n+        protected final Class<?> returnType;\n+        protected final Set<String> areReadFrom = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0Nzc4Mg==", "bodyText": "Agreed and changed.", "url": "https://github.com/elastic/elasticsearch/pull/51584#discussion_r372647782", "createdAt": "2020-01-29T21:45:32Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/Scope.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless;\n+\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Tracks user defined variables across compilation phases.\n+ */\n+public abstract class Scope {\n+\n+    public static class Variable {\n+\n+        protected final Class<?> type;\n+        protected final String name;\n+        protected final boolean isReadOnly;\n+\n+        public Variable(Class<?> type, String name, boolean isReadOnly) {\n+            this.type = Objects.requireNonNull(type);\n+            this.name = Objects.requireNonNull(name);\n+            this.isReadOnly = isReadOnly;\n+        }\n+\n+        public Class<?> getType() {\n+            return type;\n+        }\n+\n+        public String getCanonicalTypeName() {\n+            return PainlessLookupUtility.typeToCanonicalTypeName(type);\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public boolean isReadOnly() {\n+            return isReadOnly;\n+        }\n+    }\n+\n+    public static class FunctionScope extends Scope {\n+\n+        protected final Class<?> returnType;\n+        protected final Set<String> areReadFrom = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzI0OA=="}, "originalCommit": {"oid": "66b6252db2a5804718f3fbd54824db12e0a5a8aa"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 224, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}