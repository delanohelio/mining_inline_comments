{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTAzMTA2", "number": 63546, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1OTozMVrOEuFsLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzowMzowOFrOEuFxzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzYzMTgyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1OTozMlrOHiRZlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzoyNzo0M1rOHirLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODcxMQ==", "bodyText": "NIT: no functional impact here, but the first argument is the snapshot name and the second the UUID :)\nI always just use final Snapshot snapshot = new Snapshot(\"_repository\", new SnapshotId(\"_snapshot_name\", UUIDs.randomBase64UUID(random())));", "url": "https://github.com/elastic/elasticsearch/pull/63546#discussion_r505698711", "createdAt": "2020-10-15T16:59:32Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java", "diffHunk": "@@ -1130,6 +1144,110 @@ public void testWatermarksEnabledForSingleDataNode() {\n                 \" actual free: [20.0%]\"));\n     }\n \n+    public void testDiskThresholdWithSnapshotShardSizes() {\n+        final long shardSizeInBytes = randomBoolean() ? 10L : 50L;\n+        logger.info(\"--> using shard size [{}]\", shardSizeInBytes);\n+\n+        final Settings diskSettings = Settings.builder()\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"90%\")\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"95%\")\n+            .build();\n+\n+        final ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n+        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 21));  // 79% used\n+        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 1)); // 99% used\n+        final ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n+        final ClusterInfoService clusterInfoService = () -> new DevNullClusterInfo(usages, usages, ImmutableOpenMap.of());\n+\n+        final AllocationDeciders deciders = new AllocationDeciders(\n+            new HashSet<>(Arrays.asList(\n+                new RestoreInProgressAllocationDecider(),\n+                new SameShardAllocationDecider(\n+                    Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)\n+                ),\n+                makeDecider(diskSettings))));\n+\n+        final Snapshot snapshot = new Snapshot(\"_repository\", new SnapshotId(\"_snapshot_uuid\", \"_snapshot_name\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41abac7b100495b8254bbf5f64e134653e7dfe9"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExOTEwOQ==", "bodyText": "Good catch", "url": "https://github.com/elastic/elasticsearch/pull/63546#discussion_r506119109", "createdAt": "2020-10-16T07:25:47Z", "author": {"login": "tlrx"}, "path": "server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java", "diffHunk": "@@ -1130,6 +1144,110 @@ public void testWatermarksEnabledForSingleDataNode() {\n                 \" actual free: [20.0%]\"));\n     }\n \n+    public void testDiskThresholdWithSnapshotShardSizes() {\n+        final long shardSizeInBytes = randomBoolean() ? 10L : 50L;\n+        logger.info(\"--> using shard size [{}]\", shardSizeInBytes);\n+\n+        final Settings diskSettings = Settings.builder()\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"90%\")\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"95%\")\n+            .build();\n+\n+        final ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n+        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 21));  // 79% used\n+        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 1)); // 99% used\n+        final ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n+        final ClusterInfoService clusterInfoService = () -> new DevNullClusterInfo(usages, usages, ImmutableOpenMap.of());\n+\n+        final AllocationDeciders deciders = new AllocationDeciders(\n+            new HashSet<>(Arrays.asList(\n+                new RestoreInProgressAllocationDecider(),\n+                new SameShardAllocationDecider(\n+                    Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)\n+                ),\n+                makeDecider(diskSettings))));\n+\n+        final Snapshot snapshot = new Snapshot(\"_repository\", new SnapshotId(\"_snapshot_uuid\", \"_snapshot_name\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODcxMQ=="}, "originalCommit": {"oid": "c41abac7b100495b8254bbf5f64e134653e7dfe9"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEyMTExMg==", "bodyText": "Let's correct the IndexId as well \ud83e\udd26", "url": "https://github.com/elastic/elasticsearch/pull/63546#discussion_r506121112", "createdAt": "2020-10-16T07:27:43Z", "author": {"login": "tlrx"}, "path": "server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java", "diffHunk": "@@ -1130,6 +1144,110 @@ public void testWatermarksEnabledForSingleDataNode() {\n                 \" actual free: [20.0%]\"));\n     }\n \n+    public void testDiskThresholdWithSnapshotShardSizes() {\n+        final long shardSizeInBytes = randomBoolean() ? 10L : 50L;\n+        logger.info(\"--> using shard size [{}]\", shardSizeInBytes);\n+\n+        final Settings diskSettings = Settings.builder()\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"90%\")\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"95%\")\n+            .build();\n+\n+        final ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n+        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 21));  // 79% used\n+        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 1)); // 99% used\n+        final ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n+        final ClusterInfoService clusterInfoService = () -> new DevNullClusterInfo(usages, usages, ImmutableOpenMap.of());\n+\n+        final AllocationDeciders deciders = new AllocationDeciders(\n+            new HashSet<>(Arrays.asList(\n+                new RestoreInProgressAllocationDecider(),\n+                new SameShardAllocationDecider(\n+                    Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)\n+                ),\n+                makeDecider(diskSettings))));\n+\n+        final Snapshot snapshot = new Snapshot(\"_repository\", new SnapshotId(\"_snapshot_uuid\", \"_snapshot_name\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODcxMQ=="}, "originalCommit": {"oid": "c41abac7b100495b8254bbf5f64e134653e7dfe9"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzY0NjIyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzowMzowOFrOHiRijA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzowMzowOFrOHiRijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMTAwNA==", "bodyText": "NIT: I think I would have had an easier time following this test if we had moved this to where it's actually first used after the assertions on the CS we construct below to like:\n        final AtomicReference<SnapshotShardSizeInfo> snapshotShardSizeInfoRef = new AtomicReference<>(SnapshotShardSizeInfo.EMPTY);\n        final AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), clusterInfoService, snapshotShardSizeInfoRef::get);\n\n        // reroute triggers snapshot shard size fetching\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);", "url": "https://github.com/elastic/elasticsearch/pull/63546#discussion_r505701004", "createdAt": "2020-10-15T17:03:08Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java", "diffHunk": "@@ -1130,6 +1144,110 @@ public void testWatermarksEnabledForSingleDataNode() {\n                 \" actual free: [20.0%]\"));\n     }\n \n+    public void testDiskThresholdWithSnapshotShardSizes() {\n+        final long shardSizeInBytes = randomBoolean() ? 10L : 50L;\n+        logger.info(\"--> using shard size [{}]\", shardSizeInBytes);\n+\n+        final Settings diskSettings = Settings.builder()\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"90%\")\n+            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"95%\")\n+            .build();\n+\n+        final ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n+        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 21));  // 79% used\n+        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 1)); // 99% used\n+        final ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n+        final ClusterInfoService clusterInfoService = () -> new DevNullClusterInfo(usages, usages, ImmutableOpenMap.of());\n+\n+        final AllocationDeciders deciders = new AllocationDeciders(\n+            new HashSet<>(Arrays.asList(\n+                new RestoreInProgressAllocationDecider(),\n+                new SameShardAllocationDecider(\n+                    Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)\n+                ),\n+                makeDecider(diskSettings))));\n+\n+        final Snapshot snapshot = new Snapshot(\"_repository\", new SnapshotId(\"_snapshot_uuid\", \"_snapshot_name\"));\n+        final IndexId indexId = new IndexId(\"_indexid_uuid\", \"_indexid_name\");\n+        final ShardId shardId = new ShardId(new Index(\"test\", IndexMetadata.INDEX_UUID_NA_VALUE), 0);\n+\n+        final AtomicReference<SnapshotShardSizeInfo> snapshotShardSizeInfoRef = new AtomicReference<>(SnapshotShardSizeInfo.EMPTY);\n+        final SnapshotsInfoService snapshotsInfoService = snapshotShardSizeInfoRef::get;\n+\n+        final AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41abac7b100495b8254bbf5f64e134653e7dfe9"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2934, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}