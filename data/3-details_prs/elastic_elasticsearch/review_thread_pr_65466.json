{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzY5MTIx", "number": 65466, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMToxN1rOE_MtxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNDoyOVrOE_1QlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzA0MDY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMToxN1rOH8xgxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMToxN1rOH8xgxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4NzgxNA==", "bodyText": "So, as you noted in your comments, having to use a bare Object here is a bit of a smell.  But, we don't need an interface to solve it, we already have a solution.  The way the generics are set up, we know the class we get out of the registry has to match the type on the registry key.  If you look at how the factories get the suppliers, they never have to cast it, because they know the key they're using, like this:\n  DateHistogramAggregationSupplier aggregatorSupplier = context.getValuesSourceRegistry()\t\n            .getAggregator(DateHistogramAggregationBuilder.REGISTRY_KEY, config);\n\nWe can't do that here, because we don't know which type we're expecting.  But, we can do it from within innerBuild, since at that point we'll be in a specific aggregation.  So essentially we just want to pull the supplier fetching code up from the factory's doCreateInternal method to the builder's internalBuild method, and pass it on into the factory from there.  That still meets out validation need, it'll just throw from one level deeper if the mapping is bad, and should dodge all this bare Object business.", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r533487814", "createdAt": "2020-12-01T15:11:17Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java", "diffHunk": "@@ -347,16 +347,20 @@ public ZoneId timeZone() {\n     protected final ValuesSourceAggregatorFactory doBuild(AggregationContext context, AggregatorFactory parent,\n                                                           Builder subFactoriesBuilder) throws IOException {\n         ValuesSourceConfig config = resolveConfig(context);\n+\n+        ValuesSourceAggregatorFactory factory;\n         if (context.getValuesSourceRegistry().isRegistered(getRegistryKey())) {\n             /*\n             if the aggregation uses the values source registry, test if the resolved values source type is compatible with this aggregation.\n             This call will throw if the mapping isn't registered, which is what we want.  Note that we need to throw from here because\n             AbstractAggregationBuilder#build, which called this, will attempt to register the agg usage next, and if the usage is invalid\n             that will fail with a weird error.\n              */\n-            context.getValuesSourceRegistry().getAggregator(getRegistryKey(), config);\n+            Object aggregatorSupplier = context.getValuesSourceRegistry().getAggregator(getRegistryKey(), config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f8f57dc4daedc766adde634989c740f8a8b0bd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODA3Nzg1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/analytics/StringStatsAggregationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowNDoxMVrOH87kZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToxODoyN1rOH88D9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MjU4MQ==", "bodyText": "Nit: This formatting-only change doesn't change to the correct style.", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r533652581", "createdAt": "2020-12-01T19:04:11Z", "author": {"login": "not-napoleon"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/analytics/StringStatsAggregationBuilder.java", "diffHunk": "@@ -103,7 +103,7 @@ public BucketCardinality bucketCardinality() {\n \n     @Override\n     protected ValuesSourceAggregatorFactory innerBuild(AggregationContext context, ValuesSourceConfig config,\n-            AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {\n+                                                       AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311ed3f2b4169a3418b7e6728e55ef650393ac14"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2MDY2Mw==", "bodyText": "Will fix it with the conflicts! Sorry, completely missed it when I was reviewing the files I changed.", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r533660663", "createdAt": "2020-12-01T19:18:27Z", "author": {"login": "Thlamz"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/analytics/StringStatsAggregationBuilder.java", "diffHunk": "@@ -103,7 +103,7 @@ public BucketCardinality bucketCardinality() {\n \n     @Override\n     protected ValuesSourceAggregatorFactory innerBuild(AggregationContext context, ValuesSourceConfig config,\n-            AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {\n+                                                       AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MjU4MQ=="}, "originalCommit": {"oid": "311ed3f2b4169a3418b7e6728e55ef650393ac14"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTc4Nzc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0MjowNFrOH9eLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0MjowNFrOH9eLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIxOTY2OA==", "bodyText": "Shouldn't this still have the @Override annotation?", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r534219668", "createdAt": "2020-12-02T14:42:04Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java", "diffHunk": "@@ -81,11 +84,11 @@ public long minDocCount() {\n         return minDocCount;\n     }\n \n-    @Override\n-    protected Aggregator doCreateInternal(Aggregator parent, CardinalityUpperBound cardinality, Map<String, Object> metadata)\n-        throws IOException {\n-        DateHistogramAggregationSupplier aggregatorSupplier = context.getValuesSourceRegistry()\n-            .getAggregator(DateHistogramAggregationBuilder.REGISTRY_KEY, config);\n+    protected Aggregator doCreateInternal(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bf2f52732c4c51e7e81850a1ac1ee0cd91c260"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzY4MzQwOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNDoyOVrOH9wX7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNDoyOVrOH9wX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxNzc0Mg==", "bodyText": "I'd like to leave some version of this comment; I find it useful to note that this is our last chance to check the values source type mapping before we attempt to register usage.  Maybe something like\n/*\nThe inner builder implementation is responsible for validating the \nValuesSourceType mapping, typically by checking if an aggregation\nsupplier has been registered for that type on this aggregation, and\nthrow IllegalArgumentException if the mapping is not valid.  Note \nthat we need to throw from here because \nAbstractAggregationBuilder#build, which called this, will attempt to\nregister the agg usage next, and if the usage is invalid that will fail\nwith a weird error.\n*/", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r534517742", "createdAt": "2020-12-02T22:14:29Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java", "diffHunk": "@@ -347,16 +349,10 @@ public ZoneId timeZone() {\n     protected final ValuesSourceAggregatorFactory doBuild(AggregationContext context, AggregatorFactory parent,\n                                                           Builder subFactoriesBuilder) throws IOException {\n         ValuesSourceConfig config = resolveConfig(context);\n-        if (context.getValuesSourceRegistry().isRegistered(getRegistryKey())) {\n-            /*\n-            if the aggregation uses the values source registry, test if the resolved values source type is compatible with this aggregation.\n-            This call will throw if the mapping isn't registered, which is what we want.  Note that we need to throw from here because\n-            AbstractAggregationBuilder#build, which called this, will attempt to register the agg usage next, and if the usage is invalid\n-            that will fail with a weird error.\n-             */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bf2f52732c4c51e7e81850a1ac1ee0cd91c260"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1904, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}