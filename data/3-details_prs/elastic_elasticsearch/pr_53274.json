{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NTA4NjYy", "number": 53274, "title": "[DOCS] Adds painless transform examples", "bodyText": "This PR adds a new sub-page to the Transforms documentation called Painless transform examples with short examples on how to use Painless in Transforms.\nPreview: http://elasticsearch_53274.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/transform-painless-examples.html", "createdAt": "2020-03-09T10:42:59Z", "url": "https://github.com/elastic/elasticsearch/pull/53274", "merged": true, "mergeCommit": {"oid": "108f9ca73fff0cbfd95b51e369b7a1a2770051d0"}, "closed": true, "closedAt": "2020-03-23T09:38:37Z", "author": {"login": "szabosteve"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL7WasAH2gAyMzg1NTA4NjYyOmYxMjJkMzQ2NmU3OGU4Zjc5OTRhNWZjODdiZWE4OTE3Y2JkNjA5OGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQauEHgFqTM3OTI0Njg1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f122d3466e78e8f7994a5fc87bea8917cbd6098e", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/f122d3466e78e8f7994a5fc87bea8917cbd6098e", "committedDate": "2020-03-09T10:28:08Z", "message": "[DOCS] Adds painless transform examples."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db025da8b34936451c93ce4722a0d933f79a8d50", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/db025da8b34936451c93ce4722a0d933f79a8d50", "committedDate": "2020-03-09T10:31:31Z", "message": "[DOCS] Adds painles examples to index.asciidoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b4b66731e346674436790164ac2d517d562d29", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/39b4b66731e346674436790164ac2d517d562d29", "committedDate": "2020-03-09T10:41:05Z", "message": "[DOCS] Adds formatting."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67249c1449ce44c9662b967a082eed93a309b386", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/67249c1449ce44c9662b967a082eed93a309b386", "committedDate": "2020-03-09T15:19:56Z", "message": "[DOCS] Minor adjustments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b74dd4b12310c521307e55eb49cfeef17610729", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/0b74dd4b12310c521307e55eb49cfeef17610729", "committedDate": "2020-03-10T10:48:54Z", "message": "[DOCS] Adds time features as scripted fields example."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c1e3114d4967c3b73eaf4f819e344fa02d995a8", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c1e3114d4967c3b73eaf4f819e344fa02d995a8", "committedDate": "2020-03-10T11:03:52Z", "message": "[DOCS] Fixes code block closure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c2d28a07ba74dc289fe175e2b746b4c76617c5", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/03c2d28a07ba74dc289fe175e2b746b4c76617c5", "committedDate": "2020-03-10T16:11:43Z", "message": "[DOCS] Minor adjustments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "318ab7c525cbaed9cc4447e756e6376324924c87", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/318ab7c525cbaed9cc4447e756e6376324924c87", "committedDate": "2020-03-11T14:55:50Z", "message": "[DOCS] Adds group-by example and table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca1e21da89b47a78c76b5192956c2ea5f4e452b", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/dca1e21da89b47a78c76b5192956c2ea5f4e452b", "committedDate": "2020-03-13T15:19:27Z", "message": "[DOCS] Adds code snippet for the bucket script example."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8bc975df376c8e3b91c1661831b5df0b0c47d6a", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8bc975df376c8e3b91c1661831b5df0b0c47d6a", "committedDate": "2020-03-16T11:59:17Z", "message": "[DOCS] Bucket script pt 2."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1868afec9adb68fe6cfb484c5dccfdff7c39108e", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/1868afec9adb68fe6cfb484c5dccfdff7c39108e", "committedDate": "2020-03-16T12:02:17Z", "message": "[DOCS] Minor adjustments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52fb38c11642bbe7d026b29e574c222fb31e6fcd", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/52fb38c11642bbe7d026b29e574c222fb31e6fcd", "committedDate": "2020-03-16T14:54:39Z", "message": "[DOCS] Adjusts indentation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDIwMTc1", "url": "https://github.com/elastic/elasticsearch/pull/53274#pullrequestreview-375420175", "createdAt": "2020-03-16T17:10:20Z", "commit": {"oid": "52fb38c11642bbe7d026b29e574c222fb31e6fcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoxMDoyMFrOF29-Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoxMDoyMFrOF29-Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4Mjc0Ng==", "bodyText": "You can use the shared attribute from https://github.com/elastic/docs/blob/master/shared/attributes.asciidoc:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-guide.html[Painless guide].\n          \n          \n            \n            {painless}/painless-guide.html[Painless guide].", "url": "https://github.com/elastic/elasticsearch/pull/53274#discussion_r393182746", "createdAt": "2020-03-16T17:10:20Z", "author": {"login": "lcawl"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -0,0 +1,327 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[transform-painless-examples]]\n+=== Painless examples for {transforms}\n+++++\n+<titleabbrev>Painless examples for {transforms}</titleabbrev>\n+++++\n+\n+These examples demonstrate how to use Painless in {transforms}. You can learn \n+more about the Painless scripting language in the \n+https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-guide.html[Painless guide].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52fb38c11642bbe7d026b29e574c222fb31e6fcd"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTI4MzY0", "url": "https://github.com/elastic/elasticsearch/pull/53274#pullrequestreview-375528364", "createdAt": "2020-03-16T19:38:17Z", "commit": {"oid": "52fb38c11642bbe7d026b29e574c222fb31e6fcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozODoxOFrOF3DJRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozODoxOFrOF3DJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2NzUyNw==", "bodyText": "I added this anchor in #53618\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {ref}/search-aggregations-metrics-scripted-metric-aggregation.html#_scope_of_scripts[scope of scripts]\n          \n          \n            \n            <<scripted-metric-aggregation-scope,scope of scripts>>", "url": "https://github.com/elastic/elasticsearch/pull/53274#discussion_r393267527", "createdAt": "2020-03-16T19:38:18Z", "author": {"login": "lcawl"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -0,0 +1,327 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[transform-painless-examples]]\n+=== Painless examples for {transforms}\n+++++\n+<titleabbrev>Painless examples for {transforms}</titleabbrev>\n+++++\n+\n+These examples demonstrate how to use Painless in {transforms}. You can learn \n+more about the Painless scripting language in the \n+https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-guide.html[Painless guide].\n+\n+* <<painless-top-hits>>\n+* <<painless-time-features>>\n+* <<painless-group-by>>\n+* <<painless-bucket-script>>\n+\n+\n+[discrete]\n+[[painless-top-hits]]\n+==== Getting top hits by using scripted metric\n+\n+This snippet shows how to find the latest document, in other words the document \n+with the earliest timestamp. From a technical perspective, it helps to achieve \n+the function of a <<search-aggregations-metrics-top-hits-aggregation>> by using \n+scripted metric aggregation which provides a metric output.\n+\n+[source,js]\n+--------------------------------------------------\n+\"latest_doc\": { \n+  \"scripted_metric\": {\n+    \"init_script\": \"state.timestamp_latest = 0L; state.last_doc = ''\", <1>\n+    \"map_script\": \"\"\" <2>\n+      def current_date = doc['@timestamp'].getValue().toInstant().toEpochMilli(); \n+      if (current_date > state.timestamp_latest) \n+      {state.timestamp_latest = current_date;\n+      state.last_doc = new HashMap(params['_source']);}\n+    \"\"\",\n+    \"combine_script\": \"return state\", <3>\n+    \"reduce_script\": \"\"\" <4>\n+      def last_doc = '';\n+      def timestamp_latest = 0L;\n+      for (s in states) {if (s.timestamp_latest > (timestamp_latest))\n+      {timestamp_latest = s.timestamp_latest; last_doc = s.last_doc;}} \n+      return last_doc\n+    \"\"\"\n+  }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `init_script` creates a long type `timestamp_latest` and a string type \n+`last_doc` in the `state` object.\n+<2> The `map_script` defines `current_date` based on the timestamp of the \n+document, then compares `current_date` with `state.timestamp_latest`, finally \n+returns `state.last_doc` from the shard.\n+<3> The `combine_script` returns `state` from each shard.\n+<4> The `reduce_script` iterates through the value of `s.timestamp_latest` \n+returned by each shard and returns the document with the latest timestamp \n+(`last_doc`). In the response, the top hit (in other words, the `latest_doc`) is \n+nested below the `latest_doc` field.\n+\n+Check the\n+{ref}/search-aggregations-metrics-scripted-metric-aggregation.html#_scope_of_scripts[scope of scripts]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52fb38c11642bbe7d026b29e574c222fb31e6fcd"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0be57e30c9aef2654fd06e091b89c162e6e38b45", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/0be57e30c9aef2654fd06e091b89c162e6e38b45", "committedDate": "2020-03-17T08:18:58Z", "message": "Update docs/reference/transform/painless-examples.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f02c2d3e928df58c2dfa5ed0c78eac0eaeded74", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/2f02c2d3e928df58c2dfa5ed0c78eac0eaeded74", "committedDate": "2020-03-17T08:19:07Z", "message": "Update docs/reference/transform/painless-examples.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODI5Njkw", "url": "https://github.com/elastic/elasticsearch/pull/53274#pullrequestreview-375829690", "createdAt": "2020-03-17T08:38:03Z", "commit": {"oid": "2f02c2d3e928df58c2dfa5ed0c78eac0eaeded74"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozODowM1rOF3SWDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo0NjowN1rOF3Smmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjU1OQ==", "bodyText": "For correctness I think we should explain new HashMap(...):\n\"By using new HashMap(...) we copy the source document, this is important whenever you want to pass the full source object from one phase to the next.\"\nBut: let me clarify this with the painless developers, this might be a bug in painless.", "url": "https://github.com/elastic/elasticsearch/pull/53274#discussion_r393516559", "createdAt": "2020-03-17T08:38:03Z", "author": {"login": "hendrikmuhs"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -0,0 +1,327 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[transform-painless-examples]]\n+=== Painless examples for {transforms}\n+++++\n+<titleabbrev>Painless examples for {transforms}</titleabbrev>\n+++++\n+\n+These examples demonstrate how to use Painless in {transforms}. You can learn \n+more about the Painless scripting language in the \n+{painless}/painless-guide.html[Painless guide].\n+\n+* <<painless-top-hits>>\n+* <<painless-time-features>>\n+* <<painless-group-by>>\n+* <<painless-bucket-script>>\n+\n+\n+[discrete]\n+[[painless-top-hits]]\n+==== Getting top hits by using scripted metric\n+\n+This snippet shows how to find the latest document, in other words the document \n+with the earliest timestamp. From a technical perspective, it helps to achieve \n+the function of a <<search-aggregations-metrics-top-hits-aggregation>> by using \n+scripted metric aggregation which provides a metric output.\n+\n+[source,js]\n+--------------------------------------------------\n+\"latest_doc\": { \n+  \"scripted_metric\": {\n+    \"init_script\": \"state.timestamp_latest = 0L; state.last_doc = ''\", <1>\n+    \"map_script\": \"\"\" <2>\n+      def current_date = doc['@timestamp'].getValue().toInstant().toEpochMilli(); \n+      if (current_date > state.timestamp_latest) \n+      {state.timestamp_latest = current_date;\n+      state.last_doc = new HashMap(params['_source']);}\n+    \"\"\",\n+    \"combine_script\": \"return state\", <3>\n+    \"reduce_script\": \"\"\" <4>\n+      def last_doc = '';\n+      def timestamp_latest = 0L;\n+      for (s in states) {if (s.timestamp_latest > (timestamp_latest))\n+      {timestamp_latest = s.timestamp_latest; last_doc = s.last_doc;}} \n+      return last_doc\n+    \"\"\"\n+  }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `init_script` creates a long type `timestamp_latest` and a string type \n+`last_doc` in the `state` object.\n+<2> The `map_script` defines `current_date` based on the timestamp of the \n+document, then compares `current_date` with `state.timestamp_latest`, finally \n+returns `state.last_doc` from the shard.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f02c2d3e928df58c2dfa5ed0c78eac0eaeded74"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyMDc5NQ==", "bodyText": "This PR has the 7.6.2 label, too. However scripting in group_by is a 7.7 feature.", "url": "https://github.com/elastic/elasticsearch/pull/53274#discussion_r393520795", "createdAt": "2020-03-17T08:46:07Z", "author": {"login": "hendrikmuhs"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -0,0 +1,327 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[transform-painless-examples]]\n+=== Painless examples for {transforms}\n+++++\n+<titleabbrev>Painless examples for {transforms}</titleabbrev>\n+++++\n+\n+These examples demonstrate how to use Painless in {transforms}. You can learn \n+more about the Painless scripting language in the \n+{painless}/painless-guide.html[Painless guide].\n+\n+* <<painless-top-hits>>\n+* <<painless-time-features>>\n+* <<painless-group-by>>\n+* <<painless-bucket-script>>\n+\n+\n+[discrete]\n+[[painless-top-hits]]\n+==== Getting top hits by using scripted metric\n+\n+This snippet shows how to find the latest document, in other words the document \n+with the earliest timestamp. From a technical perspective, it helps to achieve \n+the function of a <<search-aggregations-metrics-top-hits-aggregation>> by using \n+scripted metric aggregation which provides a metric output.\n+\n+[source,js]\n+--------------------------------------------------\n+\"latest_doc\": { \n+  \"scripted_metric\": {\n+    \"init_script\": \"state.timestamp_latest = 0L; state.last_doc = ''\", <1>\n+    \"map_script\": \"\"\" <2>\n+      def current_date = doc['@timestamp'].getValue().toInstant().toEpochMilli(); \n+      if (current_date > state.timestamp_latest) \n+      {state.timestamp_latest = current_date;\n+      state.last_doc = new HashMap(params['_source']);}\n+    \"\"\",\n+    \"combine_script\": \"return state\", <3>\n+    \"reduce_script\": \"\"\" <4>\n+      def last_doc = '';\n+      def timestamp_latest = 0L;\n+      for (s in states) {if (s.timestamp_latest > (timestamp_latest))\n+      {timestamp_latest = s.timestamp_latest; last_doc = s.last_doc;}} \n+      return last_doc\n+    \"\"\"\n+  }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `init_script` creates a long type `timestamp_latest` and a string type \n+`last_doc` in the `state` object.\n+<2> The `map_script` defines `current_date` based on the timestamp of the \n+document, then compares `current_date` with `state.timestamp_latest`, finally \n+returns `state.last_doc` from the shard.\n+<3> The `combine_script` returns `state` from each shard.\n+<4> The `reduce_script` iterates through the value of `s.timestamp_latest` \n+returned by each shard and returns the document with the latest timestamp \n+(`last_doc`). In the response, the top hit (in other words, the `latest_doc`) is \n+nested below the `latest_doc` field.\n+\n+Check the\n+<<scripted-metric-aggregation-scope,scope of scripts>>\n+for detailed explanation on the respective scripts.\n+\n+You can retrieve the last value in a similar way: \n+\n+[source,js]\n+--------------------------------------------------\n+\"latest_value\": {\n+  \"scripted_metric\": {\n+    \"init_script\": \"state.timestamp_latest = 0L; state.last_value = ''\",\n+    \"map_script\": \"\"\"\n+      def current_date = doc['date'].getValue().toInstant().toEpochMilli(); \n+      if (current_date > state.timestamp_latest) \n+      {state.timestamp_latest = current_date;\n+      state.last_value = params['_source']['value'];}\n+    \"\"\",\n+    \"combine_script\": \"return state\",\n+    \"reduce_script\": \"\"\"\n+      def last_value = '';\n+      def timestamp_latest = 0L; \n+      for (s in states) {if (s.timestamp_latest > (timestamp_latest)) \n+      {timestamp_latest = s.timestamp_latest; last_value = s.last_value;}} \n+      return last_value\n+    \"\"\"\n+  }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+\n+[discrete]\n+[[painless-time-features]]\n+==== Getting time features as scripted fields\n+\n+This snippet shows how to extract time based features by using Painless. The \n+snippet uses an index where `@timestamp` is defined as a `date` type field.\n+\n+[source,js]\n+--------------------------------------------------\n+\"script_fields\": {\n+    \"hour_of_day\": { <1>\n+      \"script\": {\n+        \"lang\": \"painless\",\n+        \"source\": \"\"\"\n+          ZonedDateTime date =  doc['@timestamp'].value; <2>\n+          return date.getHour(); <3>\n+        \"\"\"\n+      }\n+    },\n+    \"month_of_year\": { <4>\n+      \"script\": {\n+        \"lang\": \"painless\",\n+        \"source\": \"\"\"\n+          ZonedDateTime date =  doc['@timestamp'].value; <5>\n+          return date.getMonthValue(); <6>\n+        \"\"\"\n+      }\n+    }\n+  }\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> Contains the Painless script that returns the hour of the day.\n+<2> Sets `date` based on the timestamp of the document.\n+<3> Returns the hour value from `date`.\n+<4> Contains the Painless script that returns the month of the year.\n+<5> Sets `date` based on the timestamp of the document.\n+<6> Returns the month value from `date`.\n+\n+\n+[discrete]\n+[[painless-group-by]]\n+==== Using Painless in `group_by`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f02c2d3e928df58c2dfa5ed0c78eac0eaeded74"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d177dd460cfb0ee87fab93b75777ea76c9c7c728", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/d177dd460cfb0ee87fab93b75777ea76c9c7c728", "committedDate": "2020-03-19T09:57:41Z", "message": "[DOCS] Explains new HashMap(...) in the first example."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1243da70d10db4246019a90b0af2691a6eac968d", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/1243da70d10db4246019a90b0af2691a6eac968d", "committedDate": "2020-03-23T09:07:34Z", "message": "Merge branch 'painless.transforms' of github.com:szabosteve/elasticsearch into painless.transforms"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjQ2ODU4", "url": "https://github.com/elastic/elasticsearch/pull/53274#pullrequestreview-379246858", "createdAt": "2020-03-23T09:16:43Z", "commit": {"oid": "1243da70d10db4246019a90b0af2691a6eac968d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1628, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}