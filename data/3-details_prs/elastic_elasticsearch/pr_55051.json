{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxODg0NDE0", "number": 55051, "title": "Provide repository-level stats for searchable snapshots", "bodyText": "Provides basic repository-level stats that will allow us to get some insight into how many requests are actually being made by the underlying SDK. Currently only tracks GET and LIST calls for S3 repositories. Most of the code is unfortunately boiler plate to add a new endpoint that will help us better understand some of the low-level dynamics of searchable snapshots.", "createdAt": "2020-04-10T12:10:01Z", "url": "https://github.com/elastic/elasticsearch/pull/55051", "merged": true, "mergeCommit": {"oid": "03a60769f3b9341525a2f2a3b0ca3d3ce1fe4f45"}, "closed": true, "closedAt": "2020-04-14T12:12:49Z", "author": {"login": "ywelsch"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWP54kgH2gAyNDAxODg0NDE0OjQ0NDk1NWQyMTAxNGYwYThmNjk5MmIxMWYzNWQ2NzUzNWY0ZTE0NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXiQh3AFqTM5Mjg1ODI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "444955d21014f0a8f6992b11f35d67535f4e1444", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/444955d21014f0a8f6992b11f35d67535f4e1444", "committedDate": "2020-04-10T12:04:13Z", "message": "Provide repository-level stats for searchable snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/d060429f92dc2938e0c800f8bfd6bd497579c1d6", "committedDate": "2020-04-10T12:04:34Z", "message": "Merge remote-tracking branch 'elastic/master' into record-list-get-calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDMyMTg4", "url": "https://github.com/elastic/elasticsearch/pull/55051#pullrequestreview-391432188", "createdAt": "2020-04-10T13:07:01Z", "commit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNzowMVrOGD5_rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNzowMVrOGD5_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTEwMw==", "bodyText": "Just a general question (will try to review properly shortly):  Should this maybe live in x-pack core since this isn't just a searchable snapshots related piece of functionality and we have plans to use it elsewhere also?", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r406749103", "createdAt": "2020-04-10T13:07:01Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/rest/RestRepositoryStatsAction.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.xpack.searchablesnapshots.action.RepositoryStatsAction;\n+import org.elasticsearch.xpack.searchablesnapshots.action.RepositoryStatsRequest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestRepositoryStatsAction extends BaseRestHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDQxNzAx", "url": "https://github.com/elastic/elasticsearch/pull/55051#pullrequestreview-391441701", "createdAt": "2020-04-10T13:28:46Z", "commit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyODo0NlrOGD6fmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1MDoyNFrOGD7BtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NzI3NA==", "bodyText": "This fails reproducibly for me with  -Dtests.seed=73DAD8B23C19870D", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r406757274", "createdAt": "2020-04-10T13:28:46Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobStoreRepositoryTests.java", "diffHunk": "@@ -176,6 +187,82 @@ public void testEnforcedCooldownPeriod() throws IOException {\n         assertThat(repository.threadPool().relativeTimeInNanos() - beforeFastDelete, lessThan(TEST_COOLDOWN_PERIOD.getNanos()));\n     }\n \n+    public void testRequestStats() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2MTk4OQ==", "bodyText": "You probably don't want this filter because it prevents you from seeing the erroneous handlers below in the mapping.", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r406761989", "createdAt": "2020-04-10T13:40:37Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobStoreRepositoryTests.java", "diffHunk": "@@ -176,6 +187,82 @@ public void testEnforcedCooldownPeriod() throws IOException {\n         assertThat(repository.threadPool().relativeTimeInNanos() - beforeFastDelete, lessThan(TEST_COOLDOWN_PERIOD.getNanos()));\n     }\n \n+    public void testRequestStats() throws Exception {\n+        final String repository = createRepository(randomName());\n+        final String index = \"index-no-merges\";\n+        createIndex(index, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+\n+        final long nbDocs = randomLongBetween(100, 1000);\n+        try (BackgroundIndexer indexer = new BackgroundIndexer(index, \"_doc\", client(), (int) nbDocs)) {\n+            waitForDocs(nbDocs, indexer);\n+        }\n+\n+        flushAndRefresh(index);\n+        ForceMergeResponse forceMerge = client().admin().indices().prepareForceMerge(index).setFlush(true).setMaxNumSegments(1).get();\n+        assertThat(forceMerge.getSuccessfulShards(), equalTo(1));\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        final String snapshot = \"snapshot\";\n+        assertSuccessfulSnapshot(client().admin().cluster().prepareCreateSnapshot(repository, snapshot)\n+            .setWaitForCompletion(true).setIndices(index));\n+\n+        assertAcked(client().admin().indices().prepareDelete(index));\n+\n+        assertSuccessfulRestore(client().admin().cluster().prepareRestoreSnapshot(repository, snapshot).setWaitForCompletion(true));\n+        ensureGreen(index);\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        assertAcked(client().admin().cluster().prepareDeleteSnapshot(repository, snapshot).get());\n+\n+        final RepositoryStats repositoryStats = StreamSupport.stream(\n+            internalCluster().getInstances(RepositoriesService.class).spliterator(), false)\n+            .map(repositoriesService -> {\n+                try {\n+                    return repositoriesService.repository(repository);\n+                } catch (RepositoryMissingException e) {\n+                    return null;\n+                }\n+            })\n+            .filter(r -> r != null)\n+            .map(r -> r.stats())\n+            .reduce((s1, s2) -> s1.combine(s2))\n+            .get();\n+        final long sdkGetCalls = repositoryStats.requestCounts.get(\"GET\");\n+        final long sdkListCalls = repositoryStats.requestCounts.get(\"LIST\");\n+\n+        final long getCalls = handlers.values().stream()\n+            .mapToLong(h -> {\n+                if (h instanceof S3HttpHandler) {\n+                    return ((S3HttpHandler) h).getCalls.get();\n+                } else if (h instanceof S3ErroneousHttpHandler) {\n+                    return ((S3ErroneousHttpHandler) h).getCalls.get();\n+                } else {\n+                    return 0L;\n+                }\n+            })\n+            .sum();\n+        final long listCalls = handlers.values().stream().filter(h -> h instanceof S3HttpHandler)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2MzQ5Nw==", "bodyText": "This won't work (I think that's the reason for the test failure I mentioned). The handlers field does not contain the erroneous handler wrappers.See org.elasticsearch.repositories.blobstore.ESMockAPIBasedRepositoryIntegTestCase#setUpHttpServer:\n    @Before\n    public void setUpHttpServer() {\n        handlers = createHttpHandlers();\n        handlers.forEach((c, h) -> httpServer.createContext(c, wrap(randomBoolean() ? createErroneousHttpHandler(h) : h, logger)));\n    }\n\nyou'll have to put the erroneous handlers into another map (so you get the counts from both the normal and the erroneous wrappers by going over both maps) or similar.", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r406763497", "createdAt": "2020-04-10T13:44:24Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobStoreRepositoryTests.java", "diffHunk": "@@ -176,6 +187,82 @@ public void testEnforcedCooldownPeriod() throws IOException {\n         assertThat(repository.threadPool().relativeTimeInNanos() - beforeFastDelete, lessThan(TEST_COOLDOWN_PERIOD.getNanos()));\n     }\n \n+    public void testRequestStats() throws Exception {\n+        final String repository = createRepository(randomName());\n+        final String index = \"index-no-merges\";\n+        createIndex(index, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+\n+        final long nbDocs = randomLongBetween(100, 1000);\n+        try (BackgroundIndexer indexer = new BackgroundIndexer(index, \"_doc\", client(), (int) nbDocs)) {\n+            waitForDocs(nbDocs, indexer);\n+        }\n+\n+        flushAndRefresh(index);\n+        ForceMergeResponse forceMerge = client().admin().indices().prepareForceMerge(index).setFlush(true).setMaxNumSegments(1).get();\n+        assertThat(forceMerge.getSuccessfulShards(), equalTo(1));\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        final String snapshot = \"snapshot\";\n+        assertSuccessfulSnapshot(client().admin().cluster().prepareCreateSnapshot(repository, snapshot)\n+            .setWaitForCompletion(true).setIndices(index));\n+\n+        assertAcked(client().admin().indices().prepareDelete(index));\n+\n+        assertSuccessfulRestore(client().admin().cluster().prepareRestoreSnapshot(repository, snapshot).setWaitForCompletion(true));\n+        ensureGreen(index);\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        assertAcked(client().admin().cluster().prepareDeleteSnapshot(repository, snapshot).get());\n+\n+        final RepositoryStats repositoryStats = StreamSupport.stream(\n+            internalCluster().getInstances(RepositoriesService.class).spliterator(), false)\n+            .map(repositoriesService -> {\n+                try {\n+                    return repositoriesService.repository(repository);\n+                } catch (RepositoryMissingException e) {\n+                    return null;\n+                }\n+            })\n+            .filter(r -> r != null)\n+            .map(r -> r.stats())\n+            .reduce((s1, s2) -> s1.combine(s2))\n+            .get();\n+        final long sdkGetCalls = repositoryStats.requestCounts.get(\"GET\");\n+        final long sdkListCalls = repositoryStats.requestCounts.get(\"LIST\");\n+\n+        final long getCalls = handlers.values().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2NDUwNA==", "bodyText": "NIT: Revert", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r406764504", "createdAt": "2020-04-10T13:47:01Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobStore.java", "diffHunk": "@@ -135,4 +151,5 @@ public static CannedAccessControlList initCannedACL(String cannedACL) {\n \n         throw new BlobStoreException(\"cannedACL is not valid: [\" + cannedACL + \"]\");\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2NjAwNA==", "bodyText": "You could just keep these collectors as fields on S3BlobStore and have getters for them on it?\nThen you save adding new fields to the retrying input stream and containers and don't have to create a new instance for every container + get request.", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r406766004", "createdAt": "2020-04-10T13:50:24Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java", "diffHunk": "@@ -78,10 +82,22 @@\n     private final S3BlobStore blobStore;\n     private final String keyPath;\n \n+    private final RequestMetricCollector listMetricCollector;\n+\n     S3BlobContainer(BlobPath path, S3BlobStore blobStore) {\n         super(path);\n         this.blobStore = blobStore;\n         this.keyPath = path.buildAsString();\n+        this.listMetricCollector = new RequestMetricCollector() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c48c0735f75c156dfd4f76ad912c64b76bf5f2a", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/6c48c0735f75c156dfd4f76ad912c64b76bf5f2a", "committedDate": "2020-04-14T07:01:31Z", "message": "Armin's feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af17d17ea8cab8976be6c4e695775a7c9006e10e", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/af17d17ea8cab8976be6c4e695775a7c9006e10e", "committedDate": "2020-04-14T07:02:04Z", "message": "Merge remote-tracking branch 'elastic/master' into record-list-get-calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe1288bcac06bbe0ddca61bd922f08d4412ea39b", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe1288bcac06bbe0ddca61bd922f08d4412ea39b", "committedDate": "2020-04-14T07:48:48Z", "message": "forbiddenAPIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzEyNDg2", "url": "https://github.com/elastic/elasticsearch/pull/55051#pullrequestreview-392712486", "createdAt": "2020-04-14T08:31:15Z", "commit": {"oid": "fe1288bcac06bbe0ddca61bd922f08d4412ea39b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODozMToxNlrOGFD19g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1NjozMFrOGFEzuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1OTAzMA==", "bodyText": "Since it's an inner class, maybe just call it Stats", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r407959030", "createdAt": "2020-04-14T08:31:16Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobStore.java", "diffHunk": "@@ -135,4 +173,18 @@ public static CannedAccessControlList initCannedACL(String cannedACL) {\n \n         throw new BlobStoreException(\"cannedACL is not valid: [\" + cannedACL + \"]\");\n     }\n+\n+    static class S3Stats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1288bcac06bbe0ddca61bd922f08d4412ea39b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MzU2OA==", "bodyText": "Can you remove the log message and add them to the assertEquals() methods instead?", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r407963568", "createdAt": "2020-04-14T08:38:48Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobStoreRepositoryTests.java", "diffHunk": "@@ -176,6 +187,94 @@ public void testEnforcedCooldownPeriod() throws IOException {\n         assertThat(repository.threadPool().relativeTimeInNanos() - beforeFastDelete, lessThan(TEST_COOLDOWN_PERIOD.getNanos()));\n     }\n \n+    public void testRequestStats() throws Exception {\n+        final String repository = createRepository(randomName());\n+        final String index = \"index-no-merges\";\n+        createIndex(index, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+\n+        final long nbDocs = randomLongBetween(100, 1000);\n+        try (BackgroundIndexer indexer = new BackgroundIndexer(index, \"_doc\", client(), (int) nbDocs)) {\n+            waitForDocs(nbDocs, indexer);\n+        }\n+\n+        flushAndRefresh(index);\n+        ForceMergeResponse forceMerge = client().admin().indices().prepareForceMerge(index).setFlush(true).setMaxNumSegments(1).get();\n+        assertThat(forceMerge.getSuccessfulShards(), equalTo(1));\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        final String snapshot = \"snapshot\";\n+        assertSuccessfulSnapshot(client().admin().cluster().prepareCreateSnapshot(repository, snapshot)\n+            .setWaitForCompletion(true).setIndices(index));\n+\n+        assertAcked(client().admin().indices().prepareDelete(index));\n+\n+        assertSuccessfulRestore(client().admin().cluster().prepareRestoreSnapshot(repository, snapshot).setWaitForCompletion(true));\n+        ensureGreen(index);\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        assertAcked(client().admin().cluster().prepareDeleteSnapshot(repository, snapshot).get());\n+\n+        final RepositoryStats repositoryStats = StreamSupport.stream(\n+            internalCluster().getInstances(RepositoriesService.class).spliterator(), false)\n+            .map(repositoriesService -> {\n+                try {\n+                    return repositoriesService.repository(repository);\n+                } catch (RepositoryMissingException e) {\n+                    return null;\n+                }\n+            })\n+            .filter(r -> r != null)\n+            .map(r -> r.stats())\n+            .reduce((s1, s2) -> s1.combine(s2))\n+            .get();\n+        final long sdkGetCalls = repositoryStats.requestCounts.get(\"GET\");\n+        final long sdkListCalls = repositoryStats.requestCounts.get(\"LIST\");\n+\n+        final long getCalls = handlers.values().stream()\n+            .mapToLong(h -> {\n+                long count = 0;\n+                while (h instanceof DelegatingHttpHandler) {\n+                    if (h instanceof S3ErroneousHttpHandler) {\n+                        count += ((S3ErroneousHttpHandler) h).getCalls.get();\n+                    }\n+                    h = ((DelegatingHttpHandler) h).getDelegate();\n+                }\n+                if (h instanceof S3HttpHandler) {\n+                    return count + ((S3HttpHandler) h).getCalls.get();\n+                } else {\n+                    assert false;\n+                    return count;\n+                }\n+            })\n+            .sum();\n+        final long listCalls = handlers.values().stream()\n+            .mapToLong(h -> {\n+                long count = 0;\n+                while (h instanceof DelegatingHttpHandler) {\n+                    if (h instanceof S3ErroneousHttpHandler) {\n+                        count += ((S3ErroneousHttpHandler) h).listCalls.get();\n+                    }\n+                    h = ((DelegatingHttpHandler) h).getDelegate();\n+                }\n+                if (h instanceof S3HttpHandler) {\n+                    return count + ((S3HttpHandler) h).listCalls.get();\n+                } else {\n+                    assert false;\n+                    return count;\n+                }\n+            })\n+            .sum();\n+\n+        logger.info(\"SDK sent {} GET calls and handler measured {} GET calls\", sdkGetCalls, getCalls);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1288bcac06bbe0ddca61bd922f08d4412ea39b"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NzI2MA==", "bodyText": "I think we could add a counting http handler that would wrap the handlers (similarly to what ExceptionCatchingHttpHandler does) and that would update counters when receiving an HttpExchange.\nI think we're interesting in couting all GETs including the retries?", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r407967260", "createdAt": "2020-04-14T08:44:34Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobStoreRepositoryTests.java", "diffHunk": "@@ -176,6 +187,82 @@ public void testEnforcedCooldownPeriod() throws IOException {\n         assertThat(repository.threadPool().relativeTimeInNanos() - beforeFastDelete, lessThan(TEST_COOLDOWN_PERIOD.getNanos()));\n     }\n \n+    public void testRequestStats() throws Exception {\n+        final String repository = createRepository(randomName());\n+        final String index = \"index-no-merges\";\n+        createIndex(index, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .build());\n+\n+        final long nbDocs = randomLongBetween(100, 1000);\n+        try (BackgroundIndexer indexer = new BackgroundIndexer(index, \"_doc\", client(), (int) nbDocs)) {\n+            waitForDocs(nbDocs, indexer);\n+        }\n+\n+        flushAndRefresh(index);\n+        ForceMergeResponse forceMerge = client().admin().indices().prepareForceMerge(index).setFlush(true).setMaxNumSegments(1).get();\n+        assertThat(forceMerge.getSuccessfulShards(), equalTo(1));\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        final String snapshot = \"snapshot\";\n+        assertSuccessfulSnapshot(client().admin().cluster().prepareCreateSnapshot(repository, snapshot)\n+            .setWaitForCompletion(true).setIndices(index));\n+\n+        assertAcked(client().admin().indices().prepareDelete(index));\n+\n+        assertSuccessfulRestore(client().admin().cluster().prepareRestoreSnapshot(repository, snapshot).setWaitForCompletion(true));\n+        ensureGreen(index);\n+        assertHitCount(client().prepareSearch(index).setSize(0).setTrackTotalHits(true).get(), nbDocs);\n+\n+        assertAcked(client().admin().cluster().prepareDeleteSnapshot(repository, snapshot).get());\n+\n+        final RepositoryStats repositoryStats = StreamSupport.stream(\n+            internalCluster().getInstances(RepositoriesService.class).spliterator(), false)\n+            .map(repositoriesService -> {\n+                try {\n+                    return repositoriesService.repository(repository);\n+                } catch (RepositoryMissingException e) {\n+                    return null;\n+                }\n+            })\n+            .filter(r -> r != null)\n+            .map(r -> r.stats())\n+            .reduce((s1, s2) -> s1.combine(s2))\n+            .get();\n+        final long sdkGetCalls = repositoryStats.requestCounts.get(\"GET\");\n+        final long sdkListCalls = repositoryStats.requestCounts.get(\"LIST\");\n+\n+        final long getCalls = handlers.values().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2MzQ5Nw=="}, "originalCommit": {"oid": "d060429f92dc2938e0c800f8bfd6bd497579c1d6"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NzU2Ng==", "bodyText": "I'd move this in a dedicated HttpHandler that would wrap other handlers", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r407967566", "createdAt": "2020-04-14T08:45:06Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobStoreRepositoryTests.java", "diffHunk": "@@ -256,10 +355,24 @@ private void validateAuthHeader(HttpExchange exchange) {\n     @SuppressForbidden(reason = \"this test uses a HttpServer to emulate an S3 endpoint\")\n     private static class S3ErroneousHttpHandler extends ErroneousHttpHandler {\n \n+        public final AtomicLong getCalls = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1288bcac06bbe0ddca61bd922f08d4412ea39b"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2OTI1NA==", "bodyText": "Maybe rename this method to merge? (to be consistent with other Stats classes that have similar methods like ForecastStats, SnapshotPolicyStats etc)", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r407969254", "createdAt": "2020-04-14T08:47:54Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryStats.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class RepositoryStats implements Writeable {\n+\n+    public static final RepositoryStats EMPTY_STATS = new RepositoryStats(Collections.emptyMap());\n+\n+    public final Map<String, Long> requestCounts;\n+\n+    public RepositoryStats(Map<String, Long> requestCounts) {\n+        this.requestCounts = Collections.unmodifiableMap(requestCounts);\n+    }\n+\n+    public RepositoryStats(StreamInput in) throws IOException {\n+        this.requestCounts = in.readMap(StreamInput::readString, StreamInput::readLong);\n+    }\n+\n+    public RepositoryStats combine(RepositoryStats otherStats) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1288bcac06bbe0ddca61bd922f08d4412ea39b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NDg0MQ==", "bodyText": "Should we catch the repository missing exception here - in case the repository is not yet known by this node - and return empty stats too?", "url": "https://github.com/elastic/elasticsearch/pull/55051#discussion_r407974841", "createdAt": "2020-04-14T08:56:30Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportRepositoryStatsAction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots.action;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.nodes.TransportNodesAction;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.repositories.Repository;\n+import org.elasticsearch.repositories.RepositoryStats;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.searchablesnapshots.SearchableSnapshots;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class TransportRepositoryStatsAction extends TransportNodesAction<\n+    RepositoryStatsRequest,\n+    RepositoryStatsResponse,\n+    RepositoryStatsNodeRequest,\n+    RepositoryStatsNodeResponse> {\n+\n+    private final RepositoriesService repositoriesService;\n+    private final XPackLicenseState licenseState;\n+\n+    @Inject\n+    public TransportRepositoryStatsAction(\n+        ThreadPool threadPool,\n+        ClusterService clusterService,\n+        TransportService transportService,\n+        ActionFilters actionFilters,\n+        RepositoriesService repositoriesService,\n+        XPackLicenseState licenseState\n+    ) {\n+        super(\n+            RepositoryStatsAction.NAME,\n+            threadPool,\n+            clusterService,\n+            transportService,\n+            actionFilters,\n+            RepositoryStatsRequest::new,\n+            RepositoryStatsNodeRequest::new,\n+            ThreadPool.Names.SAME,\n+            RepositoryStatsNodeResponse.class\n+        );\n+        this.repositoriesService = repositoriesService;\n+        this.licenseState = Objects.requireNonNull(licenseState);\n+    }\n+\n+    @Override\n+    protected RepositoryStatsResponse newResponse(\n+        RepositoryStatsRequest request,\n+        List<RepositoryStatsNodeResponse> nodes,\n+        List<FailedNodeException> failures\n+    ) {\n+        return new RepositoryStatsResponse(clusterService.getClusterName(), nodes, failures);\n+    }\n+\n+    @Override\n+    protected RepositoryStatsNodeRequest newNodeRequest(RepositoryStatsRequest request) {\n+        return new RepositoryStatsNodeRequest(request.getRepository());\n+    }\n+\n+    @Override\n+    protected RepositoryStatsNodeResponse newNodeResponse(StreamInput in) throws IOException {\n+        return new RepositoryStatsNodeResponse(in);\n+    }\n+\n+    @Override\n+    protected RepositoryStatsNodeResponse nodeOperation(RepositoryStatsNodeRequest request, Task task) {\n+        SearchableSnapshots.ensureValidLicense(licenseState);\n+        if (clusterService.localNode().isMasterNode() == false && clusterService.localNode().isDataNode() == false) {\n+            return new RepositoryStatsNodeResponse(clusterService.localNode(), RepositoryStats.EMPTY_STATS);\n+        }\n+        final Repository repository = repositoriesService.repository(request.getRepository());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1288bcac06bbe0ddca61bd922f08d4412ea39b"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ce54c2a45499436defb023b1f3d68a6ed075a2", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/08ce54c2a45499436defb023b1f3d68a6ed075a2", "committedDate": "2020-04-14T10:03:38Z", "message": "Tanguy feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODQ4MDA1", "url": "https://github.com/elastic/elasticsearch/pull/55051#pullrequestreview-392848005", "createdAt": "2020-04-14T11:44:59Z", "commit": {"oid": "08ce54c2a45499436defb023b1f3d68a6ed075a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODU4Mjkw", "url": "https://github.com/elastic/elasticsearch/pull/55051#pullrequestreview-392858290", "createdAt": "2020-04-14T12:01:10Z", "commit": {"oid": "08ce54c2a45499436defb023b1f3d68a6ed075a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3445, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}