{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMTE5MTAx", "number": 61517, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDo0OTozMFrOEcGzjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1OTo0NFrOEeM_mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTA3MDg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportMountSearchableSnapshotAction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDo0OTozMFrOHGb06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDo1ODoyM1rOHHQPiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwOTQxNw==", "bodyText": "I think it would be best to pull in the SystemIndices class since we're in a transport action. We can bind the instance in Node and make it available for guice to inject. Then a simple modification to the the SystemIndices class could be made that adds a method to check the name (currently there is a method that takes an Index object but only looks at the name) against the defined set of system indices.\nThe primary reason for this is users could have data indices in 7.x that start with a . so we shouldn't break that for them restrict them from being able to use this feature on that data.", "url": "https://github.com/elastic/elasticsearch/pull/61517#discussion_r476509417", "createdAt": "2020-08-25T14:49:30Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportMountSearchableSnapshotAction.java", "diffHunk": "@@ -132,6 +133,11 @@ protected void masterOperation(\n     ) {\n         SearchableSnapshots.ensureValidLicense(licenseState);\n \n+        final String mountedIndexName = request.mountedIndexName();\n+        if (mountedIndexName.charAt(0) == '.') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b2cf26a43a8a79e98a7721b1dc29fab9472901"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzNjMwNA==", "bodyText": "There are also hidden indices that start with a dot (e.g. .watcher-history*), which there's no reason to prevent being backed by a searchable snapshot. Using the SystemIndices class would avoid that issue as well.", "url": "https://github.com/elastic/elasticsearch/pull/61517#discussion_r476536304", "createdAt": "2020-08-25T15:25:32Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportMountSearchableSnapshotAction.java", "diffHunk": "@@ -132,6 +133,11 @@ protected void masterOperation(\n     ) {\n         SearchableSnapshots.ensureValidLicense(licenseState);\n \n+        final String mountedIndexName = request.mountedIndexName();\n+        if (mountedIndexName.charAt(0) == '.') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwOTQxNw=="}, "originalCommit": {"oid": "42b2cf26a43a8a79e98a7721b1dc29fab9472901"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM2NzQwNg==", "bodyText": "I merged #61540 which adds the method in SystemIndices to check a string name without needing the Index object.", "url": "https://github.com/elastic/elasticsearch/pull/61517#discussion_r477367406", "createdAt": "2020-08-26T14:57:21Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportMountSearchableSnapshotAction.java", "diffHunk": "@@ -132,6 +133,11 @@ protected void masterOperation(\n     ) {\n         SearchableSnapshots.ensureValidLicense(licenseState);\n \n+        final String mountedIndexName = request.mountedIndexName();\n+        if (mountedIndexName.charAt(0) == '.') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwOTQxNw=="}, "originalCommit": {"oid": "42b2cf26a43a8a79e98a7721b1dc29fab9472901"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM2ODIwMA==", "bodyText": "Thanks everybody. I'm waiting for #60522 to be merged and I'll update this PR.", "url": "https://github.com/elastic/elasticsearch/pull/61517#discussion_r477368200", "createdAt": "2020-08-26T14:58:23Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportMountSearchableSnapshotAction.java", "diffHunk": "@@ -132,6 +133,11 @@ protected void masterOperation(\n     ) {\n         SearchableSnapshots.ensureValidLicense(licenseState);\n \n+        final String mountedIndexName = request.mountedIndexName();\n+        if (mountedIndexName.charAt(0) == '.') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwOTQxNw=="}, "originalCommit": {"oid": "42b2cf26a43a8a79e98a7721b1dc29fab9472901"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTA0OTg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportMountSearchableSnapshotAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1Nzo0NlrOHJugww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1Nzo0NlrOHJugww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MTI4Mw==", "bodyText": "This looks better than the previous approach \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/61517#discussion_r479961283", "createdAt": "2020-08-31T07:57:46Z", "author": {"login": "fcofdez"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/action/TransportMountSearchableSnapshotAction.java", "diffHunk": "@@ -132,6 +136,11 @@ protected void masterOperation(\n     ) {\n         SearchableSnapshots.ensureValidLicense(licenseState);\n \n+        final String mountedIndexName = request.mountedIndexName();\n+        if (systemIndices.isSystemIndex(mountedIndexName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae5843374684039e1bd580b53fe674d48f1e22bb"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTA1NjI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsSystemIndicesIntegTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1OTo0NFrOHJukmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyMTozN1rOHJ64ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MjI2NA==", "bodyText": "nit: we could use createAndPopulateIndex instead of manually creating and populating the index?", "url": "https://github.com/elastic/elasticsearch/pull/61517#discussion_r479962264", "createdAt": "2020-08-31T07:59:44Z", "author": {"login": "fcofdez"}, "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsSystemIndicesIntegTests.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.searchablesnapshots.MountSearchableSnapshotAction;\n+import org.elasticsearch.xpack.core.searchablesnapshots.MountSearchableSnapshotRequest;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+public class SearchableSnapshotsSystemIndicesIntegTests extends BaseSearchableSnapshotsIntegTestCase {\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        final List<Class<? extends Plugin>> plugins = new ArrayList<>(super.nodePlugins());\n+        plugins.add(TestSystemIndexPlugin.class);\n+        return plugins;\n+    }\n+\n+    public void testCannotMountSystemIndex() {\n+        executeTest(TestSystemIndexPlugin.INDEX_NAME, new OriginSettingClient(client(), ClientHelper.SEARCHABLE_SNAPSHOTS_ORIGIN));\n+    }\n+\n+    public void testCannotMountSnapshotBlobCacheIndex() {\n+        executeTest(SearchableSnapshotsConstants.SNAPSHOT_BLOB_CACHE_INDEX, client());\n+    }\n+\n+    private void executeTest(final String indexName, final Client client) {\n+        final boolean isHidden = randomBoolean();\n+        assertAcked(\n+            client.admin()\n+                .indices()\n+                .prepareCreate(indexName)\n+                .setSettings(Settings.builder().put(IndexMetadata.SETTING_INDEX_HIDDEN, isHidden).build())\n+        );\n+\n+        final int nbDocs = scaledRandomIntBetween(0, 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae5843374684039e1bd580b53fe674d48f1e22bb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2Mzk2Mw==", "bodyText": "Yes we can - I pushed 3e173cb", "url": "https://github.com/elastic/elasticsearch/pull/61517#discussion_r480163963", "createdAt": "2020-08-31T14:21:37Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsSystemIndicesIntegTests.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.searchablesnapshots.MountSearchableSnapshotAction;\n+import org.elasticsearch.xpack.core.searchablesnapshots.MountSearchableSnapshotRequest;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+public class SearchableSnapshotsSystemIndicesIntegTests extends BaseSearchableSnapshotsIntegTestCase {\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        final List<Class<? extends Plugin>> plugins = new ArrayList<>(super.nodePlugins());\n+        plugins.add(TestSystemIndexPlugin.class);\n+        return plugins;\n+    }\n+\n+    public void testCannotMountSystemIndex() {\n+        executeTest(TestSystemIndexPlugin.INDEX_NAME, new OriginSettingClient(client(), ClientHelper.SEARCHABLE_SNAPSHOTS_ORIGIN));\n+    }\n+\n+    public void testCannotMountSnapshotBlobCacheIndex() {\n+        executeTest(SearchableSnapshotsConstants.SNAPSHOT_BLOB_CACHE_INDEX, client());\n+    }\n+\n+    private void executeTest(final String indexName, final Client client) {\n+        final boolean isHidden = randomBoolean();\n+        assertAcked(\n+            client.admin()\n+                .indices()\n+                .prepareCreate(indexName)\n+                .setSettings(Settings.builder().put(IndexMetadata.SETTING_INDEX_HIDDEN, isHidden).build())\n+        );\n+\n+        final int nbDocs = scaledRandomIntBetween(0, 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MjI2NA=="}, "originalCommit": {"oid": "ae5843374684039e1bd580b53fe674d48f1e22bb"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}