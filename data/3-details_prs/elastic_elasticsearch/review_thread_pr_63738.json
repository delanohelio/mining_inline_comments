{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MDc4NDU5", "number": 63738, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyMzozOFrOEuXP6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzowMlrOEuXr8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDUwODU4OnYy", "diffSide": "RIGHT", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyMzozOFrOHitwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyMzozOFrOHitwdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2MzMxNg==", "bodyText": "nit: is there a reason why this method starts with get while the two above don't?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506163316", "createdAt": "2020-10-16T08:23:38Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {\n+        if (isMapped.test(MetaJoinFieldMapper.NAME) == false) {\n+            return null;\n+        }\n+        MetaJoinFieldMapper.MetaJoinFieldType ft\n+            = (MetaJoinFieldMapper.MetaJoinFieldType) getFieldType.apply(MetaJoinFieldMapper.NAME);\n+        String joinField = ft.getJoinField();\n+        if (isMapped.test(joinField) == false) {\n+            return null;\n+        }\n+        ParentJoinFieldMapper.JoinFieldType jft =\n+            (ParentJoinFieldMapper.JoinFieldType) getFieldType.apply(joinField);\n+        return jft.getJoiner();\n+    }\n+\n+    private final Map<String, Set<String>> parentsToChildren = new HashMap<>();\n+    private final Map<String, String> childrenToParents = new HashMap<>();\n+\n+    private final String joinField;\n+\n+    /**\n+     * Constructs a Joiner based on a join field and a set of relations\n+     */\n+    public Joiner(String joinField, List<Relations> relations) {\n+        this.joinField = joinField;\n+        for (Relations r : relations) {\n+            for (String child : r.children) {\n+                parentsToChildren.put(r.parent, r.children);\n+                if (childrenToParents.containsKey(child)) {\n+                    throw new IllegalArgumentException(\"[\" + child + \"] cannot have multiple parents\");\n+                }\n+                childrenToParents.put(child, r.parent);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @return the join field for the index\n+     */\n+    public String getJoinField() {\n+        return joinField;\n+    }\n+\n+    /**\n+     * @return a filter for documents of a specific join type\n+     */\n+    public Query filter(String relationType) {\n+        return new TermQuery(new Term(joinField, relationType));\n+    }\n+\n+    /**\n+     * @return a filter for parent documents of a specific child type\n+     */\n+    public Query parentFilter(String childType) {\n+        return new TermQuery(new Term(joinField, childrenToParents.get(childType)));\n+    }\n+\n+    /**\n+     * @return a filter for child documents of a specific parent type\n+     */\n+    public Query getChildrenFilter(String parentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDU0MTQ1OnYy", "diffSide": "RIGHT", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyOTo0MFrOHiuF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyOTo0MFrOHiuF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2ODgxNg==", "bodyText": "shall we make this package private?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506168816", "createdAt": "2020-10-16T08:29:40Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDU1MzgwOnYy", "diffSide": "RIGHT", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozMTo1NVrOHiuNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozMTo1NVrOHiuNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3MDgxMA==", "bodyText": "could this be package private?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506170810", "createdAt": "2020-10-16T08:31:55Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {\n+        if (isMapped.test(MetaJoinFieldMapper.NAME) == false) {\n+            return null;\n+        }\n+        MetaJoinFieldMapper.MetaJoinFieldType ft\n+            = (MetaJoinFieldMapper.MetaJoinFieldType) getFieldType.apply(MetaJoinFieldMapper.NAME);\n+        String joinField = ft.getJoinField();\n+        if (isMapped.test(joinField) == false) {\n+            return null;\n+        }\n+        ParentJoinFieldMapper.JoinFieldType jft =\n+            (ParentJoinFieldMapper.JoinFieldType) getFieldType.apply(joinField);\n+        return jft.getJoiner();\n+    }\n+\n+    private final Map<String, Set<String>> parentsToChildren = new HashMap<>();\n+    private final Map<String, String> childrenToParents = new HashMap<>();\n+\n+    private final String joinField;\n+\n+    /**\n+     * Constructs a Joiner based on a join field and a set of relations\n+     */\n+    public Joiner(String joinField, List<Relations> relations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDU1NDk1OnYy", "diffSide": "RIGHT", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozMjowNVrOHiuOWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozMjowNVrOHiuOWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3MDk3MA==", "bodyText": "make this final?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506170970", "createdAt": "2020-10-16T08:32:05Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDU3MjgxOnYy", "diffSide": "RIGHT", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNToyOVrOHiuaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNToyOVrOHiuaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3Mzk1NQ==", "bodyText": "parse looks unused?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506173955", "createdAt": "2020-10-16T08:35:29Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.elasticsearch.common.xcontent.support.XContentMapValues;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Defines a relationship between a parent type and a set of child types\n+ */\n+class Relations {\n+\n+    final String parent;\n+    final Set<String> children;\n+\n+    Relations(String parent, Set<String> children) {\n+        this.parent = parent;\n+        this.children = children;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Relations relation = (Relations) o;\n+        return Objects.equals(parent, relation.parent) &&\n+            Objects.equals(children, relation.children);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(parent, children);\n+    }\n+\n+    static List<Relations> parse(Object node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDU4MDMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzowMlrOHiufCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzowMlrOHiufCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NTI0MQ==", "bodyText": "you may also remove getMapper from this class , one less usage of getMapperService ;)", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506175241", "createdAt": "2020-10-16T08:37:02Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -187,6 +189,11 @@ public MappedFieldType getFieldType(String path) {\n             return context.getFieldType(path);\n         }\n \n+        @Override\n+        public boolean isFieldMapped(String field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2891, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}