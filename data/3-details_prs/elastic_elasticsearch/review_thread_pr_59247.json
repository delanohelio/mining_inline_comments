{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDUxOTI0", "number": 59247, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMToyNzo1OVrOEM2qcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0OToyMlrOEM3DBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTEzOTY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/IndexingPressure.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMToyNzo1OVrOGvNAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzo1NTowOVrOGwapjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0OTQ0Mw==", "bodyText": "I think it would also be nice to unit test this class, by adding a non-public constructor that takes primaryAndCoordinatingLimits as input. We can then have unit tests that check the accounting and breaking behavior.", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r452149443", "createdAt": "2020-07-09T11:27:59Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingPressure.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n+import org.elasticsearch.index.stats.IndexingPressureStats;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class IndexingPressure {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyMTQ1NQ==", "bodyText": "I'm working on it. And there is a task on the meta issue.", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r453421455", "createdAt": "2020-07-13T03:55:09Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingPressure.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n+import org.elasticsearch.index.stats.IndexingPressureStats;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class IndexingPressure {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0OTQ0Mw=="}, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTE0Mzg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMToyOTozM1rOGvNDiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMToyOTozM1rOGvNDiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDE1Mw==", "bodyText": "Is this still relevant? What total do you mean here?", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r452150153", "createdAt": "2020-07-09T11:29:33Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class IndexingPressureStats implements Writeable, ToXContentFragment {\n+\n+    private final long totalPrimaryAndCoordinatingBytes;\n+    private final long totalReplicaBytes;\n+    private final long pendingPrimaryAndCoordinatingBytes;\n+    private final long pendingReplicaBytes;\n+    private final long primaryAndCoordinatingRejections;\n+    private final long replicaRejections;\n+\n+    public IndexingPressureStats(StreamInput in) throws IOException {\n+        totalPrimaryAndCoordinatingBytes = in.readVLong();\n+        totalReplicaBytes = in.readVLong();\n+        pendingPrimaryAndCoordinatingBytes = in.readVLong();\n+        pendingReplicaBytes = in.readVLong();\n+        primaryAndCoordinatingRejections = in.readVLong();\n+        replicaRejections = in.readVLong();\n+    }\n+\n+    public IndexingPressureStats(long totalPrimaryAndCoordinatingBytes, long totalReplicaBytes, long pendingPrimaryAndCoordinatingBytes,\n+                                 long pendingReplicaBytes, long primaryAndCoordinatingRejections, long replicaRejections) {\n+        this.totalPrimaryAndCoordinatingBytes = totalPrimaryAndCoordinatingBytes;\n+        this.totalReplicaBytes = totalReplicaBytes;\n+        this.pendingPrimaryAndCoordinatingBytes = pendingPrimaryAndCoordinatingBytes;\n+        this.pendingReplicaBytes = pendingReplicaBytes;\n+        this.primaryAndCoordinatingRejections = primaryAndCoordinatingRejections;\n+        this.replicaRejections = replicaRejections;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        // TODO: Add total", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTE0ODcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTozMTowOVrOGvNGqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo0MDowNVrOGwuTsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDk1NA==", "bodyText": "should we have another total_bytes field here that sums total_primary_and_coordinating_bytes and total_replica_bytes?", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r452150954", "createdAt": "2020-07-09T11:31:09Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class IndexingPressureStats implements Writeable, ToXContentFragment {\n+\n+    private final long totalPrimaryAndCoordinatingBytes;\n+    private final long totalReplicaBytes;\n+    private final long pendingPrimaryAndCoordinatingBytes;\n+    private final long pendingReplicaBytes;\n+    private final long primaryAndCoordinatingRejections;\n+    private final long replicaRejections;\n+\n+    public IndexingPressureStats(StreamInput in) throws IOException {\n+        totalPrimaryAndCoordinatingBytes = in.readVLong();\n+        totalReplicaBytes = in.readVLong();\n+        pendingPrimaryAndCoordinatingBytes = in.readVLong();\n+        pendingReplicaBytes = in.readVLong();\n+        primaryAndCoordinatingRejections = in.readVLong();\n+        replicaRejections = in.readVLong();\n+    }\n+\n+    public IndexingPressureStats(long totalPrimaryAndCoordinatingBytes, long totalReplicaBytes, long pendingPrimaryAndCoordinatingBytes,\n+                                 long pendingReplicaBytes, long primaryAndCoordinatingRejections, long replicaRejections) {\n+        this.totalPrimaryAndCoordinatingBytes = totalPrimaryAndCoordinatingBytes;\n+        this.totalReplicaBytes = totalReplicaBytes;\n+        this.pendingPrimaryAndCoordinatingBytes = pendingPrimaryAndCoordinatingBytes;\n+        this.pendingReplicaBytes = pendingReplicaBytes;\n+        this.primaryAndCoordinatingRejections = primaryAndCoordinatingRejections;\n+        this.replicaRejections = replicaRejections;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        // TODO: Add total\n+        out.writeVLong(totalPrimaryAndCoordinatingBytes);\n+        out.writeVLong(totalReplicaBytes);\n+        out.writeVLong(pendingPrimaryAndCoordinatingBytes);\n+        out.writeVLong(pendingReplicaBytes);\n+        out.writeVLong(primaryAndCoordinatingRejections);\n+        out.writeVLong(replicaRejections);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject(\"indexing_pressure\");\n+        builder.field(\"total_primary_and_coordinating_bytes\", totalPrimaryAndCoordinatingBytes);\n+        builder.field(\"total_replica_bytes\", totalReplicaBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyMTc5Mw==", "bodyText": "I can add that if you want. However, then do we need a total_pending_bytes? I guess I did not add it in the first place as the value you are looking to add is computed by simply adding the two numbers and it felt unnecessary to add totals.", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r453421793", "createdAt": "2020-07-13T03:56:58Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class IndexingPressureStats implements Writeable, ToXContentFragment {\n+\n+    private final long totalPrimaryAndCoordinatingBytes;\n+    private final long totalReplicaBytes;\n+    private final long pendingPrimaryAndCoordinatingBytes;\n+    private final long pendingReplicaBytes;\n+    private final long primaryAndCoordinatingRejections;\n+    private final long replicaRejections;\n+\n+    public IndexingPressureStats(StreamInput in) throws IOException {\n+        totalPrimaryAndCoordinatingBytes = in.readVLong();\n+        totalReplicaBytes = in.readVLong();\n+        pendingPrimaryAndCoordinatingBytes = in.readVLong();\n+        pendingReplicaBytes = in.readVLong();\n+        primaryAndCoordinatingRejections = in.readVLong();\n+        replicaRejections = in.readVLong();\n+    }\n+\n+    public IndexingPressureStats(long totalPrimaryAndCoordinatingBytes, long totalReplicaBytes, long pendingPrimaryAndCoordinatingBytes,\n+                                 long pendingReplicaBytes, long primaryAndCoordinatingRejections, long replicaRejections) {\n+        this.totalPrimaryAndCoordinatingBytes = totalPrimaryAndCoordinatingBytes;\n+        this.totalReplicaBytes = totalReplicaBytes;\n+        this.pendingPrimaryAndCoordinatingBytes = pendingPrimaryAndCoordinatingBytes;\n+        this.pendingReplicaBytes = pendingReplicaBytes;\n+        this.primaryAndCoordinatingRejections = primaryAndCoordinatingRejections;\n+        this.replicaRejections = replicaRejections;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        // TODO: Add total\n+        out.writeVLong(totalPrimaryAndCoordinatingBytes);\n+        out.writeVLong(totalReplicaBytes);\n+        out.writeVLong(pendingPrimaryAndCoordinatingBytes);\n+        out.writeVLong(pendingReplicaBytes);\n+        out.writeVLong(primaryAndCoordinatingRejections);\n+        out.writeVLong(replicaRejections);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject(\"indexing_pressure\");\n+        builder.field(\"total_primary_and_coordinating_bytes\", totalPrimaryAndCoordinatingBytes);\n+        builder.field(\"total_replica_bytes\", totalReplicaBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDk1NA=="}, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0NDQ1Nw==", "bodyText": "It's mainly for convenience, so you can get a quick idea of the indexing pressure on all nodes without extra aggregating (possibly the user might not care what exact bucket (primary, coordination, replica) the memory is for.\nWe would also have total_pending_bytes, yes (that was actually the one I was mainly looking for).\nFurther I prefer the current_ prefix to pending_, we use current_ in a number of related stats places as well.", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r453544457", "createdAt": "2020-07-13T10:13:31Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class IndexingPressureStats implements Writeable, ToXContentFragment {\n+\n+    private final long totalPrimaryAndCoordinatingBytes;\n+    private final long totalReplicaBytes;\n+    private final long pendingPrimaryAndCoordinatingBytes;\n+    private final long pendingReplicaBytes;\n+    private final long primaryAndCoordinatingRejections;\n+    private final long replicaRejections;\n+\n+    public IndexingPressureStats(StreamInput in) throws IOException {\n+        totalPrimaryAndCoordinatingBytes = in.readVLong();\n+        totalReplicaBytes = in.readVLong();\n+        pendingPrimaryAndCoordinatingBytes = in.readVLong();\n+        pendingReplicaBytes = in.readVLong();\n+        primaryAndCoordinatingRejections = in.readVLong();\n+        replicaRejections = in.readVLong();\n+    }\n+\n+    public IndexingPressureStats(long totalPrimaryAndCoordinatingBytes, long totalReplicaBytes, long pendingPrimaryAndCoordinatingBytes,\n+                                 long pendingReplicaBytes, long primaryAndCoordinatingRejections, long replicaRejections) {\n+        this.totalPrimaryAndCoordinatingBytes = totalPrimaryAndCoordinatingBytes;\n+        this.totalReplicaBytes = totalReplicaBytes;\n+        this.pendingPrimaryAndCoordinatingBytes = pendingPrimaryAndCoordinatingBytes;\n+        this.pendingReplicaBytes = pendingReplicaBytes;\n+        this.primaryAndCoordinatingRejections = primaryAndCoordinatingRejections;\n+        this.replicaRejections = replicaRejections;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        // TODO: Add total\n+        out.writeVLong(totalPrimaryAndCoordinatingBytes);\n+        out.writeVLong(totalReplicaBytes);\n+        out.writeVLong(pendingPrimaryAndCoordinatingBytes);\n+        out.writeVLong(pendingReplicaBytes);\n+        out.writeVLong(primaryAndCoordinatingRejections);\n+        out.writeVLong(replicaRejections);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject(\"indexing_pressure\");\n+        builder.field(\"total_primary_and_coordinating_bytes\", totalPrimaryAndCoordinatingBytes);\n+        builder.field(\"total_replica_bytes\", totalReplicaBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDk1NA=="}, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc0MzUzNg==", "bodyText": "Changed to current", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r453743536", "createdAt": "2020-07-13T15:40:05Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class IndexingPressureStats implements Writeable, ToXContentFragment {\n+\n+    private final long totalPrimaryAndCoordinatingBytes;\n+    private final long totalReplicaBytes;\n+    private final long pendingPrimaryAndCoordinatingBytes;\n+    private final long pendingReplicaBytes;\n+    private final long primaryAndCoordinatingRejections;\n+    private final long replicaRejections;\n+\n+    public IndexingPressureStats(StreamInput in) throws IOException {\n+        totalPrimaryAndCoordinatingBytes = in.readVLong();\n+        totalReplicaBytes = in.readVLong();\n+        pendingPrimaryAndCoordinatingBytes = in.readVLong();\n+        pendingReplicaBytes = in.readVLong();\n+        primaryAndCoordinatingRejections = in.readVLong();\n+        replicaRejections = in.readVLong();\n+    }\n+\n+    public IndexingPressureStats(long totalPrimaryAndCoordinatingBytes, long totalReplicaBytes, long pendingPrimaryAndCoordinatingBytes,\n+                                 long pendingReplicaBytes, long primaryAndCoordinatingRejections, long replicaRejections) {\n+        this.totalPrimaryAndCoordinatingBytes = totalPrimaryAndCoordinatingBytes;\n+        this.totalReplicaBytes = totalReplicaBytes;\n+        this.pendingPrimaryAndCoordinatingBytes = pendingPrimaryAndCoordinatingBytes;\n+        this.pendingReplicaBytes = pendingReplicaBytes;\n+        this.primaryAndCoordinatingRejections = primaryAndCoordinatingRejections;\n+        this.replicaRejections = replicaRejections;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        // TODO: Add total\n+        out.writeVLong(totalPrimaryAndCoordinatingBytes);\n+        out.writeVLong(totalReplicaBytes);\n+        out.writeVLong(pendingPrimaryAndCoordinatingBytes);\n+        out.writeVLong(pendingReplicaBytes);\n+        out.writeVLong(primaryAndCoordinatingRejections);\n+        out.writeVLong(replicaRejections);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject(\"indexing_pressure\");\n+        builder.field(\"total_primary_and_coordinating_bytes\", totalPrimaryAndCoordinatingBytes);\n+        builder.field(\"total_replica_bytes\", totalReplicaBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDk1NA=="}, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTE4ODc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/IndexingPressure.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0NDo1NlrOGvNf7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowODowNlrOGvYBMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NzQyMA==", "bodyText": "should we now also put this under indexing_pressure namespace, e.g. indexing_limits.memory.limit?", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r452157420", "createdAt": "2020-07-09T11:44:56Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingPressure.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n+import org.elasticsearch.index.stats.IndexingPressureStats;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class IndexingPressure {\n+\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indexing_limits.memory.limit\", \"10%\", Setting.Property.NodeScope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyOTc3OQ==", "bodyText": "I've changed it to that. I know the prefix is still up for debate, but I agree the settings namespace should reflect the node stats name space.", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r452329779", "createdAt": "2020-07-09T16:08:06Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingPressure.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n+import org.elasticsearch.index.stats.IndexingPressureStats;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class IndexingPressure {\n+\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indexing_limits.memory.limit\", \"10%\", Setting.Property.NodeScope);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NzQyMA=="}, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTIwMjYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0OToyMlrOGvNoSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDowNDozMlrOGwaw4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTU2MQ==", "bodyText": "You've suggested in Slack doing different buckets (coordinating vs. primary) in metrics, which I think is a good idea, as it will make it clearer that some nodes might only be doing coordination, while others might not be client-facing and therefore doing purely primary (+ replica) work.", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r452159561", "createdAt": "2020-07-09T11:49:22Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class IndexingPressureStats implements Writeable, ToXContentFragment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyMzMyOQ==", "bodyText": "I explored this on Thursday and ran into some issues.\nEssentially it is reasonably straightforward to mark the bytes are coordinating at the TransportBulkAction level. But here is the problem I ran into. When a node receives the TransportShardBulkAction transport message we mark the bytes. And as we discussed we would mark the bytes as primary in the updated version. However, we use the rerouteWasLocal marker to know whether we need to mark the bytes at the primaryAction level. In this new version we would need to mark the bytes if the rerouteWasLocal but on the TransportBulkAction node. But not on the node that receives the TransportShardBulkAction message. And I am not sure how to delineate there.\nWe could mark coordinating bytes when TransportShardBulkAction is received. And then mark bytes at the primary level. We can mark a delta when the rerouteWasLocal is true. And use that delta to avoid double accounted rejections. That just means that a primary node will always mark both coordinating and primary bytes. Technically the reroute component can be coordinating work. But it feels kind of weird.\nLet's discuss tomorrow and see if we still want to pursue this breakdown.", "url": "https://github.com/elastic/elasticsearch/pull/59247#discussion_r453423329", "createdAt": "2020-07-13T04:04:32Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/index/stats/IndexingPressureStats.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class IndexingPressureStats implements Writeable, ToXContentFragment {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTU2MQ=="}, "originalCommit": {"oid": "227800c59c7798e11acc186f00724527f1516d3e"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1894, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}