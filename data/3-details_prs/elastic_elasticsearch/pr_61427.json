{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzA3Njc5", "number": 61427, "title": "Allow parsing Content-Type and Accept headers with version", "bodyText": "Content-Type and Accept headers expect a versioned form of media types\nlike application/vnd.elasticsearch+json;compatible-with=7\nwhen previously it was simple application/json or (cbor, yaml..) - it is still\nsupported\nnext step after #61987\nrelates #60516", "createdAt": "2020-08-21T15:41:53Z", "url": "https://github.com/elastic/elasticsearch/pull/61427", "merged": true, "mergeCommit": {"oid": "d04edcdfe7ff6d81ad9b4fc8d861a476ce3dc354"}, "closed": true, "closedAt": "2020-10-05T13:12:49Z", "author": {"login": "pgomulka"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBGlh9gH2gAyNDcxNzA3Njc5Ojc1MTRkODdjYmMxMjY5YmUwOTVlYmNmNzdlNTg2ZmMyMGU2Nzg0OWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPirIdgH2gAyNDcxNzA3Njc5OjNlMGVlYzAxMzgzYTljYmI3ZWMyZjVlODU4MTQ5YTkzODQ4YWU4ZDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/7514d87cbc1269be095ebcf77e586fc20e67849e", "committedDate": "2020-08-21T15:31:35Z", "message": "Allow parsing Content-Type and Accept headers with version\n\nContent-Type and Accept headers expect a verioned form of media types\nlike application/vnd.elasticsearch+json;compatible-with=7\nwhen previously it was simple application/json or similar - it is still\nsupported"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzI1MjEx", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-473725211", "createdAt": "2020-08-24T17:48:51Z", "commit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0ODo1MVrOHFv7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0ODo1MVrOHFv7SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MDE1Mg==", "bodyText": "can you add a test for yaml too ?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r475790152", "createdAt": "2020-08-24T17:48:51Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,57 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Njg4NTg5", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-474688589", "createdAt": "2020-08-25T17:14:55Z", "commit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNDo1NVrOHGh3HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNDo1NVrOHGh3HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODI4NQ==", "bodyText": "Regex needs a few more escapes:\n\nEscape the . within vnd.elasticsearch+\nEscape the / between the type and subtype\n\n(application|text)\\\\/(vnd\\\\.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r476608285", "createdAt": "2020-08-25T17:14:55Z", "author": {"login": "sethmlarson"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODgyNzc0", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-475882774", "createdAt": "2020-08-26T21:47:52Z", "commit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo0Nzo1MlrOHHe6Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo0Nzo1MlrOHHe6Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwODQ3OA==", "bodyText": "(vnd.elasticsearch\\+)?\n\nAm I reading this correctly that the vnd.elasticsearch part is completely optional? I thought the intent was to only add compatible-with when vnd.elasticsearch is present?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r477608478", "createdAt": "2020-08-26T21:47:52Z", "author": {"login": "rjernst"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921bc6f6047c2c8412a8cd44c2fa3b40c398cc23", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/921bc6f6047c2c8412a8cd44c2fa3b40c398cc23", "committedDate": "2020-09-01T07:43:11Z", "message": "code review follow up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee280bab965e94a29a388710804b1379ee7b9801", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ee280bab965e94a29a388710804b1379ee7b9801", "committedDate": "2020-09-01T08:58:47Z", "message": "unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/433de741d264768174cd95a9475d77cc0d41f247", "committedDate": "2020-09-02T09:31:48Z", "message": "revert unrelated test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODkwNTA4", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-480890508", "createdAt": "2020-09-02T14:39:55Z", "commit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDozOTo1NlrOHLyaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1Mjo0MVrOHLzBgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMjMyNA==", "bodyText": "why do we allow */* to be JSON?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482122324", "createdAt": "2020-09-02T14:39:56Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -130,7 +154,7 @@ public static XContentType fromMediaTypeOrFormat(String mediaType) {\n             }\n         }\n         final String lowercaseMediaType = mediaType.toLowerCase(Locale.ROOT);\n-        if (lowercaseMediaType.startsWith(\"application/*\")) {\n+        if (lowercaseMediaType.startsWith(\"application/*\") || lowercaseMediaType.equals(\"*/*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNzIwMg==", "bodyText": "I think the charset aspect should be handled separately since we haven't deprecated accepting other charsets yet, see #22769", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482127202", "createdAt": "2020-09-02T14:46:14Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+            //type\n+        \"^(application|text)/\" +\n+            // custom subtype and a version: vnd.elasticsearch+json;compatible-with=7\n+            \"((vnd\\\\.elasticsearch\\\\+([^;\\\\s]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+)))\" +\n+            \"|([^;\\\\s]+))\" + //subtype: json,yaml,etc some of these are defined in x-pack so can't be enumerated\n+            \"(?:\\\\s*;\\\\s*(charset=UTF-8)?)?$\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMTgxMg==", "bodyText": "since this hack is not in this PR can we make this pkg private for now?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482131812", "createdAt": "2020-09-02T14:51:58Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -157,6 +183,30 @@ public static XContentType fromMediaType(String mediaType) {\n         return null;\n     }\n \n+    //public scope needed for text formats hack", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMjM1NA==", "bodyText": "let's remove this since it is now commented out", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482132354", "createdAt": "2020-09-02T14:52:41Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+            //type\n+        \"^(application|text)/\" +\n+            // custom subtype and a version: vnd.elasticsearch+json;compatible-with=7\n+            \"((vnd\\\\.elasticsearch\\\\+([^;\\\\s]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+)))\" +\n+            \"|([^;\\\\s]+))\" + //subtype: json,yaml,etc some of these are defined in x-pack so can't be enumerated\n+            \"(?:\\\\s*;\\\\s*(charset=UTF-8)?)?$\",\n+        Pattern.CASE_INSENSITIVE);\n+\n+\n+    /*Pattern.compile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51467e0ea1d8af04da4c4f5eac3449a3a40da9e6", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/51467e0ea1d8af04da4c4f5eac3449a3a40da9e6", "committedDate": "2020-09-02T15:26:25Z", "message": "remove */* and method visibility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODMyMDM0", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-481832034", "createdAt": "2020-09-03T13:21:57Z", "commit": {"oid": "51467e0ea1d8af04da4c4f5eac3449a3a40da9e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzoyMTo1N1rOHMmUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzoyMTo1N1rOHMmUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3MjczMg==", "bodyText": "elasticserach broke my eyes", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482972732", "createdAt": "2020-09-03T13:21:57Z", "author": {"login": "tlrx"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51467e0ea1d8af04da4c4f5eac3449a3a40da9e6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccaadbd7867f9a5cf9211f6a6f3a22456b8e9abd", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ccaadbd7867f9a5cf9211f6a6f3a22456b8e9abd", "committedDate": "2020-09-03T13:52:05Z", "message": "typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de13d4be25dd9506dc555eb1e38ada04c0d0e960", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/de13d4be25dd9506dc555eb1e38ada04c0d0e960", "committedDate": "2020-09-17T15:04:09Z", "message": "Merge branch 'master' into compat/content-type-header-with-version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9ee420f73ebe68a40842963a2df89c3eb03f98d", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/d9ee420f73ebe68a40842963a2df89c3eb03f98d", "committedDate": "2020-09-17T17:04:37Z", "message": "exted parsing with parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41150a6a7efce3a34ebcfa603274a7130c863788", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/41150a6a7efce3a34ebcfa603274a7130c863788", "committedDate": "2020-09-17T17:06:21Z", "message": "import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc8f86027e3576cd677f644902b75265dc6ad26", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/2fc8f86027e3576cd677f644902b75265dc6ad26", "committedDate": "2020-09-17T17:22:35Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734031a55d9f784f66c5e4a4fcfb9fb90e6e13cf", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/734031a55d9f784f66c5e4a4fcfb9fb90e6e13cf", "committedDate": "2020-09-18T10:21:48Z", "message": "scope parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/c04af650551c1522c8300830be2c3c754dad1759", "committedDate": "2020-09-18T10:30:24Z", "message": "x-ndjson to be versioned"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzcwMjY1", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-491370265", "createdAt": "2020-09-18T11:14:49Z", "commit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxNDo1MFrOHUIt-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxNDo1MFrOHUIt-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA==", "bodyText": "for the discussion:\ndefining versioned media types up front, means that we won't throw an exception if someone specifies it with oss licence\nif he uses oss on v8 server for api that was removed and provides application/vnd.elasticsearch+json;compatible-with=7 he will get a 404\nis there an easy way to make XContentType plugin aware? or licence aware?\nor are we ok with allowing to use versioned media types with oss?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490876410", "createdAt": "2020-09-18T11:14:50Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/474eb298470fdb651f9900f050949c738b2cca2c", "committedDate": "2020-09-18T14:20:30Z", "message": "Merge branch 'master' into compat/content-type-header-with-version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDk1MTYy", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-491495162", "createdAt": "2020-09-18T14:03:02Z", "commit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowMzowMlrOHUOhgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDozNDo0OVrOHUP01w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MTUyMQ==", "bodyText": "I suggest that we benchmark this with a JMH microbenchmark (separately) with a variety of different content types and parameters", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490971521", "createdAt": "2020-09-18T14:03:02Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -65,8 +51,10 @@ public T fromFormat(String format) {\n \n     /**\n      * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     *\n      * @param headerValue a header value from Accept or Content-Type\n      * @return a parsed media-type\n+     * //todo pg should this all be maybe based on a regex?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MTk5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(parametersMap.containsKey(typeWithSubtype)){\n          \n          \n            \n                    if (parametersMap.containsKey(typeWithSubtype)) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490971997", "createdAt": "2020-09-18T14:03:44Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -96,6 +91,17 @@ public ParsedMediaType parseMediaType(String headerValue) {\n         return null;\n     }\n \n+    private boolean isValidParameter(String typeWithSubtype, String parameterName, String parameterValue) {\n+        if(parametersMap.containsKey(typeWithSubtype)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MjExNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(parameters.containsKey(parameterName)){\n          \n          \n            \n                        if (parameters.containsKey(parameterName)) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490972116", "createdAt": "2020-09-18T14:03:56Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -96,6 +91,17 @@ public ParsedMediaType parseMediaType(String headerValue) {\n         return null;\n     }\n \n+    private boolean isValidParameter(String typeWithSubtype, String parameterName, String parameterValue) {\n+        if(parametersMap.containsKey(typeWithSubtype)){\n+            Map<String, String> parameters = parametersMap.get(typeWithSubtype);\n+            if(parameters.containsKey(parameterName)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MzU4Mw==", "bodyText": "We should compile the regex into a pattern to avoid doing it everytime", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490973583", "createdAt": "2020-09-18T14:06:11Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -96,6 +91,17 @@ public ParsedMediaType parseMediaType(String headerValue) {\n         return null;\n     }\n \n+    private boolean isValidParameter(String typeWithSubtype, String parameterName, String parameterValue) {\n+        if(parametersMap.containsKey(typeWithSubtype)){\n+            Map<String, String> parameters = parametersMap.get(typeWithSubtype);\n+            if(parameters.containsKey(parameterName)){\n+                String regex = parameters.get(parameterName);\n+                return parameterValue.matches(regex);//todo pg should we precompile regex?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3NTM4Mw==", "bodyText": "I think a 404 (or maybe 400) is the right thing to do here since the infrastructure for version support is in OSS and we do not have a compatible handler for V7.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490975383", "createdAt": "2020-09-18T14:09:01Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3NTU2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(parsedMediaType != null) {\n          \n          \n            \n                    if (parsedMediaType != null) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490975562", "createdAt": "2020-09-18T14:09:19Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -137,13 +153,23 @@ public static XContentType fromMediaType(String mediaTypeHeaderValue) {\n         return mediaTypeParser.fromMediaType(mediaTypeHeaderValue);\n     }\n \n-\n     private int index;\n \n     XContentType(int index) {\n         this.index = index;\n     }\n \n+    public static Byte parseVersion(String mediaType) {\n+        MediaTypeParser<XContentType>.ParsedMediaType parsedMediaType = mediaTypeParser.parseMediaType(mediaType);\n+        if(parsedMediaType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3OTgyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        XContentType.JSON,Map.of(\"compatible-with\",\"\\\\d+\",\n          \n          \n            \n                        \"charset\",\"UTF-8\"))\n          \n          \n            \n                        XContentType.JSON, Map.of(\"compatible-with\", \"\\\\d+\",\n          \n          \n            \n                        \"charset\", \"UTF-8\"))", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490979821", "createdAt": "2020-09-18T14:15:44Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java", "diffHunk": "@@ -29,37 +29,42 @@\n import static org.hamcrest.Matchers.nullValue;\n \n public class MediaTypeParserTests extends ESTestCase {\n-    MediaTypeParser<XContentType> mediaTypeParser = XContentType.mediaTypeParser;\n+\n+    MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\",\n+            XContentType.JSON,Map.of(\"compatible-with\",\"\\\\d+\",\n+            \"charset\",\"UTF-8\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4MDM0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),\n          \n          \n            \n                    assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version + \".0\"),", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490980348", "createdAt": "2020-09-18T14:16:27Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n+\n+        assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4MTI3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\".0\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\"_sth\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version+\"_sth\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version + \".0\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version + \"_sth\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version + \"_sth\"), nullValue());", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490981271", "createdAt": "2020-09-18T14:17:42Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n+\n+        assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testUnrecognizedParameter() {\n+        assertThat(XContentType.parseVersion(\"application/json; sth=123\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testMediaTypeWithoutESSubtype() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version), nullValue());\n+    }\n+\n+    public void testAnchoring(){\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\".0\"), nullValue());\n+        assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\"_sth\"), nullValue());\n+        assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version+\"_sth\"), nullValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4MTQwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testAnchoring(){\n          \n          \n            \n                public void testAnchoring() {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490981407", "createdAt": "2020-09-18T14:17:52Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n+\n+        assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testUnrecognizedParameter() {\n+        assertThat(XContentType.parseVersion(\"application/json; sth=123\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testMediaTypeWithoutESSubtype() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version), nullValue());\n+    }\n+\n+    public void testAnchoring(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NTM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte version = (byte)Math.abs(randomByte());\n          \n          \n            \n                    byte version = (byte) Math.abs(randomByte());", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490985364", "createdAt": "2020-09-18T14:23:11Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NzYxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n          \n          \n            \n                                    if (isValidParameter(typeWithSubtype, parameterName, parameterValue) == false) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490987616", "createdAt": "2020-09-18T14:26:27Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA==", "bodyText": "should we throw an exception here? Maybe one that returns a 400 since the parameter is invalid", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490988828", "createdAt": "2020-09-18T14:28:24Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Mjg1NQ==", "bodyText": "I am concerned that having charset with a regex of utf-8 could break someone using sql. This should be checked with the sql team", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490992855", "createdAt": "2020-09-18T14:34:49Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -294,7 +295,11 @@ public String subtype() {\n     private static final String PARAM_HEADER_ABSENT = \"absent\";\n     private static final String PARAM_HEADER_PRESENT = \"present\";\n \n-    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser<>(TextFormat.values());\n+    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser.Builder<TextFormat>()\n+        .withMediaTypeAndParams(PLAIN_TEXT.typeWithSubtype(), PLAIN_TEXT, Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c308136a2c10c74bca289b54b7f899afda6c9fb", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/5c308136a2c10c74bca289b54b7f899afda6c9fb", "committedDate": "2020-09-18T14:51:05Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b760ba92ea2c032febabc5ced960802dd9385b1", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/7b760ba92ea2c032febabc5ced960802dd9385b1", "committedDate": "2020-09-18T15:10:06Z", "message": "precompile pattern"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8", "committedDate": "2020-09-21T08:45:46Z", "message": "import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjY3ODI4", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-492667828", "createdAt": "2020-09-21T14:34:11Z", "commit": {"oid": "5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozNDoxMlrOHVTOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowMTo1N1rOHVUvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5NzA2Mw==", "bodyText": "nit: I would suggest to pass a Map<String, Pattern> so that the contract is a bit clearer (not obvious that the value can a regex expression)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492097063", "createdAt": "2020-09-21T14:34:12Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,36 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatMap = new HashMap<>();\n+        private final Map<String, T> typeMap = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeNoParams(String alternativeMediaType, T mediaType) {\n+            typeMap.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatMap.put(mediaType.format(), mediaType);\n+            return this;\n+        }\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, String> paramNameAndValueRegex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5ODMxOQ==", "bodyText": "I think you can remove this method in favor of just consumers just passing Colections.emptyMap() (which is how it is currently used).", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492098319", "createdAt": "2020-09-21T14:35:50Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,36 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatMap = new HashMap<>();\n+        private final Map<String, T> typeMap = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeNoParams(String alternativeMediaType, T mediaType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwODUwOA==", "bodyText": "I think we should throw an exception here that results in a 400 (either due to non-conformance with RFC or our own definition of what is supported).  Since we are very explicit about what is supported (as of this PR), we should throw the exception as soon we discover something that is not supported. I don't think we should \"fallback\" to use format ... those cases should be handled explicitly.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492108508", "createdAt": "2020-09-21T14:49:32Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyMTg1Ng==", "bodyText": "Is there any way to register a custom parser ? or just add the SQL values to the core parser and specificy which rule set to use when parsing ?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492121856", "createdAt": "2020-09-21T15:01:57Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6ebd6399abcec1faad8a994ae202c82151139f7", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/b6ebd6399abcec1faad8a994ae202c82151139f7", "committedDate": "2020-09-21T17:07:24Z", "message": "removal of unused method and pattern in method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff6c94f3e6d483b53415b7a2162c4a9f651fad7c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ff6c94f3e6d483b53415b7a2162c4a9f651fad7c", "committedDate": "2020-09-22T13:49:35Z", "message": "throwing exception when failing to parse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b969f2bd860b74caff6bbf11b9eb19e3f4651ae9", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/b969f2bd860b74caff6bbf11b9eb19e3f4651ae9", "committedDate": "2020-09-22T15:03:06Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0684e584eb812fe76e2eb8427ac0b323b43ff83d", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/0684e584eb812fe76e2eb8427ac0b323b43ff83d", "committedDate": "2020-09-23T09:34:18Z", "message": "test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91d4721754e7d0111ba1a3731bb0170b52fe8cb", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/b91d4721754e7d0111ba1a3731bb0170b52fe8cb", "committedDate": "2020-09-23T12:16:03Z", "message": "*/* header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9edc49f64ad91799628068bd80abc8706ebc86c4", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/9edc49f64ad91799628068bd80abc8706ebc86c4", "committedDate": "2020-09-23T12:43:58Z", "message": "catch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d816693e18003a9b78246cb3ed2e3efc0be3be", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/c5d816693e18003a9b78246cb3ed2e3efc0be3be", "committedDate": "2020-09-23T17:48:43Z", "message": "hacks around text/plain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad673b64ddd1a2bbe01823084515af5706d46c4e", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ad673b64ddd1a2bbe01823084515af5706d46c4e", "committedDate": "2020-09-23T17:53:13Z", "message": "sout remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae6a609a9b6ed0826ac5bb1847f431e5e56190e", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ae6a609a9b6ed0826ac5bb1847f431e5e56190e", "committedDate": "2020-09-23T18:12:03Z", "message": "precommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae63c69122b0deec888afa0f236cfb579472eeb", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ae63c69122b0deec888afa0f236cfb579472eeb", "committedDate": "2020-09-24T06:28:56Z", "message": "fix nullpointer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee1e5a0459d7228c53369928516d0e9acb1e2e2f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ee1e5a0459d7228c53369928516d0e9acb1e2e2f", "committedDate": "2020-09-24T07:23:53Z", "message": "fix yml test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2", "committedDate": "2020-09-24T07:51:37Z", "message": "fix yml test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzYwNTEy", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-495360512", "createdAt": "2020-09-24T08:57:27Z", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1NzoyN1rOHXQosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1NzoyN1rOHXQosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1MTg1Nw==", "bodyText": "an exception is thrown when parsing so we would not need thisif", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494151857", "createdAt": "2020-09-24T08:57:27Z", "author": {"login": "pgomulka"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "diffHunk": "@@ -1900,9 +1900,9 @@ protected final ElasticsearchStatusException parseResponseException(ResponseExce\n             throw new IllegalStateException(\"Elasticsearch didn't return the [Content-Type] header, unable to parse response body\");\n         }\n         XContentType xContentType = XContentType.fromMediaType(entity.getContentType().getValue());\n-        if (xContentType == null) {\n-            throw new IllegalStateException(\"Unsupported Content-Type: \" + entity.getContentType().getValue());\n-        }\n+//        if (xContentType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzcxNzkx", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-495371791", "createdAt": "2020-09-24T09:11:24Z", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxMToyNFrOHXRKrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxMToyNFrOHXRKrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MDU1Ng==", "bodyText": "when parsing returns a supertype to TextFormat and XContentType - MediaType -  it makes it harder to implement these two branches.\ni think we should probably move the formatting behaviour out of TextFormat. It should only implement methods defined on MediaType (the original XContentType methods)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494160556", "createdAt": "2020-09-24T09:11:24Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -107,16 +61,16 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n                 RestResponse restResponse;\n \n                 // XContent branch\n-                if (xContentType != null) {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), xContentType, true);\n+                if (responseMediaType != null && responseMediaType instanceof XContentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Mzc1MTY1", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-495375165", "createdAt": "2020-09-24T09:15:43Z", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxNTo0M1rOHXRVCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxNTo0M1rOHXRVCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MzIwOQ==", "bodyText": "I made a comment to suggest we get rid of using Content-Type to set responseType. However I think most sql queries contain a body, so using a Content-Type to default responseType might be ok.\nIf however a request did not contain a body, then it would not make sense. I don't know we have any SQL api though.\nHowever, this obviously means that only json/cbor/smile/yml are allowed .", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494163209", "createdAt": "2020-09-24T09:15:43Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n+        }\n+        if (request.getHeaders().containsKey(\"Accept\")) {\n+            String accept = request.header(\"Accept\");\n+            // */* means \"I don't care\" which we should treat like not specifying the header\n+            if (\"*/*\".equals(accept) == false) {\n+                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n+            }\n+        }\n+\n+        //todo pg we should probably remove this possibility. it should only be accept or format.\n+        // also if you specify sql's textformat in content type it will fail with exception now\n+        String contentType = request.header(\"Content-Type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Mzc2MDIw", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-495376020", "createdAt": "2020-09-24T09:16:45Z", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxNjo0NVrOHXRXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxNjo0NVrOHXRXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2Mzg2NA==", "bodyText": "this client does not have access to SQL code, but has to support these formats too.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494163864", "createdAt": "2020-09-24T09:16:45Z", "author": {"login": "pgomulka"}, "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java", "diffHunk": "@@ -45,15 +45,21 @@\n \n     private final Response response;\n     private final byte[] body;\n-    private final XContentType bodyContentType;\n+    private XContentType bodyContentType;\n     private ObjectPath parsedResponse;\n     private String bodyAsString;\n \n     public ClientYamlTestResponse(Response response) throws IOException {\n         this.response = response;\n         if (response.getEntity() != null) {\n             String contentType = response.getHeader(\"Content-Type\");\n-            this.bodyContentType = XContentType.fromMediaType(contentType);\n+            // todo pg it feels like there is a lot of 'ifs' around text, csv etc being returned. shouldn't we treat text as the same json and others?\n+            // we are testing sql formats with this client, but don't have access to sql parsing code\n+            try{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Mzc3MjU3", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-495377257", "createdAt": "2020-09-24T09:18:19Z", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxODoyMFrOHXRbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxODoyMFrOHXRbGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2NDc2MQ==", "bodyText": "since parsing is strict and throws an exception when unkown type is used then it requires a lot of \"if guards\" to make sure it will not fail.\nOr it leads to flow being controlled by exceptions -which is bad I think.\nAlso looks to me that text/plain is commonly used as returnType for _cat api. We should probably add it to xcontentType?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494164761", "createdAt": "2020-09-24T09:18:20Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -98,10 +101,17 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n-            responseContentType = XContentType.fromFormat(format);\n-            if (responseContentType == null) {\n-                responseContentType = XContentType.fromMediaType(acceptHeader);\n+            if (Strings.hasText(format)) {\n+                responseContentType = XContentType.fromFormat(format);\n+            } else if (Strings.hasText(acceptHeader) && acceptHeader.equals(\"*/*\") == false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzkwOTgw", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-495390980", "createdAt": "2020-09-24T09:35:39Z", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNTozOVrOHXSE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNTozOVrOHXSE1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NTQ0NA==", "bodyText": "should this be renamed to acceptType?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494175444", "createdAt": "2020-09-24T09:35:39Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/BytesRestResponse.java", "diffHunk": "@@ -83,6 +83,7 @@ public BytesRestResponse(RestStatus status, String contentType, byte[] content)\n     /**\n      * Creates a binary response.\n      */\n+    //todo pg this should probably be acceptType? (2nd param)\n     public BytesRestResponse(RestStatus status, String contentType, BytesReference content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzkyMzYx", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-495392361", "createdAt": "2020-09-24T09:37:23Z", "commit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNzoyNFrOHXSI_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNzoyNFrOHXSI_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NjUwOA==", "bodyText": "this prevents defaulting Accept header to text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 by sun.net.www.protocol.http.HttpURLConnection", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494176508", "createdAt": "2020-09-24T09:37:24Z", "author": {"login": "pgomulka"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/http/WaitForHttpResource.java", "diffHunk": "@@ -145,6 +145,7 @@ HttpURLConnection buildConnection(SSLContext ssl) throws IOException {\n         configureSslContext(connection, ssl);\n         configureBasicAuth(connection);\n         connection.setRequestMethod(\"GET\");\n+        connection.setRequestProperty(\"Accept\", \"text/plain; charset=UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4dee1126974d0cf66d63eaf62564b8c3d9f032", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/bd4dee1126974d0cf66d63eaf62564b8c3d9f032", "committedDate": "2020-09-24T10:25:09Z", "message": "throwing exception when failing to parse\n\ncheckstyle\n\ntest fixes\n\n*/* header\n\ncatch\n\nhacks around text/plain\n\nsout remove\n\nprecommit\n\nfix nullpointer\n\nfix yml test\n\nfix yml test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce42f1bd933ef7823b11258d1b3c5f5efa88fcbc", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ce42f1bd933ef7823b11258d1b3c5f5efa88fcbc", "committedDate": "2020-09-24T16:41:34Z", "message": "Revert \"throwing exception when failing to parse\"\n\nThis reverts commit bd4dee1126974d0cf66d63eaf62564b8c3d9f032."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f8ae7b50485a8ca201f235d15ba3a0fe77c15bf", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/0f8ae7b50485a8ca201f235d15ba3a0fe77c15bf", "committedDate": "2020-09-24T16:48:40Z", "message": "Merge branch 'revert_strict_header_parsing' into compat/content-type-header-with-version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4f02ade240cd69c6966d0082800c8cc5ba69854", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/c4f02ade240cd69c6966d0082800c8cc5ba69854", "committedDate": "2020-09-28T07:27:51Z", "message": "import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "176302efd7687f267a211337d6c5632bc44d3085", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/176302efd7687f267a211337d6c5632bc44d3085", "committedDate": "2020-09-28T07:57:09Z", "message": "fix storing response time in sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eab471c5ebd45f8ab008bdf1f3272cd091bae2b7", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/eab471c5ebd45f8ab008bdf1f3272cd091bae2b7", "committedDate": "2020-09-28T09:34:40Z", "message": "return null on errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e128fd78e363cb027ccf7a41018cb9e965fcc801", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/e128fd78e363cb027ccf7a41018cb9e965fcc801", "committedDate": "2020-09-28T10:16:37Z", "message": "sqlmedia type parsing test - do not throw exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66435dd9c9bf07f1457344b9e6772d65ac4a4afc", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/66435dd9c9bf07f1457344b9e6772d65ac4a4afc", "committedDate": "2020-09-28T12:45:26Z", "message": "remove todoes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/08f1395ce1f1014d06cefaff9f2722945f761e75", "committedDate": "2020-09-28T16:30:07Z", "message": "rename argument"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NTU2MTU5", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-498556159", "createdAt": "2020-09-29T14:49:59Z", "commit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDo0OTo1OVrOHZxKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTo0NTowOFrOHZ0P4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc4MTgyOQ==", "bodyText": "remove todo", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496781829", "createdAt": "2020-09-29T14:49:59Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -65,8 +50,10 @@ public T fromFormat(String format) {\n \n     /**\n      * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     *\n      * @param headerValue a header value from Accept or Content-Type\n      * @return a parsed media-type\n+     * //todo pg write a benchmark and consider using a regex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5MjIzNw==", "bodyText": "I think this is technically non-passive (only supporting UTF-8 encoding) and should probably be mentioned in the breaking changes ... thus only targeting 8.0 and (outside of this PR) ensure that a 7.x server maps the compatible header to standard header ... i.e. (application/vnd.elasticsearch+yaml; compatible-with=7 == application/yaml)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496792237", "createdAt": "2020-09-29T15:02:48Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -113,9 +115,26 @@ public XContent xContent() {\n         }\n     };\n \n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"\\\\d+\");\n+    private static final String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n+     public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwODQwNA==", "bodyText": "Can you also add a small test for (lowercase charset=utf-8)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496808404", "createdAt": "2020-09-29T15:22:44Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -23,6 +23,7 @@\n import java.util.Locale;\n \n import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.nullValue;\n \n public class XContentTypeTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxNTgwOQ==", "bodyText": "can you remove the insensitive recompile here and and just use the pattern as-is (and move the insenstivie up to the declration)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496815809", "createdAt": "2020-09-29T15:29:42Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,37 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatToMediaType = new HashMap<>();\n+        private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, Pattern> paramNameAndValueRegex) {\n+            typeWithSubtypeToMediaType.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+\n+            Map<String, Pattern> parametersForMediaType = new HashMap<>(paramNameAndValueRegex.size());\n+            for (Map.Entry<String, Pattern> params : paramNameAndValueRegex.entrySet()) {\n+                String parameterName = params.getKey().toLowerCase(Locale.ROOT);\n+                Pattern parameterRegex = params.getValue();\n+                Pattern pattern = Pattern.compile(parameterRegex.pattern(), Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMjQ4MA==", "bodyText": "can you also add a test that has both compatible-with and charset ?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496832480", "createdAt": "2020-09-29T15:45:08Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,65 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3f0d55628bc05dd679ac6dd0f333446cd6093c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/3f3f0d55628bc05dd679ac6dd0f333446cd6093c", "committedDate": "2020-09-29T18:04:50Z", "message": "review follow up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "427c3913e197afecb821f36f29adbf8a298e2055", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/427c3913e197afecb821f36f29adbf8a298e2055", "committedDate": "2020-09-30T07:07:59Z", "message": "remove pattern from signature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0316054c4a9559ddc5b115b9b5b72999c701649", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/e0316054c4a9559ddc5b115b9b5b72999c701649", "committedDate": "2020-09-30T08:01:26Z", "message": "fix regex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDcxODQ5", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-499471849", "createdAt": "2020-09-30T14:09:11Z", "commit": {"oid": "e0316054c4a9559ddc5b115b9b5b72999c701649"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTE1MTk1", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-500515195", "createdAt": "2020-10-01T16:20:19Z", "commit": {"oid": "e0316054c4a9559ddc5b115b9b5b72999c701649"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMDoxOVrOHbR9fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMDo1NFrOHbR-_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Nzg2OA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                XContentType type = (XContentType)responseMediaType;\n          \n          \n            \n                                XContentType type = (XContentType) responseMediaType;", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498367868", "createdAt": "2020-10-01T16:20:19Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -107,16 +61,16 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n                 RestResponse restResponse;\n \n                 // XContent branch\n-                if (xContentType != null) {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), xContentType, true);\n+                if (responseMediaType != null && responseMediaType instanceof XContentType) {\n+                    XContentType type = (XContentType)responseMediaType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0316054c4a9559ddc5b115b9b5b72999c701649"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2ODI1Mw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } else {// TextFormat\n          \n          \n            \n                            } else { // TextFormat", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498368253", "createdAt": "2020-10-01T16:20:54Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -107,16 +61,16 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n                 RestResponse restResponse;\n \n                 // XContent branch\n-                if (xContentType != null) {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), xContentType, true);\n+                if (responseMediaType != null && responseMediaType instanceof XContentType) {\n+                    XContentType type = (XContentType)responseMediaType;\n+                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), type, true);\n                     response.toXContent(builder, request);\n                     restResponse = new BytesRestResponse(RestStatus.OK, builder);\n-                }\n-                // TextFormat\n-                else {\n-                    final String data = textFormat.format(request, response);\n+                } else {// TextFormat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0316054c4a9559ddc5b115b9b5b72999c701649"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/4134d92ef9ea93c205746bc2f5031ee40c1d579e", "committedDate": "2020-10-02T06:24:26Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjE1ODI0", "url": "https://github.com/elastic/elasticsearch/pull/61427#pullrequestreview-501215824", "createdAt": "2020-10-02T15:04:40Z", "commit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNDo0MFrOHbxKHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1Nzo0OVrOHbzBdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3OTAwNg==", "bodyText": "Is the delimiter regex derived from TextFormat.CSV#delimiter()? Because it specifies what characters are allowed, inline with what that method checks, on one hand, but allows a count of multiple character, out of line with a check there, on the other.\nThe exception messages in the method are explanatory and I'd ever so slightly prefer to return those (and maybe don't enforce a specific set here), but if you'd still like to enforce the param format in the parser definition, I'd suggest to maybe also limit the char count to one.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498879006", "createdAt": "2020-10-02T15:04:40Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MjMzNg==", "bodyText": "nit, spacing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (request.hasParam(URL_PARAM_FORMAT)){\n          \n          \n            \n                        return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n          \n          \n            \n                    } else if (request.hasParam(URL_PARAM_FORMAT)) {\n          \n          \n            \n                        return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat(request.param(URL_PARAM_FORMAT)));", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498882336", "createdAt": "2020-10-02T15:10:09Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4ODM1MA==", "bodyText": "optional, could be made static.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498888350", "createdAt": "2020-10-02T15:20:22Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n+        }\n+        if (request.getHeaders().containsKey(\"Accept\")) {\n+            String accept = request.header(\"Accept\");\n+            // */* means \"I don't care\" which we should treat like not specifying the header\n+            if (\"*/*\".equals(accept) == false) {\n+                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n+            }\n+        }\n+\n+        String contentType = request.header(\"Content-Type\");\n+        assert contentType != null : \"The Content-Type header is required\";\n+        return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(contentType));\n+    }\n+\n+    private MediaType validateColumnarRequest(boolean requestIsColumnar, MediaType fromMediaType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5Mzc4Mg==", "bodyText": "I think most sql queries contain a body\n\nIndeed, all requests concerning this code always contain a body.\n(In the SQL API only one API lacks it, the one for stats inquiring, which won't hit this code tho.)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498893782", "createdAt": "2020-10-02T15:29:35Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n+        }\n+        if (request.getHeaders().containsKey(\"Accept\")) {\n+            String accept = request.header(\"Accept\");\n+            // */* means \"I don't care\" which we should treat like not specifying the header\n+            if (\"*/*\".equals(accept) == false) {\n+                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n+            }\n+        }\n+\n+        //todo pg we should probably remove this possibility. it should only be accept or format.\n+        // also if you specify sql's textformat in content type it will fail with exception now\n+        String contentType = request.header(\"Content-Type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MzIwOQ=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwOTU1Ng==", "bodyText": "Since the methods only tests media type correct detection - i.e. the other parameters in the Accept aren't analysed by SqlMediaTypeParser, nor tested here, right? -, I would maybe propose to rename it (testMediaTypeDetection or similar?).\n(Slightly off-topic, the header parameter will need a rework or removal, as per #60271, but that's not the object of this PR).", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498909556", "createdAt": "2020-10-02T15:57:49Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParserTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+import org.elasticsearch.xpack.sql.proto.RequestInfo;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.plugin.TextFormat.CSV;\n+import static org.elasticsearch.xpack.sql.plugin.TextFormat.PLAIN_TEXT;\n+import static org.elasticsearch.xpack.sql.plugin.TextFormat.TSV;\n+import static org.elasticsearch.xpack.sql.proto.RequestInfo.CLIENT_IDS;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+\n+public class SqlMediaTypeParserTests extends ESTestCase {\n+    SqlMediaTypeParser parser = new SqlMediaTypeParser();\n+\n+    public void testPlainTextDetection() {\n+        MediaType text = parser.getMediaType(reqWithAccept(\"text/plain\"), createTestInstance(false, Mode.PLAIN, false));\n+        assertThat(text, is(PLAIN_TEXT));\n+    }\n+\n+    public void testCsvDetection() {\n+        MediaType text = parser.getMediaType(reqWithAccept(\"text/csv\"), createTestInstance(false, Mode.PLAIN, false));\n+        assertThat(text, is(CSV));\n+    }\n+\n+    public void testTsvDetection() {\n+        MediaType text = parser.getMediaType(reqWithAccept(\"text/tab-separated-values\"), createTestInstance(false, Mode.PLAIN, false));\n+        assertThat(text, is(TSV));\n+    }\n+\n+    public void testParametersParsing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a976f5b53d024edf45b5e583130f53f65184ffd9", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/a976f5b53d024edf45b5e583130f53f65184ffd9", "committedDate": "2020-10-05T09:11:33Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Bogdan Pintea <bpintea@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e0eec01383a9cbb7ec2f5e858149a93848ae8d6", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/3e0eec01383a9cbb7ec2f5e858149a93848ae8d6", "committedDate": "2020-10-05T12:09:59Z", "message": "relax delimiter validation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4638, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}