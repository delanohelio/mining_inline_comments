{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDI5MDgx", "number": 53725, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo0NToyNlrODpHbRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1NDozMFrODpcDEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDM5ODc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo0NToyNlrOF4FmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTowNzo1MFrOF4ljwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NjIzMA==", "bodyText": "Could this be final and passed in the constructor?", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394356230", "createdAt": "2020-03-18T13:45:26Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java", "diffHunk": "@@ -37,12 +38,12 @@\n     private final String analyticsId;\n     private final DataFrameDataExtractor dataExtractor;\n     private final ResultsPersisterService resultsPersisterService;\n+    private Supplier<Boolean> shouldRetryPersistence = () -> true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a18beca31436dfca40b79448c23fc9f81a81a9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQyNjIzNg==", "bodyText": "Since the retry persistence logic depends on information stored within AnalyticsResultProcessor we would either have to make a Builder or a Factory class that we then pass to AnalyticsResultProcessor which constructs a new joiner from that passed factory.\nThis option just seemed simpler and less complex.", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394426236", "createdAt": "2020-03-18T15:17:49Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java", "diffHunk": "@@ -37,12 +38,12 @@\n     private final String analyticsId;\n     private final DataFrameDataExtractor dataExtractor;\n     private final ResultsPersisterService resultsPersisterService;\n+    private Supplier<Boolean> shouldRetryPersistence = () -> true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NjIzMA=="}, "originalCommit": {"oid": "93a18beca31436dfca40b79448c23fc9f81a81a9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3OTkzNg==", "bodyText": "Ok, got it. Please also consider the following approach which might be even less complex:\nAdd isCancelled field and cancel() method to DataFrameRowsJoiner class. In AnalyticsResultProcessor::cancel(), you can also cancel the joiner:\n    public void cancel() {\n        isCancelled = true;\n        dataFrameRowsJoiner.cancel();\n    }\n\nThen there is no need to pass the Supplier as you've already passed the actual isCancelled value.", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394879936", "createdAt": "2020-03-19T09:07:50Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java", "diffHunk": "@@ -37,12 +38,12 @@\n     private final String analyticsId;\n     private final DataFrameDataExtractor dataExtractor;\n     private final ResultsPersisterService resultsPersisterService;\n+    private Supplier<Boolean> shouldRetryPersistence = () -> true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NjIzMA=="}, "originalCommit": {"oid": "93a18beca31436dfca40b79448c23fc9f81a81a9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQzMDI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1Mjo0MFrOF4F6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1Mjo0MFrOF4F6aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MTQ0OA==", "bodyText": "Could you make this message consistent with others? \"...failure that cannot be...\"", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394361448", "createdAt": "2020-03-18T13:52:40Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -148,12 +180,28 @@ public SearchResponse searchWithRetry(SearchRequest searchRequest,\n             } catch (ElasticsearchException e) {\n                 LOGGER.warn(\"[\" + jobId + \"] Exception while executing search action\", e);\n                 failureMessage = e.getDetailedMessage();\n+                if (isIrrecoverable(e)) {\n+                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced irrecoverable failure\", jobId), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15da5b2c0031d75b747cfce7d526e899cb6301a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQzODg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1NDozN1rOF4GADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1NDozN1rOF4GADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2Mjg5Mw==", "bodyText": "Should this be \"private\"?", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394362893", "createdAt": "2020-03-18T13:54:37Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -148,12 +180,28 @@ public SearchResponse searchWithRetry(SearchRequest searchRequest,\n             } catch (ElasticsearchException e) {\n                 LOGGER.warn(\"[\" + jobId + \"] Exception while executing search action\", e);\n                 failureMessage = e.getDetailedMessage();\n+                if (isIrrecoverable(e)) {\n+                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced irrecoverable failure\", jobId), e);\n+                    throw new ElasticsearchException(\"{} experienced failure that cannot be automatically retried\", e, jobId);\n+                }\n             }\n \n             retryContext.nextIteration(\"search\", failureMessage);\n         }\n     }\n \n+    /**\n+     * @param ex The exception to check\n+     * @return true when the failure will persist no matter how many times we retry.\n+     */\n+    static boolean isIrrecoverable(Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15da5b2c0031d75b747cfce7d526e899cb6301a"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ0MTY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1NToxOVrOF4GCAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1NToxOVrOF4GCAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MzM5NA==", "bodyText": "I think times(1) is default and you can drop it.", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394363394", "createdAt": "2020-03-18T13:55:19Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterServiceTests.java", "diffHunk": "@@ -206,6 +210,21 @@ public void testSearchWithRetries_Failure_ShouldNotRetryAfterRandomNumberOfRetri\n         verify(client, times(maxRetries + 1)).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());\n     }\n \n+    public void testSearchWithRetries_FailureOnIrrecoverableError() {\n+        resultsPersisterService.setMaxFailureRetries(5);\n+\n+        doAnswer(withFailure(new ElasticsearchStatusException(\"bad search request\", RestStatus.BAD_REQUEST)))\n+            .when(client).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());\n+\n+        ElasticsearchException e =\n+            expectThrows(\n+                ElasticsearchException.class,\n+                () -> resultsPersisterService.searchWithRetry(SEARCH_REQUEST, JOB_ID, () -> true, (s) -> {}));\n+        assertThat(e.getMessage(), containsString(\"experienced failure that cannot be automatically retried\"));\n+\n+        verify(client, times(1)).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15da5b2c0031d75b747cfce7d526e899cb6301a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Nzc3NzQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1NDozMFrOF4nNRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1NDozMFrOF4nNRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNjk0OA==", "bodyText": "nit: since the name is in capitals it should be immutable, i.e. Set.of() or Collections.unmodifiableSet().", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394906948", "createdAt": "2020-03-19T09:54:30Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -42,6 +44,22 @@\n import java.util.stream.Collectors;\n \n public class ResultsPersisterService {\n+    /**\n+     * List of rest statuses that we consider irrecoverable\n+     */\n+    public static final Set<RestStatus> IRRECOVERABLE_REST_STATUSES = new HashSet<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06934f2e999cdeff1f199def03dda563de231ee6"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4327, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}