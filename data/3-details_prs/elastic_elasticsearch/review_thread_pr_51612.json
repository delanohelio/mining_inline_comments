{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTQ2NDA3", "number": 51612, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzowOToyNlrODbkKHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzowOToyNlrODbkKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjMwNTU4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/transport/TcpTransportTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzowOToyN1rOFjHxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzoxOTo0N1rOFjIEBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTc2MA==", "bodyText": "NIT: Maybe use org.elasticsearch.threadpool.ThreadPool#terminate(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit) here so we don't get the leaked thread warning when running this one?", "url": "https://github.com/elastic/elasticsearch/pull/51612#discussion_r372371760", "createdAt": "2020-01-29T13:09:27Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/transport/TcpTransportTests.java", "diffHunk": "@@ -354,4 +366,101 @@ public void testHTTPResponse() throws IOException {\n                     \"(not HTTP port) of a remote node is specified in the configuration\", ex.getMessage());\n         }\n     }\n+\n+    @TestLogging(reason = \"testing logging\", value = \"org.elasticsearch.transport.TcpTransport:DEBUG\")\n+    public void testExceptionHandling() throws IOException, IllegalAccessException {\n+        testExceptionHandling(false, new ElasticsearchException(\"simulated\"), true,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new ElasticsearchException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"exception caught on transport layer [*], closing connection\"));\n+        testExceptionHandling(new ClosedChannelException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new ElasticsearchException(\"Connection reset\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new BindException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"bind exception caught on transport layer [*]\"));\n+        testExceptionHandling(new CancelledKeyException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"cancelled key exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(true, new TcpTransport.HttpRequestOnTransportException(\"test\"), false,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new StreamCorruptedException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"simulated, [*], closing connection\"));\n+    }\n+\n+    private void testExceptionHandling(Exception exception,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        testExceptionHandling(true, exception, true, expectations);\n+    }\n+\n+    private void testExceptionHandling(boolean startTransport, Exception exception, boolean expectClosed,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        final TestThreadPool testThreadPool = new TestThreadPool(\"test\");\n+        TcpTransport tcpTransport = null;\n+        MockLogAppender appender = new MockLogAppender();\n+\n+        try {\n+            appender.start();\n+\n+            Loggers.addAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            for (MockLogAppender.LoggingExpectation expectation : expectations) {\n+                appender.addExpectation(expectation);\n+            }\n+\n+            tcpTransport = new TcpTransport(Settings.EMPTY, Version.CURRENT, testThreadPool,\n+                new MockPageCacheRecycler(Settings.EMPTY),\n+                new NoneCircuitBreakerService(), writableRegistry(), new NetworkService(Collections.emptyList())) {\n+\n+                @Override\n+                protected TcpServerChannel bind(String name, InetSocketAddress address) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected TcpChannel initiateChannel(DiscoveryNode node) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected void stopInternal() {\n+                }\n+            };\n+\n+            if (startTransport) {\n+                tcpTransport.start();\n+            }\n+\n+            final FakeTcpChannel channel = new FakeTcpChannel();\n+            final PlainActionFuture<Void> listener = new PlainActionFuture<>();\n+            channel.addCloseListener(listener);\n+\n+            tcpTransport.onException(channel, exception);\n+\n+            if (expectClosed) {\n+                assertTrue(listener.isDone());\n+                assertThat(listener.actionGet(), nullValue());\n+            } else {\n+                assertFalse(listener.isDone());\n+            }\n+\n+            appender.assertAllExpectationsMatched();\n+\n+        } finally {\n+            Loggers.removeAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            appender.stop();\n+            IOUtils.close(tcpTransport);\n+            testThreadPool.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec90e5c87ca751236898ba3ff96d49fd722c0f9"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NjU4Mg==", "bodyText": "TIL. Yes, done in f0e813b.", "url": "https://github.com/elastic/elasticsearch/pull/51612#discussion_r372376582", "createdAt": "2020-01-29T13:19:47Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/transport/TcpTransportTests.java", "diffHunk": "@@ -354,4 +366,101 @@ public void testHTTPResponse() throws IOException {\n                     \"(not HTTP port) of a remote node is specified in the configuration\", ex.getMessage());\n         }\n     }\n+\n+    @TestLogging(reason = \"testing logging\", value = \"org.elasticsearch.transport.TcpTransport:DEBUG\")\n+    public void testExceptionHandling() throws IOException, IllegalAccessException {\n+        testExceptionHandling(false, new ElasticsearchException(\"simulated\"), true,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new ElasticsearchException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"exception caught on transport layer [*], closing connection\"));\n+        testExceptionHandling(new ClosedChannelException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new ElasticsearchException(\"Connection reset\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new BindException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"bind exception caught on transport layer [*]\"));\n+        testExceptionHandling(new CancelledKeyException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"cancelled key exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(true, new TcpTransport.HttpRequestOnTransportException(\"test\"), false,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new StreamCorruptedException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"simulated, [*], closing connection\"));\n+    }\n+\n+    private void testExceptionHandling(Exception exception,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        testExceptionHandling(true, exception, true, expectations);\n+    }\n+\n+    private void testExceptionHandling(boolean startTransport, Exception exception, boolean expectClosed,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        final TestThreadPool testThreadPool = new TestThreadPool(\"test\");\n+        TcpTransport tcpTransport = null;\n+        MockLogAppender appender = new MockLogAppender();\n+\n+        try {\n+            appender.start();\n+\n+            Loggers.addAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            for (MockLogAppender.LoggingExpectation expectation : expectations) {\n+                appender.addExpectation(expectation);\n+            }\n+\n+            tcpTransport = new TcpTransport(Settings.EMPTY, Version.CURRENT, testThreadPool,\n+                new MockPageCacheRecycler(Settings.EMPTY),\n+                new NoneCircuitBreakerService(), writableRegistry(), new NetworkService(Collections.emptyList())) {\n+\n+                @Override\n+                protected TcpServerChannel bind(String name, InetSocketAddress address) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected TcpChannel initiateChannel(DiscoveryNode node) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected void stopInternal() {\n+                }\n+            };\n+\n+            if (startTransport) {\n+                tcpTransport.start();\n+            }\n+\n+            final FakeTcpChannel channel = new FakeTcpChannel();\n+            final PlainActionFuture<Void> listener = new PlainActionFuture<>();\n+            channel.addCloseListener(listener);\n+\n+            tcpTransport.onException(channel, exception);\n+\n+            if (expectClosed) {\n+                assertTrue(listener.isDone());\n+                assertThat(listener.actionGet(), nullValue());\n+            } else {\n+                assertFalse(listener.isDone());\n+            }\n+\n+            appender.assertAllExpectationsMatched();\n+\n+        } finally {\n+            Loggers.removeAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            appender.stop();\n+            IOUtils.close(tcpTransport);\n+            testThreadPool.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTc2MA=="}, "originalCommit": {"oid": "6ec90e5c87ca751236898ba3ff96d49fd722c0f9"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 99, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}