{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDU3NDg4", "number": 52612, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo1OTowMlrODibBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo0NzozNVrODigV3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDIwOTExOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/MemberFieldStoreNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo1OTowMlrOFtqPEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzozMjo1OFrOFtzryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMjIyNA==", "bodyText": "minimal javadoc please", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383422224", "createdAt": "2020-02-24T17:59:02Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/MemberFieldStoreNode.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.symbol.ScopeTable;\n+\n+import static org.elasticsearch.painless.WriterConstants.CLASS_TYPE;\n+\n+public class MemberFieldStoreNode extends UnaryNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3NzAzNQ==", "bodyText": "Added.", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383577035", "createdAt": "2020-02-24T23:32:58Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/MemberFieldStoreNode.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.symbol.ScopeTable;\n+\n+import static org.elasticsearch.painless.WriterConstants.CLASS_TYPE;\n+\n+public class MemberFieldStoreNode extends UnaryNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMjIyNA=="}, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI1MDkyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SExpression.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxMjozOFrOFtqo2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzozNDo1OVrOFtzuRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyODgyNg==", "bodyText": "Why is this necessary?", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383428826", "createdAt": "2020-02-24T18:12:38Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SExpression.java", "diffHunk": "@@ -72,6 +72,7 @@ StatementExpressionNode write(ClassNode classNode) {\n \n         statementExpressionNode.setLocation(location);\n         statementExpressionNode.setMethodEscape(methodEscape);\n+        statementExpressionNode.setNoop(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MTEwNA==", "bodyText": "After speaking with you (@stu-elastic) and @rjernst I've decided to change this a bit. I've removed noop in favor of doPop which will pop extraneous values off the stack when necessary such as a method call with side effects, but an ignored return value somecall();.\nI also removed the need for StatementExpressionNode to handle return values. Instead, SExpression will just directly translate to a ReturnNode if a return is required. This moves the responsibility to where is makes sense instead of having redundant returns in multiple nodes.", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383541104", "createdAt": "2020-02-24T22:01:35Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SExpression.java", "diffHunk": "@@ -72,6 +72,7 @@ StatementExpressionNode write(ClassNode classNode) {\n \n         statementExpressionNode.setLocation(location);\n         statementExpressionNode.setMethodEscape(methodEscape);\n+        statementExpressionNode.setNoop(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyODgyNg=="}, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3NzY3MQ==", "bodyText": "I continued to iterate on this after more discussion with @rjernst . I removed the doPop and will instead use an expression's type to determine if a pop is required or not (popping the void type is the same as a noop in this case).", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383577671", "createdAt": "2020-02-24T23:34:59Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SExpression.java", "diffHunk": "@@ -72,6 +72,7 @@ StatementExpressionNode write(ClassNode classNode) {\n \n         statementExpressionNode.setLocation(location);\n         statementExpressionNode.setMethodEscape(methodEscape);\n+        statementExpressionNode.setNoop(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyODgyNg=="}, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMyMjc4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/MemberFieldLoadNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozNToyNlrOFtrU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjowMjo1N1rOFtxhmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MDA5NQ==", "bodyText": "There's now MemberFieldLoadNode and MemberFieldStoreNode where Store has the following new code:\n        if (isStatic == false) {\n            methodWriter.loadThis();\n        }\n\n        getChildNode().write(classWriter, methodWriter, scopeTable);\nWhy the new code?", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383440095", "createdAt": "2020-02-24T18:35:26Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/MemberFieldLoadNode.java", "diffHunk": "@@ -51,12 +50,8 @@ public boolean isStatic() {\n \n     /* ---- end node data ---- */\n \n-    public MemberFieldNode() {\n-        // do nothing\n-    }\n-\n     @Override\n-    public void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals, ScopeTable scopeTable) {\n+    public void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MTY1OQ==", "bodyText": "The new code is to handle putting the value on the stack that will be written to the field. So store requires an expression to generate a value to store where as load does not.", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383541659", "createdAt": "2020-02-24T22:02:57Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/MemberFieldLoadNode.java", "diffHunk": "@@ -51,12 +50,8 @@ public boolean isStatic() {\n \n     /* ---- end node data ---- */\n \n-    public MemberFieldNode() {\n-        // do nothing\n-    }\n-\n     @Override\n-    public void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals, ScopeTable scopeTable) {\n+    public void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MDA5NQ=="}, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM0NjkwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ERegex.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0Mjo0NFrOFtrjeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjowOTowM1rOFtxrmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MzgzMw==", "bodyText": "Where is this being written to clinit?", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383443833", "createdAt": "2020-02-24T18:42:44Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ERegex.java", "diffHunk": "@@ -74,30 +81,90 @@ void analyze(ScriptRoot scriptRoot, Scope scope) {\n                     new IllegalArgumentException(\"Error compiling regex: \" + e.getDescription()));\n         }\n \n-        String name = scriptRoot.getNextSyntheticName(\"regex\");\n-        scriptRoot.getClassNode().addField(\n-                new SField(location, Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE, name, Pattern.class));\n-        constant = new Constant(location, MethodWriter.getType(Pattern.class), name, this::initializeConstant);\n+        name = scriptRoot.getNextSyntheticName(\"regex\");\n         actual = Pattern.class;\n     }\n \n     @Override\n-    RegexNode write(ClassNode classNode) {\n-        RegexNode regexNode = new RegexNode();\n-        regexNode.setLocation(location);\n+    MemberFieldLoadNode write(ClassNode classNode) {\n+        FieldNode fieldNode = new FieldNode();\n+        fieldNode.setLocation(location);\n+        fieldNode.setModifiers(Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE);\n+        fieldNode.setFieldType(Pattern.class);\n+        fieldNode.setName(name);\n \n-        regexNode.setExpressionType(actual);\n-        regexNode.setFlags(flags);\n-        regexNode.setPattern(pattern);\n-        regexNode.setConstant(constant);\n+        classNode.addFieldNode(fieldNode);\n \n-        return regexNode;\n-    }\n+        try {\n+            StatementExpressionNode statementExpressionNode = new StatementExpressionNode();\n+            statementExpressionNode.setLocation(location);\n+            statementExpressionNode.setMethodEscape(true);\n+            statementExpressionNode.setNoop(true);\n+\n+            BlockNode blockNode = classNode.getClinitNode().getBlockNode();\n+            blockNode.addStatementNode(statementExpressionNode);\n+\n+            MemberFieldStoreNode memberFieldStoreNode = new MemberFieldStoreNode();\n+            memberFieldStoreNode.setLocation(location);\n+            memberFieldStoreNode.setExpressionType(Pattern.class);\n+            memberFieldStoreNode.setName(name);\n+            memberFieldStoreNode.setStatic(true);\n+\n+            statementExpressionNode.setExpressionNode(memberFieldStoreNode);\n+\n+            CallNode callNode = new CallNode();\n+            callNode.setLocation(location);\n+            callNode.setExpressionType(Pattern.class);\n+\n+            memberFieldStoreNode.setChildNode(callNode);\n+\n+            StaticNode staticNode = new StaticNode();\n+            staticNode.setLocation(location);\n+            staticNode.setExpressionType(Pattern.class);\n+\n+            callNode.setLeftNode(staticNode);\n+\n+            CallSubNode callSubNode = new CallSubNode();\n+            callSubNode.setLocation(location);\n+            callSubNode.setExpressionType(Pattern.class);\n+            callSubNode.setBox(Pattern.class);\n+            callSubNode.setMethod(new PainlessMethod(\n+                    Pattern.class.getMethod(\"compile\", String.class, int.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0ODY3Nw==", "bodyText": "Oh perhaps in classNode.addFieldNode(fieldNode);?", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383448677", "createdAt": "2020-02-24T18:52:07Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ERegex.java", "diffHunk": "@@ -74,30 +81,90 @@ void analyze(ScriptRoot scriptRoot, Scope scope) {\n                     new IllegalArgumentException(\"Error compiling regex: \" + e.getDescription()));\n         }\n \n-        String name = scriptRoot.getNextSyntheticName(\"regex\");\n-        scriptRoot.getClassNode().addField(\n-                new SField(location, Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE, name, Pattern.class));\n-        constant = new Constant(location, MethodWriter.getType(Pattern.class), name, this::initializeConstant);\n+        name = scriptRoot.getNextSyntheticName(\"regex\");\n         actual = Pattern.class;\n     }\n \n     @Override\n-    RegexNode write(ClassNode classNode) {\n-        RegexNode regexNode = new RegexNode();\n-        regexNode.setLocation(location);\n+    MemberFieldLoadNode write(ClassNode classNode) {\n+        FieldNode fieldNode = new FieldNode();\n+        fieldNode.setLocation(location);\n+        fieldNode.setModifiers(Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE);\n+        fieldNode.setFieldType(Pattern.class);\n+        fieldNode.setName(name);\n \n-        regexNode.setExpressionType(actual);\n-        regexNode.setFlags(flags);\n-        regexNode.setPattern(pattern);\n-        regexNode.setConstant(constant);\n+        classNode.addFieldNode(fieldNode);\n \n-        return regexNode;\n-    }\n+        try {\n+            StatementExpressionNode statementExpressionNode = new StatementExpressionNode();\n+            statementExpressionNode.setLocation(location);\n+            statementExpressionNode.setMethodEscape(true);\n+            statementExpressionNode.setNoop(true);\n+\n+            BlockNode blockNode = classNode.getClinitNode().getBlockNode();\n+            blockNode.addStatementNode(statementExpressionNode);\n+\n+            MemberFieldStoreNode memberFieldStoreNode = new MemberFieldStoreNode();\n+            memberFieldStoreNode.setLocation(location);\n+            memberFieldStoreNode.setExpressionType(Pattern.class);\n+            memberFieldStoreNode.setName(name);\n+            memberFieldStoreNode.setStatic(true);\n+\n+            statementExpressionNode.setExpressionNode(memberFieldStoreNode);\n+\n+            CallNode callNode = new CallNode();\n+            callNode.setLocation(location);\n+            callNode.setExpressionType(Pattern.class);\n+\n+            memberFieldStoreNode.setChildNode(callNode);\n+\n+            StaticNode staticNode = new StaticNode();\n+            staticNode.setLocation(location);\n+            staticNode.setExpressionType(Pattern.class);\n+\n+            callNode.setLeftNode(staticNode);\n+\n+            CallSubNode callSubNode = new CallSubNode();\n+            callSubNode.setLocation(location);\n+            callSubNode.setExpressionType(Pattern.class);\n+            callSubNode.setBox(Pattern.class);\n+            callSubNode.setMethod(new PainlessMethod(\n+                    Pattern.class.getMethod(\"compile\", String.class, int.class),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MzgzMw=="}, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NDIxOA==", "bodyText": "classNode.addFieldNode creates a declaration for a member field.\nThese lines actually add the regex constant generation and assignment to the clinit method:\nBlockNode blockNode = classNode.getClinitNode().getBlockNode();\nblockNode.addStatementNode(statementExpressionNode);", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383544218", "createdAt": "2020-02-24T22:09:03Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ERegex.java", "diffHunk": "@@ -74,30 +81,90 @@ void analyze(ScriptRoot scriptRoot, Scope scope) {\n                     new IllegalArgumentException(\"Error compiling regex: \" + e.getDescription()));\n         }\n \n-        String name = scriptRoot.getNextSyntheticName(\"regex\");\n-        scriptRoot.getClassNode().addField(\n-                new SField(location, Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE, name, Pattern.class));\n-        constant = new Constant(location, MethodWriter.getType(Pattern.class), name, this::initializeConstant);\n+        name = scriptRoot.getNextSyntheticName(\"regex\");\n         actual = Pattern.class;\n     }\n \n     @Override\n-    RegexNode write(ClassNode classNode) {\n-        RegexNode regexNode = new RegexNode();\n-        regexNode.setLocation(location);\n+    MemberFieldLoadNode write(ClassNode classNode) {\n+        FieldNode fieldNode = new FieldNode();\n+        fieldNode.setLocation(location);\n+        fieldNode.setModifiers(Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE);\n+        fieldNode.setFieldType(Pattern.class);\n+        fieldNode.setName(name);\n \n-        regexNode.setExpressionType(actual);\n-        regexNode.setFlags(flags);\n-        regexNode.setPattern(pattern);\n-        regexNode.setConstant(constant);\n+        classNode.addFieldNode(fieldNode);\n \n-        return regexNode;\n-    }\n+        try {\n+            StatementExpressionNode statementExpressionNode = new StatementExpressionNode();\n+            statementExpressionNode.setLocation(location);\n+            statementExpressionNode.setMethodEscape(true);\n+            statementExpressionNode.setNoop(true);\n+\n+            BlockNode blockNode = classNode.getClinitNode().getBlockNode();\n+            blockNode.addStatementNode(statementExpressionNode);\n+\n+            MemberFieldStoreNode memberFieldStoreNode = new MemberFieldStoreNode();\n+            memberFieldStoreNode.setLocation(location);\n+            memberFieldStoreNode.setExpressionType(Pattern.class);\n+            memberFieldStoreNode.setName(name);\n+            memberFieldStoreNode.setStatic(true);\n+\n+            statementExpressionNode.setExpressionNode(memberFieldStoreNode);\n+\n+            CallNode callNode = new CallNode();\n+            callNode.setLocation(location);\n+            callNode.setExpressionType(Pattern.class);\n+\n+            memberFieldStoreNode.setChildNode(callNode);\n+\n+            StaticNode staticNode = new StaticNode();\n+            staticNode.setLocation(location);\n+            staticNode.setExpressionType(Pattern.class);\n+\n+            callNode.setLeftNode(staticNode);\n+\n+            CallSubNode callSubNode = new CallSubNode();\n+            callSubNode.setLocation(location);\n+            callSubNode.setExpressionType(Pattern.class);\n+            callSubNode.setBox(Pattern.class);\n+            callSubNode.setMethod(new PainlessMethod(\n+                    Pattern.class.getMethod(\"compile\", String.class, int.class),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MzgzMw=="}, "originalCommit": {"oid": "37c275946688e023516714ed0f0b860bd169ae5b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTA4MDYyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ClassNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo0NzozNVrOFtyrFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo0NzoyMVrOFt1E9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MDQ3MA==", "bodyText": "Could we add this when creating the clinit block, and have an inner block that we expose as the one that statements can be added to? This way we don't manipulate the IR tree when calling write.", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383560470", "createdAt": "2020-02-24T22:47:35Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ClassNode.java", "diffHunk": "@@ -152,34 +169,25 @@ public ScriptRoot getScriptRoot() {\n         constructor.returnValue();\n         constructor.endMethod();\n \n+        if (clinitNode.getBlockNode().getStatementsNodes().isEmpty() == false) {\n+            ReturnNode returnNode = new ReturnNode();\n+            returnNode.setLocation(new Location(\"internal$clinit$return\", 0));\n+            clinitNode.getBlockNode().addStatementNode(returnNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313b09ad7e94b76627ceb500fc51b1d603b4454b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5OTg2Mg==", "bodyText": "I changed this to do no modifications of the ir tree from write. I just do the method writer for clinit and the return statement in the ClassNode. I'll consider better ways to do this, but for now this makes the most sense because it's the simplest change.", "url": "https://github.com/elastic/elasticsearch/pull/52612#discussion_r383599862", "createdAt": "2020-02-25T00:47:21Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ClassNode.java", "diffHunk": "@@ -152,34 +169,25 @@ public ScriptRoot getScriptRoot() {\n         constructor.returnValue();\n         constructor.endMethod();\n \n+        if (clinitNode.getBlockNode().getStatementsNodes().isEmpty() == false) {\n+            ReturnNode returnNode = new ReturnNode();\n+            returnNode.setLocation(new Location(\"internal$clinit$return\", 0));\n+            clinitNode.getBlockNode().addStatementNode(returnNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MDQ3MA=="}, "originalCommit": {"oid": "313b09ad7e94b76627ceb500fc51b1d603b4454b"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3862, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}