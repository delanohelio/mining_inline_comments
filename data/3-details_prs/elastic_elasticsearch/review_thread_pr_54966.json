{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTU2MjY5", "number": 54966, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1NTo0OFrODxzK7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyMzo0NVrOD2vmRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTQ1MTk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/integration/FieldLevelSecurityTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1NTo0OFrOGFekIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1NTo0OFrOGFekIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NjgzNQ==", "bodyText": "nit: remove space between ++ and from", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r408396835", "createdAt": "2020-04-14T19:55:48Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/integration/FieldLevelSecurityTests.java", "diffHunk": "@@ -722,6 +725,53 @@ public void testScroll() throws Exception {\n         }\n     }\n \n+    public void testReaderId() throws Exception {\n+        assertAcked(client().admin().indices().prepareCreate(\"test\")\n+            .setSettings(Settings.builder().put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true))\n+            .setMapping(\"field1\", \"type=text\", \"field2\", \"type=text\", \"field3\", \"type=text\")\n+        );\n+\n+        final int numDocs = scaledRandomIntBetween(2, 10);\n+        for (int i = 0; i < numDocs; i++) {\n+            client().prepareIndex(\"test\").setId(String.valueOf(i))\n+                .setSource(\"field1\", \"value1\", \"field2\", \"value2\", \"field3\", \"value3\")\n+                .get();\n+        }\n+        refresh(\"test\");\n+\n+        SearchResponse response = null;\n+        try {\n+            response = client()\n+                .filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue(\"user1\", USERS_PASSWD)))\n+                .prepareSearch(\"test\")\n+                .setReader(null, TimeValue.timeValueMinutes(1L))\n+                .setSize(1)\n+                .setQuery(constantScoreQuery(termQuery(\"field1\", \"value1\")))\n+                .setFetchSource(true)\n+                .get();\n+            int from = 0;\n+            do {\n+                assertThat(response.getHits().getTotalHits().value, is((long) numDocs));\n+                assertThat(response.getHits().getHits().length, is(1));\n+                assertThat(response.getHits().getAt(0).getSourceAsMap().size(), is(1));\n+                assertThat(response.getHits().getAt(0).getSourceAsMap().get(\"field1\"), is(\"value1\"));\n+                ++ from;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bd17b15130f2743769f86d08ce803e5f568642e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTQ1NDM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1NjoyM1rOGFeliQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo1NjoyM1rOGFeliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NzE5Mw==", "bodyText": "s/InVisible/Invisible", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r408397193", "createdAt": "2020-04-14T19:56:23Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java", "diffHunk": "@@ -759,6 +761,54 @@ public void testScroll() throws Exception {\n         }\n     }\n \n+    public void testReaderId() throws Exception {\n+        assertAcked(client().admin().indices().prepareCreate(\"test\")\n+            .setSettings(Settings.builder().put(IndicesRequestCache.INDEX_CACHE_REQUEST_ENABLED_SETTING.getKey(), true))\n+            .setMapping(\"field1\", \"type=text\", \"field2\", \"type=text\", \"field3\", \"type=text\")\n+        );\n+        final int numVisible = scaledRandomIntBetween(2, 10);\n+        final int numInVisible = scaledRandomIntBetween(2, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bd17b15130f2743769f86d08ce803e5f568642e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQ0NzYyOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzo1OToyNlrOGMPtGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxMzoyNFrOGMrosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5MzQwMQ==", "bodyText": "I think we still need to catch RejectedExecutionException?", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415493401", "createdAt": "2020-04-27T03:59:26Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -414,20 +423,16 @@ public void onFailure(Exception exc) {\n \n     private <T> void runAsync(IndexShard shard, CheckedSupplier<T, Exception> command, ActionListener<T> listener) {\n         Executor executor = getExecutor(shard);\n-        try {\n-            executor.execute(() -> {\n-                T result;\n-                try {\n-                    result = command.get();\n-                } catch (Exception exc) {\n-                    listener.onFailure(exc);\n-                    return;\n-                }\n-                listener.onResponse(result);\n-            });\n-        } catch (Exception exc) {\n-            listener.onFailure(exc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MzIxOQ==", "bodyText": "We handle exception when calling from query and dfs. I removed the usage of the search thread pool when creating a reader (openReaderContext), I think it's ok to open in the listener thread pool.", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415743219", "createdAt": "2020-04-27T11:46:28Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -414,20 +423,16 @@ public void onFailure(Exception exc) {\n \n     private <T> void runAsync(IndexShard shard, CheckedSupplier<T, Exception> command, ActionListener<T> listener) {\n         Executor executor = getExecutor(shard);\n-        try {\n-            executor.execute(() -> {\n-                T result;\n-                try {\n-                    result = command.get();\n-                } catch (Exception exc) {\n-                    listener.onFailure(exc);\n-                    return;\n-                }\n-                listener.onResponse(result);\n-            });\n-        } catch (Exception exc) {\n-            listener.onFailure(exc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5MzQwMQ=="}, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MTAyNQ==", "bodyText": "Looks good. Thanks for the explanation.", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415951025", "createdAt": "2020-04-27T16:13:24Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -414,20 +423,16 @@ public void onFailure(Exception exc) {\n \n     private <T> void runAsync(IndexShard shard, CheckedSupplier<T, Exception> command, ActionListener<T> listener) {\n         Executor executor = getExecutor(shard);\n-        try {\n-            executor.execute(() -> {\n-                T result;\n-                try {\n-                    result = command.get();\n-                } catch (Exception exc) {\n-                    listener.onFailure(exc);\n-                    return;\n-                }\n-                listener.onResponse(result);\n-            });\n-        } catch (Exception exc) {\n-            listener.onFailure(exc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5MzQwMQ=="}, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQ1MjQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/OriginalIndices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDowMTozM1rOGMPvhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0NzoxOVrOGMe-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5NDAyMw==", "bodyText": "Should we move the logic here to SearchShardTarget instead?", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415494023", "createdAt": "2020-04-27T04:01:33Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/action/OriginalIndices.java", "diffHunk": "@@ -57,13 +58,20 @@ public IndicesOptions indicesOptions() {\n     }\n \n     public static OriginalIndices readOriginalIndices(StreamInput in) throws IOException {\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0) && in.readBoolean() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MzcwOQ==", "bodyText": "sorry it's not needed. I pushed a change to cleanup the usage of search shard target when opening a new reader:\n0ec84ab", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415743709", "createdAt": "2020-04-27T11:47:19Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/action/OriginalIndices.java", "diffHunk": "@@ -57,13 +58,20 @@ public IndicesOptions indicesOptions() {\n     }\n \n     public static OriginalIndices readOriginalIndices(StreamInput in) throws IOException {\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0) && in.readBoolean() == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5NDAyMw=="}, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQ1NzkzOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/engine/MockInternalEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDowNDoxMlrOGMPyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0NzoyNlrOGMe_Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5NDczNw==", "bodyText": "Maybe return super.acquireSearcherSupplier(wrapper.andThen(support::wrapSearcher), scope)?", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415494737", "createdAt": "2020-04-27T04:04:12Z", "author": {"login": "dnhatn"}, "path": "test/framework/src/main/java/org/elasticsearch/test/engine/MockInternalEngine.java", "diffHunk": "@@ -81,4 +82,20 @@ private void flushAndCloseInternal() throws IOException {\n         final Engine.Searcher engineSearcher = super.acquireSearcher(source, scope);\n         return support().wrapSearcher(engineSearcher);\n     }\n+\n+    @Override\n+    public SearcherSupplier acquireSearcherSupplier(Function<Searcher, Searcher> wrapper, SearcherScope scope) throws EngineException {\n+        final SearcherSupplier reader = super.acquireSearcherSupplier(wrapper, scope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0Mzc3NA==", "bodyText": "++, I pushed 0ec84ab", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415743774", "createdAt": "2020-04-27T11:47:26Z", "author": {"login": "jimczi"}, "path": "test/framework/src/main/java/org/elasticsearch/test/engine/MockInternalEngine.java", "diffHunk": "@@ -81,4 +82,20 @@ private void flushAndCloseInternal() throws IOException {\n         final Engine.Searcher engineSearcher = super.acquireSearcher(source, scope);\n         return support().wrapSearcher(engineSearcher);\n     }\n+\n+    @Override\n+    public SearcherSupplier acquireSearcherSupplier(Function<Searcher, Searcher> wrapper, SearcherScope scope) throws EngineException {\n+        final SearcherSupplier reader = super.acquireSearcherSupplier(wrapper, scope);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5NDczNw=="}, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQ1ODgyOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/frozen-indices/src/main/java/org/elasticsearch/xpack/frozen/FrozenIndices.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDowNDozOFrOGMPy0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDowNDozOFrOGMPy0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5NDg2NQ==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415494865", "createdAt": "2020-04-27T04:04:38Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/frozen-indices/src/main/java/org/elasticsearch/xpack/frozen/FrozenIndices.java", "diffHunk": "@@ -55,14 +54,6 @@\n         return Arrays.asList(FrozenEngine.INDEX_FROZEN);\n     }\n \n-    @Override\n-    public void onIndexModule(IndexModule indexModule) {\n-        if (FrozenEngine.INDEX_FROZEN.get(indexModule.getSettings())) {\n-            indexModule.addSearchOperationListener(new FrozenEngine.ReacquireEngineSearcherListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQ2MDc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDowNTo0NVrOGMPz0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0Nzo0MVrOGMe_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5NTEyMg==", "bodyText": "I think we should validate the authentication of any reader context, not only the reader contexts with scroll?", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415495122", "createdAt": "2020-04-27T04:05:45Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -44,25 +45,32 @@ public SecuritySearchOperationListener(SecurityContext securityContext, XPackLic\n         this.auditTrailService = auditTrail;\n     }\n \n+    @Override\n+    public void onNewReaderContext(ReaderContext readerContext) {\n+        if (licenseState.isSecurityEnabled()) {\n+            readerContext.putInContext(AuthenticationField.AUTHENTICATION_KEY, securityContext.getAuthentication());\n+        }\n+    }\n+\n     /**\n-     * Adds the {@link Authentication} to the {@link ScrollContext}\n+     * Adds the {@link Authentication} to the {@link ReaderContext}\n      */\n     @Override\n-    public void onNewScrollContext(ScrollContext scrollContext) {\n+    public void onNewScrollContext(ReaderContext readerContext) {\n         if (licenseState.isSecurityEnabled()) {\n-            scrollContext.putInContext(AuthenticationField.AUTHENTICATION_KEY, securityContext.getAuthentication());\n+            readerContext.putInContext(AuthenticationField.AUTHENTICATION_KEY, securityContext.getAuthentication());\n         }\n     }\n \n     /**\n-     * Checks for the {@link ScrollContext} if it exists and compares the {@link Authentication}\n-     * object from the scroll context with the current authentication context\n+     * compares the {@link Authentication} object from the reader context with the current\n+     * authentication context\n      */\n     @Override\n-    public void validateSearchContext(SearchContext searchContext, TransportRequest request) {\n+    public void validateSearchContext(ReaderContext readerContext, SearchContext searchContext, TransportRequest request) {\n         if (licenseState.isSecurityEnabled()) {\n             if (searchContext.scrollContext() != null) {\n-                final Authentication originalAuth = searchContext.scrollContext().getFromContext(AuthenticationField.AUTHENTICATION_KEY);\n+                final Authentication originalAuth = readerContext.getFromContext(AuthenticationField.AUTHENTICATION_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MzkxOQ==", "bodyText": "Oups, I pushed a change to address this:\n0ec84ab", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415743919", "createdAt": "2020-04-27T11:47:41Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -44,25 +45,32 @@ public SecuritySearchOperationListener(SecurityContext securityContext, XPackLic\n         this.auditTrailService = auditTrail;\n     }\n \n+    @Override\n+    public void onNewReaderContext(ReaderContext readerContext) {\n+        if (licenseState.isSecurityEnabled()) {\n+            readerContext.putInContext(AuthenticationField.AUTHENTICATION_KEY, securityContext.getAuthentication());\n+        }\n+    }\n+\n     /**\n-     * Adds the {@link Authentication} to the {@link ScrollContext}\n+     * Adds the {@link Authentication} to the {@link ReaderContext}\n      */\n     @Override\n-    public void onNewScrollContext(ScrollContext scrollContext) {\n+    public void onNewScrollContext(ReaderContext readerContext) {\n         if (licenseState.isSecurityEnabled()) {\n-            scrollContext.putInContext(AuthenticationField.AUTHENTICATION_KEY, securityContext.getAuthentication());\n+            readerContext.putInContext(AuthenticationField.AUTHENTICATION_KEY, securityContext.getAuthentication());\n         }\n     }\n \n     /**\n-     * Checks for the {@link ScrollContext} if it exists and compares the {@link Authentication}\n-     * object from the scroll context with the current authentication context\n+     * compares the {@link Authentication} object from the reader context with the current\n+     * authentication context\n      */\n     @Override\n-    public void validateSearchContext(SearchContext searchContext, TransportRequest request) {\n+    public void validateSearchContext(ReaderContext readerContext, SearchContext searchContext, TransportRequest request) {\n         if (licenseState.isSecurityEnabled()) {\n             if (searchContext.scrollContext() != null) {\n-                final Authentication originalAuth = searchContext.scrollContext().getFromContext(AuthenticationField.AUTHENTICATION_KEY);\n+                final Authentication originalAuth = readerContext.getFromContext(AuthenticationField.AUTHENTICATION_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ5NTEyMg=="}, "originalCommit": {"oid": "a07c0e1481a0af2b5259d83b7d6c7950599774a3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzI4NzMyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyMjoxOFrOGMo8rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyMjoxOFrOGMo8rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwNjk5MQ==", "bodyText": "I think we no longer need to put the security for the scroll request as we are doing for all readers.", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415906991", "createdAt": "2020-04-27T15:22:18Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/SecuritySearchOperationListener.java", "diffHunk": "@@ -44,36 +43,41 @@ public SecuritySearchOperationListener(SecurityContext securityContext, XPackLic\n         this.auditTrailService = auditTrail;\n     }\n \n+    @Override\n+    public void onNewReaderContext(ReaderContext readerContext) {\n+        if (licenseState.isSecurityEnabled()) {\n+            readerContext.putInContext(AuthenticationField.AUTHENTICATION_KEY, securityContext.getAuthentication());\n+        }\n+    }\n+\n     /**\n-     * Adds the {@link Authentication} to the {@link ScrollContext}\n+     * Adds the {@link Authentication} to the {@link ReaderContext}\n      */\n     @Override\n-    public void onNewScrollContext(ScrollContext scrollContext) {\n+    public void onNewScrollContext(ReaderContext readerContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4750a4856e84303aadd4281b4376c55ba05362e2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzI5NTQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/frozen-indices/src/test/java/org/elasticsearch/index/engine/FrozenIndexTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyMzo0NVrOGMpBhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyMzo0NVrOGMpBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwODIyOA==", "bodyText": "I think we can adjust this assertion and remove TODO :)", "url": "https://github.com/elastic/elasticsearch/pull/54966#discussion_r415908228", "createdAt": "2020-04-27T15:23:45Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/frozen-indices/src/test/java/org/elasticsearch/index/engine/FrozenIndexTests.java", "diffHunk": "@@ -100,13 +111,39 @@ public void testCloseFreezeAndOpen() {\n             for (int i = 0; i < 2; i++) {\n                 shard = indexService.getShard(i);\n                 engine = IndexShardTestCase.getEngine(shard);\n-                assertFalse(((FrozenEngine) engine).isReaderOpen());\n+                // TODO: scrolls keep the reader open", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4750a4856e84303aadd4281b4376c55ba05362e2"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1184, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}