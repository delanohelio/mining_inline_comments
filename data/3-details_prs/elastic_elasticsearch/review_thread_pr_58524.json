{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NjgyMjIz", "number": 58524, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjozMzo0OFrOEIoPJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTozNzoxMFrOEKDnzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDgzMzAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjozMzo0OFrOGotIzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTo0MTo0NFrOGpUV4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNTc1Nw==", "bodyText": "I think we probably want to ensure that these are homogenous collections. I don't know how we would make sense of [ \"1\", true, 1.0 ]", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445335757", "createdAt": "2020-06-25T06:33:48Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -385,6 +381,15 @@ public void close() {\n         openIdConnectAuthenticator.close();\n     }\n \n+    /*\n+     * We only map claims that are of Type String, Boolean, or Number, or arrays that contain only these types\n+     */\n+    private static boolean isAllowedTypeForClaim(Object o) {\n+        return (o instanceof String || o instanceof Boolean || o instanceof Number\n+            || (o instanceof Collection && ((Collection) o).stream()\n+            .allMatch(c -> c instanceof String || c instanceof Boolean || c instanceof Number)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MDY5Nw==", "bodyText": "think we probably want to ensure that these are heterogenous collections.\n\nYou used Greek so I get to be pedantic \ud83c\udf89 s/heterogeneous/homogeneous/ :)\nIn all seriousness, I took a lenient stance here on purpose for metadata ( as opposed to user properties where I allowed only strings ).\n\nI don't know how we would make sense of [ \"1\", true, 1.0 ]\n\n\nMetadata can be used as metadata, for informational purposes so we do not necessarily need to make sense of the value of a given key.\nIt would work in a role mapping rule such as\n\n\"rules\" : { \"field\" : { \"groups\" : \"1\" } },\n\nhappy to reconsider if you think this would cause an issue somewhere else or that it is too lenient for the sake of being lenient but I don't see any specific problem with it as is", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445960697", "createdAt": "2020-06-26T04:26:53Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -385,6 +381,15 @@ public void close() {\n         openIdConnectAuthenticator.close();\n     }\n \n+    /*\n+     * We only map claims that are of Type String, Boolean, or Number, or arrays that contain only these types\n+     */\n+    private static boolean isAllowedTypeForClaim(Object o) {\n+        return (o instanceof String || o instanceof Boolean || o instanceof Number\n+            || (o instanceof Collection && ((Collection) o).stream()\n+            .allMatch(c -> c instanceof String || c instanceof Boolean || c instanceof Number)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNTc1Nw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3ODA4Mg==", "bodyText": "My comment clearly says homogeneous \ud83d\ude08\nFair enough - as long as it's a considered position, I'm not worried.", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445978082", "createdAt": "2020-06-26T05:41:44Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -385,6 +381,15 @@ public void close() {\n         openIdConnectAuthenticator.close();\n     }\n \n+    /*\n+     * We only map claims that are of Type String, Boolean, or Number, or arrays that contain only these types\n+     */\n+    private static boolean isAllowedTypeForClaim(Object o) {\n+        return (o instanceof String || o instanceof Boolean || o instanceof Number\n+            || (o instanceof Collection && ((Collection) o).stream()\n+            .allMatch(c -> c instanceof String || c instanceof Boolean || c instanceof Number)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNTc1Nw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM0MTUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDowNzoxOFrOGpPvww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDozODozM1rOGpTbpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwMjc4Nw==", "bodyText": "The new validateClaimType method does not assert claimValueObject is a List. In theory it could be a Set or a Number.", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445902787", "createdAt": "2020-06-26T00:07:18Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -461,18 +477,15 @@ static ClaimParser forSetting(Logger logger, OpenIdConnectRealmSettings.ClaimSet\n                         \"OpenID Connect Claim [\" + claimName + \"] for [\" + setting.name(realmConfig) + \"]\",\n                         claims -> {\n                             Object claimValueObject = claims.getClaim(claimName);\n+                            validateClaimType(claimValueObject, RealmSettings.getFullSettingKey(realmConfig, setting.getClaim()));\n                             if (claimValueObject == null) {\n                                 return List.of();\n                             } else if (claimValueObject instanceof String) {\n                                 return List.of((String) claimValueObject);\n-                            } else if (claimValueObject instanceof List == false) {\n-                                throw new SettingsException(\"Setting [\" + RealmSettings.getFullSettingKey(realmConfig, setting.getClaim())\n-                                    + \" expects a claim with String or a String Array value but found a \"\n-                                    + claimValueObject.getClass().getName());\n                             }\n                             return ((List<String>) claimValueObject).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MzE3NA==", "bodyText": "validateClaimType right above validates that is either a Collection or a String. Then, if this is not a String, it is a Collection. How could it get to be a Set or a Number ? Maybe I didn't get what you mean", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445963174", "createdAt": "2020-06-26T04:38:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -461,18 +477,15 @@ static ClaimParser forSetting(Logger logger, OpenIdConnectRealmSettings.ClaimSet\n                         \"OpenID Connect Claim [\" + claimName + \"] for [\" + setting.name(realmConfig) + \"]\",\n                         claims -> {\n                             Object claimValueObject = claims.getClaim(claimName);\n+                            validateClaimType(claimValueObject, RealmSettings.getFullSettingKey(realmConfig, setting.getClaim()));\n                             if (claimValueObject == null) {\n                                 return List.of();\n                             } else if (claimValueObject instanceof String) {\n                                 return List.of((String) claimValueObject);\n-                            } else if (claimValueObject instanceof List == false) {\n-                                throw new SettingsException(\"Setting [\" + RealmSettings.getFullSettingKey(realmConfig, setting.getClaim())\n-                                    + \" expects a claim with String or a String Array value but found a \"\n-                                    + claimValueObject.getClass().getName());\n                             }\n                             return ((List<String>) claimValueObject).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwMjc4Nw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM0OTkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxMjozOVrOGpP1CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDo1NDoxMlrOGpTpEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDEzNw==", "bodyText": "I'd prefer a more descriptive method name if possible. The current feels like it will validate the claim value is a certain specified type. But it really just asserts the value is either:\n\nA String or\nIf it is a collection, it must be a collection of String\n\nNow I am not sure if this is what we really want? Is it OK if the value is a Number?", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445904137", "createdAt": "2020-06-26T00:12:39Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,15 @@ public String toString() {\n             return name;\n         }\n \n+        private static void validateClaimType(Object claimValueObject, String settingKey) {\n+            if (claimValueObject instanceof String == false &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1ODQ1Mg==", "bodyText": "Hey can you elaborate on what you mean be \"descriptive\" here? The method does what it intends to do as described in the PR description:\n\nWhen mapping claims to user properties ( principal, email, groups,\nname), we only handle string and array of string type. Previously\nwe would fail to recognize an array of other types and that would\ncause failures when trying to cast to String.\n\nDoing so, seems to me to be \"Validating the type of the claim value\" and as such validateClaimType seems appropriate. What would be an alternative that you are more comfortable with ?", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445958452", "createdAt": "2020-06-26T04:16:23Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,15 @@ public String toString() {\n             return name;\n         }\n \n+        private static void validateClaimType(Object claimValueObject, String settingKey) {\n+            if (claimValueObject instanceof String == false &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDEzNw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MDU4Nw==", "bodyText": "What I mean is the name gave me the first impression that the signature would be something like:\nvoid validateCliamType(Object value, Class<?> type)\nBut instead the type is not specified but should always be String or collection of it. So I'd personally prefer something like validateParsableClaim.", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445960587", "createdAt": "2020-06-26T04:26:14Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,15 @@ public String toString() {\n             return name;\n         }\n \n+        private static void validateClaimType(Object claimValueObject, String settingKey) {\n+            if (claimValueObject instanceof String == false &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDEzNw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2MjQyMA==", "bodyText": "Fair enough, I don't necessarily agree that validateClaimType is off :) but I don't dislike validateParsableClaim enough to fortify my hill :)", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445962420", "createdAt": "2020-06-26T04:35:02Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,15 @@ public String toString() {\n             return name;\n         }\n \n+        private static void validateClaimType(Object claimValueObject, String settingKey) {\n+            if (claimValueObject instanceof String == false &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDEzNw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NDYyNA==", "bodyText": "Thanks Ioannis. The more important piece of my comment here is about the behaviour, i.e. the if check does not seem to do what we want to ensure, i.e. String or Collection<String>:\nclaimValueObject instanceof String == false && \nclaimValueObject instanceof Collection && \n((Collection) claimValueObject).stream().allMatch(c -> c instanceof String) == false\nIf the value is a Number, the if branch will not be executed, i.e. a Number will be considered as parsable.", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445964624", "createdAt": "2020-06-26T04:44:45Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,15 @@ public String toString() {\n             return name;\n         }\n \n+        private static void validateClaimType(Object claimValueObject, String settingKey) {\n+            if (claimValueObject instanceof String == false &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDEzNw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NjYxMA==", "bodyText": "Aha! Now I saw it , thanks, will address", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r445966610", "createdAt": "2020-06-26T04:54:12Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,15 @@ public String toString() {\n             return name;\n         }\n \n+        private static void validateClaimType(Object claimValueObject, String settingKey) {\n+            if (claimValueObject instanceof String == false &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDEzNw=="}, "originalCommit": {"oid": "e93302d0d1c05b90a80bf331c70a1ec1f560eeed"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTgwNTU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTozNzoxMFrOGq4SFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNToyNlrOGq5MJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxNTUwOA==", "bodyText": "The check claimValueObject instanceof Collection is performed twice, which does not seem to be necessary\nThe if check only ensure it is a Collection<String>, not a List<String>. So there is a theoretical possibility for cast exception.\n\nI feel this part of code can be simplified to something like the follows:\n} else if (claimValueObject instanceof Collection && ((Collection) claimValueObject).stream().allMatch(c -> c instanceof String)) {\n    values = (Collection<String>) claimValueObject;\n} else {\n    throw new SettingsException(\"Setting [ \" + settingKey + \" expects a claim with String or a String Array value\");\n}\nWith above change, the return type of this method needs to be changed to Collection<String> as well.", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r447615508", "createdAt": "2020-06-30T11:37:10Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,25 @@ public String toString() {\n             return name;\n         }\n \n+        private static List<String> parseClaimValues(JWTClaimsSet claimsSet, String claimName, String settingKey) {\n+            List<String> values;\n+            final Object claimValueObject = claimsSet.getClaim(claimName);\n+            if (claimValueObject == null) {\n+                values = List.of();\n+            } else if (claimValueObject instanceof String) {\n+                values = List.of((String) claimValueObject);\n+            } else if (claimValueObject instanceof Collection) {\n+                if (claimValueObject instanceof Collection && ((Collection) claimValueObject).stream().allMatch(c -> c instanceof String)) {\n+                    values = (List<String>) claimValueObject;\n+                } else {\n+                    throw new SettingsException(\"Setting [ \" + settingKey + \" expects a claim with String or a String Array value\");\n+                }\n+            } else {\n+                throw new SettingsException(\"Setting [ \" + settingKey + \" expects a claim with String or a String Array value\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9e3f2532e1af157432ed46f213b5bc57677350"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMDM3Mg==", "bodyText": "Yeap you are right. In retrospect, I should have waited to fix this today and not last night. Thanks for calling me out !", "url": "https://github.com/elastic/elasticsearch/pull/58524#discussion_r447630372", "createdAt": "2020-06-30T12:05:26Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealm.java", "diffHunk": "@@ -412,6 +417,25 @@ public String toString() {\n             return name;\n         }\n \n+        private static List<String> parseClaimValues(JWTClaimsSet claimsSet, String claimName, String settingKey) {\n+            List<String> values;\n+            final Object claimValueObject = claimsSet.getClaim(claimName);\n+            if (claimValueObject == null) {\n+                values = List.of();\n+            } else if (claimValueObject instanceof String) {\n+                values = List.of((String) claimValueObject);\n+            } else if (claimValueObject instanceof Collection) {\n+                if (claimValueObject instanceof Collection && ((Collection) claimValueObject).stream().allMatch(c -> c instanceof String)) {\n+                    values = (List<String>) claimValueObject;\n+                } else {\n+                    throw new SettingsException(\"Setting [ \" + settingKey + \" expects a claim with String or a String Array value\");\n+                }\n+            } else {\n+                throw new SettingsException(\"Setting [ \" + settingKey + \" expects a claim with String or a String Array value\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxNTUwOA=="}, "originalCommit": {"oid": "cb9e3f2532e1af157432ed46f213b5bc57677350"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2298, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}