{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1ODM1NDQz", "number": 51305, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyNzo0MVrODaZTLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowMDo0NVrODdvJVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDA0MDc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyNzo0MVrOFhU2Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzo1MjoyNFrOFi76Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ==", "bodyText": "We should take this opportunity to add other information to the processor at the same time.\nI'm thinking maybe:\n\nAPI Key Id\nAPI Key Realm\nAuthentication Realm (Name + Type)\nAuthentication Type (AuthenticationType)\n\nHowever, I suspect it's not worth having a separate property for every field, may just\n\nAPI_KEY (and we always populate the id, name and realm)\nREALM (which has realm name & type)\nAUTHENTICATION_TYPE (a single field)\n\nwe could merge realm and authc-type, but it's probably not worth it.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r370488935", "createdAt": "2020-01-24T06:27:41Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzOTQwOA==", "bodyText": "Correct me if I am wrong, if we use existing Authentication object to populate these fields for api key authentication , some of the fields will contain the same hard-coded information, i.e.:\n\"api_key\": {\"id\": ..., \"name\": ..., \"realm\": \"_es_api_key\"},\n\"realm\": {\"name\": \"_es_api_key\", \"type\": \"_es_api_key\"},\n\"authentication_type\": \"API_KEY\"\n\nFor other authentication mechanisms, the api_key will not exist and other fields will be populated accordingly.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r371039408", "createdAt": "2020-01-27T00:15:15Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ=="}, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0ODk3Ng==", "bodyText": "I think we are risking to expose too much internals, in the hope they might be useful, and then we'll get stuck with having to treat changes to them as breaking. The specific thing I have in mind is the _es_api_keykeyword and how it fills realm type fields to mark certain internal conditions.\nStarting from what Tim suggested, I think we should add the realm name and type as a single object. This should work for API keys as well as plain user authn (@ywangd see ApiKeyService#getCreatorRealmName which only works for the name not for the type). Separately, I would suggest we add the api key name and id as a single object.\nI don't feel strongly about having objects instead of top level fields, either way is fine to me (i.e. realm_name and realm_type as fields are OK). But I would avoid showing the realm parameter twice (under api keys and user), or exposing the _es_api_key value.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r371748976", "createdAt": "2020-01-28T11:31:59Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ=="}, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NTA2MQ==", "bodyText": "Also, we should take into consideration Elastic Common Schema (ECS - here is a good starting point https://www.elastic.co/blog/introducing-the-elastic-common-schema) when defining new fields.\nWhat would people say about renaming existing fields, to better align to the ECS specification?", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r371755061", "createdAt": "2020-01-28T11:46:33Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ=="}, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2MTMzNQ==", "bodyText": "@albertzaharovits By \"single object\", do you mean the form of\"api_key\": {\"id\": ..., \"name\": ...}?\nI agree that exposing the hard-coded value of _es_api_key will probably do more harm than good. This is the reason why I was trying to confirm in the original comment. So we could change the information object to something like the follows:\n\"api_key\": {\"id\": ..., \"name\": ..., \"realm\": \"_es_api_key\"},\n\"realm\": {\"name\": \"default_native\", \"type\": \"native\"},\n\"authentication_type\": \"API_KEY\"\nNote that the realm object refers to the creator realm of the API key instead of the API key realm itself. In this case, we pretend the api key is generated by authenticating against the native realm.\nJust some more discussion point: I am aware it is techically incorrect to say \"API key realm\", since there is actually no such realm. But I wonder whether it would be feasible and more consistent to implement both token and API key auth as true realms? This could be a separate discussion and there is no need to tie it to this issue.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r371761335", "createdAt": "2020-01-28T12:01:24Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ=="}, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NDU5NA==", "bodyText": "By \"single object\", do you mean the form of\"api_key\": {\"id\": ..., \"name\": ...}?\n\nYes, as opposed to \"api_key_id\": ..., \"api_key_name\": ... .\nFrom the previous comment of yours I don't follow why _es_api_key must be present in \"api_key\": {\"id\": ..., \"name\": ..., \"realm\": \"_es_api_key\"}.\n\nNote that the realm object refers to the creator realm of the API key instead of the API key realm itself.\n\nI think this is OK. API keys \"impersonate\" existing users, although they might have narrower privileges. In this case, the realm as set by the Set Security User Ingest Processor  is the \"realm\" of the creator user, which is the user the API key is impersonating. Also, we don't have a good way of expressing that the API key has the exact or less permissions of the creator user.\n\nBut I wonder whether it would be feasible and more consistent to implement both token and API key auth as true realms?\n\nI don't think so. Tokens, especially, are 100% designed to impersonate users and authenticating with a token or the user's credentials should be looking identical. An argument can be made that API keys are not part of a user realm, but API keys inherit the permissions of the creator so the \"realm\" of an API key can be defined as the realm of the creating user.\nI think this conv might benefit from high bandwidth conv over Zoom. Maybe next team meeting?", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r371874594", "createdAt": "2020-01-28T15:30:57Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ=="}, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwMzUwNg==", "bodyText": "From the previous comment of yours I don't follow why _es_api_key must be present in \"api_key\": {\"id\": ..., \"name\": ..., \"realm\": \"_es_api_key\"}.\n\nIt does not have to present, was just a proposal.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r372103506", "createdAt": "2020-01-28T22:51:17Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ=="}, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NzQ3NQ==", "bodyText": "Also, we should take into consideration Elastic Common Schema (ECS - here is a good starting point https://www.elastic.co/blog/introducing-the-elastic-common-schema) when defining new fields.\nWhat would people say about renaming existing fields, to better align to the ECS specification?\n\nThis is an interesting point. Thanks for pointing this out. The current user object is mostly align to ECS, except we have user.username instead of user.name. Also we have an extra user.metadata field which can be considered as custom fields.\nThe new api key info will also be custom fields. We are conforming to the schema by using lower case, underscore concatenated keys and non-abbreviation. And the contents cannot be mapped to any existing core or extended fields. There is user.domain from ECS which is meant for LDAP or AD domain name. It is kinda like realm except it is a keyword type while realm is a object type.\nOverall I think what we have proposed so far is conforming to the ECS.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r372177475", "createdAt": "2020-01-29T03:52:24Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -134,7 +141,8 @@ public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorF\n         FULL_NAME,\n         EMAIL,\n         ROLES,\n-        METADATA;\n+        METADATA,\n+        API_KEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODkzNQ=="}, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDA0MjQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyOTowOFrOFhU3bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyOTowOFrOFhU3bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4OTE5Nw==", "bodyText": "See my other comment about wanting the id etc as well.\nI think this should be a nested object inside the user object.\nuser: {\n   username: \"...\",\n   api_key: {\n       name: \"...\", id: \"...\", \"realm\": \"...\"\n   }\n}", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r370489197", "createdAt": "2020-01-24T06:29:08Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -81,6 +82,12 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY_NAME:\n+                    Object apiKeyName = authentication.getMetadata().get(ApiKeyService.API_KEY_NAME_KEY);\n+                    if (apiKeyName != null) {\n+                        userObject.put(\"api_key_name\", apiKeyName);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ff001f2c2a08e18d9e70499fe7edd74619924c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjIwNjQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/resources/security-index-template-7.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjozMzozN1rOFjG0HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjozMzozN1rOFjG0HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1NjEyNQ==", "bodyText": "Add a new field for realm type as discussed", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r372356125", "createdAt": "2020-01-29T12:33:37Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/resources/security-index-template-7.json", "diffHunk": "@@ -194,6 +194,9 @@\n             },\n             \"realm\" : {\n               \"type\" : \"keyword\"\n+            },\n+            \"realm_type\" : {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81c6e3352188b3b50cc013e39992ef961dcdbf4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM1MDA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozMjowMlrOFkmu3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoyMDoyMlrOFkxC2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzY0Ng==", "bodyText": "All this duplication bothers me. Can we just put a method like getRealmThatReallyResolvedTheUser() on Authentication?\nObviously there's some work to do on that name.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r373927646", "createdAt": "2020-02-03T05:32:02Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -273,6 +275,8 @@ XContentBuilder newDocument(SecureString apiKey, String name, Authentication aut\n             .field(\"metadata\", authentication.getUser().metadata())\n             .field(\"realm\", authentication.getLookedUpBy() == null ?\n                 authentication.getAuthenticatedBy().getName() : authentication.getLookedUpBy().getName())\n+            .field(\"realm_type\", authentication.getLookedUpBy() == null ?\n+                authentication.getAuthenticatedBy().getType() : authentication.getLookedUpBy().getType())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NjYwMA==", "bodyText": "Add a new method getNominalRealm to Authentication class and replace the usages accordingly.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r374096600", "createdAt": "2020-02-03T13:20:22Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -273,6 +275,8 @@ XContentBuilder newDocument(SecureString apiKey, String name, Authentication aut\n             .field(\"metadata\", authentication.getUser().metadata())\n             .field(\"realm\", authentication.getLookedUpBy() == null ?\n                 authentication.getAuthenticatedBy().getName() : authentication.getLookedUpBy().getName())\n+            .field(\"realm_type\", authentication.getLookedUpBy() == null ?\n+                authentication.getAuthenticatedBy().getType() : authentication.getLookedUpBy().getType())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzY0Ng=="}, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM1NDIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozNTo0OVrOFkmxRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjoxNDoxNFrOFkvZTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyODI2MQ==", "bodyText": "Per #51454, if userObject has an api_key field already, and it's an object (Map) then we should add new fields to that object, not overwrite it.\nLikewise for realm.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r373928261", "createdAt": "2020-02-03T05:35:49Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,39 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final HashMap<String, Object> apiKey = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA2OTU4Mg==", "bodyText": "Updated for api_key and realm. Also added test to make sure they are not overwritten.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r374069582", "createdAt": "2020-02-03T12:14:14Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,39 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final HashMap<String, Object> apiKey = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyODI2MQ=="}, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM2MjQ1OnYy", "diffSide": "RIGHT", "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo0MzoyOFrOFkm2WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzowODowN1rOFltlRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTU2MQ==", "bodyText": "I think describing the realm property in the space of API Keys would lead some users to read it as only applying to API Keys. It would be better to say something like:\nThe `api_key` property is only applicable when the authentication is\nthrough API key. It is an object containing two fields, `id` and `name`.\n\nThe `realm` property is also an object with two fields, `name` and `type`.\nWhen using API key authentication, the `realm` property refers to the realm\nfrom which the API key is created. \n\nThat said, I think we ought to actually expand this whole section and give examples, etc.\nI'd be happy to see that in a followup PR though.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r373929561", "createdAt": "2020-02-03T05:43:28Z", "author": {"login": "tvernum"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.\n+When using API key authentication, the `realm` property refers to the realm\n+from which the API key is created. It is also an object with two fields,\n+`name` and `type`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NTAwNw==", "bodyText": "Updated. I would also prefer to have the example as a separate PR. The example code may need to be added as part of doc tests which require some work. Should I create an issue for it?", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r374095007", "createdAt": "2020-02-03T13:16:56Z", "author": {"login": "ywangd"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.\n+When using API key authentication, the `realm` property refers to the realm\n+from which the API key is created. It is also an object with two fields,\n+`name` and `type`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTU2MQ=="}, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2Njk0NA==", "bodyText": "Should I create an issue for it?\n\nYes please.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375066944", "createdAt": "2020-02-05T05:36:04Z", "author": {"login": "tvernum"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.\n+When using API key authentication, the `realm` property refers to the realm\n+from which the API key is created. It is also an object with two fields,\n+`name` and `type`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTU2MQ=="}, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA4ODQ1NA==", "bodyText": "Issue created: #51907", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375088454", "createdAt": "2020-02-05T07:08:07Z", "author": {"login": "ywangd"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.\n+When using API key authentication, the `realm` property refers to the realm\n+from which the API key is created. It is also an object with two fields,\n+`name` and `type`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTU2MQ=="}, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM2ODA5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo0OTowM1rOFkm50A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoyMToyOVrOFkxEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDQ0OA==", "bodyText": "I think there's a mismatch here.\nThe API Key service populates the API key creator realm based on the looked-up-by.\nBut the getCreatorRealm* methods return the authenticating realm, not the looked up realm.\nSo, if I do curl -u elastic -H \"es-security-runas-user: foo\" PUT /index/_doc/1 the pipeline will record the realm as reserved\nBut if I do curl -u elastic -H \"es-security-runas-user: foo\" PUT /_security/api_key ... and then curl -H \"Authorization: ApiKey .... PUT /index/_doc/1 it will have a realm of native.\nIt's not a big deal, but it's inconsistent. I think we want to always use the looked-up-by in the ingest processor, maybe with a flag of lookup: true or something like that if the authenticated realm was different.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r373930448", "createdAt": "2020-02-03T05:49:03Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,39 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final HashMap<String, Object> apiKey = new HashMap<>();\n+                    Object apiKeyName = authentication.getMetadata().get(ApiKeyService.API_KEY_NAME_KEY);\n+                    if (apiKeyName != null) {\n+                        apiKey.put(\"name\", apiKeyName);\n+                    }\n+                    Object apiKeyId = authentication.getMetadata().get(ApiKeyService.API_KEY_ID_KEY);\n+                    if (apiKeyId != null) {\n+                        apiKey.put(\"id\", apiKeyId);\n+                    }\n+                    if (false == apiKey.isEmpty()) {\n+                        userObject.put(\"api_key\", apiKey);\n+                    }\n+                    break;\n+                case REALM:\n+                    final Object realmName = ApiKeyService.getCreatorRealmName(authentication);\n+                    final Object realmType = ApiKeyService.getCreatorRealmType(authentication);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MTAyMw==", "bodyText": "You are right. I think the first case should report realm as native as well. This should be easily achieved once we augument the Authentication class with a new method to resolve the actual realm.\nAs for the lookup: true flag, do you mean add it as part of the SetSecurityUserProcessor configuration?", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r373941023", "createdAt": "2020-02-03T06:40:59Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,39 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final HashMap<String, Object> apiKey = new HashMap<>();\n+                    Object apiKeyName = authentication.getMetadata().get(ApiKeyService.API_KEY_NAME_KEY);\n+                    if (apiKeyName != null) {\n+                        apiKey.put(\"name\", apiKeyName);\n+                    }\n+                    Object apiKeyId = authentication.getMetadata().get(ApiKeyService.API_KEY_ID_KEY);\n+                    if (apiKeyId != null) {\n+                        apiKey.put(\"id\", apiKeyId);\n+                    }\n+                    if (false == apiKey.isEmpty()) {\n+                        userObject.put(\"api_key\", apiKey);\n+                    }\n+                    break;\n+                case REALM:\n+                    final Object realmName = ApiKeyService.getCreatorRealmName(authentication);\n+                    final Object realmType = ApiKeyService.getCreatorRealmType(authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDQ0OA=="}, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NzA3NQ==", "bodyText": "Updated for both name and type.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r374097075", "createdAt": "2020-02-03T13:21:29Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,39 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final HashMap<String, Object> apiKey = new HashMap<>();\n+                    Object apiKeyName = authentication.getMetadata().get(ApiKeyService.API_KEY_NAME_KEY);\n+                    if (apiKeyName != null) {\n+                        apiKey.put(\"name\", apiKeyName);\n+                    }\n+                    Object apiKeyId = authentication.getMetadata().get(ApiKeyService.API_KEY_ID_KEY);\n+                    if (apiKeyId != null) {\n+                        apiKey.put(\"id\", apiKeyId);\n+                    }\n+                    if (false == apiKey.isEmpty()) {\n+                        userObject.put(\"api_key\", apiKey);\n+                    }\n+                    break;\n+                case REALM:\n+                    final Object realmName = ApiKeyService.getCreatorRealmName(authentication);\n+                    final Object realmType = ApiKeyService.getCreatorRealmType(authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDQ0OA=="}, "originalCommit": {"oid": "4d508a30aeba0d7c556fe20eec031330dfc90202"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODgwODU5OnYy", "diffSide": "RIGHT", "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo0NTo1MFrOFlkkQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTo0OTowOVrOFlscdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MDczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            from which the API key is created.\n          \n          \n            \n            from which the API key is created.\n          \n          \n            \n            The valid values for the `authentication_type` property are: `REALM`, `API_KEY`, `TOKEN` and `ANONYMOUS`.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r374940737", "createdAt": "2020-02-04T21:45:50Z", "author": {"login": "albertzaharovits"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.\n+The `realm` property is also an object with two fields, `name` and `type`.\n+When using API key authentication, the `realm` property refers to the realm\n+from which the API key is created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2OTgxNA==", "bodyText": "Updated", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375069814", "createdAt": "2020-02-05T05:49:09Z", "author": {"login": "ywangd"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.\n+The `realm` property is also an object with two fields, `name` and `type`.\n+When using API key authentication, the `realm` property refers to the realm\n+from which the API key is created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MDczNw=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODgyMDQ0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo0OTo1NFrOFlkrbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTo0OTowMVrOFlscVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MjU3NQ==", "bodyText": "Rephrase suggestion:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `api_key` property is only applicable when the authentication is\n          \n          \n            \n            through API key. It is an object containing two fields, `id` and `name`.\n          \n          \n            \n            The `api_key` property exists only if the user authenticated with an API key.\n          \n          \n            \n            It is an object containing the `id` and `name` properties of the API key.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r374942575", "createdAt": "2020-02-04T21:49:54Z", "author": {"login": "albertzaharovits"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2OTc4Mw==", "bodyText": "Updated.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375069783", "createdAt": "2020-02-05T05:49:01Z", "author": {"login": "ywangd"}, "path": "docs/reference/ingest/processors/set-security-user.asciidoc", "diffHunk": "@@ -1,18 +1,23 @@\n [[ingest-node-set-security-user-processor]]\n === Set Security User Processor\n-Sets user-related details (such as `username`,  `roles`, `email`, `full_name`\n-and `metadata` ) from the current\n+Sets user-related details (such as `username`,  `roles`, `email`, `full_name`,\n+`metadata`, `api_key`, `realm` and `authentication_type`) from the current\n authenticated user to the current document by pre-processing the ingest.\n+The `api_key` property is only applicable when the authentication is\n+through API key. It is an object containing two fields, `id` and `name`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MjU3NQ=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODgyNTUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1MTozOVrOFlkumw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMTowMToxMFrOFnYK7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RealmRef getNominalRealm() {\n          \n          \n            \n                public RealmRef getRealm() {", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r374943387", "createdAt": "2020-02-04T21:51:39Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java", "diffHunk": "@@ -76,6 +76,10 @@ public RealmRef getLookedUpBy() {\n         return lookedUpBy;\n     }\n \n+    public RealmRef getNominalRealm() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODA0Mg==", "bodyText": "I think getRealm is a bit too general - I worry about someone just deciding to call getRealm() without thinking about the fact that there's 2 possible realms that might be in play and they need to be intentional about which one to use.\nMaybe getSourceRealm()?\nThe better long term fix would actually be to make getLookedUpBy() always return a realm (that is, is uses this implementation) and then have a isUserLookup() if you need to know whether there was a specific (separate) lookup realm.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375068042", "createdAt": "2020-02-05T05:41:12Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java", "diffHunk": "@@ -76,6 +76,10 @@ public RealmRef getLookedUpBy() {\n         return lookedUpBy;\n     }\n \n+    public RealmRef getNominalRealm() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzM4Nw=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MTYwMQ==", "bodyText": "I agree getRealm is too general. I am OK with getSourceRealm and will go with it.\nIs User#isRunAs functionally equivelent to the isUserLookup method you propose?", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375071601", "createdAt": "2020-02-05T05:57:05Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java", "diffHunk": "@@ -76,6 +76,10 @@ public RealmRef getLookedUpBy() {\n         return lookedUpBy;\n     }\n \n+    public RealmRef getNominalRealm() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzM4Nw=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzNDc5OQ==", "bodyText": "Logically equivalent yes, but it's implemented by looking at different fields, so I'd rather have both implementations so that the one in Authentication is specifically about whether lookupRealm is populated.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r376834799", "createdAt": "2020-02-10T01:01:10Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java", "diffHunk": "@@ -76,6 +76,10 @@ public RealmRef getLookedUpBy() {\n         return lookedUpBy;\n     }\n \n+    public RealmRef getNominalRealm() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzM4Nw=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTYzMjQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTo0Mzo0MFrOFlsX4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzoxMDo0NVrOFmtYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODY0MA==", "bodyText": "I think we need to really consider whether this is the change we want.\nIt's a fairly fundamental change to the ApiKey service, and it affects how the manage_own_api_key privilege would work.\nIt might be right, I'd need to think about it, but if it is, then we might consider it a breaking change.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375068640", "createdAt": "2020-02-05T05:43:40Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -886,7 +884,7 @@ public static String getCreatorRealmName(final Authentication authentication) {\n         if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n             return (String) authentication.getMetadata().get(API_KEY_CREATOR_REALM_NAME);\n         } else {\n-            return authentication.getAuthenticatedBy().getName();\n+            return authentication.getNominalRealm().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA4NjE0MA==", "bodyText": "Here is my understanding:\nIn generaly, I feel the changed behaviour is correct, though you are right about it is a breaking change.\nThe above code is only used in TransportInvalidateApiKeyAction and TransportGetApiKeyAction. The else part will be called when the authentication is not of ApiKey auth type. Since ApiKey auth cannot perform runAs, this means theelse part will only makes a difference when userA runs as userB.  In this case, the existing code will return userA realm, while the changes will return userB realm.\nI can think of two reasons to support the changed behaviour:\n\nWhen apikey is created, it records the runas user (if there is one) and runas/lookedUpBy realm. It feels correct that the same runas/lookedUpBy info should be checked when retrieve/invalidate the apikey.\nWhen you run as someone else, all permissions and stuff should be checked/recorded as someone else.\n\nI don't quite understand how manage_own_api_key work, the document says\nAll security-related operations on Elasticsearch API keys that are \nowned by the current authenticated user. The operations include \ncreating new API keys, retrieving information about API keys, \nand invalidating API keys.\n\nDoes this mean you will not be able to create an API key for yourself unless you have this priviledge? If this is the case, I don't see how this is related to the change. Could you please elaborate on it?", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375086140", "createdAt": "2020-02-05T06:59:33Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -886,7 +884,7 @@ public static String getCreatorRealmName(final Authentication authentication) {\n         if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n             return (String) authentication.getMetadata().get(API_KEY_CREATOR_REALM_NAME);\n         } else {\n-            return authentication.getAuthenticatedBy().getName();\n+            return authentication.getNominalRealm().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODY0MA=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MzkxOQ==", "bodyText": "Tim saved the day, I completely missed this \ud83d\ude1e .\n@yang I think what you're describing is mostly correct.\n\nDoes this mean you will not be able to create an API key for yourself unless you have this priviledge?\n\nYes\n\nIf this is the case, I don't see how this is related to the change. Could you please elaborate on it?\n\nLet's say you run-as and create an API key. The user that you run as only has the manage_own_api_key privilege. The creation would work. But then invalidation (and get), also using the run-as, won't work because the API Key Service would search the APi Key as incorrectly belonging to a user in the realm that authenticated the caller, whereas the API Key is created under the run-as user. (Note, I haven't actually tested this scenario).\nIn the interest of this PR, I would revert to the previous behavior in the TransportInvalidateApiKeyAction and TransportGetApiKeyAction , and, assuming you agree this is a bug, you should open a bug issue with your finding.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375173919", "createdAt": "2020-02-05T10:27:52Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -886,7 +884,7 @@ public static String getCreatorRealmName(final Authentication authentication) {\n         if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n             return (String) authentication.getMetadata().get(API_KEY_CREATOR_REALM_NAME);\n         } else {\n-            return authentication.getAuthenticatedBy().getName();\n+            return authentication.getNominalRealm().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODY0MA=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI3MTk0Ng==", "bodyText": "I tried to simulate the scenario you described with two users foo and bar, where foo is a superuser and bar only has manage_own_api_key for cluster and read for all indices.  ES version 7.5.2\nIt behaves pretty much as you described when requests are made with owner=true. Given foo creates an ApiKey while runas bar, the request\ncurl -u foo:password -H 'es-security-runas-user: bar' 'localhost:9200/_security/api_key?id=keyId&owner=true' returns empty results.\nWhile I do believe the correct behaviour of above request should be returning the api key, I also think it is better to have a separate PR for this as it is not related to the current issue.\nPS: I also found if bar has only manage_own_api_key priviledge, it is not possible to get or delete the api key. I got error says action [cluster:admin/xpack/security/api_key/invalidate] is unauthorized for user [bar]. Once I add manage_api_key to bar, everything works.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375271946", "createdAt": "2020-02-05T14:03:06Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -886,7 +884,7 @@ public static String getCreatorRealmName(final Authentication authentication) {\n         if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n             return (String) authentication.getMetadata().get(API_KEY_CREATOR_REALM_NAME);\n         } else {\n-            return authentication.getAuthenticatedBy().getName();\n+            return authentication.getNominalRealm().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODY0MA=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzMDAzMg==", "bodyText": "I reverted the logic and created #51975 to track it. Thanks", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375630032", "createdAt": "2020-02-06T03:57:19Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -886,7 +884,7 @@ public static String getCreatorRealmName(final Authentication authentication) {\n         if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n             return (String) authentication.getMetadata().get(API_KEY_CREATOR_REALM_NAME);\n         } else {\n-            return authentication.getAuthenticatedBy().getName();\n+            return authentication.getNominalRealm().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODY0MA=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyNTEzNQ==", "bodyText": "Thank you Yang! But currently I don't think we want to set the authenticating realm in the case of the set security user processor, see my other comment: https://github.com/elastic/elasticsearch/pull/51305/files?file-filters%5B%5D=.java#r375923902", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375925135", "createdAt": "2020-02-06T16:02:42Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -886,7 +884,7 @@ public static String getCreatorRealmName(final Authentication authentication) {\n         if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n             return (String) authentication.getMetadata().get(API_KEY_CREATOR_REALM_NAME);\n         } else {\n-            return authentication.getAuthenticatedBy().getName();\n+            return authentication.getNominalRealm().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODY0MA=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzMzgwNQ==", "bodyText": "Agreed. Please see my other comment.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r376133805", "createdAt": "2020-02-06T23:10:45Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -886,7 +884,7 @@ public static String getCreatorRealmName(final Authentication authentication) {\n         if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n             return (String) authentication.getMetadata().get(API_KEY_CREATOR_REALM_NAME);\n         } else {\n-            return authentication.getAuthenticatedBy().getName();\n+            return authentication.getNominalRealm().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2ODY0MA=="}, "originalCommit": {"oid": "9f7ca68e7d893f71554e685028ff29246d294d6f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTA3NzM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowMDo0NVrOFmgkvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzoxMDowNFrOFmtXnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyMzkwMg==", "bodyText": "In case you authenticate without an API Key, this gets you the authentication realm, although it should get the lookup realm, otherwise the set security user processor won't work as expected for run-as users.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r375923902", "createdAt": "2020-02-06T16:00:45Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,47 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final String apiKey = \"api_key\";\n+                    final Object existingApiKeyField = userObject.get(apiKey);\n+                    @SuppressWarnings(\"unchecked\")\n+                    final Map<String, Object> apiKeyField =\n+                        existingApiKeyField instanceof Map ? (Map<String, Object>) existingApiKeyField : new HashMap<>();\n+                    Object apiKeyName = authentication.getMetadata().get(ApiKeyService.API_KEY_NAME_KEY);\n+                    if (apiKeyName != null) {\n+                        apiKeyField.put(\"name\", apiKeyName);\n+                    }\n+                    Object apiKeyId = authentication.getMetadata().get(ApiKeyService.API_KEY_ID_KEY);\n+                    if (apiKeyId != null) {\n+                        apiKeyField.put(\"id\", apiKeyId);\n+                    }\n+                    if (false == apiKeyField.isEmpty()) {\n+                        userObject.put(apiKey, apiKeyField);\n+                    }\n+                    break;\n+                case REALM:\n+                    final String realmKey = \"realm\";\n+                    final Object existingRealmField = userObject.get(realmKey);\n+                    @SuppressWarnings(\"unchecked\")\n+                    final Map<String, Object> realmField =\n+                        existingRealmField instanceof Map ? (Map<String, Object>) existingRealmField : new HashMap<>();\n+                    final Object realmName = ApiKeyService.getCreatorRealmName(authentication);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc63be71d0c2a53dbc800d76ff7b206fb60594a3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNDQ4OA==", "bodyText": "This is a good point. No need to let the existing questionable logic propagate to here. I'll implement the logic locally and this also helps get rid of the other newly added getCreatorRealmType method. Thanks!", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r376124488", "createdAt": "2020-02-06T22:45:51Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,47 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final String apiKey = \"api_key\";\n+                    final Object existingApiKeyField = userObject.get(apiKey);\n+                    @SuppressWarnings(\"unchecked\")\n+                    final Map<String, Object> apiKeyField =\n+                        existingApiKeyField instanceof Map ? (Map<String, Object>) existingApiKeyField : new HashMap<>();\n+                    Object apiKeyName = authentication.getMetadata().get(ApiKeyService.API_KEY_NAME_KEY);\n+                    if (apiKeyName != null) {\n+                        apiKeyField.put(\"name\", apiKeyName);\n+                    }\n+                    Object apiKeyId = authentication.getMetadata().get(ApiKeyService.API_KEY_ID_KEY);\n+                    if (apiKeyId != null) {\n+                        apiKeyField.put(\"id\", apiKeyId);\n+                    }\n+                    if (false == apiKeyField.isEmpty()) {\n+                        userObject.put(apiKey, apiKeyField);\n+                    }\n+                    break;\n+                case REALM:\n+                    final String realmKey = \"realm\";\n+                    final Object existingRealmField = userObject.get(realmKey);\n+                    @SuppressWarnings(\"unchecked\")\n+                    final Map<String, Object> realmField =\n+                        existingRealmField instanceof Map ? (Map<String, Object>) existingRealmField : new HashMap<>();\n+                    final Object realmName = ApiKeyService.getCreatorRealmName(authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyMzkwMg=="}, "originalCommit": {"oid": "cc63be71d0c2a53dbc800d76ff7b206fb60594a3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzMzUzMw==", "bodyText": "Updated Thanks again for catching this.", "url": "https://github.com/elastic/elasticsearch/pull/51305#discussion_r376133533", "createdAt": "2020-02-06T23:10:04Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/ingest/SetSecurityUserProcessor.java", "diffHunk": "@@ -85,6 +86,47 @@ public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n                         userObject.put(\"metadata\", user.metadata());\n                     }\n                     break;\n+                case API_KEY:\n+                    final String apiKey = \"api_key\";\n+                    final Object existingApiKeyField = userObject.get(apiKey);\n+                    @SuppressWarnings(\"unchecked\")\n+                    final Map<String, Object> apiKeyField =\n+                        existingApiKeyField instanceof Map ? (Map<String, Object>) existingApiKeyField : new HashMap<>();\n+                    Object apiKeyName = authentication.getMetadata().get(ApiKeyService.API_KEY_NAME_KEY);\n+                    if (apiKeyName != null) {\n+                        apiKeyField.put(\"name\", apiKeyName);\n+                    }\n+                    Object apiKeyId = authentication.getMetadata().get(ApiKeyService.API_KEY_ID_KEY);\n+                    if (apiKeyId != null) {\n+                        apiKeyField.put(\"id\", apiKeyId);\n+                    }\n+                    if (false == apiKeyField.isEmpty()) {\n+                        userObject.put(apiKey, apiKeyField);\n+                    }\n+                    break;\n+                case REALM:\n+                    final String realmKey = \"realm\";\n+                    final Object existingRealmField = userObject.get(realmKey);\n+                    @SuppressWarnings(\"unchecked\")\n+                    final Map<String, Object> realmField =\n+                        existingRealmField instanceof Map ? (Map<String, Object>) existingRealmField : new HashMap<>();\n+                    final Object realmName = ApiKeyService.getCreatorRealmName(authentication);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyMzkwMg=="}, "originalCommit": {"oid": "cc63be71d0c2a53dbc800d76ff7b206fb60594a3"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4439, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}