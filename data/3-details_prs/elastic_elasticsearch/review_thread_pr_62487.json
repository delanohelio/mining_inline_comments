{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTA1MDM3", "number": 62487, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowOTozM1rOEkcQdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozMjo0OVrOEkkTYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjQ3MTU3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowOTozM1rOHTYzFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowOTozM1rOHTYzFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTI4Ng==", "bodyText": "This also converts IpFieldMapperTests to MapperTestCase because it just makes testing so much easier...", "url": "https://github.com/elastic/elasticsearch/pull/62487#discussion_r490091286", "createdAt": "2020-09-17T09:09:33Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java", "diffHunk": "@@ -28,61 +28,28 @@\n import org.apache.lucene.util.BytesRef;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "998736b83908585b1c6cf276b90ce0dc695737de"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjQ3NDA3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOToxMDowNVrOHTY0lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOToxMDowNVrOHTY0lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTY2OQ==", "bodyText": "This is the part that is testing the new functionality", "url": "https://github.com/elastic/elasticsearch/pull/62487#discussion_r490091669", "createdAt": "2020-09-17T09:10:05Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java", "diffHunk": "@@ -265,33 +169,29 @@ public void testNullValue() throws IOException {\n         assertEquals(DocValuesType.SORTED_SET, dvField.fieldType().docValuesType());\n         assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), dvField.binaryValue());\n         assertFalse(dvField.fieldType().stored());\n-    }\n \n-    public void testSerializeDefaults() throws Exception {\n-        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n-            .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").endObject().endObject()\n-            .endObject().endObject());\n+        mapper = createDocumentMapper(fieldMapping(b -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "998736b83908585b1c6cf276b90ce0dc695737de"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjQ3ODMyOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOToxMTowNlrOHTY3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOToxMTowNlrOHTY3LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MjMzMw==", "bodyText": "testEmptyName and testSerializeDefaults are done as part of the parent class tests.  testMeta in the parent class discovered that IpFieldMapper wasn't correctly serializing its meta param, so the test cutover is definitely worth it!", "url": "https://github.com/elastic/elasticsearch/pull/62487#discussion_r490092333", "createdAt": "2020-09-17T09:11:06Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java", "diffHunk": "@@ -265,33 +169,29 @@ public void testNullValue() throws IOException {\n         assertEquals(DocValuesType.SORTED_SET, dvField.fieldType().docValuesType());\n         assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), dvField.binaryValue());\n         assertFalse(dvField.fieldType().stored());\n-    }\n \n-    public void testSerializeDefaults() throws Exception {\n-        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n-            .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").endObject().endObject()\n-            .endObject().endObject());\n+        mapper = createDocumentMapper(fieldMapping(b -> {\n+            b.field(\"type\", \"ip\");\n+            b.nullField(\"null_value\");\n+        }));\n \n-        DocumentMapper docMapper = parser.parse(\"type\", new CompressedXContent(mapping));\n-        IpFieldMapper mapper = (IpFieldMapper)docMapper.root().getMapper(\"field\");\n-        XContentBuilder builder = XContentFactory.jsonBuilder().startObject();\n-        mapper.doXContentBody(builder, true, ToXContent.EMPTY_PARAMS);\n-        String got = Strings.toString(builder.endObject());\n+        doc = mapper.parse(source(b -> b.nullField(\"field\")));\n+        assertArrayEquals(new IndexableField[0], doc.rootDoc().getFields(\"field\"));\n \n-        // it would be nice to check the entire serialized default mapper, but there are\n-        // a whole lot of bogus settings right now it picks up from calling super.doXContentBody...\n-        assertTrue(got, got.contains(\"\\\"ignore_malformed\\\":false\"));\n-    }\n+        mapper = createDocumentMapper(fieldMapping(b -> {\n+            b.field(\"type\", \"ip\");\n+            b.field(\"null_value\", \"\");\n+        }));\n \n-    public void testEmptyName() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "998736b83908585b1c6cf276b90ce0dc695737de"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjYyMjE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0NzoyMVrOHTaOfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0NzoyMVrOHTaOfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNDY4NA==", "bodyText": "nit: formatting", "url": "https://github.com/elastic/elasticsearch/pull/62487#discussion_r490114684", "createdAt": "2020-09-17T09:47:21Z", "author": {"login": "cbuescher"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java", "diffHunk": "@@ -90,14 +82,27 @@ public Builder(String name, boolean ignoreMalformedByDefault) {\n                 = Parameter.boolParam(\"ignore_malformed\", true, m -> toType(m).ignoreMalformed, ignoreMalformedByDefault);\n         }\n \n-        Builder nullValue(InetAddress nullValue) {\n+        Builder nullValue(String nullValue) {\n             this.nullValue.setValue(nullValue);\n             return this;\n         }\n \n+        private InetAddress parseNullValue() {\n+            String nullValueAsString = nullValue.getValue();\n+            if (nullValueAsString == null || Strings.isEmpty(nullValueAsString)) {\n+                return null;\n+            }\n+            try {\n+                return InetAddresses.forString(nullValueAsString);\n+            }\n+            catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "998736b83908585b1c6cf276b90ce0dc695737de"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc4OTc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozMjo0OVrOHTlRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxODozMlrOHTnwFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NTU2MQ==", "bodyText": "I guess the missing \"meta\" was discovered by the test change?", "url": "https://github.com/elastic/elasticsearch/pull/62487#discussion_r490295561", "createdAt": "2020-09-17T14:32:49Z", "author": {"login": "cbuescher"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java", "diffHunk": "@@ -68,36 +71,48 @@ private static IpFieldMapper toType(FieldMapper in) {\n         private final Parameter<Boolean> stored = Parameter.storeParam(m -> toType(m).stored, false);\n \n         private final Parameter<Boolean> ignoreMalformed;\n-        private final Parameter<InetAddress> nullValue = new Parameter<>(\"null_value\", false, () -> null,\n-            (n, c, o) -> o == null ? null : InetAddresses.forString(o.toString()), m -> toType(m).nullValue)\n-            .setSerializer((b, f, v) -> {\n-                if (v == null) {\n-                    b.nullField(f);\n-                } else {\n-                    b.field(f, InetAddresses.toAddrString(v));\n-                }\n-            }, NetworkAddress::format)\n-            .acceptsNull();\n+        private final Parameter<String> nullValue\n+            = Parameter.stringParam(\"null_value\", false, m -> toType(m).nullValueAsString, null).acceptsNull();\n \n         private final Parameter<Map<String, String>> meta = Parameter.metaParam();\n \n         private final boolean ignoreMalformedByDefault;\n+        private final Version indexCreatedVersion;\n \n-        public Builder(String name, boolean ignoreMalformedByDefault) {\n+        public Builder(String name, boolean ignoreMalformedByDefault, Version indexCreatedVersion) {\n             super(name);\n             this.ignoreMalformedByDefault = ignoreMalformedByDefault;\n+            this.indexCreatedVersion = indexCreatedVersion;\n             this.ignoreMalformed\n                 = Parameter.boolParam(\"ignore_malformed\", true, m -> toType(m).ignoreMalformed, ignoreMalformedByDefault);\n         }\n \n-        Builder nullValue(InetAddress nullValue) {\n+        Builder nullValue(String nullValue) {\n             this.nullValue.setValue(nullValue);\n             return this;\n         }\n \n+        private InetAddress parseNullValue() {\n+            String nullValueAsString = nullValue.getValue();\n+            if (nullValueAsString == null) {\n+                return null;\n+            }\n+            try {\n+                return InetAddresses.forString(nullValueAsString);\n+            } catch (Exception e) {\n+                if (indexCreatedVersion.onOrAfter(Version.V_8_0_0)) {\n+                    throw new MapperParsingException(\"Error parsing [null_value] on field [\" + name() + \"]: \" + e.getMessage(), e);\n+                } else {\n+                    DEPRECATION_LOGGER.deprecate(\"ip_mapper_null_field\", \"Error parsing [\" + nullValue.getValue()\n+                        + \"] as IP in [null_value] on field [\" + name() + \"]); [null_value] will be ignored\");\n+                    return null;\n+                }\n+            }\n+        }\n+\n         @Override\n         protected List<Parameter<?>> getParameters() {\n-            return List.of(indexed, hasDocValues, stored, ignoreMalformed, nullValue);\n+            return List.of(indexed, hasDocValues, stored, ignoreMalformed, nullValue, meta);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed939be9c0b89816bc1a1e2317db362af5644653"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzNjI3OA==", "bodyText": "Yes!", "url": "https://github.com/elastic/elasticsearch/pull/62487#discussion_r490336278", "createdAt": "2020-09-17T15:18:32Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java", "diffHunk": "@@ -68,36 +71,48 @@ private static IpFieldMapper toType(FieldMapper in) {\n         private final Parameter<Boolean> stored = Parameter.storeParam(m -> toType(m).stored, false);\n \n         private final Parameter<Boolean> ignoreMalformed;\n-        private final Parameter<InetAddress> nullValue = new Parameter<>(\"null_value\", false, () -> null,\n-            (n, c, o) -> o == null ? null : InetAddresses.forString(o.toString()), m -> toType(m).nullValue)\n-            .setSerializer((b, f, v) -> {\n-                if (v == null) {\n-                    b.nullField(f);\n-                } else {\n-                    b.field(f, InetAddresses.toAddrString(v));\n-                }\n-            }, NetworkAddress::format)\n-            .acceptsNull();\n+        private final Parameter<String> nullValue\n+            = Parameter.stringParam(\"null_value\", false, m -> toType(m).nullValueAsString, null).acceptsNull();\n \n         private final Parameter<Map<String, String>> meta = Parameter.metaParam();\n \n         private final boolean ignoreMalformedByDefault;\n+        private final Version indexCreatedVersion;\n \n-        public Builder(String name, boolean ignoreMalformedByDefault) {\n+        public Builder(String name, boolean ignoreMalformedByDefault, Version indexCreatedVersion) {\n             super(name);\n             this.ignoreMalformedByDefault = ignoreMalformedByDefault;\n+            this.indexCreatedVersion = indexCreatedVersion;\n             this.ignoreMalformed\n                 = Parameter.boolParam(\"ignore_malformed\", true, m -> toType(m).ignoreMalformed, ignoreMalformedByDefault);\n         }\n \n-        Builder nullValue(InetAddress nullValue) {\n+        Builder nullValue(String nullValue) {\n             this.nullValue.setValue(nullValue);\n             return this;\n         }\n \n+        private InetAddress parseNullValue() {\n+            String nullValueAsString = nullValue.getValue();\n+            if (nullValueAsString == null) {\n+                return null;\n+            }\n+            try {\n+                return InetAddresses.forString(nullValueAsString);\n+            } catch (Exception e) {\n+                if (indexCreatedVersion.onOrAfter(Version.V_8_0_0)) {\n+                    throw new MapperParsingException(\"Error parsing [null_value] on field [\" + name() + \"]: \" + e.getMessage(), e);\n+                } else {\n+                    DEPRECATION_LOGGER.deprecate(\"ip_mapper_null_field\", \"Error parsing [\" + nullValue.getValue()\n+                        + \"] as IP in [null_value] on field [\" + name() + \"]); [null_value] will be ignored\");\n+                    return null;\n+                }\n+            }\n+        }\n+\n         @Override\n         protected List<Parameter<?>> getParameters() {\n-            return List.of(indexed, hasDocValues, stored, ignoreMalformed, nullValue);\n+            return List.of(indexed, hasDocValues, stored, ignoreMalformed, nullValue, meta);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NTU2MQ=="}, "originalCommit": {"oid": "ed939be9c0b89816bc1a1e2317db362af5644653"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1498, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}