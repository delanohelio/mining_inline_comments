{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1Mzg5ODMx", "number": 52363, "title": "Add HLRC for EQL search", "bodyText": "Adds EQL HLRC client with the search method.\nRelates to #51961\nThis PR will add just search. We will add stats and translate in follow up iterations.", "createdAt": "2020-02-14T13:31:37Z", "url": "https://github.com/elastic/elasticsearch/pull/52363", "merged": true, "mergeCommit": {"oid": "c7efab9c45918526785df82ee2c2b46b3d25090e"}, "closed": true, "closedAt": "2020-02-20T02:02:10Z", "author": {"login": "imotov"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEPUmDgH2gAyMzc1Mzg5ODMxOmNlYTQ2MDM3ZTdkYzU1OWFmZDdlMGMwYmNiMDVlZjBjODM0YzE0NmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFy_DvAFqTM2MDk0ODgzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/cea46037e7dc559afd7e0c0bcb05ef0c834c146c", "committedDate": "2020-02-14T13:12:51Z", "message": "Add HLRC for EQL search\n\nAdds EQL HLRC client with the search method.\n\nRelates to #51961"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzYyNzEz", "url": "https://github.com/elastic/elasticsearch/pull/52363#pullrequestreview-359362713", "createdAt": "2020-02-15T19:41:31Z", "commit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDUyNTY5", "url": "https://github.com/elastic/elasticsearch/pull/52363#pullrequestreview-359452569", "createdAt": "2020-02-17T01:41:03Z", "commit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTE5NDM4", "url": "https://github.com/elastic/elasticsearch/pull/52363#pullrequestreview-360119438", "createdAt": "2020-02-18T07:37:08Z", "commit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzozNzowOVrOFq32FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODoyNjozN1rOFq5A9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ5OTQ3Nw==", "bodyText": "Why is this property true for a release build? I may be missing something but this property being true and eql.enabled  being true as well below, means EQL is enabled in a release build, which is incorrect?", "url": "https://github.com/elastic/elasticsearch/pull/52363#discussion_r380499477", "createdAt": "2020-02-18T07:37:09Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/build.gradle", "diffHunk": "@@ -128,6 +130,10 @@ testClusters.all {\n   setting 'xpack.security.authc.api_key.enabled', 'true'\n   setting 'xpack.security.http.ssl.enabled', 'false'\n   setting 'xpack.security.transport.ssl.enabled', 'false'\n+  if (BuildParams.isSnapshotBuild() == false) {\n+    systemProperty 'es.eql_feature_flag_registered', 'true'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzY3NQ==", "bodyText": "Why not all parameters on a single line?", "url": "https://github.com/elastic/elasticsearch/pull/52363#discussion_r380503675", "createdAt": "2020-02-18T07:48:52Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.eql;\n+\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.search.searchafter.SearchAfterBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+public class EqlSearchRequest implements Validatable, ToXContentObject {\n+\n+    private String[] indices;\n+    private IndicesOptions indicesOptions = IndicesOptions.fromOptions(false,\n+        false, true, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUxMDk5Ng==", "bodyText": "Maybe better as size must be greater than 0?", "url": "https://github.com/elastic/elasticsearch/pull/52363#discussion_r380510996", "createdAt": "2020-02-18T08:08:25Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.eql;\n+\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.search.searchafter.SearchAfterBuilder;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+public class EqlSearchRequest implements Validatable, ToXContentObject {\n+\n+    private String[] indices;\n+    private IndicesOptions indicesOptions = IndicesOptions.fromOptions(false,\n+        false, true, false);\n+\n+    private QueryBuilder query = null;\n+    private String timestampField = \"@timestamp\";\n+    private String eventTypeField = \"event_type\";\n+    private String implicitJoinKeyField = \"agent.id\";\n+    private int fetchSize = 50;\n+    private SearchAfterBuilder searchAfterBuilder;\n+    private String rule;\n+\n+    static final String KEY_QUERY = \"query\";\n+    static final String KEY_TIMESTAMP_FIELD = \"timestamp_field\";\n+    static final String KEY_EVENT_TYPE_FIELD = \"event_type_field\";\n+    static final String KEY_IMPLICIT_JOIN_KEY_FIELD = \"implicit_join_key_field\";\n+    static final String KEY_SIZE = \"size\";\n+    static final String KEY_SEARCH_AFTER = \"search_after\";\n+    static final String KEY_RULE = \"rule\";\n+\n+    public EqlSearchRequest(String indices, String rule) {\n+        indices(indices);\n+        rule(rule);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        builder.startObject();\n+        if (query != null) {\n+            builder.field(KEY_QUERY, query);\n+        }\n+        builder.field(KEY_TIMESTAMP_FIELD, timestampField());\n+        builder.field(KEY_EVENT_TYPE_FIELD, eventTypeField());\n+        if (implicitJoinKeyField != null) {\n+            builder.field(KEY_IMPLICIT_JOIN_KEY_FIELD, implicitJoinKeyField());\n+        }\n+        builder.field(KEY_SIZE, fetchSize());\n+\n+        if (searchAfterBuilder != null) {\n+            builder.array(KEY_SEARCH_AFTER, searchAfterBuilder.getSortValues());\n+        }\n+\n+        builder.field(KEY_RULE, rule);\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    public EqlSearchRequest indices(String... indices) {\n+        Objects.requireNonNull(indices, \"indices must not be null\");\n+        for (String index : indices) {\n+            Objects.requireNonNull(index, \"index must not be null\");\n+        }\n+        this.indices = indices;\n+        return this;\n+    }\n+\n+    public QueryBuilder query() {\n+        return this.query;\n+    }\n+\n+    public EqlSearchRequest query(QueryBuilder query) {\n+        this.query = query;\n+        return this;\n+    }\n+\n+    public String timestampField() {\n+        return this.timestampField;\n+    }\n+\n+    public EqlSearchRequest timestampField(String timestampField) {\n+        Objects.requireNonNull(timestampField, \"timestamp field must not be null\");\n+        this.timestampField = timestampField;\n+        return this;\n+    }\n+\n+    public String eventTypeField() {\n+        return this.eventTypeField;\n+    }\n+\n+    public EqlSearchRequest eventTypeField(String eventTypeField) {\n+        Objects.requireNonNull(eventTypeField, \"event type field must not be null\");\n+        this.eventTypeField = eventTypeField;\n+        return this;\n+    }\n+\n+    public String implicitJoinKeyField() {\n+        return this.implicitJoinKeyField;\n+    }\n+\n+    public EqlSearchRequest implicitJoinKeyField(String implicitJoinKeyField) {\n+        Objects.requireNonNull(implicitJoinKeyField, \"implicit join key must not be null\");\n+        this.implicitJoinKeyField = implicitJoinKeyField;\n+        return this;\n+    }\n+\n+    public int fetchSize() {\n+        return this.fetchSize;\n+    }\n+\n+    public EqlSearchRequest fetchSize(int size) {\n+        this.fetchSize = size;\n+        if (fetchSize <= 0) {\n+            throw new IllegalArgumentException(\"size must be more than 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUxNjMxMQ==", "bodyText": "Maybe use one line for these?", "url": "https://github.com/elastic/elasticsearch/pull/52363#discussion_r380516311", "createdAt": "2020-02-18T08:21:07Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/eql/EqlSearchRequestTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.eql;\n+\n+import org.elasticsearch.client.AbstractRequestTestCase;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchModule;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlSearchRequestTests extends AbstractRequestTestCase<EqlSearchRequest, org.elasticsearch.xpack.eql.action.EqlSearchRequest> {\n+\n+    @Override\n+    protected EqlSearchRequest createClientTestInstance() {\n+        EqlSearchRequest EqlSearchRequest =\n+            new EqlSearchRequest(\"testindex\", randomAlphaOfLength(40));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUxNjg1Mg==", "bodyText": "fetchSize is required to be strictly positive in EqlSearchRequest.", "url": "https://github.com/elastic/elasticsearch/pull/52363#discussion_r380516852", "createdAt": "2020-02-18T08:22:24Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/eql/EqlSearchRequestTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.eql;\n+\n+import org.elasticsearch.client.AbstractRequestTestCase;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchModule;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlSearchRequestTests extends AbstractRequestTestCase<EqlSearchRequest, org.elasticsearch.xpack.eql.action.EqlSearchRequest> {\n+\n+    @Override\n+    protected EqlSearchRequest createClientTestInstance() {\n+        EqlSearchRequest EqlSearchRequest =\n+            new EqlSearchRequest(\"testindex\", randomAlphaOfLength(40));\n+        if (randomBoolean()) {\n+            EqlSearchRequest.fetchSize(randomIntBetween(0, Integer.MAX_VALUE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUxNzk3MA==", "bodyText": "I think fetchSize is missing from these checks.", "url": "https://github.com/elastic/elasticsearch/pull/52363#discussion_r380517970", "createdAt": "2020-02-18T08:24:57Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/eql/EqlSearchRequestTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.eql;\n+\n+import org.elasticsearch.client.AbstractRequestTestCase;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchModule;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class EqlSearchRequestTests extends AbstractRequestTestCase<EqlSearchRequest, org.elasticsearch.xpack.eql.action.EqlSearchRequest> {\n+\n+    @Override\n+    protected EqlSearchRequest createClientTestInstance() {\n+        EqlSearchRequest EqlSearchRequest =\n+            new EqlSearchRequest(\"testindex\", randomAlphaOfLength(40));\n+        if (randomBoolean()) {\n+            EqlSearchRequest.fetchSize(randomIntBetween(0, Integer.MAX_VALUE));\n+        }\n+        if (randomBoolean()) {\n+            EqlSearchRequest.implicitJoinKeyField(randomAlphaOfLength(10));\n+        }\n+        if (randomBoolean()) {\n+            EqlSearchRequest.eventTypeField(randomAlphaOfLength(10));\n+        }\n+        if (randomBoolean()) {\n+            EqlSearchRequest.rule(randomAlphaOfLength(10));\n+        }\n+        if (randomBoolean()) {\n+            EqlSearchRequest.timestampField(randomAlphaOfLength(10));\n+        }\n+        if (randomBoolean()) {\n+            EqlSearchRequest.searchAfter(randomArray(1, 4, Object[]::new, () -> randomAlphaOfLength(3)));\n+        }\n+        if (randomBoolean()) {\n+            if (randomBoolean()) {\n+                EqlSearchRequest.query(QueryBuilders.matchAllQuery());\n+            } else {\n+                EqlSearchRequest.query(QueryBuilders.termQuery(randomAlphaOfLength(10), randomInt(100)));\n+            }\n+        }\n+        return EqlSearchRequest;\n+    }\n+\n+    @Override\n+    protected org.elasticsearch.xpack.eql.action.EqlSearchRequest doParseToServerInstance(XContentParser parser) throws IOException {\n+        return org.elasticsearch.xpack.eql.action.EqlSearchRequest.fromXContent(parser).indices(\"testindex\");\n+    }\n+\n+    @Override\n+    protected void assertInstances(org.elasticsearch.xpack.eql.action.EqlSearchRequest serverInstance, EqlSearchRequest\n+        clientTestInstance) {\n+        assertThat(serverInstance.eventTypeField(), equalTo(clientTestInstance.eventTypeField()));\n+        assertThat(serverInstance.implicitJoinKeyField(), equalTo(clientTestInstance.implicitJoinKeyField()));\n+        assertThat(serverInstance.timestampField(), equalTo(clientTestInstance.timestampField()));\n+        assertThat(serverInstance.query(), equalTo(clientTestInstance.query()));\n+        assertThat(serverInstance.rule(), equalTo(clientTestInstance.rule()));\n+        assertThat(serverInstance.searchAfter(), equalTo(clientTestInstance.searchAfter()));\n+        assertThat(serverInstance.indicesOptions(), equalTo(clientTestInstance.indicesOptions()));\n+        assertThat(serverInstance.indices(), equalTo(clientTestInstance.indices()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUxODY0NQ==", "bodyText": "To me it looks more common to return hits and less common to return null and I would have switched between them. But that's a personal preference.", "url": "https://github.com/elastic/elasticsearch/pull/52363#discussion_r380518645", "createdAt": "2020-02-18T08:26:37Z", "author": {"login": "astefan"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/eql/EqlSearchResponseTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.eql;\n+\n+import org.apache.lucene.search.TotalHits;\n+import org.elasticsearch.client.AbstractResponseTestCase;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+public class EqlSearchResponseTests extends AbstractResponseTestCase<org.elasticsearch.xpack.eql.action.EqlSearchResponse,\n+    EqlSearchResponse> {\n+\n+    static List<SearchHit> randomEvents() {\n+        int size = randomIntBetween(1, 10);\n+        List<SearchHit> hits = null;\n+        if (randomBoolean()) {\n+            hits = new ArrayList<>();\n+            for (int i = 0; i < size; i++) {\n+                hits.add(new SearchHit(i, randomAlphaOfLength(10), new HashMap<>()));\n+            }\n+        }\n+        if (randomBoolean()) {\n+            return hits;\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cea46037e7dc559afd7e0c0bcb05ef0c834c146c"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb01a6e953933bd51f8691d29cbfeffbdd127615", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/bb01a6e953933bd51f8691d29cbfeffbdd127615", "committedDate": "2020-02-19T00:53:02Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38cae4eaff34a44d1ad1f6573b1cab7af7213af8", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/38cae4eaff34a44d1ad1f6573b1cab7af7213af8", "committedDate": "2020-02-19T00:53:48Z", "message": "Merge remote-tracking branch 'elastic/master' into issue-51961-hlrc-for-eql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72e484f2b92d5a696b4faa232edcdf7895735921", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/72e484f2b92d5a696b4faa232edcdf7895735921", "committedDate": "2020-02-19T01:53:56Z", "message": "Fix error message in EqlIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTQ4ODM4", "url": "https://github.com/elastic/elasticsearch/pull/52363#pullrequestreview-360948838", "createdAt": "2020-02-19T09:19:50Z", "commit": {"oid": "72e484f2b92d5a696b4faa232edcdf7895735921"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2493, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}