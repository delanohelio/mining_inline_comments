{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjYzOTUy", "number": 54197, "title": "Compatible logic for include_type_param and RestCreateIndexAction", "bodyText": "Refactoring of the compatible infrastructure to allow registering multiple RestAction under the same path. It only extends the current mechanism which allowed registering RestAction under the same path but with different method. Now it also uses a version together with a method to find a matching RestAction\nThis PR also provides a V7 compatible RestCreateIndexAction that needs include_Type_param and a different logic for parsing mapping from its body.\nfixed get/index tests\nCompatRestIT. test {yaml=get/21_stored_fields_with_types/Stored fields}\nCompatRestIT. test {yaml=get/71_source_filtering_with_types/Source\nfiltering}\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index call that\nintroduces new field mappings}\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index with\ntypeless API on an index that has types}\nhowever the last one from get is still failing\nCompatRestIT. test {yaml=get/100_mix_typeless_typeful/GET with typeless\nAPI on an index that has\nrelates #54160", "createdAt": "2020-03-25T15:40:37Z", "url": "https://github.com/elastic/elasticsearch/pull/54197", "merged": true, "mergeCommit": {"oid": "3a8303ece3e9d3cb47ae6348935c379083fe578f"}, "closed": true, "closedAt": "2020-04-28T13:24:39Z", "author": {"login": "pgomulka"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRJYeAAH2gAyMzkzNjYzOTUyOjk2ZWJiNWMzMzc2ZGM1MzA5ZTI3ZTQxODkwYWIwNDFmMmJjZWVlYzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcb_JAxAH2gAyMzkzNjYzOTUyOjU5NGIwMmY3NmMwZmQ0ZjUwZGVjYTZmZDkwYTU4MTc1NWY1NjUyNTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "96ebb5c3376dc5309e27e41890ab041f2bceeec6", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/96ebb5c3376dc5309e27e41890ab041f2bceeec6", "committedDate": "2020-03-25T15:38:40Z", "message": "init work. 221 vs 231 failing\n\nfixed get/index tests\nCompatRestIT. test {yaml=get/21_stored_fields_with_types/Stored fields}\nCompatRestIT. test {yaml=get/71_source_filtering_with_types/Source\nfiltering}\n\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index call that\nintroduces new field mappings}\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index with\ntypeless API on an index that has types}\n\nhowever the last one from get is still failing\nCompatRestIT. test {yaml=get/100_mix_typeless_typeful/GET with typeless\nAPI on an index that has"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e922bf77ab08d48a8c2c48f8073b082275cbf10", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/2e922bf77ab08d48a8c2c48f8073b082275cbf10", "committedDate": "2020-03-27T13:57:42Z", "message": "allow registering multiple rest actions under the same path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7eda970edfec379bba6e91b8ba66495ebdedd67", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/e7eda970edfec379bba6e91b8ba66495ebdedd67", "committedDate": "2020-03-27T14:07:44Z", "message": "revert out dirs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dac4b9cbcd77ffbc662d2912067f4d6f49555b6", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/5dac4b9cbcd77ffbc662d2912067f4d6f49555b6", "committedDate": "2020-03-27T14:15:22Z", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a213e6c7cc8ebb86d9c467155afe82348faff43e", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/a213e6c7cc8ebb86d9c467155afe82348faff43e", "committedDate": "2020-03-27T14:29:45Z", "message": "extend restcreateindexaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ad6779f0eb699d3623e055cb932ec041abd39b", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1ad6779f0eb699d3623e055cb932ec041abd39b", "committedDate": "2020-03-27T15:14:13Z", "message": "code style and discovery nodes in indexaction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTc4NDA1", "url": "https://github.com/elastic/elasticsearch/pull/54197#pullrequestreview-383578405", "createdAt": "2020-03-30T07:06:06Z", "commit": {"oid": "f1ad6779f0eb699d3623e055cb932ec041abd39b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowNjowN1rOF9cHNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowNjowN1rOF9cHNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2ODA1NQ==", "bodyText": "no longer need that logic. each handler is registered with a compatibleWith version.\nThe compatible API registers with Version.7\nthe current version register with Version.Current\nthis version is being used in handlers.getHandler to get the right handler", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r399968055", "createdAt": "2020-03-30T07:06:07Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -309,20 +315,14 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n                 if (handlers == null) {\n                     handler = null;\n                 } else {\n-                    handler = handlers.getHandler(requestMethod);\n+                    handler = handlers.getHandler(requestMethod, compatibleWithVersion);\n                 }\n                 if (handler == null) {\n                   if (handleNoHandlerFound(rawPath, requestMethod, uri, channel)) {\n                       return;\n                   }\n                 } else {\n-                    if(handler.compatibilityRequired() == false //regular (not removed) handlers are always dispatched", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ad6779f0eb699d3623e055cb932ec041abd39b"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/8ff3463f7558256da4aba434f14ba8446e1ebce8", "committedDate": "2020-03-30T08:03:58Z", "message": "fix double registration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDI3NjQx", "url": "https://github.com/elastic/elasticsearch/pull/54197#pullrequestreview-386027641", "createdAt": "2020-04-01T23:59:33Z", "commit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzo1OTozM1rOF_Wx-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMTowNDozN1rOF_X5Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3Nzg1MA==", "bodyText": "may want to explicitly reject if there are more then 1 mapping... or will the underlying code blow up in a meaningful way ?", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401977850", "createdAt": "2020-04-01T23:59:33Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests or responses.\n+     * Note: Support for this parameter will be removed after the transition period to typeless APIs.\n+     */\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+    public static final boolean DEFAULT_INCLUDE_TYPE_NAME_POLICY = false;\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n+        CreateIndexRequest createIndexRequest = new CreateIndexRequest(request.param(\"index\"));\n+\n+        if (request.hasContent()) {\n+            Map<String, Object> sourceAsMap = XContentHelper.convertToMap(request.requiredContent(), false, request.getXContentType()).v2();\n+\n+            request.param(INCLUDE_TYPE_NAME_PARAMETER);// just consume, it is not replaced with _doc\n+            sourceAsMap = prepareMappingsV7(sourceAsMap, request);\n+\n+            createIndexRequest.source(sourceAsMap, LoggingDeprecationHandler.INSTANCE);\n+        }\n+\n+        createIndexRequest.timeout(request.paramAsTime(\"timeout\", createIndexRequest.timeout()));\n+        createIndexRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", createIndexRequest.masterNodeTimeout()));\n+        createIndexRequest.waitForActiveShards(ActiveShardCount.parseString(request.param(\"wait_for_active_shards\")));\n+        return channel -> client.admin().indices().create(createIndexRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    static Map<String, Object> prepareMappingsV7(Map<String, Object> source, RestRequest request) {\n+        final boolean includeTypeName = request.paramAsBoolean(INCLUDE_TYPE_NAME_PARAMETER, DEFAULT_INCLUDE_TYPE_NAME_POLICY);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> mappings = (Map<String, Object>) source.get(\"mappings\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3ODkyOQ==", "bodyText": "The internal representation still requires the _doc right ?  can you make a comment here to that effect ?", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401978929", "createdAt": "2020-04-02T00:03:09Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests or responses.\n+     * Note: Support for this parameter will be removed after the transition period to typeless APIs.\n+     */\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+    public static final boolean DEFAULT_INCLUDE_TYPE_NAME_POLICY = false;\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n+        CreateIndexRequest createIndexRequest = new CreateIndexRequest(request.param(\"index\"));\n+\n+        if (request.hasContent()) {\n+            Map<String, Object> sourceAsMap = XContentHelper.convertToMap(request.requiredContent(), false, request.getXContentType()).v2();\n+\n+            request.param(INCLUDE_TYPE_NAME_PARAMETER);// just consume, it is not replaced with _doc\n+            sourceAsMap = prepareMappingsV7(sourceAsMap, request);\n+\n+            createIndexRequest.source(sourceAsMap, LoggingDeprecationHandler.INSTANCE);\n+        }\n+\n+        createIndexRequest.timeout(request.paramAsTime(\"timeout\", createIndexRequest.timeout()));\n+        createIndexRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", createIndexRequest.masterNodeTimeout()));\n+        createIndexRequest.waitForActiveShards(ActiveShardCount.parseString(request.param(\"wait_for_active_shards\")));\n+        return channel -> client.admin().indices().create(createIndexRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    static Map<String, Object> prepareMappingsV7(Map<String, Object> source, RestRequest request) {\n+        final boolean includeTypeName = request.paramAsBoolean(INCLUDE_TYPE_NAME_PARAMETER, DEFAULT_INCLUDE_TYPE_NAME_POLICY);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> mappings = (Map<String, Object>) source.get(\"mappings\");\n+\n+        if (includeTypeName && mappings.size() == 1) {\n+            // no matter what the type was, replace it with _doc\n+            Map<String, Object> newSource = new HashMap<>();\n+\n+            String typeName = mappings.keySet().iterator().next();\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, Object> typedMappings = (Map<String, Object>) mappings.get(typeName);\n+\n+            newSource.put(\"mappings\", Collections.singletonMap(MapperService.SINGLE_MAPPING_NAME, typedMappings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3OTU4Mw==", "bodyText": "Can you add some unit tests for this ?", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401979583", "createdAt": "2020-04-02T00:05:17Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests or responses.\n+     * Note: Support for this parameter will be removed after the transition period to typeless APIs.\n+     */\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+    public static final boolean DEFAULT_INCLUDE_TYPE_NAME_POLICY = false;\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n+        CreateIndexRequest createIndexRequest = new CreateIndexRequest(request.param(\"index\"));\n+\n+        if (request.hasContent()) {\n+            Map<String, Object> sourceAsMap = XContentHelper.convertToMap(request.requiredContent(), false, request.getXContentType()).v2();\n+\n+            request.param(INCLUDE_TYPE_NAME_PARAMETER);// just consume, it is not replaced with _doc\n+            sourceAsMap = prepareMappingsV7(sourceAsMap, request);\n+\n+            createIndexRequest.source(sourceAsMap, LoggingDeprecationHandler.INSTANCE);\n+        }\n+\n+        createIndexRequest.timeout(request.paramAsTime(\"timeout\", createIndexRequest.timeout()));\n+        createIndexRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", createIndexRequest.masterNodeTimeout()));\n+        createIndexRequest.waitForActiveShards(ActiveShardCount.parseString(request.param(\"wait_for_active_shards\")));\n+        return channel -> client.admin().indices().create(createIndexRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    static Map<String, Object> prepareMappingsV7(Map<String, Object> source, RestRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4MDY0OQ==", "bodyText": "why not String.valueOf or Integer.toString ?", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401980649", "createdAt": "2020-04-02T00:08:49Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/RestHandler.java", "diffHunk": "@@ -89,8 +90,8 @@ default boolean allowsUnsafeBuffers() {\n         return Collections.emptyList();\n     }\n \n-    default boolean compatibilityRequired(){\n-        return false;\n+    default String compatibleWithVersion(){\n+        return \"\"+ Version.CURRENT.major;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4MTczOQ==", "bodyText": "If possible, we should avoid using String types in contracts (unless they really are just simple strings). Here we are using a String to represent a Version, can we just pass around a Version object ?\nI think Version.7_0_0 is sufficient to pass around to mean \"7\" and having a proper Version object here allows for smarter comparisons and fewer conversions.  (and Version.CURRENT to represent current).  Then on usage, pull the major version out as close to where it is used as possible, but pass around proper Version objects.", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401981739", "createdAt": "2020-04-02T00:12:25Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/RestHandler.java", "diffHunk": "@@ -89,8 +90,8 @@ default boolean allowsUnsafeBuffers() {\n         return Collections.emptyList();\n     }\n \n-    default boolean compatibilityRequired(){\n-        return false;\n+    default String compatibleWithVersion(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4MzU5MQ==", "bodyText": "I think this variable can be removed. i think it is only used once.", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401983591", "createdAt": "2020-04-02T00:18:49Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests or responses.\n+     * Note: Support for this parameter will be removed after the transition period to typeless APIs.\n+     */\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+    public static final boolean DEFAULT_INCLUDE_TYPE_NAME_POLICY = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4MzY3Mw==", "bodyText": "This note can be removed.", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401983673", "createdAt": "2020-04-02T00:19:03Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests or responses.\n+     * Note: Support for this parameter will be removed after the transition period to typeless APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NDA2OA==", "bodyText": "+1 (lets use the the Version object here)", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401984068", "createdAt": "2020-04-02T00:20:31Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -31,36 +32,40 @@\n final class MethodHandlers {\n \n     private final String path;\n-    private final Map<RestRequest.Method, RestHandler> methodHandlers;\n+    //TODO maybe we should aim for having a type for version instead of string/byte", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NTg2Mw==", "bodyText": "May want to remove \"responses\" since this API does not include the mappings in the response.", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401985863", "createdAt": "2020-04-02T00:26:58Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests or responses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NjE1MQ==", "bodyText": "the comment is a bit confusing .. it says it not replaced with _doc .. but it actually is for the internal representation right ? suggest to just remove the comment.", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401986151", "createdAt": "2020-04-02T00:27:54Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests or responses.\n+     * Note: Support for this parameter will be removed after the transition period to typeless APIs.\n+     */\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+    public static final boolean DEFAULT_INCLUDE_TYPE_NAME_POLICY = false;\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n+        CreateIndexRequest createIndexRequest = new CreateIndexRequest(request.param(\"index\"));\n+\n+        if (request.hasContent()) {\n+            Map<String, Object> sourceAsMap = XContentHelper.convertToMap(request.requiredContent(), false, request.getXContentType()).v2();\n+\n+            request.param(INCLUDE_TYPE_NAME_PARAMETER);// just consume, it is not replaced with _doc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjYzMQ==", "bodyText": "is this part of your changes ... or just showing up in the diff ?", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401992631", "createdAt": "2020-04-02T00:51:39Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/action/ActionModule.java", "diffHunk": "@@ -701,7 +701,7 @@ public void initRestHandlers(Supplier<DiscoveryNodes> nodesInCluster) {\n \n         registerHandler.accept(new RestIndexAction());\n         registerHandler.accept(new CreateHandler());\n-        registerHandler.accept(new AutoIdHandler(clusterService));\n+        registerHandler.accept(new AutoIdHandler(nodesInCluster));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NTU0Nw==", "bodyText": "nit: this can be simplified to  methodHandlers.computeIfAbsent(method, k -> new HashMap<>()).put(version, handler); (mostly a cosmetic change though...)", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401995547", "createdAt": "2020-04-02T01:02:26Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -31,36 +32,40 @@\n final class MethodHandlers {\n \n     private final String path;\n-    private final Map<RestRequest.Method, RestHandler> methodHandlers;\n+    //TODO maybe we should aim for having a type for version instead of string/byte\n+    private final Map<RestRequest.Method, Map<String,RestHandler>> methodHandlers;\n \n-    MethodHandlers(String path, RestHandler handler, RestRequest.Method... methods) {\n+    MethodHandlers(String path, RestHandler handler, String version, RestRequest.Method... methods) {\n         this.path = path;\n         this.methodHandlers = new HashMap<>(methods.length);\n         for (RestRequest.Method method : methods) {\n-            methodHandlers.put(method, handler);\n+            methodHandlers.putIfAbsent(method, new HashMap<>());\n+            methodHandlers.get(method).put(version, handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NjEzMQ==", "bodyText": "nit: this can be simplified to   RestHandler existing = methodHandlers.computeIfAbsent(method, k -> new HashMap<>()).put(version, handler);", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r401996131", "createdAt": "2020-04-02T01:04:37Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -31,36 +32,40 @@\n final class MethodHandlers {\n \n     private final String path;\n-    private final Map<RestRequest.Method, RestHandler> methodHandlers;\n+    //TODO maybe we should aim for having a type for version instead of string/byte\n+    private final Map<RestRequest.Method, Map<String,RestHandler>> methodHandlers;\n \n-    MethodHandlers(String path, RestHandler handler, RestRequest.Method... methods) {\n+    MethodHandlers(String path, RestHandler handler, String version, RestRequest.Method... methods) {\n         this.path = path;\n         this.methodHandlers = new HashMap<>(methods.length);\n         for (RestRequest.Method method : methods) {\n-            methodHandlers.put(method, handler);\n+            methodHandlers.putIfAbsent(method, new HashMap<>());\n+            methodHandlers.get(method).put(version, handler);\n         }\n     }\n \n     /**\n      * Add a handler for an additional array of methods. Note that {@code MethodHandlers}\n      * does not allow replacing the handler for an already existing method.\n      */\n-    MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n+    MethodHandlers addMethods(RestHandler handler, String version, RestRequest.Method... methods) {\n         for (RestRequest.Method method : methods) {\n-            RestHandler existing = methodHandlers.putIfAbsent(method, handler);\n+            methodHandlers.putIfAbsent(method, new HashMap<>());\n+            RestHandler existing = methodHandlers.get(method).put(version, handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ee448754484179e05ab14815bbaa21ba02dca0a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ee448754484179e05ab14815bbaa21ba02dca0a", "committedDate": "2020-04-02T12:07:12Z", "message": "additional testing and using version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe1d2864ad79f409f01f301255af6f4ca7f51c6", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/abe1d2864ad79f409f01f301255af6f4ca7f51c6", "committedDate": "2020-04-02T12:08:45Z", "message": "unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8fc2e554bcdd809d471fbb2543bdfe9c6ae423f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/d8fc2e554bcdd809d471fbb2543bdfe9c6ae423f", "committedDate": "2020-04-02T13:16:15Z", "message": "method handlers - returning null when no handler under a method was registered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8df43b08348e8edf9556a3cb3844aee18b69cc", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ec8df43b08348e8edf9556a3cb3844aee18b69cc", "committedDate": "2020-04-03T11:25:47Z", "message": "remove unused constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8602f6566dd0dc366358cf84bfd26f5bb508ecea", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/8602f6566dd0dc366358cf84bfd26f5bb508ecea", "committedDate": "2020-04-20T09:17:28Z", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d25e0e8667ab937889205a9006967e161b270a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f3d25e0e8667ab937889205a9006967e161b270a", "committedDate": "2020-04-20T09:45:47Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7024913f90f98f9aae7284b406c901545032f0b2", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/7024913f90f98f9aae7284b406c901545032f0b2", "committedDate": "2020-04-20T11:45:19Z", "message": "compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f52dbc1de09ac72c4cb6ca3c5f69e10bcc6ff24c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f52dbc1de09ac72c4cb6ca3c5f69e10bcc6ff24c", "committedDate": "2020-04-20T13:56:59Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b07539562a5cfc9e8cc128bea316d3a249974bf", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/0b07539562a5cfc9e8cc128bea316d3a249974bf", "committedDate": "2020-04-21T11:38:15Z", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "813579444254bced0082b7994642124ee27b4cc1", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/813579444254bced0082b7994642124ee27b4cc1", "committedDate": "2020-04-22T09:22:28Z", "message": "v7 name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8193132a056cb9ebdf0b587f52a6096fa2d5967", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8193132a056cb9ebdf0b587f52a6096fa2d5967", "committedDate": "2020-04-22T13:35:36Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e28d245c7e79681c5a092f45db50188e6d33e6d", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/6e28d245c7e79681c5a092f45db50188e6d33e6d", "committedDate": "2020-04-22T14:34:10Z", "message": "javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjgyMDEz", "url": "https://github.com/elastic/elasticsearch/pull/54197#pullrequestreview-398682013", "createdAt": "2020-04-23T00:32:40Z", "commit": {"oid": "6e28d245c7e79681c5a092f45db50188e6d33e6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/a77716e7a19bccff0c07e64c651b706133f23e65", "committedDate": "2020-04-23T16:11:46Z", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzQ0OTI5", "url": "https://github.com/elastic/elasticsearch/pull/54197#pullrequestreview-400344929", "createdAt": "2020-04-25T01:53:24Z", "commit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMTo1MzoyNVrOGLukDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMjo1NToyMlrOGLvMHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1MDQxNQ==", "bodyText": "This is more of a nit but since the class itself already has V7 in the name, maybe it is redundant to have V7 in the method names as well?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CreateIndexRequest prepareV7Request(RestRequest request) {\n          \n          \n            \n                CreateIndexRequest prepareRequest(RestRequest request) {", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414950415", "createdAt": "2020-04-25T01:53:25Z", "author": {"login": "jaymode"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests.\n+     */\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+\n+    @Override\n+    public String getName() {\n+        return \"create_index_action_v7\";\n+    }\n+\n+    @Override\n+    public Version compatibleWithVersion() {\n+        return Version.V_7_0_0;\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n+        CreateIndexRequest createIndexRequest = prepareV7Request(request);\n+        return channel -> client.admin().indices().create(createIndexRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    // default scope for testing\n+    CreateIndexRequest prepareV7Request(RestRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1MDQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static Map<String, Object> prepareMappingsV7(Map<String, Object> source, RestRequest request) {\n          \n          \n            \n                static Map<String, Object> prepareMappings(Map<String, Object> source, RestRequest request) {", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414950498", "createdAt": "2020-04-25T01:53:48Z", "author": {"login": "jaymode"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class RestCreateIndexActionV7 extends RestCreateIndexAction {\n+\n+    /**\n+     * Parameter that controls whether certain REST apis should include type names in their requests.\n+     */\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+\n+    @Override\n+    public String getName() {\n+        return \"create_index_action_v7\";\n+    }\n+\n+    @Override\n+    public Version compatibleWithVersion() {\n+        return Version.V_7_0_0;\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n+        CreateIndexRequest createIndexRequest = prepareV7Request(request);\n+        return channel -> client.admin().indices().create(createIndexRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    // default scope for testing\n+    CreateIndexRequest prepareV7Request(RestRequest request) {\n+        CreateIndexRequest createIndexRequest = new CreateIndexRequest(request.param(\"index\"));\n+\n+        if (request.hasContent()) {\n+            Map<String, Object> sourceAsMap = XContentHelper.convertToMap(request.requiredContent(), false, request.getXContentType()).v2();\n+\n+            request.param(INCLUDE_TYPE_NAME_PARAMETER);// just consume, it is always replaced with _doc\n+            sourceAsMap = prepareMappingsV7(sourceAsMap, request);\n+\n+            createIndexRequest.source(sourceAsMap, LoggingDeprecationHandler.INSTANCE);\n+        }\n+\n+        createIndexRequest.timeout(request.paramAsTime(\"timeout\", createIndexRequest.timeout()));\n+        createIndexRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", createIndexRequest.masterNodeTimeout()));\n+        createIndexRequest.waitForActiveShards(ActiveShardCount.parseString(request.param(\"wait_for_active_shards\")));\n+        return createIndexRequest;\n+    }\n+\n+    static Map<String, Object> prepareMappingsV7(Map<String, Object> source, RestRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1MTMyNg==", "bodyText": "This is a different way of doing things, but I'd much rather keep the assertion out of the individual rest handlers and add logic to the RestController for throwing an exception if a handler is registered with an incompatible version. So when the version is bumped to 9 that we would throw for any handler registered with a compatible version of 7. What do you think?", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414951326", "createdAt": "2020-04-25T01:58:29Z", "author": {"login": "jaymode"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestIndexActionV7.java", "diffHunk": "@@ -55,7 +53,7 @@ public String getName() {\n \n         @Override\n         public List<Route> routes() {\n-            assert Version.CURRENT.major == 8 : \"REST API compatilbity for version 7 is only supported on version 8\";\n+            assert Version.CURRENT.major == 8 : \"REST API compatibility for version 7 is only supported on version 8\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1MTQyNA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414951424", "createdAt": "2020-04-25T01:59:10Z", "author": {"login": "jaymode"}, "path": "modules/rest-compatibility/src/test/java/org/elasticsearch/rest/compat/version7/RestCreateIndexActionV7Tests.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.test.rest.RestActionTestCase;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class RestCreateIndexActionV7Tests extends RestActionTestCase {\n+\n+    String mimeType = \"application/vnd.elasticsearch+json;compatible-with=7\";\n+    List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+\n+    RestCreateIndexActionV7 restHandler = new RestCreateIndexActionV7();\n+\n+    @Before\n+    public void setUpAction() {\n+        controller().registerHandler(restHandler);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1MTcxMw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<RestRequest.Method, Map<Version,RestHandler>> methodHandlers;\n          \n          \n            \n                private final Map<RestRequest.Method, Map<Version, RestHandler>> methodHandlers;", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414951713", "createdAt": "2020-04-25T02:00:57Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -31,23 +32,25 @@\n final class MethodHandlers {\n \n     private final String path;\n-    private final Map<RestRequest.Method, RestHandler> methodHandlers;\n+    private final Map<RestRequest.Method, Map<Version,RestHandler>> methodHandlers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1OTA0Mg==", "bodyText": "In order to preserve the contract that existed previously, this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        RestHandler existing = methodHandlers.computeIfAbsent(method, k -> new HashMap<>())\n          \n          \n            \n                            .put(version, handler);\n          \n          \n            \n                        RestHandler existing = methodHandlers.computeIfAbsent(method, k -> new HashMap<>())\n          \n          \n            \n                            .putIfAbsent(version, handler);", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414959042", "createdAt": "2020-04-25T02:44:33Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -31,23 +32,25 @@\n final class MethodHandlers {\n \n     private final String path;\n-    private final Map<RestRequest.Method, RestHandler> methodHandlers;\n+    private final Map<RestRequest.Method, Map<Version,RestHandler>> methodHandlers;\n \n-    MethodHandlers(String path, RestHandler handler, RestRequest.Method... methods) {\n+    MethodHandlers(String path, RestHandler handler, Version version, RestRequest.Method... methods) {\n         this.path = path;\n         this.methodHandlers = new HashMap<>(methods.length);\n         for (RestRequest.Method method : methods) {\n-            methodHandlers.put(method, handler);\n+            methodHandlers.computeIfAbsent(method, k -> new HashMap<>())\n+                .put(version, handler);\n         }\n     }\n \n     /**\n      * Add a handler for an additional array of methods. Note that {@code MethodHandlers}\n      * does not allow replacing the handler for an already existing method.\n      */\n-    MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n+    MethodHandlers addMethods(RestHandler handler, Version version, RestRequest.Method... methods) {\n         for (RestRequest.Method method : methods) {\n-            RestHandler existing = methodHandlers.putIfAbsent(method, handler);\n+            RestHandler existing = methodHandlers.computeIfAbsent(method, k -> new HashMap<>())\n+                .put(version, handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1OTE3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(versionToHandlers == null){\n          \n          \n            \n                    if (versionToHandlers == null) {", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414959177", "createdAt": "2020-04-25T02:45:30Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +59,29 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Return a handler for a given method and a version\n+     * If a handler for a given version is not found, the handler for Version.CURRENT is returned.\n+     * We only expect Version.CURRENT or Version.CURRENT -1. This is validated.\n+     *\n+     * Handlers can be registered under the same path and method, but will require to have different versions (CURRENT or CURRENT-1)\n+     *\n+     * //todo What if a handler was added in V8 but was not present in V7?\n+     *\n+     * @param method a REST method under which a handler was registered\n+     * @param version a Version under which a handler was registered\n+     * @return a handler\n      */\n     @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+\n+        if(versionToHandlers == null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1OTQ1MQ==", "bodyText": "IMO if you request V7 compatibility mode but the API doesn't exist in V7 then this should be a bad request (HTTP 400)", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414959451", "createdAt": "2020-04-25T02:47:07Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +59,29 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Return a handler for a given method and a version\n+     * If a handler for a given version is not found, the handler for Version.CURRENT is returned.\n+     * We only expect Version.CURRENT or Version.CURRENT -1. This is validated.\n+     *\n+     * Handlers can be registered under the same path and method, but will require to have different versions (CURRENT or CURRENT-1)\n+     *\n+     * //todo What if a handler was added in V8 but was not present in V7?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MDE0MQ==", "bodyText": "Is it ever valid for an entry in the map to have a null handler? I would think not so this could be simplified to:\nfinal RestHandler handler = versionToHandlers.get(version);\nreturn handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414960141", "createdAt": "2020-04-25T02:51:32Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +59,29 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Return a handler for a given method and a version\n+     * If a handler for a given version is not found, the handler for Version.CURRENT is returned.\n+     * We only expect Version.CURRENT or Version.CURRENT -1. This is validated.\n+     *\n+     * Handlers can be registered under the same path and method, but will require to have different versions (CURRENT or CURRENT-1)\n+     *\n+     * //todo What if a handler was added in V8 but was not present in V7?\n+     *\n+     * @param method a REST method under which a handler was registered\n+     * @param version a Version under which a handler was registered\n+     * @return a handler\n      */\n     @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+\n+        if(versionToHandlers == null){\n+            return null;\n+        }\n+        if (versionToHandlers.containsKey(version)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MDI1MA==", "bodyText": "can you add javadocs?", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414960250", "createdAt": "2020-04-25T02:52:25Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/RestHandler.java", "diffHunk": "@@ -89,8 +90,8 @@ default boolean allowsUnsafeBuffers() {\n         return Collections.emptyList();\n     }\n \n-    default boolean compatibilityRequired(){\n-        return false;\n+    default Version compatibleWithVersion(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MDY3MA==", "bodyText": "This is a nit but I prefer to keep final variables grouped together and non-final member variables grouped together. This means that these two variables should be moved under httpChannel and followed by an empty line, which would separate them from httpRequest and contentConsumed", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r414960670", "createdAt": "2020-04-25T02:55:22Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -74,8 +74,8 @@\n     private HttpRequest httpRequest;\n \n     private boolean contentConsumed = false;\n-\n     private final long requestId;\n+    private final Version compatibleApiVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "094a4627265480b5cd08826b87bce3fa9959fcc3", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/094a4627265480b5cd08826b87bce3fa9959fcc3", "committedDate": "2020-04-27T08:10:17Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Jay Modi <jaymode@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f704d0cddd4ccdfc44e31132eaa42f508de139a7", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f704d0cddd4ccdfc44e31132eaa42f508de139a7", "committedDate": "2020-04-27T08:20:59Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18651ae3fbdbad9d21396831d8a3ef8f8bff6aa3", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/18651ae3fbdbad9d21396831d8a3ef8f8bff6aa3", "committedDate": "2020-04-27T09:31:05Z", "message": "compile fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1c917100acf757a1fcacb81b6fac14d71a529e", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/0e1c917100acf757a1fcacb81b6fac14d71a529e", "committedDate": "2020-04-27T11:22:39Z", "message": "assertion on version and test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzEwNTY2", "url": "https://github.com/elastic/elasticsearch/pull/54197#pullrequestreview-401310566", "createdAt": "2020-04-27T20:42:54Z", "commit": {"oid": "0e1c917100acf757a1fcacb81b6fac14d71a529e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo0Mjo1NVrOGM2z1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo0Mjo1NVrOGM2z1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzNDEwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        : \"REST API compatibility is only supported for version \"+Version.minimumRestCompatibilityVersion().major;\n          \n          \n            \n                        : \"REST API compatibility is only supported for version \" + Version.minimumRestCompatibilityVersion().major;", "url": "https://github.com/elastic/elasticsearch/pull/54197#discussion_r416134102", "createdAt": "2020-04-27T20:42:55Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -145,6 +145,10 @@ protected void registerWithDeprecatedHandler(RestRequest.Method method, String p\n      * @param method GET, POST, etc.\n      */\n     protected void registerHandler(RestRequest.Method method, String path, RestHandler handler) {\n+        assert Version.minimumRestCompatibilityVersion() == handler.compatibleWithVersion() ||\n+            Version.CURRENT == handler.compatibleWithVersion()\n+            : \"REST API compatibility is only supported for version \"+Version.minimumRestCompatibilityVersion().major;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1c917100acf757a1fcacb81b6fac14d71a529e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93bebbf19df4582cfa257c91d9229d42089513bf", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/93bebbf19df4582cfa257c91d9229d42089513bf", "committedDate": "2020-04-28T07:04:36Z", "message": "Update server/src/main/java/org/elasticsearch/rest/RestController.java\n\nCo-Authored-By: Jay Modi <jaymode@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "281ec7f448e0d546ee2c8ca747a4e974881e81d2", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/281ec7f448e0d546ee2c8ca747a4e974881e81d2", "committedDate": "2020-04-28T07:11:33Z", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee93aec2d9bb5d694e08e4475ba6844356f496f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/4ee93aec2d9bb5d694e08e4475ba6844356f496f", "committedDate": "2020-04-28T07:47:42Z", "message": "fix method not found test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "594b02f76c0fd4f50deca6fd90a581755f565258", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/594b02f76c0fd4f50deca6fd90a581755f565258", "committedDate": "2020-04-28T07:55:54Z", "message": "Merge branch 'compat/create_index_include_type' of github.com:pgomulka/elasticsearch into compat/create_index_include_type"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1542, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}