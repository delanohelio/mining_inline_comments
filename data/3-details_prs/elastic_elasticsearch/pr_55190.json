{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDYzNDIx", "number": 55190, "title": "Remove ILambda user tree node from Painless", "bodyText": "The ILambda user tree node is no longer necessary with the addition of the ir tree as it was only supporting writing the ASM, but had no bearing on semantic checking. This moves the code necessary to build the def lambda recipes into the ir tree since we know that they are correct for compile time and the information necessary to do this is already known by the correct ir nodes.\nThis change also splits up the ir reference nodes into DefReferenceInterfaceNode, TypedInterfaceReferenceNode, and TypedCaptureReferenceNode which covers all possible cases of known information at compile time for method references. Each of these nodes is built by the user tree nodes as necessary.\nRelates #53702\nCloses #54015", "createdAt": "2020-04-14T23:30:39Z", "url": "https://github.com/elastic/elasticsearch/pull/55190", "merged": true, "mergeCommit": {"oid": "6035a2979239a407525b005af2a761a4963e958d"}, "closed": true, "closedAt": "2020-04-21T17:30:29Z", "author": {"login": "jdconrad"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcR5r_bAH2gAyNDAzNDYzNDIxOmVhYzFkNjFlNDE3MTdkZjUxYjQyZWRmNjVjYmQxNTcwYTJhNDY2NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ2bIlAH2gAyNDAzNDYzNDIxOmE0ZDM0MTY5YTQ3MjRhNDExMWNiMzBjOTY3MWU3OTc5OGI2NGYzZWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eac1d61e41717df51b42edf65cbd1570a2a46663", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/eac1d61e41717df51b42edf65cbd1570a2a46663", "committedDate": "2020-03-27T23:55:26Z", "message": "remove statement, use read instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "082e94b4a590591196625bad85750d2fcbc4f551", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/082e94b4a590591196625bad85750d2fcbc4f551", "committedDate": "2020-03-30T16:27:34Z", "message": "add tests for not a statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ca6a35cfeb2f5b8689b7258bb19eda858c03bf", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/d6ca6a35cfeb2f5b8689b7258bb19eda858c03bf", "committedDate": "2020-03-30T16:51:01Z", "message": "Merge branch 'master' into nodes0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4459ee9a8029edd7c995865bd3202830def8097c", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/4459ee9a8029edd7c995865bd3202830def8097c", "committedDate": "2020-03-30T19:02:43Z", "message": "move isDefOptimized to output instead of as mutable state on the nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eb0a513f54a2abc3a4d90877d43297a246e7dac", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/1eb0a513f54a2abc3a4d90877d43297a246e7dac", "committedDate": "2020-03-30T19:05:32Z", "message": "Merge branch 'master' into nodes0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372ec631791fceda73c22bb1dfbba176aeba7c1f", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/372ec631791fceda73c22bb1dfbba176aeba7c1f", "committedDate": "2020-03-30T19:05:58Z", "message": "Merge branch 'nodes0' into nodes1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99c54f190497586547ab073b41a0c5d39d89b5fd", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/99c54f190497586547ab073b41a0c5d39d89b5fd", "committedDate": "2020-03-30T20:18:46Z", "message": "remove AStoreable and give individual nodes responsibility to check\nwrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eceff4ba180840b185ae834b963c9b7ae1f58bc", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/2eceff4ba180840b185ae834b963c9b7ae1f58bc", "committedDate": "2020-03-30T22:18:14Z", "message": "clean up write messages and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78961f80bef311dfa557dd0288dec8a7a1564be6", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/78961f80bef311dfa557dd0288dec8a7a1564be6", "committedDate": "2020-03-30T22:57:27Z", "message": "elimate extraneous new array function reference ir node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a3a3870e6443c2cfa2cdf9a3e0920977daaaf82", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/7a3a3870e6443c2cfa2cdf9a3e0920977daaaf82", "committedDate": "2020-03-31T20:07:52Z", "message": "switch ir function ref nodes to different types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "791eca3b0d29f37c9d84fd196fb03618d33b8606", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/791eca3b0d29f37c9d84fd196fb03618d33b8606", "committedDate": "2020-03-31T20:45:25Z", "message": "remove ILambda in favor of ir tree calculating def method call recipe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b6c80f963c042dae95604d3c6b469fff10d9ac", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/94b6c80f963c042dae95604d3c6b469fff10d9ac", "committedDate": "2020-04-08T17:03:44Z", "message": "Merge branch 'master' into nodes0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7af841e35bcd8d4f845f54ffb082d3d201a51b4", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/e7af841e35bcd8d4f845f54ffb082d3d201a51b4", "committedDate": "2020-04-08T17:03:54Z", "message": "Merge branch 'nodes0' into nodes1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97549c8d5b65a1c97a361a9fb8fa30bdab0ea6db", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/97549c8d5b65a1c97a361a9fb8fa30bdab0ea6db", "committedDate": "2020-04-08T17:24:14Z", "message": "Merge branch 'nodes1' into nodes2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "251ff50fcac2ded70f1026560cf7cb67d1e86c28", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/251ff50fcac2ded70f1026560cf7cb67d1e86c28", "committedDate": "2020-04-10T15:30:43Z", "message": "Merge branch 'master' into nodes1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "198fa475e180a169ca1911734d49096dbaf4a1f3", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/198fa475e180a169ca1911734d49096dbaf4a1f3", "committedDate": "2020-04-10T15:36:40Z", "message": "Merge branch 'nodes1' into nodes2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a79f9b33ca1b8333d0e0b471c8c337674ca6f3f4", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/a79f9b33ca1b8333d0e0b471c8c337674ca6f3f4", "committedDate": "2020-04-14T23:12:20Z", "message": "Merge branch 'master' into nodes1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c93293c2ada3933550f1b64fa303a8785b7b328", "committedDate": "2020-04-14T23:12:46Z", "message": "Merge branch 'nodes1' into nodes2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjEyMDky", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395612092", "createdAt": "2020-04-17T16:44:52Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NDo1MlrOGHVY_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NDo1MlrOGHVY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzY3Ng==", "bodyText": "Reciever?", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410343676", "createdAt": "2020-04-17T16:44:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CallSubDefNode.java", "diffHunk": "@@ -45,50 +44,49 @@ public String getName() {\n         return name;\n     }\n \n-    public void setRecipe(String recipe) {\n-        this.recipe = recipe;\n-    }\n+    /* ---- end node data ---- */\n \n-    public String getRecipe() {\n-        return recipe;\n-    }\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n+        methodWriter.writeDebugInfo(location);\n \n-    public void addPointer(String pointer) {\n-        pointers.add(pointer);\n-    }\n+        StringBuilder defCallRecipe = new StringBuilder();\n+        List<Object> boostrapArguments = new ArrayList<>();\n+        List<Class<?>> typeParameters = new ArrayList<>();\n+        int capturedCount = 0;\n \n-    public List<String> getPointers() {\n-        return pointers;\n-    }\n+        typeParameters.add(Object.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjEyMTYy", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395612162", "createdAt": "2020-04-17T16:44:59Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NDo1OVrOGHVZNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NDo1OVrOGHVZNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzczMg==", "bodyText": "?", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410343732", "createdAt": "2020-04-17T16:44:59Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CallSubDefNode.java", "diffHunk": "@@ -45,50 +44,49 @@ public String getName() {\n         return name;\n     }\n \n-    public void setRecipe(String recipe) {\n-        this.recipe = recipe;\n-    }\n+    /* ---- end node data ---- */\n \n-    public String getRecipe() {\n-        return recipe;\n-    }\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n+        methodWriter.writeDebugInfo(location);\n \n-    public void addPointer(String pointer) {\n-        pointers.add(pointer);\n-    }\n+        StringBuilder defCallRecipe = new StringBuilder();\n+        List<Object> boostrapArguments = new ArrayList<>();\n+        List<Class<?>> typeParameters = new ArrayList<>();\n+        int capturedCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjEyODc1", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395612875", "createdAt": "2020-04-17T16:46:02Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NjowMlrOGHVboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NjowMlrOGHVboA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NDM1Mg==", "bodyText": "?", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410344352", "createdAt": "2020-04-17T16:46:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CallSubDefNode.java", "diffHunk": "@@ -45,50 +44,49 @@ public String getName() {\n         return name;\n     }\n \n-    public void setRecipe(String recipe) {\n-        this.recipe = recipe;\n-    }\n+    /* ---- end node data ---- */\n \n-    public String getRecipe() {\n-        return recipe;\n-    }\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n+        methodWriter.writeDebugInfo(location);\n \n-    public void addPointer(String pointer) {\n-        pointers.add(pointer);\n-    }\n+        StringBuilder defCallRecipe = new StringBuilder();\n+        List<Object> boostrapArguments = new ArrayList<>();\n+        List<Class<?>> typeParameters = new ArrayList<>();\n+        int capturedCount = 0;\n \n-    public List<String> getPointers() {\n-        return pointers;\n-    }\n+        typeParameters.add(Object.class);\n \n-    public void addTypeParameter(Class<?> typeParameter) {\n-        typeParameters.add(typeParameter);\n-    }\n+        for (int i = 0; i < getArgumentNodes().size(); ++i) {\n+            ExpressionNode argumentNode = getArgumentNodes().get(i);\n+            argumentNode.write(classWriter, methodWriter, scopeTable);\n \n-    public List<Class<?>> getTypeParameters() {\n-        return typeParameters;\n-    }\n+            typeParameters.add(argumentNode.getExpressionType());\n \n-    /* ---- end node data ---- */\n+            if (argumentNode instanceof DefInterfaceReferenceNode) {\n+                DefInterfaceReferenceNode defInterfaceReferenceNode = (DefInterfaceReferenceNode)argumentNode;\n+                boostrapArguments.add(defInterfaceReferenceNode.getDefReferenceEncoding());\n \n-    @Override\n-    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n-        methodWriter.writeDebugInfo(location);\n+                char encoding = (char)(i + capturedCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjEzMzkw", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395613390", "createdAt": "2020-04-17T16:46:46Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0Njo0NlrOGHVdPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0Njo0NlrOGHVdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NDc2Nw==", "bodyText": "don't leave me hanging!", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410344767", "createdAt": "2020-04-17T16:46:46Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DefInterfaceReferenceNode.java", "diffHunk": "@@ -20,34 +20,36 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.ClassWriter;\n-import org.elasticsearch.painless.FunctionRef;\n import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.symbol.ScopeTable;\n+import org.objectweb.asm.Opcodes;\n \n-public class NewArrayFuncRefNode extends ExpressionNode {\n+public class DefInterfaceReferenceNode extends ReferenceNode {\n \n     /* ---- begin node data ---- */\n \n-    private FunctionRef funcRef;\n+    private String defReferenceEncoding;\n \n-    public void setFuncRef(FunctionRef funcRef) {\n-        this.funcRef = funcRef;\n+    public void setDefReferenceEncoding(String defReferenceEncoding) {\n+        this.defReferenceEncoding = defReferenceEncoding;\n     }\n \n-    public FunctionRef getFuncRef() {\n-        return funcRef;\n+    public String getDefReferenceEncoding() {\n+        return defReferenceEncoding;\n     }\n \n     /* ---- end node data ---- */\n \n     @Override\n     protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n-        if (funcRef != null) {\n-            methodWriter.writeDebugInfo(location);\n-            methodWriter.invokeLambdaCall(funcRef);\n-        } else {\n-            // push a null instruction as a placeholder for future lambda instructions\n-            methodWriter.push((String)null);\n+        methodWriter.writeDebugInfo(location);\n+\n+        // place holder for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjE1Mzcx", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395615371", "createdAt": "2020-04-17T16:49:40Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0OTo0MFrOGHVjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0OTo0MFrOGHVjaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NjM0NQ==", "bodyText": "visitVarInsn -> visit variable instance?", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410346345", "createdAt": "2020-04-17T16:49:40Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DefInterfaceReferenceNode.java", "diffHunk": "@@ -20,34 +20,36 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.ClassWriter;\n-import org.elasticsearch.painless.FunctionRef;\n import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.symbol.ScopeTable;\n+import org.objectweb.asm.Opcodes;\n \n-public class NewArrayFuncRefNode extends ExpressionNode {\n+public class DefInterfaceReferenceNode extends ReferenceNode {\n \n     /* ---- begin node data ---- */\n \n-    private FunctionRef funcRef;\n+    private String defReferenceEncoding;\n \n-    public void setFuncRef(FunctionRef funcRef) {\n-        this.funcRef = funcRef;\n+    public void setDefReferenceEncoding(String defReferenceEncoding) {\n+        this.defReferenceEncoding = defReferenceEncoding;\n     }\n \n-    public FunctionRef getFuncRef() {\n-        return funcRef;\n+    public String getDefReferenceEncoding() {\n+        return defReferenceEncoding;\n     }\n \n     /* ---- end node data ---- */\n \n     @Override\n     protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n-        if (funcRef != null) {\n-            methodWriter.writeDebugInfo(location);\n-            methodWriter.invokeLambdaCall(funcRef);\n-        } else {\n-            // push a null instruction as a placeholder for future lambda instructions\n-            methodWriter.push((String)null);\n+        methodWriter.writeDebugInfo(location);\n+\n+        // place holder for\n+        methodWriter.push((String)null);\n+\n+        for (String capture : getCaptures()) {\n+            ScopeTable.Variable variable = scopeTable.getVariable(capture);\n+            methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ILOAD), variable.getSlot());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjE1NTUw", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395615550", "createdAt": "2020-04-17T16:49:55Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0OTo1NVrOGHVkGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0OTo1NVrOGHVkGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NjUyMQ==", "bodyText": "?", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410346521", "createdAt": "2020-04-17T16:49:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ReferenceNode.java", "diffHunk": "@@ -7,7 +7,7 @@\n  * not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjE2MDk5", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395616099", "createdAt": "2020-04-17T16:50:46Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1MDo0NlrOGHVlrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1MDo0NlrOGHVlrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NjkyNQ==", "bodyText": "is it ok to leak a mutable data structure here?", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410346925", "createdAt": "2020-04-17T16:50:46Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ReferenceNode.java", "diffHunk": "@@ -17,26 +17,25 @@\n  * under the License.\n  */\n \n-package org.elasticsearch.painless.node;\n+package org.elasticsearch.painless.ir;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n-/**\n- * Interface for lambda/method reference nodes. They need special handling by LDefCall.\n- * <p>\n- * This is because they know nothing about the target interface, and can only push\n- * all their captures onto the stack and defer everything until link-time.\n- */\n-interface ILambda {\n+public abstract class ReferenceNode extends ExpressionNode {\n+\n+    /* ---- begin node data ---- */\n \n-    /** Returns reference to resolve at link-time */\n-    String getPointer();\n+    private final List<String> captures = new ArrayList<>();\n \n-    /** Returns the types of captured parameters. Can be empty */\n-    List<Class<?>> getCaptures();\n+    public void addCapture(String capture) {\n+        captures.add(capture);\n+    }\n \n-    /** Returns the number of captured parameters */\n-    default int getCaptureCount() {\n-        return getCaptures().size();\n+    public List<String> getCaptures() {\n+        return captures;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjE2ODE2", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395616816", "createdAt": "2020-04-17T16:51:44Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1MTo0NFrOGHVn9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1MTo0NFrOGHVn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NzUxMQ==", "bodyText": "why is the get(0) safe here?", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410347511", "createdAt": "2020-04-17T16:51:44Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/TypedCaptureReferenceNode.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.DefBootstrap;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.symbol.ScopeTable;\n+import org.elasticsearch.painless.symbol.ScopeTable.Variable;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+public class TypedCaptureReferenceNode extends ReferenceNode {\n+\n+    /* ---- begin node data ---- */\n+\n+    private String methodName;\n+\n+    public void setMethodName(String methodName) {\n+        this.methodName = methodName;\n+    }\n+\n+    public String getMethodName() {\n+        return methodName;\n+    }\n+\n+    /* ---- end node data ---- */\n+\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n+        methodWriter.writeDebugInfo(location);\n+        Variable captured = scopeTable.getVariable(getCaptures().get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjQ0OTE0", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395644914", "createdAt": "2020-04-17T17:33:12Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozMzoxMlrOGHW99w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozMzoxMlrOGHW99w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2OTUyNw==", "bodyText": "Javadocs: \"Write out invokedynamic instruction\" or something similar.  Nothing fancy.", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410369527", "createdAt": "2020-04-17T17:33:12Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CallSubDefNode.java", "diffHunk": "@@ -45,50 +44,49 @@ public String getName() {\n         return name;\n     }\n \n-    public void setRecipe(String recipe) {\n-        this.recipe = recipe;\n-    }\n+    /* ---- end node data ---- */\n \n-    public String getRecipe() {\n-        return recipe;\n-    }\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjQ1ODc3", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395645877", "createdAt": "2020-04-17T17:34:37Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNDozN1rOGHXA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNDozN1rOGHXA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MDI2OA==", "bodyText": "\"Handle lambdas as args\"", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410370268", "createdAt": "2020-04-17T17:34:37Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CallSubDefNode.java", "diffHunk": "@@ -45,50 +44,49 @@ public String getName() {\n         return name;\n     }\n \n-    public void setRecipe(String recipe) {\n-        this.recipe = recipe;\n-    }\n+    /* ---- end node data ---- */\n \n-    public String getRecipe() {\n-        return recipe;\n-    }\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n+        methodWriter.writeDebugInfo(location);\n \n-    public void addPointer(String pointer) {\n-        pointers.add(pointer);\n-    }\n+        StringBuilder defCallRecipe = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjQ2NzIx", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395646721", "createdAt": "2020-04-17T17:35:57Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNTo1N1rOGHXDfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNTo1N1rOGHXDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MDk0MA==", "bodyText": "This is an unknown method ref that we have to resolve at runtime.", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410370940", "createdAt": "2020-04-17T17:35:57Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CallSubDefNode.java", "diffHunk": "@@ -45,50 +44,49 @@ public String getName() {\n         return name;\n     }\n \n-    public void setRecipe(String recipe) {\n-        this.recipe = recipe;\n-    }\n+    /* ---- end node data ---- */\n \n-    public String getRecipe() {\n-        return recipe;\n-    }\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n+        methodWriter.writeDebugInfo(location);\n \n-    public void addPointer(String pointer) {\n-        pointers.add(pointer);\n-    }\n+        StringBuilder defCallRecipe = new StringBuilder();\n+        List<Object> boostrapArguments = new ArrayList<>();\n+        List<Class<?>> typeParameters = new ArrayList<>();\n+        int capturedCount = 0;\n \n-    public List<String> getPointers() {\n-        return pointers;\n-    }\n+        typeParameters.add(Object.class);\n \n-    public void addTypeParameter(Class<?> typeParameter) {\n-        typeParameters.add(typeParameter);\n-    }\n+        for (int i = 0; i < getArgumentNodes().size(); ++i) {\n+            ExpressionNode argumentNode = getArgumentNodes().get(i);\n+            argumentNode.write(classWriter, methodWriter, scopeTable);\n \n-    public List<Class<?>> getTypeParameters() {\n-        return typeParameters;\n-    }\n+            typeParameters.add(argumentNode.getExpressionType());\n \n-    /* ---- end node data ---- */\n+            if (argumentNode instanceof DefInterfaceReferenceNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjQ5NDc2", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395649476", "createdAt": "2020-04-17T17:40:04Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MDowNVrOGHXLzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MDowNVrOGHXLzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3MQ==", "bodyText": "Small comment about the char encoding skip table, perhaps refing some other documentation, would be helpful.", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410373071", "createdAt": "2020-04-17T17:40:05Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CallSubDefNode.java", "diffHunk": "@@ -45,50 +44,49 @@ public String getName() {\n         return name;\n     }\n \n-    public void setRecipe(String recipe) {\n-        this.recipe = recipe;\n-    }\n+    /* ---- end node data ---- */\n \n-    public String getRecipe() {\n-        return recipe;\n-    }\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n+        methodWriter.writeDebugInfo(location);\n \n-    public void addPointer(String pointer) {\n-        pointers.add(pointer);\n-    }\n+        StringBuilder defCallRecipe = new StringBuilder();\n+        List<Object> boostrapArguments = new ArrayList<>();\n+        List<Class<?>> typeParameters = new ArrayList<>();\n+        int capturedCount = 0;\n \n-    public List<String> getPointers() {\n-        return pointers;\n-    }\n+        typeParameters.add(Object.class);\n \n-    public void addTypeParameter(Class<?> typeParameter) {\n-        typeParameters.add(typeParameter);\n-    }\n+        for (int i = 0; i < getArgumentNodes().size(); ++i) {\n+            ExpressionNode argumentNode = getArgumentNodes().get(i);\n+            argumentNode.write(classWriter, methodWriter, scopeTable);\n \n-    public List<Class<?>> getTypeParameters() {\n-        return typeParameters;\n-    }\n+            typeParameters.add(argumentNode.getExpressionType());\n \n-    /* ---- end node data ---- */\n+            if (argumentNode instanceof DefInterfaceReferenceNode) {\n+                DefInterfaceReferenceNode defInterfaceReferenceNode = (DefInterfaceReferenceNode)argumentNode;\n+                boostrapArguments.add(defInterfaceReferenceNode.getDefReferenceEncoding());\n \n-    @Override\n-    protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTable scopeTable) {\n-        methodWriter.writeDebugInfo(location);\n+                char encoding = (char)(i + capturedCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjU3NzUy", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395657752", "createdAt": "2020-04-17T17:52:37Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1MjozN1rOGHXleQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1MjozN1rOGHXleQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3OTY0MQ==", "bodyText": "Add TODO, let's pull this encoding creation out into something that makes the arguments clear.", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410379641", "createdAt": "2020-04-17T17:52:37Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ECapturingFunctionRef.java", "diffHunk": "@@ -63,51 +59,53 @@ Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input in\n                     \"not a statement: capturing function reference [\" + variable + \":\"  + call + \"] not used\"));\n         }\n \n-        FunctionRef ref = null;\n-\n         Output output = new Output();\n \n-        captured = scope.getVariable(location, variable);\n+        Variable captured = scope.getVariable(location, variable);\n         if (input.expected == null) {\n+            String defReferenceEncoding;\n             if (captured.getType() == def.class) {\n                 // dynamic implementation\n-                defPointer = \"D\" + variable + \".\" + call + \",1\";\n+                defReferenceEncoding = \"D\" + variable + \".\" + call + \",1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjU4NjUw", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395658650", "createdAt": "2020-04-17T17:53:58Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1Mzo1OFrOGHXoSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1Mzo1OFrOGHXoSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDM2MQ==", "bodyText": "Add comment on this case.", "url": "https://github.com/elastic/elasticsearch/pull/55190#discussion_r410380361", "createdAt": "2020-04-17T17:53:58Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ECapturingFunctionRef.java", "diffHunk": "@@ -63,51 +59,53 @@ Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input in\n                     \"not a statement: capturing function reference [\" + variable + \":\"  + call + \"] not used\"));\n         }\n \n-        FunctionRef ref = null;\n-\n         Output output = new Output();\n \n-        captured = scope.getVariable(location, variable);\n+        Variable captured = scope.getVariable(location, variable);\n         if (input.expected == null) {\n+            String defReferenceEncoding;\n             if (captured.getType() == def.class) {\n                 // dynamic implementation\n-                defPointer = \"D\" + variable + \".\" + call + \",1\";\n+                defReferenceEncoding = \"D\" + variable + \".\" + call + \",1\";\n             } else {\n                 // typed implementation\n-                defPointer = \"S\" + captured.getCanonicalTypeName() + \".\" + call + \",1\";\n+                defReferenceEncoding = \"S\" + captured.getCanonicalTypeName() + \".\" + call + \",1\";\n             }\n             output.actual = String.class;\n+\n+            DefInterfaceReferenceNode defInterfaceReferenceNode = new DefInterfaceReferenceNode();\n+\n+            defInterfaceReferenceNode.setLocation(location);\n+            defInterfaceReferenceNode.setExpressionType(output.actual);\n+            defInterfaceReferenceNode.addCapture(captured.getName());\n+            defInterfaceReferenceNode.setDefReferenceEncoding(defReferenceEncoding);\n+\n+            output.expressionNode = defInterfaceReferenceNode;\n         } else {\n-            defPointer = null;\n+            output.actual = input.expected;\n             // static case\n             if (captured.getType() != def.class) {\n-                ref = FunctionRef.create(scriptRoot.getPainlessLookup(), scriptRoot.getFunctionTable(), location,\n+                FunctionRef ref = FunctionRef.create(scriptRoot.getPainlessLookup(), scriptRoot.getFunctionTable(), location,\n                         input.expected, captured.getCanonicalTypeName(), call, 1);\n-            }\n-            output.actual = input.expected;\n-        }\n \n-        CapturingFuncRefNode capturingFuncRefNode = new CapturingFuncRefNode();\n+                TypedInterfaceReferenceNode typedInterfaceReferenceNode = new TypedInterfaceReferenceNode();\n+                typedInterfaceReferenceNode.setLocation(location);\n+                typedInterfaceReferenceNode.setExpressionType(output.actual);\n+                typedInterfaceReferenceNode.addCapture(captured.getName());\n+                typedInterfaceReferenceNode.setReference(ref);\n \n-        capturingFuncRefNode.setLocation(location);\n-        capturingFuncRefNode.setExpressionType(output.actual);\n-        capturingFuncRefNode.setCapturedName(captured.getName());\n-        capturingFuncRefNode.setName(call);\n-        capturingFuncRefNode.setPointer(defPointer);\n-        capturingFuncRefNode.setFuncRef(ref);\n+                output.expressionNode = typedInterfaceReferenceNode;\n+            } else {\n+                TypedCaptureReferenceNode typedCaptureReferenceNode = new TypedCaptureReferenceNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjU5NTQ4", "url": "https://github.com/elastic/elasticsearch/pull/55190#pullrequestreview-395659548", "createdAt": "2020-04-17T17:55:15Z", "commit": {"oid": "4c93293c2ada3933550f1b64fa303a8785b7b328"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8076bfa4366e371aaba802a038db3c56ce43074", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/c8076bfa4366e371aaba802a038db3c56ce43074", "committedDate": "2020-04-21T14:51:10Z", "message": "Merge branch 'master' into nodes2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d34169a4724a4111cb30c9671e79798b64f3ef", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/a4d34169a4724a4111cb30c9671e79798b64f3ef", "committedDate": "2020-04-21T16:38:42Z", "message": "response to pr comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3336, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}