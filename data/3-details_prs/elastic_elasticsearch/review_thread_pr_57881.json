{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODQzMjM4", "number": 57881, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowOTowMlrOEEbQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowOTowMlrOEEbQ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDc2NDUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/test/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapperTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowOTowMlrOGiCr0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowOTowMlrOGiCr0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0ODc1NQ==", "bodyText": "maybe add a specific test for case (e.g: ProgramFiles => programFiles)  and one without a common prefix ?", "url": "https://github.com/elastic/elasticsearch/pull/57881#discussion_r438348755", "createdAt": "2020-06-10T19:09:02Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/test/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapperTests.java", "diffHunk": "@@ -485,6 +494,54 @@ public void testFuzzyAcceleration() throws IOException, ParseException {\n         }\n     }    \n     \n+    \n+    static class RangeTest {\n+        String lower;\n+        String upper;\n+        String ngrams;\n+\n+        RangeTest(\n+            String lower,\n+            String upper,\n+            String ngrams\n+        ) {\n+            super();\n+            this.lower = lower;\n+            this.upper = upper;\n+            this.ngrams = ngrams;\n+        }\n+\n+        Query getRangeQuery() {\n+            return wildcardFieldType.fieldType().rangeQuery(lower, upper, true, true, null, null, null, MOCK_QSC);\n+        }\n+\n+        Query getExpectedApproxQuery() throws ParseException {\n+            BooleanQuery.Builder bq = new BooleanQuery.Builder();\n+            if (ngrams != null) {\n+                String[] tokens = ngrams.split(\" \");\n+                for (String token : tokens) {\n+                    Query ngramQuery = new TermQuery(\n+                        new Term(WILDCARD_FIELD_NAME, token.replaceAll(\"_\", WildcardFieldMapper.TOKEN_START_STRING))\n+                    );\n+                    bq.add(ngramQuery, Occur.MUST);\n+                }\n+            }\n+            return bq.build();\n+        }\n+    }    \n+    \n+    public void testRangeAcceleration() throws IOException, ParseException {\n+\n+        RangeTest[] tests = {\n+            new RangeTest(\"c:/a.txt\", \"c:/z.txt\", \"_c: c:/\"),\n+            new RangeTest(\"C:/ProgramFiles/a.txt\", \"C:/ProgramFiles/z.txt\", \"_c: :/p pro ogr ram mfi ile es/\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67942df6667ea730c6cb7b8edf87af7b802451a"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1738, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}