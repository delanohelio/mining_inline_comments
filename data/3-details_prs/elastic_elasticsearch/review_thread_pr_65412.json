{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2Mzg4NzU5", "number": 65412, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoyMDo0OFrOE9HGGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoyMDo0OFrOE9HGGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTE0ODQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/ilm/LifecycleLicenseIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoyMDo0OFrOH5nvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoyMDo0OFrOH5nvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MjAzMw==", "bodyText": "can we also check the actual failure here? So that we know that the action failed because of a license exception? Just sanity double checking, since we also test that everything is working after license is restored.", "url": "https://github.com/elastic/elasticsearch/pull/65412#discussion_r530182033", "createdAt": "2020-11-25T08:20:48Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/ilm/LifecycleLicenseIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.license.License;\n+import org.elasticsearch.license.TestUtils;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.PhaseCompleteStep;\n+import org.elasticsearch.xpack.core.ilm.SearchableSnapshotAction;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.createComposableTemplate;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.createNewSingletonPolicy;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.createSnapshotRepo;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.explainIndex;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.indexDocument;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.rolloverMaxOneDocCondition;\n+import static org.hamcrest.CoreMatchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.is;\n+\n+public class LifecycleLicenseIT extends ESRestTestCase {\n+\n+    private String policy;\n+    private String dataStream;\n+\n+    @Before\n+    public void refreshDatastream() {\n+        dataStream = \"logs-\" + randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        policy = \"policy-\" + randomAlphaOfLength(5);\n+    }\n+\n+    @After\n+    public void resetLicenseToTrial() throws Exception {\n+        putTrialLicense();\n+        checkCurrentLicenseIs(\"trial\");\n+    }\n+\n+    public void testCreatePolicyUsingActionAndNonCompliantLicense() throws Exception {\n+        String snapshotRepo = randomAlphaOfLengthBetween(4, 10);\n+        createSnapshotRepo(client(), snapshotRepo, randomBoolean());\n+\n+        assertOK(client().performRequest(new Request(\"DELETE\", \"/_license\")));\n+        checkCurrentLicenseIs(\"basic\");\n+\n+        ResponseException exception = expectThrows(ResponseException.class,\n+            () -> createNewSingletonPolicy(client(), policy, \"cold\", new SearchableSnapshotAction(snapshotRepo, true)));\n+        assertThat(EntityUtils.toString(exception.getResponse().getEntity()),\n+            containsStringIgnoringCase(\"policy [\" + policy + \"] defines the [\" + SearchableSnapshotAction.NAME + \"] action but the \" +\n+                \"current license is non-compliant for [searchable-snapshots]\"));\n+    }\n+\n+    public void testSearchableSnapshotActionErrorsOnInvalidLicense() throws Exception {\n+        String snapshotRepo = randomAlphaOfLengthBetween(4, 10);\n+        createSnapshotRepo(client(), snapshotRepo, randomBoolean());\n+        createNewSingletonPolicy(client(), policy, \"cold\", new SearchableSnapshotAction(snapshotRepo, true));\n+\n+        createComposableTemplate(client(), \"template-name\", dataStream,\n+            new Template(Settings.builder().put(LifecycleSettings.LIFECYCLE_NAME, policy).build(), null, null));\n+\n+        assertOK(client().performRequest(new Request(\"DELETE\", \"/_license\")));\n+        checkCurrentLicenseIs(\"basic\");\n+\n+        indexDocument(client(), dataStream, true);\n+\n+        // rolling over the data stream so we can apply the searchable snapshot policy to a backing index that's not the write index\n+        rolloverMaxOneDocCondition(client(), dataStream);\n+\n+        String backingIndexName = DataStream.getDefaultBackingIndexName(dataStream, 1L);\n+        // the searchable_snapshot action should start failing (and retrying) due to invalid license\n+        assertBusy(() -> {\n+            Map<String, Object> explainIndex = explainIndex(client(), backingIndexName);\n+            assertThat(explainIndex.get(\"action\"), is(SearchableSnapshotAction.NAME));\n+            assertThat((Integer) explainIndex.get(\"failed_step_retry_count\"), greaterThanOrEqualTo(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12643fe102a9f9e7932a4bd9f49ce07f0391a178"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2028, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}