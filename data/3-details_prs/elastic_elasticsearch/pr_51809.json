{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzExNzQ2", "number": 51809, "title": "EQL: Introduce basic execution pipeline", "bodyText": "Add main classes that form the 'execution' pipeline are added - most of\nthem have no functionality; the purpose of this PR is to add flesh out\nthe contract between the various moving parts so that work can start on\nthem independently.", "createdAt": "2020-02-03T13:13:45Z", "url": "https://github.com/elastic/elasticsearch/pull/51809", "merged": true, "mergeCommit": {"oid": "9a1bae50a49af7fe8467b74b154c0d82c6bb9a19"}, "closed": true, "closedAt": "2020-02-03T20:44:08Z", "author": {"login": "costin"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAssZgAH2gAyMzcwMzExNzQ2OmI3YmZiMWUzMDVmYzMxNWUxY2Q4ZDA2M2JiYmNiYjUwNGI2MjQxNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAzLLZgH2gAyMzcwMzExNzQ2OjZmNTA0YTA0MGZjNmIzYmFlNjNjZTgyNjc2ZTE2ZmI2NzA1OGVhYWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/b7bfb1e305fc315e1cd8d063bbbcbb504b62416b", "committedDate": "2020-02-03T13:10:24Z", "message": "EQL: Introduce basic execution pipeline\n\nThe main classes that form the 'execution' pipeline are added - most of\nthem have no functionality; the purpose of this PR is to add flesh out\nthe contract between the various moving parts so that work can start on\nthem independently."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzM4Nzgw", "url": "https://github.com/elastic/elasticsearch/pull/51809#pullrequestreview-352338780", "createdAt": "2020-02-03T15:27:43Z", "commit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNzo0M1rOFk1Vqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo0NToxMVrOFk1_IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2Njk1NQ==", "bodyText": "include message to hashCode and equals impl?", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374166955", "createdAt": "2020-02-03T15:27:43Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Failure.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.analysis;\n+\n+import org.elasticsearch.xpack.ql.tree.Node;\n+\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+\n+class Failure {\n+\n+    private final Node<?> node;\n+    private final String message;\n+\n+    Failure(Node<?> node, String message) {\n+        this.node = node;\n+        this.message = message;\n+    }\n+\n+    Node<?> node() {\n+        return node;\n+    }\n+\n+    String message() {\n+        return message;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(node);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        Failure other = (Failure) obj;\n+        return Objects.equals(node, other.node);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3NDEyNw==", "bodyText": "nit: a bit deeply nested imho, not sure what are the current guidelines", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374174127", "createdAt": "2020-02-03T15:39:36Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Verifier.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.analysis;\n+\n+import org.elasticsearch.xpack.ql.capabilities.Unresolvable;\n+import org.elasticsearch.xpack.ql.expression.Attribute;\n+import org.elasticsearch.xpack.ql.expression.UnresolvedAttribute;\n+import org.elasticsearch.xpack.ql.plan.logical.LogicalPlan;\n+import org.elasticsearch.xpack.ql.tree.Node;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.ql.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.xpack.eql.analysis.Failure.fail;\n+\n+/**\n+ * The verifier has the role of checking the analyzed tree for failures and build a list of failures following this check.\n+ * It is created in the plan executor along with the metrics instance passed as constructor parameter.\n+ */\n+public class Verifier {\n+\n+    public Map<Node<?>, String> verifyFailures(LogicalPlan plan) {\n+        Collection<Failure> failures = verify(plan);\n+        return failures.stream().collect(toMap(Failure::node, Failure::message));\n+    }\n+\n+    Collection<Failure> verify(LogicalPlan plan) {\n+        Set<Failure> failures = new LinkedHashSet<>();\n+\n+        // start bottom-up\n+        plan.forEachUp(p -> {\n+            if (p.analyzed()) {\n+                return;\n+            }\n+\n+            // if the children are unresolved, so will this node; counting it will only add noise\n+            if (p.childrenResolved() == false) {\n+                return;\n+            }\n+\n+            Set<Failure> localFailures = new LinkedHashSet<>();\n+\n+            if (p instanceof Unresolvable) {\n+                localFailures.add(fail(p, ((Unresolvable) p).unresolvedMessage()));\n+            } else {\n+                p.forEachExpressions(e -> {\n+                    // everything is fine, skip expression\n+                    if (e.resolved()) {\n+                        return;\n+                    }\n+\n+                    e.forEachUp(ae -> {\n+                        // we're only interested in the children\n+                        if (ae.childrenResolved() == false) {\n+                            return;\n+                        }\n+                        if (ae instanceof Unresolvable) {\n+                            // handle Attributes different to provide more context\n+                            if (ae instanceof UnresolvedAttribute) {\n+                                UnresolvedAttribute ua = (UnresolvedAttribute) ae;\n+                                // only work out the synonyms for raw unresolved attributes\n+                                if (ua.customMessage() == false) {\n+                                    boolean useQualifier = ua.qualifier() != null;\n+                                    List<String> potentialMatches = new ArrayList<>();\n+                                    for (Attribute a : p.inputSet()) {\n+                                        String nameCandidate = useQualifier ? a.qualifiedName() : a.name();\n+                                        // add only primitives (object types would only result in another error)\n+                                        if (DataTypes.isUnsupported(a.dataType()) == false && DataTypes.isPrimitive(a.dataType())) {\n+                                            potentialMatches.add(nameCandidate);\n+                                        }\n+                                    }\n+\n+                                    List<String> matches = StringUtils.findSimilar(ua.qualifiedName(), potentialMatches);\n+                                    if (matches.isEmpty() == false) {\n+                                        ae = ua.withUnresolvedMessage(UnresolvedAttribute.errorMessage(ua.qualifiedName(), matches));\n+                                    }\n+                                }\n+                            }\n+\n+                            localFailures.add(fail(ae, ((Unresolvable) ae).unresolvedMessage()));\n+                            return;\n+                        }\n+                        // type resolution\n+                        if (ae.typeResolved().unresolved()) {\n+                            localFailures.add(fail(ae, ae.typeResolved().message()));\n+                        }\n+\n+                    });\n+                });\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3NzU2OQ==", "bodyText": "probably address this TODO before merging to master?", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374177569", "createdAt": "2020-02-03T15:45:11Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/EqlPlugin.java", "diffHunk": "@@ -60,6 +87,11 @@ boolean isSnapshot() {\n         return Build.CURRENT.isSnapshot();\n     }\n \n+    // TODO: this needs to be used by all plugin methods - including getActions and createComponents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjc0MTkx", "url": "https://github.com/elastic/elasticsearch/pull/51809#pullrequestreview-352274191", "createdAt": "2020-02-03T14:03:21Z", "commit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDowMzoyMVrOFkyYMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjozNzowOFrOFk35cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExODQ1MQ==", "bodyText": "different -> differently", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374118451", "createdAt": "2020-02-03T14:03:21Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Verifier.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.analysis;\n+\n+import org.elasticsearch.xpack.ql.capabilities.Unresolvable;\n+import org.elasticsearch.xpack.ql.expression.Attribute;\n+import org.elasticsearch.xpack.ql.expression.UnresolvedAttribute;\n+import org.elasticsearch.xpack.ql.plan.logical.LogicalPlan;\n+import org.elasticsearch.xpack.ql.tree.Node;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.ql.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.xpack.eql.analysis.Failure.fail;\n+\n+/**\n+ * The verifier has the role of checking the analyzed tree for failures and build a list of failures following this check.\n+ * It is created in the plan executor along with the metrics instance passed as constructor parameter.\n+ */\n+public class Verifier {\n+\n+    public Map<Node<?>, String> verifyFailures(LogicalPlan plan) {\n+        Collection<Failure> failures = verify(plan);\n+        return failures.stream().collect(toMap(Failure::node, Failure::message));\n+    }\n+\n+    Collection<Failure> verify(LogicalPlan plan) {\n+        Set<Failure> failures = new LinkedHashSet<>();\n+\n+        // start bottom-up\n+        plan.forEachUp(p -> {\n+            if (p.analyzed()) {\n+                return;\n+            }\n+\n+            // if the children are unresolved, so will this node; counting it will only add noise\n+            if (p.childrenResolved() == false) {\n+                return;\n+            }\n+\n+            Set<Failure> localFailures = new LinkedHashSet<>();\n+\n+            if (p instanceof Unresolvable) {\n+                localFailures.add(fail(p, ((Unresolvable) p).unresolvedMessage()));\n+            } else {\n+                p.forEachExpressions(e -> {\n+                    // everything is fine, skip expression\n+                    if (e.resolved()) {\n+                        return;\n+                    }\n+\n+                    e.forEachUp(ae -> {\n+                        // we're only interested in the children\n+                        if (ae.childrenResolved() == false) {\n+                            return;\n+                        }\n+                        if (ae instanceof Unresolvable) {\n+                            // handle Attributes different to provide more context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NzQ5OQ==", "bodyText": "writableRegistry -> writeableRegistry", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374197499", "createdAt": "2020-02-03T16:18:09Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/PlanExecutor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.xpack.eql.analysis.Analyzer;\n+import org.elasticsearch.xpack.eql.analysis.PreAnalyzer;\n+import org.elasticsearch.xpack.eql.analysis.Verifier;\n+import org.elasticsearch.xpack.eql.optimizer.Optimizer;\n+import org.elasticsearch.xpack.eql.planner.Planner;\n+import org.elasticsearch.xpack.eql.session.Configuration;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.eql.session.Results;\n+import org.elasticsearch.xpack.ql.expression.function.FunctionRegistry;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+public class PlanExecutor {\n+    private final Client client;\n+    private final NamedWriteableRegistry writableRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5ODM2Ng==", "bodyText": "We are assuming that metrics will be passed in the constructor in the same way as SQL, right?", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374198366", "createdAt": "2020-02-03T16:19:37Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/Verifier.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.analysis;\n+\n+import org.elasticsearch.xpack.ql.capabilities.Unresolvable;\n+import org.elasticsearch.xpack.ql.expression.Attribute;\n+import org.elasticsearch.xpack.ql.expression.UnresolvedAttribute;\n+import org.elasticsearch.xpack.ql.plan.logical.LogicalPlan;\n+import org.elasticsearch.xpack.ql.tree.Node;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+import org.elasticsearch.xpack.ql.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.xpack.eql.analysis.Failure.fail;\n+\n+/**\n+ * The verifier has the role of checking the analyzed tree for failures and build a list of failures following this check.\n+ * It is created in the plan executor along with the metrics instance passed as constructor parameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwODg4Mg==", "bodyText": "Is the clientId acting as a sticky session kind of identifier?", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374208882", "createdAt": "2020-02-03T16:37:08Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/session/Configuration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.session;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilder;\n+\n+import java.time.ZoneId;\n+\n+public class Configuration extends org.elasticsearch.xpack.ql.session.Configuration {\n+    \n+    private final String[] indices;\n+    private final TimeValue requestTimeout;\n+    private final String clientId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bfb1e305fc315e1cd8d063bbbcbb504b62416b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff5a4bd73972d767bdba3b289359349d81f9747", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/cff5a4bd73972d767bdba3b289359349d81f9747", "committedDate": "2020-02-03T16:45:38Z", "message": "Address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTE0OTQ1", "url": "https://github.com/elastic/elasticsearch/pull/51809#pullrequestreview-352514945", "createdAt": "2020-02-03T19:46:30Z", "commit": {"oid": "cff5a4bd73972d767bdba3b289359349d81f9747"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo0NjozMFrOFk9rsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo0NjozMFrOFk9rsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMzY2Nw==", "bodyText": "at some point, we'll also add join_keys and the other fields mentioned in the initial issue, but this is already good enough as a placeholder until then", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374303667", "createdAt": "2020-02-03T19:46:30Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/session/Sequence.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.session;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.util.List;\n+\n+public class Sequence {\n+\n+    private final List<Tuple<Object, List<SearchHit>>> events;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff5a4bd73972d767bdba3b289359349d81f9747"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTE1NDUy", "url": "https://github.com/elastic/elasticsearch/pull/51809#pullrequestreview-352515452", "createdAt": "2020-02-03T19:47:16Z", "commit": {"oid": "cff5a4bd73972d767bdba3b289359349d81f9747"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo0NzoxNlrOFk9tIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo0NzoxNlrOFk9tIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNDAzMg==", "bodyText": "should this stay?\nalso, does this make sense for QL?", "url": "https://github.com/elastic/elasticsearch/pull/51809#discussion_r374304032", "createdAt": "2020-02-03T19:47:16Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/physical/PhysicalPlan.java", "diffHunk": "@@ -13,12 +13,6 @@\n \n import java.util.List;\n \n-/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff5a4bd73972d767bdba3b289359349d81f9747"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTIwMjM3", "url": "https://github.com/elastic/elasticsearch/pull/51809#pullrequestreview-352520237", "createdAt": "2020-02-03T19:54:56Z", "commit": {"oid": "cff5a4bd73972d767bdba3b289359349d81f9747"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f504a040fc6b3bae63ce82676e16fb67058eaaf", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/6f504a040fc6b3bae63ce82676e16fb67058eaaf", "committedDate": "2020-02-03T20:43:27Z", "message": "Revert accidental changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2967, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}