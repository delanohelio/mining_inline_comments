{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTg0NDE5", "number": 52385, "title": "Introduce system index APIs for Kibana", "bodyText": "This commit introduces a module for Kibana that exposes REST APIs that\nwill be used by Kibana for access to its system indices. These APIs are wrapped\nversions of the existing REST endpoints. A new setting is also introduced since\nthe Kibana system indices' names are allowed to be changed by a user in case\nmultiple instances of Kibana use the same instance of Elasticsearch.\nAdditionally, the ThreadContext has been extended to indicate that the use of\nsystem indices may be allowed in a request. This will be built upon in the future\nfor the protection of system indices.", "createdAt": "2020-02-14T21:41:34Z", "url": "https://github.com/elastic/elasticsearch/pull/52385", "merged": true, "mergeCommit": {"oid": "4c0e8f12cbc078c1b85a67af76ed8a4be11a6f01"}, "closed": true, "closedAt": "2020-03-02T21:32:42Z", "author": {"login": "jaymode"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEWi3_gH2gAyMzc1NTg0NDE5OjllOGMyMTMzYTk0ZGMxZWVlZmU2NDJiOGZmYzYwOTA4ZjZlMTA4YmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJzKF9gH2gAyMzc1NTg0NDE5OjY4MTkyNGU4ZDNmNzJlNTliODZhMDMxYjJmNGQwMjc3NzhhYWJhMjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e8c2133a94dc1eeefe642b8ffc60908f6e108be", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/9e8c2133a94dc1eeefe642b8ffc60908f6e108be", "committedDate": "2020-02-14T21:37:47Z", "message": "Introduce system index APIs for Kibana\n\nThis commit introduces a module for Kibana that exposes REST APIs that\nwill be used by Kibana for access to its system indices."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c8c76250baa6ec638fa156568e959b499e7f72", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/80c8c76250baa6ec638fa156568e959b499e7f72", "committedDate": "2020-02-14T21:50:05Z", "message": "update method signatures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cb8a65cd070403e9d6b35e1421ebdeb49466068", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/8cb8a65cd070403e9d6b35e1421ebdeb49466068", "committedDate": "2020-02-14T21:57:56Z", "message": "s/compileOnly/compile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQ1MTk2", "url": "https://github.com/elastic/elasticsearch/pull/52385#pullrequestreview-359245196", "createdAt": "2020-02-14T22:02:34Z", "commit": {"oid": "8cb8a65cd070403e9d6b35e1421ebdeb49466068"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowMjozNVrOFqE7hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowMjozNVrOFqE7hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTI4NA==", "bodyText": "This caught my eye and after a quick search I see we do this all over the place. @rjernst any idea why were are explicitly declaring a dependency on the publishing project's runtime configuration? This is generally redundant as the default configuration for Java projects is this already.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r379665284", "createdAt": "2020-02-14T22:02:35Z", "author": {"login": "mark-vieira"}, "path": "modules/kibana/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Plugin exposing APIs for Kibana system indices'\n+  classname 'org.elasticsearch.kibana.KibanaPlugin'\n+}\n+\n+dependencies {\n+  compile project(path: ':modules:reindex', configuration: 'runtime')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb8a65cd070403e9d6b35e1421ebdeb49466068"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b6290de81291fd90dd9458183e6ecf385bde8b", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/39b6290de81291fd90dd9458183e6ecf385bde8b", "committedDate": "2020-02-18T16:37:49Z", "message": "fix threadcontext serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d80bd35a2e13da6ca5535b1702162485cd368cc", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/3d80bd35a2e13da6ca5535b1702162485cd368cc", "committedDate": "2020-02-18T16:38:21Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758409c253d26d5b5e01bd8360446baa2c2dc9e2", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/758409c253d26d5b5e01bd8360446baa2c2dc9e2", "committedDate": "2020-02-18T20:45:58Z", "message": "add simple test for client that limits requests/indices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45776166b848bf3c0a9aef962b9079b47c8b5580", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/45776166b848bf3c0a9aef962b9079b47c8b5580", "committedDate": "2020-02-18T21:14:37Z", "message": "set version on streamgit add .git add .git add ."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46325b2d08ac22af5eb43ce1f35254b82b3d8dd6", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/46325b2d08ac22af5eb43ce1f35254b82b3d8dd6", "committedDate": "2020-02-19T19:33:09Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0194a8f9cdbd8a238738635f07edb2c4efaa770", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0194a8f9cdbd8a238738635f07edb2c4efaa770", "committedDate": "2020-02-19T20:53:10Z", "message": "add tests for APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86a27ce6704b437b64010fcec4f289a9307437dc", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/86a27ce6704b437b64010fcec4f289a9307437dc", "committedDate": "2020-02-20T17:17:04Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e5e87685b1084fc88ed06794eeabb914e6bf25", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/16e5e87685b1084fc88ed06794eeabb914e6bf25", "committedDate": "2020-02-20T17:27:17Z", "message": "rest controller test for system index restriction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fa9aef67db86315e4aeda90a8ed808d728e247", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/d9fa9aef67db86315e4aeda90a8ed808d728e247", "committedDate": "2020-02-20T18:54:19Z", "message": "threadcontext tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15aad51ae3fc65e8df98172df1a366300fbf6cf7", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/15aad51ae3fc65e8df98172df1a366300fbf6cf7", "committedDate": "2020-02-20T20:25:15Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dabec85fd4a289cfc5e4227e0d95cc815929a8d", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/2dabec85fd4a289cfc5e4227e0d95cc815929a8d", "committedDate": "2020-02-20T20:26:29Z", "message": "no randomBoolean in static value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e735e909e8160a55b7ea7ee580df3aed5bd740", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/43e735e909e8160a55b7ea7ee580df3aed5bd740", "committedDate": "2020-02-25T16:49:31Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bf05f16d3611e4b739b6b712176697daabaff55", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/3bf05f16d3611e4b739b6b712176697daabaff55", "committedDate": "2020-02-26T20:02:38Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/2a749968b156b57cc1258f4272f37415f03c9325", "committedDate": "2020-02-26T20:33:31Z", "message": "add APIs listed in Kibana issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjI1NzQ4", "url": "https://github.com/elastic/elasticsearch/pull/52385#pullrequestreview-365225748", "createdAt": "2020-02-26T20:41:05Z", "commit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MTowNlrOFu7bKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MTowNlrOFu7bKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw==", "bodyText": "@tylersmalley I was looking at elastic/kibana#49764 and I wanted to make sure I understood the request there for the paths where you have _kibana/{kibana.name}/ and kibana.name would be understood by elasticsearch based on settings.\nRight now in this plugin, the setting I have would look like this in the elasticsearch.yml file:\nkibana.system_indices: [ \".kibana\", \".kibana_task_manager\", \".reporting\" ]\nI think the Kibana issue is actually looking for something more like:\nkibana:\n  instances:\n    my_kibana:\n       kibana_index: \".my-kibana\"\n       task_manager_index: \".my-tm\"\n       reporting_index: \".my-reports\"\nIs this correct?", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384752427", "createdAt": "2020-02-26T20:41:06Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/2a8b63747fe4a06df2ac63192c9c5c8931370dd5", "committedDate": "2020-02-26T20:53:46Z", "message": "add reporting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzAzODYz", "url": "https://github.com/elastic/elasticsearch/pull/52385#pullrequestreview-365303863", "createdAt": "2020-02-26T22:52:41Z", "commit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1Mjo0MVrOFu_WFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyNToxNFrOFvAEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNjY2Mg==", "bodyText": "Nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))\n          \n          \n            \n                        .map(pattern -> new SystemIndexDescriptor(pattern, \"System index used by kibana\"))\n          \n      \n    \n    \n  \n\nThe description applies to a single index, not multiple.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384816662", "createdAt": "2020-02-26T22:52:41Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",\n+        unmodifiableList(Arrays.asList(\".kibana\", \".kibana_task_manager\", \".reporting\")), Function.identity(), Property.NodeScope);\n+\n+    @Override\n+    public Collection<SystemIndexDescriptor> getSystemIndexDescriptors(Settings settings) {\n+        return KIBANA_INDEX_NAMES_SETTING.get(settings).stream()\n+            .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODU2OA==", "bodyText": "Do you think this is worth breaking out into its own file, rather than nesting it in the Kibana plugin? This seems like it might be useful for any other plugins that follow this pattern.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384818568", "createdAt": "2020-02-26T22:57:16Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",\n+        unmodifiableList(Arrays.asList(\".kibana\", \".kibana_task_manager\", \".reporting\")), Function.identity(), Property.NodeScope);\n+\n+    @Override\n+    public Collection<SystemIndexDescriptor> getSystemIndexDescriptors(Settings settings) {\n+        return KIBANA_INDEX_NAMES_SETTING.get(settings).stream()\n+            .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))\n+            .collect(Collectors.toUnmodifiableList());\n+    }\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,\n+                                             IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter,\n+                                             IndexNameExpressionResolver indexNameExpressionResolver,\n+                                             Supplier<DiscoveryNodes> nodesInCluster) {\n+        final List<String> allowedIndexPatterns = KIBANA_INDEX_NAMES_SETTING.get(settings);\n+        return List.of(\n+            // Based on https://github.com/elastic/kibana/issues/49764\n+            // apis needed to perform migrations... ideally these will go away\n+            new KibanaWrappedRestHandler(new RestCreateIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestGetAliasesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexPutAliasAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestRefreshAction(), allowedIndexPatterns),\n+\n+            // apis needed to access saved objects\n+            new KibanaWrappedRestHandler(new RestGetAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestMultiGetAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestBulkAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteByQueryAction(), allowedIndexPatterns),\n+\n+            // api used for testing\n+            new KibanaWrappedRestHandler(new RestUpdateSettingsAction(), allowedIndexPatterns),\n+\n+            // apis used specifically by reporting\n+            new KibanaWrappedRestHandler(new RestGetIndicesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestUpdateAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchScrollAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestClearScrollAction(), allowedIndexPatterns)\n+        );\n+\n+    }\n+\n+    @Override\n+    public List<Setting<?>> getSettings() {\n+        return List.of(KIBANA_INDEX_NAMES_SETTING);\n+    }\n+\n+    static class KibanaWrappedRestHandler extends BaseRestHandler.Wrapper {\n+\n+        private final List<String> allowedIndexPatterns;\n+\n+        KibanaWrappedRestHandler(BaseRestHandler delegate, List<String> allowedIndexPatterns) {\n+            super(delegate);\n+            this.allowedIndexPatterns = allowedIndexPatterns;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"kibana_\" + super.getName();\n+        }\n+\n+        @Override\n+        public List<Route> routes() {\n+            return super.routes().stream().map(route -> new Route(route.getMethod(), \"/_kibana\" + route.getPath()))\n+                .collect(Collectors.toUnmodifiableList());\n+        }\n+\n+        @Override\n+        protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+            client.threadPool().getThreadContext().allowSystemIndexAccess(allowedIndexPatterns);\n+            return super.prepareRequest(request, new IndexLimitingNodeClient(client, allowedIndexPatterns));\n+        }\n+    }\n+\n+    static class IndexLimitingNodeClient extends NodeClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMDU2Nw==", "bodyText": "We might need wildcard support eventually, although I don't think we do for Kibana (@tylersmalley do you know?). Date math support is more questionable. It might be worth trying to detect it and throwing an exception, similar to what we do here.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384820567", "createdAt": "2020-02-26T23:02:20Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",\n+        unmodifiableList(Arrays.asList(\".kibana\", \".kibana_task_manager\", \".reporting\")), Function.identity(), Property.NodeScope);\n+\n+    @Override\n+    public Collection<SystemIndexDescriptor> getSystemIndexDescriptors(Settings settings) {\n+        return KIBANA_INDEX_NAMES_SETTING.get(settings).stream()\n+            .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))\n+            .collect(Collectors.toUnmodifiableList());\n+    }\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,\n+                                             IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter,\n+                                             IndexNameExpressionResolver indexNameExpressionResolver,\n+                                             Supplier<DiscoveryNodes> nodesInCluster) {\n+        final List<String> allowedIndexPatterns = KIBANA_INDEX_NAMES_SETTING.get(settings);\n+        return List.of(\n+            // Based on https://github.com/elastic/kibana/issues/49764\n+            // apis needed to perform migrations... ideally these will go away\n+            new KibanaWrappedRestHandler(new RestCreateIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestGetAliasesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexPutAliasAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestRefreshAction(), allowedIndexPatterns),\n+\n+            // apis needed to access saved objects\n+            new KibanaWrappedRestHandler(new RestGetAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestMultiGetAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestBulkAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteByQueryAction(), allowedIndexPatterns),\n+\n+            // api used for testing\n+            new KibanaWrappedRestHandler(new RestUpdateSettingsAction(), allowedIndexPatterns),\n+\n+            // apis used specifically by reporting\n+            new KibanaWrappedRestHandler(new RestGetIndicesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestUpdateAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchScrollAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestClearScrollAction(), allowedIndexPatterns)\n+        );\n+\n+    }\n+\n+    @Override\n+    public List<Setting<?>> getSettings() {\n+        return List.of(KIBANA_INDEX_NAMES_SETTING);\n+    }\n+\n+    static class KibanaWrappedRestHandler extends BaseRestHandler.Wrapper {\n+\n+        private final List<String> allowedIndexPatterns;\n+\n+        KibanaWrappedRestHandler(BaseRestHandler delegate, List<String> allowedIndexPatterns) {\n+            super(delegate);\n+            this.allowedIndexPatterns = allowedIndexPatterns;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"kibana_\" + super.getName();\n+        }\n+\n+        @Override\n+        public List<Route> routes() {\n+            return super.routes().stream().map(route -> new Route(route.getMethod(), \"/_kibana\" + route.getPath()))\n+                .collect(Collectors.toUnmodifiableList());\n+        }\n+\n+        @Override\n+        protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+            client.threadPool().getThreadContext().allowSystemIndexAccess(allowedIndexPatterns);\n+            return super.prepareRequest(request, new IndexLimitingNodeClient(client, allowedIndexPatterns));\n+        }\n+    }\n+\n+    static class IndexLimitingNodeClient extends NodeClient {\n+\n+        private final NodeClient nodeClient;\n+        private final String[] allowedIndexPatterns;\n+        private final Automaton allowedIndexAutomaton;\n+        private final CharacterRunAutomaton automaton;\n+\n+        IndexLimitingNodeClient(NodeClient nodeClient, List<String> allowedIndexPatterns) {\n+            super(nodeClient.settings(), nodeClient.threadPool());\n+            this.nodeClient = nodeClient;\n+            this.allowedIndexPatterns = allowedIndexPatterns.toArray(Strings.EMPTY_ARRAY);\n+            this.allowedIndexAutomaton = Regex.simpleMatchToAutomaton(this.allowedIndexPatterns);\n+            this.automaton = new CharacterRunAutomaton(this.allowedIndexAutomaton);\n+        }\n+\n+        @Override\n+        public <Request extends ActionRequest, Response extends ActionResponse> Task executeLocally(ActionType<Response> action,\n+                                                                                                    Request request,\n+                                                                                                    ActionListener<Response> listener) {\n+            final String[] indices;\n+            if (request instanceof BulkRequest) {\n+                indices = ((BulkRequest) request).requests().stream()\n+                    .map(DocWriteRequest::index)\n+                    .collect(Collectors.toList())\n+                    .toArray(Strings.EMPTY_ARRAY);\n+            } else if (request instanceof MultiGetRequest) {\n+                indices = ((MultiGetRequest) request).getItems().stream()\n+                    .map(Item::index)\n+                    .collect(Collectors.toList())\n+                    .toArray(Strings.EMPTY_ARRAY);\n+            } else if (request instanceof IndicesRequest) {\n+                indices = ((IndicesRequest) request).indices();\n+            } else {\n+                throw new IllegalArgumentException(\"This client cannot be used to make a non indices request\");\n+            }\n+\n+            if (indices == null || indices.length == 0 ||\n+                (indices.length == 1 && (IndexNameExpressionResolver.isAllIndices(List.of(indices)) || indices[0].equals(\"*\")))) {\n+                if (request instanceof IndicesRequest.Replaceable) {\n+                    // just replace this with the allowed system index patterns\n+                    ((IndicesRequest.Replaceable) request).indices(allowedIndexPatterns);\n+                } else {\n+                    throw new IllegalStateException(\"Unable to replace indices on request \" +\n+                        request.getClass().getSimpleName());\n+                }\n+            } else {\n+                for (String index : indices) {\n+                    // TODO this will not handle date math, is that OK? Do we need wildcard support?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMTg4OA==", "bodyText": "Since this appears to be using the REST interface anyway, any reason this isn't an ESRestTestCase? I thought that was generally preferred for new suites that don't need to meddle with ES internals over ESIntegTestCase.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384821888", "createdAt": "2020-02-26T23:05:49Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/test/java/org/elasticsearch/kibana/KibanaSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.test.ESIntegTestCase;\n+\n+import java.io.IOException;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class KibanaSystemIndexIT extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyODU5Ng==", "bodyText": "I'm not sure anything really needs to change, but I think we're now setting the version of the input stream multiple times - decompressingStream() and namedWriteableStream() in this file both set the version after constructing a new wrapper object, but both wrappers delegate version handling to the original StreamInput object anyway. I'm not sure why it wasn't set here in the first place.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384828596", "createdAt": "2020-02-26T23:25:14Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/transport/InboundMessage.java", "diffHunk": "@@ -62,6 +62,7 @@ InboundMessage deserialize(BytesReference reference) throws IOException {\n                 long requestId = streamInput.readLong();\n                 byte status = streamInput.readByte();\n                 Version remoteVersion = Version.fromId(streamInput.readInt());\n+                streamInput.setVersion(remoteVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "863fe79e00d9482d0a6fb7c1ad0f02d891a1de22", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/863fe79e00d9482d0a6fb7c1ad0f02d891a1de22", "committedDate": "2020-02-27T15:27:46Z", "message": "address description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1c53f7020533cc4ae9f09fae434dab979e71754", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/b1c53f7020533cc4ae9f09fae434dab979e71754", "committedDate": "2020-02-27T15:41:03Z", "message": "ESRestTestCase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaac89d6175859bd594c4e9de142ecdd387733b1", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/eaac89d6175859bd594c4e9de142ecdd387733b1", "committedDate": "2020-02-27T16:22:11Z", "message": "cleanup stream version setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d413408beae535989cf4a3d7cb2231f399ba43", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/43d413408beae535989cf4a3d7cb2231f399ba43", "committedDate": "2020-02-27T16:54:04Z", "message": "Fix version on CompressibleBytesOutputStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "954bcad2c8f5f498cc9c4452a2eb4b1183a3dafc", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/954bcad2c8f5f498cc9c4452a2eb4b1183a3dafc", "committedDate": "2020-02-27T20:03:57Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57781291bb9e7af851de2015ba593de768d403ed", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/57781291bb9e7af851de2015ba593de768d403ed", "committedDate": "2020-02-27T20:21:59Z", "message": "remove limiting of indices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52b609da993681225bd484ad25d01ab4d327ef58", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/52b609da993681225bd484ad25d01ab4d327ef58", "committedDate": "2020-02-27T21:30:38Z", "message": "add tests for rest of apis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzY1MTgx", "url": "https://github.com/elastic/elasticsearch/pull/52385#pullrequestreview-366765181", "createdAt": "2020-02-29T01:28:39Z", "commit": {"oid": "52b609da993681225bd484ad25d01ab4d327ef58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "681924e8d3f72e59b86a031b2f4d027778aaba23", "author": {"user": {"login": "jaymode", "name": "Jay Modi"}}, "url": "https://github.com/elastic/elasticsearch/commit/681924e8d3f72e59b86a031b2f4d027778aaba23", "committedDate": "2020-03-02T19:47:35Z", "message": "Merge branch 'master' into kibana_system_index_plugin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2326, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}