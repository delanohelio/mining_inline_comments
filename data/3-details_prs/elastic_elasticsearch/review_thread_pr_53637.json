{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTE0MjUz", "number": 53637, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxMjo0MVrODqhM2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToyNDoyOFrODqhcQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTEwNzQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxMjo0MVrOF6URgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTozNjoyNVrOF6VFRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Mzg5MA==", "bodyText": "Could we simplify this by using Set.containsAll? Essentially this:\nSet<String> metricsSet = new TreeSet<>(metrics);\nif (Metric.allMetrics().containsAll(metricSet) == false) {\n    Set<String> illegalMetrics = metricsSet.removaAll(Metric.allMetrics());\n    // throw\n}\nrequestMetrics.addAll(metricsSet);", "url": "https://github.com/elastic/elasticsearch/pull/53637#discussion_r396693890", "createdAt": "2020-03-23T19:12:41Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "diffHunk": "@@ -114,178 +130,65 @@ public NodesStatsRequest indices(boolean indices) {\n     }\n \n     /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metric.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesStatsRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metric.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metric.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesStatsRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metric.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n+     * Get the names of requested metrics, excluding indices, which are\n+     * handled separately.\n      */\n-    public boolean jvm() {\n-        return Metric.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesStatsRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metric.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metric.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool be returned.\n-     */\n-    public NodesStatsRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metric.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node file system stats be returned.\n-     */\n-    public boolean fs() {\n-        return Metric.FS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node file system stats be returned.\n-     */\n-    public NodesStatsRequest fs(boolean fs) {\n-        addOrRemoveMetric(fs, Metric.FS.metricName());\n-        return this;\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node Transport be returned.\n+     * Add metric\n      */\n-    public boolean transport() {\n-        return Metric.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesStatsRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metric.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metric.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesStatsRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metric.HTTP.metricName());\n-        return this;\n-    }\n-\n-    public boolean breaker() {\n-        return Metric.BREAKER.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node's circuit breaker stats be returned.\n-     */\n-    public NodesStatsRequest breaker(boolean breaker) {\n-        addOrRemoveMetric(breaker, Metric.BREAKER.metricName());\n-        return this;\n-    }\n-\n-    public boolean script() {\n-        return Metric.SCRIPT.containedIn(requestedMetrics);\n-    }\n-\n-    public NodesStatsRequest script(boolean script) {\n-        addOrRemoveMetric(script, Metric.SCRIPT.metricName());\n-        return this;\n-    }\n-\n-\n-    public boolean discovery() {\n-        return Metric.DISCOVERY.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node's discovery stats be returned.\n-     */\n-    public NodesStatsRequest discovery(boolean discovery) {\n-        addOrRemoveMetric(discovery, Metric.DISCOVERY.metricName());\n+    public NodesStatsRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n-    public boolean ingest() {\n-        return Metric.INGEST.containedIn(requestedMetrics);\n-    }\n-\n     /**\n-     * Should ingest statistics be returned.\n+     * Add an array of metric names\n      */\n-    public NodesStatsRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metric.INGEST.metricName());\n+    public NodesStatsRequest addMetrics(String... metrics) {\n+        // use sorted set for reliable ordering in error messages\n+        SortedSet<String> illegalMetrics = new TreeSet<>();\n+        Set<String> validMetrics = new HashSet<>();\n+        for (String metric : metrics) {\n+            if (Metric.allMetrics().contains(metric)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0ac9fbedb99d5aba80dd5b191265b08aa148f0"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNzE0Mw==", "bodyText": "Ah, that looks better. I'll do this.", "url": "https://github.com/elastic/elasticsearch/pull/53637#discussion_r396707143", "createdAt": "2020-03-23T19:36:25Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "diffHunk": "@@ -114,178 +130,65 @@ public NodesStatsRequest indices(boolean indices) {\n     }\n \n     /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metric.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesStatsRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metric.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metric.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesStatsRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metric.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n+     * Get the names of requested metrics, excluding indices, which are\n+     * handled separately.\n      */\n-    public boolean jvm() {\n-        return Metric.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesStatsRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metric.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metric.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool be returned.\n-     */\n-    public NodesStatsRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metric.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node file system stats be returned.\n-     */\n-    public boolean fs() {\n-        return Metric.FS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node file system stats be returned.\n-     */\n-    public NodesStatsRequest fs(boolean fs) {\n-        addOrRemoveMetric(fs, Metric.FS.metricName());\n-        return this;\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node Transport be returned.\n+     * Add metric\n      */\n-    public boolean transport() {\n-        return Metric.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesStatsRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metric.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metric.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesStatsRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metric.HTTP.metricName());\n-        return this;\n-    }\n-\n-    public boolean breaker() {\n-        return Metric.BREAKER.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node's circuit breaker stats be returned.\n-     */\n-    public NodesStatsRequest breaker(boolean breaker) {\n-        addOrRemoveMetric(breaker, Metric.BREAKER.metricName());\n-        return this;\n-    }\n-\n-    public boolean script() {\n-        return Metric.SCRIPT.containedIn(requestedMetrics);\n-    }\n-\n-    public NodesStatsRequest script(boolean script) {\n-        addOrRemoveMetric(script, Metric.SCRIPT.metricName());\n-        return this;\n-    }\n-\n-\n-    public boolean discovery() {\n-        return Metric.DISCOVERY.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node's discovery stats be returned.\n-     */\n-    public NodesStatsRequest discovery(boolean discovery) {\n-        addOrRemoveMetric(discovery, Metric.DISCOVERY.metricName());\n+    public NodesStatsRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n-    public boolean ingest() {\n-        return Metric.INGEST.containedIn(requestedMetrics);\n-    }\n-\n     /**\n-     * Should ingest statistics be returned.\n+     * Add an array of metric names\n      */\n-    public NodesStatsRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metric.INGEST.metricName());\n+    public NodesStatsRequest addMetrics(String... metrics) {\n+        // use sorted set for reliable ordering in error messages\n+        SortedSet<String> illegalMetrics = new TreeSet<>();\n+        Set<String> validMetrics = new HashSet<>();\n+        for (String metric : metrics) {\n+            if (Metric.allMetrics().contains(metric)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Mzg5MA=="}, "originalCommit": {"oid": "cb0ac9fbedb99d5aba80dd5b191265b08aa148f0"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTEzMDg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxOTozNlrOF6UgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxOTozNlrOF6UgoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Nzc2MQ==", "bodyText": "Why is this moved to here? It seems like an implementation detail that should stay in the stats action. The request should be a opaque list of strings?", "url": "https://github.com/elastic/elasticsearch/pull/53637#discussion_r396697761", "createdAt": "2020-03-23T19:19:36Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "diffHunk": "@@ -311,11 +214,20 @@ public void writeTo(StreamOutput out) throws IOException {\n         }\n     }\n \n+    public static Map<String, Consumer<NodesStatsRequest>> getDispatchMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0ac9fbedb99d5aba80dd5b191265b08aa148f0"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTE0NjkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToyNDoyOFrOF6UrEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyMDozMlrOF6Wnug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwMDQzNQ==", "bodyText": "Can you elaborate on why this might need to be removed?", "url": "https://github.com/elastic/elasticsearch/pull/53637#discussion_r396700435", "createdAt": "2020-03-23T19:24:28Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "diffHunk": "@@ -327,15 +239,15 @@ public void writeTo(StreamOutput out) throws IOException {\n         SCRIPT(\"script\"),\n         DISCOVERY(\"discovery\"),\n         INGEST(\"ingest\"),\n-        ADAPTIVE_SELECTION(\"adaptiveSelection\");\n+        ADAPTIVE_SELECTION(\"adaptiveSelection\"); // TODO: Should this be removed?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0ac9fbedb99d5aba80dd5b191265b08aa148f0"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMTYwNA==", "bodyText": "It definitely doesn't need to be removed. I'll remove the TODO, which was a reminder for me to look into it.", "url": "https://github.com/elastic/elasticsearch/pull/53637#discussion_r396731604", "createdAt": "2020-03-23T20:18:59Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "diffHunk": "@@ -327,15 +239,15 @@ public void writeTo(StreamOutput out) throws IOException {\n         SCRIPT(\"script\"),\n         DISCOVERY(\"discovery\"),\n         INGEST(\"ingest\"),\n-        ADAPTIVE_SELECTION(\"adaptiveSelection\");\n+        ADAPTIVE_SELECTION(\"adaptiveSelection\"); // TODO: Should this be removed?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwMDQzNQ=="}, "originalCommit": {"oid": "cb0ac9fbedb99d5aba80dd5b191265b08aa148f0"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMjM0Ng==", "bodyText": "Oh, darn. I do need to change it to adaptive_selection, though.", "url": "https://github.com/elastic/elasticsearch/pull/53637#discussion_r396732346", "createdAt": "2020-03-23T20:20:32Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "diffHunk": "@@ -327,15 +239,15 @@ public void writeTo(StreamOutput out) throws IOException {\n         SCRIPT(\"script\"),\n         DISCOVERY(\"discovery\"),\n         INGEST(\"ingest\"),\n-        ADAPTIVE_SELECTION(\"adaptiveSelection\");\n+        ADAPTIVE_SELECTION(\"adaptiveSelection\"); // TODO: Should this be removed?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwMDQzNQ=="}, "originalCommit": {"oid": "cb0ac9fbedb99d5aba80dd5b191265b08aa148f0"}, "originalPosition": 313}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3276, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}