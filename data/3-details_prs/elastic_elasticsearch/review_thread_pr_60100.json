{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NDE4OTU4", "number": 60100, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxNzoyMFrOER1yLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjo1Mjo1NVrOESeRAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTQyNDQ1OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/api/search.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxNzoyMFrOG2xHRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowNjoxNlrOG3rl_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MDk2Ng==", "bodyText": "I think this means that we take fields as a parameter on the url for search. But I don't think we added that. Which is fine by me.", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r460080966", "createdAt": "2020-07-24T14:17:20Z", "author": {"login": "nik9000"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/search.json", "diffHunk": "@@ -56,6 +56,10 @@\n         \"type\":\"string\",\n         \"description\":\"The field to use as default where no field prefix is given in the query string\"\n       },\n+      \"fields\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzOTEwMA==", "bodyText": "Oops, I'll remove this. I also think it's okay to not support fields as a URL parameter.", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461039100", "createdAt": "2020-07-27T17:06:16Z", "author": {"login": "jtibshirani"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/search.json", "diffHunk": "@@ -56,6 +56,10 @@\n         \"type\":\"string\",\n         \"description\":\"The field to use as default where no field prefix is given in the query string\"\n       },\n+      \"fields\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MDk2Ng=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODA1Njk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjo1Mjo1NVrOG3rEcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODozMjowNlrOG3ulaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA==", "bodyText": "I wonder if the returned list should be sorted similarly to what we do for doc_values or if we should preserve the original order in the document's source ? I am saying this since we may want to return results from doc_values in the future but that would be inconsistent with the current way of retrieving fields.", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461030514", "createdAt": "2020-07-27T16:52:55Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Nzc1Nw==", "bodyText": "I had thought that the order of the returned list was \"undefined\". They come back in the sort order as the _source now, but that is more an accident of the implementation than anything.", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461047757", "createdAt": "2020-07-27T17:21:21Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NDIyMA==", "bodyText": "In my experience, users don't find that doc values behavior to be useful and are sometimes quite confused by it. One example is #29110, and I've also seen discuss issues asking why doc values don't preserve the order of the array. I wonder if sorting the results by value will make it harder for users to switch to the API from source filtering, in cases where they care about returning the original list order.\nThis API can also return structured values like numeric ranges or geo points, which don't have an obvious default sort order. It could be harder to understand the behavior if arrays sometimes came back in sorted order, sometimes not?", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461064220", "createdAt": "2020-07-27T17:49:51Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDI0Mw==", "bodyText": "I think the safest thing may be to document that the order of the returned results is undefined. Maybe in a follow up we could add a parameter to preserve the order of the original document? If someone asks for it. That'd just force us to _source.", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461074243", "createdAt": "2020-07-27T18:07:20Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NjM0MQ==", "bodyText": "harder for users to switch to the API from source filtering\n\nAgreed, I was more seeing this from users that switch to the API from docvalues_field but I can see how it could be confusing coming from source filtering. We don't have clear plans to retrieve values from doc_values in this API so I don't have strong feeling here. Let's keep it undefined for now and we can discuss again if we add something that uses doc values under the hood ?", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461076341", "createdAt": "2020-07-27T18:11:15Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3ODc3NA==", "bodyText": "+1 to what @nik9000 said, his comment appeared after I posted mine so I am glad we came to the same conclusion ;).", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461078774", "createdAt": "2020-07-27T18:15:31Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTQ4OQ==", "bodyText": "I think the safest thing may be to document that the order of the returned results is undefined.\n\n\nLet's keep it undefined for now and we can discuss again if we add something that uses doc values under the hood ?\n\nThis works for me, I'll add a note to the docs that users shouldn't rely on the order of the values.", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461079489", "createdAt": "2020-07-27T18:16:41Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MDA4NQ==", "bodyText": "Oops, multiple race conditions here :) Sounds like we are all on the same page.", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461080085", "createdAt": "2020-07-27T18:17:40Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4ODEwNA==", "bodyText": "Three way race!", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461088104", "createdAt": "2020-07-27T18:32:06Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, "originalCommit": {"oid": "568d248ec1c00705b5427fcf334044f24c30fdb5"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2130, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}