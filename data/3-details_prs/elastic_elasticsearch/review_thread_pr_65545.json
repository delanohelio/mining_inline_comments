{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDI0NTAz", "number": 65545, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo0Mzo1NVrOE9nsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTowNzo0OVrOE9rDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDQ4OTU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo0Mzo1NVrOH6Z7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo0Mzo1NVrOH6Z7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwNDE2MA==", "bodyText": "Why not defining a list when it's actually needed? Or add one more query. It's a bit too much to use a list for just one query imo. I remember there is one more test like this for * (using a list for one query only).", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531004160", "createdAt": "2020-11-26T12:43:55Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -152,6 +152,27 @@ public void testEqualsWildcardOnRight() {\n         }\n     }\n \n+    public void testEqualsWildcardQuestionmarkOnRight() {\n+        List<String> tests = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81c0ed36fca701a5a6524d9399b787121e299d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDU3Mjc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/additional_test_queries.toml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzowNzozMlrOH6atjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzowNzozMlrOH6atjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNzEwMQ==", "bodyText": "This should be wildcard func instead, no?", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531017101", "createdAt": "2020-11-26T13:07:32Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/additional_test_queries.toml", "diffHunk": "@@ -300,3 +305,24 @@ query = '''\n file where file_name : (\"winini*.exe\", \"lsass.*\") and opcode == 2\n '''\n expected_event_ids  = [65, 86]\n+\n+[[queries]]\n+name = \"seqMultipleArgsWildcardPatternQuestionMark\"\n+query = '''\n+file where file_name : (\"winini?.exe\", \"lsass.e?e\") and opcode == 2\n+'''\n+expected_event_ids  = [65, 86]\n+\n+[[queries]]\n+name = \"wildcardFunctionWildcardPattern\"\n+query = '''\n+file where wildcard(file_name, \"winini*.exe\", \"lsass.*\") and opcode == 2\n+'''\n+expected_event_ids  = [65, 86]\n+\n+[[queries]]\n+name = \"wildcardFunctionQuestionMarkPattern\"\n+query = '''\n+file where file_name : (\"winini?.exe\", \"lsass.e?e\") and opcode == 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5a8870a6083b02c1a96726de7662a3b5c8d1dd8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTA0MDcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/StringUtilsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTowNzo0OVrOH6fJBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToxNToyNFrOH6faeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4OTY3MQ==", "bodyText": "Not strictly related to the change, but was wondering the value choice for the escape character (in StringUtils#toLikePattern()). Would \\0 have collided with anything?", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531089671", "createdAt": "2020-11-26T15:07:49Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.LikePattern;\n+\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static org.elasticsearch.xpack.eql.util.StringUtils.toLikePattern;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testLikePatternNoPattern() throws Exception {\n+        String string = \"abc123\";\n+        assertEquals(string, toLikePattern(string).asString());\n+    }\n+\n+    public void testLikePatternLikeChars() throws Exception {\n+        String string = \"a%bc%%12_3__\";\n+        String escape = Character.toString(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab0951494f59875bb825ced62ac941fd04197b3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5NDEzNw==", "bodyText": "0 ignores escaping, that is no character acts as an escape.", "url": "https://github.com/elastic/elasticsearch/pull/65545#discussion_r531094137", "createdAt": "2020-11-26T15:15:24Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.LikePattern;\n+\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static org.elasticsearch.xpack.eql.util.StringUtils.toLikePattern;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testLikePatternNoPattern() throws Exception {\n+        String string = \"abc123\";\n+        assertEquals(string, toLikePattern(string).asString());\n+    }\n+\n+    public void testLikePatternLikeChars() throws Exception {\n+        String string = \"a%bc%%12_3__\";\n+        String escape = Character.toString(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4OTY3MQ=="}, "originalCommit": {"oid": "dab0951494f59875bb825ced62ac941fd04197b3"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1957, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}