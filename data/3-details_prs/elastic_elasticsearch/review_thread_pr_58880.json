{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTc3Mzc2", "number": 58880, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODowNDo0M1rOELAV0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDoyMjo0NlrOELCuUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTc1Mzc3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationBlockNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODowNDo0M1rOGsYKqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODoxMDozMlrOGsYV1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NjQ3Mw==", "bodyText": "why is this not final anymore?", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449186473", "createdAt": "2020-07-02T18:04:43Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationBlockNode.java", "diffHunk": "@@ -21,12 +21,13 @@\n \n import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n \n import java.util.ArrayList;\n import java.util.List;\n \n-public final class DeclarationBlockNode extends StatementNode {\n+public class DeclarationBlockNode extends StatementNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4OTMzNA==", "bodyText": "For consistency and extensibility. None of the nodes are final as they all have the potential to be used as super classes for new nodes. There are couple in the PR that I found going through them that had been overlooked.", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449189334", "createdAt": "2020-07-02T18:10:32Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationBlockNode.java", "diffHunk": "@@ -21,12 +21,13 @@\n \n import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n \n import java.util.ArrayList;\n import java.util.List;\n \n-public final class DeclarationBlockNode extends StatementNode {\n+public class DeclarationBlockNode extends StatementNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NjQ3Mw=="}, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg5ODI5OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ANode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODo1Mzo1NFrOGsZlQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTozNzozOFrOGsaxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwOTY2Nw==", "bodyText": "Why is this here just to throw an UnsupportedOp?", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449209667", "createdAt": "2020-07-02T18:53:54Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ANode.java", "diffHunk": "@@ -55,6 +56,13 @@ public Location getLocation() {\n         return location;\n     }\n \n+    /**\n+     * Callback to visit a user tree node.\n+     */\n+    public <Input, Output> Output visit(UserTreeVisitor<Input, Output> userTreeVisitor, Input input) {\n+        throw new UnsupportedOperationException(\"cannot visit user node type [\" + getClass().getCanonicalName() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyOTI0Mw==", "bodyText": "The idea of this is the nodes know how to callback the visitor, but the visitor itself can just call visit on any given node without knowing which specific node it is. Take EBinary as an example, you may want to call leftNode.visit(...) and rightNode.visit(...) without knowing what exactly each node is. The exception here is more of a runtime assert that we tried to visit a node that doesn't support the visitor pattern when it probably should.", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449229243", "createdAt": "2020-07-02T19:37:38Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ANode.java", "diffHunk": "@@ -55,6 +56,13 @@ public Location getLocation() {\n         return location;\n     }\n \n+    /**\n+     * Callback to visit a user tree node.\n+     */\n+    public <Input, Output> Output visit(UserTreeVisitor<Input, Output> userTreeVisitor, Input input) {\n+        throw new UnsupportedOperationException(\"cannot visit user node type [\" + getClass().getCanonicalName() + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwOTY2Nw=="}, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDE0MzgxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/IRTreeVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDoyMjozOFrOGsb7VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMToyNjoyNVrOGsdeQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0ODA4NA==", "bodyText": "If we don't expect implementations to implement every function, then add a no-op default implementation for these.", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449248084", "createdAt": "2020-07-02T20:22:38Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/IRTreeVisitor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.ir.AssignmentNode;\n+import org.elasticsearch.painless.ir.BinaryMathNode;\n+import org.elasticsearch.painless.ir.BlockNode;\n+import org.elasticsearch.painless.ir.BooleanNode;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.BreakNode;\n+import org.elasticsearch.painless.ir.CallNode;\n+import org.elasticsearch.painless.ir.CallSubDefNode;\n+import org.elasticsearch.painless.ir.CallSubNode;\n+import org.elasticsearch.painless.ir.CastNode;\n+import org.elasticsearch.painless.ir.CatchNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ComparisonNode;\n+import org.elasticsearch.painless.ir.ConditionalNode;\n+import org.elasticsearch.painless.ir.ConstantNode;\n+import org.elasticsearch.painless.ir.ContinueNode;\n+import org.elasticsearch.painless.ir.DeclarationBlockNode;\n+import org.elasticsearch.painless.ir.DeclarationNode;\n+import org.elasticsearch.painless.ir.DefInterfaceReferenceNode;\n+import org.elasticsearch.painless.ir.DoWhileLoopNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ElvisNode;\n+import org.elasticsearch.painless.ir.FieldNode;\n+import org.elasticsearch.painless.ir.ForEachLoopNode;\n+import org.elasticsearch.painless.ir.ForEachSubArrayNode;\n+import org.elasticsearch.painless.ir.ForEachSubIterableNode;\n+import org.elasticsearch.painless.ir.ForLoopNode;\n+import org.elasticsearch.painless.ir.FunctionNode;\n+import org.elasticsearch.painless.ir.IfElseNode;\n+import org.elasticsearch.painless.ir.IfNode;\n+import org.elasticsearch.painless.ir.InstanceofNode;\n+import org.elasticsearch.painless.ir.ListInitializationNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapInitializationNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.MemberCallNode;\n+import org.elasticsearch.painless.ir.MemberFieldLoadNode;\n+import org.elasticsearch.painless.ir.MemberFieldStoreNode;\n+import org.elasticsearch.painless.ir.NewArrayNode;\n+import org.elasticsearch.painless.ir.NewObjectNode;\n+import org.elasticsearch.painless.ir.NullNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.ir.ReturnNode;\n+import org.elasticsearch.painless.ir.StatementExpressionNode;\n+import org.elasticsearch.painless.ir.StaticNode;\n+import org.elasticsearch.painless.ir.ThrowNode;\n+import org.elasticsearch.painless.ir.TryNode;\n+import org.elasticsearch.painless.ir.TypedCaptureReferenceNode;\n+import org.elasticsearch.painless.ir.TypedInterfaceReferenceNode;\n+import org.elasticsearch.painless.ir.UnaryMathNode;\n+import org.elasticsearch.painless.ir.VariableNode;\n+import org.elasticsearch.painless.ir.WhileLoopNode;\n+\n+public interface IRTreeVisitor<Input, Output> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3MzQxMA==", "bodyText": "Good call. Added base versions of these for this use case.", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449273410", "createdAt": "2020-07-02T21:26:25Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/IRTreeVisitor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.ir.AssignmentNode;\n+import org.elasticsearch.painless.ir.BinaryMathNode;\n+import org.elasticsearch.painless.ir.BlockNode;\n+import org.elasticsearch.painless.ir.BooleanNode;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.BreakNode;\n+import org.elasticsearch.painless.ir.CallNode;\n+import org.elasticsearch.painless.ir.CallSubDefNode;\n+import org.elasticsearch.painless.ir.CallSubNode;\n+import org.elasticsearch.painless.ir.CastNode;\n+import org.elasticsearch.painless.ir.CatchNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ComparisonNode;\n+import org.elasticsearch.painless.ir.ConditionalNode;\n+import org.elasticsearch.painless.ir.ConstantNode;\n+import org.elasticsearch.painless.ir.ContinueNode;\n+import org.elasticsearch.painless.ir.DeclarationBlockNode;\n+import org.elasticsearch.painless.ir.DeclarationNode;\n+import org.elasticsearch.painless.ir.DefInterfaceReferenceNode;\n+import org.elasticsearch.painless.ir.DoWhileLoopNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ElvisNode;\n+import org.elasticsearch.painless.ir.FieldNode;\n+import org.elasticsearch.painless.ir.ForEachLoopNode;\n+import org.elasticsearch.painless.ir.ForEachSubArrayNode;\n+import org.elasticsearch.painless.ir.ForEachSubIterableNode;\n+import org.elasticsearch.painless.ir.ForLoopNode;\n+import org.elasticsearch.painless.ir.FunctionNode;\n+import org.elasticsearch.painless.ir.IfElseNode;\n+import org.elasticsearch.painless.ir.IfNode;\n+import org.elasticsearch.painless.ir.InstanceofNode;\n+import org.elasticsearch.painless.ir.ListInitializationNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapInitializationNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.MemberCallNode;\n+import org.elasticsearch.painless.ir.MemberFieldLoadNode;\n+import org.elasticsearch.painless.ir.MemberFieldStoreNode;\n+import org.elasticsearch.painless.ir.NewArrayNode;\n+import org.elasticsearch.painless.ir.NewObjectNode;\n+import org.elasticsearch.painless.ir.NullNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.ir.ReturnNode;\n+import org.elasticsearch.painless.ir.StatementExpressionNode;\n+import org.elasticsearch.painless.ir.StaticNode;\n+import org.elasticsearch.painless.ir.ThrowNode;\n+import org.elasticsearch.painless.ir.TryNode;\n+import org.elasticsearch.painless.ir.TypedCaptureReferenceNode;\n+import org.elasticsearch.painless.ir.TypedInterfaceReferenceNode;\n+import org.elasticsearch.painless.ir.UnaryMathNode;\n+import org.elasticsearch.painless.ir.VariableNode;\n+import org.elasticsearch.painless.ir.WhileLoopNode;\n+\n+public interface IRTreeVisitor<Input, Output> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0ODA4NA=="}, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDE0NDE5OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/UserTreeVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDoyMjo0NlrOGsb7ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMToyNjoxM1rOGsdd9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0ODEzOA==", "bodyText": "If we don't expect implementations to implement every function, then add a no-op default implementation for these.", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449248138", "createdAt": "2020-07-02T20:22:46Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/UserTreeVisitor.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.node.EAssignment;\n+import org.elasticsearch.painless.node.EBinary;\n+import org.elasticsearch.painless.node.EBool;\n+import org.elasticsearch.painless.node.EBoolean;\n+import org.elasticsearch.painless.node.EBrace;\n+import org.elasticsearch.painless.node.ECall;\n+import org.elasticsearch.painless.node.ECallLocal;\n+import org.elasticsearch.painless.node.EComp;\n+import org.elasticsearch.painless.node.EConditional;\n+import org.elasticsearch.painless.node.EDecimal;\n+import org.elasticsearch.painless.node.EDot;\n+import org.elasticsearch.painless.node.EElvis;\n+import org.elasticsearch.painless.node.EExplicit;\n+import org.elasticsearch.painless.node.EFunctionRef;\n+import org.elasticsearch.painless.node.EInstanceof;\n+import org.elasticsearch.painless.node.ELambda;\n+import org.elasticsearch.painless.node.EListInit;\n+import org.elasticsearch.painless.node.EMapInit;\n+import org.elasticsearch.painless.node.ENewArray;\n+import org.elasticsearch.painless.node.ENewArrayFunctionRef;\n+import org.elasticsearch.painless.node.ENewObj;\n+import org.elasticsearch.painless.node.ENull;\n+import org.elasticsearch.painless.node.ENumeric;\n+import org.elasticsearch.painless.node.ERegex;\n+import org.elasticsearch.painless.node.EString;\n+import org.elasticsearch.painless.node.ESymbol;\n+import org.elasticsearch.painless.node.EUnary;\n+import org.elasticsearch.painless.node.SBlock;\n+import org.elasticsearch.painless.node.SBreak;\n+import org.elasticsearch.painless.node.SCatch;\n+import org.elasticsearch.painless.node.SClass;\n+import org.elasticsearch.painless.node.SContinue;\n+import org.elasticsearch.painless.node.SDeclBlock;\n+import org.elasticsearch.painless.node.SDeclaration;\n+import org.elasticsearch.painless.node.SDo;\n+import org.elasticsearch.painless.node.SEach;\n+import org.elasticsearch.painless.node.SExpression;\n+import org.elasticsearch.painless.node.SFor;\n+import org.elasticsearch.painless.node.SFunction;\n+import org.elasticsearch.painless.node.SIf;\n+import org.elasticsearch.painless.node.SIfElse;\n+import org.elasticsearch.painless.node.SReturn;\n+import org.elasticsearch.painless.node.SThrow;\n+import org.elasticsearch.painless.node.STry;\n+import org.elasticsearch.painless.node.SWhile;\n+\n+public interface UserTreeVisitor<Input, Output> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3MzMzNA==", "bodyText": "Good call. Added base versions of these for this use case.", "url": "https://github.com/elastic/elasticsearch/pull/58880#discussion_r449273334", "createdAt": "2020-07-02T21:26:13Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/UserTreeVisitor.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.node.EAssignment;\n+import org.elasticsearch.painless.node.EBinary;\n+import org.elasticsearch.painless.node.EBool;\n+import org.elasticsearch.painless.node.EBoolean;\n+import org.elasticsearch.painless.node.EBrace;\n+import org.elasticsearch.painless.node.ECall;\n+import org.elasticsearch.painless.node.ECallLocal;\n+import org.elasticsearch.painless.node.EComp;\n+import org.elasticsearch.painless.node.EConditional;\n+import org.elasticsearch.painless.node.EDecimal;\n+import org.elasticsearch.painless.node.EDot;\n+import org.elasticsearch.painless.node.EElvis;\n+import org.elasticsearch.painless.node.EExplicit;\n+import org.elasticsearch.painless.node.EFunctionRef;\n+import org.elasticsearch.painless.node.EInstanceof;\n+import org.elasticsearch.painless.node.ELambda;\n+import org.elasticsearch.painless.node.EListInit;\n+import org.elasticsearch.painless.node.EMapInit;\n+import org.elasticsearch.painless.node.ENewArray;\n+import org.elasticsearch.painless.node.ENewArrayFunctionRef;\n+import org.elasticsearch.painless.node.ENewObj;\n+import org.elasticsearch.painless.node.ENull;\n+import org.elasticsearch.painless.node.ENumeric;\n+import org.elasticsearch.painless.node.ERegex;\n+import org.elasticsearch.painless.node.EString;\n+import org.elasticsearch.painless.node.ESymbol;\n+import org.elasticsearch.painless.node.EUnary;\n+import org.elasticsearch.painless.node.SBlock;\n+import org.elasticsearch.painless.node.SBreak;\n+import org.elasticsearch.painless.node.SCatch;\n+import org.elasticsearch.painless.node.SClass;\n+import org.elasticsearch.painless.node.SContinue;\n+import org.elasticsearch.painless.node.SDeclBlock;\n+import org.elasticsearch.painless.node.SDeclaration;\n+import org.elasticsearch.painless.node.SDo;\n+import org.elasticsearch.painless.node.SEach;\n+import org.elasticsearch.painless.node.SExpression;\n+import org.elasticsearch.painless.node.SFor;\n+import org.elasticsearch.painless.node.SFunction;\n+import org.elasticsearch.painless.node.SIf;\n+import org.elasticsearch.painless.node.SIfElse;\n+import org.elasticsearch.painless.node.SReturn;\n+import org.elasticsearch.painless.node.SThrow;\n+import org.elasticsearch.painless.node.STry;\n+import org.elasticsearch.painless.node.SWhile;\n+\n+public interface UserTreeVisitor<Input, Output> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0ODEzOA=="}, "originalCommit": {"oid": "4c1902df61876b686f6a2c1899c78ee311a5e1a1"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2121, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}