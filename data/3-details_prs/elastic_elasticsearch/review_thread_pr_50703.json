{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDA4ODAz", "number": 50703, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozODozN1rODWSOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozNjozOFrODWixhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjkzODQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozODozN1rOFa9FsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowOToxOFrOFbQh6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwODE3Ng==", "bodyText": "That's a big miss - were there no tests for this?", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r363808176", "createdAt": "2020-01-07T15:38:37Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1316,7 +1331,7 @@ private boolean findConjunctiveComparisonInRange(BinaryComparison main, List<Ran\n                                     ranges.remove(i);\n                                     ranges.add(i,\n                                             new Range(other.source(), other.value(),\n-                                                    main.right(), lowerEq ? true : other.includeLower(),\n+                                                    main.right(), lowerEq ? false : main instanceof GreaterThanOrEqual,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEyNjY5OQ==", "bodyText": "It seemed much like a c&p fallout.\nThere wasn't a test, no, so I've simply implemented the test listed as comment in the source (2 < a AND (2 <= a < 3) -> 2 < a < 3 / testCombineBinaryComparisonsAndRangeLower())", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r364126699", "createdAt": "2020-01-08T09:09:18Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1316,7 +1331,7 @@ private boolean findConjunctiveComparisonInRange(BinaryComparison main, List<Ran\n                                     ranges.remove(i);\n                                     ranges.add(i,\n                                             new Range(other.source(), other.value(),\n-                                                    main.right(), lowerEq ? true : other.includeLower(),\n+                                                    main.right(), lowerEq ? false : main instanceof GreaterThanOrEqual,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwODE3Ng=="}, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjkzOTgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozOTowMVrOFa9Gew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozOTowMVrOFa9Gew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwODM3OQ==", "bodyText": "Likewise - a whole optimization being skipped...", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r363808379", "createdAt": "2020-01-07T15:39:01Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1325,19 +1340,19 @@ private boolean findConjunctiveComparisonInRange(BinaryComparison main, List<Ran\n                             }\n                         }\n                     } else if (main instanceof LessThan || main instanceof LessThanOrEqual) {\n-                        if (other.lower().foldable()) {\n-                            Integer comp = BinaryComparison.compare(value, other.lower().fold());\n+                        if (other.upper().foldable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTY0OTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozNjozOFrOFbXCnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDo0OTozOVrOFbZMJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMzM3NQ==", "bodyText": "Maybe extract this custom Comparator into its own variable inside CombineBinaryComparisons and re-use that, without creating it each time the combine method is called?", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r364233375", "createdAt": "2020-01-08T13:36:38Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1090,7 +1091,21 @@ private Expression combine(And and) {\n \n             boolean changed = false;\n \n-            for (Expression ex : Predicates.splitAnd(and)) {\n+            List<Expression> andExps = Predicates.splitAnd(and);\n+            // Ranges need to show up before BinaryComparisons in list, to allow the latter be optimized away into a Range, if possible\n+            andExps.sort(new Comparator<Expression>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI2ODU4Mw==", "bodyText": "Good point, thanks.\nI've however replaced with a (non-capturing) lambda, which should then be optimised by the jvm.", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r364268583", "createdAt": "2020-01-08T14:49:39Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1090,7 +1091,21 @@ private Expression combine(And and) {\n \n             boolean changed = false;\n \n-            for (Expression ex : Predicates.splitAnd(and)) {\n+            List<Expression> andExps = Predicates.splitAnd(and);\n+            // Ranges need to show up before BinaryComparisons in list, to allow the latter be optimized away into a Range, if possible\n+            andExps.sort(new Comparator<Expression>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMzM3NQ=="}, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4907, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}