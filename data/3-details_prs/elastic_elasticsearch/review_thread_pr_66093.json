{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MDc0Njc5", "number": 66093, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOToyNTo0MlrOFDpPYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0NToxN1rOFDuC8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzY1NzI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOToyNTo0MlrOIDZn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDoyNjo1MlrOIDb5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzNjQ3Ng==", "bodyText": "should we put any message in this exception?", "url": "https://github.com/elastic/elasticsearch/pull/66093#discussion_r540436476", "createdAt": "2020-12-10T19:25:42Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java", "diffHunk": "@@ -321,8 +327,15 @@ private static NumericType resolveNumericType(String value) {\n \n     @Override\n     public SortFieldAndFormat build(QueryShardContext context) throws IOException {\n+        final boolean reverse = order == SortOrder.DESC;\n+\n         if (DOC_FIELD_NAME.equals(fieldName)) {\n-            return order == SortOrder.DESC ? SORT_DOC_REVERSE : SORT_DOC;\n+            return reverse ? SORT_DOC_REVERSE : SORT_DOC;\n+        } else if (SHARD_DOC_FIELD_NAME.equals(fieldName)) {\n+            if (context.getShardRequestIndex() == -1) {\n+                throw new IllegalArgumentException(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d8f0c92a688a28a011f615728184fed7c52c9b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MzYzOA==", "bodyText": "It's a leftover, the shard request index is guaranteed to be greater than 0 at this point. I removed the check and the exception in 5af84f5", "url": "https://github.com/elastic/elasticsearch/pull/66093#discussion_r540473638", "createdAt": "2020-12-10T20:26:52Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java", "diffHunk": "@@ -321,8 +327,15 @@ private static NumericType resolveNumericType(String value) {\n \n     @Override\n     public SortFieldAndFormat build(QueryShardContext context) throws IOException {\n+        final boolean reverse = order == SortOrder.DESC;\n+\n         if (DOC_FIELD_NAME.equals(fieldName)) {\n-            return order == SortOrder.DESC ? SORT_DOC_REVERSE : SORT_DOC;\n+            return reverse ? SORT_DOC_REVERSE : SORT_DOC;\n+        } else if (SHARD_DOC_FIELD_NAME.equals(fieldName)) {\n+            if (context.getShardRequestIndex() == -1) {\n+                throw new IllegalArgumentException(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzNjQ3Ng=="}, "originalCommit": {"oid": "5d8f0c92a688a28a011f615728184fed7c52c9b5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQ0NDY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/sort/ShardDocSortField.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0NToxOFrOIDgu8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0NToxOFrOIDgu8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1Mjk0Ng==", "bodyText": "since _shard_doc field is a user-facing now, do we want add checks for its correctness, for example ensure that topShardIndex >=0 and  a doc part of the value is also >=0? May be better to do this check in SearchAfterBuilder?", "url": "https://github.com/elastic/elasticsearch/pull/66093#discussion_r540552946", "createdAt": "2020-12-10T22:45:18Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/main/java/org/elasticsearch/search/sort/ShardDocSortField.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.sort;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.FieldComparator;\n+import org.apache.lucene.search.LeafFieldComparator;\n+import org.apache.lucene.search.SortField;\n+import org.apache.lucene.search.comparators.DocComparator;\n+\n+ /**\n+  * A {@link SortField} that first compares the shard index and then uses the document number (_doc)\n+  * to tiebreak if the value is the same.\n+  **/\n+public class ShardDocSortField extends SortField {\n+    public static final String NAME = \"_shard_doc\";\n+\n+    private final int shardRequestIndex;\n+\n+    public ShardDocSortField(int shardRequestIndex, boolean reverse) {\n+        super(NAME, Type.LONG, reverse);\n+        assert shardRequestIndex >= 0;\n+        this.shardRequestIndex = shardRequestIndex;\n+    }\n+\n+    int getShardRequestIndex() {\n+        return shardRequestIndex;\n+    }\n+\n+    @Override\n+    public FieldComparator<?> getComparator(int numHits, int sortPos) {\n+        final DocComparator delegate = new DocComparator(numHits, false, sortPos);\n+\n+        return new FieldComparator<Long>() {\n+            @Override\n+            public int compare(int slot1, int slot2) {\n+                return delegate.compare(slot1, slot2);\n+            }\n+\n+            @Override\n+            public int compareValues(Long first, Long second) {\n+                return Long.compare(first, second);\n+            }\n+\n+            @Override\n+            public void setTopValue(Long value) {\n+                int topShardIndex = (int) (value >> 32);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f632d0ab8f2d030b690a6818d2c4eca43c8cf68e"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4701, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}