{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Mzk4Mzg2", "number": 56452, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1MDo0NlrOD7RgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1ODo1MlrOD7RuyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDc5MzU3OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1MDo0NlrOGTfx4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1MDo0NlrOGTfx4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5NjgwMA==", "bodyText": "Begone, foul parser!", "url": "https://github.com/elastic/elasticsearch/pull/56452#discussion_r423096800", "createdAt": "2020-05-11T14:50:46Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java", "diffHunk": "@@ -128,50 +132,6 @@ public String toString() {\n             return \"[\" + from + \" to \" + to + \")\";\n         }\n \n-        public static Range fromXContent(XContentParser parser) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255716e8ecc69b1ced531385a71ec65e4b6c7660"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDgzMDgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1ODo1MlrOGTgJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozNzoyMVrOGTmfEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwMjczNA==", "bodyText": "I wonder if we should add a guard here to throw an exception if from/fromAsStr and to/toAsStr are both non-null/non-empty/not infinity?  Looks like we previously were just assuming the user gave us the right combination... i'm assuming we use these preferentially later (e.g. toAsStr if non-null, to otherwise or something like that)\nOr if it turns out to be a big mess, at least a javadoc explaining the priority?  Or make it package-private if possible?  Not sure where else it's used though", "url": "https://github.com/elastic/elasticsearch/pull/56452#discussion_r423102734", "createdAt": "2020-05-11T14:58:52Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java", "diffHunk": "@@ -63,6 +67,14 @@\n         protected final double to;\n         protected final String toAsStr;\n \n+        public Range(String key, Double from, String fromAsStr, Double to, String toAsStr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255716e8ecc69b1ced531385a71ec65e4b6c7660"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNjY3NQ==", "bodyText": "It is used in a few places, yeah. I believe the best I can do is describe the priority. I'll do that.", "url": "https://github.com/elastic/elasticsearch/pull/56452#discussion_r423206675", "createdAt": "2020-05-11T17:37:21Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java", "diffHunk": "@@ -63,6 +67,14 @@\n         protected final double to;\n         protected final String toAsStr;\n \n+        public Range(String key, Double from, String fromAsStr, Double to, String toAsStr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwMjczNA=="}, "originalCommit": {"oid": "255716e8ecc69b1ced531385a71ec65e4b6c7660"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 502, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}