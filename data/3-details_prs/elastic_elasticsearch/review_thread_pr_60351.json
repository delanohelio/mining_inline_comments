{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTc1NTgz", "number": 60351, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzo1MDowNVrOET9qJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1MDoxNlrOEYD-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzY4NjEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzo1MDowNVrOG5_RWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDoyNlrOG_2wFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1ODY1MQ==", "bodyText": "I am not too sure about IllegalStateException here. It's more like a user error as they should rather send the request to another node? Maybe IllegalArgumentException would be more appropriate but I am not 100% happy with it either", "url": "https://github.com/elastic/elasticsearch/pull/60351#discussion_r463458651", "createdAt": "2020-07-31T07:50:05Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java", "diffHunk": "@@ -73,6 +79,10 @@ protected RemoteClusterAware(Settings settings) {\n         for (String index : requestIndices) {\n             int i = index.indexOf(RemoteClusterService.REMOTE_CLUSTER_INDEX_SEPARATOR);\n             if (i >= 0) {\n+                if (isRemoteClusterClientEnabled == false) {\n+                    assert remoteClusterNames.isEmpty() : remoteClusterNames;\n+                    throw new IllegalStateException(\"node [\" + nodeName + \"] does not have the remote cluster client role enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d42358a8451688d3098b16de781947e983bb720d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDUxOA==", "bodyText": "Yes, I think we should consider it a bad request. I've adjusted it in 78ba655.", "url": "https://github.com/elastic/elasticsearch/pull/60351#discussion_r469610518", "createdAt": "2020-08-12T23:54:26Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java", "diffHunk": "@@ -73,6 +79,10 @@ protected RemoteClusterAware(Settings settings) {\n         for (String index : requestIndices) {\n             int i = index.indexOf(RemoteClusterService.REMOTE_CLUSTER_INDEX_SEPARATOR);\n             if (i >= 0) {\n+                if (isRemoteClusterClientEnabled == false) {\n+                    assert remoteClusterNames.isEmpty() : remoteClusterNames;\n+                    throw new IllegalStateException(\"node [\" + nodeName + \"] does not have the remote cluster client role enabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1ODY1MQ=="}, "originalCommit": {"oid": "d42358a8451688d3098b16de781947e983bb720d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzY5NDc3OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/search/ccs/CCSRemoteClusterClientRoleIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzo1MzoyMFrOG5_WtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowNDo0MVrOG_28-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ2MDAyMA==", "bodyText": "would it be possible to verify what status code would get returned to users at the REST layer?", "url": "https://github.com/elastic/elasticsearch/pull/60351#discussion_r463460020", "createdAt": "2020-07-31T07:53:20Z", "author": {"login": "javanna"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/search/ccs/CCSRemoteClusterClientRoleIT.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.ccs;\n+\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodeRole;\n+import org.elasticsearch.index.query.MatchAllQueryBuilder;\n+import org.elasticsearch.test.AbstractMultiClustersTestCase;\n+import org.elasticsearch.test.InternalTestCluster;\n+import org.elasticsearch.test.NodeRoles;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class CCSRemoteClusterClientRoleIT extends AbstractMultiClustersTestCase {\n+\n+    @Override\n+    protected Collection<String> remoteClusterAlias() {\n+        return List.of(\"cluster_a\");\n+    }\n+\n+    private int indexDocs(Client client, String index) {\n+        assertAcked(client.admin().indices().prepareCreate(index));\n+        int numDocs = between(1, 10);\n+        for (int i = 0; i < numDocs; i++) {\n+            client.prepareIndex(index).setSource(\"f\", \"v\").get();\n+        }\n+        client.admin().indices().prepareRefresh(index).get();\n+        return numDocs;\n+    }\n+\n+    public void testRemoteClusterClientRole() throws Exception {\n+        final int demoDocs = indexDocs(client(LOCAL_CLUSTER), \"demo\");\n+        final int prodDocs = indexDocs(client(\"cluster_a\"), \"prod\");\n+        final InternalTestCluster localCluster = cluster(LOCAL_CLUSTER);\n+        if (randomBoolean()) {\n+            localCluster.startDataOnlyNode();\n+        }\n+        final String nodeWithoutRemoteClusterClientRole = localCluster.startNode(NodeRoles.onlyRole(DiscoveryNodeRole.DATA_ROLE));\n+        final IllegalStateException error = expectThrows(IllegalStateException.class, () ->\n+            localCluster.client(nodeWithoutRemoteClusterClientRole)\n+                .prepareSearch(\"demo\", \"cluster_a:prod\")\n+                .setQuery(new MatchAllQueryBuilder())\n+                .setAllowPartialSearchResults(false)\n+                .setSize(1000)\n+                .get());\n+        assertThat(error.getMessage(),\n+            equalTo(\"node [\" + nodeWithoutRemoteClusterClientRole + \"] does not have the remote cluster client role enabled\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d42358a8451688d3098b16de781947e983bb720d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMzgxNg==", "bodyText": "I've strengthened the assertion in 78ba655. I don't know how to verify the rest status in this IT test. Any suggestion?", "url": "https://github.com/elastic/elasticsearch/pull/60351#discussion_r469613816", "createdAt": "2020-08-13T00:04:41Z", "author": {"login": "dnhatn"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/search/ccs/CCSRemoteClusterClientRoleIT.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.ccs;\n+\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodeRole;\n+import org.elasticsearch.index.query.MatchAllQueryBuilder;\n+import org.elasticsearch.test.AbstractMultiClustersTestCase;\n+import org.elasticsearch.test.InternalTestCluster;\n+import org.elasticsearch.test.NodeRoles;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class CCSRemoteClusterClientRoleIT extends AbstractMultiClustersTestCase {\n+\n+    @Override\n+    protected Collection<String> remoteClusterAlias() {\n+        return List.of(\"cluster_a\");\n+    }\n+\n+    private int indexDocs(Client client, String index) {\n+        assertAcked(client.admin().indices().prepareCreate(index));\n+        int numDocs = between(1, 10);\n+        for (int i = 0; i < numDocs; i++) {\n+            client.prepareIndex(index).setSource(\"f\", \"v\").get();\n+        }\n+        client.admin().indices().prepareRefresh(index).get();\n+        return numDocs;\n+    }\n+\n+    public void testRemoteClusterClientRole() throws Exception {\n+        final int demoDocs = indexDocs(client(LOCAL_CLUSTER), \"demo\");\n+        final int prodDocs = indexDocs(client(\"cluster_a\"), \"prod\");\n+        final InternalTestCluster localCluster = cluster(LOCAL_CLUSTER);\n+        if (randomBoolean()) {\n+            localCluster.startDataOnlyNode();\n+        }\n+        final String nodeWithoutRemoteClusterClientRole = localCluster.startNode(NodeRoles.onlyRole(DiscoveryNodeRole.DATA_ROLE));\n+        final IllegalStateException error = expectThrows(IllegalStateException.class, () ->\n+            localCluster.client(nodeWithoutRemoteClusterClientRole)\n+                .prepareSearch(\"demo\", \"cluster_a:prod\")\n+                .setQuery(new MatchAllQueryBuilder())\n+                .setAllowPartialSearchResults(false)\n+                .setSize(1000)\n+                .get());\n+        assertThat(error.getMessage(),\n+            equalTo(\"node [\" + nodeWithoutRemoteClusterClientRole + \"] does not have the remote cluster client role enabled\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ2MDAyMA=="}, "originalCommit": {"oid": "d42358a8451688d3098b16de781947e983bb720d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjY2NDcwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1MDoxNlrOHAMb7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1MDoxNlrOHAMb7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2NTgwNA==", "bodyText": "this needs updating?", "url": "https://github.com/elastic/elasticsearch/pull/60351#discussion_r469965804", "createdAt": "2020-08-13T13:50:16Z", "author": {"login": "javanna"}, "path": "server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java", "diffHunk": "@@ -218,6 +221,18 @@ public void testGroupIndices() throws IOException {\n         }\n     }\n \n+    public void testGroupIndicesWithoutRemoteClusterClientRole() throws Exception {\n+        final Settings settings = onlyRoles(Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), \"node-1\").build(),\n+            Sets.newHashSet(DiscoveryNodeRole.DATA_ROLE));\n+        try (RemoteClusterService service = new RemoteClusterService(settings, null)) {\n+            assertFalse(service.isEnabled());\n+            assertFalse(service.isCrossClusterSearchEnabled());\n+            final IllegalStateException error = expectThrows(IllegalStateException.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ba655192c7788b0082da15526f0ba0bcc79691"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2802, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}