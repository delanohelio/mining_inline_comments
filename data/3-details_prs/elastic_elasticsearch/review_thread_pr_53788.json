{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTUyNjA4", "number": 53788, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NzoxNVrODpilsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MzowNVrODpnbRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg0OTE1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NzoxNVrOF4x5xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0NzoxNVrOF4x5xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MjE4Mw==", "bodyText": "I wonder if all these should be optional.\nThen we have a private ctor that contains nullable boxed types. It would then unbox to zero values and pass to the public ctor?\nThis flexibility will help the hlrc compatibility.", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395082183", "createdAt": "2020-03-19T14:47:15Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Hyperparameters implements ToXContentObject {\n+\n+    public static final ParseField CLASS_ASSIGNMENT_OBJECTIVE = new ParseField(\"class_assignment_objective\");\n+    public static final ParseField DOWNSAMPLE_FACTOR = new ParseField(\"downsample_factor\");\n+    public static final ParseField ETA = new ParseField(\"eta\");\n+    public static final ParseField ETA_GROWTH_RATE_PER_TREE = new ParseField(\"eta_growth_rate_per_tree\");\n+    public static final ParseField FEATURE_BAG_FRACTION = new ParseField(\"feature_bag_fraction\");\n+    public static final ParseField MAX_ATTEMPTS_TO_ADD_TREE = new ParseField(\"max_attempts_to_add_tree\");\n+    public static final ParseField MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER = new ParseField(\n+        \"max_optimization_rounds_per_hyperparameter\");\n+    public static final ParseField MAX_TREES = new ParseField(\"max_trees\");\n+    public static final ParseField NUM_FOLDS = new ParseField(\"num_folds\");\n+    public static final ParseField NUM_SPLITS_PER_FEATURE = new ParseField(\"num_splits_per_feature\");\n+    public static final ParseField REGULARIZATION_DEPTH_PENALTY_MULTIPLIER = new ParseField(\"regularization_depth_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER\n+        = new ParseField(\"regularization_leaf_weight_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_LIMIT = new ParseField(\"regularization_soft_tree_depth_limit\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE = new ParseField(\"regularization_soft_tree_depth_tolerance\");\n+    public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n+        new ParseField(\"regularization_tree_size_penalty_multiplier\");\n+\n+    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n+        true,\n+        a -> new Hyperparameters(\n+            (String) a[0],\n+            (double) a[1],\n+            (double) a[2],\n+            (double) a[3],\n+            (double) a[4],\n+            (int) a[5],\n+            (int) a[6],\n+            (int) a[7],\n+            (int) a[8],\n+            (int) a[9],\n+            (double) a[10],\n+            (double) a[11],\n+            (double) a[12],\n+            (double) a[13],\n+            (double) a[14]\n+        ));\n+\n+    static {\n+        PARSER.declareString(constructorArg(), CLASS_ASSIGNMENT_OBJECTIVE);\n+        PARSER.declareDouble(constructorArg(), DOWNSAMPLE_FACTOR);\n+        PARSER.declareDouble(constructorArg(), ETA);\n+        PARSER.declareDouble(constructorArg(), ETA_GROWTH_RATE_PER_TREE);\n+        PARSER.declareDouble(constructorArg(), FEATURE_BAG_FRACTION);\n+        PARSER.declareInt(constructorArg(), MAX_ATTEMPTS_TO_ADD_TREE);\n+        PARSER.declareInt(constructorArg(), MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER);\n+        PARSER.declareInt(constructorArg(), MAX_TREES);\n+        PARSER.declareInt(constructorArg(), NUM_FOLDS);\n+        PARSER.declareInt(constructorArg(), NUM_SPLITS_PER_FEATURE);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_DEPTH_PENALTY_MULTIPLIER);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_SOFT_TREE_DEPTH_LIMIT);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg1NTMzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0ODoyOVrOF4x9lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0ODoyOVrOF4x9lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MzE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n          \n          \n            \n                public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"classification_hyperparameters\",", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395083158", "createdAt": "2020-03-19T14:48:29Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Hyperparameters implements ToXContentObject {\n+\n+    public static final ParseField CLASS_ASSIGNMENT_OBJECTIVE = new ParseField(\"class_assignment_objective\");\n+    public static final ParseField DOWNSAMPLE_FACTOR = new ParseField(\"downsample_factor\");\n+    public static final ParseField ETA = new ParseField(\"eta\");\n+    public static final ParseField ETA_GROWTH_RATE_PER_TREE = new ParseField(\"eta_growth_rate_per_tree\");\n+    public static final ParseField FEATURE_BAG_FRACTION = new ParseField(\"feature_bag_fraction\");\n+    public static final ParseField MAX_ATTEMPTS_TO_ADD_TREE = new ParseField(\"max_attempts_to_add_tree\");\n+    public static final ParseField MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER = new ParseField(\n+        \"max_optimization_rounds_per_hyperparameter\");\n+    public static final ParseField MAX_TREES = new ParseField(\"max_trees\");\n+    public static final ParseField NUM_FOLDS = new ParseField(\"num_folds\");\n+    public static final ParseField NUM_SPLITS_PER_FEATURE = new ParseField(\"num_splits_per_feature\");\n+    public static final ParseField REGULARIZATION_DEPTH_PENALTY_MULTIPLIER = new ParseField(\"regularization_depth_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER\n+        = new ParseField(\"regularization_leaf_weight_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_LIMIT = new ParseField(\"regularization_soft_tree_depth_limit\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE = new ParseField(\"regularization_soft_tree_depth_tolerance\");\n+    public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n+        new ParseField(\"regularization_tree_size_penalty_multiplier\");\n+\n+    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg1ODI2OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/TimingStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0OTowNVrOF4x_cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0OTowNVrOF4x_cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MzYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,\n          \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"classification_timing_stats\", true,", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395083632", "createdAt": "2020-03-19T14:49:05Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/TimingStats.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+    public static final ParseField ITERATION_TIME = new ParseField(\"iteration_time\");\n+\n+    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg2MTY2OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/ValidationLoss.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0OTo1NVrOF4yB1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0OTo1NVrOF4yB1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NDI0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"classification_validation_loss\";", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395084246", "createdAt": "2020-03-19T14:49:55Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.client.ml.dataframe.stats.common.FoldValues;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject {\n+\n+    public static final String TYPE = \"validation_loss\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg3MDU4OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1MTo0M1rOF4yHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1MTo0M1rOF4yHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NTcwNg==", "bodyText": "Similar thought around optional parameters and boxed -> nullable -> zero_values.", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395085706", "createdAt": "2020-03-19T14:51:43Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.outlierdetection;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Parameters implements ToXContentObject {\n+\n+    public static final ParseField N_NEIGHBORS = new ParseField(\"n_neighbors\");\n+    public static final ParseField METHODS = new ParseField(\"methods\");\n+    public static final ParseField FEATURE_INFLUENCE_THRESHOLD = new ParseField(\"feature_influence_threshold\");\n+    public static final ParseField COMPUTE_FEATURE_INFLUENCE = new ParseField(\"compute_feature_influence\");\n+    public static final ParseField OUTLIER_FRACTION = new ParseField(\"outlier_fraction\");\n+    public static final ParseField STANDARDIZATION_ENABLED = new ParseField(\"standardization_enabled\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static ConstructingObjectParser<Parameters, Void> PARSER = new ConstructingObjectParser<>(\"outlier_detection_parameters\",\n+        true,\n+        a -> new Parameters(\n+            (int) a[0],\n+            new TreeSet<>((List<String>) a[1]),\n+            (boolean) a[2],\n+            (double) a[3],\n+            (double) a[4],\n+            (boolean) a[5]\n+        ));\n+\n+    static {\n+        PARSER.declareInt(constructorArg(), N_NEIGHBORS);\n+        PARSER.declareStringArray(constructorArg(), METHODS);\n+        PARSER.declareBoolean(constructorArg(), COMPUTE_FEATURE_INFLUENCE);\n+        PARSER.declareDouble(constructorArg(), FEATURE_INFLUENCE_THRESHOLD);\n+        PARSER.declareDouble(constructorArg(), OUTLIER_FRACTION);\n+        PARSER.declareBoolean(constructorArg(), STANDARDIZATION_ENABLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg3OTY2OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/regression/ValidationLoss.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1Mzo0NFrOF4yNkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1Mzo0NFrOF4yNkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NzI1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"regression_validation_loss\";", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395087251", "createdAt": "2020-03-19T14:53:44Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/regression/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.regression;\n+\n+import org.elasticsearch.client.ml.dataframe.stats.common.FoldValues;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject {\n+\n+    public static final String TYPE = \"validation_loss\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg5MjU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/AnalysisStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1NjoyN1rOF4yV8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1NjoyN1rOF4yV8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4OTM5NQ==", "bodyText": "FWIW, inference added some nice helpers around NamedToXContentObject classes. Nice things for serializing them to and from xcontent if you need it :).", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395089395", "createdAt": "2020-03-19T14:56:27Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/AnalysisStats.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats;\n+\n+import org.elasticsearch.common.io.stream.NamedWriteable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+\n+/**\n+ * Statistics for the data frame analysis\n+ */\n+public interface AnalysisStats extends ToXContentObject, NamedWriteable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkwMDI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/Hyperparameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1ODowMFrOF4ya0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1ODowMFrOF4ya0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MDY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n          \n          \n            \n                    ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"classification_hyperparameters\",", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395090642", "createdAt": "2020-03-19T14:58:00Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Hyperparameters implements ToXContentObject, Writeable {\n+\n+    public static final ParseField CLASS_ASSIGNMENT_OBJECTIVE = new ParseField(\"class_assignment_objective\");\n+    public static final ParseField DOWNSAMPLE_FACTOR = new ParseField(\"downsample_factor\");\n+    public static final ParseField ETA = new ParseField(\"eta\");\n+    public static final ParseField ETA_GROWTH_RATE_PER_TREE = new ParseField(\"eta_growth_rate_per_tree\");\n+    public static final ParseField FEATURE_BAG_FRACTION = new ParseField(\"feature_bag_fraction\");\n+    public static final ParseField MAX_ATTEMPTS_TO_ADD_TREE = new ParseField(\"max_attempts_to_add_tree\");\n+    public static final ParseField MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER = new ParseField(\n+        \"max_optimization_rounds_per_hyperparameter\");\n+    public static final ParseField MAX_TREES = new ParseField(\"max_trees\");\n+    public static final ParseField NUM_FOLDS = new ParseField(\"num_folds\");\n+    public static final ParseField NUM_SPLITS_PER_FEATURE = new ParseField(\"num_splits_per_feature\");\n+    public static final ParseField REGULARIZATION_DEPTH_PENALTY_MULTIPLIER = new ParseField(\"regularization_depth_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER\n+        = new ParseField(\"regularization_leaf_weight_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_LIMIT = new ParseField(\"regularization_soft_tree_depth_limit\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE = new ParseField(\"regularization_soft_tree_depth_tolerance\");\n+    public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n+        new ParseField(\"regularization_tree_size_penalty_multiplier\");\n+\n+    public static Hyperparameters fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"regression_hyperparameters\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkwNjA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/TimingStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1OToxOFrOF4yelw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1OToxOFrOF4yelw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MTYwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n          \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"classification_timing_stats\", ignoreUnknownFields,", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395091607", "createdAt": "2020-03-19T14:59:18Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/TimingStats.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements Writeable, ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+    public static final ParseField ITERATION_TIME = new ParseField(\"iteration_time\");\n+\n+    public static TimingStats fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkwNzczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/ValidationLoss.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1OTo0M1rOF4yfuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1OTo0M1rOF4yfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MTg5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"classification_validation_loss\";", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395091896", "createdAt": "2020-03-19T14:59:43Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.dataframe.stats.common.FoldValues;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject, Writeable {\n+\n+    public static final String TYPE = \"validation_loss\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkxMTk2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/outlierdetection/TimingStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMDozN1rOF4yidw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMDozN1rOF4yidw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MjU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n          \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"outlierdetection_timing_stats\", ignoreUnknownFields,", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395092599", "createdAt": "2020-03-19T15:00:37Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/outlierdetection/TimingStats.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.outlierdetection;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements Writeable, ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+\n+    public static TimingStats fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkxNDc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/TimingStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMToxNVrOF4ykXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMToxNVrOF4ykXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MzA4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n          \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"regression_timing_stats\", ignoreUnknownFields,", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395093087", "createdAt": "2020-03-19T15:01:15Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/TimingStats.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.regression;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements Writeable, ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+    public static final ParseField ITERATION_TIME = new ParseField(\"iteration_time\");\n+\n+    public static TimingStats fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkxNjEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/ValidationLoss.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMTozM1rOF4ylPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMTozM1rOF4ylPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MzMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"regression_validation_loss\";", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395093310", "createdAt": "2020-03-19T15:01:33Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.regression;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.dataframe.stats.common.FoldValues;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject, Writeable {\n+\n+    public static final String TYPE = \"validation_loss\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkyNjkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMzo1NVrOF4ysSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyODo0OFrOF4z20Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NTExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AnalysisStats analysisStats = null;\n          \n          \n            \n                        if (randomBoolean()) {\n          \n          \n            \n                            analysisStats = OutlierDetectionStatsTests.createRandom();\n          \n          \n            \n                        } else if (randomBoolean()) {\n          \n          \n            \n                            analysisStats = RegressionStatsTests.createRandom();\n          \n          \n            \n                        } else {\n          \n          \n            \n                            analysisStats = ClassificationStatsTests.createRandom();\n          \n          \n            \n                        }\n          \n          \n            \n                        AnalysisStats analysisStats = randomBoolean() ? null : \n          \n          \n            \n                            randomFrom(\n          \n          \n            \n                                OutlierDetectionStatsTests.createRandom(), \n          \n          \n            \n                                RegressionStatsTests.createRandom(), \n          \n          \n            \n                                ClassificationStatsTests.createRandom());", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395095114", "createdAt": "2020-03-19T15:03:55Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java", "diffHunk": "@@ -30,8 +43,17 @@ public static Response randomResponse(int listSize) {\n             IntStream.of(progressSize).forEach(progressIndex -> progress.add(\n                 new PhaseProgress(randomAlphaOfLength(10), randomIntBetween(0, 100))));\n             MemoryUsage memoryUsage = randomBoolean() ? null : MemoryUsageTests.createRandom();\n+            AnalysisStats analysisStats = null;\n+            if (randomBoolean()) {\n+                analysisStats = OutlierDetectionStatsTests.createRandom();\n+            } else if (randomBoolean()) {\n+                analysisStats = RegressionStatsTests.createRandom();\n+            } else {\n+                analysisStats = ClassificationStatsTests.createRandom();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExNDE5Mw==", "bodyText": "Ah, much better!", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395114193", "createdAt": "2020-03-19T15:28:48Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java", "diffHunk": "@@ -30,8 +43,17 @@ public static Response randomResponse(int listSize) {\n             IntStream.of(progressSize).forEach(progressIndex -> progress.add(\n                 new PhaseProgress(randomAlphaOfLength(10), randomIntBetween(0, 100))));\n             MemoryUsage memoryUsage = randomBoolean() ? null : MemoryUsageTests.createRandom();\n+            AnalysisStats analysisStats = null;\n+            if (randomBoolean()) {\n+                analysisStats = OutlierDetectionStatsTests.createRandom();\n+            } else if (randomBoolean()) {\n+                analysisStats = RegressionStatsTests.createRandom();\n+            } else {\n+                analysisStats = ClassificationStatsTests.createRandom();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NTExNA=="}, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODk0ODMyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/TimingStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowODozM1rOF4y6SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowODozM1rOF4y6SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5ODY5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,\n          \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"outlierdetection_timing_stats\", true,", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395098696", "createdAt": "2020-03-19T15:08:33Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/TimingStats.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.outlierdetection;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+\n+    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTYzMjMxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MDoyOVrOF453hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MDoyOVrOF453hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjY3OQ==", "bodyText": "This will return a List<String> even if there is just one element. If this is to just be a string we should  declareString", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395212679", "createdAt": "2020-03-19T17:50:29Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java", "diffHunk": "@@ -45,49 +41,85 @@\n     public static ConstructingObjectParser<Parameters, Void> PARSER = new ConstructingObjectParser<>(\"outlier_detection_parameters\",\n         true,\n         a -> new Parameters(\n-            (int) a[0],\n-            new TreeSet<>((List<String>) a[1]),\n-            (boolean) a[2],\n-            (double) a[3],\n-            (double) a[4],\n-            (boolean) a[5]\n+            (Integer) a[0],\n+            (String) a[1],\n+            (Boolean) a[2],\n+            (Double) a[3],\n+            (Double) a[4],\n+            (Boolean) a[5]\n         ));\n \n     static {\n-        PARSER.declareInt(constructorArg(), N_NEIGHBORS);\n-        PARSER.declareStringArray(constructorArg(), METHODS);\n-        PARSER.declareBoolean(constructorArg(), COMPUTE_FEATURE_INFLUENCE);\n-        PARSER.declareDouble(constructorArg(), FEATURE_INFLUENCE_THRESHOLD);\n-        PARSER.declareDouble(constructorArg(), OUTLIER_FRACTION);\n-        PARSER.declareBoolean(constructorArg(), STANDARDIZATION_ENABLED);\n+        PARSER.declareInt(optionalConstructorArg(), N_NEIGHBORS);\n+        PARSER.declareStringArray(optionalConstructorArg(), METHOD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d2aebaf22be37e24384b12ade79afc51433adba"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTY0MTY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MzowNVrOF459kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MzowNVrOF459kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNDIyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                RegressionStatsTests.createRandom())\n          \n          \n            \n                            ;\n          \n          \n            \n                                RegressionStatsTests.createRandom());", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395214226", "createdAt": "2020-03-19T17:53:05Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java", "diffHunk": "@@ -43,14 +43,12 @@ public static Response randomResponse(int listSize) {\n             IntStream.of(progressSize).forEach(progressIndex -> progress.add(\n                 new PhaseProgress(randomAlphaOfLength(10), randomIntBetween(0, 100))));\n             MemoryUsage memoryUsage = randomBoolean() ? null : MemoryUsageTests.createRandom();\n-            AnalysisStats analysisStats = null;\n-            if (randomBoolean()) {\n-                analysisStats = OutlierDetectionStatsTests.createRandom();\n-            } else if (randomBoolean()) {\n-                analysisStats = RegressionStatsTests.createRandom();\n-            } else {\n-                analysisStats = ClassificationStatsTests.createRandom();\n-            }\n+            AnalysisStats analysisStats = randomBoolean() ? null :\n+                randomFrom(\n+                    ClassificationStatsTests.createRandom(),\n+                    OutlierDetectionStatsTests.createRandom(),\n+                    RegressionStatsTests.createRandom())\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d2aebaf22be37e24384b12ade79afc51433adba"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4240, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}