{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDY2MzI1", "number": 61350, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyNTo1OFrOEaKQCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyNTo1OFrOEaKQCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODY2Mzc4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyNTo1OFrOHDaN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzowNDo0OVrOHELU0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMzNzM0Mg==", "bodyText": "TODO: test these failures", "url": "https://github.com/elastic/elasticsearch/pull/61350#discussion_r473337342", "createdAt": "2020-08-19T21:25:58Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java", "diffHunk": "@@ -92,17 +94,33 @@ public ScriptClassInfo(PainlessLookup painlessLookup, Class<?> baseClass) {\n         if (executeMethod == null) {\n             throw new IllegalStateException(\"no execute method found\");\n         }\n-        ArrayList<ConverterSignature> converterSignatures = new ArrayList<>();\n+        ArrayList<FunctionTable.LocalFunction> converters = new ArrayList<>();\n+        FunctionTable.LocalFunction defConverter = null;\n         for (java.lang.reflect.Method m : baseClass.getMethods()) {\n             if (m.getName().startsWith(\"convertFrom\") &&\n                 m.getParameterTypes().length == 1 &&\n                 m.getReturnType() == returnType &&\n                 Modifier.isStatic(m.getModifiers())) {\n \n-                converterSignatures.add(new ConverterSignature(m));\n+                if (m.getName().equals(\"convertFromDef\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c858a5ae9cd7eea7b24c927940fc5001f5c2ba13"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTkwNQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/61350#discussion_r474141905", "createdAt": "2020-08-20T17:04:49Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java", "diffHunk": "@@ -92,17 +94,33 @@ public ScriptClassInfo(PainlessLookup painlessLookup, Class<?> baseClass) {\n         if (executeMethod == null) {\n             throw new IllegalStateException(\"no execute method found\");\n         }\n-        ArrayList<ConverterSignature> converterSignatures = new ArrayList<>();\n+        ArrayList<FunctionTable.LocalFunction> converters = new ArrayList<>();\n+        FunctionTable.LocalFunction defConverter = null;\n         for (java.lang.reflect.Method m : baseClass.getMethods()) {\n             if (m.getName().startsWith(\"convertFrom\") &&\n                 m.getParameterTypes().length == 1 &&\n                 m.getReturnType() == returnType &&\n                 Modifier.isStatic(m.getModifiers())) {\n \n-                converterSignatures.add(new ConverterSignature(m));\n+                if (m.getName().equals(\"convertFromDef\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMzNzM0Mg=="}, "originalCommit": {"oid": "c858a5ae9cd7eea7b24c927940fc5001f5c2ba13"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 862, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}