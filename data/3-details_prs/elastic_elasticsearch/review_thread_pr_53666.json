{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODcxMTI4", "number": 53666, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDozNjowOFrODpIzZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo0MDoyN1rODpyYAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDYyNDM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/datastream/CreateDataStreamAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDozNjowOFrOF4H5iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo0MToxNlrOF4II9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5Mzk5Mw==", "bodyText": "Do we need to read the optional indices field here for creating a data stream with existing indices?", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r394393993", "createdAt": "2020-03-18T14:36:08Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.action.admin.cluster.datastream;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.action.support.master.TransportMasterNodeAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class CreateDataStreamAction extends ActionType<AcknowledgedResponse> {\n+\n+    public static final CreateDataStreamAction INSTANCE = new CreateDataStreamAction();\n+    public static final String NAME = \"cluster:admin/data_stream/create\";\n+\n+    private CreateDataStreamAction() {\n+        super(NAME, AcknowledgedResponse::new);\n+    }\n+\n+    public static class Request extends MasterNodeRequest<Request> {\n+\n+        private final String name;\n+        private String timestampFieldName;\n+\n+        public Request(String name) {\n+            this.name = name;\n+        }\n+\n+        public void setTimestampFieldName(String timestampFieldName) {\n+            this.timestampFieldName = timestampFieldName;\n+        }\n+\n+        @Override\n+        public ActionRequestValidationException validate() {\n+            return null;\n+        }\n+\n+        public Request(StreamInput in) throws IOException {\n+            super(in);\n+            this.name = in.readString();\n+            this.timestampFieldName = in.readString();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee721c3ae91a235f3acecf42789587e21e418aeb"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5Nzk0MQ==", "bodyText": "For now this api will only create new empty indices.\nWhen we add the ability to add existing indices to a data stream then we can add an optional indices field here. Makes sense?", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r394397941", "createdAt": "2020-03-18T14:41:16Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.action.admin.cluster.datastream;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.action.support.master.TransportMasterNodeAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class CreateDataStreamAction extends ActionType<AcknowledgedResponse> {\n+\n+    public static final CreateDataStreamAction INSTANCE = new CreateDataStreamAction();\n+    public static final String NAME = \"cluster:admin/data_stream/create\";\n+\n+    private CreateDataStreamAction() {\n+        super(NAME, AcknowledgedResponse::new);\n+    }\n+\n+    public static class Request extends MasterNodeRequest<Request> {\n+\n+        private final String name;\n+        private String timestampFieldName;\n+\n+        public Request(String name) {\n+            this.name = name;\n+        }\n+\n+        public void setTimestampFieldName(String timestampFieldName) {\n+            this.timestampFieldName = timestampFieldName;\n+        }\n+\n+        @Override\n+        public ActionRequestValidationException validate() {\n+            return null;\n+        }\n+\n+        public Request(StreamInput in) throws IOException {\n+            super(in);\n+            this.name = in.readString();\n+            this.timestampFieldName = in.readString();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5Mzk5Mw=="}, "originalCommit": {"oid": "ee721c3ae91a235f3acecf42789587e21e418aeb"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTM2MTc3OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.create_data_stream.json", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo0MzoxMVrOF43IIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxOTo0NVrOF5CVtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2Nzc3Ng==", "bodyText": "I wonder if this name should be: data_streams.create to be consistent with indices.create?\nOther cluster operations seems to be mostly about the cluster state and cluster settings.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395167776", "createdAt": "2020-03-19T16:43:11Z", "author": {"login": "henningandersen"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.create_data_stream.json", "diffHunk": "@@ -0,0 +1,31 @@\n+{\n+  \"cluster.create_data_stream\":{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NDMyMw==", "bodyText": "After chatting with Henning, I also came to the conclusion that data stream apis should be concidere indices based operations. (Ideally we should have a data_stream notion, but we need to think more about this and how this would work in security). So I will revert the commit in this pr that changes data stream crud apis back to indices based apis.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395284323", "createdAt": "2020-03-19T19:56:51Z", "author": {"login": "martijnvg"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.create_data_stream.json", "diffHunk": "@@ -0,0 +1,31 @@\n+{\n+  \"cluster.create_data_stream\":{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2Nzc3Ng=="}, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5OTgzMw==", "bodyText": "the component template apis are cluster operations, I suspect those may need to be changed also, can you explain the reasoning and how it will relate to security?", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395299833", "createdAt": "2020-03-19T20:26:41Z", "author": {"login": "dakrone"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.create_data_stream.json", "diffHunk": "@@ -0,0 +1,31 @@\n+{\n+  \"cluster.create_data_stream\":{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2Nzc3Ng=="}, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNDkzOQ==", "bodyText": "Just like indices based apis, data stream apis targets a namespace. So someone may be allowed to create a data stream for logs-* but not for events-*.\nIdeally there should be a data stream privilege that handles this correctly, because data streams aren't indices and a data stream may have indices that don't share the data stream name as common prefix. But for now let's stick with indices: based action names and group the apis in the indices client, until we a better there is a better understanding how security and data streams should integrate.\nI think component templates should remain cluster based apis. The reason is that these resources don't apply to a namespace. The index template (based on the specified pattern) that use component templates should be an index based action/operation, since they apply the an index namespace and soon also to a data stream namespace.\nHowever currently index templates are treated as cluster privilege (see ClusterPrivilegeResolver line 196 in master), even though the action names start with indices: prefix. With data streams we should properly fix this.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395334939", "createdAt": "2020-03-19T21:39:33Z", "author": {"login": "martijnvg"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.create_data_stream.json", "diffHunk": "@@ -0,0 +1,31 @@\n+{\n+  \"cluster.create_data_stream\":{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2Nzc3Ng=="}, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1MTQ3OA==", "bodyText": "Okay, I originally had component template APIs using indices: to match the existing template stuff, but I did end up changing it because that requires the request to provide the indices that it is going to apply to, and component templates don't apply to indices. +1 to properly fix the template exception with data streams.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395351478", "createdAt": "2020-03-19T22:19:45Z", "author": {"login": "dakrone"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.create_data_stream.json", "diffHunk": "@@ -0,0 +1,31 @@\n+{\n+  \"cluster.create_data_stream\":{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2Nzc3Ng=="}, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTM2NDE1OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.delete_data_stream.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo0Mzo0NVrOF43JsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo0Mzo0NVrOF43JsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2ODE3Ng==", "bodyText": "data_streams.delete?", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395168176", "createdAt": "2020-03-19T16:43:45Z", "author": {"login": "henningandersen"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.delete_data_stream.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+  \"cluster.delete_data_stream\":{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTM2NDk4OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.get_data_streams.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo0Mzo1OVrOF43KRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo0Mzo1OVrOF43KRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2ODMyNg==", "bodyText": "data_streams.get?", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395168326", "createdAt": "2020-03-19T16:43:59Z", "author": {"login": "henningandersen"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/cluster.get_data_streams.json", "diffHunk": "@@ -0,0 +1,33 @@\n+{\n+  \"cluster.get_data_streams\":{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTM5NDIxOnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/test/cluster.data_stream/10_basic.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1MDo1NlrOF43dEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1MDo1NlrOF43dEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MzEzOA==", "bodyText": "I think most places where we ask for a field, we use just \"field\" and not \"field_name\". I did not search all usages, but I think this should be just timestamp_field.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395173138", "createdAt": "2020-03-19T16:50:56Z", "author": {"login": "henningandersen"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/cluster.data_stream/10_basic.yml", "diffHunk": "@@ -0,0 +1,26 @@\n+---\n+\"Test stubs\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason: not backported yet\n+\n+  - do:\n+      cluster.create_data_stream:\n+        name: data-stream2\n+        body:\n+          timestamp_field_name: \"@timestamp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTQxMDg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/datastream/CreateDataStreamAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1NDo1NVrOF43n4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1NDo1NVrOF43n4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3NTkwNA==", "bodyText": "I think we should move this outside the cluster package? So datastream is a sibling to indices.\nWe might also want to follow the same substructure by adding create package now? Probably easiest to split into subpackages early.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395175904", "createdAt": "2020-03-19T16:54:55Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.action.admin.cluster.datastream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTQyMDk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/datastream/CreateDataStreamAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1NzoxN1rOF43uXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1NzoxN1rOF43uXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3NzU2NQ==", "bodyText": "I am in doubt if we should not add a specific prefix here? No need to look at this now, we can pick that up later.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395177565", "createdAt": "2020-03-19T16:57:17Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.action.admin.cluster.datastream;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.action.support.master.TransportMasterNodeAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class CreateDataStreamAction extends ActionType<AcknowledgedResponse> {\n+\n+    public static final CreateDataStreamAction INSTANCE = new CreateDataStreamAction();\n+    public static final String NAME = \"cluster:admin/data_stream/create\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTQ0MTM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/client/support/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMjoxM1rOF437ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMjoxM1rOF437ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MDkwNg==", "bodyText": "Same story as for the action names. We should consider whether to include this under indices or under a new \"client\" interface? Will add to our weekly sync, this should not block merging this.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395180906", "createdAt": "2020-03-19T17:02:13Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/client/support/AbstractClient.java", "diffHunk": "@@ -1185,6 +1188,36 @@ public DeleteStoredScriptRequestBuilder prepareDeleteStoredScript(){\n         public DeleteStoredScriptRequestBuilder prepareDeleteStoredScript(String id){\n             return prepareDeleteStoredScript().setId(id);\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTQ0ODAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMzo1MlrOF43_tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTowMjoxOVrOF5L13A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MjAwNA==", "bodyText": "Rename to DataStreamMetaData (like IndexMetaData)?", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395182004", "createdAt": "2020-03-19T17:03:52Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public final class DataStream extends AbstractDiffable<DataStream> implements ToXContentObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwMDE1OQ==", "bodyText": "Data stream definitions will be stored in a custom metadata (like ComponentTemplateMetadata). These classes tend to have the Metadata suffix and therfore I think that adding MetaData suffix is confusing here.\nMaybe we can rename this to DataStreamSource? Like how stored scripts are stored? (which also is stored inside a custom metadata).", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395200159", "createdAt": "2020-03-19T17:30:51Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public final class DataStream extends AbstractDiffable<DataStream> implements ToXContentObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MjAwNA=="}, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NjUxOA==", "bodyText": "OK. I think I imagined a more native integration into the MetaData (outside Custom). I think the primary purpose of Custom is for extensibility (x-pack/plugins/modules)? In particular, I think MetaData.getAliasAndIndexLookup will need some support of data-streams? It could still look for the Custom metadata pieces, but feels second-class.\nLet us leave this as is for now and tackle above when we get to add the metadata and do the lookups.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395496518", "createdAt": "2020-03-20T08:38:07Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public final class DataStream extends AbstractDiffable<DataStream> implements ToXContentObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MjAwNA=="}, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzE2NA==", "bodyText": "I think MetaData.getAliasAndIndexLookup will need some support of data-streams?\n\nWe can add a getter on metadata that reads data stream from a custom and then it is as if it is stored as a primary field. The reason why I think we should do this is that, we get serialization, diffability and versioning for free without changing the Metadata class.\n\nIt could still look for the Custom metadata pieces, but feels second-class.\n\nPerhaps we should rename this in the future. Scripts and pipelines and other primary concepts are stored also as custom metadata and these concepts aren't second class either.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395507164", "createdAt": "2020-03-20T09:02:19Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.elasticsearch.cluster.AbstractDiffable;\n+import org.elasticsearch.cluster.Diff;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public final class DataStream extends AbstractDiffable<DataStream> implements ToXContentObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MjAwNA=="}, "originalCommit": {"oid": "f9ce4cdcbc530679c0416b4d7bf0483e83767f13"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQwMDgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ClusterPrivilegeResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODoyNzoyMFrOF5K6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODoyNzoyMFrOF5K6Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5MTg1OQ==", "bodyText": "Maybe add a todo to help the next reader until resolved? Something like:\n// todo: hack until we implement security of data_streams", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395491859", "createdAt": "2020-03-20T08:27:20Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ClusterPrivilegeResolver.java", "diffHunk": "@@ -193,7 +193,9 @@ public static NamedClusterPrivilege resolve(String name) {\n     }\n \n     public static boolean isClusterAction(String actionName) {\n-        return actionName.startsWith(\"cluster:\") || actionName.startsWith(\"indices:admin/template/\");\n+        return actionName.startsWith(\"cluster:\") ||\n+            actionName.startsWith(\"indices:admin/template/\") ||\n+            actionName.startsWith(\"indices:admin/data_stream/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7130a27a40557ec07594d8c0bbc8091cab3e2d38"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQzNTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestCreateDataStreamAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo0MDoyN1rOF5LP-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo1Nzo1NFrOF5LuPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NzQ2NQ==", "bodyText": "I think the rest classes should move to org.elasticsearch.rest.action.admin.datastreams? Or org.elasticsearch.rest.action.admin.indices.datastream?", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395497465", "createdAt": "2020-03-20T08:40:27Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestCreateDataStreamAction.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.rest.action.admin.cluster;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b133074999393f10b0c6f854493157da31a4d1b6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNTIxMg==", "bodyText": "yes, I missed that.", "url": "https://github.com/elastic/elasticsearch/pull/53666#discussion_r395505212", "createdAt": "2020-03-20T08:57:54Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestCreateDataStreamAction.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.rest.action.admin.cluster;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NzQ2NQ=="}, "originalCommit": {"oid": "b133074999393f10b0c6f854493157da31a4d1b6"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4299, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}