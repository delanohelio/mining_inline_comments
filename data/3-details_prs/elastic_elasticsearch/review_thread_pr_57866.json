{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNjQ1NzU3", "number": 57866, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMjo0NFrOED3ySQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyMTo1N1rOED4A8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk1MTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/AbortedSnapshotException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMjo0NFrOGhJHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NTowNFrOGhKmvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTU1NA==", "bodyText": "Should this be an IndexShardSnapshotException so that it can be serialized across the wire?", "url": "https://github.com/elastic/elasticsearch/pull/57866#discussion_r437405554", "createdAt": "2020-06-09T13:12:44Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/AbortedSnapshotException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.snapshots;\n+\n+public final class AbortedSnapshotException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac4a0150ab07d32622e9e1d1e3857fd1f53129cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTk0OA==", "bodyText": "The reason I went for this (new exception type) was to explicitly not have this hit the wire ever. It's just here for flow control (not that that's great but that's how aborts work currently and as previously discussed it's not trivial to change that) and should never bubble up.", "url": "https://github.com/elastic/elasticsearch/pull/57866#discussion_r437429948", "createdAt": "2020-06-09T13:45:04Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/AbortedSnapshotException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.snapshots;\n+\n+public final class AbortedSnapshotException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTU1NA=="}, "originalCommit": {"oid": "ac4a0150ab07d32622e9e1d1e3857fd1f53129cc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk2NDQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxNTo1M1rOGhJPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxNTo1M1rOGhJPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNzY3Mw==", "bodyText": "I think I would prefer just to match IndexShardSnapshotException here and the \"aborted\" message (instead of introducing new exception type) to determine what to log and what failure should be.", "url": "https://github.com/elastic/elasticsearch/pull/57866#discussion_r437407673", "createdAt": "2020-06-09T13:15:53Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -272,16 +271,44 @@ public void onResponse(String newGeneration) {\n \n                         @Override\n                         public void onFailure(Exception e) {\n-                            final String failure = ExceptionsHelper.stackTrace(e);\n+                            final String failure;\n+                            if (e instanceof AbortedSnapshotException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac4a0150ab07d32622e9e1d1e3857fd1f53129cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk4OTMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyMTo1N1rOGhJfzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozOToyOVrOGhNYkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTc4OQ==", "bodyText": "maybe call this summarizeFailure", "url": "https://github.com/elastic/elasticsearch/pull/57866#discussion_r437411789", "createdAt": "2020-06-09T13:21:57Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -272,16 +271,44 @@ public void onResponse(String newGeneration) {\n \n                         @Override\n                         public void onFailure(Exception e) {\n-                            final String failure = ExceptionsHelper.stackTrace(e);\n+                            final String failure;\n+                            if (e instanceof AbortedSnapshotException) {\n+                                failure = \"aborted\";\n+                                logger.debug(() -> new ParameterizedMessage(\"[{}][{}] aborted shard snapshot\", shardId, snapshot), e);\n+                            } else {\n+                                failure = formatFailure(e);\n+                                logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to snapshot shard\", shardId, snapshot), e);\n+                            }\n                             snapshotStatus.moveToFailed(threadPool.absoluteTimeInMillis(), failure);\n-                            logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to snapshot shard\", shardId, snapshot), e);\n                             notifyFailedSnapshotShard(snapshot, shardId, failure);\n                         }\n                     });\n             }\n         });\n     }\n \n+    private static String formatFailure(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac4a0150ab07d32622e9e1d1e3857fd1f53129cc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMjIxMQ==", "bodyText": "can you also add unit tests for this method?", "url": "https://github.com/elastic/elasticsearch/pull/57866#discussion_r437412211", "createdAt": "2020-06-09T13:22:33Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -272,16 +271,44 @@ public void onResponse(String newGeneration) {\n \n                         @Override\n                         public void onFailure(Exception e) {\n-                            final String failure = ExceptionsHelper.stackTrace(e);\n+                            final String failure;\n+                            if (e instanceof AbortedSnapshotException) {\n+                                failure = \"aborted\";\n+                                logger.debug(() -> new ParameterizedMessage(\"[{}][{}] aborted shard snapshot\", shardId, snapshot), e);\n+                            } else {\n+                                failure = formatFailure(e);\n+                                logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to snapshot shard\", shardId, snapshot), e);\n+                            }\n                             snapshotStatus.moveToFailed(threadPool.absoluteTimeInMillis(), failure);\n-                            logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to snapshot shard\", shardId, snapshot), e);\n                             notifyFailedSnapshotShard(snapshot, shardId, failure);\n                         }\n                     });\n             }\n         });\n     }\n \n+    private static String formatFailure(Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTc4OQ=="}, "originalCommit": {"oid": "ac4a0150ab07d32622e9e1d1e3857fd1f53129cc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3NTQ3Mw==", "bodyText": "Sure renamed + test added", "url": "https://github.com/elastic/elasticsearch/pull/57866#discussion_r437475473", "createdAt": "2020-06-09T14:39:29Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -272,16 +271,44 @@ public void onResponse(String newGeneration) {\n \n                         @Override\n                         public void onFailure(Exception e) {\n-                            final String failure = ExceptionsHelper.stackTrace(e);\n+                            final String failure;\n+                            if (e instanceof AbortedSnapshotException) {\n+                                failure = \"aborted\";\n+                                logger.debug(() -> new ParameterizedMessage(\"[{}][{}] aborted shard snapshot\", shardId, snapshot), e);\n+                            } else {\n+                                failure = formatFailure(e);\n+                                logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to snapshot shard\", shardId, snapshot), e);\n+                            }\n                             snapshotStatus.moveToFailed(threadPool.absoluteTimeInMillis(), failure);\n-                            logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to snapshot shard\", shardId, snapshot), e);\n                             notifyFailedSnapshotShard(snapshot, shardId, failure);\n                         }\n                     });\n             }\n         });\n     }\n \n+    private static String formatFailure(Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTc4OQ=="}, "originalCommit": {"oid": "ac4a0150ab07d32622e9e1d1e3857fd1f53129cc"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1721, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}