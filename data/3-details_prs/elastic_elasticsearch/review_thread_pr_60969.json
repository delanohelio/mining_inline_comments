{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MTMxMzMz", "number": 60969, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0ODo1OFrOEYmSKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxOTozMVrOEYmx6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI4NTIyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/JdkUnzipTransform.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0ODo1OFrOHBBeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNzoyNjoxMlrOHBId2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNDcyNA==", "bodyText": "Would it better to pass a parameter to the transform indicating the prefix expression to trim off vs having multiple implementations? I'm wondering if that capability might be useful for any other use case. If not, this pattern seems fine to me.", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470834724", "createdAt": "2020-08-14T19:48:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/JdkUnzipTransform.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.tools.zip.ZipEntry;\n+import org.elasticsearch.gradle.util.ArchiveUtils;\n+\n+import java.nio.file.Path;\n+\n+public abstract class JdkUnzipTransform extends UnzipTransform {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0OTMzOA==", "bodyText": "Initially I tried to pass a lambda as transform parameter here which caused serialisation issues. Havn't thought about parameterising the trim method itself (facepalm). Did that now and it looks way better now \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470949338", "createdAt": "2020-08-15T07:26:12Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/JdkUnzipTransform.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.tools.zip.ZipEntry;\n+import org.elasticsearch.gradle.util.ArchiveUtils;\n+\n+import java.nio.file.Path;\n+\n+public abstract class JdkUnzipTransform extends UnzipTransform {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNDcyNA=="}, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjMwNDM2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1NTo1OFrOHBBpsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNTo1MDozN1rOHBICSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNzY4MQ==", "bodyText": "Just to clear my confusion, this can be resolved but not consumed which just means it can't be used by another project, right?", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470837681", "createdAt": "2020-08-14T19:55:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -41,22 +43,34 @@\n \n     @Override\n     public void apply(Project project) {\n+        Attribute<Boolean> jdkAttribute = Attribute.of(\"jdk\", Boolean.class);\n+        project.getDependencies().getAttributesSchema().attribute(jdkAttribute);\n         project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n-        project.getDependencies().registerTransform(UnzipTransform.class, transformSpec -> {\n-            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.ZIP_TYPE);\n-            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(JdkUnzipTransform.class, transformSpec -> {\n+            transformSpec.getFrom()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.ZIP_TYPE)\n+                .attribute(jdkAttribute, true);\n+            transformSpec.getTo()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE)\n+                .attribute(jdkAttribute, true);\n+            ;\n         });\n \n         ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");\n-        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, transformSpec -> {\n-            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, tarArtifactTypeDefinition.getName());\n-            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(JdkSymbolicLinkPreservingUntarTransform.class, transformSpec -> {\n+            transformSpec.getFrom()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, tarArtifactTypeDefinition.getName())\n+                .attribute(jdkAttribute, true);\n+            transformSpec.getTo()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE)\n+                .attribute(jdkAttribute, true);\n         });\n \n         NamedDomainObjectContainer<Jdk> jdksContainer = project.container(Jdk.class, name -> {\n             Configuration configuration = project.getConfigurations().create(\"jdk_\" + name);\n             configuration.setCanBeConsumed(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MjI4MA==", "bodyText": "exactly", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470942280", "createdAt": "2020-08-15T05:50:37Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -41,22 +43,34 @@\n \n     @Override\n     public void apply(Project project) {\n+        Attribute<Boolean> jdkAttribute = Attribute.of(\"jdk\", Boolean.class);\n+        project.getDependencies().getAttributesSchema().attribute(jdkAttribute);\n         project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n-        project.getDependencies().registerTransform(UnzipTransform.class, transformSpec -> {\n-            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.ZIP_TYPE);\n-            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(JdkUnzipTransform.class, transformSpec -> {\n+            transformSpec.getFrom()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.ZIP_TYPE)\n+                .attribute(jdkAttribute, true);\n+            transformSpec.getTo()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE)\n+                .attribute(jdkAttribute, true);\n+            ;\n         });\n \n         ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");\n-        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, transformSpec -> {\n-            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, tarArtifactTypeDefinition.getName());\n-            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(JdkSymbolicLinkPreservingUntarTransform.class, transformSpec -> {\n+            transformSpec.getFrom()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, tarArtifactTypeDefinition.getName())\n+                .attribute(jdkAttribute, true);\n+            transformSpec.getTo()\n+                .attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE)\n+                .attribute(jdkAttribute, true);\n         });\n \n         NamedDomainObjectContainer<Jdk> jdksContainer = project.container(Jdk.class, name -> {\n             Configuration configuration = project.getConfigurations().create(\"jdk_\" + name);\n             configuration.setCanBeConsumed(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNzY4MQ=="}, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjMyNTk5OnYy", "diffSide": "LEFT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DistributionDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowMzo1NVrOHBB2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowMzo1NVrOHBB2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MDk4OQ==", "bodyText": "Man, it's awesome that we don't need this mess anymore.", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470840989", "createdAt": "2020-08-14T20:03:55Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DistributionDownloadPlugin.java", "diffHunk": "@@ -142,51 +140,6 @@ private Object resolveDependencyNotation(Project p, ElasticsearchDistribution di\n             .orElseGet(() -> dependencyNotation(distribution));\n     }\n \n-    private void setupRootDownload(Project rootProject, ElasticsearchDistribution distribution) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjMyOTA1OnYy", "diffSide": "RIGHT", "path": "buildSrc/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNToxMFrOHBB4iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNTo1MjozMlrOHBICvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MTQ4MA==", "bodyText": "Can we not implicitly rely on the version bundled with Gradle or is that filtered out from the buildsrc classpath?", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470841480", "createdAt": "2020-08-14T20:05:10Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/build.gradle", "diffHunk": "@@ -93,7 +93,7 @@ dependencies {\n \n   api 'commons-codec:commons-codec:1.12'\n   api 'org.apache.commons:commons-compress:1.19'\n-\n+  api 'org.apache.ant:ant:1.10.8'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MjM5OA==", "bodyText": "the ant dependencies are available via shadow.org.apache.tools.* which urged me to use the explicit dependency rather than a shadowed one.", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470942398", "createdAt": "2020-08-15T05:52:32Z", "author": {"login": "breskeby"}, "path": "buildSrc/build.gradle", "diffHunk": "@@ -93,7 +93,7 @@ dependencies {\n \n   api 'commons-codec:commons-codec:1.12'\n   api 'org.apache.commons:commons-compress:1.19'\n-\n+  api 'org.apache.ant:ant:1.10.8'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MTQ4MA=="}, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjM1OTEwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/JdkDownloadPluginFuncTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxNjo0MFrOHBCKsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNTo1NjoxN1rOHBID3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjEyOA==", "bodyText": "Should we do a clean inbetween build runs here to ensure it's actually getting \"cached\" or is that irrelevant since we aren't talking about task output here?", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470846128", "createdAt": "2020-08-14T20:16:40Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/JdkDownloadPluginFuncTest.groovy", "diffHunk": "@@ -185,8 +185,8 @@ class JdkDownloadPluginFuncTest extends AbstractGradleFuncTest {\n \n         where:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0MjY4Ng==", "bodyText": "It shouldn't matter but actually it doesn't harm here to make more explicit that this also works for clean builds as these artifact transform outputs are not put into build output but into the gradle user home.\nFYI. If the input of a transform is produced by a task (e.g. tar task) the according transform output is actually stored in the producing projects build dir folder", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470942686", "createdAt": "2020-08-15T05:56:17Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/JdkDownloadPluginFuncTest.groovy", "diffHunk": "@@ -185,8 +185,8 @@ class JdkDownloadPluginFuncTest extends AbstractGradleFuncTest {\n \n         where:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjEyOA=="}, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjM2NjUwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/JdkDownloadPluginFuncTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxOTozMVrOHBCPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNTo1NzoxNFrOHBIEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzI2NA==", "bodyText": "Should we reference the class simpleName here like we've done elsewhere to make refactoring less painful?", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470847264", "createdAt": "2020-08-14T20:19:31Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/JdkDownloadPluginFuncTest.groovy", "diffHunk": "@@ -132,7 +132,7 @@ class JdkDownloadPluginFuncTest extends AbstractGradleFuncTest {\n         }\n \n         then:\n-        result.tasks.size() == 10\n+        result.tasks.size() == 3\n         result.output.count(\"Unpacking linux-12.0.2-x64.tar.gz using SymbolicLinkPreservingUntarTransform.\") == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0Mjc1OQ==", "bodyText": "actually just got bitten by that during my refactoring :P . Fixed", "url": "https://github.com/elastic/elasticsearch/pull/60969#discussion_r470942759", "createdAt": "2020-08-15T05:57:14Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/JdkDownloadPluginFuncTest.groovy", "diffHunk": "@@ -132,7 +132,7 @@ class JdkDownloadPluginFuncTest extends AbstractGradleFuncTest {\n         }\n \n         then:\n-        result.tasks.size() == 10\n+        result.tasks.size() == 3\n         result.output.count(\"Unpacking linux-12.0.2-x64.tar.gz using SymbolicLinkPreservingUntarTransform.\") == 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzI2NA=="}, "originalCommit": {"oid": "b771fc289249cce9dac121ec68196984a9b31a37"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}