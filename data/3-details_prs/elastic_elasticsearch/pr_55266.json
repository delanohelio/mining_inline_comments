{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTQ5NjM0", "number": 55266, "title": "Docs: highlights of the 7.7 release", "bodyText": "Add the 7.7 release highlights (sans #52405, covered in #55238).", "createdAt": "2020-04-15T19:35:13Z", "url": "https://github.com/elastic/elasticsearch/pull/55266", "merged": true, "mergeCommit": {"oid": "17f5647d17b6a42c3efd859f70713a669624ab8f"}, "closed": true, "closedAt": "2020-04-20T21:27:04Z", "author": {"login": "bpintea"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX9P1tgH2gAyNDAzOTQ5NjM0OjVlYWUyN2E1MTAyYTg4NmEzMmRlY2VhY2NhZWUxYzY4ZWNkMjI5YjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZlO5igFqTM5Njc5MzM2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/5eae27a5102a886a32deceaccaee1c68ecd229b5", "committedDate": "2020-04-15T19:27:51Z", "message": "Highlights of the 7.7 release\n\nAdd the 7.7 release highlights (minus #52405, covered in #55238)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgzNTY1", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394083565", "createdAt": "2020-04-15T19:47:11Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NzoxMVrOGGJAyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NzoxMVrOGGJAyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjI5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A new setting has been introduced - `search.check_buckets_step_size` - to\n          \n          \n            \n            We introduced a new `search.check_buckets_step_size` setting to", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409092296", "createdAt": "2020-04-15T19:47:11Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgzNzkz", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394083793", "createdAt": "2020-04-15T19:47:30Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NzozMFrOGGJBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NzozMFrOGGJBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjQ1Mw==", "bodyText": "We try to avoid future tense were possible.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            better control how the coordinating node will allocate memory when aggregating\n          \n          \n            \n            better control how the coordinating node allocates memory when aggregating", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409092453", "createdAt": "2020-04-15T19:47:30Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDg0MTEz", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394084113", "createdAt": "2020-04-15T19:47:59Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0Nzo1OVrOGGJCWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0Nzo1OVrOGGJCWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjY5Ng==", "bodyText": "Future tense\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            buckets. The allocation of buckets will now be done in steps, each step\n          \n          \n            \n            buckets. The allocation of buckets is now be done in steps, each step", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409092696", "createdAt": "2020-04-15T19:47:59Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDg0ODIy", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394084822", "createdAt": "2020-04-15T19:49:03Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0OTowM1rOGGJEeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0OTowM1rOGGJEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MzI0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            allocating a number of buckets equal to this setting. A parent circuit breaker\n          \n          \n            \n            check is performed on allocation, to avoid an OOM failure.\n          \n          \n            \n            allocating a number of buckets equal to this setting. To avoid an `OutOfMemory`\n          \n          \n            \n            error, a parent circuit breaker check is performed on allocation.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409093241", "createdAt": "2020-04-15T19:49:03Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDg4ODIy", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394088822", "createdAt": "2020-04-15T19:55:13Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NToxM1rOGGJRIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NToxM1rOGGJRIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5NjQ4MQ==", "bodyText": "Technically, \"endpoint\" is a more accurate term here but we use \"API\" throughout our docs.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Searches can now be submitted to a new endpoint, `_async_search`, that works\n          \n          \n            \n            exactly the same as the `_search` endpoint, except that instead of blocking and\n          \n          \n            \n            returning the final response only once it's entirely available, it will pan the\n          \n          \n            \n            results as they become available, asynchronously.\n          \n          \n            \n            You can now submit {ref}/async-search-intro.html[long-running searches] using\n          \n          \n            \n            the new {ref}/async-search.html[`_async_search` API]. The new API accepts the\n          \n          \n            \n            same parameters and request body as the {ref}/search-search.html[Search API].\n          \n          \n            \n            However, instead of blocking and returning the final response only when it's \n          \n          \n            \n            entirely finished, you can retrieve results from an async search as they become \n          \n          \n            \n            available.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409096481", "createdAt": "2020-04-15T19:55:13Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDg5Mjkw", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394089290", "createdAt": "2020-04-15T19:55:55Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NTo1NVrOGGJSoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NTo1NVrOGGJSoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5Njg2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and final, the client can continue polling for results issuing a new request\n          \n          \n            \n            and final, the client can continue polling for results, issuing a new request", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409096865", "createdAt": "2020-04-15T19:55:55Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDg5NDgw", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394089480", "createdAt": "2020-04-15T19:56:10Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NjoxMFrOGGJTJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NjoxMFrOGGJTJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5Njk5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            using the provided search ID; if new results are available, the returned\n          \n          \n            \n            using the provided search ID. If new results are available, the returned", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409096996", "createdAt": "2020-04-15T19:56:10Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDkwMDY1", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394090065", "createdAt": "2020-04-15T19:57:02Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NzowMlrOGGJU_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1NzowMlrOGGJU_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5NzQ2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            version is incremented and the new results batch returned. This can go on until\n          \n          \n            \n            all the results are fetched.\n          \n          \n            \n            version is incremented and the new batch of results are returned. This can \n          \n          \n            \n            continue until all the results are fetched.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409097469", "createdAt": "2020-04-15T19:57:02Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDkxMjU3", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394091257", "createdAt": "2020-04-15T19:58:51Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1ODo1MVrOGGJYqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1ODo1MVrOGGJYqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5ODQxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Unless deleted earlier by the user, the asynchronous searches are kept alive\n          \n          \n            \n            for a given interval. This defaults to 5 days and can be controlled by another\n          \n          \n            \n            request parameter, `keep_alive`.\n          \n          \n            \n            Unless deleted earlier by the user, the asynchronous searches are retained\n          \n          \n            \n            for a specified time period. This defaults to 5 days and can be controlled by \n          \n          \n            \n            the `keep_alive` request parameter.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409098411", "createdAt": "2020-04-15T19:58:51Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDkyMjg0", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394092284", "createdAt": "2020-04-15T20:00:16Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowMDoxN1rOGGJbuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowMDoxN1rOGGJbuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5OTE5NQ==", "bodyText": "We typically avoid mentioning specific licenses in the docs. This keeps https://www.elastic.co/subscriptions as the universal source of truth.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            This functionality is offered under the free {xpack} Basic license.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409099195", "createdAt": "2020-04-15T20:00:17Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDkzMDUx", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394093051", "createdAt": "2020-04-15T20:01:30Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowMTozMFrOGGJeTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowMTozMFrOGGJeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5OTg1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {es} uses a custom on-disk keystore for secure settings such as\n          \n          \n            \n            {es} uses a custom on-disk {ref}/secure-settings.html[keystore] for secure settings such as", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409099855", "createdAt": "2020-04-15T20:01:30Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDkzNjc0", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394093674", "createdAt": "2020-04-15T20:02:28Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowMjoyOFrOGGJgSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowMjoyOFrOGGJgSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMDM2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            command-line access from viewing secure files by listing commands, but nothing\n          \n          \n            \n            {ref}/elasticsearch-keystore.html[command-line access] from viewing secure files by listing commands, but nothing", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409100362", "createdAt": "2020-04-15T20:02:28Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDk1Mjgz", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394095283", "createdAt": "2020-04-15T20:04:49Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNDo0OVrOGGJlgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNDo0OVrOGGJlgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMTY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The new `top_metrics` aggregation \"selects\" a metric from a document according\n          \n          \n            \n            The new {ref}//search-aggregations-metrics-top-metrics.html[`top_metrics` aggregation] \"selects\" a metric from a document according", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409101697", "createdAt": "2020-04-15T20:04:49Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDk1NDcx", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394095471", "createdAt": "2020-04-15T20:05:04Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNTowNVrOGGJmFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNTowNVrOGGJmFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMTg0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to a criteria on a given, different field. That criteria is currently being the\n          \n          \n            \n            to a criteria on a given, different field. That criteria is currently the", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409101846", "createdAt": "2020-04-15T20:05:05Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according\n+to a criteria on a given, different field. That criteria is currently being the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDk1OTQ4", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394095948", "createdAt": "2020-04-15T20:05:48Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNTo0OVrOGGJnjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNTo0OVrOGGJnjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMjIyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit\n          \n          \n            \n            largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit,", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409102220", "createdAt": "2020-04-15T20:05:49Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according\n+to a criteria on a given, different field. That criteria is currently being the\n+largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDk2MzUw", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394096350", "createdAt": "2020-04-15T20:06:23Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNjoyM1rOGGJovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowNjoyM1rOGGJovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMjUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            but because it is more limited it is able to do its job using less memory and\n          \n          \n            \n            but because it is more limited, `top_metrics` uses less memory and", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409102527", "createdAt": "2020-04-15T20:06:23Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according\n+to a criteria on a given, different field. That criteria is currently being the\n+largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit\n+but because it is more limited it is able to do its job using less memory and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDk3OTA0", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394097904", "createdAt": "2020-04-15T20:08:43Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowODo0M1rOGGJtqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowODo0M1rOGGJtqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMzc4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {es} now provides aarch64 packaging, including bundling an aarch64 JDK\n          \n          \n            \n            {es} now provides AArch64 packaging, including bundling an AArch64 JDK", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409103787", "createdAt": "2020-04-15T20:08:43Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according\n+to a criteria on a given, different field. That criteria is currently being the\n+largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit\n+but because it is more limited it is able to do its job using less memory and\n+is often faster.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Query speed-up for sorted queries on time-based indices\n+\n+Sorted queries run on time-based indices and interested in top documents only\n+can be optimized by considering that the ranges of (document) timestamps in the\n+shards don't overlap. This optimisation will rewrite the shard search requests\n+based on the results available already from other shards when it can be\n+determined that the query will not yield any result from the current shard;\n+i.e. we know in advance that the bottom entry of the (sorted) result set after\n+a partial merge is better than the values contained in this current shard.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `boxplot`\n+\n+The interquartile range is a common robust measure of statistical dispersion.\n+Compared to the standard deviation, the IQR is less sensitive to outliers in\n+the data, with a breakdown point of 0.25. Along with the median, it is often\n+used in creating a box plot, a simple yet common way to summarize data and\n+identify potential outliers.\n+The new `boxplot` aggregation calculates min, max, medium, the first and the\n+third quartiles of a given data set.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== AArch64 support\n+\n+{es} now provides aarch64 packaging, including bundling an aarch64 JDK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDk4MzMz", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394098333", "createdAt": "2020-04-15T20:09:23Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowOToyM1rOGGJvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowOToyM1rOGGJvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwNDEzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The interquartile range is a common robust measure of statistical dispersion.\n          \n          \n            \n            The https://en.wikipedia.org/wiki/Interquartile_range[interquartile range (IQR)] is a common robust measure of statistical dispersion.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409104130", "createdAt": "2020-04-15T20:09:23Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according\n+to a criteria on a given, different field. That criteria is currently being the\n+largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit\n+but because it is more limited it is able to do its job using less memory and\n+is often faster.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Query speed-up for sorted queries on time-based indices\n+\n+Sorted queries run on time-based indices and interested in top documents only\n+can be optimized by considering that the ranges of (document) timestamps in the\n+shards don't overlap. This optimisation will rewrite the shard search requests\n+based on the results available already from other shards when it can be\n+determined that the query will not yield any result from the current shard;\n+i.e. we know in advance that the bottom entry of the (sorted) result set after\n+a partial merge is better than the values contained in this current shard.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `boxplot`\n+\n+The interquartile range is a common robust measure of statistical dispersion.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDk4ODUx", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394098851", "createdAt": "2020-04-15T20:10:09Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoxMDoxMFrOGGJwlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoxMDoxMFrOGGJwlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwNDUzNA==", "bodyText": "This adds a new line for a paragraph break.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The new `boxplot` aggregation calculates min, max, medium, the first and the\n          \n          \n            \n            third quartiles of a given data set.\n          \n          \n            \n            \n          \n          \n            \n            The new {ref}/search-aggregations-metrics-boxplot-aggregation.html[`boxplot`\n          \n          \n            \n            aggregation] calculates the min, max, and medium as well as the first and third\n          \n          \n            \n            quartiles of a given data set.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409104534", "createdAt": "2020-04-15T20:10:10Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according\n+to a criteria on a given, different field. That criteria is currently being the\n+largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit\n+but because it is more limited it is able to do its job using less memory and\n+is often faster.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Query speed-up for sorted queries on time-based indices\n+\n+Sorted queries run on time-based indices and interested in top documents only\n+can be optimized by considering that the ranges of (document) timestamps in the\n+shards don't overlap. This optimisation will rewrite the shard search requests\n+based on the results available already from other shards when it can be\n+determined that the query will not yield any result from the current shard;\n+i.e. we know in advance that the bottom entry of the (sorted) result set after\n+a partial merge is better than the values contained in this current shard.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `boxplot`\n+\n+The interquartile range is a common robust measure of statistical dispersion.\n+Compared to the standard deviation, the IQR is less sensitive to outliers in\n+the data, with a breakdown point of 0.25. Along with the median, it is often\n+used in creating a box plot, a simple yet common way to summarize data and\n+identify potential outliers.\n+The new `boxplot` aggregation calculates min, max, medium, the first and the\n+third quartiles of a given data set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTAxODA4", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394101808", "createdAt": "2020-04-15T20:14:43Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoxNDo0M1rOGGJ6Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoxNDo0M1rOGGJ6Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwNjk0Ng==", "bodyText": "This one was admittedly a little hard for me to follow. I've made some changes to\ntry to help, but feel free to ignore if I've gotten something wrong.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Sorted queries run on time-based indices and interested in top documents only\n          \n          \n            \n            can be optimized by considering that the ranges of (document) timestamps in the\n          \n          \n            \n            shards don't overlap. This optimisation will rewrite the shard search requests\n          \n          \n            \n            based on the results available already from other shards when it can be\n          \n          \n            \n            determined that the query will not yield any result from the current shard;\n          \n          \n            \n            i.e. we know in advance that the bottom entry of the (sorted) result set after\n          \n          \n            \n            a partial merge is better than the values contained in this current shard.\n          \n          \n            \n            We've optimized sorted, top-documents-only queries run on time-based indices.\n          \n          \n            \n            {es} now considers the ranges of document timestamps in the shards, ensuring\n          \n          \n            \n            they don't overlap. This optimization rewrites the shard search requests based\n          \n          \n            \n            on results available already from other shards; i.e. we know the bottom entry of\n          \n          \n            \n            the sorted results after a partial merge are better than the values contained in\n          \n          \n            \n            this shard.", "url": "https://github.com/elastic/elasticsearch/pull/55266#discussion_r409106946", "createdAt": "2020-04-15T20:14:43Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights-7.7.0.asciidoc", "diffHunk": "@@ -18,3 +18,110 @@ pivot and summarize your data and store it in a new index. See\n {ref}//transform-apis.html[{transform-cap} APIs].\n \n // end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Finer memory control for bucket aggregations\n+\n+A new setting has been introduced - `search.check_buckets_step_size` - to\n+better control how the coordinating node will allocate memory when aggregating\n+buckets. The allocation of buckets will now be done in steps, each step\n+allocating a number of buckets equal to this setting. A parent circuit breaker\n+check is performed on allocation, to avoid an OOM failure.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new way of searching: asynchronously\n+\n+Searches can now be submitted to a new endpoint, `_async_search`, that works\n+exactly the same as the `_search` endpoint, except that instead of blocking and\n+returning the final response only once it's entirely available, it will pan the\n+results as they become available, asynchronously.\n+\n+The request takes a parameter, `wait_for_completion`, which controls how long\n+the server will wait until it sends back a response. The first response\n+contains among others a search unique ID, a response version, an indication if\n+this response is partial or not, plus the usual metadata (shards involved,\n+number of hits etc) and potentially results. If the response is not complete\n+and final, the client can continue polling for results issuing a new request\n+using the provided search ID; if new results are available, the returned\n+version is incremented and the new results batch returned. This can go on until\n+all the results are fetched.\n+\n+Unless deleted earlier by the user, the asynchronous searches are kept alive\n+for a given interval. This defaults to 5 days and can be controlled by another\n+request parameter, `keep_alive`.\n+\n+This functionality is offered under the free {xpack} Basic license.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Password protection for the keystore\n+\n+{es} uses a custom on-disk keystore for secure settings such as\n+passwords and SSL certificates. Up until now, this prevented users with\n+command-line access from viewing secure files by listing commands, but nothing\n+prevented such users from changing values in the keystore, or removing values\n+from it. Furthermore, the values were only obfuscated by a hash; no\n+user-specific secret protected the secure settings.\n+\n+This new feature changes all of that by adding password-protection to the\n+keystore. This is not be a breaking change: if a keystore has no password,\n+there won\u2019t be any new prompts. A user must choose to password-protect their\n+keystore in order to benefit from the new behavior.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== A new aggregation: `top_metrics`\n+\n+The new `top_metrics` aggregation \"selects\" a metric from a document according\n+to a criteria on a given, different field. That criteria is currently being the\n+largest or smallest \"sort\" value. It is fairly similar to `top_hits` in spirit\n+but because it is more limited it is able to do its job using less memory and\n+is often faster.\n+\n+// end::notable-highlights[]\n+\n+// tag::notable-highlights[]\n+[float]\n+=== Query speed-up for sorted queries on time-based indices\n+\n+Sorted queries run on time-based indices and interested in top documents only\n+can be optimized by considering that the ranges of (document) timestamps in the\n+shards don't overlap. This optimisation will rewrite the shard search requests\n+based on the results available already from other shards when it can be\n+determined that the query will not yield any result from the current shard;\n+i.e. we know in advance that the bottom entry of the (sorted) result set after\n+a partial merge is better than the values contained in this current shard.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTA0OTQy", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394104942", "createdAt": "2020-04-15T20:19:34Z", "commit": {"oid": "5eae27a5102a886a32deceaccaee1c68ecd229b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72437686aeb52e9483829b2d2dbc831ad55af38d", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/72437686aeb52e9483829b2d2dbc831ad55af38d", "committedDate": "2020-04-16T09:09:18Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be5ecb2d789f48fe77ed77d65b7e06467c584e75", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/be5ecb2d789f48fe77ed77d65b7e06467c584e75", "committedDate": "2020-04-16T09:09:34Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b250b8cad7e91e2e4972a38db4a134c651e8a1a4", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/b250b8cad7e91e2e4972a38db4a134c651e8a1a4", "committedDate": "2020-04-16T09:09:52Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75b22640ea0a0c9e10343006d994e851d95d88f0", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/75b22640ea0a0c9e10343006d994e851d95d88f0", "committedDate": "2020-04-16T09:14:13Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19d4194c6c1ef1b7907074505b7b3a6b3a703f7f", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/19d4194c6c1ef1b7907074505b7b3a6b3a703f7f", "committedDate": "2020-04-16T09:15:03Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4b4b625c13d18f54be8501623e728b983e5b9aa", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/b4b4b625c13d18f54be8501623e728b983e5b9aa", "committedDate": "2020-04-16T09:18:29Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ad14af0f70d6c73aa668998335158ff5be9d08", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/e1ad14af0f70d6c73aa668998335158ff5be9d08", "committedDate": "2020-04-16T09:18:47Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092bf02e0b6b24154ae0ed660b013ae2a6e00314", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/092bf02e0b6b24154ae0ed660b013ae2a6e00314", "committedDate": "2020-04-16T09:19:17Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b67423bf766132434394eba40dfc8b211b9e0df9", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/b67423bf766132434394eba40dfc8b211b9e0df9", "committedDate": "2020-04-16T09:20:05Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56ee0b34c365d47ba27f8f492b6ae48c41d0ec2", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/a56ee0b34c365d47ba27f8f492b6ae48c41d0ec2", "committedDate": "2020-04-16T09:21:01Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa577332701a1ab8649c82b1e287148639adb0b", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/2aa577332701a1ab8649c82b1e287148639adb0b", "committedDate": "2020-04-16T09:23:25Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61915a412625116a0071e2b2a0c1c238f0711f26", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/61915a412625116a0071e2b2a0c1c238f0711f26", "committedDate": "2020-04-16T09:23:39Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef3971cef66bb8017110ac7221e72aa45bf76f71", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/ef3971cef66bb8017110ac7221e72aa45bf76f71", "committedDate": "2020-04-16T09:23:57Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e572dff83260685080fb755cb2a8400cfc07e012", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/e572dff83260685080fb755cb2a8400cfc07e012", "committedDate": "2020-04-16T09:24:18Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a7126631ef4844100b7bbdee4a4dc5d8baee29", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/a6a7126631ef4844100b7bbdee4a4dc5d8baee29", "committedDate": "2020-04-16T09:24:56Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4157ba56b0627e2d4f47a5348114b3e08280189", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/f4157ba56b0627e2d4f47a5348114b3e08280189", "committedDate": "2020-04-16T09:25:11Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54052de3c53ab2a88c1217e59fea35230dc1d1e1", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/54052de3c53ab2a88c1217e59fea35230dc1d1e1", "committedDate": "2020-04-16T09:25:27Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecff18f289028426516153584d5a5275c74b743c", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/ecff18f289028426516153584d5a5275c74b743c", "committedDate": "2020-04-16T09:25:40Z", "message": "Update docs/reference/release-notes/highlights-7.7.0.asciidoc\n\nCo-Authored-By: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "821085fd44f002dea1c613c770a37599e7f7c0cc", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/821085fd44f002dea1c613c770a37599e7f7c0cc", "committedDate": "2020-04-16T10:13:50Z", "message": "Rephrase query speed-up explanation\n\nRephrase query speed-up explanation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTg0OTcy", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-394584972", "createdAt": "2020-04-16T12:33:10Z", "commit": {"oid": "821085fd44f002dea1c613c770a37599e7f7c0cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NzkzMzY3", "url": "https://github.com/elastic/elasticsearch/pull/55266#pullrequestreview-396793367", "createdAt": "2020-04-20T20:36:57Z", "commit": {"oid": "821085fd44f002dea1c613c770a37599e7f7c0cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3409, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}