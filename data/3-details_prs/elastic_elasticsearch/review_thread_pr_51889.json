{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDQ1MDE2", "number": 51889, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMDo1M1rODdqmXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozODo0OFrODeCqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDMzMjQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMDo1M1rOFmZbxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzoxMjoxOVrOFmag1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNjkxOQ==", "bodyText": "This bit seems like it belongs in the tests for OutlierDetection. However, we'd need to access that mutation from here too to make this test work. We could reuse the mutateInstanceForVersion method of other tests here (by extracting the logic in a static method, similarly to our createRandom methods). However, I don't see how we'd get rid of the instanceof here.\nOne thing this makes me wonder is if it'd be better to design this in a way where we have a separate test for each BWC change we're testing. Say we have for example a private test method that takes some params and we can call it from different tests where we isolate the change we're testing. That would help avoiding mutateInstanceForVersion become too complex.\nI like the idea of having these tests a lot, don't take me wrong! I think it's great! Just pondering a few ideas on the details.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375806919", "createdAt": "2020-02-06T12:30:53Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed\n+            }\n+            builder.setSource(new DataFrameAnalyticsSource.Builder(instance.getSource())\n+                .setSourceFiltering(null)\n+                .build());\n+        }\n+        if (version.before(Version.V_7_5_0)) {\n+            builder.setAllowLazyStart(false);\n+            if (instance.getAnalysis() instanceof OutlierDetection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyMDA2NQ==", "bodyText": "One thing this makes me wonder is if it'd be better to design this in a way where we have a separate test for each BWC change we're testing.\n\nWe could potentially do this. But I also think that this type of separation could easily be done within the mutateInstanceForVersion by having separate function calls.\nMy goal is to implicitly force the users of the scaffold to handle all BWC versions. Whether or not they want to. Having users write their own individual bwc tests for specific versions sort of defeats this.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375820065", "createdAt": "2020-02-06T13:02:12Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed\n+            }\n+            builder.setSource(new DataFrameAnalyticsSource.Builder(instance.getSource())\n+                .setSourceFiltering(null)\n+                .build());\n+        }\n+        if (version.before(Version.V_7_5_0)) {\n+            builder.setAllowLazyStart(false);\n+            if (instance.getAnalysis() instanceof OutlierDetection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNjkxOQ=="}, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyNDU5Ng==", "bodyText": "I agree though, that we should attempt to have static methods for us to reuse else where if an object has multiple sub-objects that have BWC tests. I will refactor a bit to handle that :D", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375824596", "createdAt": "2020-02-06T13:12:19Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed\n+            }\n+            builder.setSource(new DataFrameAnalyticsSource.Builder(instance.getSource())\n+                .setSourceFiltering(null)\n+                .build());\n+        }\n+        if (version.before(Version.V_7_5_0)) {\n+            builder.setAllowLazyStart(false);\n+            if (instance.getAnalysis() instanceof OutlierDetection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNjkxOQ=="}, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDMzNTc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMjoxMlrOFmZd1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo0MDo1OVrOFml_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNzQ0Ng==", "bodyText": "Do these belong in the respective test classes? See below.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375807446", "createdAt": "2020-02-06T12:32:12Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyMDgxNQ==", "bodyText": "This todo shows that it is impossible to accurately test equality for Regression and Classification.\nWhen reading in from an older version, a random seed is generated. There is no way of determining which value that is so that you can accurately say \"this is what the object would be if serialized from an old version\".", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375820815", "createdAt": "2020-02-06T13:03:49Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNzQ0Ng=="}, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMjczNA==", "bodyText": "Added some tests to classification and regression analysis types.\nAlso updated the scaffolding to better handle unique situations like the random seed generation.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376012734", "createdAt": "2020-02-06T18:40:59Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNzQ0Ng=="}, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDM1NTkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozOTo0OFrOFmZqKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzowNDowN1rOFmaSnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxMDYwMw==", "bodyText": "This one too. Also, I wonder if it's worth having a Builder class for this just for this test. If we had a DataFrameAnalyticsSourceTests.mutateInstanceForVersion it could perform this logic just by using the constructor.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375810603", "createdAt": "2020-02-06T12:39:48Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed\n+            }\n+            builder.setSource(new DataFrameAnalyticsSource.Builder(instance.getSource())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyMDk1OQ==", "bodyText": "I can set that up, for sure.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375820959", "createdAt": "2020-02-06T13:04:07Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed\n+            }\n+            builder.setSource(new DataFrameAnalyticsSource.Builder(instance.getSource())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxMDYwMw=="}, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODI1MzkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozMjo1OVrOFm-4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyMToxM1rOFnAhlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDM1Ng==", "bodyText": "Question: I wonder if that's robust w.r.t. the \"ghost\" version, which does not really exist. E.g. we have a constant for 7.5.3 which will exist until 7.6.0 (or 7.6.1?) is released. I do not recall the logic, but there is some magic version.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376420356", "createdAt": "2020-02-07T14:32:59Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.test.AbstractSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.Version.getDeclaredVersions;\n+\n+public abstract class AbstractBWCSerializationTestCase<T extends Writeable & ToXContent> extends AbstractSerializingTestCase<T> {\n+\n+    private static final List<Version> ALL_VERSIONS = Collections.unmodifiableList(getDeclaredVersions(Version.class));\n+\n+    public static List<Version> getAllBWCVersions(Version version) {\n+        return ALL_VERSIONS.stream().filter(v -> v.before(version) && version.isCompatible(v)).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NzM4Mg==", "bodyText": "never mind, I realized this does not matter.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376447382", "createdAt": "2020-02-07T15:21:13Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.test.AbstractSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.Version.getDeclaredVersions;\n+\n+public abstract class AbstractBWCSerializationTestCase<T extends Writeable & ToXContent> extends AbstractSerializingTestCase<T> {\n+\n+    private static final List<Version> ALL_VERSIONS = Collections.unmodifiableList(getDeclaredVersions(Version.class));\n+\n+    public static List<Version> getAllBWCVersions(Version version) {\n+        return ALL_VERSIONS.stream().filter(v -> v.before(version) && version.isCompatible(v)).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDM1Ng=="}, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODI2NTE3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozNjowMVrOFm--lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxOToyM1rOFnCfGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjAzOA==", "bodyText": "why is it overridden? why is DEFAULT_BWC_VERSIONS not sufficient?\n(if possible add the answer as code comment)", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376422038", "createdAt": "2020-02-07T14:36:01Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +93,88 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return AbstractBWCSerializationTestCase.getAllBWCVersions(Version.V_7_7_0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3OTUxNQ==", "bodyText": "It is overridden so these tests would actually do something :). I will remove the override on backport (so the BWC tests run according to the 7.series rules) and then the override can be removed in 8.series.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376479515", "createdAt": "2020-02-07T16:19:23Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +93,88 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return AbstractBWCSerializationTestCase.getAllBWCVersions(Version.V_7_7_0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjAzOA=="}, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODI3NDc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozODo0OFrOFm_ERw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyMjozMVrOFnAksQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMzQ5NQ==", "bodyText": "how do you ignore versions where the feature does not exist yet, e.g. 7.1??\nI think we never check that.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376423495", "createdAt": "2020-02-07T14:38:48Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.test.AbstractSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.Version.getDeclaredVersions;\n+\n+public abstract class AbstractBWCSerializationTestCase<T extends Writeable & ToXContent> extends AbstractSerializingTestCase<T> {\n+\n+    private static final List<Version> ALL_VERSIONS = Collections.unmodifiableList(getDeclaredVersions(Version.class));\n+\n+    public static List<Version> getAllBWCVersions(Version version) {\n+        return ALL_VERSIONS.stream().filter(v -> v.before(version) && version.isCompatible(v)).collect(Collectors.toList());\n+    }\n+\n+    private static final List<Version> DEFAULT_BWC_VERSIONS = getAllBWCVersions(Version.CURRENT);\n+\n+    /**\n+     * Returns the expected instance if serialized from the given version.\n+     */\n+    protected abstract T mutateInstanceForVersion(T instance, Version version);\n+\n+    /**\n+     * The bwc versions to test serialization against\n+     */\n+    protected List<Version> bwcVersions() {\n+        return DEFAULT_BWC_VERSIONS;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0ODE3Nw==", "bodyText": "after some more thought: this is benign", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376448177", "createdAt": "2020-02-07T15:22:31Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.test.AbstractSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.Version.getDeclaredVersions;\n+\n+public abstract class AbstractBWCSerializationTestCase<T extends Writeable & ToXContent> extends AbstractSerializingTestCase<T> {\n+\n+    private static final List<Version> ALL_VERSIONS = Collections.unmodifiableList(getDeclaredVersions(Version.class));\n+\n+    public static List<Version> getAllBWCVersions(Version version) {\n+        return ALL_VERSIONS.stream().filter(v -> v.before(version) && version.isCompatible(v)).collect(Collectors.toList());\n+    }\n+\n+    private static final List<Version> DEFAULT_BWC_VERSIONS = getAllBWCVersions(Version.CURRENT);\n+\n+    /**\n+     * Returns the expected instance if serialized from the given version.\n+     */\n+    protected abstract T mutateInstanceForVersion(T instance, Version version);\n+\n+    /**\n+     * The bwc versions to test serialization against\n+     */\n+    protected List<Version> bwcVersions() {\n+        return DEFAULT_BWC_VERSIONS;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMzQ5NQ=="}, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4906, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}