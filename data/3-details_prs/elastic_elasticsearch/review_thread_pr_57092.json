{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzgzMDMw", "number": 57092, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozNzo0OFrOD_TtCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozNzo0OFrOD_TtCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzA5NzA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/bytes/ReleasableBytesReference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozNzo0OFrOGZ5ZTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozNzo0OFrOGZ5ZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwNzk0OQ==", "bodyText": "I would prefer to move this call to the private ReleasableBytesReference constructor.", "url": "https://github.com/elastic/elasticsearch/pull/57092#discussion_r429807949", "createdAt": "2020-05-25T08:37:48Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/ReleasableBytesReference.java", "diffHunk": "@@ -34,41 +33,44 @@\n  * An extension to {@link BytesReference} that requires releasing its content. This\n  * class exists to make it explicit when a bytes reference needs to be released, and when not.\n  */\n-public final class ReleasableBytesReference extends AbstractRefCounted implements Releasable, BytesReference {\n+public final class ReleasableBytesReference implements Releasable, BytesReference {\n \n     public static final Releasable NO_OP = () -> {};\n     private final BytesReference delegate;\n-    private final Releasable releasable;\n+    private final AbstractRefCounted refCounted;\n \n     public ReleasableBytesReference(BytesReference delegate, Releasable releasable) {\n-        super(\"bytes-reference\");\n         this.delegate = delegate;\n-        this.releasable = releasable;\n+        this.refCounted = new RefCountedReleasable(releasable);\n+    }\n+\n+    private ReleasableBytesReference(BytesReference delegate, AbstractRefCounted refCounted) {\n+        this.delegate = delegate;\n+        this.refCounted = refCounted;\n     }\n \n     public static ReleasableBytesReference wrap(BytesReference reference) {\n         return new ReleasableBytesReference(reference, NO_OP);\n     }\n \n-    @Override\n-    protected void closeInternal() {\n-        Releasables.close(releasable);\n+    public int refCount() {\n+        return refCounted.refCount();\n     }\n \n     public ReleasableBytesReference retain() {\n-        incRef();\n+        refCounted.incRef();\n         return this;\n     }\n \n     public ReleasableBytesReference retainedSlice(int from, int length) {\n         BytesReference slice = delegate.slice(from, length);\n-        incRef();\n-        return new ReleasableBytesReference(slice, this);\n+        refCounted.incRef();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a8b2382003449a06091c40a3a32299c3f59140a"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3928, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}