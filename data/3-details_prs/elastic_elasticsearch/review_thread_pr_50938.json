{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzA1MDY1", "number": 50938, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNjoxMlrODXpVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzo1ODoxNFrODX2wiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTIxMDU5OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNjoxMlrOFdDhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNjoxMlrOFdDhpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMDc4OA==", "bodyText": "I think passing ObjectParser here is ok because the interface is entirely private already. I could certainly be convinced otherwise though.", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366010788", "createdAt": "2020-01-13T20:26:12Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java", "diffHunk": "@@ -81,18 +81,17 @@\n     }\n \n     private interface UnknownFieldParser<Value, Context> {\n-\n-        void acceptUnknownField(String parserName, String field, XContentLocation location, XContentParser parser,\n-                                Value value, Context context) throws IOException;\n+        void acceptUnknownField(ObjectParser<Value, Context> objectParser, String field, XContentLocation location, XContentParser parser,\n+                Value value, Context context) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11ccd115ac5efee0610dafbd6bbd7df909891459"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTIxMTcyOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNjozN1rOFdDiUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNjozN1rOFdDiUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMDk2MA==", "bodyText": "I could preserve this bit of the message, but I don't think it was really helping anything.", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366010960", "createdAt": "2020-01-13T20:26:37Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java", "diffHunk": "@@ -206,7 +206,7 @@ public void setTest(int test) {\n         {\n             XContentParser parser = createParser(JsonXContent.jsonXContent, \"{\\\"not_supported_field\\\" : \\\"foo\\\"}\");\n             XContentParseException ex = expectThrows(XContentParseException.class, () -> objectParser.parse(parser, s, null));\n-            assertEquals(ex.getMessage(), \"[1:2] [the_parser] unknown field [not_supported_field], parser not found\");\n+            assertEquals(ex.getMessage(), \"[1:2] [the_parser] unknown field [not_supported_field]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11ccd115ac5efee0610dafbd6bbd7df909891459"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTIxMjg0OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/test/update/90_error.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNzowN1rOFdDjAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDoxMzowMlrOFdY0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTEzOQ==", "bodyText": "I wanted some end to end test and a surprising number of things don't use ObjectParser in the server.", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366011139", "createdAt": "2020-01-13T20:27:07Z", "author": {"login": "nik9000"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/update/90_error.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+---\n+'Misspelled fields get \"did you mean\"':\n+  - do:\n+      catch: /\\[1:2\\] \\[UpdateRequest\\] unknown field \\[dac\\] did you mean \\[doc\\]\\?/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11ccd115ac5efee0610dafbd6bbd7df909891459"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1MzA5MA==", "bodyText": "This PR makes it even more compelling that we should migrate as much as possible away from hand-rolled parsing code - it might be worth a divide-and-rule effort like we did with the HLRC or Streamable->Writeable?", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366353090", "createdAt": "2020-01-14T14:01:01Z", "author": {"login": "romseygeek"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/update/90_error.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+---\n+'Misspelled fields get \"did you mean\"':\n+  - do:\n+      catch: /\\[1:2\\] \\[UpdateRequest\\] unknown field \\[dac\\] did you mean \\[doc\\]\\?/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTEzOQ=="}, "originalCommit": {"oid": "11ccd115ac5efee0610dafbd6bbd7df909891459"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1OTYxNA==", "bodyText": "Yeah, I think so!", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366359614", "createdAt": "2020-01-14T14:13:02Z", "author": {"login": "nik9000"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/update/90_error.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+---\n+'Misspelled fields get \"did you mean\"':\n+  - do:\n+      catch: /\\[1:2\\] \\[UpdateRequest\\] unknown field \\[dac\\] did you mean \\[doc\\]\\?/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTEzOQ=="}, "originalCommit": {"oid": "11ccd115ac5efee0610dafbd6bbd7df909891459"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTIxMzk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/xcontent/SuggestingErrorOnUnknown.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNzozNFrOFdDjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNzozNFrOFdDjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTMwMg==", "bodyText": "This seems like a problem for a follow up PR. I don't think it'd be hard, but a little fiddly.", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366011302", "createdAt": "2020-01-13T20:27:34Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/xcontent/SuggestingErrorOnUnknown.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.lucene.search.spell.LevenshteinDistance;\n+import org.apache.lucene.util.CollectionUtil;\n+import org.elasticsearch.common.collect.Tuple;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class SuggestingErrorOnUnknown implements ErrorOnUnknown {\n+    @Override\n+    public String errorMessage(String parserName, String unknownField, Iterable<String> candidates) {\n+        String message = String.format(Locale.ROOT, \"[%s] unknown field [%s]\", parserName, unknownField);\n+        // TODO it'd be nice to combine this with BaseRestHandler's implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11ccd115ac5efee0610dafbd6bbd7df909891459"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzQxMDAxOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ErrorOnUnknown.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzo1ODoxNFrOFdYU1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzo1ODoxNFrOFdYU1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1MTU3NQ==", "bodyText": "nit: s/form/from/", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366351575", "createdAt": "2020-01-14T13:58:14Z", "author": {"login": "romseygeek"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ErrorOnUnknown.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Extension point to customize the error message for unknown fields. We expect\n+ * Elasticsearch to plug a fancy implementation that uses Lucene's spelling\n+ * correction infrastructure to suggest corrections.\n+ */\n+public interface ErrorOnUnknown {\n+    /**\n+     * The implementation of this interface that was loaded form SPI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e97b199fd6894bc57e8731f0b6a6bf17e68e5a9b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4691, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}