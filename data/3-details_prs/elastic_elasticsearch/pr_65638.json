{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODM4OTE5", "number": 65638, "title": "[ML] adding ml autoscaling integration test", "bodyText": "This adds ml autoscaling integration tests.\nThe test verifies that the scaling requirements adjust according to the current real load\non the cluster given machine learning jobs of various sizes.\nAdditionally, there was a bug in the ml scaling service settings. This commit addresses the bug.", "createdAt": "2020-11-30T22:05:43Z", "url": "https://github.com/elastic/elasticsearch/pull/65638", "merged": true, "mergeCommit": {"oid": "68358df07b064b86c7967e4bc9758abd5f6f5617"}, "closed": true, "closedAt": "2020-12-02T20:00:59Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhsqztgH2gAyNTI5ODM4OTE5OmUzNWZlNmFiNWE1MjI4MGEzOTg5MGQwMGNiMzg3MzgwYjNlYTVhNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiTSQkAH2gAyNTI5ODM4OTE5OjcyN2IyOGJiYWM3YzM2Y2VmNzRlMDg2NjFkMjgyZDZlZTMyZjkyZjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e35fe6ab5a52280a39890d00cb387380b3ea5a47", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/e35fe6ab5a52280a39890d00cb387380b3ea5a47", "committedDate": "2020-11-30T21:59:19Z", "message": "[ML] adding ml autoscaling integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzQ4NjYy", "url": "https://github.com/elastic/elasticsearch/pull/65638#pullrequestreview-541748662", "createdAt": "2020-12-01T10:16:18Z", "commit": {"oid": "e35fe6ab5a52280a39890d00cb387380b3ea5a47"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoxNjoxOFrOH8kp3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyMDo0MVrOH8oEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3NzE0OQ==", "bodyText": "We will have to be careful that the Cloud infrastructure never tries to set this setting higher than 3 in a pre-7.11/post-7.11 mixed version cluster.  This should be possible for autoscaling, as we've previously said that autoscaling won't attempt to do anything in such a cluster.\nThis ties in with the Cloud-side PR to set the settings required for ML autoscaling.  It is probably best if this one doesn't go in elasticsearch.yml, but instead gets set using a cluster settings API call once the entire cluster has been upgraded to 7.11 or higher.\nAlso, the docs state that the maximum value is 3.  I think it's probably best to leave the docs like this for the time being.  Maybe in a year or two we can adjust them, but while there is a risk of problems in mixed version clusters it's probably best that we don't.", "url": "https://github.com/elastic/elasticsearch/pull/65638#discussion_r533277149", "createdAt": "2020-12-01T10:16:18Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java", "diffHunk": "@@ -449,7 +449,7 @@\n         false,\n         Property.NodeScope);\n     public static final Setting<Integer> MAX_LAZY_ML_NODES =\n-            Setting.intSetting(\"xpack.ml.max_lazy_ml_nodes\", 0, 0, 3, Property.Dynamic, Property.NodeScope);\n+            Setting.intSetting(\"xpack.ml.max_lazy_ml_nodes\", 0, 0, Property.Dynamic, Property.NodeScope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35fe6ab5a52280a39890d00cb387380b3ea5a47"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNjg0Nw==", "bodyText": "I can see where the 1328196267L comes from in the previous assertion: ceil((100 + 40 + 200 + 40) * 1024^2 * 100 / 30).\nBut why is this one 380991001934L?  ceil((100 + 40 + 200 + 40 + 20000 + 40 + 10000 + 40 + 30000 + 40) * 1024^2 * 100 / 30) = 211462826667\nI think it would be good to put the expected formula that's been evaluated in a comment so that if ever there are changes to the constants used in the code then the person who edits the expected result here doesn't just mindlessly paste in whatever makes the test pass but can use the formula to manually check the result makes sense given their new constants.", "url": "https://github.com/elastic/elasticsearch/pull/65638#discussion_r533326847", "createdAt": "2020-12-01T11:09:32Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/AutoscalingIT.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.cluster.NamedDiff;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.reindex.ReindexPlugin;\n+import org.elasticsearch.ingest.common.IngestCommonPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.xpack.autoscaling.Autoscaling;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingMetadata;\n+import org.elasticsearch.xpack.autoscaling.action.GetAutoscalingCapacityAction;\n+import org.elasticsearch.xpack.autoscaling.action.PutAutoscalingPolicyAction;\n+import org.elasticsearch.xpack.autoscaling.capacity.AutoscalingDeciderResult;\n+import org.elasticsearch.xpack.autoscaling.capacity.AutoscalingDeciderResults;\n+import org.elasticsearch.xpack.core.ml.job.config.AnalysisConfig;\n+import org.elasticsearch.xpack.core.ml.job.config.AnalysisLimits;\n+import org.elasticsearch.xpack.core.ml.job.config.DataDescription;\n+import org.elasticsearch.xpack.core.ml.job.config.Detector;\n+import org.elasticsearch.xpack.core.ml.job.config.Job;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.elasticsearch.xpack.ilm.IndexLifecycle;\n+import org.elasticsearch.xpack.ml.LocalStateMachineLearning;\n+import org.elasticsearch.xpack.ml.autoscaling.MlAutoscalingDeciderService;\n+import org.elasticsearch.xpack.ml.autoscaling.MlScalingReason;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasKey;\n+\n+public class AutoscalingIT extends MlNativeAutodetectIntegTestCase {\n+\n+    @Override\n+    protected List<NamedWriteableRegistry.Entry> getNamedWritableEntries() {\n+        List<NamedWriteableRegistry.Entry> entries = super.getNamedWritableEntries();\n+        entries.add(new NamedWriteableRegistry.Entry(Metadata.Custom.class, AutoscalingMetadata.NAME, AutoscalingMetadata::new));\n+        entries.add(new NamedWriteableRegistry.Entry(NamedDiff.class,\n+            AutoscalingMetadata.NAME,\n+            AutoscalingMetadata.AutoscalingMetadataDiff::new));\n+        entries.add(new NamedWriteableRegistry.Entry(\n+            AutoscalingDeciderResult.Reason.class,\n+            MlScalingReason.NAME,\n+            MlScalingReason::new\n+        ));\n+        return entries;\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(\n+            LocalStateMachineLearning.class,\n+            Netty4Plugin.class,\n+            ReindexPlugin.class,\n+            Autoscaling.class,\n+            // The monitoring plugin requires script and gsub processors to be loaded\n+            IngestCommonPlugin.class,\n+            // The monitoring plugin script processor references painless. Include this for script compilation.\n+            // This is to reduce log spam\n+            MockPainlessScriptEngine.TestPlugin.class,\n+            // ILM is required for .ml-state template index settings\n+            IndexLifecycle.class,\n+            DataStreamsPlugin.class);\n+    }\n+\n+    @Override\n+    protected Settings externalClusterClientSettings() {\n+        return Settings.builder().put(super.externalClusterClientSettings())\n+            .put(Autoscaling.AUTOSCALING_ENABLED_SETTING.getKey(), true)\n+            .build();\n+    }\n+\n+    public void testMLAutoscalingCapacity() {\n+        SortedMap<String, Settings> deciders = new TreeMap<>();\n+        deciders.put(MlAutoscalingDeciderService.NAME, Settings.builder().build());\n+        final PutAutoscalingPolicyAction.Request request = new PutAutoscalingPolicyAction.Request(\n+            \"ml_test\",\n+            new TreeSet<>(Arrays.asList(\"ml\")),\n+            deciders\n+        );\n+        assertAcked(client().execute(PutAutoscalingPolicyAction.INSTANCE, request).actionGet());\n+\n+        assertMlCapacity(\n+            client().execute(\n+                GetAutoscalingCapacityAction.INSTANCE,\n+                new GetAutoscalingCapacityAction.Request()\n+            ).actionGet(),\n+            \"Requesting scale down as tier and/or node size could be smaller\",\n+            0L,\n+            0L);\n+\n+        putJob(\"job1\", 100);\n+        putJob(\"job2\", 200);\n+        openJob(\"job1\");\n+        openJob(\"job2\");\n+\n+        assertMlCapacity(\n+            client().execute(\n+                GetAutoscalingCapacityAction.INSTANCE,\n+                new GetAutoscalingCapacityAction.Request()\n+            ).actionGet(),\n+            \"Requesting scale down as tier and/or node size could be smaller\",\n+            1328196267L,\n+            734003200L);\n+\n+        putJob(\"bigjob1\", 20_000);\n+        putJob(\"bigjob2\", 10_000);\n+        putJob(\"bigjob3\", 30_000);\n+        openJob(\"bigjob1\");\n+        openJob(\"bigjob2\");\n+        openJob(\"bigjob3\");\n+\n+        assertMlCapacity(\n+            client().execute(\n+                GetAutoscalingCapacityAction.INSTANCE,\n+                new GetAutoscalingCapacityAction.Request()\n+            ).actionGet(),\n+            \"requesting scale up as number of jobs in queues exceeded configured limit\",\n+            380991001934L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35fe6ab5a52280a39890d00cb387380b3ea5a47"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzE5NA==", "bodyText": "This is running on the assumption that xpack.ml.max_machine_memory_percent is set to the default of 30 and xpack.ml.use_auto_machine_memory_percent is false right?  I think it's worth adding a comment to say that these are the expectations for this test and it will need modifying if either of those defaults is ever changed.  It will make it clearer for future maintainers where the numbers have come from.", "url": "https://github.com/elastic/elasticsearch/pull/65638#discussion_r533333194", "createdAt": "2020-12-01T11:20:41Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/AutoscalingIT.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.cluster.NamedDiff;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.reindex.ReindexPlugin;\n+import org.elasticsearch.ingest.common.IngestCommonPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.transport.Netty4Plugin;\n+import org.elasticsearch.xpack.autoscaling.Autoscaling;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingMetadata;\n+import org.elasticsearch.xpack.autoscaling.action.GetAutoscalingCapacityAction;\n+import org.elasticsearch.xpack.autoscaling.action.PutAutoscalingPolicyAction;\n+import org.elasticsearch.xpack.autoscaling.capacity.AutoscalingDeciderResult;\n+import org.elasticsearch.xpack.autoscaling.capacity.AutoscalingDeciderResults;\n+import org.elasticsearch.xpack.core.ml.job.config.AnalysisConfig;\n+import org.elasticsearch.xpack.core.ml.job.config.AnalysisLimits;\n+import org.elasticsearch.xpack.core.ml.job.config.DataDescription;\n+import org.elasticsearch.xpack.core.ml.job.config.Detector;\n+import org.elasticsearch.xpack.core.ml.job.config.Job;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.elasticsearch.xpack.ilm.IndexLifecycle;\n+import org.elasticsearch.xpack.ml.LocalStateMachineLearning;\n+import org.elasticsearch.xpack.ml.autoscaling.MlAutoscalingDeciderService;\n+import org.elasticsearch.xpack.ml.autoscaling.MlScalingReason;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasKey;\n+\n+public class AutoscalingIT extends MlNativeAutodetectIntegTestCase {\n+\n+    @Override\n+    protected List<NamedWriteableRegistry.Entry> getNamedWritableEntries() {\n+        List<NamedWriteableRegistry.Entry> entries = super.getNamedWritableEntries();\n+        entries.add(new NamedWriteableRegistry.Entry(Metadata.Custom.class, AutoscalingMetadata.NAME, AutoscalingMetadata::new));\n+        entries.add(new NamedWriteableRegistry.Entry(NamedDiff.class,\n+            AutoscalingMetadata.NAME,\n+            AutoscalingMetadata.AutoscalingMetadataDiff::new));\n+        entries.add(new NamedWriteableRegistry.Entry(\n+            AutoscalingDeciderResult.Reason.class,\n+            MlScalingReason.NAME,\n+            MlScalingReason::new\n+        ));\n+        return entries;\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(\n+            LocalStateMachineLearning.class,\n+            Netty4Plugin.class,\n+            ReindexPlugin.class,\n+            Autoscaling.class,\n+            // The monitoring plugin requires script and gsub processors to be loaded\n+            IngestCommonPlugin.class,\n+            // The monitoring plugin script processor references painless. Include this for script compilation.\n+            // This is to reduce log spam\n+            MockPainlessScriptEngine.TestPlugin.class,\n+            // ILM is required for .ml-state template index settings\n+            IndexLifecycle.class,\n+            DataStreamsPlugin.class);\n+    }\n+\n+    @Override\n+    protected Settings externalClusterClientSettings() {\n+        return Settings.builder().put(super.externalClusterClientSettings())\n+            .put(Autoscaling.AUTOSCALING_ENABLED_SETTING.getKey(), true)\n+            .build();\n+    }\n+\n+    public void testMLAutoscalingCapacity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35fe6ab5a52280a39890d00cb387380b3ea5a47"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c1099a7caf533cdf31a59378fc2307504ceba1b", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c1099a7caf533cdf31a59378fc2307504ceba1b", "committedDate": "2020-12-01T13:06:12Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-autoscaling-integration-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a1b44da07486ff89a241beed0d7d004a5aa9f4b", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/2a1b44da07486ff89a241beed0d7d004a5aa9f4b", "committedDate": "2020-12-01T15:13:54Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMDY0MjQ4", "url": "https://github.com/elastic/elasticsearch/pull/65638#pullrequestreview-542064248", "createdAt": "2020-12-01T16:14:38Z", "commit": {"oid": "2a1b44da07486ff89a241beed0d7d004a5aa9f4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b76f5cdfa12adbf5ab8ee36ef47190d8e603e4b6", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/b76f5cdfa12adbf5ab8ee36ef47190d8e603e4b6", "committedDate": "2020-12-01T16:22:49Z", "message": "fixing format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72268d9c3455655b97ac4598e1c88f5538b18bc6", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/72268d9c3455655b97ac4598e1c88f5538b18bc6", "committedDate": "2020-12-01T17:39:58Z", "message": "fixing tests format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90328f2fb9f069fdf4aca889e259107eeb1928c0", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/90328f2fb9f069fdf4aca889e259107eeb1928c0", "committedDate": "2020-12-01T17:51:11Z", "message": "fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b863ce088f5ab0f1ee0d06197bb879080b2be79", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/8b863ce088f5ab0f1ee0d06197bb879080b2be79", "committedDate": "2020-12-02T18:28:06Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-autoscaling-integration-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "727b28bbac7c36cef74e08661d282d6ee32f92f1", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/727b28bbac7c36cef74e08661d282d6ee32f92f1", "committedDate": "2020-12-02T18:58:48Z", "message": "fixing tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4193, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}