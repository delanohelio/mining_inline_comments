{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NTc0NDMz", "number": 55333, "title": "[ML] fix bugs with prediction field value settings", "bodyText": "This fixes two unreleased bugs:\n\nPrediction value type of number might show unexpected classes\n\nAnalytics created models may have class labels like 1, 5, 10 (or some collection of discrete, whole numbers). These labels are passed to the inference model config in the classification_labels field.\nWhen the predicted value format is numeric it should attempt to see if the classification labels are provided and are numeric. If so, use those. If not, use the underlying value.\n\nWhen supplying an update overwrite, inference was losing the default prediction field value. This is because it was not copied over in the copy ctor in the ClassificationConfig.Builder class.\n\ncloses #55332", "createdAt": "2020-04-16T18:04:09Z", "url": "https://github.com/elastic/elasticsearch/pull/55333", "merged": true, "mergeCommit": {"oid": "ba5a97dc010387ce3f7d2e9bbb213c7c44e3cd8b"}, "closed": true, "closedAt": "2020-04-17T13:13:02Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYQlBZgH2gAyNDA0NTc0NDMzOjZkMjY5MDk2ZTkwZmYyY2RkMjRmNDU1MzIwNjM1ZWEyMzRiM2Q2ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYhDRFAFqTM5NTQzODUxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d269096e90ff2cdd24f455320635ea234b3d681", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/6d269096e90ff2cdd24f455320635ea234b3d681", "committedDate": "2020-04-16T17:59:11Z", "message": "[ML] fix bugs with prediction field value settings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1Mjg1NDEy", "url": "https://github.com/elastic/elasticsearch/pull/55333#pullrequestreview-395285412", "createdAt": "2020-04-17T09:05:32Z", "commit": {"oid": "6d269096e90ff2cdd24f455320635ea234b3d681"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTowNTozMlrOGHGCWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTowNzo0N1rOGHGGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5MjEyMg==", "bodyText": "Two questions here:\n\nWhat do we do with an empty string? Currently it would fail with IndexOutOfBounds, right?\nWhy do we prioritize stringRep over value even in a number case?", "url": "https://github.com/elastic/elasticsearch/pull/55333#discussion_r410092122", "createdAt": "2020-04-17T09:05:32Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/PredictionFieldType.java", "diffHunk": "@@ -57,6 +57,19 @@ public Object transformPredictedValue(Double value, String stringRep) {\n                 }\n                 return areClose(value, 1.0D);\n             case NUMBER:\n+                if (stringRep == null) {\n+                    return value;\n+                }\n+                // Quick check to verify that the string rep is LIKELY a number", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d269096e90ff2cdd24f455320635ea234b3d681"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5MzI1MQ==", "bodyText": "Could you add tests for:\n\nan empty string\na string that is not a number?", "url": "https://github.com/elastic/elasticsearch/pull/55333#discussion_r410093251", "createdAt": "2020-04-17T09:07:47Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/PredictionFieldTypeTests.java", "diffHunk": "@@ -38,6 +38,8 @@ public void testTransformPredictedValueNumber() {\n             is(nullValue()));\n         assertThat(PredictionFieldType.NUMBER.transformPredictedValue(1.0, \"foo\"), equalTo(1.0));\n         assertThat(PredictionFieldType.NUMBER.transformPredictedValue(1.0, null), equalTo(1.0));\n+        long expected = randomLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d269096e90ff2cdd24f455320635ea234b3d681"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a213e3753c5f03ddf884c28c8cf8f48c611e0d", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0a213e3753c5f03ddf884c28c8cf8f48c611e0d", "committedDate": "2020-04-17T11:50:10Z", "message": "addressing empty strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255b5aeb8c90d201206f14e1befd3a13c7d55d45", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/255b5aeb8c90d201206f14e1befd3a13c7d55d45", "committedDate": "2020-04-17T12:19:40Z", "message": "Merge branch 'master' into feature/ml-inference-fix-parameter-values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDM4NTE4", "url": "https://github.com/elastic/elasticsearch/pull/55333#pullrequestreview-395438518", "createdAt": "2020-04-17T13:10:12Z", "commit": {"oid": "255b5aeb8c90d201206f14e1befd3a13c7d55d45"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoxMDoxMlrOGHNS4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoxMDoxMlrOGHNS4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxMTA0Mw==", "bodyText": "Could we just drop it and rely solely on parseLong?\nOr is this some kind of perf optimization? If so, are you sure it is really faster?", "url": "https://github.com/elastic/elasticsearch/pull/55333#discussion_r410211043", "createdAt": "2020-04-17T13:10:12Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/PredictionFieldType.java", "diffHunk": "@@ -57,6 +58,19 @@ public Object transformPredictedValue(Double value, String stringRep) {\n                 }\n                 return areClose(value, 1.0D);\n             case NUMBER:\n+                if (Strings.isNullOrEmpty(stringRep)) {\n+                    return value;\n+                }\n+                // Quick check to verify that the string rep is LIKELY a number\n+                // Still handles the case where it throws and then returns the underlying value\n+                if (stringRep.charAt(0) == '-' || Character.isDigit(stringRep.charAt(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255b5aeb8c90d201206f14e1befd3a13c7d55d45"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3240, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}