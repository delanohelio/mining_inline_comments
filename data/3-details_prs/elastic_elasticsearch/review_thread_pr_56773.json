{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MDU1OTMz", "number": 56773, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1OTo1NFrOD8ynHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxODoyOVrOD9sBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDcwMzY1OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1OTo1NFrOGV8dPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDowNjoxMlrOGV-qVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MzgwNQ==", "bodyText": "I'm thinking about moving this class (that's shared across the 3 repositories) into org.elasticsearch.common.blobstore. Additionally I would use an Enum instead of using a String to represent the operation type. wdyt? We could get rid of some duplication.", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r425663805", "createdAt": "2020-05-15T08:59:54Z", "author": {"login": "fcofdez"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "diffHunk": "@@ -307,4 +330,20 @@ public int read(byte[] b, int off, int len) throws IOException {\n             }\n         };\n     }\n+\n+    @Override\n+    public Map<String, Long> stats() {\n+        return stats.toMap();\n+    }\n+\n+    private static class Stats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b9433aa41e86b5fbc3a5526e7b8031e494dab2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3NDkzOA==", "bodyText": "I'm not so sure about that. The classes are the same now because we only track GET and LIST which are the same across all blob store in how they work and how we want to track them.\nBut once we add writes, we'll have to track different kinds of requests (e.g. for GCS we'll track the last request in a resumable upload while in S3 we'd track the requests for starting and ending the a multi-part upload as well as the PUTs for the individual parts).\nIf we just have one class and an Enum we're either pretty limited by the resolution on the request type we can express or we'll have some merged Enum that contains the implementation details of the various request types for all the plugins.\nI guess we could make the thing a little more generic if we wanted to though? We could have an Enum per plugin for the request types and then do something generic like this:\npublic class BlobStoreStats <T> {\n\n    private final Map<T, AtomicLong> counts = ConcurrentCollections.newConcurrentMap();\n\n    public void track(T opType) {\n        counts.computeIfAbsent(opType, k -> new AtomicLong(0)).incrementAndGet();\n    }\n}\nand then use it like e.g.\n  stats.track(S3Op.GET);\nHow about that?", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r425674938", "createdAt": "2020-05-15T09:19:40Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "diffHunk": "@@ -307,4 +330,20 @@ public int read(byte[] b, int off, int len) throws IOException {\n             }\n         };\n     }\n+\n+    @Override\n+    public Map<String, Long> stats() {\n+        return stats.toMap();\n+    }\n+\n+    private static class Stats {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MzgwNQ=="}, "originalCommit": {"oid": "78b9433aa41e86b5fbc3a5526e7b8031e494dab2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5OTkyNA==", "bodyText": "I agree, that approach looks more flexible than what I was proposing. I was just trying to keep things simple as my initial thought was that we would classify the same operations across different implementations. I'll tackle that in a different PR.", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r425699924", "createdAt": "2020-05-15T10:06:12Z", "author": {"login": "fcofdez"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "diffHunk": "@@ -307,4 +330,20 @@ public int read(byte[] b, int off, int len) throws IOException {\n             }\n         };\n     }\n+\n+    @Override\n+    public Map<String, Long> stats() {\n+        return stats.toMap();\n+    }\n+\n+    private static class Stats {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MzgwNQ=="}, "originalCommit": {"oid": "78b9433aa41e86b5fbc3a5526e7b8031e494dab2"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjA5MzY3OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowMzowNlrOGWt_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowMzowNlrOGWt_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3NTM2Mw==", "bodyText": "These are https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties requests right? I'm not sure about the cost impact of these (would have to research that in more detail) but I would suggest we just track them as a separate counter for now and investigate that later instead of dropping them?", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426475363", "createdAt": "2020-05-18T09:03:06Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "diffHunk": "@@ -93,6 +98,16 @@ public AzureBlobStore(RepositoryMetadata metadata, AzureStorageService service,\n         final Map<String, AzureStorageSettings> prevSettings = this.service.refreshAndClearCache(emptyMap());\n         final Map<String, AzureStorageSettings> newSettings = AzureStorageSettings.overrideLocationMode(prevSettings, this.locationMode);\n         this.service.refreshAndClearCache(newSettings);\n+        this.getMetricsCollector = (requestMethod) -> {\n+            // BlobInputStream request information about the blob and those requests\n+            // are not considered GET requests.\n+            if (requestMethod.equalsIgnoreCase(\"HEAD\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5375f28f2be7241e1b21d0dcfe1c57aae6035de7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjEyMjA2OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToxMDo0MlrOGWuRSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToxMDo0MlrOGWuRSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3OTk0Ng==", "bodyText": "Maybe we should just keep this logic in AzureBlobStore and simply add the listener to the requests that we meter just like we do in S3 (we can just add a utility for it contex + RequestMetricCollector in -> context out). Having this here with two separate methods for getting the client tuple is much harder to follow isn't it?", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426479946", "createdAt": "2020-05-18T09:10:42Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java", "diffHunk": "@@ -103,9 +121,25 @@ private static CloudBlobClient createClient(AzureStorageSettings azureStorageSet\n         return CloudStorageAccount.parse(connectionString).createCloudBlobClient();\n     }\n \n-    private static OperationContext buildOperationContext(AzureStorageSettings azureStorageSettings) {\n+    private static OperationContext buildOperationContext(AzureStorageSettings azureStorageSettings,\n+                                                          RequestMetricCollector metricCollector) {\n         final OperationContext context = new OperationContext();\n         context.setProxy(azureStorageSettings.getProxy());\n+        if (metricCollector.isEnabled()) {\n+            context.getRequestCompletedEventHandler().addListener(new StorageEvent<>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5375f28f2be7241e1b21d0dcfe1c57aae6035de7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjEyNTM5OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToxMTozMFrOGWuTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToxMTozMFrOGWuTSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4MDQ1Nw==", "bodyText": "If we kept this in AzureBlobStore as suggested above then this and NO_OP wouldn't be needed I think, making things much simpler.", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426480457", "createdAt": "2020-05-18T09:11:30Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.azure;\n+\n+/**\n+ * A listener that can be hooked into any Azure Storage request allowing metric collection\n+ */\n+interface RequestMetricCollector {\n+\n+    /**\n+     * Used to collect metrics after a successful request/response cycle\n+     *\n+     * @param requestMethod HTTP request method\n+     */\n+    void collectMetrics(String requestMethod);\n+\n+    /**\n+     * Used to collect metrics after a failed request/response cycle\n+     *\n+     * @param requestMethod the HTTP request method\n+     * @param statusCode the response status code\n+     */\n+    default void collectMetricsForFailedRequest(String requestMethod, int statusCode) {}\n+\n+    default boolean isEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5375f28f2be7241e1b21d0dcfe1c57aae6035de7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjQ5OTAxOnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo1NTo1NlrOGWx_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo1NTo1NlrOGWx_Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MDgyMw==", "bodyText": "NIT: missing spaces before ,true and ,null", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426540823", "createdAt": "2020-05-18T10:55:56Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "diffHunk": "@@ -199,28 +216,34 @@ public void onAfter() {\n         return new DeleteResult(blobsDeleted.get(), bytesDeleted.get());\n     }\n \n+    private Iterable<ListBlobItem> getListBlobItems(CloudBlobContainer blobContainer, String path, OperationContext opContext) {\n+        return blobContainer.listBlobs(path,true, EnumSet.noneOf(BlobListingDetails.class),null, opContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0054519b90b3b6efaa4733431dc00cccd6b03b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjUwODY5OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo1OTowNVrOGWyFhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo1OTowNVrOGWyFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MjQ2OA==", "bodyText": "This isn't actually implemented anywhere is it?", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426542468", "createdAt": "2020-05-18T10:59:05Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.azure;\n+\n+/**\n+ * A listener that can be hooked into any Azure Storage request allowing metric collection\n+ */\n+interface RequestMetricCollector {\n+\n+    /**\n+     * Used to collect metrics after a successful request/response cycle\n+     *\n+     * @param requestMethod HTTP request method\n+     */\n+    void collectMetrics(String requestMethod);\n+\n+    /**\n+     * Used to collect metrics after a failed request/response cycle\n+     *\n+     * @param requestMethod the HTTP request method\n+     * @param statusCode the response status code\n+     */\n+    default void collectMetricsForFailedRequest(String requestMethod, int statusCode) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0054519b90b3b6efaa4733431dc00cccd6b03b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjUxODY1OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowMjoyOFrOGWyMDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyMTozOVrOGWyxXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDE0Mw==", "bodyText": "Since we didn't actually implement the failed request counting (for now at least), maybe just use a Consumer<String> where this is used and simplify it away for now (I think we can just collect the failures to some string key as well if we want to do that going forward)?", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426544143", "createdAt": "2020-05-18T11:02:28Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.azure;\n+\n+/**\n+ * A listener that can be hooked into any Azure Storage request allowing metric collection\n+ */\n+interface RequestMetricCollector {\n+\n+    /**\n+     * Used to collect metrics after a successful request/response cycle\n+     *\n+     * @param requestMethod HTTP request method\n+     */\n+    void collectMetrics(String requestMethod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0054519b90b3b6efaa4733431dc00cccd6b03b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NzcxNw==", "bodyText": "Yes, let's simplify and get rid of this \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426547717", "createdAt": "2020-05-18T11:09:48Z", "author": {"login": "fcofdez"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.azure;\n+\n+/**\n+ * A listener that can be hooked into any Azure Storage request allowing metric collection\n+ */\n+interface RequestMetricCollector {\n+\n+    /**\n+     * Used to collect metrics after a successful request/response cycle\n+     *\n+     * @param requestMethod HTTP request method\n+     */\n+    void collectMetrics(String requestMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDE0Mw=="}, "originalCommit": {"oid": "da0054519b90b3b6efaa4733431dc00cccd6b03b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0OTg5Mw==", "bodyText": "For POST and PUT operations we would need a BiConsumer as the distinction lies in the URL query params.", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426549893", "createdAt": "2020-05-18T11:13:58Z", "author": {"login": "fcofdez"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.azure;\n+\n+/**\n+ * A listener that can be hooked into any Azure Storage request allowing metric collection\n+ */\n+interface RequestMetricCollector {\n+\n+    /**\n+     * Used to collect metrics after a successful request/response cycle\n+     *\n+     * @param requestMethod HTTP request method\n+     */\n+    void collectMetrics(String requestMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDE0Mw=="}, "originalCommit": {"oid": "da0054519b90b3b6efaa4733431dc00cccd6b03b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1MjE3Nw==", "bodyText": "That or just make it a consumer of HttpURLConnection (might be a little easier to read and the duplication is trivial IMO)?", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426552177", "createdAt": "2020-05-18T11:18:33Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.azure;\n+\n+/**\n+ * A listener that can be hooked into any Azure Storage request allowing metric collection\n+ */\n+interface RequestMetricCollector {\n+\n+    /**\n+     * Used to collect metrics after a successful request/response cycle\n+     *\n+     * @param requestMethod HTTP request method\n+     */\n+    void collectMetrics(String requestMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDE0Mw=="}, "originalCommit": {"oid": "da0054519b90b3b6efaa4733431dc00cccd6b03b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1MzY5Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r426553693", "createdAt": "2020-05-18T11:21:39Z", "author": {"login": "fcofdez"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/RequestMetricCollector.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.azure;\n+\n+/**\n+ * A listener that can be hooked into any Azure Storage request allowing metric collection\n+ */\n+interface RequestMetricCollector {\n+\n+    /**\n+     * Used to collect metrics after a successful request/response cycle\n+     *\n+     * @param requestMethod HTTP request method\n+     */\n+    void collectMetrics(String requestMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDE0Mw=="}, "originalCommit": {"oid": "da0054519b90b3b6efaa4733431dc00cccd6b03b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDExMDQ3OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxODoyOVrOGXVDbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxODoyOVrOGXVDbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNTM3Mg==", "bodyText": "NIT: let's inline this in deleteBlobDirectory\n   for (final ListBlobItem blobItem :\n         blobContainer.listBlobs(path, true, EnumSet.noneOf(BlobListingDetails.class), null, context)) {\nwhere it's used. It's weird having an extra method here when we don't have one for the directory listing in #children().", "url": "https://github.com/elastic/elasticsearch/pull/56773#discussion_r427115372", "createdAt": "2020-05-19T08:18:29Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java", "diffHunk": "@@ -199,28 +217,34 @@ public void onAfter() {\n         return new DeleteResult(blobsDeleted.get(), bytesDeleted.get());\n     }\n \n+    private Iterable<ListBlobItem> getListBlobItems(CloudBlobContainer blobContainer, String path, OperationContext opContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afe9768f75664e79644987f03c220737cfc08b2"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 418, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}