{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MTg3MTk2", "number": 66207, "title": "EQL: Optimize string retention", "bodyText": "When iterating across search hits, common strings such as the index name\nor common keys get allocated new strings. When dealing with a large\nnumber of potential keys these add up and end up wasting memory though\ntheir content is the same.\nThis commit introduces a simple LRU cache (up to 64 entries) to minimize\nthe duplication.", "createdAt": "2020-12-11T17:30:49Z", "url": "https://github.com/elastic/elasticsearch/pull/66207", "merged": true, "mergeCommit": {"oid": "86ebfba26ced58a91c11f5a7ecac8c60376b0a19"}, "closed": true, "closedAt": "2020-12-14T08:59:53Z", "author": {"login": "costin"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlLVR_AH2gAyNTM3MTg3MTk2Ojk3ZTQwMDgwMDI5ZWM2ZjBkMTkyZTQxZTU5MWQzNzdkMzk1Njc5MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmHvVuAFqTU1MTQ5ODY4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "97e40080029ec6f0d192e41e591d377d39567903", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/97e40080029ec6f0d192e41e591d377d39567903", "committedDate": "2020-12-11T17:24:38Z", "message": "EQL: Optimize string retaintion\n\nWhen iterating across search hits, common strings such as the index name\nor common keys get allocated new strings. When dealing with a large\nnumber of potential keys these add up and end up wasting memory though\ntheir content is the same.\nThis commit introduces a simple LRU cache (up to 64 entries) to minimize\nthe duplication."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNzA3MTIy", "url": "https://github.com/elastic/elasticsearch/pull/66207#pullrequestreview-550707122", "createdAt": "2020-12-12T09:58:45Z", "commit": {"oid": "97e40080029ec6f0d192e41e591d377d39567903"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwOTo1ODo0NlrOIEdSxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwOTo1OTozMVrOIEdTWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NTE1OA==", "bodyText": "You could have used a variable initialized with keys.size() and use that in the Object[] initialization and further down in the for loop.", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r541545158", "createdAt": "2020-12-12T09:58:46Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Criterion.java", "diffHunk": "@@ -52,20 +51,14 @@ public Q queryRequest() {\n         return queryRequest;\n     }\n \n-    public int keySize() {\n-        return keys.size();\n-    }\n-\n-    public SequenceKey key(SearchHit hit) {\n-        SequenceKey key;\n-        if (keys.isEmpty()) {\n-            key = SequenceKey.NONE;\n-        } else {\n+    public Object[] key(SearchHit hit) {\n+        Object[] key = null;\n+        if (keys.isEmpty() == false) {\n             Object[] docKeys = new Object[keys.size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e40080029ec6f0d192e41e591d377d39567903"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NTMwNg==", "bodyText": "The PR description mentioned 64.", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r541545306", "createdAt": "2020-12-12T09:59:31Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java", "diffHunk": "@@ -47,8 +49,23 @@\n  */\n public class TumblingWindow implements Executable {\n \n+    private static final int CACHE_MAX_SIZE = 63;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e40080029ec6f0d192e41e591d377d39567903"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTcwOTc5", "url": "https://github.com/elastic/elasticsearch/pull/66207#pullrequestreview-550970979", "createdAt": "2020-12-13T22:57:27Z", "commit": {"oid": "97e40080029ec6f0d192e41e591d377d39567903"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo1NzoyN1rOIE6m4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo1NzoyN1rOIE6m4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyNTQ0Mw==", "bodyText": "Since we have a Cache class in the common lib, which is more complex and supports concurrency, could we have a comment here that concurrency is not needed?", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r542025443", "createdAt": "2020-12-13T22:57:27Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java", "diffHunk": "@@ -47,8 +49,23 @@\n  */\n public class TumblingWindow implements Executable {\n \n+    private static final int CACHE_MAX_SIZE = 63;\n+\n     private final Logger log = LogManager.getLogger(TumblingWindow.class);\n \n+    /**\n+     * Simple cache for removing duplicate strings (such as index name or common keys).\n+     * Designed to be low-effort and thus optimistic in nature.\n+     * Thus it has a small, upper limit so that it doesn't require any cleaning up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e40080029ec6f0d192e41e591d377d39567903"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTgwMDg3", "url": "https://github.com/elastic/elasticsearch/pull/66207#pullrequestreview-550980087", "createdAt": "2020-12-14T00:17:39Z", "commit": {"oid": "97e40080029ec6f0d192e41e591d377d39567903"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "committedDate": "2020-12-14T07:50:56Z", "message": "Address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDk4Njg1", "url": "https://github.com/elastic/elasticsearch/pull/66207#pullrequestreview-551498685", "createdAt": "2020-12-14T15:46:27Z", "commit": {"oid": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo0NjoyOFrOIFW4ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo0NjoyOFrOIFW4ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4ODY3Ng==", "bodyText": "One things to consider: Start with the CACHE_MAX_SIZE instead of the default size (16). The HashMap will have to grow anyways, unless you think that the chances of having <= 32 different strings are high.", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r542488676", "createdAt": "2020-12-14T15:46:28Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java", "diffHunk": "@@ -47,8 +49,23 @@\n  */\n public class TumblingWindow implements Executable {\n \n+    private static final int CACHE_MAX_SIZE = 64;\n+\n     private final Logger log = LogManager.getLogger(TumblingWindow.class);\n \n+    /**\n+     * Simple cache for removing duplicate strings (such as index name or common keys).\n+     * Designed to be low-effort, non-concurrent (not needed) and thus optimistic in nature.\n+     * Thus it has a small, upper limit so that it doesn't require any cleaning up.\n+     */\n+    // start with the default size and allow growth until the max size\n+    private final Map<String, String> stringCache = new LinkedHashMap<>(16, 0.75f, true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4596, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}