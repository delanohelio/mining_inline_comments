{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MzcxOTc3", "number": 59441, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo0Mjo0M1rOEOqrCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowOTozMlrOEb__2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODE0NjY2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo0Mjo0M1rOGx8SCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo0Mjo0M1rOGx8SCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMTA2NQ==", "bodyText": "should we only do it when reading from a StreamInput?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r455021065", "createdAt": "2020-07-15T12:42:43Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "diffHunk": "@@ -129,19 +139,32 @@ public RegexpQueryBuilder flags(RegexpFlag... flags) {\n                 value |= flag.value;\n             }\n         }\n-        this.flagsValue = value;\n+        this.syntaxFlagsValue = value;\n         return this;\n     }\n \n     public RegexpQueryBuilder flags(int flags) {\n-        this.flagsValue = flags;\n+        // IMPORTANT - older versions of Lucene/elasticsearch used 0xffff to\n+        // represent ALL but newer versions of Lucene will error given syntax flag\n+        // values > 0xff\n+        // Here, we mute the bits beyond 0xff to provide BWC\n+        this.syntaxFlagsValue = flags & RegExp87.ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8141e996aaa1c6d3e3011ceeb6e93f6db893fe"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODM2OTY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzozNTo1NFrOGx-bQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzozNTo1NFrOGx-bQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1NjE5NA==", "bodyText": "only apply the mask if version is < 7.7, to not silently hide bugs?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r455056194", "createdAt": "2020-07-15T13:35:54Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "diffHunk": "@@ -93,7 +93,11 @@ public RegexpQueryBuilder(StreamInput in) throws IOException {\n         super(in);\n         fieldName = in.readString();\n         value = in.readString();\n-        syntaxFlagsValue = in.readVInt();\n+        // IMPORTANT - older versions of Lucene/elasticsearch used 0xffff to\n+        // represent ALL but newer versions of Lucene will error given syntax flag\n+        // values > 0xff\n+        // Here, we mute the bits beyond 0xff to provide BWC\n+        syntaxFlagsValue = in.readVInt() & RegExp87.ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0e8ff7350e23854befdcdeb3b9004a623f4ce4d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTczNjQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1NDowMlrOGyeq6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1NDowMlrOGyeq6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4NDQ5MA==", "bodyText": "This would be 7_10_0 now given that the 7.9 branch has been cut?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r455584490", "createdAt": "2020-07-16T07:54:02Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "diffHunk": "@@ -93,14 +93,17 @@ public RegexpQueryBuilder(StreamInput in) throws IOException {\n         super(in);\n         fieldName = in.readString();\n         value = in.readString();\n-        // IMPORTANT - older versions of Lucene/elasticsearch used 0xffff to\n-        // represent ALL but newer versions of Lucene will error given syntax flag\n-        // values > 0xff\n-        // Here, we mute the bits beyond 0xff to provide BWC\n-        syntaxFlagsValue = in.readVInt() & RegExp87.ALL;\n+        syntaxFlagsValue = in.readVInt();\n+        if (in.getVersion().before(Version.V_7_9_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e1fa084be41d0e890c2cdeb8ce2a94fb523a9c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU3MzU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0NzoxMlrOHBuaUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0NzoxMlrOHBuaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MTAyNQ==", "bodyText": "We should throw an error if the value is set to false ?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r471571025", "createdAt": "2020-08-17T15:47:12Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "diffHunk": "@@ -129,19 +147,28 @@ public RegexpQueryBuilder flags(RegexpFlag... flags) {\n                 value |= flag.value;\n             }\n         }\n-        this.flagsValue = value;\n+        this.syntaxFlagsValue = value;\n         return this;\n     }\n \n     public RegexpQueryBuilder flags(int flags) {\n-        this.flagsValue = flags;\n+        this.syntaxFlagsValue = flags;\n         return this;\n     }\n \n     public int flags() {\n-        return this.flagsValue;\n+        return this.syntaxFlagsValue;\n     }\n+    \n+    public RegexpQueryBuilder caseInsensitive(boolean caseInsensitive) {\n+        this.caseInsensitive = caseInsensitive;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d003e88f20129e46e7ba24eb1ddcc176c94231"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU3NjI1OnYy", "diffSide": "RIGHT", "path": "docs/reference/query-dsl/regexp-query.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0Nzo0N1rOHBub3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0Nzo0N1rOHBub3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MTQyMw==", "bodyText": "Can you add a note that setting this value to false is not allowed ?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r471571423", "createdAt": "2020-08-17T15:47:47Z", "author": {"login": "jimczi"}, "path": "docs/reference/query-dsl/regexp-query.asciidoc", "diffHunk": "@@ -67,6 +68,10 @@ provided. To improve performance, avoid using wildcard patterns, such as `.*` or\n valid values and more information, see <<regexp-optional-operators, Regular\n expression syntax>>.\n \n+`case_insensitive`::\n+(Optional, boolean) allows case insensitive matching of the regular expression\n+value with the indexed field values when set to true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d003e88f20129e46e7ba24eb1ddcc176c94231"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU4NDg3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0OTozNFrOHBug3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0OTozNFrOHBug3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MjcwMA==", "bodyText": "Can you also add a test that checks that setting this value to false throws an error ?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r471572700", "createdAt": "2020-08-17T15:49:34Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java", "diffHunk": "@@ -46,6 +46,9 @@ protected RegexpQueryBuilder doCreateTestQueryBuilder() {\n             }\n             query.flags(flags.toArray(new RegexpFlag[flags.size()]));\n         }\n+        if (randomBoolean()) {\n+            query.caseInsensitive(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d003e88f20129e46e7ba24eb1ddcc176c94231"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzYwMzk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/lucene/search/RegExp87.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo1NDoyMFrOHBustA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo1NDoyMFrOHBustA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NTczMg==", "bodyText": "Maybe add a test that fails if Lucene >= 8.7 is used  so that we don't forget to remove the fork ?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r471575732", "createdAt": "2020-08-17T15:54:20Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/apache/lucene/search/RegExp87.java", "diffHunk": "@@ -0,0 +1,1074 @@\n+/*\n+ * dk.brics.automaton\n+ * \n+ * Copyright (c) 2001-2009 Anders Moeller\n+ * All rights reserved.\n+ * \n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ * 3. The name of the author may not be used to endorse or promote products\n+ *    derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.AutomatonProvider;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.apache.lucene.util.automaton.RegExp;\n+import org.apache.lucene.util.automaton.TooComplexToDeterminizeException;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+\n+/**\n+ * Copy of Lucene 8.7's forthcoming RegExp class brought forward for\n+ * case insensitive search feature.\n+ * \n+ * @deprecated Use the RegExp object coming in Lucene 8.7 when it ships\n+ */\n+@Deprecated ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d003e88f20129e46e7ba24eb1ddcc176c94231"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDk2ODI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/lucene/search/RegExp87.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToxNDoxOVrOHCOtNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToxNDoxOVrOHCOtNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwMDE1MA==", "bodyText": "I don't think we should add the leniency here. We can forget to move it when we switch back to the Lucene class and this is also not the place where there is a BWC concern. Can you move this to RegexpQueryBuilder ? It can be done in doToQuery directly imo.", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r472100150", "createdAt": "2020-08-18T11:14:19Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/apache/lucene/search/RegExp87.java", "diffHunk": "@@ -0,0 +1,1073 @@\n+/*\n+ * dk.brics.automaton\n+ * \n+ * Copyright (c) 2001-2009 Anders Moeller\n+ * All rights reserved.\n+ * \n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ * 3. The name of the author may not be used to endorse or promote products\n+ *    derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.apache.lucene.search;\n+\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.AutomatonProvider;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.apache.lucene.util.automaton.RegExp;\n+import org.apache.lucene.util.automaton.TooComplexToDeterminizeException;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+\n+/**\n+ * Copy of Lucene 8.7's forthcoming RegExp class brought forward for\n+ * case insensitive search feature.\n+ * \n+ * @deprecated Use the RegExp object coming in Lucene 8.7 when it ships\n+ */\n+@Deprecated \n+public class RegExp87 {\n+  \n+  /**\n+   * The type of expression represented by a RegExp node.\n+   */\n+  public enum Kind {\n+    /** The union of two expressions */\n+    REGEXP_UNION, \n+    /** A sequence of two expressions */\n+    REGEXP_CONCATENATION,\n+    /** The intersection of two expressions */\n+    REGEXP_INTERSECTION,\n+    /** An optional expression */\n+    REGEXP_OPTIONAL,\n+    /** An expression that repeats */\n+    REGEXP_REPEAT,\n+    /** An expression that repeats a minimum number of times*/\n+    REGEXP_REPEAT_MIN,\n+    /** An expression that repeats a minimum and maximum number of times*/\n+    REGEXP_REPEAT_MINMAX,\n+    /** The complement of an expression */\n+    REGEXP_COMPLEMENT,\n+    /** A Character */\n+    REGEXP_CHAR,\n+    /** A Character range*/\n+    REGEXP_CHAR_RANGE,\n+    /** Any Character allowed*/\n+    REGEXP_ANYCHAR,\n+    /** An empty expression*/\n+    REGEXP_EMPTY,\n+    /** A string expression*/\n+    REGEXP_STRING,\n+    /** Any string allowed */\n+    REGEXP_ANYSTRING,\n+    /** An Automaton expression*/\n+    REGEXP_AUTOMATON,\n+    /** An Interval expression */\n+    REGEXP_INTERVAL,\n+    /** An expression for a pre-defined class e.g. \\w */\n+    REGEXP_PRE_CLASS\n+  }\n+  \n+  //-----  Syntax flags ( <= 0xff )  ------\n+  /**\n+   * Syntax flag, enables intersection (<code>&amp;</code>).\n+   */\n+  public static final int INTERSECTION = 0x0001;\n+  \n+  /**\n+   * Syntax flag, enables complement (<code>~</code>).\n+   */\n+  public static final int COMPLEMENT = 0x0002;\n+  \n+  /**\n+   * Syntax flag, enables empty language (<code>#</code>).\n+   */\n+  public static final int EMPTY = 0x0004;\n+  \n+  /**\n+   * Syntax flag, enables anystring (<code>@</code>).\n+   */\n+  public static final int ANYSTRING = 0x0008;\n+  \n+  /**\n+   * Syntax flag, enables named automata (<code>&lt;</code>identifier<code>&gt;</code>).\n+   */\n+  public static final int AUTOMATON = 0x0010;\n+  \n+  /**\n+   * Syntax flag, enables numerical intervals (\n+   * <code>&lt;<i>n</i>-<i>m</i>&gt;</code>).\n+   */\n+  public static final int INTERVAL = 0x0020;\n+  \n+  /**\n+   * Syntax flag, enables all optional regexp syntax.\n+   */\n+  public static final int ALL = 0xff;\n+      \n+  /**\n+   * Syntax flag, enables no optional regexp syntax.\n+   */\n+  public static final int NONE = 0x0000;\n+  \n+  //-----  Matching flags ( > 0xff )  ------\n+  \n+  /**\n+   * Allows case insensitive matching of ASCII characters.\n+   */\n+  public static final int ASCII_CASE_INSENSITIVE = 0x0100;    \n+\n+  //Immutable parsed state\n+  /**\n+   * The type of expression\n+   */\n+  public final Kind kind;\n+  /**\n+   * Child expressions held by a container type expression\n+   */\n+  public final RegExp87 exp1, exp2;\n+  /**\n+   * String expression\n+   */\n+  public final String s;\n+  /**\n+   *  Character expression\n+   */\n+  public final int c;\n+  /**\n+   * Limits for repeatable type expressions\n+   */\n+  public final int min, max, digits;\n+  /**\n+   * Extents for range type expressions\n+   */\n+  public final int from, to;\n+\n+  // Parser variables\n+  private final String originalString;\n+  final int flags;\n+  int pos;\n+    \n+  /**\n+   * Constructs new <code>RegExp</code> from a string. Same as\n+   * <code>RegExp(s, ALL)</code>.\n+   * \n+   * @param s regexp string\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp87(String s) throws IllegalArgumentException {\n+    this(s, ALL);\n+  }\n+  \n+  /**\n+   * Constructs new <code>RegExp</code> from a string.\n+   * \n+   * @param s regexp string\n+   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n+   *          enabled\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp87(String s, int syntax_flags) throws IllegalArgumentException {\n+    this(s, syntax_flags, 0);\n+  }\n+  /**\n+   * Constructs new <code>RegExp</code> from a string.\n+   * \n+   * @param s regexp string\n+   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n+   *          enabled\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp87(String s, int syntax_flags, int match_flags) throws IllegalArgumentException {\n+    // BWC leniency - older clients pass 0xffff and syntax flags are now only in range 0xff\n+    syntax_flags = syntax_flags &  ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab9236c372fc16e6487ed63c78261dc2926b7de"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzk1NTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowOTozMlrOHGRNGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowOTozMlrOHGRNGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNTM4Ng==", "bodyText": "Is this still needed now that we modify the flag in doToQuery ?", "url": "https://github.com/elastic/elasticsearch/pull/59441#discussion_r476335386", "createdAt": "2020-08-25T10:09:32Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java", "diffHunk": "@@ -89,18 +94,31 @@ public RegexpQueryBuilder(StreamInput in) throws IOException {\n         super(in);\n         fieldName = in.readString();\n         value = in.readString();\n-        flagsValue = in.readVInt();\n+        syntaxFlagsValue = in.readVInt();\n+        if (in.getVersion().before(Version.V_8_0_0)) {\n+            // IMPORTANT - older versions of Lucene/elasticsearch used 0xffff to\n+            // represent ALL, but newer versions of Lucene will error given syntax flag\n+            // values > 0xff\n+            // Here, we mute the bits beyond 0xff to provide BWC\n+            syntaxFlagsValue = syntaxFlagsValue & RegExp87.ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c381aa052aada97834c26e3ab8cf5d52c890d05"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2344, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}