{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MDQ2MzYx", "number": 55377, "title": "Auto create data streams using index templates v2", "bodyText": "This PR adds the ability to auto create data streams using index templates v2.\nIndex templates (v2) now have a data_steam field that includes a timestamp field,\nif provided and index name matches with that template then a data stream\n(plus first backing index) is auto created. The index/bulk apis will redirect\nto the create data stream api instead of the create index api.\nRelates to #53100", "createdAt": "2020-04-17T10:15:05Z", "url": "https://github.com/elastic/elasticsearch/pull/55377", "merged": true, "mergeCommit": {"oid": "74e2c011384bab5b171c5efbbfb57b24820f0a07"}, "closed": true, "closedAt": "2020-05-12T11:43:00Z", "author": {"login": "martijnvg"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYefMGgH2gAyNDA1MDQ2MzYxOmQ3OGM3NTYwZWU5OGFlOTdjZmJiYzk4NmU4NTNkNzA3YzVmYjc4NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcghtMCgH2gAyNDA1MDQ2MzYxOmEwMTNhMjk2ZmZiNjFkNDBiMzA2Y2RkZjBhOTQwNjNlYjI2ODRkMzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d78c7560ee98ae97cfbbc986e853d707c5fb7855", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/d78c7560ee98ae97cfbbc986e853d707c5fb7855", "committedDate": "2020-04-17T10:11:29Z", "message": "WIP commit\n\nThis commit adds the ability to auto create data streams using index templates v2.\nIndex templates (v2) now have a data_steam field that includes a timestamp field,\nif provided and index name matches with that template then a data stream\n(plus first backing index) is auto created. The index/bulk apis will redirect\nto the create data stream api instead of the create index api.\n\nRelates to #53100"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372980bfd279a0dc26b4c956a0ffeaa7ea35191f", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/372980bfd279a0dc26b4c956a0ffeaa7ea35191f", "committedDate": "2020-04-17T10:32:13Z", "message": "fixed hlrc test compile errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22c3dc30b590ea4435fec6c50e4487292ea63836", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/22c3dc30b590ea4435fec6c50e4487292ea63836", "committedDate": "2020-04-17T10:36:52Z", "message": "do not serialize data stream template to nodes that don't yet know how to de-serialize it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f476a217c5b3b459687bb9994161a4d2d64826f4", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/f476a217c5b3b459687bb9994161a4d2d64826f4", "committedDate": "2020-04-21T11:59:57Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44de34b80e97d4a4485420974b2c3214c2533b47", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/44de34b80e97d4a4485420974b2c3214c2533b47", "committedDate": "2020-04-21T12:00:40Z", "message": "fixed issues after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d50d6645f4a6ab7eeec6d426ab6735d92f2c205e", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/d50d6645f4a6ab7eeec6d426ab6735d92f2c205e", "committedDate": "2020-04-22T12:29:50Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01275b1848dfc2a2bd8f7e3ae8e1533ae600ecb", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/b01275b1848dfc2a2bd8f7e3ae8e1533ae600ecb", "committedDate": "2020-04-22T12:30:39Z", "message": "added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25fb8bb618b23d60e8262e455449e016d4ef79f9", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/25fb8bb618b23d60e8262e455449e016d4ef79f9", "committedDate": "2020-04-22T12:36:40Z", "message": "rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/ec137e2b72b73331ee8c7fd466c7f30634729bb5", "committedDate": "2020-04-22T14:26:14Z", "message": "fixed test compile errors and\nremoved unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTczNDI2", "url": "https://github.com/elastic/elasticsearch/pull/55377#pullrequestreview-398573426", "createdAt": "2020-04-22T20:42:57Z", "commit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDo0Mjo1N1rOGKKxXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDo0NTo1OVrOGKK_Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxNTQyMg==", "bodyText": "Do we not need to remove this ITv2 at the end of the test?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r413315422", "createdAt": "2020-04-22T20:42:57Z", "author": {"login": "danhermann"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/indices.data_stream/30_auto_create_data_stream.yml", "diffHunk": "@@ -0,0 +1,51 @@\n+---\n+\"Put index template\":\n+  - skip:\n+      version: \" - 7.9.99\"\n+      reason: \"not yet backported\"\n+      features: allowed_warnings\n+\n+  - do:\n+      allowed_warnings:\n+        - \"index template [test] has index patterns [test-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [test] will take precedence during new index creation\"\n+      indices.put_index_template:\n+        name: generic_logs_template", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxNzU0Nw==", "bodyText": "Duplicates code in the onFailure handler in the doExecute method. Might be worth consolidating.", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r413317547", "createdAt": "2020-04-22T20:44:50Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -272,6 +296,64 @@ public void onFailure(Exception e) {\n         }\n     }\n \n+    static Map<String, IndexTemplateV2.DataStreamTemplate> resolveAutoCreateDataStreams(Metadata metadata,\n+                                                                                        Set<String> autoCreateIndices) {\n+        Map<String, IndexTemplateV2.DataStreamTemplate> autoCreateDataStreams = new HashMap<>();\n+        Iterator<String> autoCreateIndicesIterator = autoCreateIndices.iterator();\n+        while (autoCreateIndicesIterator.hasNext()) {\n+            String indexName = autoCreateIndicesIterator.next();\n+            String v2Template = MetadataIndexTemplateService.findV2Template(metadata, indexName, false);\n+            if (v2Template != null) {\n+                IndexTemplateV2 indexTemplateV2 = metadata.templatesV2().get(v2Template);\n+                if (indexTemplateV2.getDataStreamTemplate() != null) {\n+                    autoCreateIndicesIterator.remove();\n+                    autoCreateDataStreams.put(indexName, indexTemplateV2.getDataStreamTemplate());\n+                }\n+            }\n+        }\n+        return autoCreateDataStreams;\n+    }\n+\n+    void autoCreateDataStreams(final Task task,\n+                               final BulkRequest bulkRequest,\n+                               final long startTimeNanos,\n+                               final ActionListener<BulkResponse> listener,\n+                               final AtomicArray<BulkItemResponse> responses,\n+                               final Map<String, IndexTemplateV2.DataStreamTemplate> autoCreateDataStreams,\n+                               final Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {\n+        final AtomicInteger counter = new AtomicInteger(autoCreateDataStreams.size());\n+        for (Map.Entry<String, IndexTemplateV2.DataStreamTemplate> entry : autoCreateDataStreams.entrySet()) {\n+            final String name = entry.getKey();\n+\n+            CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(name);\n+            request.setTimestampFieldName(entry.getValue().getTimestampField());\n+            CheckedConsumer<AcknowledgedResponse, ? extends Exception> onResponse = response -> {\n+                if (counter.decrementAndGet() == 0) {\n+                    threadPool.executor(ThreadPool.Names.WRITE).execute(\n+                        () -> executeBulk(task, bulkRequest, startTimeNanos, listener, responses, indicesThatCannotBeCreated));\n+                }\n+            };\n+            Consumer<Exception> onFailure = e -> {\n+                if (!(ExceptionsHelper.unwrapCause(e) instanceof ResourceAlreadyExistsException)) {\n+                    // fail all requests involving this index, if create didn't work\n+                    for (int i = 0; i < bulkRequest.requests.size(); i++) {\n+                        DocWriteRequest<?> item = bulkRequest.requests.get(i);\n+                        if (item != null && setResponseFailureIfIndexMatches(responses, i, item, name, e)) {\n+                            bulkRequest.requests.set(i, null);\n+                        }\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxODkxOA==", "bodyText": "Would this variable be better named autoCreateDataStreams?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r413318918", "createdAt": "2020-04-22T20:45:59Z", "author": {"login": "danhermann"}, "path": "server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionTests.java", "diffHunk": "@@ -287,4 +298,44 @@ public void testResolveRequestOrDefaultPipelineAndFinalPipeline() {\n             assertThat(indexRequest.getFinalPipeline(), equalTo(\"final-pipeline\"));\n         }\n     }\n+\n+    public void testResolveAutoCreateDataStreams() {\n+        Metadata metadata;\n+        {\n+            Metadata.Builder mdBuilder = new Metadata.Builder();\n+            DataStreamTemplate dataStreamTemplate = new DataStreamTemplate(\"@timestamp\");\n+            mdBuilder.put(\"1\", new IndexTemplateV2(List.of(\"legacy-logs-*\"), null, null, 10L, null, null, null));\n+            mdBuilder.put(\"2\", new IndexTemplateV2(List.of(\"logs-*\"), null, null, 20L, null, null, dataStreamTemplate));\n+            mdBuilder.put(\"3\", new IndexTemplateV2(List.of(\"logs-foobar\"), null, null, 30L, null, null, dataStreamTemplate));\n+            metadata = mdBuilder.build();\n+        }\n+\n+        Map<String, DataStreamTemplate> result = TransportBulkAction.resolveAutoCreateDataStreams(metadata, Set.of());\n+        assertThat(result, anEmptyMap());\n+\n+        Set<String> autoCreateIndices = new HashSet<>(Set.of(\"logs-foobar\", \"logs-barbaz\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTQwNjAw", "url": "https://github.com/elastic/elasticsearch/pull/55377#pullrequestreview-398940600", "createdAt": "2020-04-23T09:52:58Z", "commit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo1Mjo1OFrOGKg2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoyMzo1OVrOGKiFpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY3NzIwMA==", "bodyText": "Unfortunately, resolving this here on the coordinator is slightly trappy in that the coordinator could be disconnected while the request could still succeed. It may thus create an index if it does not see the template.\nI think we could (and should) repair this by checking when creating indices if the template is for a data stream and if so, reject the request. But I also think it would be better to do the switching on master instead by adding a new action that handles the auto-creation of indices/streams. This would also be a good hook for security to validate auto_create privilege against anyway. I also think it could simplify the code in this class a fair bit.", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r413677200", "createdAt": "2020-04-23T09:52:58Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -272,6 +296,64 @@ public void onFailure(Exception e) {\n         }\n     }\n \n+    static Map<String, IndexTemplateV2.DataStreamTemplate> resolveAutoCreateDataStreams(Metadata metadata,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5NzQ0NQ==", "bodyText": "I think this means that if you have both v1 and v2 templates matching the same pattern and the v2 one is a data stream, it takes precedence even when prefer_v2_templates=false. I think this will cause some confusion and I would prefer to stick to respecting the option.", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r413697445", "createdAt": "2020-04-23T10:23:59Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -272,6 +296,64 @@ public void onFailure(Exception e) {\n         }\n     }\n \n+    static Map<String, IndexTemplateV2.DataStreamTemplate> resolveAutoCreateDataStreams(Metadata metadata,\n+                                                                                        Set<String> autoCreateIndices) {\n+        Map<String, IndexTemplateV2.DataStreamTemplate> autoCreateDataStreams = new HashMap<>();\n+        Iterator<String> autoCreateIndicesIterator = autoCreateIndices.iterator();\n+        while (autoCreateIndicesIterator.hasNext()) {\n+            String indexName = autoCreateIndicesIterator.next();\n+            String v2Template = MetadataIndexTemplateService.findV2Template(metadata, indexName, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec137e2b72b73331ee8c7fd466c7f30634729bb5"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d59ab0a160470beb2368aad0633fdfd873e104c", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/2d59ab0a160470beb2368aad0633fdfd873e104c", "committedDate": "2020-04-25T10:25:59Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b9f06254de3346ecf9471048781de188390f6af", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/6b9f06254de3346ecf9471048781de188390f6af", "committedDate": "2020-04-25T12:55:33Z", "message": "fixed compile errors after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baef71f920e0d07f8057f643f392e320335f1dc2", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/baef71f920e0d07f8057f643f392e320335f1dc2", "committedDate": "2020-04-25T13:05:00Z", "message": "extracted the create data stream logic from CreateDataStreamAction.TransportAction to\nMetadataCreateDataStreamService class. This new class can then also be used from\nthe to be created auto create transport action."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c1a96bdf5294741a55f58dc6fb4d2dc08c0dfa", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7c1a96bdf5294741a55f58dc6fb4d2dc08c0dfa", "committedDate": "2020-04-28T11:33:37Z", "message": "introduced auto create action.\n\nFor index and bulk requests that refer to indices/data streams that don't exist yet,\nthe TransportBulkAction will redirect to the auto create action which will either\ncreate an index or data stream.\n\nPreviously this decision was made in the TransportBulkAction,\non the coordinating node, but if that node is currently unaware of the existence of\nspecific data streams it will create an index instead of a data stream."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76a265fa26792f9cad68ada4da7ba6ce4bd0efd0", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/76a265fa26792f9cad68ada4da7ba6ce4bd0efd0", "committedDate": "2020-05-04T15:50:55Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96dfa858aa305148e864b19fa1537b6aadac18be", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/96dfa858aa305148e864b19fa1537b6aadac18be", "committedDate": "2020-05-04T15:58:55Z", "message": "fixed post merge issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd642d44e5640f2935b41b2b6e1df6501af236f7", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/cd642d44e5640f2935b41b2b6e1df6501af236f7", "committedDate": "2020-05-04T17:37:10Z", "message": "Decide whether a data stream or index should be created on\nthe elected master node in the auto create transport action."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dba646c3331243f6bfe80534ec341fd24e09a05", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/7dba646c3331243f6bfe80534ec341fd24e09a05", "committedDate": "2020-05-04T19:22:59Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33ce7de24f20708356d8f14055d46b025e136ff9", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/33ce7de24f20708356d8f14055d46b025e136ff9", "committedDate": "2020-05-04T19:30:39Z", "message": "fixed compile errors after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa64988ea71082495892dba9b091be1f461c5d85", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/fa64988ea71082495892dba9b091be1f461c5d85", "committedDate": "2020-05-04T20:55:02Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/6448582bb24ddd6dd7e962d00d680defa301a9c8", "committedDate": "2020-05-04T20:58:33Z", "message": "fixed test compile error after merging in master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjY4MzYw", "url": "https://github.com/elastic/elasticsearch/pull/55377#pullrequestreview-405668360", "createdAt": "2020-05-05T10:34:07Z", "commit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNDowOFrOGQjhiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTowNDoxN1rOGQkcbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMjQyNw==", "bodyText": "Given that we are in auto-create, the meta-data check seems strange? Should never be true AFAICS?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420012427", "createdAt": "2020-05-05T10:34:08Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -84,4 +107,21 @@ protected ClusterBlockException checkBlock(CreateIndexRequest request, ClusterSt\n         }\n     }\n \n+    static DataStreamTemplate resolveAutoCreateDataStream(CreateIndexRequest request, Metadata metadata) {\n+        String v2Template = MetadataIndexTemplateService.findV2Template(metadata, request.index(), false);\n+        if (v2Template != null && resolvePreferV2Templates(request)) {\n+            IndexTemplateV2 indexTemplateV2 = metadata.templatesV2().get(v2Template);\n+            if (indexTemplateV2.getDataStreamTemplate() != null) {\n+                return indexTemplateV2.getDataStreamTemplate();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    private static boolean resolvePreferV2Templates(CreateIndexRequest request) {\n+        return request.preferV2Templates() == null ?\n+            IndexMetadata.PREFER_V2_TEMPLATES_SETTING.get(request.settings()) : request.preferV2Templates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMjc4Mg==", "bodyText": "I think we should check the resolvePreferV2Templates method before calling findV2Template?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420012782", "createdAt": "2020-05-05T10:34:52Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -84,4 +107,21 @@ protected ClusterBlockException checkBlock(CreateIndexRequest request, ClusterSt\n         }\n     }\n \n+    static DataStreamTemplate resolveAutoCreateDataStream(CreateIndexRequest request, Metadata metadata) {\n+        String v2Template = MetadataIndexTemplateService.findV2Template(metadata, request.index(), false);\n+        if (v2Template != null && resolvePreferV2Templates(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMzUwMw==", "bodyText": "Would it be possible to move this check inside the cluster state update?\nAlternatively, we need to double check that the template does create an index or data stream inside the two cluster state updates and throw an exception if not (race condition).", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420013503", "createdAt": "2020-05-05T10:36:21Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -75,7 +85,20 @@ protected void masterOperation(Task task,\n                                        CreateIndexRequest request,\n                                        ClusterState state,\n                                        ActionListener<CreateIndexResponse> listener) {\n-            TransportCreateIndexAction.innerCreateIndex(request, listener, indexNameExpressionResolver, createIndexService);\n+            DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, state.metadata());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxNDY0Mg==", "bodyText": "Following looks like white-space only changes, I wonder if that is a left-over from previous iterations?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420014642", "createdAt": "2020-05-05T10:38:45Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -247,29 +245,29 @@ public void onResponse(CreateIndexResponse result) {\n                             }\n                         }\n \n-                        @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxODU4NQ==", "bodyText": "When auto-creating the index (and just creating indices), we wait for active shards. I think we need something similar when creating data streams (for the first backing index).\nThat can be done here or separately. I think we need it before merging since otherwise we risk test failures because the shard is not ready when bulk indexing continues after having created the data stream?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420018585", "createdAt": "2020-05-05T10:46:11Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+public class MetadataCreateDataStreamService {\n+\n+    private static final Logger logger = LogManager.getLogger(MetadataCreateDataStreamService.class);\n+\n+    private final ClusterService clusterService;\n+    private final MetadataCreateIndexService metadataCreateIndexService;\n+\n+    public MetadataCreateDataStreamService(ClusterService clusterService, MetadataCreateIndexService metadataCreateIndexService) {\n+        this.clusterService = clusterService;\n+        this.metadataCreateIndexService = metadataCreateIndexService;\n+    }\n+\n+    public void createDataStream(CreateDataSteamClusterStateUpdateRequest request,\n+                                 ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyMTc5Nw==", "bodyText": "Maybe randomly add a v1 template for logs-bar*?\nAlso, randomly set preferV2Templates on the requests.\nAnd also, randomly add a conflicting v1 template, but then forcing preferV2Templates true.", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420021797", "createdAt": "2020-05-05T10:52:26Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/action/bulk/BulkIntegrationIT.java", "diffHunk": "@@ -200,4 +214,56 @@ public void testDeleteIndexWhileIndexing() throws Exception {\n             assertFalse(thread.isAlive());\n         }\n     }\n+\n+    public void testMixedAutoCreate() {\n+        PutIndexTemplateV2Action.Request createTemplateRequest = new PutIndexTemplateV2Action.Request(\"logs-foo\");\n+        createTemplateRequest.indexTemplate(new IndexTemplateV2(List.of(\"logs-foo*\"), null, null, null, null, null,\n+            new IndexTemplateV2.DataStreamTemplate(\"@timestamp\")));\n+        client().execute(PutIndexTemplateV2Action.INSTANCE, createTemplateRequest).actionGet();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyNTA4Mw==", "bodyText": "Should we randomly add a random data stream instance here?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420025083", "createdAt": "2020-05-05T10:59:13Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetadataTests.java", "diffHunk": "@@ -77,7 +77,7 @@ public void testSimpleJsonFromAndTo() throws IOException {\n                     Collections.singletonList(\"component_template\"),\n                     5L,\n                     4L,\n-                    Collections.singletonMap(\"my_meta\", Collections.singletonMap(\"potato\", \"chicken\"))))\n+                    Collections.singletonMap(\"my_meta\", Collections.singletonMap(\"potato\", \"chicken\")), null))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyNTY4Mg==", "bodyText": "I am not sure this is used?", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420025682", "createdAt": "2020-05-05T11:00:30Z", "author": {"login": "henningandersen"}, "path": "test/framework/src/main/java/org/elasticsearch/test/ClusterServiceUtils.java", "diffHunk": "@@ -100,8 +100,12 @@ public void onFailure(String source, Exception e) {\n     }\n \n     public static ClusterService createClusterService(ThreadPool threadPool) {\n+        return createClusterService(threadPool, Version.CURRENT);\n+    }\n+\n+    public static ClusterService createClusterService(ThreadPool threadPool, Version nodeVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyNzUwMA==", "bodyText": "Since this is part of the HLRC, I wonder if we should stay backwards compatible with the original constructor, i.e., have both variants? Not sure of the exact policy on that subject though.", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r420027500", "createdAt": "2020-05-05T11:04:17Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateV2.java", "diffHunk": "@@ -88,13 +95,15 @@ public static IndexTemplateV2 parse(XContentParser parser) throws IOException {\n     }\n \n     public IndexTemplateV2(List<String> indexPatterns, @Nullable Template template, @Nullable List<String> componentTemplates,\n-                           @Nullable Long priority, @Nullable Long version, @Nullable Map<String, Object> metadata) {\n+                           @Nullable Long priority, @Nullable Long version, @Nullable Map<String, Object> metadata,\n+                           @Nullable DataStreamTemplate dataStreamTemplate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6448582bb24ddd6dd7e962d00d680defa301a9c8"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc8de3b6c261ce1dfcc41f0d6bfa6aa2cd3f5b2c", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/dc8de3b6c261ce1dfcc41f0d6bfa6aa2cd3f5b2c", "committedDate": "2020-05-06T09:47:26Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f013f9ed138e1888b0f20d93319995f63d499fbf", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/f013f9ed138e1888b0f20d93319995f63d499fbf", "committedDate": "2020-05-06T12:19:42Z", "message": "applied smaller feedback items"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ed50fe948a24505257bfcae8d4226037a4e399a", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/5ed50fe948a24505257bfcae8d4226037a4e399a", "committedDate": "2020-05-06T12:37:19Z", "message": "overload constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5df8079edbc5ef2d3093accc179778300c12e20e", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/5df8079edbc5ef2d3093accc179778300c12e20e", "committedDate": "2020-05-06T13:09:14Z", "message": "Perform the check whether a data stream or index should be auto created in the same update\nthat creates the index or data stream."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddf2081546168e75122cded86db38c9a140de161", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/ddf2081546168e75122cded86db38c9a140de161", "committedDate": "2020-05-06T14:18:26Z", "message": "wait for active shards when auto creating data streams / indices and\nwhen creating data streams via api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb38191bf520544b9da1f80a5d37068775c162a0", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/bb38191bf520544b9da1f80a5d37068775c162a0", "committedDate": "2020-05-06T14:25:39Z", "message": "undo style changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fa319a6dfe36a8830b0e754ac5045049e2b2172", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/0fa319a6dfe36a8830b0e754ac5045049e2b2172", "committedDate": "2020-05-06T14:30:44Z", "message": "undo other style changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aad010ca353fee74e1d34c80b4b47c0e585a62c", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/7aad010ca353fee74e1d34c80b4b47c0e585a62c", "committedDate": "2020-05-06T14:33:49Z", "message": "undo other style changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "395587cea082433cde15f991488c60526f5d4795", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/395587cea082433cde15f991488c60526f5d4795", "committedDate": "2020-05-08T08:47:07Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4OTk3Nzk2", "url": "https://github.com/elastic/elasticsearch/pull/55377#pullrequestreview-408997796", "createdAt": "2020-05-11T09:14:28Z", "commit": {"oid": "395587cea082433cde15f991488c60526f5d4795"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToxNDoyOVrOGTTtBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozMzozMVrOGTccXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5ODk0OQ==", "bodyText": "This probably works in master, but will break in 7.x. I think we need to add preferV2Templates=true in this block? OK to just do this in backport (or before, up to you).", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r422898949", "createdAt": "2020-05-11T09:14:29Z", "author": {"login": "henningandersen"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/action/bulk/BulkIntegrationIT.java", "diffHunk": "@@ -200,4 +217,104 @@ public void testDeleteIndexWhileIndexing() throws Exception {\n             assertFalse(thread.isAlive());\n         }\n     }\n+\n+    public void testMixedAutoCreate() {\n+        Settings settings = Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0).build();\n+\n+        PutIndexTemplateV2Action.Request createTemplateRequest = new PutIndexTemplateV2Action.Request(\"logs-foo\");\n+        createTemplateRequest.indexTemplate(\n+            new IndexTemplateV2(\n+                List.of(\"logs-foo*\"),\n+                new Template(settings, null, null),\n+                null, null, null, null,\n+                new IndexTemplateV2.DataStreamTemplate(\"@timestamp\"))\n+        );\n+        client().execute(PutIndexTemplateV2Action.INSTANCE, createTemplateRequest).actionGet();\n+\n+        Boolean preferV2Templates = randomBoolean() ? null : true;\n+        if (randomBoolean()) {\n+            PutIndexTemplateRequest v1Request = new PutIndexTemplateRequest(\"logs-foo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395587cea082433cde15f991488c60526f5d4795"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyNDIxMg==", "bodyText": "The class name is missing an 'r', should be CreateDataStreamClusterStateUpdateRequest", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r422924212", "createdAt": "2020-05-11T09:56:17Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.action.support.ActiveShardsObserver;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.cluster.AckedClusterStateUpdateTask;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ack.ClusterStateUpdateRequest;\n+import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class MetadataCreateDataStreamService {\n+\n+    private static final Logger logger = LogManager.getLogger(MetadataCreateDataStreamService.class);\n+\n+    private final ClusterService clusterService;\n+    private final ActiveShardsObserver activeShardsObserver;\n+    private final MetadataCreateIndexService metadataCreateIndexService;\n+\n+    public MetadataCreateDataStreamService(ThreadPool threadPool,\n+                                           ClusterService clusterService,\n+                                           MetadataCreateIndexService metadataCreateIndexService) {\n+        this.clusterService = clusterService;\n+        this.activeShardsObserver = new ActiveShardsObserver(clusterService, threadPool);\n+        this.metadataCreateIndexService = metadataCreateIndexService;\n+    }\n+\n+    public void createDataStream(CreateDataSteamClusterStateUpdateRequest request,\n+                                 ActionListener<AcknowledgedResponse> finalListener) {\n+        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n+        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n+            response -> {\n+                if (response.isAcknowledged()) {\n+                    String firstBackingIndexName = firstBackingIndexRef.get();\n+                    assert finalListener != null;\n+                    activeShardsObserver.waitForActiveShards(\n+                        new String[]{firstBackingIndexName},\n+                        ActiveShardCount.DEFAULT,\n+                        request.masterNodeTimeout(),\n+                        shardsAcked -> {\n+                            finalListener.onResponse(new AcknowledgedResponse(true));\n+                        },\n+                        finalListener::onFailure);\n+                } else {\n+                    finalListener.onResponse(new AcknowledgedResponse(false));\n+                }\n+            },\n+            finalListener::onFailure\n+        );\n+        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n+            new AckedClusterStateUpdateTask<>(Priority.HIGH, request, listener) {\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) throws Exception {\n+                    ClusterState clusterState = createDataStream(metadataCreateIndexService, currentState, request);\n+                    firstBackingIndexRef.set(clusterState.metadata().dataStreams().get(request.name).getIndices().get(0).getName());\n+                    return clusterState;\n+                }\n+\n+                @Override\n+                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n+                    return new ClusterStateUpdateResponse(acknowledged);\n+                }\n+            });\n+    }\n+\n+    public ClusterState createDataStream(CreateDataSteamClusterStateUpdateRequest request, ClusterState current) throws Exception {\n+        return createDataStream(metadataCreateIndexService, current, request);\n+    }\n+\n+    public static final class CreateDataSteamClusterStateUpdateRequest extends ClusterStateUpdateRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395587cea082433cde15f991488c60526f5d4795"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjE0Mw==", "bodyText": "typo?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                assert finalListener != null;\n          \n          \n            \n                                assert firstBackingIndexName != null;", "url": "https://github.com/elastic/elasticsearch/pull/55377#discussion_r423042143", "createdAt": "2020-05-11T13:33:31Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.cluster.metadata;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest;\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.action.support.ActiveShardsObserver;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.cluster.AckedClusterStateUpdateTask;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ack.ClusterStateUpdateRequest;\n+import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class MetadataCreateDataStreamService {\n+\n+    private static final Logger logger = LogManager.getLogger(MetadataCreateDataStreamService.class);\n+\n+    private final ClusterService clusterService;\n+    private final ActiveShardsObserver activeShardsObserver;\n+    private final MetadataCreateIndexService metadataCreateIndexService;\n+\n+    public MetadataCreateDataStreamService(ThreadPool threadPool,\n+                                           ClusterService clusterService,\n+                                           MetadataCreateIndexService metadataCreateIndexService) {\n+        this.clusterService = clusterService;\n+        this.activeShardsObserver = new ActiveShardsObserver(clusterService, threadPool);\n+        this.metadataCreateIndexService = metadataCreateIndexService;\n+    }\n+\n+    public void createDataStream(CreateDataSteamClusterStateUpdateRequest request,\n+                                 ActionListener<AcknowledgedResponse> finalListener) {\n+        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n+        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n+            response -> {\n+                if (response.isAcknowledged()) {\n+                    String firstBackingIndexName = firstBackingIndexRef.get();\n+                    assert finalListener != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395587cea082433cde15f991488c60526f5d4795"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2b1d0d688b762abf0667db97661035b6d3b04da", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/a2b1d0d688b762abf0667db97661035b6d3b04da", "committedDate": "2020-05-12T08:08:44Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bdb7178de4163c069c8159d935f230ba1eeb0d9", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/7bdb7178de4163c069c8159d935f230ba1eeb0d9", "committedDate": "2020-05-12T08:23:34Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff41e0efe65ad030f9643f14404483c923e4aca5", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/ff41e0efe65ad030f9643f14404483c923e4aca5", "committedDate": "2020-05-12T09:25:38Z", "message": "fixed test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d6f74b8a6617270de00e4d55f8b2d4237dc54f", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/c7d6f74b8a6617270de00e4d55f8b2d4237dc54f", "committedDate": "2020-05-12T09:32:14Z", "message": "adjust serialization logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc82c3aa5d4ad426f25e299f6b2e37c3106a375c", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/fc82c3aa5d4ad426f25e299f6b2e37c3106a375c", "committedDate": "2020-05-12T09:32:29Z", "message": "Merge remote-tracking branch 'es/master' into auto_create_ds_with_itv2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7957919e8eede3b7fbf299f7dd7267ea4b6da1d6", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/7957919e8eede3b7fbf299f7dd7267ea4b6da1d6", "committedDate": "2020-05-12T10:27:04Z", "message": "fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a013a296ffb61d40b306cddf0a94063eb2684d31", "author": {"user": {"login": "martijnvg", "name": "Martijn van Groningen"}}, "url": "https://github.com/elastic/elasticsearch/commit/a013a296ffb61d40b306cddf0a94063eb2684d31", "committedDate": "2020-05-12T10:27:53Z", "message": "fixed serialization order"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3280, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}