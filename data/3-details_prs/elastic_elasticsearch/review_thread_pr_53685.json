{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTc2Njkx", "number": 53685, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1MDoxNVrODpsGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxMToxM1rODpsb9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQwNzgyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1MDoxNVrOF5BnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowODo1MVrOF6UJsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTUzMA==", "bodyText": "Consider changing this to i.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395339530", "createdAt": "2020-03-19T21:50:15Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java", "diffHunk": "@@ -29,76 +29,75 @@\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n \n import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n \n /**\n  * Represents a list initialization shortcut.\n  */\n-public final class EListInit extends AExpression {\n-    private final List<AExpression> values;\n+public class EListInit extends AExpression {\n \n-    private PainlessConstructor constructor = null;\n-    private PainlessMethod method = null;\n+    protected final List<AExpression> values;\n \n     public EListInit(Location location, List<AExpression> values) {\n         super(location);\n \n-        this.values = values;\n+        this.values = Collections.unmodifiableList(Objects.requireNonNull(values));\n     }\n \n     @Override\n-    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n-        this.input = input;\n-        output = new Output();\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        Output output = new Output();\n \n         if (input.read == false) {\n             throw createError(new IllegalArgumentException(\"Must read from list initializer.\"));\n         }\n \n         output.actual = ArrayList.class;\n \n-        constructor = scriptRoot.getPainlessLookup().lookupPainlessConstructor(output.actual, 0);\n+        PainlessConstructor constructor = scriptRoot.getPainlessLookup().lookupPainlessConstructor(output.actual, 0);\n \n         if (constructor == null) {\n             throw createError(new IllegalArgumentException(\n                     \"constructor [\" + typeToCanonicalTypeName(output.actual) + \", <init>/0] not found\"));\n         }\n \n-        method = scriptRoot.getPainlessLookup().lookupPainlessMethod(output.actual, false, \"add\", 1);\n+        PainlessMethod method = scriptRoot.getPainlessLookup().lookupPainlessMethod(output.actual, false, \"add\", 1);\n \n         if (method == null) {\n             throw createError(new IllegalArgumentException(\"method [\" + typeToCanonicalTypeName(output.actual) + \", add/1] not found\"));\n         }\n \n+        List<Output> valueOutputs = new ArrayList<>(values.size());\n+\n         for (int index = 0; index < values.size(); ++index) {\n             AExpression expression = values.get(index);\n \n             Input expressionInput = new Input();\n             expressionInput.expected = def.class;\n             expressionInput.internal = true;\n-            expression.analyze(scriptRoot, scope, expressionInput);\n-            expression.cast();\n+            Output expressionOutput = expression.analyze(classNode, scriptRoot, scope, expressionInput);\n+            expression.cast(expressionInput, expressionOutput);\n+            valueOutputs.add(expressionOutput);\n         }\n \n-        return output;\n-    }\n-\n-    @Override\n-    ListInitializationNode write(ClassNode classNode) {\n         ListInitializationNode listInitializationNode = new ListInitializationNode();\n \n-        for (AExpression value : values) {\n-            listInitializationNode.addArgumentNode(value.cast(value.write(classNode)));\n+        for (int value = 0; value < values.size(); ++value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MTg4OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396691888", "createdAt": "2020-03-23T19:08:51Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java", "diffHunk": "@@ -29,76 +29,75 @@\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n \n import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n \n /**\n  * Represents a list initialization shortcut.\n  */\n-public final class EListInit extends AExpression {\n-    private final List<AExpression> values;\n+public class EListInit extends AExpression {\n \n-    private PainlessConstructor constructor = null;\n-    private PainlessMethod method = null;\n+    protected final List<AExpression> values;\n \n     public EListInit(Location location, List<AExpression> values) {\n         super(location);\n \n-        this.values = values;\n+        this.values = Collections.unmodifiableList(Objects.requireNonNull(values));\n     }\n \n     @Override\n-    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n-        this.input = input;\n-        output = new Output();\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        Output output = new Output();\n \n         if (input.read == false) {\n             throw createError(new IllegalArgumentException(\"Must read from list initializer.\"));\n         }\n \n         output.actual = ArrayList.class;\n \n-        constructor = scriptRoot.getPainlessLookup().lookupPainlessConstructor(output.actual, 0);\n+        PainlessConstructor constructor = scriptRoot.getPainlessLookup().lookupPainlessConstructor(output.actual, 0);\n \n         if (constructor == null) {\n             throw createError(new IllegalArgumentException(\n                     \"constructor [\" + typeToCanonicalTypeName(output.actual) + \", <init>/0] not found\"));\n         }\n \n-        method = scriptRoot.getPainlessLookup().lookupPainlessMethod(output.actual, false, \"add\", 1);\n+        PainlessMethod method = scriptRoot.getPainlessLookup().lookupPainlessMethod(output.actual, false, \"add\", 1);\n \n         if (method == null) {\n             throw createError(new IllegalArgumentException(\"method [\" + typeToCanonicalTypeName(output.actual) + \", add/1] not found\"));\n         }\n \n+        List<Output> valueOutputs = new ArrayList<>(values.size());\n+\n         for (int index = 0; index < values.size(); ++index) {\n             AExpression expression = values.get(index);\n \n             Input expressionInput = new Input();\n             expressionInput.expected = def.class;\n             expressionInput.internal = true;\n-            expression.analyze(scriptRoot, scope, expressionInput);\n-            expression.cast();\n+            Output expressionOutput = expression.analyze(classNode, scriptRoot, scope, expressionInput);\n+            expression.cast(expressionInput, expressionOutput);\n+            valueOutputs.add(expressionOutput);\n         }\n \n-        return output;\n-    }\n-\n-    @Override\n-    ListInitializationNode write(ClassNode classNode) {\n         ListInitializationNode listInitializationNode = new ListInitializationNode();\n \n-        for (AExpression value : values) {\n-            listInitializationNode.addArgumentNode(value.cast(value.write(classNode)));\n+        for (int value = 0; value < values.size(); ++value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTUzMA=="}, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQxNTIwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1MzowMVrOF5BrdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxMDozOFrOF6UNMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MDY2MQ==", "bodyText": "i", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395340661", "createdAt": "2020-03-19T21:53:01Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java", "diffHunk": "@@ -60,34 +61,34 @@ Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n             throw createError(new IllegalArgumentException(\"Not a type [\" + this.type + \"].\"));\n         }\n \n+        List<Output> argumentOutputs = new ArrayList<>();\n+\n         for (int argument = 0; argument < arguments.size(); ++argument) {\n             AExpression expression = arguments.get(argument);\n \n             Input expressionInput = new Input();\n             expressionInput.expected = initialize ? clazz.getComponentType() : int.class;\n             expressionInput.internal = true;\n-            expression.analyze(scriptRoot, scope, expressionInput);\n-            expression.cast();\n+            Output expressionOutput = expression.analyze(classNode, scriptRoot, scope, expressionInput);\n+            expression.cast(expressionInput, expressionOutput);\n+            argumentOutputs.add(expressionOutput);\n         }\n \n         output.actual = clazz;\n \n-        return output;\n-    }\n-\n-    @Override\n-    NewArrayNode write(ClassNode classNode) {\n         NewArrayNode newArrayNode = new NewArrayNode();\n \n-        for (AExpression argument : arguments) {\n-            newArrayNode.addArgumentNode(argument.cast(argument.write(classNode)));\n+        for (int argument = 0; argument < arguments.size(); ++ argument) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Mjc4Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396692787", "createdAt": "2020-03-23T19:10:38Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java", "diffHunk": "@@ -60,34 +61,34 @@ Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n             throw createError(new IllegalArgumentException(\"Not a type [\" + this.type + \"].\"));\n         }\n \n+        List<Output> argumentOutputs = new ArrayList<>();\n+\n         for (int argument = 0; argument < arguments.size(); ++argument) {\n             AExpression expression = arguments.get(argument);\n \n             Input expressionInput = new Input();\n             expressionInput.expected = initialize ? clazz.getComponentType() : int.class;\n             expressionInput.internal = true;\n-            expression.analyze(scriptRoot, scope, expressionInput);\n-            expression.cast();\n+            Output expressionOutput = expression.analyze(classNode, scriptRoot, scope, expressionInput);\n+            expression.cast(expressionInput, expressionOutput);\n+            argumentOutputs.add(expressionOutput);\n         }\n \n         output.actual = clazz;\n \n-        return output;\n-    }\n-\n-    @Override\n-    NewArrayNode write(ClassNode classNode) {\n         NewArrayNode newArrayNode = new NewArrayNode();\n \n-        for (AExpression argument : arguments) {\n-            newArrayNode.addArgumentNode(argument.cast(argument.write(classNode)));\n+        for (int argument = 0; argument < arguments.size(); ++ argument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MDY2MQ=="}, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQxODY4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1NDoyNVrOF5BtgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo0MToxMlrOF6VRbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTE4NQ==", "bodyText": "If this isn't gonna get fixed right away, consider cutting an issue to address this.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395341185", "createdAt": "2020-03-19T21:54:25Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "diffHunk": "@@ -34,11 +35,11 @@\n /**\n  * Represents a function reference.\n  */\n-public final class ENewArrayFunctionRef extends AExpression implements ILambda {\n-    private final String type;\n+public class ENewArrayFunctionRef extends AExpression implements ILambda {\n \n-    private SFunction function;\n-    private FunctionRef ref;\n+    protected final String type;\n+\n+    // TODO: make local", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMDI1Mg==", "bodyText": "Added issue.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396710252", "createdAt": "2020-03-23T19:41:12Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "diffHunk": "@@ -34,11 +35,11 @@\n /**\n  * Represents a function reference.\n  */\n-public final class ENewArrayFunctionRef extends AExpression implements ILambda {\n-    private final String type;\n+public class ENewArrayFunctionRef extends AExpression implements ILambda {\n \n-    private SFunction function;\n-    private FunctionRef ref;\n+    protected final String type;\n+\n+    // TODO: make local", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTE4NQ=="}, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQyMTk2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1NTozNVrOF5BveA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo0NTowM1rOF6VdtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTY4OA==", "bodyText": "Consider moving this closer to assignment.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395341688", "createdAt": "2020-03-19T21:55:35Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "diffHunk": "@@ -48,17 +49,18 @@ public ENewArrayFunctionRef(Location location, String type) {\n     }\n \n     @Override\n-    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n-        this.input = input;\n-        output = new Output();\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        FunctionRef ref;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMzM5Ng==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396713396", "createdAt": "2020-03-23T19:45:03Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "diffHunk": "@@ -48,17 +49,18 @@ public ENewArrayFunctionRef(Location location, String type) {\n     }\n \n     @Override\n-    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n-        this.input = input;\n-        output = new Output();\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        FunctionRef ref;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTY4OA=="}, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQyOTExOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1ODoxMFrOF5BztQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTozMTo0MlrOF6U7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0Mjc3Mw==", "bodyText": "If these aren't going to be the extension point, no need to change visibility.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395342773", "createdAt": "2020-03-19T21:58:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java", "diffHunk": "@@ -23,20 +23,17 @@\n import org.elasticsearch.painless.Scope;\n import org.elasticsearch.painless.ir.ClassNode;\n import org.elasticsearch.painless.ir.ConstantNode;\n-import org.elasticsearch.painless.ir.ExpressionNode;\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.Objects;\n \n /**\n  * Represents a non-decimal numeric constant.\n  */\n-public final class ENumeric extends AExpression {\n+public class ENumeric extends AExpression {\n \n-    private final String value;\n-    private int radix;\n-\n-    protected Object constant;\n+    protected final String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNDUyMw==", "bodyText": "If it's all right I would like to leave this for now as extending the nodes is currently the only way to do an extension point in the user tree. As other design ideas are explored, it seems more appropriate to modify them then.\nEdit: especially, as a better design is not a guarantee right now", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396704523", "createdAt": "2020-03-23T19:31:42Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java", "diffHunk": "@@ -23,20 +23,17 @@\n import org.elasticsearch.painless.Scope;\n import org.elasticsearch.painless.ir.ClassNode;\n import org.elasticsearch.painless.ir.ConstantNode;\n-import org.elasticsearch.painless.ir.ExpressionNode;\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.Objects;\n \n /**\n  * Represents a non-decimal numeric constant.\n  */\n-public final class ENumeric extends AExpression {\n+public class ENumeric extends AExpression {\n \n-    private final String value;\n-    private int radix;\n-\n-    protected Object constant;\n+    protected final String value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0Mjc3Mw=="}, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ0MzE1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowMzozMFrOF5B8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo0NTo1OFrOF6VgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDk3OQ==", "bodyText": "Punt to issue.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395344979", "createdAt": "2020-03-19T22:03:30Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java", "diffHunk": "@@ -34,11 +34,12 @@\n /**\n  * Represents an array load/store and defers to a child subnode.\n  */\n-public final class PBrace extends AStoreable {\n+public class PBrace extends AStoreable {\n \n-    private AExpression index;\n+    protected final AExpression index;\n \n-    private AStoreable sub = null;\n+    // TODO: make local", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxNDA4NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396714084", "createdAt": "2020-03-23T19:45:58Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java", "diffHunk": "@@ -34,11 +34,12 @@\n /**\n  * Represents an array load/store and defers to a child subnode.\n  */\n-public final class PBrace extends AStoreable {\n+public class PBrace extends AStoreable {\n \n-    private AExpression index;\n+    protected final AExpression index;\n \n-    private AStoreable sub = null;\n+    // TODO: make local", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDk3OQ=="}, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ2MjYxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxMToxM1rOF5CITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo0Njo0OVrOF6VjUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODA0NA==", "bodyText": "Punt to issue.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395348044", "createdAt": "2020-03-19T22:11:13Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "diffHunk": "@@ -121,7 +118,8 @@ void generateSignature(PainlessLookup painlessLookup) {\n                 PainlessLookupUtility.typeToJavaType(returnType), paramClasses).toMethodDescriptorString());\n     }\n \n-    void analyze(ScriptRoot scriptRoot) {\n+    // TODO: decouple from ir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxNDgzNA==", "bodyText": "Removed as this TODO no longer makes sense.", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396714834", "createdAt": "2020-03-23T19:46:49Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "diffHunk": "@@ -121,7 +118,8 @@ void generateSignature(PainlessLookup painlessLookup) {\n                 PainlessLookupUtility.typeToJavaType(returnType), paramClasses).toMethodDescriptorString());\n     }\n \n-    void analyze(ScriptRoot scriptRoot) {\n+    // TODO: decouple from ir", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODA0NA=="}, "originalCommit": {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4313, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}