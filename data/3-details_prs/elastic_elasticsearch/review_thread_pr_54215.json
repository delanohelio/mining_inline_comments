{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzM3ODM1", "number": 54215, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo1NTozM1rODtXfBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowNTowMFrODtXkxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk3Mjg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo1NTozM1rOF-v9xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowMToyNVrOF-3QTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MTg5Mw==", "bodyText": "When we merge #54440, this will need to change to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n          \n          \n            \n                            Map.entry(\"roles\", List.of(\"sso:(\\\\w+)))", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401341893", "createdAt": "2020-04-01T03:55:33Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2MTMyNQ==", "bodyText": "ack", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401461325", "createdAt": "2020-04-01T09:01:25Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MTg5Mw=="}, "originalCommit": {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk4MDM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowMDozOFrOF-wCJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzoyMTo0OFrOF-z0EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzAxMw==", "bodyText": "Did you have a thought on how we would test wildcard services here?\nJust another method, or switch one of these to be wildcarded rather than registered?\nI don't think we want to hold up this PR for it, but we should have a follow up to add it.", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401343013", "createdAt": "2020-04-01T04:00:38Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNDk0NA==", "bodyText": "I was thinking of adding method(s) for wildcarded - will take care of it in a followup", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401404944", "createdAt": "2020-04-01T07:21:48Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzAxMw=="}, "originalCommit": {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk4MjM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowMjowM1rOF-wDVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowMjowM1rOF-wDVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzMxNw==", "bodyText": "I think we can pull this into the base class from here and ManageServiceProviderRestIT", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401343317", "createdAt": "2020-04-01T04:02:03Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        Tuple<String, String> idAndRedirect = generateSamlAuthnRequest(REALM_NAME);\n+        final String requestId = idAndRedirect.v1();\n+        final String query = idAndRedirect.v2().split(\"\\\\?\")[1];\n+        Map<String, Object> authnState = validateAuthnRequest(SP_ENTITY_ID, query);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, authnState);\n+        assertThat(samlResponse, containsString(\"InResponseTo=\\\"\" + requestId + \"\\\"\"));\n+        authenticateWithSamlResponse(samlResponse, requestId);\n+    }\n+\n+    private void checkIndexDoc(SamlServiceProviderIndex.DocumentVersion docVersion) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk4Mjg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowMjoyOVrOF-wDrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowMjoyOVrOF-wDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzQwNA==", "bodyText": "As above, I think pulling this into IdpRestTestCase make sense.", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401343404", "createdAt": "2020-04-01T04:02:29Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        Tuple<String, String> idAndRedirect = generateSamlAuthnRequest(REALM_NAME);\n+        final String requestId = idAndRedirect.v1();\n+        final String query = idAndRedirect.v2().split(\"\\\\?\")[1];\n+        Map<String, Object> authnState = validateAuthnRequest(SP_ENTITY_ID, query);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, authnState);\n+        assertThat(samlResponse, containsString(\"InResponseTo=\\\"\" + requestId + \"\\\"\"));\n+        authenticateWithSamlResponse(samlResponse, requestId);\n+    }\n+\n+    private void checkIndexDoc(SamlServiceProviderIndex.DocumentVersion docVersion) throws IOException {\n+        final Request request = new Request(\"GET\", SamlServiceProviderIndex.INDEX_NAME + \"/_doc/\" + docVersion.id);\n+        final Response response = adminClient().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(map.get(\"_index\"), equalTo(SamlServiceProviderIndex.INDEX_NAME));\n+        assertThat(map.get(\"_id\"), equalTo(docVersion.id));\n+        assertThat(asLong(map.get(\"_seq_no\")), equalTo(docVersion.seqNo));\n+        assertThat(asLong(map.get(\"_primary_term\")), equalTo(docVersion.primaryTerm));\n+    }\n+\n+    private SamlServiceProviderIndex.DocumentVersion createServiceProvider(String entityId, Map<String, Object> body) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk4NzU4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowNTowMFrOF-wGOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowNTowMFrOF-wGOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NDA1OA==", "bodyText": "Suggestion:\nThis could return SamlPrepareAuthenticationResponse instead rather than using a tuple where the caller need to know what v1 and v2 mean.", "url": "https://github.com/elastic/elasticsearch/pull/54215#discussion_r401344058", "createdAt": "2020-04-01T04:05:00Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/qa/idp-rest-tests/src/test/java/org/elasticsearch/xpack/idp/IdentityProviderAuthenticationIT.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp;\n+\n+import org.apache.http.HttpHost;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.ObjectPath;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class IdentityProviderAuthenticationIT extends IdpRestTestCase {\n+\n+    // From build.gradle\n+    private final String SP_ENTITY_ID = \"ec:123456:abcdefg\";\n+    private final String SP_ACS = \"https://sp1.test.es.elasticsearch.org/saml/acs\";\n+    private final String REALM_NAME = \"cloud-saml\";\n+\n+    @Before\n+    public void createUsers() throws IOException {\n+        setUserPassword(\"kibana\", new SecureString(\"kibana\".toCharArray()));\n+    }\n+\n+    public void testRegistrationAndIdpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, null);\n+        authenticateWithSamlResponse(samlResponse, null);\n+    }\n+\n+    public void testRegistrationAndSpInitiatedSso() throws Exception {\n+        final Map<String, Object> request = Map.ofEntries(\n+            Map.entry(\"name\", \"Test SP\"),\n+            Map.entry(\"acs\", SP_ACS),\n+            Map.entry(\"privileges\", Map.ofEntries(\n+                Map.entry(\"resource\", SP_ENTITY_ID),\n+                Map.entry(\"roles\", Map.of(\"superuser\", \"role:superuser\", \"viewer\", \"role:viewer\"))\n+            )),\n+            Map.entry(\"attributes\", Map.ofEntries(\n+                Map.entry(\"principal\", \"https://idp.test.es.elasticsearch.org/attribute/principal\"),\n+                Map.entry(\"name\", \"https://idp.test.es.elasticsearch.org/attribute/name\"),\n+                Map.entry(\"email\", \"https://idp.test.es.elasticsearch.org/attribute/email\"),\n+                Map.entry(\"roles\", \"https://idp.test.es.elasticsearch.org/attribute/roles\")\n+            )));\n+        final SamlServiceProviderIndex.DocumentVersion docVersion = createServiceProvider(SP_ENTITY_ID, request);\n+        checkIndexDoc(docVersion);\n+        ensureGreen(SamlServiceProviderIndex.INDEX_NAME);\n+        Tuple<String, String> idAndRedirect = generateSamlAuthnRequest(REALM_NAME);\n+        final String requestId = idAndRedirect.v1();\n+        final String query = idAndRedirect.v2().split(\"\\\\?\")[1];\n+        Map<String, Object> authnState = validateAuthnRequest(SP_ENTITY_ID, query);\n+        final String samlResponse = generateSamlResponse(SP_ENTITY_ID, SP_ACS, authnState);\n+        assertThat(samlResponse, containsString(\"InResponseTo=\\\"\" + requestId + \"\\\"\"));\n+        authenticateWithSamlResponse(samlResponse, requestId);\n+    }\n+\n+    private void checkIndexDoc(SamlServiceProviderIndex.DocumentVersion docVersion) throws IOException {\n+        final Request request = new Request(\"GET\", SamlServiceProviderIndex.INDEX_NAME + \"/_doc/\" + docVersion.id);\n+        final Response response = adminClient().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(map.get(\"_index\"), equalTo(SamlServiceProviderIndex.INDEX_NAME));\n+        assertThat(map.get(\"_id\"), equalTo(docVersion.id));\n+        assertThat(asLong(map.get(\"_seq_no\")), equalTo(docVersion.seqNo));\n+        assertThat(asLong(map.get(\"_primary_term\")), equalTo(docVersion.primaryTerm));\n+    }\n+\n+    private SamlServiceProviderIndex.DocumentVersion createServiceProvider(String entityId, Map<String, Object> body) throws IOException {\n+        final Request request =\n+            new Request(\"PUT\", \"/_idp/saml/sp/\" + encode(entityId) + \"?refresh=\" + WriteRequest.RefreshPolicy.IMMEDIATE.getValue());\n+        final String entity = Strings.toString(JsonXContent.contentBuilder().map(body));\n+        request.setJsonEntity(entity);\n+        final Response response = client().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(ObjectPath.eval(\"service_provider.entity_id\", map), equalTo(entityId));\n+        assertThat(ObjectPath.eval(\"service_provider.enabled\", map), equalTo(true));\n+\n+        final Object docId = ObjectPath.eval(\"document._id\", map);\n+        final Object seqNo = ObjectPath.eval(\"document._seq_no\", map);\n+        final Object primaryTerm = ObjectPath.eval(\"document._primary_term\", map);\n+        assertThat(docId, instanceOf(String.class));\n+        assertThat(seqNo, instanceOf(Number.class));\n+        assertThat(primaryTerm, instanceOf(Number.class));\n+        return new SamlServiceProviderIndex.DocumentVersion((String) docId, asLong(primaryTerm), asLong(seqNo));\n+    }\n+\n+    private Map<String, Object> validateAuthnRequest(String entityId, String authnRequestQuery) throws Exception {\n+        final Request request = new Request(\"POST\", \"/_idp/saml/validate\");\n+        request.setJsonEntity(\"{\\\"authn_request_query\\\":\\\"\" + authnRequestQuery + \"\\\"}\");\n+        final Response response = client().performRequest(request);\n+        final Map<String, Object> map = entityAsMap(response);\n+        assertThat(ObjectPath.eval(\"service_provider.entity_id\", map), instanceOf(String.class));\n+        assertThat(ObjectPath.eval(\"service_provider.entity_id\", map), equalTo(entityId));\n+        assertThat(ObjectPath.eval(\"authn_state\", map), instanceOf(Map.class));\n+        return ObjectPath.eval(\"authn_state\", map);\n+    }\n+\n+    private Tuple<String, String> generateSamlAuthnRequest(String realmName) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6d965d7ac7ffda1384b0668169410284a60d94"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4104, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}