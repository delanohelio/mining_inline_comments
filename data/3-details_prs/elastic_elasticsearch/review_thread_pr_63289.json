{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MTMzMzU4", "number": 63289, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxMTowOVrOEqwO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo0NTozMFrOErrR7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjY1ODczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxMTowOVrOHdI4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo1MTo0MVrOHdLSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNjI5OQ==", "bodyText": "Rather than using an instanceof check and having one aggregator that supports both ValuesSourceTypes, we should create a new aggregator for histogram types, and add a second mapping in the register aggregators method on the factory.", "url": "https://github.com/elastic/elasticsearch/pull/63289#discussion_r500316299", "createdAt": "2020-10-06T14:11:09Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java", "diffHunk": "@@ -78,33 +81,53 @@ public ScoreMode scoreMode() {\n     @Override\n     public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {\n         final BigArrays bigArrays = context.bigArrays();\n-        final SortedNumericDoubleValues values = valuesSource.doubleValues(ctx);\n         final CompensatedSum kahanSummation = new CompensatedSum(0, 0);\n-\n-        return new LeafBucketCollectorBase(sub, values) {\n-            @Override\n-            public void collect(int doc, long bucket) throws IOException {\n-                sums = bigArrays.grow(sums, bucket + 1);\n-                compensations = bigArrays.grow(compensations, bucket + 1);\n-\n-                if (values.advanceExact(doc)) {\n-                    final int valuesCount = values.docValueCount();\n-                    // Compute the sum of double values with Kahan summation algorithm which is more\n-                    // accurate than naive summation.\n-                    double sum = sums.get(bucket);\n-                    double compensation = compensations.get(bucket);\n-                    kahanSummation.reset(sum, compensation);\n-\n-                    for (int i = 0; i < valuesCount; i++) {\n-                        double value = values.nextValue();\n-                        kahanSummation.add(value);\n+        if (valuesSource instanceof HistogramValuesSource.Histogram) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26085c5878b5e0784be23dacfe14853394e0de78"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1NTYwOA==", "bodyText": "Oh, didn't think about that! Great idea.", "url": "https://github.com/elastic/elasticsearch/pull/63289#discussion_r500355608", "createdAt": "2020-10-06T14:51:41Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java", "diffHunk": "@@ -78,33 +81,53 @@ public ScoreMode scoreMode() {\n     @Override\n     public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {\n         final BigArrays bigArrays = context.bigArrays();\n-        final SortedNumericDoubleValues values = valuesSource.doubleValues(ctx);\n         final CompensatedSum kahanSummation = new CompensatedSum(0, 0);\n-\n-        return new LeafBucketCollectorBase(sub, values) {\n-            @Override\n-            public void collect(int doc, long bucket) throws IOException {\n-                sums = bigArrays.grow(sums, bucket + 1);\n-                compensations = bigArrays.grow(compensations, bucket + 1);\n-\n-                if (values.advanceExact(doc)) {\n-                    final int valuesCount = values.docValueCount();\n-                    // Compute the sum of double values with Kahan summation algorithm which is more\n-                    // accurate than naive summation.\n-                    double sum = sums.get(bucket);\n-                    double compensation = compensations.get(bucket);\n-                    kahanSummation.reset(sum, compensation);\n-\n-                    for (int i = 0; i < valuesCount; i++) {\n-                        double value = values.nextValue();\n-                        kahanSummation.add(value);\n+        if (valuesSource instanceof HistogramValuesSource.Histogram) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNjI5OQ=="}, "originalCommit": {"oid": "26085c5878b5e0784be23dacfe14853394e0de78"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjMxNTY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/AbstractRateAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo0MTozOFrOHekx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo0MTozOFrOHekx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMTkyOQ==", "bodyText": "I think this is fine, but just for the sake of mentioning options, we could push getting the values source into the concrete subclasses and do the cast in the constructor, rather than at access time in the leaf reader.", "url": "https://github.com/elastic/elasticsearch/pull/63289#discussion_r501821929", "createdAt": "2020-10-08T15:41:38Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/AbstractRateAggregator.java", "diffHunk": "@@ -46,7 +40,7 @@ public RateAggregator(\n         Map<String, Object> metadata\n     ) throws IOException {\n         super(name, context, parent, metadata);\n-        this.valuesSource = (ValuesSource.Numeric) valuesSourceConfig.getValuesSource();\n+        this.valuesSource = valuesSourceConfig.getValuesSource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2791eb91d1e2325cd4fd2a6ab70765882d834f09"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjMzMzI2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo0NTozMFrOHek8zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjowMjoxMlrOHelqjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNDcxOA==", "bodyText": "Is it a BWC break that we're dropping boolean here?", "url": "https://github.com/elastic/elasticsearch/pull/63289#discussion_r501824718", "createdAt": "2020-10-08T15:45:30Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java", "diffHunk": "@@ -44,15 +45,21 @@\n     static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n         builder.register(\n             RateAggregationBuilder.REGISTRY_KEY,\n-            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.BOOLEAN),\n-            RateAggregator::new,\n+            Collections.singletonList(CoreValuesSourceType.NUMERIC),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2791eb91d1e2325cd4fd2a6ab70765882d834f09"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNjQzMA==", "bodyText": "Technically, yes. But this behavior was never documented, and it doesn't make any sense in this context. I am not even sure what would be an interpretation of this number in case of boolean field.", "url": "https://github.com/elastic/elasticsearch/pull/63289#discussion_r501836430", "createdAt": "2020-10-08T16:02:12Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java", "diffHunk": "@@ -44,15 +45,21 @@\n     static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n         builder.register(\n             RateAggregationBuilder.REGISTRY_KEY,\n-            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.BOOLEAN),\n-            RateAggregator::new,\n+            Collections.singletonList(CoreValuesSourceType.NUMERIC),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNDcxOA=="}, "originalCommit": {"oid": "2791eb91d1e2325cd4fd2a6ab70765882d834f09"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3099, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}