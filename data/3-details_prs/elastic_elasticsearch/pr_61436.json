{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzc1NDc2", "number": 61436, "title": "Copy gradle/system jdk to local dir for packaging tests", "bodyText": "The distro tests rely on two jdks, pulled in by the jdk download plugin.\nThe move to artifact transforms for jdks resulted in the path to the extracted\njdks existing under the gradle cache dir, which is outside the vagrant\nmount of the elasticsearch project. This commit creates a local copy\nwithin the qa:os project that the packaging tests use.\ncloses #61138", "createdAt": "2020-08-21T18:14:40Z", "url": "https://github.com/elastic/elasticsearch/pull/61436", "merged": true, "mergeCommit": {"oid": "8cacaa48c8640f978436a812ac9d1e70a26f4644"}, "closed": true, "closedAt": "2020-08-21T21:21:45Z", "author": {"login": "rjernst"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBI2_iAH2gAyNDcxNzc1NDc2OjVlMTdiNTE0NDUyNmEzZGQ1NDllMzgzNzBkN2NlOGNkOWI1YjZjNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBJFnFAH2gAyNDcxNzc1NDc2OjY4OWJmNjk4OGRjODk2MTQ4MDczNDZlMzRmZDg3NzY1M2NjNGFmNGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e17b5144526a3dd549e38370d7ce8cd9b5b6c6a", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e17b5144526a3dd549e38370d7ce8cd9b5b6c6a", "committedDate": "2020-08-21T18:10:28Z", "message": "Copy gradle/system jdk to local dir for packaging tests\n\nThe distro tests rely on two jdks, pulled in by the jdk download plugin.\nThe move the artifact transforms result in the path to the extracted\njdks existing under the gradle cache dir, which is outside the vagrant\nmount of the elasticsearch project. This commit creates a local copy\nwithin the `qa:os` project that the packaging tests use.\n\ncloses #61138"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjk2ODcy", "url": "https://github.com/elastic/elasticsearch/pull/61436#pullrequestreview-472696872", "createdAt": "2020-08-21T18:19:58Z", "commit": {"oid": "5e17b5144526a3dd549e38370d7ce8cd9b5b6c6a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxOTo1OFrOHE24lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxOTo1OFrOHE24lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1NTU3NA==", "bodyText": "Is the only thing we're wanting to defer is the destination dir? If so, can we just compute that ahead of time rather than query it from the task itself?", "url": "https://github.com/elastic/elasticsearch/pull/61436#discussion_r474855574", "createdAt": "2020-08-21T18:19:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -237,57 +252,56 @@ public void apply(Project project) {\n         return versionTasks;\n     }\n \n-    private static Jdk createJdk(\n-        NamedDomainObjectContainer<Jdk> jdksContainer,\n-        String name,\n+    private static TaskProvider<Copy> createJdk(\n+        Project project,\n+        String purpose,\n         String vendor,\n         String version,\n         String platform,\n         String architecture\n     ) {\n-        Jdk jdk = jdksContainer.create(name);\n+        Jdk jdk = JdkDownloadPlugin.getContainer(project).create(platform + \"-\" + purpose);\n         jdk.setVendor(vendor);\n         jdk.setVersion(version);\n         jdk.setPlatform(platform);\n         jdk.setArchitecture(architecture);\n-        return jdk;\n+\n+        String taskname = \"copy\" + Util.capitalize(platform) + Util.capitalize(purpose) + \"Jdk\";\n+        TaskProvider<Copy> copyTask = project.getTasks().register(taskname, Copy.class);\n+        copyTask.configure(t -> {\n+            t.from(jdk);\n+            t.into(new File(project.getBuildDir(), \"jdks/\" + platform + \"-\" + architecture + \"-\" + vendor + \"-\" + version));\n+        });\n+        return copyTask;\n     }\n \n-    private static List<Object> configureVM(Project project) {\n+    private static void configureVM(Project project, TaskProvider<Copy> gradleJdkProvider, TaskProvider<Copy> systemJdkProvider) {\n         String box = project.getName();\n \n-        // setup jdks used by the distro tests, and by gradle executing\n-\n-        NamedDomainObjectContainer<Jdk> jdksContainer = JdkDownloadPlugin.getContainer(project);\n-        String platform = box.contains(\"windows\") ? \"windows\" : \"linux\";\n-        Jdk systemJdk = createJdk(jdksContainer, \"system\", SYSTEM_JDK_VENDOR, SYSTEM_JDK_VERSION, platform, \"x64\");\n-        Jdk gradleJdk = createJdk(jdksContainer, \"gradle\", GRADLE_JDK_VENDOR, GRADLE_JDK_VERSION, platform, \"x64\");\n-\n         // setup VM used by these tests\n         VagrantExtension vagrant = project.getExtensions().getByType(VagrantExtension.class);\n         vagrant.setBox(box);\n-        vagrant.vmEnv(\"SYSTEM_JAVA_HOME\", convertPath(project, vagrant, systemJdk, \"\", \"\"));\n-        vagrant.vmEnv(\"JAVA_HOME\", \"\"); // make sure any default java on the system is ignored\n-        vagrant.vmEnv(\"PATH\", convertPath(project, vagrant, gradleJdk, \"/bin:$PATH\", \"\\\\bin;$Env:PATH\"));\n+\n+        vagrant.vmEnv(\"SYSTEM_JAVA_HOME\", convertPath(project, vagrant, systemJdkProvider, \"\", \"\"));\n+        vagrant.vmEnv(\"JAVA_HOME\",\"\"); // make sure any default java on the system is ignored\n+        vagrant.vmEnv(\"PATH\", convertPath(project, vagrant, gradleJdkProvider, \"/bin:$PATH\", \"\\\\bin;$Env:PATH\"));\n         // pass these along to get correct build scans\n         if (System.getenv(\"JENKINS_URL\") != null) {\n             Stream.of(\"JOB_NAME\", \"JENKINS_URL\", \"BUILD_NUMBER\", \"BUILD_URL\").forEach(name -> vagrant.vmEnv(name, System.getenv(name)));\n         }\n         vagrant.setIsWindowsVM(isWindows(project));\n-\n-        return Arrays.asList(systemJdk, gradleJdk);\n     }\n \n-    private static Object convertPath(Project project, VagrantExtension vagrant, Jdk jdk, String additionaLinux, String additionalWindows) {\n-        return new Object() {\n-            @Override\n-            public String toString() {\n-                if (vagrant.isWindowsVM()) {\n-                    return convertWindowsPath(project, jdk.getPath()) + additionalWindows;\n-                }\n-                return convertLinuxPath(project, jdk.getPath()) + additionaLinux;\n+    private static Object convertPath(Project project, VagrantExtension vagrant, TaskProvider<Copy> jdkProvider,\n+                                      String additionaLinux, String additionalWindows) {\n+        return Util.toStringable(() -> {\n+            String hostPath = jdkProvider.get().getDestinationDir().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e17b5144526a3dd549e38370d7ce8cd9b5b6c6a"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "689bf6988dc89614807346e34fd877653cc4af4f", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/689bf6988dc89614807346e34fd877653cc4af4f", "committedDate": "2020-08-21T18:26:26Z", "message": "spotless"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4649, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}