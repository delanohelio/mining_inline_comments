{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MTMyNzUx", "number": 54264, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjoyMDoxMFrODrnoLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjoyMDoxMFrODrnoLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDY0NjIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjoyMDoxMFrOF8EORA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjoxNToyMlrOF8OzBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUyODA2OA==", "bodyText": "Would it work to just do the following, since assertBusy only re-runs the block if it throws an exception?\nassertBusy(() -> {\n    // The actual method call that sends the API requests returns a Future, but we immediately\n    // call .get() on it so there's no need for this method to do any other awaiting.\n    ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders());\n    assertEquals(HttpStatus.SC_OK, response.get().getStatusCode());\n    success.apply(response);\n});", "url": "https://github.com/elastic/elasticsearch/pull/54264#discussion_r398528068", "createdAt": "2020-03-26T12:20:10Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestIT.java", "diffHunk": "@@ -229,11 +230,14 @@ private void awaitCallApi(String apiName,\n                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,\n                               Supplier<String> error) {\n         try {\n-            // The actual method call that sends the API requests returns a Future, but we immediately\n-            // call .get() on it so there's no need for this method to do any other awaiting.\n-            ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders());\n-            assertEquals(response.getStatusCode(), HttpStatus.SC_OK);\n-            success.apply(response);\n+            final AtomicReference<ClientYamlTestResponse> response = new AtomicReference<>();\n+            assertBusy(() -> {\n+                // The actual method call that sends the API requests returns a Future, but we immediately\n+                // call .get() on it so there's no need for this method to do any other awaiting.\n+                response.set(callApi(apiName, params, bodies, getApiCallHeaders()));\n+                assertEquals(HttpStatus.SC_OK, response.get().getStatusCode());\n+            });\n+            success.apply(response.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c2f527fb60a362e7af61896818e7f9ed0ac55ca"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcwMTMxOQ==", "bodyText": "I considered that, but I didn't want to swallow any assertion errors thrown by success.apply(), which today may call ObjectPath#evaluate which could well assert things in future even if it doesn't today.", "url": "https://github.com/elastic/elasticsearch/pull/54264#discussion_r398701319", "createdAt": "2020-03-26T16:15:22Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestIT.java", "diffHunk": "@@ -229,11 +230,14 @@ private void awaitCallApi(String apiName,\n                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,\n                               Supplier<String> error) {\n         try {\n-            // The actual method call that sends the API requests returns a Future, but we immediately\n-            // call .get() on it so there's no need for this method to do any other awaiting.\n-            ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders());\n-            assertEquals(response.getStatusCode(), HttpStatus.SC_OK);\n-            success.apply(response);\n+            final AtomicReference<ClientYamlTestResponse> response = new AtomicReference<>();\n+            assertBusy(() -> {\n+                // The actual method call that sends the API requests returns a Future, but we immediately\n+                // call .get() on it so there's no need for this method to do any other awaiting.\n+                response.set(callApi(apiName, params, bodies, getApiCallHeaders()));\n+                assertEquals(HttpStatus.SC_OK, response.get().getStatusCode());\n+            });\n+            success.apply(response.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUyODA2OA=="}, "originalCommit": {"oid": "4c2f527fb60a362e7af61896818e7f9ed0ac55ca"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4123, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}