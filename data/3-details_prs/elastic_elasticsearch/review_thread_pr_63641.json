{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzY5NjY5", "number": 63641, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1OToyN1rOEtaLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjoxMTo1MFrOE2-UDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUwMjUzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1OToyN1rOHhLhjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1OToyN1rOHhLhjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1Mzg3MQ==", "bodyText": "this adds a implicit dependency to the JavaPlugin. we should shield this by putting this within a\nproject.getPlugins().withType(JavaPlugin.class, p -> {\n                        t.setRuntimeConfiguration(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));\n\n});\n        ```", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504553871", "createdAt": "2020-10-14T09:59:27Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.elasticsearch.gradle.dependencies.CompileOnlyResolvePlugin;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+public class DependenciesGraphPlugin implements Plugin<Project> {\n+\n+    public void apply(Project project) {\n+        project.getPlugins().apply(CompileOnlyResolvePlugin.class);\n+        TaskProvider<DependenciesGraphTask> depsGraph = project.getTasks().register(\"dependenciesGraph\", DependenciesGraphTask.class);\n+        depsGraph.configure(t -> {\n+            t.setRuntimeConfiguration(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUzNDkzOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowODoyN1rOHhL2Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowODoyN1rOHhL2Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTExOA==", "bodyText": "Just a general note, We keep adding more stuff here. In general we should avoid the pattern of adding logic and disabling it to certain projects. Instead we should have a notion of production project or sth similar to have a way to apply logic like this dependencyGraph plugin only on this production projects", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504559118", "createdAt": "2020-10-14T10:08:27Z", "author": {"login": "breskeby"}, "path": "build.gradle", "diffHunk": "@@ -407,6 +407,9 @@ gradle.projectsEvaluated {\n       maybeConfigure(project.tasks, 'dependenciesInfo') {\n         it.enabled = false\n       }\n+      maybeConfigure(project.tasks, 'dependenciesGraph') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUzNzE0OnYy", "diffSide": "RIGHT", "path": "qa/os/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowOTowM1rOHhL3XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowOTowM1rOHhL3XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTQ1Mg==", "bodyText": "with the change in the root build.gradle file this shouldn't be required should it?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504559452", "createdAt": "2020-10-14T10:09:03Z", "author": {"login": "breskeby"}, "path": "qa/os/build.gradle", "diffHunk": "@@ -54,6 +54,7 @@ testingConventions.enabled = false\n // this project doesn't get published\n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n tasks.dependenciesInfo.enabled = false\n+tasks.dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU0OTUzOnYy", "diffSide": "RIGHT", "path": "client/test/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMjoyMlrOHhL_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMjoyMlrOHhL_OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTQ2NA==", "bodyText": "please use the task avoidance api here: tasks.named(\"dependenciesGraph\").configure { it.enabled = false }", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504561464", "createdAt": "2020-10-14T10:12:22Z", "author": {"login": "breskeby"}, "path": "client/test/build.gradle", "diffHunk": "@@ -50,6 +50,7 @@ jarHell.enabled = false\n // TODO: should we have licenses for our test deps?\n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n dependenciesInfo.enabled = false\n+dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU1MjM4OnYy", "diffSide": "RIGHT", "path": "qa/wildfly/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMzoxMFrOHhMA9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMzoxMFrOHhMA9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTkxMA==", "bodyText": "should not be required (see root build.gradle change)", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504561910", "createdAt": "2020-10-14T10:13:10Z", "author": {"login": "breskeby"}, "path": "qa/wildfly/build.gradle", "diffHunk": "@@ -87,6 +87,7 @@ test.enabled = false\n \n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n dependenciesInfo.enabled = false\n+dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU1MzQ0OnYy", "diffSide": "RIGHT", "path": "test/framework/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMzoyN1rOHhMBmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMzoyN1rOHhMBmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MjA3NQ==", "bodyText": "please use the gradle task avoidance api", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504562075", "createdAt": "2020-10-14T10:13:27Z", "author": {"login": "breskeby"}, "path": "test/framework/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ tasks.named('forbiddenApisMain').configure {\n // TODO: should we have licenses for our test deps?\n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n dependenciesInfo.enabled = false\n+dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU1ODgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/qa/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxNDo1OVrOHhME9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxNDo1OVrOHhME9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MjkzNQ==", "bodyText": "This seem to duplicate the logic in the root build.gradle file we have for disabling the task", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504562935", "createdAt": "2020-10-14T10:14:59Z", "author": {"login": "breskeby"}, "path": "x-pack/plugin/transform/qa/build.gradle", "diffHunk": "@@ -10,5 +10,9 @@ gradle.projectsEvaluated {\n     if (dependenciesInfo) {\n       dependenciesInfo.enabled = false\n     }\n+    Task dependenciesGraph = project.tasks.findByName('dependenciesGraph')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjkwNTI2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo1MjowN1rOHhiryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODoyNDo1OFrOHkcHoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMzMyMQ==", "bodyText": "Depending on how we can pass secrets from Jenkins to a gradle task, this can be changed/adapted. I'm up for suggestions on how to deal with this", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504933321", "createdAt": "2020-10-14T19:52:07Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+    private String url;\n+    private String token;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @Option(option = \"url\", description = \"The API endpoint to call with the dependency graph\")\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input\n+    public String getUrl() {\n+        return this.url;\n+    }\n+\n+    @Option(option = \"token\", description = \"The API KEY used to authenticate to the API\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MTQ4OQ==", "bodyText": "Yeah, we probably dont' want to use a CLI option, as this would leak the secret into the build logs. Given that we can probably ditch the @Option bit here and simply read it from something like an environment variable which we can inject into the build.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r507971489", "createdAt": "2020-10-19T18:24:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+    private String url;\n+    private String token;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @Option(option = \"url\", description = \"The API endpoint to call with the dependency graph\")\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input\n+    public String getUrl() {\n+        return this.url;\n+    }\n+\n+    @Option(option = \"token\", description = \"The API KEY used to authenticate to the API\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMzMyMQ=="}, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjM4MjEwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDozOToyNFrOHkgylg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyOTozOFrOHmqMZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0ODAyMg==", "bodyText": "Why are we including compile-only dependencies? These aren't bundled with Elasticsearch so I'm not sure we should be including them in our report. Security vulnerabilities, by definition, should only be applicable to runtime code.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r508048022", "createdAt": "2020-10-19T20:39:24Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5ODQ5OQ==", "bodyText": "We are not including them, we are resolving them here so that we can exclude them. See https://github.com/elastic/elasticsearch/pull/63641/files#diff-09a991b3b2c89b70a65e2e26cccdb4ee8c24ce440f82706e44aa79948dad51c1R119", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r510298499", "createdAt": "2020-10-22T16:28:36Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0ODAyMg=="}, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5OTIzNw==", "bodyText": "The resolving runtime dependencies process is picked up from our dependenciesInfo task", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r510299237", "createdAt": "2020-10-22T16:29:38Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0ODAyMg=="}, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQwNjAxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo0NjoxM1rOHkhA6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjozMDowMFrOHmqNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MTY5MA==", "bodyText": "Since this task performs network operations, we should probably explicitly fail if a user attempts to run it in offline mode, similarly to what we do for the verifyVersions task.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r508051690", "createdAt": "2020-10-19T20:46:13Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+    private String url;\n+    private String token;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @Option(option = \"url\", description = \"The API endpoint to call with the dependency graph\")\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input\n+    public String getUrl() {\n+        return this.url;\n+    }\n+\n+    @Option(option = \"token\", description = \"The API KEY used to authenticate to the API\")\n+    public void setToken(String token) {\n+        this.token = token;\n+    }\n+\n+    @Input\n+    public String getToken() {\n+        return this.token;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+        final DependencySet runtimeDependencies = runtimeConfiguration.getAllDependencies();\n+        final Set<String> packages = new HashSet<>();\n+        final Set<String> nodes = new HashSet<>();\n+        final Set<String> nodeIds = new HashSet<>();\n+        final Set<String> compileOnlyArtifacts = compileOnlyConfiguration.getResolvedConfiguration()\n+            .getResolvedArtifacts()\n+            .stream()\n+            .map(a -> {\n+                ModuleVersionIdentifier id = a.getModuleVersion().getId();\n+                return id.getGroup() + \":\" + id.getName() + \"@\" + id.getVersion();\n+            })\n+            .collect(Collectors.toSet());\n+        for (final Dependency dependency : runtimeDependencies) {\n+            final String id = dependency.getGroup() + \":\" + dependency.getName();\n+            final String versionedId = id + \"@\" + dependency.getVersion();\n+            final StringBuilder packageString = new StringBuilder();\n+            final StringBuilder nodeString = new StringBuilder();\n+            if (compileOnlyArtifacts.contains(versionedId)) {\n+                continue;\n+            }\n+            if (dependency instanceof ProjectDependency) {\n+                continue;\n+            }\n+            packageString.append(\"{\\\"id\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"info\\\": {\\\"name\\\": \\\"\")\n+                .append(id)\n+                .append(\"\\\",\\\"version\\\": \\\"\")\n+                .append(dependency.getVersion())\n+                .append(\"\\\"}}\");\n+            packages.add(packageString.toString());\n+            nodeString.append(\"{\\\"nodeId\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"pkgId\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"deps\\\": []}\");\n+            nodes.add(nodeString.toString());\n+            nodeIds.add(\"{\\\"nodeId\\\": \\\"\" + versionedId + \"\\\"}\");\n+        }\n+        // We add one package and one node for each dependency, it suffices to check packages.\n+        if (packages.size() > 0) {\n+            final String projectName = \"elastic/elasticsearch\" + getProject().getPath();\n+            final StringBuilder output = new StringBuilder();\n+            output.append(\"{\\\"depGraph\\\": {\\\"schemaVersion\\\": \\\"1.2.0\\\",\\\"pkgManager\\\": {\\\"name\\\": \\\"gradle\\\"},\\\"pkgs\\\": [\")\n+                .append(\"{\\\"id\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\", \\\"info\\\": {\\\"name\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"\\\", \\\"version\\\": \\\"0.0.0\\\"}},\")\n+                .append(String.join(\",\", packages))\n+                .append(\"],\\\"graph\\\": {\\\"rootNodeId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"nodes\\\": [\")\n+                .append(\"{\\\"nodeId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"pkgId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"deps\\\": [\")\n+                .append(String.join(\",\", nodeIds))\n+                .append(\"]},\")\n+                .append(String.join(\",\", nodes))\n+                .append(\"]}}}\");\n+            getLogger().debug(\"Dependency Graph: \" + output.toString());\n+            try (CloseableHttpClient client = HttpClients.createDefault()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5OTUwMw==", "bodyText": "Thanks, will do", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r510299503", "createdAt": "2020-10-22T16:30:00Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+    private String url;\n+    private String token;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @Option(option = \"url\", description = \"The API endpoint to call with the dependency graph\")\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input\n+    public String getUrl() {\n+        return this.url;\n+    }\n+\n+    @Option(option = \"token\", description = \"The API KEY used to authenticate to the API\")\n+    public void setToken(String token) {\n+        this.token = token;\n+    }\n+\n+    @Input\n+    public String getToken() {\n+        return this.token;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+        final DependencySet runtimeDependencies = runtimeConfiguration.getAllDependencies();\n+        final Set<String> packages = new HashSet<>();\n+        final Set<String> nodes = new HashSet<>();\n+        final Set<String> nodeIds = new HashSet<>();\n+        final Set<String> compileOnlyArtifacts = compileOnlyConfiguration.getResolvedConfiguration()\n+            .getResolvedArtifacts()\n+            .stream()\n+            .map(a -> {\n+                ModuleVersionIdentifier id = a.getModuleVersion().getId();\n+                return id.getGroup() + \":\" + id.getName() + \"@\" + id.getVersion();\n+            })\n+            .collect(Collectors.toSet());\n+        for (final Dependency dependency : runtimeDependencies) {\n+            final String id = dependency.getGroup() + \":\" + dependency.getName();\n+            final String versionedId = id + \"@\" + dependency.getVersion();\n+            final StringBuilder packageString = new StringBuilder();\n+            final StringBuilder nodeString = new StringBuilder();\n+            if (compileOnlyArtifacts.contains(versionedId)) {\n+                continue;\n+            }\n+            if (dependency instanceof ProjectDependency) {\n+                continue;\n+            }\n+            packageString.append(\"{\\\"id\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"info\\\": {\\\"name\\\": \\\"\")\n+                .append(id)\n+                .append(\"\\\",\\\"version\\\": \\\"\")\n+                .append(dependency.getVersion())\n+                .append(\"\\\"}}\");\n+            packages.add(packageString.toString());\n+            nodeString.append(\"{\\\"nodeId\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"pkgId\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"deps\\\": []}\");\n+            nodes.add(nodeString.toString());\n+            nodeIds.add(\"{\\\"nodeId\\\": \\\"\" + versionedId + \"\\\"}\");\n+        }\n+        // We add one package and one node for each dependency, it suffices to check packages.\n+        if (packages.size() > 0) {\n+            final String projectName = \"elastic/elasticsearch\" + getProject().getPath();\n+            final StringBuilder output = new StringBuilder();\n+            output.append(\"{\\\"depGraph\\\": {\\\"schemaVersion\\\": \\\"1.2.0\\\",\\\"pkgManager\\\": {\\\"name\\\": \\\"gradle\\\"},\\\"pkgs\\\": [\")\n+                .append(\"{\\\"id\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\", \\\"info\\\": {\\\"name\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"\\\", \\\"version\\\": \\\"0.0.0\\\"}},\")\n+                .append(String.join(\",\", packages))\n+                .append(\"],\\\"graph\\\": {\\\"rootNodeId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"nodes\\\": [\")\n+                .append(\"{\\\"nodeId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"pkgId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"deps\\\": [\")\n+                .append(String.join(\",\", nodeIds))\n+                .append(\"]},\")\n+                .append(String.join(\",\", nodes))\n+                .append(\"]}}}\");\n+            getLogger().debug(\"Dependency Graph: \" + output.toString());\n+            try (CloseableHttpClient client = HttpClients.createDefault()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MTY5MA=="}, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ3NzEwOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo1MToxMlrOHqxa-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo0OToyN1rOHreB4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMTk2MQ==", "bodyText": "This is just creating a \"dummy\" task on the root build proejct. This logic should in the DependenciesGraphPlugin or DependenciesGraphTask itself.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r514611961", "createdAt": "2020-10-29T22:51:12Z", "author": {"login": "mark-vieira"}, "path": "build.gradle", "diffHunk": "@@ -209,6 +209,14 @@ tasks.register(\"branchConsistency\") {\n   dependsOn \":verifyVersions\", \":verifyBwcTestsEnabled\"\n }\n \n+tasks.register(\"dependenciesGraph\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe11254bfcd995a77ef47a4cd153a1ffc720bd56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNjI0MA==", "bodyText": "@mark-vieira Yeah I guess I misunderstood you and I'm still not clear what your suggestion is. Is startParameter.isOffline available somehow for me to check while in the plugin or in the Task class ?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r514626240", "createdAt": "2020-10-29T23:33:50Z", "author": {"login": "jkakavas"}, "path": "build.gradle", "diffHunk": "@@ -209,6 +209,14 @@ tasks.register(\"branchConsistency\") {\n   dependsOn \":verifyVersions\", \":verifyBwcTestsEnabled\"\n }\n \n+tasks.register(\"dependenciesGraph\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMTk2MQ=="}, "originalCommit": {"oid": "fe11254bfcd995a77ef47a4cd153a1ffc720bd56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0MjgxOQ==", "bodyText": "Nevermind, I think I got it", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r515342819", "createdAt": "2020-10-30T19:49:27Z", "author": {"login": "jkakavas"}, "path": "build.gradle", "diffHunk": "@@ -209,6 +209,14 @@ tasks.register(\"branchConsistency\") {\n   dependsOn \":verifyVersions\", \":verifyBwcTestsEnabled\"\n }\n \n+tasks.register(\"dependenciesGraph\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMTk2MQ=="}, "originalCommit": {"oid": "fe11254bfcd995a77ef47a4cd153a1ffc720bd56"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAwMzk2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTowODo0N1rOHsSEaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo1MDowMVrOHs_9ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NTQzMg==", "bodyText": "Can we make these properties on the task, and then set them in the plugin?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516195432", "createdAt": "2020-11-02T19:08:47Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+\n+        if (getProject().getGradle().getStartParameter().isOffline()) {\n+            throw new GradleException(\"Must run in online mode in order to submit the dependency graph to the SCA service\");\n+        }\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNDU2NA==", "bodyText": "Sure thing. What's the benefit of that ? i.e. why do we prefer to do that in the plugin?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516514564", "createdAt": "2020-11-03T09:08:57Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+\n+        if (getProject().getGradle().getStartParameter().isOffline()) {\n+            throw new GradleException(\"Must run in online mode in order to submit the dependency graph to the SCA service\");\n+        }\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NTQzMg=="}, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMzI3MA==", "bodyText": "The thing I dislike about this is that if the env vars are not set , this now fails with\n* What went wrong:\nSome problems were found with the configuration of task ':rest-api-spec:dependenciesGraph' (type 'DependenciesGraphTask').\n> No value has been specified for property 'token'.\n> No value has been specified for property 'url'.\n\ninstead of the Gradle exception with the proper message before.\nIs there any way to add a more user friendly message to the Task failing if an @Input is passed as null ? I guess I can also annotate those as @Optional and do the null check myself but it sounds like a bad solution as these are not optional at all :)", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516523270", "createdAt": "2020-11-03T09:23:48Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+\n+        if (getProject().getGradle().getStartParameter().isOffline()) {\n+            throw new GradleException(\"Must run in online mode in order to submit the dependency graph to the SCA service\");\n+        }\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NTQzMg=="}, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NDU5Mw==", "bodyText": "Sure thing. What's the benefit of that ? i.e. why do we prefer to do that in the plugin?\n\nThe general pattern is that plugins should \"wire\" up tasks. So reaching out to environment variables should be done in the \"wiring\" no in the implementation of the task.\n\nIs there any way to add a more user friendly message to the Task failing if an @input is passed as null ? I guess I can also annotate those as @optional and do the null check myself but it sounds like a bad solution as these are not optional at all :)\n\nThey are optional in the sense that they aren't required unless the task is actually going to execute. So what we instead need to do is add a task graph listener that explodes if a) that task is included in the graph for execution and b) the environment variables are missing (example). In that check we can throw a useful message, including mentioning the task(s) that require the environment variables.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516854593", "createdAt": "2020-11-03T17:56:13Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+\n+        if (getProject().getGradle().getStartParameter().isOffline()) {\n+            throw new GradleException(\"Must run in online mode in order to submit the dependency graph to the SCA service\");\n+        }\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NTQzMg=="}, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NzMwMA==", "bodyText": "Thanks for explaining Mark !", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516947300", "createdAt": "2020-11-03T20:50:01Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+\n+        if (getProject().getGradle().getStartParameter().isOffline()) {\n+            throw new GradleException(\"Must run in online mode in order to submit the dependency graph to the SCA service\");\n+        }\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NTQzMg=="}, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAwODM3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMDowOFrOHsSHCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMDowOFrOHsSHCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjEwNg==", "bodyText": "Where did we land on this? I thought we decided this could be removed?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516196106", "createdAt": "2020-11-02T19:10:08Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.elasticsearch.gradle.dependencies.CompileOnlyResolvePlugin;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+public class DependenciesGraphPlugin implements Plugin<Project> {\n+\n+    public void apply(Project project) {\n+        project.getPlugins().apply(CompileOnlyResolvePlugin.class);\n+        TaskProvider<DependenciesGraphTask> depsGraph = project.getTasks().register(\"dependenciesGraph\", DependenciesGraphTask.class);\n+        depsGraph.configure(t -> {\n+            project.getPlugins().withType(JavaPlugin.class, p -> {\n+                t.setRuntimeConfiguration(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));\n+                t.setCompileOnlyConfiguration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzExMDE1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMDo0MlrOHslnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxNjozMlrOHsl0uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTYwNA==", "bodyText": "I don't see us throwing from other plugins so I'm not sure if this is a good practice or not. I prefer this as it throws a meaningful error instead of the Task failing with \"url is missing\" and \"token is missing\"", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516515604", "createdAt": "2020-11-03T09:10:42Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+public class DependenciesGraphPlugin implements Plugin<Project> {\n+\n+    public void apply(Project project) {\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {\n+            throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxOTA5OQ==", "bodyText": "Ok, the subsequent failure made me realize there is a good reason why we don't throw in plugins :)", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516519099", "createdAt": "2020-11-03T09:16:32Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+public class DependenciesGraphPlugin implements Plugin<Project> {\n+\n+    public void apply(Project project) {\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {\n+            throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTYwNA=="}, "originalCommit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzEyMDgzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMzozNFrOHsltsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxNTo1OVrOHslzaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNzI5OQ==", "bodyText": "Can we make these properties on the task, and then set them in the plugin?\n\nNot entirely sure if this is what you had in mind. If not, please elaborate on what your suggestion is. I'm not clear on whether or not we should annotate those as Input", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516517299", "createdAt": "2020-11-03T09:13:34Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private String token;\n+    private String url;\n+\n+    @Input\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxODc2MA==", "bodyText": "Ok, the subsequent failure made me realize we need to annotate them.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516518760", "createdAt": "2020-11-03T09:15:59Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private String token;\n+    private String url;\n+\n+    @Input\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNzI5OQ=="}, "originalCommit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTk4MDY5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozMzoxOVrOHtBOdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDozMToxN1rOHvxf2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ==", "bodyText": "Let's make the message \"The environment variables SCA_URL and SCA_TOKEN need to be set before task \" + t.getPath() +\" can run\" as it won't be clear to the user what we mean by \"this task\" w/o that context.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516968055", "createdAt": "2020-11-03T21:33:19Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3NzQ2Nw==", "bodyText": "My thinking was that one either\n\nruns the task for the whole project (gradlew -q dependenciesTask) so that in the DependenciesGraphPlugin ,if we filter for instanceof DependenciesGraphTask we will get all the subprojects. Then which one do you add to the message ( which will be shown N times )\nruns the task for one project (gradlew -q x-pack:plugin:core:dependenciesTask ) so they know what \"this task\" is", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516977467", "createdAt": "2020-11-03T21:53:45Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ=="}, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4Nzk0Mw==", "bodyText": "I would just error on the first task it finds. In any case the \"solution\" is the same for all the others so it's not like we are short-circuiting some other error that'll encounter.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516987943", "createdAt": "2020-11-03T22:17:20Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ=="}, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MjUyMA==", "bodyText": "Sure, makes sense. It's just a comment to whether printing the task name in the message is helpful here or not. So it's either someone ran this for all subprojects and we will show a random X:dependenciesTask in the error message, or someone ran this as a specific task, so they know what \"this task\" is (context is there), so showing the task is not that helpful\nI can add this if you think we should though, happy to wrap this up either way we decide", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516992520", "createdAt": "2020-11-03T22:28:00Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ=="}, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwOTA1NQ==", "bodyText": "Yeah, you could argue in this case folks will be explicitly running those tasks, but I think it's worthwhile to confirm, since there are likely other upstream tasks run here and when in doubt, better to be explicit \ud83d\ude04", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r517009055", "createdAt": "2020-11-03T23:10:23Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ=="}, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4OTQyOQ==", "bodyText": "I still think that printing\n* What went wrong:\nFailed to notify task execution graph listener.\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :x-pack:plugin:core:dependenciesGraph can run\n....\n....\n....\n....\nN times\n\nwhen someone just ran ./gradlew -q x-pack:plugin:core:dependenciesGraph and\n* What went wrong:\nFailed to notify task execution graph listener.\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :benchmarks:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :benchmarks:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :benchmarks:dependenciesGraph can run\n> The environment variables SCA_URL and SCA_TOKEN need to be set before task :benchmarks:dependenciesGraph can run\n...\n...\n...\nN times\n\nwhen someone ran ./gradlew -q dependenciesGraph ,\nis a bit on the extreme explicitness side, but I'll comply and pick another hill :)", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r517189429", "createdAt": "2020-11-04T09:02:30Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ=="}, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0NTg4NA==", "bodyText": "Haha, you are absolutely right. The reason for this is because we are registering that task graph listener multiple times, in fact, every time the plugin is applied. The the task execution graph is \"global\" so you actually only need do this once. We can solve this by putting that logic into a separate plugin, and applying that plugin only to the root project. Plugin application is idempotent so we can apply it to the root project over and over but it'll only actually evaluate once. We do this elsewhere when we want to register \"global\" listeners by a) defining a plugin in an inner class b) adding some logic to that plugin to error if we mistakenly apply it to a project that isn't the root project c) apply that new plugin from the \"outer\" plugin\nhttps://github.com/elastic/elasticsearch/blob/master/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java#L138", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r517545884", "createdAt": "2020-11-04T18:26:05Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ=="}, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1NjA5MQ==", "bodyText": "Nice, thanks! I took a swing at this ( Apologies this is dragging but it's low priority - since we got the first graph in manually - and I'm taking long cycles before spending time on it again )", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r519856091", "createdAt": "2020-11-09T14:31:17Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ=="}, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDc5NTAxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjoxMTo1MFrOHwDpeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjoxMTo1MFrOHwDpeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MzQ2NA==", "bodyText": "nit: can we do this as the very first line in the apply() method? This is a somewhat unwritten convention.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r520153464", "createdAt": "2020-11-09T22:11:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -42,22 +42,37 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+        project.getRootProject().getPluginManager().apply(DependenciesGraphHookPlugin.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29e4d4a34aa862cf6676190de997f7f934f100e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2995, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}