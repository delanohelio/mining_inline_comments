{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODgxNzEw", "number": 59937, "title": "[DOCS] Adding new page for restore snapshot API", "bodyText": "Adds a new page for the Restore snapshot API.\nAdditionally, improves and adds linking to the Snapshot and restore and Restore a snapshot pages.\nBackports:\n\n7.x #60055\n7.9 #60056\n7.8 #60057\n\nRelates to #56069", "createdAt": "2020-07-20T22:06:26Z", "url": "https://github.com/elastic/elasticsearch/pull/59937", "merged": true, "mergeCommit": {"oid": "396dcffe3962bedb017e0780bdc9976f7a70fca6"}, "closed": true, "closedAt": "2020-07-22T15:42:18Z", "author": {"login": "lockewritesdocs"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc25AccAH2gAyNDUzODgxNzEwOjRkNjBiYzY0ZWUwNTg5MGMyM2NhYWQwNGJmMDllNzE5OGM2ZDBjMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3cfTZgH2gAyNDUzODgxNzEwOmZiOTNlZTFhMGI1OWNmZGFiMzRhMjdjNTljNGRhYWYzODA0MTE1NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4d60bc64ee05890c23caad04bf09e7198c6d0c13", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/4d60bc64ee05890c23caad04bf09e7198c6d0c13", "committedDate": "2020-07-20T22:03:04Z", "message": "Adding new page for restore snapshot API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/ff70d6addf700180b87cde257688773ab2fad6d3", "committedDate": "2020-07-21T20:14:46Z", "message": "Improving test cases, lots of edits, and streamlining content."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTA0NzAw", "url": "https://github.com/elastic/elasticsearch/pull/59937#pullrequestreview-453104700", "createdAt": "2020-07-22T08:29:49Z", "commit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMjk0MDQ3", "url": "https://github.com/elastic/elasticsearch/pull/59937#pullrequestreview-453294047", "createdAt": "2020-07-22T13:02:57Z", "commit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "state": "APPROVED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzowMjo1OFrOG1hXDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNDoyNFrOG1iopg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3NDI4NA==", "bodyText": "This paragraph is a bit confusing and seems to conflate two ideas.\nYou can restore an entire data stream. This also restores the stream's backing indices.\nSeparately, you can also restore individual backing indices without restoring an entire data stream. However, these restored backing indices are treated as regular indices. They aren't auto-added to any existing data stream.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458774284", "createdAt": "2020-07-22T13:02:58Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3NTE3OA==", "bodyText": "You can run the restore operation only on a functioning cluster.\n\nfunctioning is a little vague here. Does this mean the cluster is running? Green health status? Both?", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458775178", "createdAt": "2020-07-22T13:04:29Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3NjE0NA==", "bodyText": "This name must be unique in the snapshot repository.\n\nI think this is more relevant for a write action than a read action. Probably not needed here.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458776144", "createdAt": "2020-07-22T13:06:05Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3NzE1Mg==", "bodyText": "and index settings groups\n\nI've not seen this phrase elsewhere. Not sure what it means. Maybe explain in separate sentence?", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458777152", "createdAt": "2020-07-22T13:07:39Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3ODE3MA==", "bodyText": "We should explicitly use index alias on first mention. There are field aliases too, which could lead to confusion.\nI'd also avoid future tense if possible.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If `true`, aliases from the original snapshot will be restored.\n          \n          \n            \n            If `true`, index aliases from the original snapshot are restored.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458778170", "createdAt": "2020-07-22T13:09:17Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3ODcxOA==", "bodyText": "If false, prevents aliases from being restored together with associated\nindices.\n\nI don't think you need this sentence. First para is pretty clear.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458778718", "createdAt": "2020-07-22T13:10:10Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MDAzOA==", "bodyText": "I'd drop the article.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n          \n          \n            \n            Comma-separated list of index settings and index settings groups that should not be restored from a snapshot.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458780038", "createdAt": "2020-07-22T13:12:16Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MDUyNQ==", "bodyText": "I'd drop the article here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n          \n          \n            \n            Comma-separated list of <<index-modules,index settings>> to add or change in restored indices. Use this parameter to override index settings when restoring snapshots.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458780525", "createdAt": "2020-07-22T13:12:59Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MDY4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For data streams, these index settings are applied to the restored backing\n          \n          \n            \n            indices.\n          \n          \n            \n            For data streams, these index settings are applied to the stream's restored backing\n          \n          \n            \n            indices.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458780683", "createdAt": "2020-07-22T13:13:14Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MTI0MA==", "bodyText": "I'd drop this para. I think an inline link in the first sentence will suffice.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458781240", "createdAt": "2020-07-22T13:14:08Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MTcwNA==", "bodyText": "Drop the article. Multi-index syntax is now multi-target syntax (to include data streams).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A comma-separated list of data streams and indices to restore from the snapshot.\n          \n          \n            \n            <<multi-index,Multi-index syntax>> is supported.\n          \n          \n            \n            Comma-separated list of data streams and indices to restore from the snapshot.\n          \n          \n            \n            <<multi-index,Multi-target syntax>> is supported.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458781704", "createdAt": "2020-07-22T13:14:51Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MjMwNw==", "bodyText": "The second sentence here kind of repeats the first on in the def. Maybe:\nIf no argument is specified, all data streams and indices in the snapshot are restored.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458782307", "createdAt": "2020-07-22T13:15:48Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4Mjg1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n          \n          \n            \n            If `false`, the restore operation fails if one or more indices in the snapshot do not have all primary shards available. Defaults to `false`.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458782852", "createdAt": "2020-07-22T13:16:34Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MzM3OA==", "bodyText": "I think you can drop most of the first sentence here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n          \n          \n            \n            will be restored. All missing shards will be recreated as empty.\n          \n          \n            \n            If `true`, only shards that were successfully included in the snapshot\n          \n          \n            \n            will be restored. All missing shards will be recreated as empty.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458783378", "createdAt": "2020-07-22T13:17:18Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n+will be restored. All missing shards will be recreated as empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4NTAyNw==", "bodyText": "I'm not sure how this relates to the include_global_state param.\nIt's also not clear that the primary shards have to be available when the snapshot is taken. As-is, it could be read as meaning an existing index needs to have its primary shards available.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458785027", "createdAt": "2020-07-22T13:19:42Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4NjMzMQ==", "bodyText": "This pattern is used to match the name of data streams and indices in the snapshot. That's not clear here.\nI also think we're better off referring to this as a regular expression than introducing rename pattern as a new noun/concept.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458786331", "createdAt": "2020-07-22T13:21:29Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n+will be restored. All missing shards will be recreated as empty.\n+\n+[[restore-snapshot-api-rename-pattern]]\n+`rename_pattern`::\n+(Optional, string)\n+Defines a rename pattern to apply to restored data streams and indices. Data streams and indices matching the rename pattern will be renamed according to\n+<<restore-snapshot-api-rename-replacement,`rename_replacement`>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODEyNg==", "bodyText": "Some things that are missing or not clear here:\n\nThis string is used to rename data streams and indices in the snapshot that match the rename_pattern.\nThis string supports capture groups from the rename_pattern param. You should also note what that syntax is.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458788126", "createdAt": "2020-07-22T13:24:05Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n+will be restored. All missing shards will be recreated as empty.\n+\n+[[restore-snapshot-api-rename-pattern]]\n+`rename_pattern`::\n+(Optional, string)\n+Defines a rename pattern to apply to restored data streams and indices. Data streams and indices matching the rename pattern will be renamed according to\n+<<restore-snapshot-api-rename-replacement,`rename_replacement`>>.\n++\n+The rename pattern is applied as defined by the regular expression that\n+supports referencing the original text, according to the https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement-java.lang.StringBuffer-java.lang.String-[`appendReplacement`] logic.\n++\n+The request will fail if two or more data streams or indices will be renamed into the same name.\n++\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=rename-restored-data-stream-tag]\n+\n+[[restore-snapshot-api-rename-replacement]]\n+`rename_replacement`::\n+(Optional, string)\n+Defines the rename replacement string. See <<restore-snapshot-api-rename-pattern,`rename_pattern`>> for more information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODg3Ng==", "bodyText": "I'd flip the order so it matches your earlier params (like partial).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If `true`, the request returns a response when the restore operation\n          \n          \n            \n            completes.\n          \n          \n            \n            +\n          \n          \n            \n            If `false`, the request returns a response when the restore operation initializes.\n          \n          \n            \n            Defaults to `false`.\n          \n          \n            \n            If `false`, the request returns a response when the restore operation initializes.\n          \n          \n            \n            Defaults to `false`.\n          \n          \n            \n            +\n          \n          \n            \n            If `true`, the request returns a response when the restore operation\n          \n          \n            \n            completes.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458788876", "createdAt": "2020-07-22T13:25:07Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n+will be restored. All missing shards will be recreated as empty.\n+\n+[[restore-snapshot-api-rename-pattern]]\n+`rename_pattern`::\n+(Optional, string)\n+Defines a rename pattern to apply to restored data streams and indices. Data streams and indices matching the rename pattern will be renamed according to\n+<<restore-snapshot-api-rename-replacement,`rename_replacement`>>.\n++\n+The rename pattern is applied as defined by the regular expression that\n+supports referencing the original text, according to the https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement-java.lang.StringBuffer-java.lang.String-[`appendReplacement`] logic.\n++\n+The request will fail if two or more data streams or indices will be renamed into the same name.\n++\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=rename-restored-data-stream-tag]\n+\n+[[restore-snapshot-api-rename-replacement]]\n+`rename_replacement`::\n+(Optional, string)\n+Defines the rename replacement string. See <<restore-snapshot-api-rename-pattern,`rename_pattern`>> for more information.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+If `true`, the request returns a response when the restore operation\n+completes.\n++\n+If `false`, the request returns a response when the restore operation initializes.\n+Defaults to `false`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MDE3Ng==", "bodyText": "regex pattern -> regular expression\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following request restores `index_1` and `index_2` from `snapshot_2`. The `rename_pattern` parameter indicates that any index matching the regex pattern `index_(.+)` will be renamed using the pattern `restored_index_$1`, which is defined by the `rename_replacement` parameter.\n          \n          \n            \n            The following request restores `index_1` and `index_2` from `snapshot_2`. The `rename_pattern` and `rename_replacement` parameters indicate any index matching the regular expression `index_(.+)` will be renamed using the pattern `restored_index_$1` when restored.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458790176", "createdAt": "2020-07-22T13:27:07Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n+will be restored. All missing shards will be recreated as empty.\n+\n+[[restore-snapshot-api-rename-pattern]]\n+`rename_pattern`::\n+(Optional, string)\n+Defines a rename pattern to apply to restored data streams and indices. Data streams and indices matching the rename pattern will be renamed according to\n+<<restore-snapshot-api-rename-replacement,`rename_replacement`>>.\n++\n+The rename pattern is applied as defined by the regular expression that\n+supports referencing the original text, according to the https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement-java.lang.StringBuffer-java.lang.String-[`appendReplacement`] logic.\n++\n+The request will fail if two or more data streams or indices will be renamed into the same name.\n++\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=rename-restored-data-stream-tag]\n+\n+[[restore-snapshot-api-rename-replacement]]\n+`rename_replacement`::\n+(Optional, string)\n+Defines the rename replacement string. See <<restore-snapshot-api-rename-pattern,`rename_pattern`>> for more information.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+If `true`, the request returns a response when the restore operation\n+completes.\n++\n+If `false`, the request returns a response when the restore operation initializes.\n+Defaults to `false`.\n+\n+[[restore-snapshot-api-example]]\n+==== {api-examples-title}\n+\n+The following request restores `index_1` and `index_2` from `snapshot_2`. The `rename_pattern` parameter indicates that any index matching the regex pattern `index_(.+)` will be renamed using the pattern `restored_index_$1`, which is defined by the `rename_replacement` parameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MDQzMg==", "bodyText": "I'd split the sentences.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, `index_1` will be renamed to `restored_index_1` and `index_2` will be renamed to `restored_index_2`.\n          \n          \n            \n            For example, `index_1` will be renamed to `restored_index_1`. `index_2` will be renamed to `restored_index_2`.", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458790432", "createdAt": "2020-07-22T13:27:27Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n+will be restored. All missing shards will be recreated as empty.\n+\n+[[restore-snapshot-api-rename-pattern]]\n+`rename_pattern`::\n+(Optional, string)\n+Defines a rename pattern to apply to restored data streams and indices. Data streams and indices matching the rename pattern will be renamed according to\n+<<restore-snapshot-api-rename-replacement,`rename_replacement`>>.\n++\n+The rename pattern is applied as defined by the regular expression that\n+supports referencing the original text, according to the https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement-java.lang.StringBuffer-java.lang.String-[`appendReplacement`] logic.\n++\n+The request will fail if two or more data streams or indices will be renamed into the same name.\n++\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=rename-restored-data-stream-tag]\n+\n+[[restore-snapshot-api-rename-replacement]]\n+`rename_replacement`::\n+(Optional, string)\n+Defines the rename replacement string. See <<restore-snapshot-api-rename-pattern,`rename_pattern`>> for more information.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+If `true`, the request returns a response when the restore operation\n+completes.\n++\n+If `false`, the request returns a response when the restore operation initializes.\n+Defaults to `false`.\n+\n+[[restore-snapshot-api-example]]\n+==== {api-examples-title}\n+\n+The following request restores `index_1` and `index_2` from `snapshot_2`. The `rename_pattern` parameter indicates that any index matching the regex pattern `index_(.+)` will be renamed using the pattern `restored_index_$1`, which is defined by the `rename_replacement` parameter.\n+\n+For example, `index_1` will be renamed to `restored_index_1` and `index_2` will be renamed to `restored_index_2`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NDQ5MQ==", "bodyText": "I'd drop this portion of the example.\nWith a few exceptions, we don't document error messages. Two reasons:\n\n\nErrors aren't typically an outcome any user wants. It's usually more helpful to document ways to prevent errors in the first place.\n\n\nIf the error message changes, we have no way of catching that in these docs. Because you skipped the response here, no CI failure would be raised. That's not the case for most requests/responses.\n\n\nFor example, if a response added a new property, engineers would need to update any existing doc snippets containing that response to include the new property. Otherwise the CI would fail on their PR.\nSkipping tests generally undermines that system.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, the following error indicates that `snapshot_2` cannot be restored because an open index with the same name (`restored_index_2`) already exists in the cluster.\n          \n          \n            \n            \n          \n          \n            \n            [source,console-result]\n          \n          \n            \n            ----\n          \n          \n            \n            {\n          \n          \n            \n              \"error\" : {\n          \n          \n            \n                \"root_cause\" : [\n          \n          \n            \n                  {\n          \n          \n            \n                    \"type\" : \"snapshot_restore_exception\",\n          \n          \n            \n                    \"reason\" : \"[my_repository:snapshot_2/0LIMUElxQkyRoimBDAkYIQ]\n          \n          \n            \n                    cannot restore index [restored_index_2] because an open index\n          \n          \n            \n                    with same name already exists in the cluster. Either close or\n          \n          \n            \n                    delete the existing index or restore the index under a different\n          \n          \n            \n                    name by providing a rename pattern and replacement name\"\n          \n          \n            \n                  }\n          \n          \n            \n                ],\n          \n          \n            \n                \"type\" : \"snapshot_restore_exception\",\n          \n          \n            \n                \"reason\" : \"[my_respository:snapshot_2/0LIMUElxQkyRoimBDAkYIQ]\n          \n          \n            \n                cannot restore index [restored_index_2] because an open index\n          \n          \n            \n                with same name already exists in the cluster. Either close or\n          \n          \n            \n                delete the existing index or restore the index under a different\n          \n          \n            \n                name by providing a rename pattern and replacement name\"\n          \n          \n            \n              },\n          \n          \n            \n              \"status\" : 500\n          \n          \n            \n            }\n          \n          \n            \n            ----\n          \n          \n            \n            // TEST[skip:example only]", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458794491", "createdAt": "2020-07-22T13:33:23Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/apis/restore-snapshot-api.asciidoc", "diffHunk": "@@ -0,0 +1,230 @@\n+[[restore-snapshot-api]]\n+=== Restore snapshot API\n+++++\n+<titleabbrev>Restore snapshot</titleabbrev>\n+++++\n+\n+Restores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n+\n+////\n+[source,console]\n+----\n+PUT /_snapshot/my_repository\n+{\n+  \"type\": \"fs\",\n+  \"settings\": {\n+    \"location\": \"my_backup_location\"\n+  }\n+}\n+\n+PUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n+\n+PUT /index_1\n+\n+PUT /index_2\n+\n+PUT /index_3\n+\n+PUT /index_4\n+\n+PUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n+{\n+  \"indices\": \"index_3,index_4\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"metadata\": {\n+    \"taken_by\": \"Elastic Machine\",\n+    \"taken_because\": \"backup testing\"\n+  }\n+}\n+\n+POST /index_1/_close\n+\n+POST /index_2/_close\n+\n+POST /index_3/_close\n+\n+POST /index_4/_close\n+\n+----\n+// TESTSETUP\n+////\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/my_snapshot/_restore\n+----\n+// TEST[s/_restore/_restore?wait_for_completion=true/]\n+\n+[[restore-snapshot-api-request]]\n+==== {api-request-title}\n+\n+`POST /_snapshot/<repository>/<snapshot>`\n+\n+[[restore-snapshot-api-desc]]\n+==== {api-description-title}\n+\n+Use the restore snapshot API to restore a snapshot of a cluster, including all data streams and indices in the snapshot. If you do not want to restore the entire snapshot, you can select specific data streams or indices to restore.\n+\n+NOTE: You cannot restore a data stream if a stream with the same name already\n+exists.\n+\n+You can run the restore operation only on a functioning cluster. Existing indices can only be restored if they are <<indices-close,closed>> and have the same number of shards as the indices in the snapshot. The restore operation automatically opens restored indices if they were closed and creates new indices if they do not exist in the cluster.\n+\n+If a data stream is restored, its backing indices are also restored. However, restored backing indices are not automatically\n+added to any existing data streams. For example, if only the\n+`.ds-logs-000003` backing index is restored from a snapshot, it is not automatically added to the existing `logs` data stream.\n+\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=index-settings-data-stream-warning]\n+\n+[[restore-snapshot-api-path-params]]\n+==== {api-path-parms-title}\n+\n+`<repository>`::\n+(Required, string)\n+Name of the repository to restore a snapshot from.\n+\n+`<snapshot>`::\n+(Required, string)\n+Name of the snapshot to restore. This name must be unique in the snapshot repository.\n+\n+[role=\"child-attributes\"]\n+[[restore-snapshot-api-request-body]]\n+==== {api-request-body-title}\n+\n+`ignore_index_settings`::\n+(Optional, string)\n+A comma-separated list of index settings and index settings groups that should not be restored from a snapshot.\n+\n+`include_aliases`::\n+(Optional, boolean)\n+If `true`, aliases from the original snapshot will be restored.\n+Defaults to `true`.\n++\n+If `false`, prevents aliases from being restored together with associated\n+indices.\n+\n+[[restore-snapshot-api-include-global-state]]\n+`include_global_state`::\n++\n+--\n+(Optional, boolean)\n+If `false`, the cluster state is not restored. Defaults to `false`.\n+\n+If `true`, the current cluster state is included in the restore operation.\n+\n+The cluster state includes:\n+\n+* Persistent cluster settings\n+* Index templates\n+* Legacy index templates\n+* Ingest pipelines\n+* {ilm-init} lifecycle policies\n+--\n++\n+IMPORTANT: By default, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. You can change this behavior by setting <<restore-snapshot-api-partial,`partial`>> to `true`.\n+\n+[[restore-snapshot-api-index-settings]]\n+`index_settings`::\n+(Optional, string)\n+A comma-separated list of settings to add or change in all restored indices. Use this parameter to override index settings when restoring snapshots.\n++\n+For data streams, these index settings are applied to the restored backing\n+indices.\n++\n+For more information regarding all the different index-level settings\n+that you can specify, see\n+<<index-modules,index modules>>.\n+\n+`indices`::\n+(Optional, string)\n+A comma-separated list of data streams and indices to restore from the snapshot.\n+<<multi-index,Multi-index syntax>> is supported.\n++\n+By default, a restore operation includes all data streams and indices in the snapshot. If this\n+argument is provided, the restore operation only includes the specified data streams and indices.\n+\n+[[restore-snapshot-api-partial]]\n+`partial`::\n+(Optional, boolean)\n+If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n++\n+If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\n+will be restored. All missing shards will be recreated as empty.\n+\n+[[restore-snapshot-api-rename-pattern]]\n+`rename_pattern`::\n+(Optional, string)\n+Defines a rename pattern to apply to restored data streams and indices. Data streams and indices matching the rename pattern will be renamed according to\n+<<restore-snapshot-api-rename-replacement,`rename_replacement`>>.\n++\n+The rename pattern is applied as defined by the regular expression that\n+supports referencing the original text, according to the https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement-java.lang.StringBuffer-java.lang.String-[`appendReplacement`] logic.\n++\n+The request will fail if two or more data streams or indices will be renamed into the same name.\n++\n+include::{es-ref-dir}/snapshot-restore/restore-snapshot.asciidoc[tag=rename-restored-data-stream-tag]\n+\n+[[restore-snapshot-api-rename-replacement]]\n+`rename_replacement`::\n+(Optional, string)\n+Defines the rename replacement string. See <<restore-snapshot-api-rename-pattern,`rename_pattern`>> for more information.\n+\n+`wait_for_completion`::\n+(Optional, boolean)\n+If `true`, the request returns a response when the restore operation\n+completes.\n++\n+If `false`, the request returns a response when the restore operation initializes.\n+Defaults to `false`.\n+\n+[[restore-snapshot-api-example]]\n+==== {api-examples-title}\n+\n+The following request restores `index_1` and `index_2` from `snapshot_2`. The `rename_pattern` parameter indicates that any index matching the regex pattern `index_(.+)` will be renamed using the pattern `restored_index_$1`, which is defined by the `rename_replacement` parameter.\n+\n+For example, `index_1` will be renamed to `restored_index_1` and `index_2` will be renamed to `restored_index_2`.\n+\n+[source,console]\n+----\n+POST /_snapshot/my_repository/snapshot_2/_restore?wait_for_completion=true\n+{\n+  \"indices\": \"index_1,index_2\",\n+  \"ignore_unavailable\": true,\n+  \"include_global_state\": false,\n+  \"rename_pattern\": \"index_(.+)\",\n+  \"rename_replacement\": \"restored_index_$1\",\n+  \"include_aliases\": false\n+}\n+----\n+\n+The API returns an acknowledgement if the request succeeds. If the request encounters errors, the response indicates any issues found, such as\n+open indices that are blocking the restore operation from completing.\n+\n+For example, the following error indicates that `snapshot_2` cannot be restored because an open index with the same name (`restored_index_2`) already exists in the cluster.\n+\n+[source,console-result]\n+----\n+{\n+  \"error\" : {\n+    \"root_cause\" : [\n+      {\n+        \"type\" : \"snapshot_restore_exception\",\n+        \"reason\" : \"[my_repository:snapshot_2/0LIMUElxQkyRoimBDAkYIQ]\n+        cannot restore index [restored_index_2] because an open index\n+        with same name already exists in the cluster. Either close or\n+        delete the existing index or restore the index under a different\n+        name by providing a rename pattern and replacement name\"\n+      }\n+    ],\n+    \"type\" : \"snapshot_restore_exception\",\n+    \"reason\" : \"[my_respository:snapshot_2/0LIMUElxQkyRoimBDAkYIQ]\n+    cannot restore index [restored_index_2] because an open index\n+    with same name already exists in the cluster. Either close or\n+    delete the existing index or restore the index under a different\n+    name by providing a rename pattern and replacement name\"\n+  },\n+  \"status\" : 500\n+}\n+----\n+// TEST[skip:example only]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NTE3NA==", "bodyText": "I believe we have attributes for SLM.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <<getting-started-snapshot-lifecycle-management, snapshot lifecycle management>>\n          \n          \n            \n            <<getting-started-snapshot-lifecycle-management, {slm}>>", "url": "https://github.com/elastic/elasticsearch/pull/59937#discussion_r458795174", "createdAt": "2020-07-22T13:34:24Z", "author": {"login": "jrodewig"}, "path": "docs/reference/snapshot-restore/index.asciidoc", "diffHunk": "@@ -10,27 +10,29 @@ You can take snapshots of an entire cluster, including all its data streams and\n indices. You can also take snapshots of only specific data streams or indices in\n the cluster.\n \n+You must\n+<<snapshots-register-repository, register a snapshot repository>>\n+before you can <<snapshots-take-snapshot, create snapshots>>.\n+\n Snapshots can be stored in either local or remote repositories.\n Remote repositories can reside on Amazon S3, HDFS, Microsoft Azure,\n Google Cloud Storage,\n-and other platforms supported by a repository plugin.\n+and other platforms supported by a {plugins}/repository.html[repository plugin].\n \n Snapshots are incremental: each snapshot only stores data that\n is not part of an earlier snapshot.\n This enables you to take frequent snapshots with minimal overhead.\n // end::snapshot-intro[]\n \n // tag::restore-intro[]\n-You can restore snapshots to a running cluster with the <<snapshots-restore-snapshot,restore API>>.\n-By default, all data streams and indices in the snapshot are restored.\n+You can <<snapshots-restore-snapshot,restore snapshots>> to a running cluster, which includes all data streams and indices in the snapshot\n+by default.\n However, you can choose to restore only the cluster state or specific data\n streams or indices from a snapshot.\n // end::restore-intro[]\n \n-You must <<snapshots-register-repository, register a snapshot repository>>\n-before you can <<snapshots-take-snapshot, take snapshots>>.\n-\n-You can use <<getting-started-snapshot-lifecycle-management, snapshot lifecycle management>>\n+You can use\n+<<getting-started-snapshot-lifecycle-management, snapshot lifecycle management>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70d6addf700180b87cde257688773ab2fad6d3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59abbafbaa79a84d218a5b3938e97b2a0a3b047c", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/59abbafbaa79a84d218a5b3938e97b2a0a3b047c", "committedDate": "2020-07-22T14:54:35Z", "message": "Incorporating review suggestions and feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e3ff02b535368e4928351031782c2398b63dd7", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/30e3ff02b535368e4928351031782c2398b63dd7", "committedDate": "2020-07-22T15:05:48Z", "message": "Specify `index alias` vs `alias`\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae9e19769f1950d3dfc36032e66dfe290d06468e", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/ae9e19769f1950d3dfc36032e66dfe290d06468e", "committedDate": "2020-07-22T15:06:16Z", "message": "Change parameter order\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca0ca5edb3bce92a5acb4de8ec1b89c5fe80cc56", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/ca0ca5edb3bce92a5acb4de8ec1b89c5fe80cc56", "committedDate": "2020-07-22T15:07:15Z", "message": "Provide clarity around regular expression\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1329dac111a3abd1b929f8e66003715abdd7ef7a", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/1329dac111a3abd1b929f8e66003715abdd7ef7a", "committedDate": "2020-07-22T15:07:46Z", "message": "Add link to SLM parameters\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d344daaac4cb5e383e5872897b122ff41f00bfb3", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d344daaac4cb5e383e5872897b122ff41f00bfb3", "committedDate": "2020-07-22T15:13:50Z", "message": "Split sentences in example\n\nCo-authored-by: James Rodewig <james.rodewig@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb93ee1a0b59cfdab34a27c59c4daaf380411563", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/fb93ee1a0b59cfdab34a27c59c4daaf380411563", "committedDate": "2020-07-22T15:23:27Z", "message": "Adding link to master node page."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4143, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}