{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNjQ1OTY4", "number": 62073, "title": "EQL: Propagate key constraints through the query", "bodyText": "Since join keys are common across all queries in a Join/Sequence, any\nconstraint applied on one query needs to be obeyed but all the other\nqueries.\nThis PR enhances the optimizer to propagate such constraints across\nall queries so they get pushed down to the actual generated ES queries.\nFix #58937", "createdAt": "2020-09-07T21:17:47Z", "url": "https://github.com/elastic/elasticsearch/pull/62073", "merged": true, "mergeCommit": {"oid": "4afa5debc199c132c07015bfae17952c40a21e5d"}, "closed": true, "closedAt": "2020-09-08T14:33:15Z", "author": {"login": "costin"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGpq6xAH2gAyNDgxNjQ1OTY4OjljZDYwMzY4MzI4ZjE1ZmY3NjM5MTYzZjliZmViNGZhMjJlNjA1NGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG10rIgH2gAyNDgxNjQ1OTY4OjQ0MTQyYzcyMGFhYjJjNDZiZDhjYjQyZmRjYTJmNjRlNzJiYmQ5ZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9cd60368328f15ff7639163f9bfeb4fa22e6054c", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/9cd60368328f15ff7639163f9bfeb4fa22e6054c", "committedDate": "2020-09-07T21:13:46Z", "message": "EQL: Propagate key constraints through the query\n\nSince join keys are common across all queries in a Join/Sequence, any\nconstraint applied on one query needs to be obeyed but all the other\nqueries.\nThis PR enhances the optimizer to propagate such constraints across\nall queries so they get pushed down to the actual generated ES queries.\n\nFix #58937"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODU5MTky", "url": "https://github.com/elastic/elasticsearch/pull/62073#pullrequestreview-483859192", "createdAt": "2020-09-08T07:21:27Z", "commit": {"oid": "9cd60368328f15ff7639163f9bfeb4fa22e6054c"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoyMToyOFrOHOP9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTowMzoxMlrOHOTsjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMzUzNw==", "bodyText": "Is intentional to have operators twice? (before and after constraints rules) If yes, I don't see the reason.", "url": "https://github.com/elastic/elasticsearch/pull/62073#discussion_r484703537", "createdAt": "2020-09-08T07:21:28Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -91,7 +99,7 @@ public LogicalPlan optimize(LogicalPlan verified) {\n         Batch label = new Batch(\"Set as Optimized\", Limiter.ONCE,\n                 new SetAsOptimized());\n \n-        return Arrays.asList(substitutions, operators, ordering, local, label);\n+        return Arrays.asList(substitutions, operators, constraints, operators, ordering, local, label);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cd60368328f15ff7639163f9bfeb4fa22e6054c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc2MTEyNQ==", "bodyText": "Do you mind adding a simple explanation in the form of an example to each test? I find it easier to follow.\nFor this one:\nsequence\n [event where a > 1] by a\n [event where timestamp == true] by a", "url": "https://github.com/elastic/elasticsearch/pull/62073#discussion_r484761125", "createdAt": "2020-09-08T08:57:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -300,4 +330,176 @@ private LogicalPlan defaultPipes(LogicalPlan plan) {\n         assertTrue(plan instanceof OrderBy);\n         return ((OrderBy) plan).child();\n     }\n+\n+    public void testCombineFilters() {\n+        Expression left = new IsNull(EMPTY, Literal.TRUE);\n+        Expression right = new Equals(EMPTY, timestamp(), Literal.TRUE);\n+\n+        Filter filterChild = new Filter(EMPTY, rel(), left);\n+        Filter filterParent = new Filter(EMPTY, filterChild, right);\n+\n+        LogicalPlan result = new Optimizer.PushDownAndCombineFilters().apply(filterParent);\n+\n+        assertEquals(Filter.class, result.getClass());\n+        Expression condition = ((Filter) result).condition();\n+        assertEquals(And.class, condition.getClass());\n+        And and = (And) condition;\n+        assertEquals(left, and.left());\n+        assertEquals(right, and.right());\n+    }\n+\n+    public void testPushDownFilterUnary() {\n+        Expression left = new IsNull(EMPTY, Literal.TRUE);\n+\n+        OrderBy order = new OrderBy(EMPTY, rel(), emptyList());\n+        Filter filter = new Filter(EMPTY, order, left);\n+\n+        LogicalPlan result = new Optimizer.PushDownAndCombineFilters().apply(filter);\n+\n+        assertEquals(OrderBy.class, result.getClass());\n+        OrderBy o = (OrderBy) result;\n+        assertEquals(Filter.class, o.child().getClass());\n+        Filter f = (Filter) o.child();\n+\n+        assertEquals(rel(), f.child());\n+        assertEquals(filter.condition(), f.condition());\n+    }\n+\n+    public void testPushDownFilterDoesNotApplyOnNonUnary() {\n+        Expression left = new IsNull(EMPTY, Literal.TRUE);\n+\n+        KeyedFilter rule1 = keyedFilter(new LocalRelation(EMPTY, emptyList()));\n+        KeyedFilter rule2 = keyedFilter(new Filter(EMPTY, rel(), new IsNull(EMPTY, Literal.TRUE)));\n+\n+        Sequence s = sequence(rule1, rule2);\n+        Filter filter = new Filter(EMPTY, s, left);\n+\n+        LogicalPlan result = new Optimizer.PushDownAndCombineFilters().apply(filter);\n+\n+        assertEquals(Filter.class, result.getClass());\n+        Filter f = (Filter) result;\n+        assertEquals(s, f.child());\n+    }\n+\n+    public void testKeySameConstraints() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cd60368328f15ff7639163f9bfeb4fa22e6054c"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc2NDgxMg==", "bodyText": "I think this test method is not gonna be picked up. You probably meant testSameTwoKeysConstraints", "url": "https://github.com/elastic/elasticsearch/pull/62073#discussion_r484764812", "createdAt": "2020-09-08T09:03:12Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -300,4 +330,176 @@ private LogicalPlan defaultPipes(LogicalPlan plan) {\n         assertTrue(plan instanceof OrderBy);\n         return ((OrderBy) plan).child();\n     }\n+\n+    public void testCombineFilters() {\n+        Expression left = new IsNull(EMPTY, Literal.TRUE);\n+        Expression right = new Equals(EMPTY, timestamp(), Literal.TRUE);\n+\n+        Filter filterChild = new Filter(EMPTY, rel(), left);\n+        Filter filterParent = new Filter(EMPTY, filterChild, right);\n+\n+        LogicalPlan result = new Optimizer.PushDownAndCombineFilters().apply(filterParent);\n+\n+        assertEquals(Filter.class, result.getClass());\n+        Expression condition = ((Filter) result).condition();\n+        assertEquals(And.class, condition.getClass());\n+        And and = (And) condition;\n+        assertEquals(left, and.left());\n+        assertEquals(right, and.right());\n+    }\n+\n+    public void testPushDownFilterUnary() {\n+        Expression left = new IsNull(EMPTY, Literal.TRUE);\n+\n+        OrderBy order = new OrderBy(EMPTY, rel(), emptyList());\n+        Filter filter = new Filter(EMPTY, order, left);\n+\n+        LogicalPlan result = new Optimizer.PushDownAndCombineFilters().apply(filter);\n+\n+        assertEquals(OrderBy.class, result.getClass());\n+        OrderBy o = (OrderBy) result;\n+        assertEquals(Filter.class, o.child().getClass());\n+        Filter f = (Filter) o.child();\n+\n+        assertEquals(rel(), f.child());\n+        assertEquals(filter.condition(), f.condition());\n+    }\n+\n+    public void testPushDownFilterDoesNotApplyOnNonUnary() {\n+        Expression left = new IsNull(EMPTY, Literal.TRUE);\n+\n+        KeyedFilter rule1 = keyedFilter(new LocalRelation(EMPTY, emptyList()));\n+        KeyedFilter rule2 = keyedFilter(new Filter(EMPTY, rel(), new IsNull(EMPTY, Literal.TRUE)));\n+\n+        Sequence s = sequence(rule1, rule2);\n+        Filter filter = new Filter(EMPTY, s, left);\n+\n+        LogicalPlan result = new Optimizer.PushDownAndCombineFilters().apply(filter);\n+\n+        assertEquals(Filter.class, result.getClass());\n+        Filter f = (Filter) result;\n+        assertEquals(s, f.child());\n+    }\n+\n+    public void testKeySameConstraints() {\n+        ZoneId zd = randomZone();\n+        Attribute a = key(\"a\");\n+\n+        Expression keyCondition = new GreaterThan(EMPTY, a, new Literal(EMPTY, 1, DataTypes.INTEGER), zd);\n+        Expression filter = new Equals(EMPTY, timestamp(), Literal.TRUE);\n+\n+        KeyedFilter rule1 = keyedFilter(new Filter(EMPTY, rel(), keyCondition), a);\n+        KeyedFilter rule2 = keyedFilter(new Filter(EMPTY, rel(), filter), a);\n+\n+        Sequence s = sequence(rule1, rule2);\n+\n+        LogicalPlan result = new Optimizer.PropagateJoinKeyConstraints().apply(s);\n+\n+        assertEquals(Sequence.class, result.getClass());\n+        Sequence seq = (Sequence) result;\n+\n+        List<KeyedFilter> queries = seq.queries();\n+        assertEquals(rule1, queries.get(0));\n+        KeyedFilter query2 = queries.get(1);\n+        assertEquals(keyCondition, filterCondition(query2.child()));\n+        assertEquals(filter, filterCondition(query2.child().children().get(0)));\n+    }\n+\n+    public void sameSameTwoKeysConstraints() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cd60368328f15ff7639163f9bfeb4fa22e6054c"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44142c720aab2c46bd8cb42fdca2f64e72bbd9fc", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/44142c720aab2c46bd8cb42fdca2f64e72bbd9fc", "committedDate": "2020-09-08T11:23:17Z", "message": "Add more tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4737, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}