{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjQxOTU5", "number": 54726, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1Nzo1NFrODwAXiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxMjo1MFrODykzeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY0MjY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1Nzo1NFrOGCwjcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTowMzoyNlrOGCzfhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NTg0MQ==", "bodyText": "I'd like to see the write index derived from the data stream's generation so that this API can't be used to set the write index to something other than the current generation backing index. That's for a follow-up PR, though.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405545841", "createdAt": "2020-04-08T13:57:54Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -257,4 +257,42 @@ private boolean isNonEmpty(List<IndexMetadata> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {\n+\n+        private final org.elasticsearch.cluster.metadata.DataStream dataStream;\n+        private final List<IndexMetadata> dataStreamIndices;\n+        private final IndexMetadata writeIndex;\n+\n+        public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n+                          List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n+            this.dataStream = dataStream;\n+            this.dataStreamIndices = dataStreamIndices;\n+            this.writeIndex = writeIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5Mzk5MA==", "bodyText": "Yes, agreed. If that pr lands before this pr gets merged then I will adjust this pr and otherwise the pr that adds the generation should also adjust the code here.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405593990", "createdAt": "2020-04-08T15:03:26Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -257,4 +257,42 @@ private boolean isNonEmpty(List<IndexMetadata> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {\n+\n+        private final org.elasticsearch.cluster.metadata.DataStream dataStream;\n+        private final List<IndexMetadata> dataStreamIndices;\n+        private final IndexMetadata writeIndex;\n+\n+        public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n+                          List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n+            this.dataStream = dataStream;\n+            this.dataStreamIndices = dataStreamIndices;\n+            this.writeIndex = writeIndex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NTg0MQ=="}, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY3ODA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowNTo0MFrOGCw5pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowNTo0MFrOGCw5pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTUyNg==", "bodyText": "Should the error message be updated to suggest specifying either concrete indices or aliases since either are legally resolvable if only IGNORE_DATA_STREAMS is specified?", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405551526", "createdAt": "2020-04-08T14:05:40Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -260,6 +272,11 @@ private static IllegalArgumentException aliasesNotSupportedException(String expr\n                 \"alias, specify the corresponding concrete indices instead.\");\n     }\n \n+    private static IllegalArgumentException dataStreamsNotSupportedException(String expression) {\n+        return new IllegalArgumentException(\"The provided expression [\" + expression + \"] matches a \" +\n+            \"data stream, specify the corresponding concrete indices instead.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY4ODM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowODowNVrOGCxAJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTowNjoxN1rOGCznrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzE4OA==", "bodyText": "It looks like there's a lot of places in this class where aliasOrIndex could be changed to indexAbstraction. Maybe something for a follow-up PR.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405553188", "createdAt": "2020-04-08T14:08:05Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -766,9 +785,20 @@ private static void validateAliasOrIndex(String expression) {\n \n         private static boolean aliasOrIndexExists(IndicesOptions options, Metadata metadata, String expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NjA3Ng==", "bodyText": "Yes, we should have a follow up pr that replaces aliasOrIndex with indexAbstraction.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405596076", "createdAt": "2020-04-08T15:06:17Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -766,9 +785,20 @@ private static void validateAliasOrIndex(String expression) {\n \n         private static boolean aliasOrIndexExists(IndicesOptions options, Metadata metadata, String expression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzE4OA=="}, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjk3MTAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMDowNFrOGCzyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMDowNFrOGCzyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5ODc5Nw==", "bodyText": "Maybe add\nassert dataStreamIndices.contains(writeIndex)", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405598797", "createdAt": "2020-04-08T15:10:04Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -257,4 +257,42 @@ private boolean isNonEmpty(List<IndexMetadata> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {\n+\n+        private final org.elasticsearch.cluster.metadata.DataStream dataStream;\n+        private final List<IndexMetadata> dataStreamIndices;\n+        private final IndexMetadata writeIndex;\n+\n+        public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n+                          List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n+            this.dataStream = dataStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjk5MzgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxNDo1NFrOGC0ARg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxNDo1NFrOGC0ARg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwMjM3NA==", "bodyText": "Let us wrap in immutableList.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405602374", "createdAt": "2020-04-08T15:14:54Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -257,4 +257,42 @@ private boolean isNonEmpty(List<IndexMetadata> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {\n+\n+        private final org.elasticsearch.cluster.metadata.DataStream dataStream;\n+        private final List<IndexMetadata> dataStreamIndices;\n+        private final IndexMetadata writeIndex;\n+\n+        public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n+                          List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n+            this.dataStream = dataStream;\n+            this.dataStreamIndices = dataStreamIndices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzAwNzExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxNzo1NFrOGC0IzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxNzo1NFrOGC0IzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNDU1Nw==", "bodyText": "nit: it seems a bit odd that we here do alias, then data-stream and in the next block we do data-stream, then alias. Just for readability it would be nice to align the two.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405604557", "createdAt": "2020-04-08T15:17:54Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -200,9 +201,20 @@\n                 } else {\n                     continue;\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.getOptions().ignoreDataStreams()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzAyNzAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToyMjowNFrOGC0VFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToyMjowNFrOGC0VFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNzcwMg==", "bodyText": "Line 234 below needs to pick the name from the index abstraction rather than say \"Alias\". (throw new IllegalArgumentException(\"Alias...)", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405607702", "createdAt": "2020-04-08T15:22:04Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -200,9 +201,20 @@\n                 } else {\n                     continue;\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.getOptions().ignoreDataStreams()) {\n+                if (failNoIndices) {\n+                    throw dataStreamsNotSupportedException(expression);\n+                } else {\n+                    continue;\n+                }\n             }\n \n-            if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n+            if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n+                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n+                if (addIndex(writeIndex, context)) {\n+                    concreteIndices.add(writeIndex.getIndex());\n+                }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n                 IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n                 if (writeIndex == null) {\n                     throw new IllegalArgumentException(\"no write index is defined for alias [\" + indexAbstraction.getName() + \"].\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA3NTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozMjoxMlrOGC0zHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo0NDo1OVrOGDNQ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTM5MA==", "bodyText": "Let us also assert existing != null to ensure tests fail.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405615390", "createdAt": "2020-04-08T15:32:12Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1369,6 +1369,25 @@ public Metadata build() {\n                 }\n             }\n \n+            DataStreamMetadata dataStreamMetadata = (DataStreamMetadata) this.customs.get(DataStreamMetadata.TYPE);\n+            if (dataStreamMetadata != null) {\n+                for (Map.Entry<String, DataStream> entry : dataStreamMetadata.dataStreams().entrySet()) {\n+                    DataStream dataStream = entry.getValue();\n+                    List<IndexMetadata> backingIndices = dataStream.getIndices().stream()\n+                        .map(index -> indices.get(index.getName()))\n+                        .collect(Collectors.toList());\n+                    assert backingIndices.isEmpty() == false;\n+\n+                    IndexMetadata writeIndex = backingIndices.get(backingIndices.size() - 1);\n+                    IndexAbstraction existing = aliasAndIndexLookup.put(dataStream.getName(),\n+                        new IndexAbstraction.DataStream(dataStream, backingIndices, writeIndex));\n+                    if (existing != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNjIyMQ==", "bodyText": "The line below throws an exception, so tests do fail if existing is not null?", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r406016221", "createdAt": "2020-04-09T07:44:59Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1369,6 +1369,25 @@ public Metadata build() {\n                 }\n             }\n \n+            DataStreamMetadata dataStreamMetadata = (DataStreamMetadata) this.customs.get(DataStreamMetadata.TYPE);\n+            if (dataStreamMetadata != null) {\n+                for (Map.Entry<String, DataStream> entry : dataStreamMetadata.dataStreams().entrySet()) {\n+                    DataStream dataStream = entry.getValue();\n+                    List<IndexMetadata> backingIndices = dataStream.getIndices().stream()\n+                        .map(index -> indices.get(index.getName()))\n+                        .collect(Collectors.toList());\n+                    assert backingIndices.isEmpty() == false;\n+\n+                    IndexMetadata writeIndex = backingIndices.get(backingIndices.size() - 1);\n+                    IndexAbstraction existing = aliasAndIndexLookup.put(dataStream.getName(),\n+                        new IndexAbstraction.DataStream(dataStream, backingIndices, writeIndex));\n+                    if (existing != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTM5MA=="}, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA4NTU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNDoyMVrOGC05YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNDoyMVrOGC05YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNjk5Mw==", "bodyText": "I think we should also add assert backingIndices.contains(null) == -1 to ensure that the indices.get lookup above found entries in all cases.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405616993", "createdAt": "2020-04-08T15:34:21Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1369,6 +1369,25 @@ public Metadata build() {\n                 }\n             }\n \n+            DataStreamMetadata dataStreamMetadata = (DataStreamMetadata) this.customs.get(DataStreamMetadata.TYPE);\n+            if (dataStreamMetadata != null) {\n+                for (Map.Entry<String, DataStream> entry : dataStreamMetadata.dataStreams().entrySet()) {\n+                    DataStream dataStream = entry.getValue();\n+                    List<IndexMetadata> backingIndices = dataStream.getIndices().stream()\n+                        .map(index -> indices.get(index.getName()))\n+                        .collect(Collectors.toList());\n+                    assert backingIndices.isEmpty() == false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzExNjE2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo0MDo1NlrOGC1MNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo0MDo1NlrOGC1MNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMTgxMg==", "bodyText": "Should this condition not match the one above? i.e., use <=?\nI would prefer using 0..n-1 instead like we do in most places, but not important.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405621812", "createdAt": "2020-04-08T15:40:56Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java", "diffHunk": "@@ -978,6 +995,37 @@ public void testBuilderForDataStreamWithRandomlyNumberedBackingIndices() {\n         assertThat(metadata.dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n     }\n \n+    public void testBuildIndicesLookupForDataStreams() {\n+        Metadata.Builder b = Metadata.builder();\n+        int numDataStreams = randomIntBetween(2, 8);\n+        for (int i = 1; i <= numDataStreams; i++) {\n+            String name = \"data-stream-\" + i;\n+            int numBackingIndices = randomIntBetween(1, 4);\n+            List<Index> indices = new ArrayList<>(numBackingIndices);\n+            for (int j = 1; j <= numBackingIndices; j++) {\n+                IndexMetadata idx = createBackingIndex(name, j).build();\n+                indices.add(idx.getIndex());\n+                b.put(idx, true);\n+            }\n+            b.put(new DataStream(name, \"ts\", indices));\n+        }\n+\n+        Metadata metadata = b.build();\n+        assertThat(metadata.dataStreams().size(), equalTo(numDataStreams));\n+        for (int i = 1; i < numDataStreams; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzE3MzgzOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/TestCluster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo1Mzo0NVrOGC1wkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo1Mzo0NVrOGC1wkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMTEyMA==", "bodyText": "I think we should not allow deleting the indices of a data stream through a data stream name?", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405631120", "createdAt": "2020-04-08T15:53:45Z", "author": {"login": "henningandersen"}, "path": "test/framework/src/main/java/org/elasticsearch/test/TestCluster.java", "diffHunk": "@@ -137,7 +137,7 @@ public void wipeIndices(String... indices) {\n             try {\n                 // include wiping hidden indices!\n                 assertAcked(client().admin().indices().prepareDelete(indices)\n-                    .setIndicesOptions(IndicesOptions.fromOptions(false, true, true, true, true, false, false, true, false)));\n+                    .setIndicesOptions(IndicesOptions.fromOptions(false, true, true, true, true, false, false, true, false, true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQxNzM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMDo0N1rOGFxIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjowNDoxMVrOGGsgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTAwOQ==", "bodyText": "I think this would be better handled in the IndexNameExpressionResolver.Context and thus by adding new methods to IndexNameExpressionResolver (similar to concreteWriteIndex). It looks like only search, refresh (and index) really need to resolve data streams? Indexing data can be resolved in concreteWriteIndex. For search some of the search specific methods are already there (resolveSearchRouting).\nThe benefits of this is that we avoid the additional IndicesOptions instances, it becomes more clear when data streams are resolved to indices and it more clearly separates the responsibility of IndicesOptions (which is sort of the user specified options) vs. the specific action's needs.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408701009", "createdAt": "2020-04-15T09:20:47Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -103,7 +102,8 @@ public static XContentBuilder toXContent(EnumSet<WildcardStates> states, XConten\n         ALLOW_NO_INDICES,\n         FORBID_ALIASES_TO_MULTIPLE_INDICES,\n         FORBID_CLOSED_INDICES,\n-        IGNORE_THROTTLED;\n+        IGNORE_THROTTLED,\n+        INCLUDE_DATA_STREAMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MDgyMw==", "bodyText": "It looks like only search, refresh (and index) really need to resolve data streams?\n\nI think more apis will need to be able to resolve data streams. I just enabled the ability for the APIs you mentioned in order to make integration tests pass. For example I think that field capability, get field mapping and eql APIs will need to resolve data streams as well.\nAlso I suspect that get mapping and settings apis will need to be able to resolve data streams too (if a data stream is used then all mappings/settings for all backing indices are returned.) When talking to the Fleet team, they would like to the put mapping/settings apis to understand data streams as well (in this case a data stream should resolve to the latest index, otherwise they will need to figure out what the current write index is and do the required update). This was just part of casual conversation, so no decisions made yet.\nI'm pretty sure that more apis will need to support data streams, so\nI prefer if we keep the current approach that enables the use data streams via an Indices.Option enum instance. Also the way I look at data streams is that it is a way to group indices and from that perspective exposing the ability to use data streams in apis as an indices option makes sense. I don't think we should ever hide the fact that a data stream is backed by indices.\nOnly part of indices option is user specified. The include data streams indices option is not a user specified option as apposed to example allow_no_indices option. Each api/action can opt-in whether data streams should be resolvable. I think adding a method to IndexNameExpressionResolver will complicate the code. Now most apis use the same method for resolving user specified indices expressions and for all apis that need to be able support data streams this needs to be changed. Also apis tend to reuse the same base class.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408790823", "createdAt": "2020-04-15T12:06:06Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -103,7 +102,8 @@ public static XContentBuilder toXContent(EnumSet<WildcardStates> states, XConten\n         ALLOW_NO_INDICES,\n         FORBID_ALIASES_TO_MULTIPLE_INDICES,\n         FORBID_CLOSED_INDICES,\n-        IGNORE_THROTTLED;\n+        IGNORE_THROTTLED,\n+        INCLUDE_DATA_STREAMS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTAwOQ=="}, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3Mzc0OQ==", "bodyText": "We spoke about this on another channel and came to the conclusion to keep this as is. There is agreement that a split of the user level and the action-specific options would be desirable, but we postpone that work to a separate effort.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409673749", "createdAt": "2020-04-16T16:04:11Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -103,7 +102,8 @@ public static XContentBuilder toXContent(EnumSet<WildcardStates> states, XConten\n         ALLOW_NO_INDICES,\n         FORBID_ALIASES_TO_MULTIPLE_INDICES,\n         FORBID_CLOSED_INDICES,\n-        IGNORE_THROTTLED;\n+        IGNORE_THROTTLED,\n+        INCLUDE_DATA_STREAMS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTAwOQ=="}, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQyMDA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMTozM1rOGFxKBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMTozM1rOGFxKBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTQ0NA==", "bodyText": "If we stick to this approach, this should also be renamed?", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408701444", "createdAt": "2020-04-15T09:21:33Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -133,12 +133,19 @@ public static XContentBuilder toXContent(EnumSet<WildcardStates> states, XConten\n         new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES, Option.FORBID_CLOSED_INDICES),\n             EnumSet.of(WildcardStates.OPEN, WildcardStates.HIDDEN));\n     public static final IndicesOptions STRICT_EXPAND_OPEN_FORBID_CLOSED_IGNORE_THROTTLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQ2MzIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTozMjo1MVrOGFxklA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo0MToxNFrOGGYgSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODI0NA==", "bodyText": "I think reusing this flag for data streams is not ideal. I wonder if we should instead flat out fail, if an expression matches a data-stream and we are not in one of the cases where data-streams are resolved.\nI think I prefer this over skipping data-streams. Index, alias and data-stream are in the same namespace. I think it will be confusing to have some index admin operations that match indices and aliases, but ignores data-streams. Suppose you have:\nxalias -> yindex\nxindex\nxdatastream\nand you do POST /x*/_close, I think it would close yindex, xindex, but silently ignore xdatastream. Obviously, users should design their namings to avoid such scenarios, but I think a better default would be to fail, if an operation unexpectedly resolves to a data-stream.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408708244", "createdAt": "2020-04-15T09:32:51Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -212,15 +220,21 @@\n                 if (addIndex(writeIndex, context)) {\n                     concreteIndices.add(writeIndex.getIndex());\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n+                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n+                if (addIndex(writeIndex, context)) {\n+                    concreteIndices.add(writeIndex.getIndex());\n+                }\n             } else {\n                 if (indexAbstraction.getIndices().size() > 1 && !options.allowAliasesToMultipleIndices()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MTUwMA==", "bodyText": "Whether an operation or api is expected to expand a wildcard expression to a data stream that depends on whether that api is setup to resolve data streams. So in this case that would mean that ignoring data streams is expected behaviour. This is at least my expectation.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408791500", "createdAt": "2020-04-15T12:07:29Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -212,15 +220,21 @@\n                 if (addIndex(writeIndex, context)) {\n                     concreteIndices.add(writeIndex.getIndex());\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n+                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n+                if (addIndex(writeIndex, context)) {\n+                    concreteIndices.add(writeIndex.getIndex());\n+                }\n             } else {\n                 if (indexAbstraction.getIndices().size() > 1 && !options.allowAliasesToMultipleIndices()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODI0NA=="}, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjEyMg==", "bodyText": "Henning and I chatted about this and we both now agree that the request should fail if data streams are not resolvable both the expression matches with one or more data streams. It makes it clear that an api doesn't support data streams (just like if a user specified a concrete data stream name) and this makes it easier to add data stream support if an api should support data streams.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409346122", "createdAt": "2020-04-16T07:41:14Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -212,15 +220,21 @@\n                 if (addIndex(writeIndex, context)) {\n                     concreteIndices.add(writeIndex.getIndex());\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n+                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n+                if (addIndex(writeIndex, context)) {\n+                    concreteIndices.add(writeIndex.getIndex());\n+                }\n             } else {\n                 if (indexAbstraction.getIndices().size() > 1 && !options.allowAliasesToMultipleIndices()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODI0NA=="}, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzc2ODUyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDo1OToxNVrOGF0gnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDo1OToxNVrOGF0gnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NjM4MQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testDataSteams() {\n          \n          \n            \n                public void testDataStreams() {", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408756381", "createdAt": "2020-04-15T10:59:15Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "diffHunk": "@@ -1759,4 +1760,158 @@ public void testIgnoreThrottled() {\n             assertEquals(\"test-index\", indices[2].getName());\n         }\n     }\n+\n+    public void testDataSteams() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzU4Mzk0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxMjo1MFrOGGs21Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo1Nzo0N1rOGGupUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3OTU3Mw==", "bodyText": "I think we should put in a check into CreateDataStreamAction to not allow creating data streams before all nodes are on the target release (7.8)? To ensure that there are no surprises in a mixed cluster.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409679573", "createdAt": "2020-04-16T16:12:50Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -227,8 +237,21 @@ public boolean ignoreThrottled() {\n         return EnumSet.copyOf(expandWildcards);\n     }\n \n+    /**\n+     * @return Whether to include data streams when resolving index expressions to concrete indices.\n+     */\n+    public boolean includeDataStreams() {\n+        return options.contains(Option.INCLUDE_DATA_STREAMS);\n+    }\n+\n     public void writeIndicesOptions(StreamOutput out) throws IOException {\n-        out.writeEnumSet(options);\n+        if (out.getVersion().before(Version.V_8_0_0) && options.contains(Option.INCLUDE_DATA_STREAMS)) {\n+            EnumSet<Option> copy = EnumSet.copyOf(options);\n+            copy.remove(Option.INCLUDE_DATA_STREAMS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254490084fd5dd38db0335a8aa5feeee45834f6d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwODg4MA==", "bodyText": "\ud83d\udc4d I will make this change in a followup change.", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409708880", "createdAt": "2020-04-16T16:57:47Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -227,8 +237,21 @@ public boolean ignoreThrottled() {\n         return EnumSet.copyOf(expandWildcards);\n     }\n \n+    /**\n+     * @return Whether to include data streams when resolving index expressions to concrete indices.\n+     */\n+    public boolean includeDataStreams() {\n+        return options.contains(Option.INCLUDE_DATA_STREAMS);\n+    }\n+\n     public void writeIndicesOptions(StreamOutput out) throws IOException {\n-        out.writeEnumSet(options);\n+        if (out.getVersion().before(Version.V_8_0_0) && options.contains(Option.INCLUDE_DATA_STREAMS)) {\n+            EnumSet<Option> copy = EnumSet.copyOf(options);\n+            copy.remove(Option.INCLUDE_DATA_STREAMS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3OTU3Mw=="}, "originalCommit": {"oid": "254490084fd5dd38db0335a8aa5feeee45834f6d"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1315, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}