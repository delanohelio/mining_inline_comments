{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzQzMDYx", "number": 56841, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMDozN1rOD9jnfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNjoyMlrOEKOmfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODczMjc5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMDozN1rOGXH4NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxMTozN1rOGgwlFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5OTUwOQ==", "bodyText": "FWIW, there's an open issue for this. Perhaps we can link it here.\n#47804", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426899509", "createdAt": "2020-05-18T21:20:37Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -36,6 +36,8 @@\n     private static final String TESTS_CLUSTER = \"tests.cluster\";\n     private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n \n+    // TODO: refactor this so that work is not done in constructor and find usages and register them, not create them\n+    // See: https://docs.gradle.org/current/userguide/task_configuration_avoidance.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwMzU0Mg==", "bodyText": "done.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437003542", "createdAt": "2020-06-08T21:11:37Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -36,6 +36,8 @@\n     private static final String TESTS_CLUSTER = \"tests.cluster\";\n     private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n \n+    // TODO: refactor this so that work is not done in constructor and find usages and register them, not create them\n+    // See: https://docs.gradle.org/current/userguide/task_configuration_avoidance.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5OTUwOQ=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODczNTQ0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMTozOFrOGXH54Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxNjoyNFrOGgwuvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5OTkzNw==", "bodyText": "We should use orElseThrow() here and supply an exception with an appropriate message.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426899937", "createdAt": "2020-05-18T21:21:38Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -109,7 +111,8 @@ public FileTree getInputDir() {\n \n     @OutputDirectory\n     public File getOutputDir() {\n-        return new File(getTestSourceSet().getOutput().getResourcesDir(), REST_API_PREFIX);\n+        assert Util.getTestSourceSet(getProject()).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNjAxMg==", "bodyText": "I added a message to the assert\nEDIT: after testing .. the assert did not fire as expected, so removed it in favor of orElseThrow", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437006012", "createdAt": "2020-06-08T21:16:24Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -109,7 +111,8 @@ public FileTree getInputDir() {\n \n     @OutputDirectory\n     public File getOutputDir() {\n-        return new File(getTestSourceSet().getOutput().getResourcesDir(), REST_API_PREFIX);\n+        assert Util.getTestSourceSet(getProject()).isPresent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5OTkzNw=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc0MzcwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/Util.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyNDozOFrOGXH_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxODo1MlrOGgwzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMTI2MQ==", "bodyText": "As mentioned in my comment, I don't think we need to support this case. We should require that all YAML tests live in the appropriate source set. This awkward conditional stuff is a great example of why.\nAlso, what happens if a project has both tests types? Which source set should this method return? As part of splitting these types of tests up there is no longer a canonical \"test source set\", as any given project might (and likely will) have several.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426901261", "createdAt": "2020-05-18T21:24:38Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/Util.java", "diffHunk": "@@ -129,15 +129,39 @@ public static FileTree getJavaTestAndMainSourceResources(Project project, Action\n     }\n \n     /**\n+     * Returns the source set for either the YamlTests or the standard test source set. Preference goes to YamlTest source set if it exists.\n+     *\n      * @param project The project to look for test Java resources.\n      * @return An Optional that contains the Java test SourceSet if it exists.\n      */\n+    public static Optional<SourceSet> getTestSourceSet(Project project) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNDMyNw==", "bodyText": "Discussed in person. Since this is used primarily for copy around of REST resources, I will remove this method in favor of having the REST resources be explicit about which source set they will use dependent on the application (or not) of the new YAML test task.\nAlso, this PR updated to use this with test conventions task, but that isn't needed for custom test source sets.\nThere will still be a todo to circle back around and remove the conditional aspect of which test source set is used for copying around REST resources, but that can only be done after all existing usages of the java test source set have been addressed. This includes ensuring that the clients teams won't break on moving tests around, as well all internal usages where YAML tests can live in the java test source set. While plugin developers may be non-passively impacted by requiring the new YAML plugin, the migration path is pretty simple and would only impact those that leverage YAML testing (suspected to be very few).", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r427524327", "createdAt": "2020-05-19T18:48:11Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/Util.java", "diffHunk": "@@ -129,15 +129,39 @@ public static FileTree getJavaTestAndMainSourceResources(Project project, Action\n     }\n \n     /**\n+     * Returns the source set for either the YamlTests or the standard test source set. Preference goes to YamlTest source set if it exists.\n+     *\n      * @param project The project to look for test Java resources.\n      * @return An Optional that contains the Java test SourceSet if it exists.\n      */\n+    public static Optional<SourceSet> getTestSourceSet(Project project) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMTI2MQ=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNzI2Ng==", "bodyText": "done ... will add summary to main comment.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437007266", "createdAt": "2020-06-08T21:18:52Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/Util.java", "diffHunk": "@@ -129,15 +129,39 @@ public static FileTree getJavaTestAndMainSourceResources(Project project, Action\n     }\n \n     /**\n+     * Returns the source set for either the YamlTests or the standard test source set. Preference goes to YamlTest source set if it exists.\n+     *\n      * @param project The project to look for test Java resources.\n      * @return An Optional that contains the Java test SourceSet if it exists.\n      */\n+    public static Optional<SourceSet> getTestSourceSet(Project project) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMTI2MQ=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc0ODY1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyNjoyNVrOGXICIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxNjozOVrOGgwvSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMjA0OQ==", "bodyText": "We shouldn't have to do this. Let's just apply the correct plugin here, which is going to be the ElasticsearchJavaPlugin most likely. We don't want to have users have to worry about this.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426902049", "createdAt": "2020-05-18T21:26:25Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNjE1Mw==", "bodyText": "done", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437006153", "createdAt": "2020-06-08T21:16:39Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMjA0OQ=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc2NDAwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozMTo0N1rOGXILWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxNjo1MlrOGgwvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDQxMQ==", "bodyText": "For now we need to check if BuildParams.isInternal here and use an artifact dependency if not.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426904411", "createdAt": "2020-05-18T21:31:47Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNjI3NA==", "bodyText": "done", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437006274", "createdAt": "2020-06-08T21:16:52Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDQxMQ=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc2NjA1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozMjozMlrOGXIMoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0Nzo1NlrOGXpcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDczNg==", "bodyText": "Shouldn't the PluginBuildPlugin be doing this?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426904736", "createdAt": "2020-05-18T21:32:32Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0OTM1Nw==", "bodyText": "I'm not sure I follow ?\nThis section of code is the magic that adds only the required modules/plugins to the test clusters for the OSS YAML tests. This is mostly a copy for how it currently works.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r427449357", "createdAt": "2020-05-19T16:47:56Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDczNg=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc3MTA0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozNDoyN1rOGXIP3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxNzo0MlrOGgwxXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTU2Ng==", "bodyText": "Let's remove this. I don't think it should go here, plus using findByName is going to eagerly realize the task.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426905566", "createdAt": "2020-05-18T21:34:27Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // run test tasks first if they exist since they are presumably faster and less resources intensive\n+        Task testTask = project.getTasks().findByName(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNjY4NQ==", "bodyText": "updated it to be inline with #57016", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437006685", "createdAt": "2020-06-08T21:17:42Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // run test tasks first if they exist since they are presumably faster and less resources intensive\n+        Task testTask = project.getTasks().findByName(\"test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTU2Ng=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc3MjU0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozNTowM1rOGXIQ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxODoyNlrOGgwyzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTgxMQ==", "bodyText": "What's creating the precommit task in this scenario? Is it some other plugin we're applying?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426905811", "createdAt": "2020-05-18T21:35:03Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // run test tasks first if they exist since they are presumably faster and less resources intensive\n+        Task testTask = project.getTasks().findByName(\"test\");\n+        if (testTask != null) {\n+            yamlTestTask.mustRunAfter(testTask);\n+        }\n+\n+        // validation of the rest specification is wired to precommit, so ensure that runs first\n+        yamlTestTask.mustRunAfter(project.getTasks().getByName(\"precommit\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNjU3MQ==", "bodyText": "Note #56926 will make this easier, you shouldn't have to worry about it. Currently that we already have:\nproject.getTasks().named(JavaPlugin.TEST_TASK_NAME).configure(t -> t.mustRunAfter(precommit));\n\nBut we can change that to all Test tasks.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426926571", "createdAt": "2020-05-18T22:28:55Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // run test tasks first if they exist since they are presumably faster and less resources intensive\n+        Task testTask = project.getTasks().findByName(\"test\");\n+        if (testTask != null) {\n+            yamlTestTask.mustRunAfter(testTask);\n+        }\n+\n+        // validation of the rest specification is wired to precommit, so ensure that runs first\n+        yamlTestTask.mustRunAfter(project.getTasks().getByName(\"precommit\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTgxMQ=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNzA1NQ==", "bodyText": "I removed this line since #56926 addressed all Test tasks", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437007055", "createdAt": "2020-06-08T21:18:26Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // run test tasks first if they exist since they are presumably faster and less resources intensive\n+        Task testTask = project.getTasks().findByName(\"test\");\n+        if (testTask != null) {\n+            yamlTestTask.mustRunAfter(testTask);\n+        }\n+\n+        // validation of the rest specification is wired to precommit, so ensure that runs first\n+        yamlTestTask.mustRunAfter(project.getTasks().getByName(\"precommit\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTgxMQ=="}, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzQ5NDAzOnYy", "diffSide": "RIGHT", "path": "distribution/archives/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTo1ODo0NVrOGhiPaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTozNzo1NlrOGiHMWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNzE5Mw==", "bodyText": "I just realized that moving these tests out of this project and into :rest-api-spec has the side effect of changing\nfrom: running these tests if anything changes (due to the dependsOn assemble)\nto: only running the tests if the any of the actual tests change.\nDo we want to keep the behavior of always running the core rest tests ?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437817193", "createdAt": "2020-06-10T01:58:45Z", "author": {"login": "jakelandis"}, "path": "distribution/archives/build.gradle", "diffHunk": "@@ -330,12 +330,6 @@ configure(subprojects.findAll { it.name == 'integ-test-zip' }) {\n \n   group = \"org.elasticsearch.distribution.integ-test-zip\"\n \n-  restResources {\n-    restTests {\n-      includeCore '*'\n-    }\n-  }\n-\n   integTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b11a424ccdaf0b2140702dc36598d193ba7310e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMjYxNg==", "bodyText": "nvmd, this is my mis-understanding ... the tests continue to run when a change is made since the test clusters are effectively the same as a dependency defined here.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r438422616", "createdAt": "2020-06-10T21:37:56Z", "author": {"login": "jakelandis"}, "path": "distribution/archives/build.gradle", "diffHunk": "@@ -330,12 +330,6 @@ configure(subprojects.findAll { it.name == 'integ-test-zip' }) {\n \n   group = \"org.elasticsearch.distribution.integ-test-zip\"\n \n-  restResources {\n-    restTests {\n-      includeCore '*'\n-    }\n-  }\n-\n   integTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNzE5Mw=="}, "originalCommit": {"oid": "4b11a424ccdaf0b2140702dc36598d193ba7310e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU2MDY1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/RestResourcesExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyNDoxNFrOGrJIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo0MDowM1rOGrTCtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTU4OA==", "bodyText": "Do we have to define this here and in each of the task implementations? Can we have this default just defined on place?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447891588", "createdAt": "2020-06-30T18:24:14Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/RestResourcesExtension.java", "diffHunk": "@@ -32,6 +32,7 @@\n \n     final RestResourcesSpec restApi;\n     final RestResourcesSpec restTests;\n+    private String sourceSetName = \"yamlRestTest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1Mzk0MA==", "bodyText": "I ended up removing this entirely from the rest resource extension. The which source set to use is now decided by if the YamlRestTestPlugin has been applied. 6289b00 (#56841)", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448053940", "createdAt": "2020-07-01T00:40:03Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/RestResourcesExtension.java", "diffHunk": "@@ -32,6 +32,7 @@\n \n     final RestResourcesSpec restApi;\n     final RestResourcesSpec restTests;\n+    private String sourceSetName = \"yamlRestTest\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTU4OA=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU4MDczOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyOToxM1rOGrJUeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo0MDo1MlrOGrTDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NDY0OA==", "bodyText": "The compile configuration is deprecated, please use \"implementation\" instead. Also, no need to construct the configuration name, you can request it via SourceSet.getImplementationConfigurationName().", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447894648", "createdAt": "2020-06-30T18:29:13Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1NDE4OA==", "bodyText": "done 6289b00 (#56841) and 02afa30 (#56841)", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448054188", "createdAt": "2020-07-01T00:40:52Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NDY0OA=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU4NDYwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozMDoxOVrOGrJW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo0MTozMVrOGrTERw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NTI3Mw==", "bodyText": "We should use RestIntegTestTask.runner() method to configure the test runner task rather than fetch it by name.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447895273", "createdAt": "2020-06-30T18:30:19Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1NDM0Mw==", "bodyText": "done 6289b00 (#56841) (had to add a getter with @Internal)", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448054343", "createdAt": "2020-07-01T00:41:31Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NTI3Mw=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU5Mzg1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozMzoxOFrOGrJcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo0Mjo0NVrOGrTFog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5Njc2NQ==", "bodyText": "We should key this off the application of PluginBuildPlugin, not by a particular task. For example.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447896765", "createdAt": "2020-06-30T18:33:18Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDQ5NA==", "bodyText": "Unfortunately, PluginBuildPlugin is in groovy, and this is in Java which can not reference the groovy side of things.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447974494", "createdAt": "2020-06-30T20:57:38Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5Njc2NQ=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NjYzNA==", "bodyText": "No worries, we can do the same by referencing it by id.\nproject.getPluginManager().withPlugin(\"elasticsearch.esplugin\", plugin -> {\n    // do stuff\n});", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447986634", "createdAt": "2020-06-30T21:21:47Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5Njc2NQ=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1NDY5MA==", "bodyText": "done 02afa30 (#56841) , thanks even think about using the ID.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448054690", "createdAt": "2020-07-01T00:42:45Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5Njc2NQ=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU5NTg0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozMzo1N1rOGrJeCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo0MzowMFrOGrTF3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzA5OQ==", "bodyText": "Can we move this up where we configure other aspects of this task?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447897099", "createdAt": "2020-06-30T18:33:57Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlRestTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlRestTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // make the new test run after unit tests\n+        yamlRestTestTask.mustRunAfter(project.getTasks().named(\"test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1NDc0OA==", "bodyText": "done 6289b00 (#56841)", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448054748", "createdAt": "2020-07-01T00:43:00Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlRestTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlRestTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // make the new test run after unit tests\n+        yamlRestTestTask.mustRunAfter(project.getTasks().named(\"test\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzA5OQ=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTYwNDQ3OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/build.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNjoyMlrOGrJjUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozNjo0OVrOGrtXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODQ0OQ==", "bodyText": "perhaps to make the migration less cumbersome we should default the rest resources plugin to continue to use the test source set, and only set it to yamlRestTest when the yaml rest test plugin is applied to a project.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447898449", "createdAt": "2020-06-30T18:36:22Z", "author": {"login": "mark-vieira"}, "path": "client/rest-high-level/build.gradle", "diffHunk": "@@ -30,6 +30,7 @@ group = 'org.elasticsearch.client'\n archivesBaseName = 'elasticsearch-rest-high-level-client'\n \n restResources {\n+  sourceSetName 'test'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1NTk2Mw==", "bodyText": "indeed.  I like this better. 6289b00 (#56841)\nI had to do a little bit of gymnastics to ensure that configuration that uses source set name is indeed lazily evaluated : 6289b00 (#56841) , the dependency from within the .create of the test task was causing the .register of the copy task to also eagerly evaluate which caused an incorrect source set name since we now set the source set name when the YamlRestTestPlugin is applied.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448055963", "createdAt": "2020-07-01T00:47:43Z", "author": {"login": "jakelandis"}, "path": "client/rest-high-level/build.gradle", "diffHunk": "@@ -30,6 +30,7 @@ group = 'org.elasticsearch.client'\n archivesBaseName = 'elasticsearch-rest-high-level-client'\n \n restResources {\n+  sourceSetName 'test'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODQ0OQ=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MDI5OQ==", "bodyText": "I don't see why these gymnastics are necessary. We have the resources plugin define a default value and we override it in the YamlRestTestPlugin.\nAll the stuff in  project.getPlugins().withType(YamlRestTestPlugin.class) should just go in YamlRestTestPlugin itself. There's no need to use afterEvaluate there either. We don't have to \"wait\" for any other configuration since the yaml plugin applies the rest resources plugin itself.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448070299", "createdAt": "2020-07-01T01:45:42Z", "author": {"login": "mark-vieira"}, "path": "client/rest-high-level/build.gradle", "diffHunk": "@@ -30,6 +30,7 @@ group = 'org.elasticsearch.client'\n archivesBaseName = 'elasticsearch-rest-high-level-client'\n \n restResources {\n+  sourceSetName 'test'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODQ0OQ=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4NTI2NA==", "bodyText": "thanks @mark-vieira I removed the gymnastics as described. However, i did need to leave in the last afterEvalute else we have an ordering requirement between the application of the Java plugin and the RestResources plugin (due to the need to optionally create a dependency from the processTestResources)\n22c55da (#56841)", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r448485264", "createdAt": "2020-07-01T16:36:49Z", "author": {"login": "jakelandis"}, "path": "client/rest-high-level/build.gradle", "diffHunk": "@@ -30,6 +30,7 @@ group = 'org.elasticsearch.client'\n archivesBaseName = 'elasticsearch-rest-high-level-client'\n \n restResources {\n+  sourceSetName 'test'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODQ0OQ=="}, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 308, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}