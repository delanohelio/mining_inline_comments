{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTkyNDcx", "number": 56289, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1Nzo1NlrOD6Mlxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowMDozOFrOD6Mo-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzUwMjc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1Nzo1NlrOGR5SVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1MTo0NVrOGR_j8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzU1OA==", "bodyText": "Not sure EOFException is right here, maybe an IAE would be appropriate. I think it'd be good to assert that this doesn't happen too.", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417558", "createdAt": "2020-05-07T10:57:56Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMDM3MQ==", "bodyText": "Right, that's a bad copy paste.", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421520371", "createdAt": "2020-05-07T13:51:45Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzU1OA=="}, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzUwMzc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1ODoxNFrOGR5S-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1MTo1NFrOGR_kdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzcyMQ==", "bodyText": "Can we assert that this is not called as well?", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417721", "createdAt": "2020-05-07T10:58:14Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMDUwMg==", "bodyText": "Ok", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421520502", "createdAt": "2020-05-07T13:51:54Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzcyMQ=="}, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzUwMzkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1ODoxNlrOGR5TDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1MTo1OVrOGR_kvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzc0Mw==", "bodyText": "Can we assert that this is not called as well?", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417743", "createdAt": "2020-05-07T10:58:16Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public IndexInput clone() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMDU3Mg==", "bodyText": "ok", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421520572", "createdAt": "2020-05-07T13:51:59Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public IndexInput clone() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzc0Mw=="}, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzUxMDk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowMDozOFrOGR5X1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1Mjo1NFrOGR_oFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk2NQ==", "bodyText": "Should we set position = -offset here too? I think it's strange, although probably irrelevant, that a newly-opened index input has a nonzero file pointer.", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421418965", "createdAt": "2020-05-07T11:00:38Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MDMwNQ==", "bodyText": "(that would imply that we'd need to throw appropriate exceptions if position < 0 in readByte() and readBytes() too)", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421440305", "createdAt": "2020-05-07T11:43:05Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk2NQ=="}, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMTQyOQ==", "bodyText": "Actually I think it's easier to reason about using a global position and adjust it only when reading the checksum bytes. I pushed 709e644 please let me know what you think", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421521429", "createdAt": "2020-05-07T13:52:54Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk2NQ=="}, "originalCommit": {"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 673, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}