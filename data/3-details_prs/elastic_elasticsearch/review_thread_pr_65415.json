{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDI2OTYy", "number": 65415, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1MzoyMlrOE9Q5-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzowMjowNFrOE-hNnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjc1NTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1MzoyMlrOH53AEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1MzoyMlrOH53AEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzMjAxOA==", "bodyText": "At least in tests, this ensures no double invocation of the listener with the new try-catch\nI suppose technically speaking it would be nice to do the same for the override below that uses a TaskListener but I chose not to for now since as you can see this already required fixing up a number of spots that relied on the listener's onResponse throwing and handling exceptions upstream.", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r530432018", "createdAt": "2020-11-25T14:53:22Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "diffHunk": "@@ -91,7 +97,22 @@ void doExecute(ActionType<Response> action, Request request, ActionListener<Resp\n                 Response extends ActionResponse\n             > Task executeLocally(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n         return taskManager.registerAndExecute(\"transport\", transportAction(action), request,\n-            (t, r) -> listener.onResponse(r), (t, e) -> listener.onFailure(e));\n+                (t, r) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjc2MjQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1NDo0NFrOH53EPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoxNTo1MlrOH7uT8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzMzA4Ng==", "bodyText": "I think without further refactoring of the signature of registerAndExecute and this is about as low as we can go on the stack in terms of passing these exceptions to the listener directly. Otherwise we'll have to adjust a non-trivial number of spots that make use of the returned Task from that method.", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r530433086", "createdAt": "2020-11-25T14:54:44Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "diffHunk": "@@ -79,7 +79,13 @@ public void close() {\n     public <Request extends ActionRequest, Response extends ActionResponse>\n     void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n         // Discard the task because the Client interface doesn't use it.\n-        executeLocally(action, request, listener);\n+        try {\n+            executeLocally(action, request, listener);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM3OTM5Ng==", "bodyText": "Yeah, I agree that it will be a non-trivial change. We would have to always return a task I think and then fail it immediately. Or change the signature.\nI think we could possibly catch TaskCancelledException here instead to make it specific that the \"hack\" is for this case only?", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r532379396", "createdAt": "2020-11-30T06:53:26Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "diffHunk": "@@ -79,7 +79,13 @@ public void close() {\n     public <Request extends ActionRequest, Response extends ActionResponse>\n     void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n         // Discard the task because the Client interface doesn't use it.\n-        executeLocally(action, request, listener);\n+        try {\n+            executeLocally(action, request, listener);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzMzA4Ng=="}, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4NjgwMA==", "bodyText": "I think we can't just catch that exception here since we also have the case of org.elasticsearch.tasks.TaskManager#register throwing IllegalArgumentException at least (that actually does reproduce in a test even). Also, technically speaking the in-line task cancellation in org.elasticsearch.tasks.TaskManager#registerCancellableTask could throw any exception if the parent is banned already so I figured I'd just catch all the things here for now?", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r532386800", "createdAt": "2020-11-30T07:15:52Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "diffHunk": "@@ -79,7 +79,13 @@ public void close() {\n     public <Request extends ActionRequest, Response extends ActionResponse>\n     void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n         // Discard the task because the Client interface doesn't use it.\n-        executeLocally(action, request, listener);\n+        try {\n+            executeLocally(action, request, listener);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzMzA4Ng=="}, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjc3ODEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/EnrichPolicyRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1ODowMlrOH53OOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1ODowMlrOH53OOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNTY0MQ==", "bodyText": "Obvious spot where we have a non-wrap listener and this would just bubble up all the way if the request is executed locally on SAME.", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r530435641", "createdAt": "2020-11-25T14:58:02Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/EnrichPolicyRunner.java", "diffHunk": "@@ -124,7 +124,12 @@ public void run() {\n         client.admin().indices().getIndex(getIndexRequest, new ActionListener<>() {\n             @Override\n             public void onResponse(GetIndexResponse getIndexResponse) {\n-                validateMappings(getIndexResponse);\n+                try {\n+                    validateMappings(getIndexResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjc4NzQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportResizeAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTowMDowMlrOH53T-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoyMTo1OVrOH7ub0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNzExNQ==", "bodyText": "Failing the listener on a missing index isn't strictly necessary here because I added the try-catch around prepareCreateIndexRequest anyway but I figured it more nicely motivates this TODO and follow-up cleanup to the logic here that previously relied on the exceptions just bubbling up all the way.", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r530437115", "createdAt": "2020-11-25T15:00:02Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportResizeAction.java", "diffHunk": "@@ -88,32 +88,43 @@ protected void masterOperation(Task task, final ResizeRequest resizeRequest, fin\n         // there is no need to fetch docs stats for split but we keep it simple and do it anyway for simplicity of the code\n         final String sourceIndex = indexNameExpressionResolver.resolveDateMathExpression(resizeRequest.getSourceIndex());\n         final String targetIndex = indexNameExpressionResolver.resolveDateMathExpression(resizeRequest.getTargetIndexRequest().index());\n+\n+        final IndexMetadata sourceMetadata = state.metadata().index(sourceIndex);\n+        if (sourceMetadata == null) {\n+            listener.onFailure(new IndexNotFoundException(sourceIndex));\n+            return;\n+        }\n+\n         IndicesStatsRequestBuilder statsRequestBuilder = client.admin().indices().prepareStats(sourceIndex).clear().setDocs(true);\n         IndicesStatsRequest statsRequest = statsRequestBuilder.request();\n         statsRequest.setParentTask(clusterService.localNode().getId(), task.getId());\n+        // TODO: only fetch indices stats for shrink type resize requests and move request validation (outside of doc counts) to before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM3ODIxOQ==", "bodyText": "Not sure moving out the validation is the right move, I would probably rather move it in to the cluster state update to avoid surprising effects (like soft deletes being changed right after us checking it). Did not look deeply into this, but I think I would prefer to not add the todo here.", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r532378219", "createdAt": "2020-11-30T06:49:52Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportResizeAction.java", "diffHunk": "@@ -88,32 +88,43 @@ protected void masterOperation(Task task, final ResizeRequest resizeRequest, fin\n         // there is no need to fetch docs stats for split but we keep it simple and do it anyway for simplicity of the code\n         final String sourceIndex = indexNameExpressionResolver.resolveDateMathExpression(resizeRequest.getSourceIndex());\n         final String targetIndex = indexNameExpressionResolver.resolveDateMathExpression(resizeRequest.getTargetIndexRequest().index());\n+\n+        final IndexMetadata sourceMetadata = state.metadata().index(sourceIndex);\n+        if (sourceMetadata == null) {\n+            listener.onFailure(new IndexNotFoundException(sourceIndex));\n+            return;\n+        }\n+\n         IndicesStatsRequestBuilder statsRequestBuilder = client.admin().indices().prepareStats(sourceIndex).clear().setDocs(true);\n         IndicesStatsRequest statsRequest = statsRequestBuilder.request();\n         statsRequest.setParentTask(clusterService.localNode().getId(), task.getId());\n+        // TODO: only fetch indices stats for shrink type resize requests and move request validation (outside of doc counts) to before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNzExNQ=="}, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4ODgxNw==", "bodyText": "Fair point this is slightly broken to begin with I guess. I'll drop that part of the TODO, I still think it'd be valid to avoid fetching the shard stats needlessly.", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r532388817", "createdAt": "2020-11-30T07:21:59Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportResizeAction.java", "diffHunk": "@@ -88,32 +88,43 @@ protected void masterOperation(Task task, final ResizeRequest resizeRequest, fin\n         // there is no need to fetch docs stats for split but we keep it simple and do it anyway for simplicity of the code\n         final String sourceIndex = indexNameExpressionResolver.resolveDateMathExpression(resizeRequest.getSourceIndex());\n         final String targetIndex = indexNameExpressionResolver.resolveDateMathExpression(resizeRequest.getTargetIndexRequest().index());\n+\n+        final IndexMetadata sourceMetadata = state.metadata().index(sourceIndex);\n+        if (sourceMetadata == null) {\n+            listener.onFailure(new IndexNotFoundException(sourceIndex));\n+            return;\n+        }\n+\n         IndicesStatsRequestBuilder statsRequestBuilder = client.admin().indices().prepareStats(sourceIndex).clear().setDocs(true);\n         IndicesStatsRequest statsRequest = statsRequestBuilder.request();\n         statsRequest.setParentTask(clusterService.localNode().getId(), task.getId());\n+        // TODO: only fetch indices stats for shrink type resize requests and move request validation (outside of doc counts) to before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNzExNQ=="}, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjg0MjI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/RestSubmitAsyncSearchActionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxMjowMVrOH532aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxMjowMVrOH532aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NTkyOQ==", "bodyText": "This was pretty dirty to begin with. Without this change and the change in the test verifying client we would always throw an NPE in the background (form trying to serialize a null response)  but that would never fail any tests.\nWith the new assertions that wasn't possible anymore so I had to fix this up here.", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r530445929", "createdAt": "2020-11-25T15:12:01Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/RestSubmitAsyncSearchActionTests.java", "diffHunk": "@@ -88,7 +89,7 @@ public void testParameters() throws Exception {\n             assertThat(request, instanceOf(SubmitAsyncSearchRequest.class));\n             assertThat(valueAccessor.apply((SubmitAsyncSearchRequest) request), equalTo(expectedValue));\n             executeCalled.set(true);\n-            return null;\n+            return new AsyncSearchResponse(\"\", randomBoolean(), randomBoolean(), 0L, 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTkxMzI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzowMjowNFrOH7uBxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoyNjowNFrOH7uhhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MjE0OA==", "bodyText": "I think we should add a comment to javadoc here and in the other executeLocally that they can throw TaskCancelledException?", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r532382148", "createdAt": "2020-11-30T07:02:04Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "diffHunk": "@@ -79,7 +79,13 @@ public void close() {\n     public <Request extends ActionRequest, Response extends ActionResponse>\n     void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n         // Discard the task because the Client interface doesn't use it.\n-        executeLocally(action, request, listener);\n+        try {\n+            executeLocally(action, request, listener);\n+        } catch (Exception e) {\n+            // #executeLocally returns the task and throws RuntimeException if it fails to register the task so we forward them to listener\n+            // since this API does not concern itself with the specifics of the task handling\n+            listener.onFailure(e);\n+        }\n     }\n \n     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5MDI3Nw==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/65415#discussion_r532390277", "createdAt": "2020-11-30T07:26:04Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/client/node/NodeClient.java", "diffHunk": "@@ -79,7 +79,13 @@ public void close() {\n     public <Request extends ActionRequest, Response extends ActionResponse>\n     void doExecute(ActionType<Response> action, Request request, ActionListener<Response> listener) {\n         // Discard the task because the Client interface doesn't use it.\n-        executeLocally(action, request, listener);\n+        try {\n+            executeLocally(action, request, listener);\n+        } catch (Exception e) {\n+            // #executeLocally returns the task and throws RuntimeException if it fails to register the task so we forward them to listener\n+            // since this API does not concern itself with the specifics of the task handling\n+            listener.onFailure(e);\n+        }\n     }\n \n     /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MjE0OA=="}, "originalCommit": {"oid": "d99f75c941cd69c0c6c67d8ebb75c502348c9c0a"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2031, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}