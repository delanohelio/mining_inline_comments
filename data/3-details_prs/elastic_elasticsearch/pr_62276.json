{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTAwODg2", "number": 62276, "title": "EQL: Use Point In Time inside sequences", "bodyText": "Use the newly introduced PIT API to have a consistent view of the data\nwhile doing sequence matching, which involves multiple calls, aka\nrepeatable reads and thus avoid race conditions or any in-flight updates\non the data.", "createdAt": "2020-09-11T22:03:39Z", "url": "https://github.com/elastic/elasticsearch/pull/62276", "merged": true, "mergeCommit": {"oid": "daa72fc3c71fd36afb55278021ff6bbc591ef148"}, "closed": true, "closedAt": "2020-09-15T12:22:42Z", "author": {"login": "costin"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH8vQ3AH2gAyNDg1NTAwODg2OmVlMTU2ZDAzN2YxNjFmMzMzOWRkNDQ2YzdmMjk3ZjM3ZmYwNWFkODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJGIcAAFqTQ4ODU2Njk0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/ee156d037f161f3339dd446c7f297f37ff05ad86", "committedDate": "2020-09-11T22:00:38Z", "message": "EQL: Use Point In Time inside sequences\n\nUse the newly introduced PIT API to have a consistent view of the data\nwhile doing sequence matching, which involves multiple calls, aka\nrepeatable reads and thus avoid race conditions or any in-flight updates\non the data."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTQ5NjM2", "url": "https://github.com/elastic/elasticsearch/pull/62276#pullrequestreview-487149636", "createdAt": "2020-09-11T22:06:26Z", "commit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowNjoyNlrOHQvIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowNjoyNlrOHQvIhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMTQ5NA==", "bodyText": "PIT feedback:\n\npointInTimeBuilder method in SearchSource could be renamed to getPoint.. to follow the naming convention of the rest of the methods in the class\nSince the keepAlive is optional, it could be removed from the constructor and moved to a separate method (setKeepAlive()) in the PointInTimeBuilder class.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487311494", "createdAt": "2020-09-11T22:06:26Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTE0NzY0", "url": "https://github.com/elastic/elasticsearch/pull/62276#pullrequestreview-487514764", "createdAt": "2020-09-14T08:09:43Z", "commit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODowOTo0NFrOHRIh9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODoxMjoxOVrOHRIn5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyNzYwNg==", "bodyText": "Do I understand correctly that PITs are used only when there are more than one search requests internally (sequences) ?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487727606", "createdAt": "2020-09-14T08:09:44Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyODU2Nw==", "bodyText": "What do we do on partial failures (shard failures) ? I wonder if these requests should run with allow_partial_search_results set to false ?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487728567", "createdAt": "2020-09-14T08:11:21Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyOTEyNw==", "bodyText": "It would be nice to have tests that check that all PITs are closed when the request finishes ?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487729127", "createdAt": "2020-09-14T08:12:19Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);\n+            },\n+            // always close PIT in case of exceptions\n+            e -> {\n+                if (pitId != null) {\n+                    close(wrap(b -> {}, listener::onFailure));\n+                }\n+                listener.onFailure(e);\n+            }));\n+    }\n+\n+    private void openPIT(ActionListener<String> listener) {\n+        OpenPointInTimeRequest request = new OpenPointInTimeRequest(\n+            indices,\n+            IndexResolver.FIELD_CAPS_INDICES_OPTIONS,\n+            keepAlive,\n+            null,\n+            null\n+        );\n+        client.execute(OpenPointInTimeAction.INSTANCE, request, map(listener, OpenPointInTimeResponse::getSearchContextId));\n+    }\n+\n+    @Override\n+    public void close(ActionListener<Boolean> listener)  {\n+        client.execute(ClosePointInTimeAction.INSTANCE, new ClosePointInTimeRequest(pitId),\n+            map(listener, ClosePointInTimeResponse::isSucceeded));\n+        pitId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODQ4MjQ2", "url": "https://github.com/elastic/elasticsearch/pull/62276#pullrequestreview-487848246", "createdAt": "2020-09-14T14:47:59Z", "commit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0Nzo1OVrOHRYn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0ODo0N1rOHRYqRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MTI1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Extension of basic query, adding awareness Point-in-Time awareness.\n          \n          \n            \n             * Extension of basic query, adding Point-in-Time awareness.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487991256", "createdAt": "2020-09-14T14:47:59Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MTg3Ng==", "bodyText": "PIT or pit ID?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487991876", "createdAt": "2020-09-14T14:48:47Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e98239bc865ac2219d185f9b427aa9c29e77d5ad", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/e98239bc865ac2219d185f9b427aa9c29e77d5ad", "committedDate": "2020-09-14T16:01:46Z", "message": "Address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTMyNzUz", "url": "https://github.com/elastic/elasticsearch/pull/62276#pullrequestreview-487932753", "createdAt": "2020-09-14T16:12:10Z", "commit": {"oid": "e98239bc865ac2219d185f9b427aa9c29e77d5ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjoxMjoxMFrOHRcg4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjoxMjoxMFrOHRcg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1NTAxMQ==", "bodyText": "Add assertion that all search contexts are closed after each single test.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488055011", "createdAt": "2020-09-14T16:12:10Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "diffHunk": "@@ -31,6 +31,11 @@\n     private static final String defaultValidationIndexName = \"eql_search_validation_test\";\n     private static final String validQuery = \"process where user = 'SYSTEM'\";\n \n+    @After\n+    public void checkSearchContent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98239bc865ac2219d185f9b427aa9c29e77d5ad"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90fbb04776a8cc5234a13320b8d56a9ba0e4e92", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/f90fbb04776a8cc5234a13320b8d56a9ba0e4e92", "committedDate": "2020-09-15T08:41:57Z", "message": "Trying to fix the SQL classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6baac3a2acbead83b96818a3422de997a890299", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/c6baac3a2acbead83b96818a3422de997a890299", "committedDate": "2020-09-15T10:03:49Z", "message": "Merge branch 'master' into eql/add-pit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTY2OTQw", "url": "https://github.com/elastic/elasticsearch/pull/62276#pullrequestreview-488566940", "createdAt": "2020-09-15T11:03:19Z", "commit": {"oid": "c6baac3a2acbead83b96818a3422de997a890299"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowMzoxOVrOHR8ajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowNDozN1rOHR8dPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NzY3OA==", "bodyText": "Really minor: checkSearchContent or checkSearchContext?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488577678", "createdAt": "2020-09-15T11:03:19Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "diffHunk": "@@ -31,6 +31,11 @@\n     private static final String defaultValidationIndexName = \"eql_search_validation_test\";\n     private static final String validQuery = \"process where user = 'SYSTEM'\";\n \n+    @After\n+    public void checkSearchContent() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1NTAxMQ=="}, "originalCommit": {"oid": "e98239bc865ac2219d185f9b427aa9c29e77d5ad"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3ODM2NQ==", "bodyText": "This check is being performed in other places in code. If we remove this one here, should it be removed anywhere else as well?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488578365", "createdAt": "2020-09-15T11:04:37Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "diffHunk": "@@ -43,14 +48,9 @@\n             {\"{\\\"query\\\": \\\"\" + validQuery + \"\\\", \\\"filter\\\": {}}\", \"query malformed, empty clause found\"}\n     };\n \n-    @BeforeClass\n-    public static void checkForSnapshot() {\n-        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6baac3a2acbead83b96818a3422de997a890299"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4549, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}