{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDM5NjM3", "number": 52176, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMDoyMFrODeyyQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMDo0NFrODe-36g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE1OTM2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMDoyMFrOFoIAuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1NDoxM1rOFoU_kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ==", "bodyText": "@mark-vieira Am I missing something why this isn't necessary in other tests? Without this, in the :distribution:tools:launchers:test tests, the directory wouldn't exist on a clean run and the tests would fail?", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377618619", "createdAt": "2020-02-11T13:00:20Z", "author": {"login": "jasontedor"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxODY0MA==", "bodyText": "Since this project seems to be a one-off, and the lucene test framework does this for all our other projects, I'm inclined to just do this in the build script for the launch project instead of adding this to BuildPlugin. Or put the smarts for this in the launcher tests themselves.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377818640", "createdAt": "2020-02-11T18:30:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyMTAzMg==", "bodyText": "I'm not sure. It's a bit weird that we set this as the temporary directory for tests (via java.io.tmpdir) but we rely on a test case base class (not even our test runner) to ensure the directory exists:\n\n  \n    \n      elasticsearch/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy\n    \n    \n         Line 691\n      in\n      dbf08eb\n    \n    \n    \n    \n\n        \n          \n           test.systemProperties 'java.io.tmpdir': './temp', \n        \n    \n  \n\n\nIt seems that we would want this directory to always exists, relying on that.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377821032", "createdAt": "2020-02-11T18:35:36Z", "author": {"login": "jasontedor"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyMjM2Ng==", "bodyText": "That's fair. Given that, let's go ahead and move the creation of that directory to where we set java.io.tmpdir so that logic is colocated. I'd also prefer we use an absolute path here rather than relying on implicit behavior on this being relative to the test working directory.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377822366", "createdAt": "2020-02-11T18:38:08Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyMzU1Mg==", "bodyText": "Note that that would be moving the creation of the temporary directory into test task configuration, it seems we wouldn't want that? Right now I've put it in a doFirst so it's only created upon execution.\nThere might be a reason for the relative path, I'm still looking into that.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377823552", "createdAt": "2020-02-11T18:40:27Z", "author": {"login": "jasontedor"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyMzkzNA==", "bodyText": "Note that that would be moving the creation of the temporary directory into test task configuration, it seems we wouldn't want that? Right now I've put it in a doFirst so it's only created upon execution.\n\nYou are 100% right. Disregard \ud83d\ude04", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377823934", "createdAt": "2020-02-11T18:41:10Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNTkyNw==", "bodyText": "It looks like the relative nature of the path is simply leftover legacy from the Maven days when we didn't know the working directory.\nSo I think we can go absolute, but I would spin this out into a separate change now, so it's explicit. I dislike when changes like this are worked into another PR as a side story when they should be a main dish all on their own for others to see.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377825927", "createdAt": "2020-02-11T18:44:40Z", "author": {"login": "jasontedor"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMTMxNA==", "bodyText": "I opened #52227 and #52228.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377831314", "createdAt": "2020-02-11T18:54:13Z", "author": {"login": "jasontedor"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy", "diffHunk": "@@ -655,6 +655,7 @@ class BuildPlugin implements Plugin<Project> {\n                     project.mkdir(testOutputDir)\n                     project.mkdir(heapdumpDir)\n                     project.mkdir(test.workingDir)\n+                    project.mkdir(test.workingDir.toPath().resolve('temp'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODYxOQ=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE2MTIxOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMDo1M1rOFoIB4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyOTowOFrOFoUKBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODkxNA==", "bodyText": "This is what is triggering the need for the temporary directory to exist.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377618914", "createdAt": "2020-02-11T13:00:53Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMzc1Mg==", "bodyText": "I can't seem to find any other usages of this method in any of our other tests. Perhaps it relies on some different assumptions regarding test execution environment. Our other tests seem to rely on LuceneTestCase.createTempDir() instead.\nThis project doesn't seem to use our test framework, just the \"vanilla\" randomized runner stuff.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377813752", "createdAt": "2020-02-11T18:22:15Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODkxNA=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNzYwNg==", "bodyText": "Yeah, and that ensures that the temporary directory exists: https://github.com/apache/lucene-solr/blob/9a4f7661e96416e3aac3e48f1108422ab4184473/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup.java#L187", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377817606", "createdAt": "2020-02-11T18:29:08Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODkxNA=="}, "originalCommit": {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzkwODMxOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowMzozOFrOFoY_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzoxMTowOVrOFociiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw==", "bodyText": "Should we provide a message for this assertion such as \"Expected NoSuchFileException but no exception was thrown\"?", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377896843", "createdAt": "2020-02-11T21:03:38Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNTUxNg==", "bodyText": "A pattern I've sometimes used is to capture any exception thrown, then assert that it's:\n\nNot null\nHas the right class\nHas the right message\n\nUp to you if you think that's overkill, but at least if the test fails then it'll tell you exactly why.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377935516", "createdAt": "2020-02-11T22:23:02Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw=="}, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNjk3OA==", "bodyText": "What we're doing here is effectively doing the first two items of your list. I'm so-so on testing the message in most cases. FWIW, what you describe is trivial using Spock \ud83d\ude09", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377936978", "createdAt": "2020-02-11T22:26:19Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw=="}, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDk1Mw==", "bodyText": "As @mark-vieira mentions, that's not needed here because we have an explicit catch for the expected exception type which ensures non-nullness, and also that it's the right type. Asserting on the exception message here is not needed because it's going to come from the operating system, it's not an exception message that we control.\nThere are cases where the three checks are appropriate. For example, when asserting that a listener is called back with the proper exception, asserting non-null and the type are good. The message can be a valuable assertion when we need to distinguish between two reasons that a given exception type might arise (e.g., IllegalArgumentException). It a lot of cases, asserting on an exception message is a smell, especially in production code, and in those cases I prefer that make dedicated exception types (we've done this a few times in CCR, when an exception is going to cross the wire, for example).", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377954953", "createdAt": "2020-02-11T23:11:09Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw=="}, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzkxNjI4OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowNjoxM1rOFoZEYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowNjoxM1rOFoZEYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5ODA4MQ==", "bodyText": "Same as above, seems it would be helpful to provide a message here to avoid a generic AssertionError.", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377898081", "createdAt": "2020-02-11T21:06:13Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();\n+        } catch (final NoSuchFileException expected) {\n+            // this is expected, the root JVM options file must exist\n+        }\n+    }\n+\n+    public void testReadRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        final Path rootJvmOptions = config.resolve(\"jvm.options\");\n+        Files.write(rootJvmOptions, List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"), StandardOpenOption.CREATE_NEW, StandardOpenOption.APPEND);\n+        if (randomBoolean()) {\n+            // an empty jvm.options.d directory should be irrelevant\n+            Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        }\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectory() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"heap.options\"),\n+            List.of(\"# comment\", \"-Xms384m\", \"-Xmx384m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\", \"-Xms384m\", \"-Xmx384m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectoryInOrder() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"first.options\"),\n+            List.of(\"# comment\", \"-Xms384m\", \"-Xmx384m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"second.options\"),\n+            List.of(\"# comment\", \"-Xms512m\", \"-Xmx512m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\", \"-Xms384m\", \"-Xmx384m\", \"-Xms512m\", \"-Xmx512m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectoryIgnoresFilesNotNamedOptions() throws IOException,\n+        JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createFile(config.resolve(\"jvm.options\"));\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"heap.not-named-options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, empty());\n+    }\n+\n+    public void testFileContainsInvalidLinesThrowsParserException() throws IOException {\n+        final Path config = newTempDir();\n+        final Path rootJvmOptions = config.resolve(\"jvm.options\");\n+        Files.write(rootJvmOptions, List.of(\"XX:+UseG1GC\"), StandardOpenOption.CREATE_NEW, StandardOpenOption.APPEND);\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODEzOTk0OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMDo0NFrOFobSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMDo0NFrOFobSUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNDQxOQ==", "bodyText": "Maybe?\nfor (String opt : esJavaOpts.split(\"\\\\s+\")) {\n    if (opt.isBlank() == false) {\n        jvmOptions.add(opt);\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377934419", "createdAt": "2020-02-11T22:20:44Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java", "diffHunk": "@@ -127,6 +127,29 @@ public static void main(final String[] args) throws InterruptedException, IOExce\n         throws InterruptedException,\n         IOException,\n         JvmOptionsFileParserException {\n+\n+        final List<String> jvmOptions = readJvmOptionsFiles(config);\n+\n+        if (esJavaOpts != null) {\n+            jvmOptions.addAll(\n+                Arrays.stream(esJavaOpts.split(\"\\\\s+\")).filter(Predicate.not(String::isBlank)).collect(Collectors.toUnmodifiableList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214c4a6609649b0f998a770be52d00da17809b88"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4715, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}