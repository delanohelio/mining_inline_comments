{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDc1NTQy", "number": 55774, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTozOToyMFrOD_f1fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzo0MDozNFrOD_gxfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTA4NDc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/SecurityRestFilterTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTozOToyMFrOGaMOGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0MTowMVrOGeMxUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExNjM3Ng==", "bodyText": "We could use a test for a failure that has a non-empty cause and ensure the stack trace is not displayed for the cause either.", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r430116376", "createdAt": "2020-05-26T01:39:20Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/SecurityRestFilterTests.java", "diffHunk": "@@ -141,21 +146,48 @@ public void testProcessBasicLicense() throws Exception {\n         verifyZeroInteractions(channel, authcService);\n     }\n \n-    public void testProcessAuthenticationError() throws Exception {\n-        RestRequest request = mock(RestRequest.class);\n-        Exception exception = authenticationError(\"failed authc\");\n+    public void testProcessAuthenticationFailedNoTrace() throws Exception {\n+        filter = new SecurityRestFilter(licenseState, threadContext, authcService, secondaryAuthenticator, restHandler, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, true, true, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, true, false, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, false, true, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, false, false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxOTY5Ng==", "bodyText": "I think\ntestProcessAuthenticationFailed(randomBoolean() ? authenticationError(\"failed authn\") : authenticationError(\"failed authn with \" +\n                \"cause\", new ElasticsearchException(\"cause\")), RestStatus.UNAUTHORIZED, false, false, false);\n\ndoes the job?", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r434319696", "createdAt": "2020-06-03T05:41:01Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/SecurityRestFilterTests.java", "diffHunk": "@@ -141,21 +146,48 @@ public void testProcessBasicLicense() throws Exception {\n         verifyZeroInteractions(channel, authcService);\n     }\n \n-    public void testProcessAuthenticationError() throws Exception {\n-        RestRequest request = mock(RestRequest.class);\n-        Exception exception = authenticationError(\"failed authc\");\n+    public void testProcessAuthenticationFailedNoTrace() throws Exception {\n+        filter = new SecurityRestFilter(licenseState, threadContext, authcService, secondaryAuthenticator, restHandler, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, true, true, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, true, false, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, false, true, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, false, false, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExNjM3Ng=="}, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTEzMjI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/BytesRestResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjoxNjowOFrOGaMqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoyODowMVrOGd8Paw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMzY2OA==", "bodyText": "I am unsure about this statement. It is probably better be removed. My reasonings are:\n\nSemantically it is not necessary as the else branch is the execution path of the default value, i.e. REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT, which is true.\nIn fact, it does not matter what the actual default value is. The intention here, as I understand it, is to proceed as default with no extra intervention. This is unlikely in practice, but might be possible in theory: The caller may choose to set REST_EXCEPTION_SKIP_STACK_TRACE to false and wraps it with either a RestChannel or RestRequest. In this case, the else branch should proceed with the value from caller instead of changing it.", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r430123668", "createdAt": "2020-05-26T02:16:08Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/rest/BytesRestResponse.java", "diffHunk": "@@ -117,28 +131,22 @@ public RestStatus status() {\n         return this.status;\n     }\n \n-    private static final Logger SUPPRESSED_ERROR_LOGGER = LogManager.getLogger(\"rest.suppressed\");\n-\n-    private static XContentBuilder build(RestChannel channel, RestStatus status, Exception e) throws IOException {\n-        ToXContent.Params params = channel.request();\n+    protected ToXContent.Params paramsFromRequest(RestRequest restRequest) {\n+        ToXContent.Params params = restRequest;\n         if (params.paramAsBoolean(\"error_trace\", !REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT)) {\n             params =  new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"false\"), params);\n-        } else if (e != null) {\n-            Supplier<?> messageSupplier = () -> new ParameterizedMessage(\"path: {}, params: {}\",\n-                    channel.request().rawPath(), channel.request().params());\n-\n-            if (status.getStatus() < 500) {\n-                SUPPRESSED_ERROR_LOGGER.debug(messageSupplier, e);\n-            } else {\n-                SUPPRESSED_ERROR_LOGGER.warn(messageSupplier, e);\n-            }\n+        } else {\n+            params =  new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"true\"), params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0ODg3NQ==", "bodyText": "Sounds good, thanks!", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r434048875", "createdAt": "2020-06-02T17:28:01Z", "author": {"login": "albertzaharovits"}, "path": "server/src/main/java/org/elasticsearch/rest/BytesRestResponse.java", "diffHunk": "@@ -117,28 +131,22 @@ public RestStatus status() {\n         return this.status;\n     }\n \n-    private static final Logger SUPPRESSED_ERROR_LOGGER = LogManager.getLogger(\"rest.suppressed\");\n-\n-    private static XContentBuilder build(RestChannel channel, RestStatus status, Exception e) throws IOException {\n-        ToXContent.Params params = channel.request();\n+    protected ToXContent.Params paramsFromRequest(RestRequest restRequest) {\n+        ToXContent.Params params = restRequest;\n         if (params.paramAsBoolean(\"error_trace\", !REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT)) {\n             params =  new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"false\"), params);\n-        } else if (e != null) {\n-            Supplier<?> messageSupplier = () -> new ParameterizedMessage(\"path: {}, params: {}\",\n-                    channel.request().rawPath(), channel.request().params());\n-\n-            if (status.getStatus() < 500) {\n-                SUPPRESSED_ERROR_LOGGER.debug(messageSupplier, e);\n-            } else {\n-                SUPPRESSED_ERROR_LOGGER.warn(messageSupplier, e);\n-            }\n+        } else {\n+            params =  new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"true\"), params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMzY2OA=="}, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTIwNjEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzoxMzozNFrOGaNYAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoyODozMFrOGd8QlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzNTI5Ng==", "bodyText": "I wonder whether this could just be pulled up into BytesRestResponse itself. I think the intention is probably to not mix security related code with generic Rest code. But the duplication worries me and it is hard to be aware of the additional logic if you just read BytesRestResponse.\nIf pulling this up does not sound right to you, alternatively, we could add an additional method to BytesRestResponse, e.g. allowsStackTrace(), which always returns true and is overridden here to check the restStatus, i.e.:\nFor BytesRestResponse:\nprivate ToXContent.Params paramsFromRequest(RestRequest restRequest) {\n    ToXContent.Params params = restRequest;\n    if (params.paramAsBoolean(\"error_trace\", !REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT)\n        && allowsStackTrace()) {\n                 ...\n    }\n            ...\n}\n\nprotected boolean allowsStackTrace() { return true; }\nAnd overridden as:\nchannel.sendResponse(new BytesRestResponse(channel, e) {\n    @Override\n    protected boolean allowsStackTrace() { return status() != RestStatus.UNAUTHORIZED; }\n})\nI personally feel the additional method makes it easier to be aware of the possible extra check by just reading the BytesRestResponse class.", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r430135296", "createdAt": "2020-05-26T03:13:34Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "diffHunk": "@@ -82,8 +89,23 @@ public void handleRequest(RestRequest request, RestChannel channel, NodeClient c\n \n     private void handleException(String actionType, RestRequest request, RestChannel channel, Exception e) {\n         logger.debug(new ParameterizedMessage(\"{} failed for REST request [{}]\", actionType, request.uri()), e);\n+        final RestStatus restStatus = ExceptionsHelper.status(e);\n         try {\n-            channel.sendResponse(new BytesRestResponse(channel, e));\n+            channel.sendResponse(new BytesRestResponse(channel, restStatus, e) {\n+\n+                @Override\n+                protected ToXContent.Params paramsFromRequest(RestRequest restRequest) {\n+                    ToXContent.Params params = restRequest;\n+                    if (params.paramAsBoolean(\"error_trace\", !REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT)\n+                            && restStatus != RestStatus.UNAUTHORIZED) {\n+                        params = new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"false\"), params);\n+                    } else {\n+                        params = new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"true\"), params);\n+                    }\n+                    return params;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2ODY5Ng==", "bodyText": "How about an additional ctor in BytesRestResponse that takes a boolean that in principal overrides REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT or error_trace so that you can simply call\nfinal RestStatus restStatus = ExceptionsHelper.status(e);\nfinal boolean hideStackTrace = restStatus == RestStatus.UNAUTHORIZED;\ntry {\n    channel.sendResponse(new BytesRestResponse(channel, hideStackTrace, e));", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r430368696", "createdAt": "2020-05-26T12:19:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "diffHunk": "@@ -82,8 +89,23 @@ public void handleRequest(RestRequest request, RestChannel channel, NodeClient c\n \n     private void handleException(String actionType, RestRequest request, RestChannel channel, Exception e) {\n         logger.debug(new ParameterizedMessage(\"{} failed for REST request [{}]\", actionType, request.uri()), e);\n+        final RestStatus restStatus = ExceptionsHelper.status(e);\n         try {\n-            channel.sendResponse(new BytesRestResponse(channel, e));\n+            channel.sendResponse(new BytesRestResponse(channel, restStatus, e) {\n+\n+                @Override\n+                protected ToXContent.Params paramsFromRequest(RestRequest restRequest) {\n+                    ToXContent.Params params = restRequest;\n+                    if (params.paramAsBoolean(\"error_trace\", !REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT)\n+                            && restStatus != RestStatus.UNAUTHORIZED) {\n+                        params = new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"false\"), params);\n+                    } else {\n+                        params = new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"true\"), params);\n+                    }\n+                    return params;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzNTI5Ng=="}, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0OTE3Mw==", "bodyText": "The allowsStackTrace() alternative sounds good, thanks! .. but I've named it skipStackTrace it's more congruous with the parameter naming in that portion of the code.", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r434049173", "createdAt": "2020-06-02T17:28:30Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "diffHunk": "@@ -82,8 +89,23 @@ public void handleRequest(RestRequest request, RestChannel channel, NodeClient c\n \n     private void handleException(String actionType, RestRequest request, RestChannel channel, Exception e) {\n         logger.debug(new ParameterizedMessage(\"{} failed for REST request [{}]\", actionType, request.uri()), e);\n+        final RestStatus restStatus = ExceptionsHelper.status(e);\n         try {\n-            channel.sendResponse(new BytesRestResponse(channel, e));\n+            channel.sendResponse(new BytesRestResponse(channel, restStatus, e) {\n+\n+                @Override\n+                protected ToXContent.Params paramsFromRequest(RestRequest restRequest) {\n+                    ToXContent.Params params = restRequest;\n+                    if (params.paramAsBoolean(\"error_trace\", !REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT)\n+                            && restStatus != RestStatus.UNAUTHORIZED) {\n+                        params = new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"false\"), params);\n+                    } else {\n+                        params = new ToXContent.DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, \"true\"), params);\n+                    }\n+                    return params;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzNTI5Ng=="}, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTIzODM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/SecurityRestFilterTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzo0MDozNFrOGaNrxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzo0MDozNFrOGaNrxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MDM1Ng==", "bodyText": "Nit: we could probably randomize the RestStatus in 4xx and 5xx.", "url": "https://github.com/elastic/elasticsearch/pull/55774#discussion_r430140356", "createdAt": "2020-05-26T03:40:34Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/SecurityRestFilterTests.java", "diffHunk": "@@ -141,21 +146,48 @@ public void testProcessBasicLicense() throws Exception {\n         verifyZeroInteractions(channel, authcService);\n     }\n \n-    public void testProcessAuthenticationError() throws Exception {\n-        RestRequest request = mock(RestRequest.class);\n-        Exception exception = authenticationError(\"failed authc\");\n+    public void testProcessAuthenticationFailedNoTrace() throws Exception {\n+        filter = new SecurityRestFilter(licenseState, threadContext, authcService, secondaryAuthenticator, restHandler, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, true, true, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, true, false, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, false, true, false);\n+        testProcessAuthenticationFailed(authenticationError(\"failed authn\"), RestStatus.UNAUTHORIZED, false, false, false);\n+        testProcessAuthenticationFailed(new ElasticsearchException(\"dummy\"), RestStatus.INTERNAL_SERVER_ERROR, false, false, false);\n+        testProcessAuthenticationFailed(new ElasticsearchException(\"dummy\"), RestStatus.INTERNAL_SERVER_ERROR, true, false, false);\n+        testProcessAuthenticationFailed(new ElasticsearchException(\"dummy\"), RestStatus.INTERNAL_SERVER_ERROR, false, true, false);\n+        testProcessAuthenticationFailed(new ElasticsearchException(\"dummy\"), RestStatus.INTERNAL_SERVER_ERROR, true, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f45e455bebd4bd8b044519af2b85724cc3aff9c"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2593, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}