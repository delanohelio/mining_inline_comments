{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzI5OTI0", "number": 65464, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDowNzo1M1rOE85zPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mzo0M1rOE9PQtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk3MDIyOnYy", "diffSide": "RIGHT", "path": "distribution/tools/keystore-cli/src/main/java/org/elasticsearch/common/settings/BaseKeyStoreCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDowNzo1M1rOH5TUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDowNzo1M1rOH5TUrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzQ3MQ==", "bodyText": "Because GeneralSecurityException can be thrown now too", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529847471", "createdAt": "2020-11-24T20:07:53Z", "author": {"login": "jkakavas"}, "path": "distribution/tools/keystore-cli/src/main/java/org/elasticsearch/common/settings/BaseKeyStoreCommand.java", "diffHunk": "@@ -68,7 +68,7 @@ protected final void execute(Terminal terminal, OptionSet options, Environment e\n                 keyStore.decrypt(keyStorePassword.getChars());\n             }\n             executeCommand(terminal, options, env);\n-        } catch (SecurityException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk3MDU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDowNzo1OVrOH5TU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToxNzo0NFrOH5uvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzUyMA==", "bodyText": "Because GeneralSecurityException can be thrown now too", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529847520", "createdAt": "2020-11-24T20:07:59Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -75,7 +75,7 @@ protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal termina\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3ODMzMQ==", "bodyText": "Nit: why not catch (SecurityException | GeneralSecurityException e) as above?\nAlso KeyStoreWrapper#decrypt is declared to throw GeneralSecurityException as well. It wasn't a problem before or maybe it was just an oversight?", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530278331", "createdAt": "2020-11-25T10:48:27Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -75,7 +75,7 @@ protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal termina\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzUyMA=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5NjcxNA==", "bodyText": "Yeah I missed that when I changed it in BaseKeyStoreCommand. readPassword throws a UserException and we don't want to catch it here either.\n\nAlso KeyStoreWrapper#decrypt is declared to throw GeneralSecurityException as well. It wasn't a problem before or maybe it was just an oversight?\n\nI think it was an oversight but it wasn't such an issue because the CLI would just exit throwing the exception. It wasn't as user friendly as a UserException with an error message but it wasn't too problematic to be noticed or reported, I'd guess", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530296714", "createdAt": "2020-11-25T11:17:44Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -75,7 +75,7 @@ protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal termina\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzUyMA=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk4MDM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxMDo1OFrOH5TasQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo1NzoxNlrOH53MAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTAwOQ==", "bodyText": "My thinking is that we should scope this tightly first and expand if/when we get reports/CI failures for additional errors. The ones we know are thrown are all AssertionError and catching all Error felt too wide of a net. Not holding a strong opinion on this, happy to discuss", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529849009", "createdAt": "2020-11-24T20:10:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -512,6 +512,8 @@ public static boolean verifyHash(SecureString data, char[] hash) {\n             PBEKeySpec keySpec = new PBEKeySpec(data.getChars(), salt, cost, PBKDF2_KEY_LENGTH);\n             result.put(Base64.getEncoder().encodeToString(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             return result.array();\n+        } catch (AssertionError ae){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMDMxMA==", "bodyText": "Somehow missed this comment in the previous pass ... I see you already considered it. I suggest a wider net (even wider then Error) because 1) any future fix to this would require a release which is purely overhead; 2) I cannot think of a valid reason for ES to shutdown here due to any kinda of error. So wider net (at least Error) should provide mostly benefit.", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530300310", "createdAt": "2020-11-25T11:23:57Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -512,6 +512,8 @@ public static boolean verifyHash(SecureString data, char[] hash) {\n             PBEKeySpec keySpec = new PBEKeySpec(data.getChars(), salt, cost, PBKDF2_KEY_LENGTH);\n             result.put(Base64.getEncoder().encodeToString(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             return result.array();\n+        } catch (AssertionError ae){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTAwOQ=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwODMzOQ==", "bodyText": "Thanks for the comment Yang. I see your points. I'll let Lyudmila weigh in too and we can reach a consensus", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530308339", "createdAt": "2020-11-25T11:37:16Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -512,6 +512,8 @@ public static boolean verifyHash(SecureString data, char[] hash) {\n             PBEKeySpec keySpec = new PBEKeySpec(data.getChars(), salt, cost, PBKDF2_KEY_LENGTH);\n             result.put(Base64.getEncoder().encodeToString(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             return result.array();\n+        } catch (AssertionError ae){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTAwOQ=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzNTA3Mg==", "bodyText": "I would leave an ability to throw and shutdown for when something unthinkable happens. Catching Error should be ok though", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530435072", "createdAt": "2020-11-25T14:57:16Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -512,6 +512,8 @@ public static boolean verifyHash(SecureString data, char[] hash) {\n             PBEKeySpec keySpec = new PBEKeySpec(data.getChars(), salt, cost, PBKDF2_KEY_LENGTH);\n             result.put(Base64.getEncoder().encodeToString(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             return result.array();\n+        } catch (AssertionError ae){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTAwOQ=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk4MzQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxMTo1NVrOH5Tcew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTo1MDozMFrOH5v5Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTQ2Nw==", "bodyText": "Throw instead of returning false so that this is distinguishable from wrong password, which i believe is desired.", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529849467", "createdAt": "2020-11-24T20:11:55Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -538,6 +540,8 @@ private static boolean verifyPbkdf2Hash(SecureString data, char[] hash) {\n                 .encode(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             final boolean result = CharArrays.constantTimeEquals(computedPwdHash, hashChars);\n             return result;\n+        } catch (AssertionError ae) {\n+            throw new ElasticsearchException(\"Can't use PBKDF2 implementation from the Security Provider in use.\", ae);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4OTQ3MA==", "bodyText": "Nit: I cannot help trying to make this error message read more like the others. So how about \"Error in using PBKDF2 implementation from the chosen Security Provider\". Also this string has an extra period at the end while the above one does not :)", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530289470", "createdAt": "2020-11-25T11:05:52Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -538,6 +540,8 @@ private static boolean verifyPbkdf2Hash(SecureString data, char[] hash) {\n                 .encode(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             final boolean result = CharArrays.constantTimeEquals(computedPwdHash, hashChars);\n             return result;\n+        } catch (AssertionError ae) {\n+            throw new ElasticsearchException(\"Can't use PBKDF2 implementation from the Security Provider in use.\", ae);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTQ2Nw=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMjY2MA==", "bodyText": "Sure, why not! I'll change the one below while we're at it", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530302660", "createdAt": "2020-11-25T11:27:49Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -538,6 +540,8 @@ private static boolean verifyPbkdf2Hash(SecureString data, char[] hash) {\n                 .encode(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             final boolean result = CharArrays.constantTimeEquals(computedPwdHash, hashChars);\n             return result;\n+        } catch (AssertionError ae) {\n+            throw new ElasticsearchException(\"Can't use PBKDF2 implementation from the Security Provider in use.\", ae);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTQ2Nw=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMzE4NQ==", "bodyText": "I like Error using PBKDF2 implementation from the selected Security Provider slightly more if you don't mind :)", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530303185", "createdAt": "2020-11-25T11:28:43Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -538,6 +540,8 @@ private static boolean verifyPbkdf2Hash(SecureString data, char[] hash) {\n                 .encode(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             final boolean result = CharArrays.constantTimeEquals(computedPwdHash, hashChars);\n             return result;\n+        } catch (AssertionError ae) {\n+            throw new ElasticsearchException(\"Can't use PBKDF2 implementation from the Security Provider in use.\", ae);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTQ2Nw=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxNTYxMA==", "bodyText": "Sure. My comment on this was really my OCD.", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530315610", "createdAt": "2020-11-25T11:50:30Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -538,6 +540,8 @@ private static boolean verifyPbkdf2Hash(SecureString data, char[] hash) {\n                 .encode(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             final boolean result = CharArrays.constantTimeEquals(computedPwdHash, hashChars);\n             return result;\n+        } catch (AssertionError ae) {\n+            throw new ElasticsearchException(\"Can't use PBKDF2 implementation from the Security Provider in use.\", ae);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTQ2Nw=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTc4NjkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo1MjozN1rOH5tyVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMToyNjo1NVrOH6XWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4MTA0Ng==", "bodyText": "I wonder whether we could just be very liberal and catch a Throwable here. So we are sure nothing is going to trip it regardless of the provider.", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530281046", "createdAt": "2020-11-25T10:52:37Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5OTI2OQ==", "bodyText": "I went back and forth as to how wide the net should be. My counter argument is that when something throws an Error instead of an Exception it supposedly denotes an irrecoverable error. We know that this is not true for the AssertionError that BCFIPS throws here, but can we be certain that we want to catch all Throwables that can be thrown from external code. We don't do that in any other place. WDYT ?", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530299269", "createdAt": "2020-11-25T11:22:06Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4MTA0Ng=="}, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3OTMzNw==", "bodyText": "+1 to leave it this way, we shoudn't catch potentially irrecoverable exceptions", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530379337", "createdAt": "2020-11-25T13:37:46Z", "author": {"login": "BigPandaToo"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4MTA0Ng=="}, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzODgwNw==", "bodyText": "You got me thinking again @ywangd .. On the one hand, I tried to limit the scope of these try-catch blocks to a min so it makes sense that we would catch all irrecoverable errors from that line and give out an error message. On the other hand, the very limited scope makes it less possible that a wider net would catch issues thrown by other security providers that we know nothing of (other than the PBKDF2 112 bits limitation). I'm a bit torn on this one", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530838807", "createdAt": "2020-11-26T08:09:27Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4MTA0Ng=="}, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjEyMw==", "bodyText": "Had a short chat with Yang and we decided that catching Error is the way to go based on the arguments that have been made already in this PR", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530962123", "createdAt": "2020-11-26T11:26:55Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4MTA0Ng=="}, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTgyNTcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowMjowNFrOH5uJvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNTowN1rOH5vAgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NzAzOQ==", "bodyText": "We throw ElasticsearchException in other places while throwing GeneralSecurityException here. Do we want to be consistent?\nNit: extra space (and the period?) at the end of the error message string :)", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530287039", "createdAt": "2020-11-25T11:02:04Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {\n+            throw new GeneralSecurityException(\"Error generating an encryption key from the provided password. \", ae);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMTA1OA==", "bodyText": "We throw ElasticsearchException in other places while throwing GeneralSecurityException here. Do we want to be consistent?\n\nWe don't have consistency over this. I don't know if it should. Choice might seem arbitrary but I did put some thought in it.  I went with a GeneralSecurityException in the KeyStoreWrapper since it is an exception that is already used in similar issues here. I chose ElasticsearchException in Hasher as a generic elasticsearch related exception because I didn't find any one more specific that would make much sense. Happy to discuss and change that approach if you or Lyudmila have better suggestions", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530301058", "createdAt": "2020-11-25T11:25:07Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {\n+            throw new GeneralSecurityException(\"Error generating an encryption key from the provided password. \", ae);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NzAzOQ=="}, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjQ4NjMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mzo0M1rOH50aYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDowOTozMlrOH51ESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTYwMg==", "bodyText": "Are we OK with just swallowing exceptions of any other causes?", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530389602", "createdAt": "2020-11-25T13:53:43Z", "author": {"login": "BigPandaToo"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -71,11 +71,11 @@ protected static SecureString readPassword(Terminal terminal, boolean withVerifi\n      * Decrypt the {@code keyStore}, prompting the user to enter the password in the {@link Terminal} if it is password protected\n      */\n     protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal terminal)\n-        throws UserException, GeneralSecurityException, IOException {\n+        throws UserException, IOException {\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (SecurityException | GeneralSecurityException e) {\n             if (e.getCause() instanceof AEADBadTagException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752b77acc654808bbcb23d620ecaf0d0aba1ca3b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMDMyOQ==", "bodyText": "This is addressed in #65366 that is already merged", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530400329", "createdAt": "2020-11-25T14:09:32Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -71,11 +71,11 @@ protected static SecureString readPassword(Terminal terminal, boolean withVerifi\n      * Decrypt the {@code keyStore}, prompting the user to enter the password in the {@link Terminal} if it is password protected\n      */\n     protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal terminal)\n-        throws UserException, GeneralSecurityException, IOException {\n+        throws UserException, IOException {\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (SecurityException | GeneralSecurityException e) {\n             if (e.getCause() instanceof AEADBadTagException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTYwMg=="}, "originalCommit": {"oid": "752b77acc654808bbcb23d620ecaf0d0aba1ca3b"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1902, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}