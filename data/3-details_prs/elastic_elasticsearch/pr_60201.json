{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MTM2ODAx", "number": 60201, "title": "Don't Allocate Redundant Pages in BigArrays", "bodyText": "The oversize algorithm was allocating more pages than necessary to accomodate minTargetSize.\nAn example would be that a 16k page size and 15k minTargetSize would result in a new size of 32k (2 pages).\nThe difference between the minimum number of necessary pages and the estimated size then keeps growing as sizes increase in absolute terms the larger the minTargetSize becomes.\nI don't think there is much value in preemptively allocating pages by oversizing aggressively since the behavior of\nthe system is quite different from that of a single array where oversizing avoids copying\nonce the minimum target size is more than a single page. The benefits of eagerly over-sizing by multiple pages then is reduced to reducing the amount of housekeeping org.elasticsearch.common.util.BigByteArray#resize has to do but that is a minor concern as far as I can see, especially since it uses ArrayUtil.oversize to size its internal array of byte[] and thus will not have to resize its internal structures on every new page allocation.\nRelates e.g. #60173 which lead me to this when BytesStreamOutput would allocate a large number of never used\npages during serialization of repository metadata.", "createdAt": "2020-07-27T12:39:55Z", "url": "https://github.com/elastic/elasticsearch/pull/60201", "merged": true, "mergeCommit": {"oid": "f8c8dcfc86fd177ae37ba0dd514161e78efa1eae"}, "closed": true, "closedAt": "2020-07-30T07:59:11Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5A5gvgH2gAyNDU3MTM2ODAxOjUzYzJkM2Q4MmI5ZTg2MGM3NTg5MDQ0M2VkYTE0ZDFiZGQxYTQ0OGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5yCFrAFqTQ1NzkxNjI2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/53c2d3d82b9e860c75890443eda14d1bdd1a448a", "committedDate": "2020-07-27T12:22:35Z", "message": "Don't Allocate Redundant Pages in BigArrays\n\nThe oversize algorithm was allocating more pages than necessary to accomodate `minTargetSize`.\nAn example would be that a 16k page size and 15k `minTargetSize` would result in a new size of 32k (2 pages).\nThe difference between the minimum number of necessary pages and the estimated size then keeps growing as sizes increase.\n\nI don't think there is much value in preemptively allocating pages by oversizing aggressively since the behavior of\nthe system is quite different from that of a single array where oversizing avoids copying\nonce the minimum target size is more than a single page.\n\nRelates #60173 which lead me to this when `BytesStreamOutput` would allocate a large number of never used\npages during serialization of repository metadata."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTMzMzMy", "url": "https://github.com/elastic/elasticsearch/pull/60201#pullrequestreview-457533332", "createdAt": "2020-07-29T13:42:26Z", "commit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MjoyNlrOG45Biw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MzozNVrOG45Epw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzcyMw==", "bodyText": "This now doesn't always return a multiple of pageSize; is that deliberate? Maybe it's ok, but if it is ok then why do we put effort into rounding newSize up to the next multiple of pageSize in the else branch?", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462307723", "createdAt": "2020-07-29T13:42:26Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwODUxOQ==", "bodyText": "Optional suggestion, I prefer this implementation of ceil(n/d).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);\n          \n          \n            \n                        final long pages = (minTargetSize + pageSize - 1) / pageSize; // ceil(minTargetSize/pageSize)\n          \n          \n            \n                        newSize = pages * pageSize;", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462308519", "createdAt": "2020-07-29T13:43:35Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {\n-            // round to a multiple of pageSize\n-            newSize = newSize - (newSize % pageSize) + pageSize;\n-            assert newSize % pageSize == 0;\n+            newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b581b01f0a7726197d2cab606282d72c3c450df", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/7b581b01f0a7726197d2cab606282d72c3c450df", "committedDate": "2020-07-29T14:11:56Z", "message": "Update server/src/main/java/org/elasticsearch/common/util/BigArrays.java\n\nCo-authored-by: David Turner <david.turner@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9142bc39057caf3e5267a2c88a2c58667123fcf1", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/9142bc39057caf3e5267a2c88a2c58667123fcf1", "committedDate": "2020-07-29T14:12:26Z", "message": "Merge remote-tracking branch 'elastic/master' into large-snapshot-memory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTgwMzUw", "url": "https://github.com/elastic/elasticsearch/pull/60201#pullrequestreview-457580350", "createdAt": "2020-07-29T14:29:51Z", "commit": {"oid": "9142bc39057caf3e5267a2c88a2c58667123fcf1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyOTo1MlrOG47PcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyOTo1MlrOG47PcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDA0OQ==", "bodyText": "Stronger assertions that would have avoided my confusion here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(size - minSize, lessThan((long) pageSize));\n          \n          \n            \n                    assertThat(size, greaterThanOrEqualTo((long)minSize));\n          \n          \n            \n                    if (size >= pageSize) {\n          \n          \n            \n                        assertThat(size + \" is a multiple of \" + pageSize, size % pageSize, equalTo(0L));\n          \n          \n            \n                    }\n          \n          \n            \n                    assertThat(size - minSize, lessThan((long) pageSize));", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462344049", "createdAt": "2020-07-29T14:29:52Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java", "diffHunk": "@@ -389,6 +390,13 @@ public void testEstimatedBytesSameAsActualBytes() throws Exception {\n         }\n     }\n \n+    public void testOverSizeUsesMinPageCount() {\n+        final int pageSize = 1 << (randomIntBetween(2, 16));\n+        final int minSize = randomIntBetween(1, pageSize) * randomIntBetween(1, 100);\n+        final long size = BigArrays.overSize(minSize, pageSize, 1);\n+        assertThat(size - minSize, lessThan((long) pageSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9142bc39057caf3e5267a2c88a2c58667123fcf1"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df555888b0ac4a4d6dd8ca77b95395d8b7277711", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/df555888b0ac4a4d6dd8ca77b95395d8b7277711", "committedDate": "2020-07-29T14:31:45Z", "message": "Update server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java\n\nCo-authored-by: David Turner <david.turner@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b763bbe1686094ca40c22a7f1af090b84d4c857", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b763bbe1686094ca40c22a7f1af090b84d4c857", "committedDate": "2020-07-29T14:45:14Z", "message": "Merge remote-tracking branch 'elastic/master' into large-snapshot-memory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/99a3d94c46c0c2763e8097efbf7c604648a99383", "committedDate": "2020-07-29T14:45:49Z", "message": "imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTk2OTM3", "url": "https://github.com/elastic/elasticsearch/pull/60201#pullrequestreview-457596937", "createdAt": "2020-07-29T14:46:10Z", "commit": {"oid": "df555888b0ac4a4d6dd8ca77b95395d8b7277711"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzIzMzA4", "url": "https://github.com/elastic/elasticsearch/pull/60201#pullrequestreview-457723308", "createdAt": "2020-07-29T17:09:47Z", "commit": {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTo0N1rOG5CAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTo1NVrOG5CA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDkxMw==", "bodyText": "I wonder if resizeInPlace took a number of pages instead of a size and we only used oversize for when the size is less than a page. We may not need this method at all in that case. I just feel like we're doing something like (pages + 1) * pageSize / pageSize and it feels clumsy.", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462454913", "createdAt": "2020-07-29T17:09:47Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,10 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NTAwNA==", "bodyText": "It'd be a bigger change though.", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462455004", "createdAt": "2020-07-29T17:09:55Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,10 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDkxMw=="}, "originalCommit": {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTE2MjY1", "url": "https://github.com/elastic/elasticsearch/pull/60201#pullrequestreview-457916265", "createdAt": "2020-07-29T21:37:18Z", "commit": {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4789, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}