{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTg3ODg0", "number": 60158, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0NDo1OFrOERpB8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0NDo1OFrOERpB8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMzNDkxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DocFieldsPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0NDo1OFrOG2eECg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1MDowMlrOG2eKdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2ODg0Mg==", "bodyText": "You didn't want to just make this an if/else?", "url": "https://github.com/elastic/elasticsearch/pull/60158#discussion_r459768842", "createdAt": "2020-07-23T22:44:58Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DocFieldsPhase.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.node.AExpression;\n+import org.elasticsearch.painless.node.EBrace;\n+import org.elasticsearch.painless.node.ECall;\n+import org.elasticsearch.painless.node.EDot;\n+import org.elasticsearch.painless.node.EString;\n+import org.elasticsearch.painless.node.ESymbol;\n+import org.elasticsearch.painless.symbol.Decorations;\n+import org.elasticsearch.painless.symbol.ScriptScope;\n+\n+import java.util.List;\n+\n+/**\n+ * Find all document field accesses.\n+ */\n+public class DocFieldsPhase extends UserTreeBaseVisitor<ScriptScope> {\n+    @Override\n+    public void visitSymbol(ESymbol userSymbolNode, ScriptScope scriptScope) {\n+        // variables are a leaf node\n+        if (userSymbolNode.getSymbol().equals(\"doc\")) {\n+            scriptScope.setCondition(userSymbolNode, Decorations.IsDocument.class);\n+        }\n+    }\n+\n+    @Override\n+    public void visitBrace(EBrace userBraceNode, ScriptScope scriptScope) {\n+        userBraceNode.getPrefixNode().visit(this, scriptScope);\n+        scriptScope.replicateCondition(userBraceNode.getPrefixNode(), userBraceNode.getIndexNode(), Decorations.IsDocument.class);\n+        userBraceNode.getIndexNode().visit(this, scriptScope);\n+    }\n+\n+    @Override\n+    public void visitDot(EDot userDotNode, ScriptScope scriptScope) {\n+        AExpression prefixNode = userDotNode.getPrefixNode();\n+        prefixNode.visit(this, scriptScope);\n+        if (scriptScope.getCondition(prefixNode, Decorations.IsDocument.class)) {\n+            scriptScope.addDocField(userDotNode.getIndex());\n+        }\n+    }\n+\n+    @Override\n+    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n+        // looking for doc.get\n+        AExpression prefixNode = userCallNode.getPrefixNode();\n+        prefixNode.visit(this, scriptScope);\n+\n+        List<AExpression> argumentNodes = userCallNode.getArgumentNodes();\n+        if (argumentNodes.size() != 1 || userCallNode.getMethodName().equals(\"get\") == false) {\n+            for (AExpression argumentNode : argumentNodes) {\n+                argumentNode.visit(this, scriptScope);\n+            }\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34e14c71719d52def7f077ceb048113c6954ecf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MDQ4NA==", "bodyText": "Why yes I did.", "url": "https://github.com/elastic/elasticsearch/pull/60158#discussion_r459770484", "createdAt": "2020-07-23T22:50:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DocFieldsPhase.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.node.AExpression;\n+import org.elasticsearch.painless.node.EBrace;\n+import org.elasticsearch.painless.node.ECall;\n+import org.elasticsearch.painless.node.EDot;\n+import org.elasticsearch.painless.node.EString;\n+import org.elasticsearch.painless.node.ESymbol;\n+import org.elasticsearch.painless.symbol.Decorations;\n+import org.elasticsearch.painless.symbol.ScriptScope;\n+\n+import java.util.List;\n+\n+/**\n+ * Find all document field accesses.\n+ */\n+public class DocFieldsPhase extends UserTreeBaseVisitor<ScriptScope> {\n+    @Override\n+    public void visitSymbol(ESymbol userSymbolNode, ScriptScope scriptScope) {\n+        // variables are a leaf node\n+        if (userSymbolNode.getSymbol().equals(\"doc\")) {\n+            scriptScope.setCondition(userSymbolNode, Decorations.IsDocument.class);\n+        }\n+    }\n+\n+    @Override\n+    public void visitBrace(EBrace userBraceNode, ScriptScope scriptScope) {\n+        userBraceNode.getPrefixNode().visit(this, scriptScope);\n+        scriptScope.replicateCondition(userBraceNode.getPrefixNode(), userBraceNode.getIndexNode(), Decorations.IsDocument.class);\n+        userBraceNode.getIndexNode().visit(this, scriptScope);\n+    }\n+\n+    @Override\n+    public void visitDot(EDot userDotNode, ScriptScope scriptScope) {\n+        AExpression prefixNode = userDotNode.getPrefixNode();\n+        prefixNode.visit(this, scriptScope);\n+        if (scriptScope.getCondition(prefixNode, Decorations.IsDocument.class)) {\n+            scriptScope.addDocField(userDotNode.getIndex());\n+        }\n+    }\n+\n+    @Override\n+    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n+        // looking for doc.get\n+        AExpression prefixNode = userCallNode.getPrefixNode();\n+        prefixNode.visit(this, scriptScope);\n+\n+        List<AExpression> argumentNodes = userCallNode.getArgumentNodes();\n+        if (argumentNodes.size() != 1 || userCallNode.getMethodName().equals(\"get\") == false) {\n+            for (AExpression argumentNode : argumentNodes) {\n+                argumentNode.visit(this, scriptScope);\n+            }\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2ODg0Mg=="}, "originalCommit": {"oid": "c34e14c71719d52def7f077ceb048113c6954ecf"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2048, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}