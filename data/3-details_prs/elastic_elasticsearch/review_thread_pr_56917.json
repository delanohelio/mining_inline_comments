{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjM1MzMy", "number": 56917, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowNzozNFrOD9tRPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyMTowOVrOD-Ju3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDMxNDIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowNzozNFrOGXXDIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1NDowNVrOGYM5Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODA2NA==", "bodyText": "Maybe we should log here, since this is not only for testing.", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427148064", "createdAt": "2020-05-19T09:07:34Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now\n+                    } catch (IOException e) {/* ignore any closing failure */}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI2MTQzNg==", "bodyText": "We could, but where: the CLI client uses java.util.logging, but JDBC uses it's own logging. Would hooking into either just for this warning - since it's not really an error - be justified?", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427261436", "createdAt": "2020-05-19T12:26:54Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now\n+                    } catch (IOException e) {/* ignore any closing failure */}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODA2NA=="}, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDI0Mg==", "bodyText": "Probably not I guess...", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r428030242", "createdAt": "2020-05-20T13:54:05Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now\n+                    } catch (IOException e) {/* ignore any closing failure */}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODA2NA=="}, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDMxNjYzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowODowOVrOGXXEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNjo0MFrOGXf6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODQ0NQ==", "bodyText": "Shouldn't this be in a finally block to return not only in case of exception?", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427148445", "createdAt": "2020-05-19T09:08:09Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now\n+                    } catch (IOException e) {/* ignore any closing failure */}\n+                    return manifest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI2MTIwOQ==", "bodyText": "Not sure I get your suggestion: the function returns irrespective of an IOException being raised. Or are you rather suggesting to return a version (in the calling function), also when an IOExceptoin is raised (which we currently propagate into a IllegalArgumentException)?", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427261209", "createdAt": "2020-05-19T12:26:33Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now\n+                    } catch (IOException e) {/* ignore any closing failure */}\n+                    return manifest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODQ0NQ=="}, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzIwMQ==", "bodyText": "My bad, sorry, misread that the return is within the catch block.", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427293201", "createdAt": "2020-05-19T13:16:40Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now\n+                    } catch (IOException e) {/* ignore any closing failure */}\n+                    return manifest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODQ0NQ=="}, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU4ODY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNzo0OVrOGXjo3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MDowOFrOGXpIRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDMzMg==", "bodyText": "Here both getJarFile() and .close() can throw an IOException. getManifest() call above does use getJarFile() so the danger of an IOException being thrown while calling getJarFile() wouldn't be ignored, is not justified.\nBut, would make sense to call jarConn.getJarFile() and reuse this object in both getManifest() and .close() calls?", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427354332", "createdAt": "2020-05-19T14:37:49Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NDI5Mg==", "bodyText": "why is this .close() needed now, but wasn't needed before?\n\nWe just didn't test with JAR non-entry URLs. The tests were using file (i.e. setting the ClientVersion.CURRENT) and entry JAR URLs (i.e. the JarInJar test).\n\nHere both getJarFile() and .close() can throw an IOException.\n\nTrue. And while the former's exception should surface, the latter (if it can ever occur) is non-critical.\n\nwould make sense to call jarConn.getJarFile() and reuse this object in both getManifest() and .close() calls?\n\nThat exposes a bit more of \"deprecated\" surface and is more verbose, but I see how this would make sense. I've applied your suggestion.", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427444292", "createdAt": "2020-05-19T16:40:08Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +88,11 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    Manifest manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    try {\n+                        jarConn.getJarFile().close(); // prevent locked file errors in Windows. The Manifest has been read by now", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDMzMg=="}, "originalCommit": {"oid": "6d9fe2c0dafd0b6d449645ac7aed68e62bde3a42"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDk3NzU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyMTowOVrOGYFAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNToyNDo0OVrOGYRRWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDk5MA==", "bodyText": "I suggest using the try/close approach - it's similar but more concise:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                JarFile jar = jarConn.getJarFile();\n          \n          \n            \n            if (jarConn.getEntryName() == null) {\n          \n          \n            \n             try (JarFile jar = jarconn.getJarFile()) {\n          \n          \n            \n                  return jar.getManifest();\n          \n          \n            \n              }\n          \n          \n            \n            }", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r427900990", "createdAt": "2020-05-20T10:21:09Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +89,12 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    JarFile jar = jarConn.getJarFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb19a0db94a43b2fab6f386644456c5b0ba3f42"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5OTk5Nw==", "bodyText": "Beautiful, forgot JarFile implements AutoCloseable. Thanks!", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r428099997", "createdAt": "2020-05-20T15:22:07Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +89,12 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    JarFile jar = jarConn.getJarFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDk5MA=="}, "originalCommit": {"oid": "4bb19a0db94a43b2fab6f386644456c5b0ba3f42"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMTk3OQ==", "bodyText": "For the record, that will still interrupt the loading if closing fails (while it shouldn't), but OTOH, I can't imagine a case where opening would work, but closing not.", "url": "https://github.com/elastic/elasticsearch/pull/56917#discussion_r428101979", "createdAt": "2020-05-20T15:24:49Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -87,7 +89,12 @@ static Manifest getManifest(URL url) throws IOException {\n             if (url.getProtocol().equals(\"jar\")) {\n                 JarURLConnection jarConn = (JarURLConnection) conn;\n                 if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n-                    return jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                    JarFile jar = jarConn.getJarFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDk5MA=="}, "originalCommit": {"oid": "4bb19a0db94a43b2fab6f386644456c5b0ba3f42"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 351, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}