{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMTI0MjQ0", "number": 58885, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDowMDo0MVrOELMqsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo0OTowOFrOEMfyaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTc3MzMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/index/IndexRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDowMDo0MVrOGsrI-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDowMDo0MVrOGsrI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ5NzMzOQ==", "bodyText": "While I think that this should be ok for now, it's critical to confirm though that our accounting is not completely off with some tests/benchmarks.\nA first test to ensure that we are not vastly underaccounting should have a high indices.write.limit (e.g. 80%) and check that we don't hit the real-memory circuit breaker when we are filling up the node (should probably block requests from being processed), but rather the indices.write.limit instead.\nA second test to ensure that we are not vastly overaccounting should have a low indices.write.limit, for example (e.g. 100MB), and show that we can still put a decently large number of requests to the system (i.e. send bulks that are in total making up 80MB in input size) without reaching the limit.\nThird we need to check what the overhead of primaries is to wait on replica responses (i.e. memory consumed by listeners etc.). For that we should block processing on a replica, and fill up a primary and see how much memory is being consumed.", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r449497339", "createdAt": "2020-07-03T10:00:41Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/index/IndexRequest.java", "diffHunk": "@@ -697,6 +697,6 @@ public long getAutoGeneratedTimestamp() {\n \n     @Override\n     public long ramBytesUsed() {\n-        return SHALLOW_SIZE + RamUsageEstimator.sizeOf(id) + (source == null ? 0 : source.ramBytesUsed());\n+        return SHALLOW_SIZE + RamUsageEstimator.sizeOf(id) + (source == null ? 0 : source.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1292822b9404500b188df1c14c8f5c9c0b520cfa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTc4NjM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDowNDo1MVrOGsrQ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDowNDo1MVrOGsrQ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ5OTM2MA==", "bodyText": "I discussed this with Henning, and we think that a second replica limit would be useful here (e.g. defaulting to 1,5 times the indices.write.limit). In the past we have been rejecting replica operations at the real-memory circuit breaker limit (i.e. 95%), which can have adverse effects on the rest of the system. We should have another limit for replicas much lower than that. It won't solve all problems with handling primary vs replica bytes, but it puts an additional safeguard into the system.", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r449499360", "createdAt": "2020-07-03T10:04:51Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "diffHunk": "@@ -20,17 +20,50 @@\n package org.elasticsearch.action.bulk;\n \n import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n public class WriteMemoryLimits {\n \n+    // TODO: Adjust\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indices.write.limit\", \"10%\", Setting.Property.NodeScope, Setting.Property.Dynamic);\n+\n     private final AtomicLong writeBytes = new AtomicLong(0);\n     private final AtomicLong replicaWriteBytes = new AtomicLong(0);\n+    private volatile long writeLimits;\n+\n+    public WriteMemoryLimits(Settings settings, ClusterSettings clusterSettings) {\n+        this.writeLimits = MAX_INDEXING_BYTES.get(settings).getBytes();\n+        clusterSettings.addSettingsUpdateConsumer(MAX_INDEXING_BYTES, value -> writeLimits = value.getBytes());\n+    }\n \n     public Releasable markWriteOperationStarted(long bytes) {\n-        writeBytes.addAndGet(bytes);\n-        return () -> writeBytes.getAndAdd(-bytes);\n+        return markWriteOperationStarted(bytes, false);\n+    }\n+\n+    public Releasable markWriteOperationStarted(long bytes, boolean forceExecution) {\n+        long writeBytes = this.writeBytes.addAndGet(bytes);\n+        long replicaWriteBytes = this.replicaWriteBytes.get();\n+        long totalBytes = writeBytes + replicaWriteBytes;\n+        long localWriteLimits = this.writeLimits;\n+        if (forceExecution == false && totalBytes > localWriteLimits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1292822b9404500b188df1c14c8f5c9c0b520cfa"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTc5MTY2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDowNjo0N1rOGsrUQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo0MTozOFrOGtqaeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUwMDIyNw==", "bodyText": "10% can be quite a lot for a system with a big heap (i.e. 3GB for a 32GB heap). Should we put an upper bound on this number? Can we run some benchmarks to determine what a good limit would look like (e.g. by checking the lowest limit we can get away with using our current Rally benchmarks).", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r449500227", "createdAt": "2020-07-03T10:06:47Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "diffHunk": "@@ -20,17 +20,50 @@\n package org.elasticsearch.action.bulk;\n \n import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n public class WriteMemoryLimits {\n \n+    // TODO: Adjust\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indices.write.limit\", \"10%\", Setting.Property.NodeScope, Setting.Property.Dynamic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1292822b9404500b188df1c14c8f5c9c0b520cfa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyMTI3Mg==", "bodyText": "I'm not sure what rally benchmarks you are referring to? All of the rally benchmarks by default are going to use very little indexing memory since they don't use many clients.\nI ran some benchmarks today with 10K clients per node and have some numbers. But those a pretty specific to the security use case. We can talk about them tomorrow. But generally the CPUs were saturated with indexing and write queue latency was pretty high (ranging from 50ms - 2s through the benchmark.) In these benchmarks the write limits tended to be 200-300MB and the replica limits tended to be 10-80MB.", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r450521272", "createdAt": "2020-07-06T22:58:46Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "diffHunk": "@@ -20,17 +20,50 @@\n package org.elasticsearch.action.bulk;\n \n import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n public class WriteMemoryLimits {\n \n+    // TODO: Adjust\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indices.write.limit\", \"10%\", Setting.Property.NodeScope, Setting.Property.Dynamic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUwMDIyNw=="}, "originalCommit": {"oid": "1292822b9404500b188df1c14c8f5c9c0b520cfa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNDAwOA==", "bodyText": "I'm not exactly sure what specific benchmarks you want here. I have run this with some concurrent security benchmarks and have a good idea about the write limits under various load. But our normally nightly rally benchmarks use very few clients and will not consume significant indexing memory.", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r450534008", "createdAt": "2020-07-06T23:41:38Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "diffHunk": "@@ -20,17 +20,50 @@\n package org.elasticsearch.action.bulk;\n \n import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n public class WriteMemoryLimits {\n \n+    // TODO: Adjust\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indices.write.limit\", \"10%\", Setting.Property.NodeScope, Setting.Property.Dynamic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUwMDIyNw=="}, "originalCommit": {"oid": "1292822b9404500b188df1c14c8f5c9c0b520cfa"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTM2MDU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo0MjoyMFrOGuoopQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDoxMToyNFrOGuqApw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1MzQ0NQ==", "bodyText": "As discussed, let's make this a non-dynamic node setting. We also need to discuss whether we should white-list this setting in Cloud (so that users can change it there).\nI think that we should not pick a setting name that is under the  \"indices\" namespace, but perhaps introduce something completely new, for example indexing_limits.memory.limit", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r451553445", "createdAt": "2020-07-08T13:42:20Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "diffHunk": "@@ -20,26 +20,68 @@\n package org.elasticsearch.action.bulk;\n \n import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n public class WriteMemoryLimits {\n \n+    // TODO: Adjust\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indices.write.limit\", \"10%\", Setting.Property.NodeScope, Setting.Property.Dynamic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba3bb15fe1e7c61727574f6c296d9f0f85ab656"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3NTk3NQ==", "bodyText": "I changed the name and made it non-dynamic.", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r451575975", "createdAt": "2020-07-08T14:11:24Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/WriteMemoryLimits.java", "diffHunk": "@@ -20,26 +20,68 @@\n package org.elasticsearch.action.bulk;\n \n import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n public class WriteMemoryLimits {\n \n+    // TODO: Adjust\n+    public static final Setting<ByteSizeValue> MAX_INDEXING_BYTES =\n+        Setting.memorySizeSetting(\"indices.write.limit\", \"10%\", Setting.Property.NodeScope, Setting.Property.Dynamic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1MzQ0NQ=="}, "originalCommit": {"oid": "cba3bb15fe1e7c61727574f6c296d9f0f85ab656"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTM5MTc5OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/action/bulk/WriteMemoryLimitsIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo0OTowOFrOGuo8FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDoxMTowOFrOGup_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1ODQyMQ==", "bodyText": "As we discussed, we eventually want to have a test that also covers the rest layer.", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r451558421", "createdAt": "2020-07-08T13:49:08Z", "author": {"login": "ywelsch"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/action/bulk/WriteMemoryLimitsIT.java", "diffHunk": "@@ -210,16 +185,242 @@ public void testWriteBytesAreIncremented() throws Exception {\n             if (replicationSendPointReached.getCount() > 0) {\n                 replicationSendPointReached.countDown();\n             }\n-            while (newActionsSendPointReached.getCount() > 0) {\n-                newActionsSendPointReached.countDown();\n-            }\n+            replicaRelease.close();\n             if (latchBlockingReplicationSend.getCount() > 0) {\n                 latchBlockingReplicationSend.countDown();\n             }\n-            if (latchBlockingReplication.getCount() > 0) {\n-                latchBlockingReplication.countDown();\n-            }\n+            replicaRelease.close();\n             primaryTransportService.clearAllRules();\n         }\n     }\n+\n+    public void testWriteCanBeRejectedAtCoordinatingLevel() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba3bb15fe1e7c61727574f6c296d9f0f85ab656"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3NTc0Nw==", "bodyText": "I added a comment.", "url": "https://github.com/elastic/elasticsearch/pull/58885#discussion_r451575747", "createdAt": "2020-07-08T14:11:08Z", "author": {"login": "tbrooks8"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/action/bulk/WriteMemoryLimitsIT.java", "diffHunk": "@@ -210,16 +185,242 @@ public void testWriteBytesAreIncremented() throws Exception {\n             if (replicationSendPointReached.getCount() > 0) {\n                 replicationSendPointReached.countDown();\n             }\n-            while (newActionsSendPointReached.getCount() > 0) {\n-                newActionsSendPointReached.countDown();\n-            }\n+            replicaRelease.close();\n             if (latchBlockingReplicationSend.getCount() > 0) {\n                 latchBlockingReplicationSend.countDown();\n             }\n-            if (latchBlockingReplication.getCount() > 0) {\n-                latchBlockingReplication.countDown();\n-            }\n+            replicaRelease.close();\n             primaryTransportService.clearAllRules();\n         }\n     }\n+\n+    public void testWriteCanBeRejectedAtCoordinatingLevel() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1ODQyMQ=="}, "originalCommit": {"oid": "cba3bb15fe1e7c61727574f6c296d9f0f85ab656"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2125, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}