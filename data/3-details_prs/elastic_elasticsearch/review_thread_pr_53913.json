{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzg4NzY0", "number": 53913, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozMDozNlrODqn34A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo1MDowM1rODraYTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIwMDY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Phase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozMDozNlrOF6e-Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MzozMVrOF7vg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTIxNA==", "bodyText": "Can you add an assert Version.CURRENT.major < 9 so that we remove this when we bump master to 9.0.0?", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396869214", "createdAt": "2020-03-24T02:30:36Z", "author": {"login": "jasontedor"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Phase.java", "diffHunk": "@@ -40,7 +44,19 @@\n                     .collect(Collectors.toMap(LifecycleAction::getWriteableName, Function.identity()))));\n     static {\n         PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(),\n-                (p, c) -> TimeValue.parseTimeValue(p.text(), MIN_AGE.getPreferredName()), MIN_AGE, ValueType.VALUE);\n+            (ContextParser<String, Object>) (p, c) -> {\n+                // In earlier versions it was possible to create a Phase with a negative `min_age` which would then cause errors\n+                // when the phase is read from the cluster state during startup (even before negative timevalues were strictly\n+                // disallowed) so this is a hack to treat negative `min_age`s as 0 to prevent those errors.\n+                // They will be saved as `0` so this hack can be removed once we no longer have to read cluster states from 7.x.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5baf1f5bf717e886f83dc6864e92a9432c5b9143"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODc2MA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r398188760", "createdAt": "2020-03-25T21:43:31Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Phase.java", "diffHunk": "@@ -40,7 +44,19 @@\n                     .collect(Collectors.toMap(LifecycleAction::getWriteableName, Function.identity()))));\n     static {\n         PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(),\n-                (p, c) -> TimeValue.parseTimeValue(p.text(), MIN_AGE.getPreferredName()), MIN_AGE, ValueType.VALUE);\n+            (ContextParser<String, Object>) (p, c) -> {\n+                // In earlier versions it was possible to create a Phase with a negative `min_age` which would then cause errors\n+                // when the phase is read from the cluster state during startup (even before negative timevalues were strictly\n+                // disallowed) so this is a hack to treat negative `min_age`s as 0 to prevent those errors.\n+                // They will be saved as `0` so this hack can be removed once we no longer have to read cluster states from 7.x.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTIxNA=="}, "originalCommit": {"oid": "5baf1f5bf717e886f83dc6864e92a9432c5b9143"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIxNTQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0MDowNlrOF6fHiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0NDowOFrOF7viAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTU2Mw==", "bodyText": "I'm not sure that I like that we are manually parsing settings here. I understand that we're doing it to have the full setting name. How about:\ndiff --git a/server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java b/server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java\nindex 5744814293f..cad01bd9856 100644\n--- a/server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java\n+++ b/server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java\n@@ -165,11 +165,15 @@ public class JvmGcMonitorService extends AbstractLifecycleComponent {\n     }\n \n     private static TimeValue getValidThreshold(Settings settings, String key, String level) {\n-        final String thresholdString = settings.get(level, null);\n-        if (thresholdString == null) {\n+        final TimeValue threshold;\n+        try {\n+            threshold = settings.getAsTime(level, null);\n+        } catch (final IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"failed to parse [\" + getThresholdName(key, level) + \"]\", e);\n+        }\n+        if (threshold == null) {\n             throw new IllegalArgumentException(\"missing gc_threshold for [\" + getThresholdName(key, level) + \"]\");\n         }\n-        TimeValue threshold = TimeValue.parseTimeValue(thresholdString, null, getThresholdName(key, level));\n         return threshold;\n     }\nand the necessary update to the test (assert the message, assert the cause, assert the message on the cause)?", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396871563", "createdAt": "2020-03-24T02:40:06Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java", "diffHunk": "@@ -165,13 +165,11 @@ public JvmGcMonitorService(Settings settings, ThreadPool threadPool) {\n     }\n \n     private static TimeValue getValidThreshold(Settings settings, String key, String level) {\n-        TimeValue threshold = settings.getAsTime(level, null);\n-        if (threshold == null) {\n+        final String thresholdString = settings.get(level, null);\n+        if (thresholdString == null) {\n             throw new IllegalArgumentException(\"missing gc_threshold for [\" + getThresholdName(key, level) + \"]\");\n         }\n-        if (threshold.nanos() <= 0) {\n-            throw new IllegalArgumentException(\"invalid gc_threshold [\" + threshold + \"] for [\" + getThresholdName(key, level) + \"]\");\n-        }\n+        TimeValue threshold = TimeValue.parseTimeValue(thresholdString, null, getThresholdName(key, level));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5baf1f5bf717e886f83dc6864e92a9432c5b9143"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NDY0Mg==", "bodyText": "Or even catch RuntimeException I would be fine with too.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396874642", "createdAt": "2020-03-24T02:52:09Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java", "diffHunk": "@@ -165,13 +165,11 @@ public JvmGcMonitorService(Settings settings, ThreadPool threadPool) {\n     }\n \n     private static TimeValue getValidThreshold(Settings settings, String key, String level) {\n-        TimeValue threshold = settings.getAsTime(level, null);\n-        if (threshold == null) {\n+        final String thresholdString = settings.get(level, null);\n+        if (thresholdString == null) {\n             throw new IllegalArgumentException(\"missing gc_threshold for [\" + getThresholdName(key, level) + \"]\");\n         }\n-        if (threshold.nanos() <= 0) {\n-            throw new IllegalArgumentException(\"invalid gc_threshold [\" + threshold + \"] for [\" + getThresholdName(key, level) + \"]\");\n-        }\n+        TimeValue threshold = TimeValue.parseTimeValue(thresholdString, null, getThresholdName(key, level));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTU2Mw=="}, "originalCommit": {"oid": "5baf1f5bf717e886f83dc6864e92a9432c5b9143"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4OTA1Ng==", "bodyText": "I've replaced this with something very similar to what you suggested, catching RuntimeException as not much else could go wrong trying to get the setting other than a parsing failure.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r398189056", "createdAt": "2020-03-25T21:44:08Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java", "diffHunk": "@@ -165,13 +165,11 @@ public JvmGcMonitorService(Settings settings, ThreadPool threadPool) {\n     }\n \n     private static TimeValue getValidThreshold(Settings settings, String key, String level) {\n-        TimeValue threshold = settings.getAsTime(level, null);\n-        if (threshold == null) {\n+        final String thresholdString = settings.get(level, null);\n+        if (thresholdString == null) {\n             throw new IllegalArgumentException(\"missing gc_threshold for [\" + getThresholdName(key, level) + \"]\");\n         }\n-        if (threshold.nanos() <= 0) {\n-            throw new IllegalArgumentException(\"invalid gc_threshold [\" + threshold + \"] for [\" + getThresholdName(key, level) + \"]\");\n-        }\n+        TimeValue threshold = TimeValue.parseTimeValue(thresholdString, null, getThresholdName(key, level));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTU2Mw=="}, "originalCommit": {"oid": "5baf1f5bf717e886f83dc6864e92a9432c5b9143"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIzMDQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/shard/IndexingStats.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0OToxOVrOF6fQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0NTowNlrOF7vjyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzkzNg==", "bodyText": "Wait, this shouldn't be necessary? I see tests we are passing in -1? Those aren't realistic though, right?", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396873936", "createdAt": "2020-03-24T02:49:19Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexingStats.java", "diffHunk": "@@ -133,7 +133,12 @@ public long getDeleteCount() {\n         /**\n          * The total amount of time spend on executing delete operations.\n          */\n-        public TimeValue getDeleteTime() { return new TimeValue(deleteTimeInMillis); }\n+        public TimeValue getDeleteTime() {\n+            if (deleteTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NjI4Nw==", "bodyText": "The tests are passing in -1 but multiple of these get added together, accumulating to larger negative numbers. This applies to everywhere else you've commented this as well.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396876287", "createdAt": "2020-03-24T02:58:32Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexingStats.java", "diffHunk": "@@ -133,7 +133,12 @@ public long getDeleteCount() {\n         /**\n          * The total amount of time spend on executing delete operations.\n          */\n-        public TimeValue getDeleteTime() { return new TimeValue(deleteTimeInMillis); }\n+        public TimeValue getDeleteTime() {\n+            if (deleteTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzkzNg=="}, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NjQ5OQ==", "bodyText": "This was the part of this PR that I felt least good about. I would be happy to change this if there's another tactic that would be better.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396876499", "createdAt": "2020-03-24T02:59:25Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexingStats.java", "diffHunk": "@@ -133,7 +133,12 @@ public long getDeleteCount() {\n         /**\n          * The total amount of time spend on executing delete operations.\n          */\n-        public TimeValue getDeleteTime() { return new TimeValue(deleteTimeInMillis); }\n+        public TimeValue getDeleteTime() {\n+            if (deleteTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzkzNg=="}, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3Njg5Ng==", "bodyText": "Those aren't realistic though, right? Negative values can never happen in production, or am I reading it wrongly? If that's the case, this tests are fictional, and we shouldn't change production code, but change the tests to be more realistic.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396876896", "createdAt": "2020-03-24T03:01:06Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexingStats.java", "diffHunk": "@@ -133,7 +133,12 @@ public long getDeleteCount() {\n         /**\n          * The total amount of time spend on executing delete operations.\n          */\n-        public TimeValue getDeleteTime() { return new TimeValue(deleteTimeInMillis); }\n+        public TimeValue getDeleteTime() {\n+            if (deleteTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzkzNg=="}, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4OTUxMw==", "bodyText": "Good point, for some reason I thought these were using -1 as a sentinel value as we do in some other places, but upon a closer look that turned out to be wrong. I've reverted the changes to the *Stats classes and fixed the tests instead.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r398189513", "createdAt": "2020-03-25T21:45:06Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexingStats.java", "diffHunk": "@@ -133,7 +133,12 @@ public long getDeleteCount() {\n         /**\n          * The total amount of time spend on executing delete operations.\n          */\n-        public TimeValue getDeleteTime() { return new TimeValue(deleteTimeInMillis); }\n+        public TimeValue getDeleteTime() {\n+            if (deleteTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzkzNg=="}, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIzMDcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0OTozMVrOF6fRAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0NToyMVrOF7vkOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3Mzk4NQ==", "bodyText": "Wait, this shouldn't be necessary? I see tests we are passing in -1? Those aren't realistic though, right?", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396873985", "createdAt": "2020-03-24T02:49:31Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "diffHunk": "@@ -190,7 +196,10 @@ public long getSuggestTimeInMillis() {\n         }\n \n         public TimeValue getSuggestTime() {\n-            return new TimeValue(suggestTimeInMillis);\n+            if (suggestTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4OTYyNg==", "bodyText": "Reverted and fixed the tests, see above.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r398189626", "createdAt": "2020-03-25T21:45:21Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "diffHunk": "@@ -190,7 +196,10 @@ public long getSuggestTimeInMillis() {\n         }\n \n         public TimeValue getSuggestTime() {\n-            return new TimeValue(suggestTimeInMillis);\n+            if (suggestTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3Mzk4NQ=="}, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIzMDk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0OTozOVrOF6fRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0OTozOVrOF6fRLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NDAzMQ==", "bodyText": "Wait, this shouldn't be necessary? I see tests we are passing in -1? Those aren't realistic though, right?", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396874031", "createdAt": "2020-03-24T02:49:39Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "diffHunk": "@@ -170,7 +173,10 @@ public long getScrollCount() {\n         }\n \n         public TimeValue getScrollTime() {\n-            return new TimeValue(scrollTimeInMillis);\n+            if (scrollTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIzMTA3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0OTo0NFrOF6fRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0NToyN1rOF7vkcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NDA1MQ==", "bodyText": "Wait, this shouldn't be necessary? I see tests we are passing in -1? Those aren't realistic though, right?", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r396874051", "createdAt": "2020-03-24T02:49:44Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "diffHunk": "@@ -154,7 +154,10 @@ public long getFetchCount() {\n         }\n \n         public TimeValue getFetchTime() {\n-            return new TimeValue(fetchTimeInMillis);\n+            if (fetchTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4OTY4MQ==", "bodyText": "Reverted and fixed the tests, see above.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r398189681", "createdAt": "2020-03-25T21:45:27Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java", "diffHunk": "@@ -154,7 +154,10 @@ public long getFetchCount() {\n         }\n \n         public TimeValue getFetchTime() {\n-            return new TimeValue(fetchTimeInMillis);\n+            if (fetchTimeInMillis >= -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NDA1MQ=="}, "originalCommit": {"oid": "1f129e8747f4d903a20126b10805a6dec1a7b031"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDM5NzUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo0MTo1N1rOF7IQ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo0MTo1N1rOF7IQ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NTcxMA==", "bodyText": "Also, I'm wondering if the better long-term fix is to make the GC threshold settings not be group settings anymore, but affix settings. Then we would not need to resort this, as we'd get the proper setting named pushed down anyway, and this wrapping would be necessary. I think that would be a good follow up to this one.", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r397545710", "createdAt": "2020-03-25T00:41:57Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java", "diffHunk": "@@ -165,13 +165,20 @@ public JvmGcMonitorService(Settings settings, ThreadPool threadPool) {\n     }\n \n     private static TimeValue getValidThreshold(Settings settings, String key, String level) {\n-        TimeValue threshold = settings.getAsTime(level, null);\n+        final TimeValue threshold;\n+\n+        try {\n+            threshold = settings.getAsTime(level, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5567b7adc157c7e9eae9a3c67860634da888be84"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODQ3NTY3OnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo1MDowM1rOF7vtHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo1MDowM1rOF7vtHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5MTkwMQ==", "bodyText": "Super minor nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"durations cannot be negative, was given [\" + duration + \"]\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"duration cannot be negative, was given [\" + duration + \"]\");", "url": "https://github.com/elastic/elasticsearch/pull/53913#discussion_r398191901", "createdAt": "2020-03-25T21:50:03Z", "author": {"login": "dakrone"}, "path": "libs/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java", "diffHunk": "@@ -47,6 +47,9 @@ public TimeValue(long millis) {\n     }\n \n     public TimeValue(long duration, TimeUnit timeUnit) {\n+        if (duration < -1) {\n+            throw new IllegalArgumentException(\"durations cannot be negative, was given [\" + duration + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "996b4a2c865a095baee1166956bb85bcfe78cdf6"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4289, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}