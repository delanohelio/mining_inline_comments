{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDE2MzQy", "number": 62843, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowMDo0OVrOEnCCcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxOToxMlrOEnChwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzYzMzEzOnYy", "diffSide": "RIGHT", "path": "libs/grok/src/main/java/org/elasticsearch/grok/Grok.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowMDo0OVrOHXZgNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowMToxMVrOHXcagg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NzE0MQ==", "bodyText": "Comment should be updated, this is return boolean on success now and mutating the extracter", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494297141", "createdAt": "2020-09-24T13:00:49Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/Grok.java", "diffHunk": "@@ -252,7 +255,7 @@ public boolean match(String text) {\n      * @param length length of the text to match\n      * @return a map containing field names and their respective coerced values that matched.\n      */\n-    public Map<String, Object> captures(byte[] utf8Bytes, int offset, int length) {\n+    public boolean match(byte[] utf8Bytes, int offset, int length, GrokCaptureExtracter extracter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NDgzNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494344834", "createdAt": "2020-09-24T14:01:11Z", "author": {"login": "nik9000"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/Grok.java", "diffHunk": "@@ -252,7 +255,7 @@ public boolean match(String text) {\n      * @param length length of the text to match\n      * @return a map containing field names and their respective coerced values that matched.\n      */\n-    public Map<String, Object> captures(byte[] utf8Bytes, int offset, int length) {\n+    public boolean match(byte[] utf8Bytes, int offset, int length, GrokCaptureExtracter extracter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NzE0MQ=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzY2OTEzOnYy", "diffSide": "RIGHT", "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowOTozNVrOHXZ2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowMTowN1rOHXcaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng==", "bodyText": "This particular one (and really all the other native type parsers), are passed the value of X.parseX. So, it is actually passed the result of Integer.parseInt(/*String*/i). It then follows that boxing here is not necessary. I think you can just keep it native all the way as the IntConsumer is designed to accept native values.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494302776", "createdAt": "2020-09-24T13:09:35Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNTc5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n          \n          \n            \n                            return buildExtracter.apply(emit::accept);\n          \n      \n    \n    \n  \n\nGiven the above comment, I think this is all that is necessary (and this goes for all the other extractor methods too).", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494305796", "createdAt": "2020-09-24T13:13:51Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyOTc1Mg==", "bodyText": "That doesn't so much keep it native as rely on autoboxing. I intentionally didn't use autoboxing here because I figured it'd be clearer that we have to box here to get the Object.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494329752", "createdAt": "2020-09-24T13:45:04Z", "author": {"login": "nik9000"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMjk4Ng==", "bodyText": "I see, definitely, since the resulting Object must be returned to the ultimate consumer.\nStinks that we lose the native values and that they must be boxed.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494332986", "createdAt": "2020-09-24T13:47:41Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NDc4MA==", "bodyText": "Yeah! This is mostly for the folks that need it wrapped in an object anyway like ingest. Runtime fields will use the native values.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494344780", "createdAt": "2020-09-24T14:01:07Z", "author": {"login": "nik9000"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzcxMzI5OnYy", "diffSide": "RIGHT", "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxOToxMlrOHXaRPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo0Nzo1NFrOHXbtNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTY5NA==", "bodyText": "Should we also have a BooleanConsumer? That would prevent boolean boxing as Boolean.parseBoolean returns a native boolean. This boxing  is admittedly less of a concern than numeric unboxing/reboxing, but it would be nice to have consistency.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494309694", "createdAt": "2020-09-24T13:19:12Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n             }\n-        }\n-        return null;\n+\n+            @Override\n+            public GrokCaptureExtracter forLong(Function<LongConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(l -> emit.accept(Long.valueOf(l)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forFloat(Function<FloatConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(f -> emit.accept(Float.valueOf(f)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forDouble(Function<DoubleConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(d -> emit.accept(Double.valueOf(d)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forBoolean(Function<Consumer<Boolean>, GrokCaptureExtracter> buildExtracter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMTU5Mg==", "bodyText": "Java didn't add one of those because they figured the boxing overhead was fairly small and they'd never allocate when boxing a boolean. I think that's fine for us here too. We might see otherwise, but I figure it'd be ok for now.", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494331592", "createdAt": "2020-09-24T13:46:34Z", "author": {"login": "nik9000"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n             }\n-        }\n-        return null;\n+\n+            @Override\n+            public GrokCaptureExtracter forLong(Function<LongConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(l -> emit.accept(Long.valueOf(l)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forFloat(Function<FloatConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(f -> emit.accept(Float.valueOf(f)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forDouble(Function<DoubleConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(d -> emit.accept(Double.valueOf(d)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forBoolean(Function<Consumer<Boolean>, GrokCaptureExtracter> buildExtracter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTY5NA=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMzIzOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494333239", "createdAt": "2020-09-24T13:47:54Z", "author": {"login": "benwtrent"}, "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n             }\n-        }\n-        return null;\n+\n+            @Override\n+            public GrokCaptureExtracter forLong(Function<LongConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(l -> emit.accept(Long.valueOf(l)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forFloat(Function<FloatConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(f -> emit.accept(Float.valueOf(f)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forDouble(Function<DoubleConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(d -> emit.accept(Double.valueOf(d)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forBoolean(Function<Consumer<Boolean>, GrokCaptureExtracter> buildExtracter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTY5NA=="}, "originalCommit": {"oid": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3343, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}