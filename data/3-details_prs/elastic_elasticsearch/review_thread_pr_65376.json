{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODM2ODI5", "number": 65376, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMToyMVrOE8SgRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMToyMVrOE8SgRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUzMTg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/shard/IndexShardOperationPermits.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMToyMVrOH4Uwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMToyMVrOH4Uwpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMjQzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Immediately delays operations and on another thread waits for in-flight operations to finish and then acquires all permits. When all\n          \n          \n            \n                 * Immediately delays operations and uses the {@link executor} to wait for in-flight operations to finish and then acquires all permits. When all", "url": "https://github.com/elastic/elasticsearch/pull/65376#discussion_r528822438", "createdAt": "2020-11-23T16:11:21Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexShardOperationPermits.java", "diffHunk": "@@ -88,30 +87,6 @@ public void close() {\n         closed = true;\n     }\n \n-    /**\n-     * Wait for in-flight operations to finish and executes {@code onBlocked} under the guarantee that no new operations are started. Queues\n-     * operations that are occurring in the meanwhile and runs them once {@code onBlocked} has executed.\n-     *\n-     * @param timeout   the maximum time to wait for the in-flight operations block\n-     * @param timeUnit  the time unit of the {@code timeout} argument\n-     * @param onBlocked the action to run once the block has been acquired\n-     * @param <E>       the type of checked exception thrown by {@code onBlocked}\n-     * @throws InterruptedException      if calling thread is interrupted\n-     * @throws TimeoutException          if timed out waiting for in-flight operations to finish\n-     * @throws IndexShardClosedException if operation permit has been closed\n-     */\n-    <E extends Exception> void blockOperations(\n-            final long timeout,\n-            final TimeUnit timeUnit,\n-            final CheckedRunnable<E> onBlocked) throws InterruptedException, TimeoutException, E {\n-        delayOperations();\n-        try (Releasable ignored = acquireAll(timeout, timeUnit)) {\n-            onBlocked.run();\n-        } finally {\n-            releaseDelayedOperations();\n-        }\n-    }\n-\n     /**\n      * Immediately delays operations and on another thread waits for in-flight operations to finish and then acquires all permits. When all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb63b0aff45d7ec0a3bbb4563a48e3c121b1147"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2011, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}