{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTI1NjU3", "number": 51017, "title": "[DOCS] Adds common definitions for security settings", "bodyText": "Related to #50984\nThere are currently similar SSL/TLS settings for monitoring, alerting, and security features (e.g. listed in https://www.elastic.co/guide/en/elasticsearch/reference/master/security-settings.html#http-tls-ssl-settings, https://www.elastic.co/guide/en/elasticsearch/reference/master/monitoring-settings.html#ssl-monitoring-settings, and https://www.elastic.co/guide/en/elasticsearch/reference/master/notification-settings.html#ssl-notification-settings).  Some of them are generated from a shared file https://github.com/elastic/elasticsearch/blob/master/docs/reference/settings/ssl-settings.asciidoc.\nThere are discrepancies in how some of the settings are defined, however, and whether their default values are listed.\nThis PR attempts to address those problems as follows:\n\nIt removes the \"Default values for TLS/SSL settings\" section of the Security settings reference (https://www.elastic.co/guide/en/elasticsearch/reference/master/security-settings.html#_default_values_for_tlsssl_settings) and removes all references to that section from within the elasticsearch repo. Rather, the default behaviour will be described for each setting without redirects.\nIt adds a common-defs.asciidoc file (similar to the common-parms.asciidoc file used in API reference pages) and puts SSL setting definitions there for re-use across the settings pages.\n\nI have left in some clauses where there are slight variations in the definitions for now (e.g. setting X says it cannot be used at the same time as setting Y). I think for the most part those should ultimately go away (i.e. they're likely applicable to all occurrences of that setting, not just one or two).\nPreview:\n\nhttp://elasticsearch_51017.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/notification-settings.html\nhttp://elasticsearch_51017.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/monitoring-settings.html\nhttp://elasticsearch_51017.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/security-settings.html", "createdAt": "2020-01-15T02:24:42Z", "url": "https://github.com/elastic/elasticsearch/pull/51017", "merged": true, "mergeCommit": {"oid": "cd5910bd833858cb5943c85125ea70ecac426b2a"}, "closed": true, "closedAt": "2020-03-06T19:28:22Z", "author": {"login": "lcawl"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD1mtJABqjMwMzM2NzkwNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK1ruPgBqjMxMDM0OTEwODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d7280998b80af0ae228ce5b9e5091d31729bda6", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/9d7280998b80af0ae228ce5b9e5091d31729bda6", "committedDate": "2020-01-15T23:19:04Z", "message": "[DOCS] More edits"}, "afterCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/7de4e1492ae9a565034a8eb0fbfa84fe60394ddc", "committedDate": "2020-02-13T07:14:33Z", "message": "[DOCS] More edits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzczNjE1", "url": "https://github.com/elastic/elasticsearch/pull/51017#pullrequestreview-362373615", "createdAt": "2020-02-21T03:00:21Z", "commit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowMDoyMVrOFsqQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNzozMFrOFsqgAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NDExNw==", "bodyText": "What's the situation with these //TBD parts? Are you looking for a review as to whether that content is correct, or trying to decide how to represent them in the docs?", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382374117", "createdAt": "2020-02-21T03:00:21Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTQ5Ng==", "bodyText": "On master, no because we don't support Java 8 any more.\nOn 7.x, I think so. The set of options (and defaults) are different depend in the Java version.\nAlthough, strictly speaking we have different values between Java11 and Java12 as well (since #42155) so we may need to think this through a bit more.\n@jkakavas What do we want to do with FIPS here? BC JSSE doesn't support TLS1.3, so some of these ciphers aren't supported, but I think technically the default is still correct (we don't change the default cipher suite list based on the supported protocols list).", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382375496", "createdAt": "2020-02-21T03:06:15Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NjE0NQ==", "bodyText": "It only applies to PEM files, but crypto file formats are a complex topic.\nThe PEM encoding format supports a variety of different key type and formats, so it's possible to have a EC private key in PKCS8 format inside a PEM file.\nWe don't want to go into that detail here, but \"PEM\" is a lot less specific than it sounds.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382376145", "createdAt": "2020-02-21T03:09:09Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NjU3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n          \n          \n            \n            keystore path ends in \".p12\", \".pfx\", or \".pkcs12\", this setting defaults", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382376576", "createdAt": "2020-02-21T03:11:02Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Njc4Mg==", "bodyText": "@jkakavas Are you happy with \"If the JVM supports ...\" as covering BC-JSSE FIPS? or should we be explicit?\nMaybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n          \n          \n            \n            `SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM's SSL provider supports TLSv1.3,\n          \n      \n    \n    \n  \n\nIs that simple enough not to confuse general users while being explicit enough for FIPS?", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382376782", "createdAt": "2020-02-21T03:11:56Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzMxMA==", "bodyText": "No, I don't think there's a reason to have all 3 variants. The main (first) one should be accurate everywhere.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382377310", "createdAt": "2020-02-21T03:14:30Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n+the default is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n++\n+--\n+NOTE: If `xpack.security.fips_mode.enabled` is `true`, you cannot use `SSLv2Hello` \n+or `SSLv3`. See <<fips-140-compliance>>.\n+\n+--\n+end::ssl-supported-protocols[]\n+//TBD: Are these three different definitions for supported protocols valid?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzQzNQ==", "bodyText": "I don't think we need this. If it's used somewhere it's probably out of date.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382377435", "createdAt": "2020-02-21T03:15:08Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]\n+\n+tag::ssl-secure-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional. \n+//TBD: You cannot use this setting and `ssl.key_passphrase` at the same time.\n+end::ssl-secure-key-passphrase[]\n+\n+tag::ssl-supported-protocols[]\n+Supported protocols with versions. Valid protocols: `SSLv2Hello`,\n+`SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. If the JVM supports TLSv1.3,\n+the default is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n++\n+--\n+NOTE: If `xpack.security.fips_mode.enabled` is `true`, you cannot use `SSLv2Hello` \n+or `SSLv3`. See <<fips-140-compliance>>.\n+\n+--\n+end::ssl-supported-protocols[]\n+//TBD: Are these three different definitions for supported protocols valid?\n+tag::ssl-supported-protocols-1[]\n+Supported protocols for TLS/SSL (with versions). Defaults to `TLSv1.3,TLSv1.2,TLSv1.1`.\n+end::ssl-supported-protocols-1[]\n+\n+tag::ssl-supported-protocols-2[]\n+Specifies the supported protocols for TLS/SSL. If the JVM supports TLSv1.3, the \n+defaults is `TLSv1.3,TLSv1.2,TLSv1.1`. Otherwise, the default is\n+`TLSv1.2,TLSv1.1`.\n+end::ssl-supported-protocols-2[]\n+\n+tag::ssl-truststore-password[]\n+The password for the truststore.\n+//TBD: You cannot use this setting and `ssl.truststore.secure_password` at the same time.\n+end::ssl-truststore-password[]\n+\n+tag::ssl-truststore-path[]\n+The path for the keystore that contains the certificates to trust. It must be\n+either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.certificate_authorities` at the same time.\n+end::ssl-truststore-path[]\n+\n+tag::ssl-truststore-path-jks[]\n+The path for the Java keystore file that contains the certificates to trust.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Nzk4Nw==", "bodyText": "I think we probably want to merge the pkcs11 and pkcs12 variants. I don't believe there is any context in which the beahviour of this setting is different.", "url": "https://github.com/elastic/elasticsearch/pull/51017#discussion_r382377987", "createdAt": "2020-02-21T03:17:30Z", "author": {"login": "tvernum"}, "path": "docs/reference/settings/common-defs.asciidoc", "diffHunk": "@@ -0,0 +1,167 @@\n+tag::ssl-certificate[]\n+Specifies the path for the PEM encoded certificate (or certificate chain) that is\n+associated with the key.\n+//TBD: This setting can be used only if `ssl.key` is set.\n+end::ssl-certificate[]\n+\n+tag::ssl-certificate-authorities[]\n+List of paths to PEM encoded certificate files that should be trusted.\n+//TBD: You cannot use this setting and `ssl.truststore.path` at the same time.\n+end::ssl-certificate-authorities[]\n+\n+tag::ssl-cipher-suites-values[]\n+Supported cipher suites can be found in Oracle's\n+https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2[Java Cryptography Architecture documentation].\n+The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values[]\n+//TBD: Are these two different definitions (with different Oracle URLs) for cipher_suites required?\n+tag::ssl-cipher-suites-values-java8[]\n+Supported cipher suites can be found in Oracle's http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html[\n+Java Cryptography Architecture documentation]. The default is `TLS_AES_256_GCM_SHA384`, `TLS_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`,\n+`TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`,\n+`TLS_RSA_WITH_AES_256_GCM_SHA384`, `TLS_RSA_WITH_AES_128_GCM_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA256`,\n+`TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`.\n+end::ssl-cipher-suites-values-java8[]\n+\n+tag::ssl-key-pem[]\n+Path to a PEM encoded file containing the private key.\n+//TBD: You cannot use this setting and `ssl.keystore.path` at the same time.\n+end::ssl-key-pem[]\n+//TBD: Is it correct that this setting only applies to PEM files or can it support other types?\n+\n+tag::ssl-key-passphrase[]\n+The passphrase that is used to decrypt the private key. Since the key might not\n+be encrypted, this value is optional.\n+//TBD: You cannot use this setting and `ssl.secure_key_passphrase` at the same time.\n+end::ssl-key-passphrase[]\n+\n+tag::ssl-keystore-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_key_password` at the same time.\n+end::ssl-keystore-key-password[]\n+\n+tag::ssl-keystore-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.secure_password` at the same time.\n+end::ssl-keystore-password[]\n+\n+tag::ssl-keystore-path[]\n+The path for the keystore file that contains a private key and certificate.\n+//TBD: It must be either a Java keystore (jks) or a PKCS#12 file.\n+//TBD: You cannot use this setting and `ssl.key` at the same time.\n+end::ssl-keystore-path[]\n+\n+tag::ssl-keystore-secure-key-password[]\n+The password for the key in the keystore. The default is the keystore password.\n+//TBD: You cannot use this setting and `ssl.keystore.key_password` at the same time.\n+end::ssl-keystore-secure-key-password[]\n+\n+tag::ssl-keystore-secure-password[]\n+The password for the keystore.\n+//TBD: You cannot use this setting and `ssl.keystore.password` at the same time.\n+end::ssl-keystore-secure-password[]\n+\n+tag::ssl-keystore-type-pkcs11[]\n+The format of the keystore file. For the Java keystore format, use `jks`. For\n+PKCS#12 files, use `PKCS12`. For a PKCS#11 token, use `PKCS11`. The default is\n+`jks`.\n+end::ssl-keystore-type-pkcs11[]\n+\n+tag::ssl-keystore-type-pkcs12[]\n+The format of the keystore file. It must be either `jks` or `PKCS12`. If the\n+keystore path ends in \".p12\", \".pfx\", or \"pkcs12\", this setting defaults \n+to `PKCS12`. Otherwise, it defaults to `jks`.\n+end::ssl-keystore-type-pkcs12[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de4e1492ae9a565034a8eb0fbfa84fe60394ddc"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188f54f78e28bae405060bc83189531f576daa95", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/188f54f78e28bae405060bc83189531f576daa95", "committedDate": "2020-03-06T01:10:36Z", "message": "[DOCS] Adds common definitions for security settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5371cfae05300cb0eff73454c97bcf991b711ce4", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/5371cfae05300cb0eff73454c97bcf991b711ce4", "committedDate": "2020-03-06T01:10:36Z", "message": "[DOCS] More SSL setting edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfe1e57ed729b8bce32a56483b7d262c440038c7", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/dfe1e57ed729b8bce32a56483b7d262c440038c7", "committedDate": "2020-03-06T01:10:36Z", "message": "[DOCS] More edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "031397734e5a1046a67b961eaaa46050a1109e05", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/031397734e5a1046a67b961eaaa46050a1109e05", "committedDate": "2020-03-06T01:10:36Z", "message": "Update docs/reference/settings/common-defs.asciidoc\n\nCo-Authored-By: Tim Vernum <tim@adjective.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b78d1bdf26ef1b82b942baa8fc739715135e0a68", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/b78d1bdf26ef1b82b942baa8fc739715135e0a68", "committedDate": "2020-03-06T01:10:36Z", "message": "[DOCS] Removes shared ssl-truststore-path-jks definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cee48c9cada189c9e6716d21cc0c5d30dc11289", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/6cee48c9cada189c9e6716d21cc0c5d30dc11289", "committedDate": "2020-03-06T01:10:37Z", "message": "[DOCS] Removes extra definitions for ssl-supported-protocols"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9fb6b2e3cb55e3d14d18360c3d81a91fe314704", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/e9fb6b2e3cb55e3d14d18360c3d81a91fe314704", "committedDate": "2020-03-06T01:10:37Z", "message": "[DOCS] Removes ssl-keystore-type-pkcs11 shared definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f16dc2d3f8abeffb94af93b9451054e45543b29", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/9f16dc2d3f8abeffb94af93b9451054e45543b29", "committedDate": "2020-03-06T01:10:37Z", "message": "[DOCS] Adds Java12 cipher suites values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a910984c4a3e184beabf87e2774f844b8fa1a04b", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/a910984c4a3e184beabf87e2774f844b8fa1a04b", "committedDate": "2020-03-06T01:10:37Z", "message": "[DOCS] Removes Java8 cipher suites"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1587aa880040d7eead6a86918768d7beb722501", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1587aa880040d7eead6a86918768d7beb722501", "committedDate": "2020-03-06T01:10:37Z", "message": "Update docs/reference/settings/common-defs.asciidoc\n\nCo-Authored-By: Tim Vernum <tim@adjective.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9224da1b7706608bd7b635c67de9c6be60358d0c", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/9224da1b7706608bd7b635c67de9c6be60358d0c", "committedDate": "2020-03-04T22:29:42Z", "message": "Update docs/reference/settings/common-defs.asciidoc\n\nCo-Authored-By: Tim Vernum <tim@adjective.org>"}, "afterCommit": {"oid": "f1587aa880040d7eead6a86918768d7beb722501", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1587aa880040d7eead6a86918768d7beb722501", "committedDate": "2020-03-06T01:10:37Z", "message": "Update docs/reference/settings/common-defs.asciidoc\n\nCo-Authored-By: Tim Vernum <tim@adjective.org>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3081, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}