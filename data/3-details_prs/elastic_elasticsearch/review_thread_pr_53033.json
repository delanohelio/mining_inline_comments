{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjEwNTg5", "number": 53033, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMzoxMlrODksB9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxODo0NlrODksdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzk2NzI3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMzoxMlrOFxJeyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo1Mjo0MFrOFxOKIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTg4Mw==", "bodyText": "This looks like it has a mapped field, just no docs indexed against it, so I don't think it's correct to call it an \"Unmapped\" test? or am I missing something?", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387079883", "createdAt": "2020-03-03T15:03:12Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -26,20 +26,29 @@\n import org.apache.lucene.search.IndexSearcher;\n import org.apache.lucene.search.MatchAllDocsQuery;\n import org.apache.lucene.store.Directory;\n+import org.elasticsearch.ElasticsearchParseException;\n import org.elasticsearch.common.geo.GeoPoint;\n+import org.elasticsearch.geo.GeometryTestUtils;\n+import org.elasticsearch.geometry.Point;\n import org.elasticsearch.index.mapper.GeoPointFieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorTestCase;\n import org.elasticsearch.search.aggregations.support.AggregationInspectionHelper;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n import org.elasticsearch.test.geo.RandomGeoGenerator;\n \n+import java.util.List;\n+\n import static org.elasticsearch.search.aggregations.metrics.InternalGeoBoundsTests.GEOHASH_TOLERANCE;\n import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.startsWith;\n \n public class GeoBoundsAggregatorTests extends AggregatorTestCase {\n-    public void testEmpty() throws Exception {\n-        try (Directory dir = newDirectory();\n-             RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+    public void testUnmappedWithNoDocs() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NjUxNA==", "bodyText": "woops. right!", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387156514", "createdAt": "2020-03-03T16:52:40Z", "author": {"login": "talevy"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -26,20 +26,29 @@\n import org.apache.lucene.search.IndexSearcher;\n import org.apache.lucene.search.MatchAllDocsQuery;\n import org.apache.lucene.store.Directory;\n+import org.elasticsearch.ElasticsearchParseException;\n import org.elasticsearch.common.geo.GeoPoint;\n+import org.elasticsearch.geo.GeometryTestUtils;\n+import org.elasticsearch.geometry.Point;\n import org.elasticsearch.index.mapper.GeoPointFieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorTestCase;\n import org.elasticsearch.search.aggregations.support.AggregationInspectionHelper;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n import org.elasticsearch.test.geo.RandomGeoGenerator;\n \n+import java.util.List;\n+\n import static org.elasticsearch.search.aggregations.metrics.InternalGeoBoundsTests.GEOHASH_TOLERANCE;\n import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.startsWith;\n \n public class GeoBoundsAggregatorTests extends AggregatorTestCase {\n-    public void testEmpty() throws Exception {\n-        try (Directory dir = newDirectory();\n-             RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+    public void testUnmappedWithNoDocs() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTg4Mw=="}, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODAwNzczOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxMjoyOFrOFxJ3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo1NDowMFrOFxONqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NjIwNg==", "bodyText": "Nit - I think it would be clearer that the aggregation isn't operating on this field if we used some completely different type, like a keyword or a number.", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387086206", "createdAt": "2020-03-03T15:12:28Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -61,6 +70,83 @@ public void testEmpty() throws Exception {\n         }\n     }\n \n+    public void testUnmappedFieldWithDocs() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            if (randomBoolean()) {\n+                Document doc = new Document();\n+                doc.add(new LatLonDocValuesField(\"field\", 0.0, 0.0));\n+                w.addDocument(doc);\n+            }\n+\n+            GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                .field(\"non_existent\")\n+                .wrapLongitude(false);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+            try (IndexReader reader = w.getReader()) {\n+                IndexSearcher searcher = new IndexSearcher(reader);\n+                InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                assertTrue(Double.isInfinite(bounds.top));\n+                assertTrue(Double.isInfinite(bounds.bottom));\n+                assertTrue(Double.isInfinite(bounds.posLeft));\n+                assertTrue(Double.isInfinite(bounds.posRight));\n+                assertTrue(Double.isInfinite(bounds.negLeft));\n+                assertTrue(Double.isInfinite(bounds.negRight));\n+                assertFalse(AggregationInspectionHelper.hasValue(bounds));\n+            }\n+        }\n+    }\n+\n+    public void testMissing() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            Document doc = new Document();\n+            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NzQxOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387157418", "createdAt": "2020-03-03T16:54:00Z", "author": {"login": "talevy"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -61,6 +70,83 @@ public void testEmpty() throws Exception {\n         }\n     }\n \n+    public void testUnmappedFieldWithDocs() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            if (randomBoolean()) {\n+                Document doc = new Document();\n+                doc.add(new LatLonDocValuesField(\"field\", 0.0, 0.0));\n+                w.addDocument(doc);\n+            }\n+\n+            GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                .field(\"non_existent\")\n+                .wrapLongitude(false);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+            try (IndexReader reader = w.getReader()) {\n+                IndexSearcher searcher = new IndexSearcher(reader);\n+                InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                assertTrue(Double.isInfinite(bounds.top));\n+                assertTrue(Double.isInfinite(bounds.bottom));\n+                assertTrue(Double.isInfinite(bounds.posLeft));\n+                assertTrue(Double.isInfinite(bounds.posRight));\n+                assertTrue(Double.isInfinite(bounds.negLeft));\n+                assertTrue(Double.isInfinite(bounds.negRight));\n+                assertFalse(AggregationInspectionHelper.hasValue(bounds));\n+            }\n+        }\n+    }\n+\n+    public void testMissing() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            Document doc = new Document();\n+            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NjIwNg=="}, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODAzNjc2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxODo0NlrOFxKI0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxODo0NlrOFxKI0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDY0Mg==", "bodyText": "Nit - I would split this into two tests, for valid and invalid missing cases.", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387090642", "createdAt": "2020-03-03T15:18:46Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -61,6 +70,83 @@ public void testEmpty() throws Exception {\n         }\n     }\n \n+    public void testUnmappedFieldWithDocs() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            if (randomBoolean()) {\n+                Document doc = new Document();\n+                doc.add(new LatLonDocValuesField(\"field\", 0.0, 0.0));\n+                w.addDocument(doc);\n+            }\n+\n+            GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                .field(\"non_existent\")\n+                .wrapLongitude(false);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+            try (IndexReader reader = w.getReader()) {\n+                IndexSearcher searcher = new IndexSearcher(reader);\n+                InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                assertTrue(Double.isInfinite(bounds.top));\n+                assertTrue(Double.isInfinite(bounds.bottom));\n+                assertTrue(Double.isInfinite(bounds.posLeft));\n+                assertTrue(Double.isInfinite(bounds.posRight));\n+                assertTrue(Double.isInfinite(bounds.negLeft));\n+                assertTrue(Double.isInfinite(bounds.negRight));\n+                assertFalse(AggregationInspectionHelper.hasValue(bounds));\n+            }\n+        }\n+    }\n+\n+    public void testMissing() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            Document doc = new Document();\n+            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));\n+            w.addDocument(doc);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+\n+            Point point = GeometryTestUtils.randomPoint(false);\n+            double lon = point.getX();\n+            double lat = point.getY();\n+\n+            // valid missing values\n+            for (Object missingVal : List.of(\"POINT(\" + lon + \" \" + lat + \")\", lat + \", \" + lon, new GeoPoint(lat, lon))) {\n+                GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                    .field(\"field\")\n+                    .missing(missingVal)\n+                    .wrapLongitude(false);\n+\n+                try (IndexReader reader = w.getReader()) {\n+                    IndexSearcher searcher = new IndexSearcher(reader);\n+                    InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                    assertThat(bounds.top, equalTo(lat));\n+                    assertThat(bounds.bottom, equalTo(lat));\n+                    assertThat(bounds.posLeft, equalTo(lon >= 0 ? lon : Double.POSITIVE_INFINITY));\n+                    assertThat(bounds.posRight, equalTo(lon >= 0 ? lon : Double.NEGATIVE_INFINITY));\n+                    assertThat(bounds.negLeft, equalTo(lon >= 0 ? Double.POSITIVE_INFINITY : lon));\n+                    assertThat(bounds.negRight, equalTo(lon >= 0 ? Double.NEGATIVE_INFINITY : lon));\n+                }\n+            }\n+\n+            // invalid missing values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3490, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}