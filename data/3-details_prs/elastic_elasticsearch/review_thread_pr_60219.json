{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjAyMzc5", "number": 60219, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NDo0MlrOESsiLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NjozNFrOESsk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDM5NDcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsProcessManagerTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NDo0M1rOG4A9Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODoxNToyN1rOG4BrTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTA2Nw==", "bodyText": "Would Settings.EMPTY work here as well?", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461389067", "createdAt": "2020-07-28T07:54:43Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsProcessManagerTests.java", "diffHunk": "@@ -112,8 +112,8 @@ public void setUpMocks() {\n \n         resultsPersisterService = mock(ResultsPersisterService.class);\n         modelLoadingService = mock(ModelLoadingService.class);\n-        processManager = new AnalyticsProcessManager(client, executorServiceForJob, executorServiceForProcess, processFactory, auditor,\n-            trainedModelProvider, modelLoadingService, resultsPersisterService, 1);\n+        processManager = new AnalyticsProcessManager(Settings.builder().build(), client, executorServiceForJob, executorServiceForProcess,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwMDkwOQ==", "bodyText": "I wanted to change those and forgot. Thanks for spotting!", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461400909", "createdAt": "2020-07-28T08:15:27Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsProcessManagerTests.java", "diffHunk": "@@ -112,8 +112,8 @@ public void setUpMocks() {\n \n         resultsPersisterService = mock(ResultsPersisterService.class);\n         modelLoadingService = mock(ModelLoadingService.class);\n-        processManager = new AnalyticsProcessManager(client, executorServiceForJob, executorServiceForProcess, processFactory, auditor,\n-            trainedModelProvider, modelLoadingService, resultsPersisterService, 1);\n+        processManager = new AnalyticsProcessManager(Settings.builder().build(), client, executorServiceForJob, executorServiceForProcess,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTA2Nw=="}, "originalCommit": {"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDM5NjkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NToxNFrOG4A-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NToxNFrOG4A-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTM5Mg==", "bodyText": "hasSize matcher could be used here instead.", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461389392", "createdAt": "2020-07-28T07:55:14Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java", "diffHunk": "@@ -263,7 +264,10 @@ public void testProcess_GivenMoreResultsThanRows() throws IOException {\n         RowResults result2 = new RowResults(2, resultFields);\n         givenProcessResults(Arrays.asList(result1, result2));\n \n-        verifyNoMoreInteractions(resultsPersisterService);\n+        List<BulkRequest> capturedBulkRequests = bulkRequestCaptor.getAllValues();\n+        assertThat(capturedBulkRequests.size(), equalTo(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDM5ODk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexerTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NTo0NVrOG4A_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODoxNjoyN1rOG4Btaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTY5Mw==", "bodyText": "final?", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461389693", "createdAt": "2020-07-28T07:55:45Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexerTests.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils.persistence;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class MlBulkIndexerTests extends ESTestCase {\n+\n+    private List<BulkRequest> executedBulkRequests = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwMTQ1MQ==", "bodyText": "This is getting reinitialised for each test so it cannot be final.", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461401451", "createdAt": "2020-07-28T08:16:27Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexerTests.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils.persistence;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class MlBulkIndexerTests extends ESTestCase {\n+\n+    private List<BulkRequest> executedBulkRequests = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTY5Mw=="}, "originalCommit": {"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDQwMTUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NjozNFrOG4BBGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTowNTo0NVrOG4Dh8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDEwNg==", "bodyText": "There is no ML-specific code in this class. Would it make sense to rename it to BulkIndexer?", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461390106", "createdAt": "2020-07-28T07:56:34Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils.persistence;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.IndexingPressure;\n+\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * A helper class that gathers index requests in bulk requests\n+ * that do exceed a 1000 operations or half the available memory\n+ * limit for indexing.\n+ */\n+public class MlBulkIndexer implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzMTI4Mw==", "bodyText": "I wanted to avoid calling it plainly BulkIndexer as it sounds too much like a basic ES component. I decided to prefix with Ml to indicate this is a utility designed to serve purposes within the ML plugin. If we end up using it in other places then we shall move it and rename it accordingly.", "url": "https://github.com/elastic/elasticsearch/pull/60219#discussion_r461431283", "createdAt": "2020-07-28T09:05:45Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/MlBulkIndexer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.utils.persistence;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.IndexingPressure;\n+\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * A helper class that gathers index requests in bulk requests\n+ * that do exceed a 1000 operations or half the available memory\n+ * limit for indexing.\n+ */\n+public class MlBulkIndexer implements AutoCloseable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDEwNg=="}, "originalCommit": {"oid": "12ea0828d1d038d6d0b65b7d2072efc62ab5ccd1"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2071, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}