{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODMyMjQ2", "number": 58252, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMDo0N1rOEGddEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1ODozNVrOEG1i1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA5NDkwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMDo0N1rOGlRW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozNzoyNFrOGl1CpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNDg2NA==", "bodyText": "Could be higher than the number of items...\n\nCan we explain when/why this would be true? Is it related to the size parameter?", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441734864", "createdAt": "2020-06-17T18:10:47Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxOTUyNQ==", "bodyText": "Yes, It is related to the size parameter", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442319525", "createdAt": "2020-06-18T15:37:24Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNDg2NA=="}, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA5ODgwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMjowMFrOGlRZdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMjowMFrOGlRZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNTU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            How many ingest pipelines currently refer to the model.\n          \n          \n            \n            The number of ingest pipelines that currently refer to the model.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441735540", "createdAt": "2020-06-17T18:12:00Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjEzOTYwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyNDowMFrOGlRzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo1MToyM1rOGl1oRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MjI0OA==", "bodyText": "How many inference calls were missing all their features\n\nThis is unclear to me. I often find \"features\" unclear so if we can replace it with \"fields\" that would help. I'm also unsure whether this means the fields from the field_map or some other specific fields required by the analysis were missing or something else entirely.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441742248", "createdAt": "2020-06-17T18:24:00Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTE1Nw==", "bodyText": "If an inference call was made without any of the features on which the model was trained.\nI will try to make it clearer.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442329157", "createdAt": "2020-06-18T15:51:23Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MjI0OA=="}, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjE3NDQyOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozNDoyOFrOGlSKTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozNDoyOFrOGlSKTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0ODA0NQ==", "bodyText": "How many time inference were called\n\nIs this the \"number of times the inference processor was invoked across all pipelines that use this model\"? If not, can we clarify further?", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441748045", "createdAt": "2020-06-17T18:34:28Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features\n+\n+`inference_count`:::\n+(integer)\n+How many times inference were called", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjE5ODg4OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0MTozNFrOGlSaDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0MTozNFrOGlSaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MjA3OA==", "bodyText": "We generally don't use capitalization for emphasis. If necessary, we can use bold.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            How many times the model was loaded for inference and NOT from\n          \n          \n            \n            The number of times the model was loaded for inference and was not simply retrieved from the", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441752078", "createdAt": "2020-06-17T18:41:34Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features\n+\n+`inference_count`:::\n+(integer)\n+How many times inference were called\n+\n+`cache_miss_count`:::\n+(integer)\n+How many times the model was loaded for inference and NOT from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjIwMjI0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0MjozNVrOGlScQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0MjozNVrOGlScQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MjY0MA==", "bodyText": "Should we also add a tip here about what it implies if this number is high relative to the overall count?", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441752640", "createdAt": "2020-06-17T18:42:35Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features\n+\n+`inference_count`:::\n+(integer)\n+How many times inference were called\n+\n+`cache_miss_count`:::\n+(integer)\n+How many times the model was loaded for inference and NOT from\n+cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjIxNDY3OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0NjoxMFrOGlSkSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0NjoxMFrOGlSkSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NDY5OA==", "bodyText": "The count of ...\n\nIf you prefer to use this wording, please use it instead of \"The number of\" in all my other suggestions too. The main thing is to be consistent on this page.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441754698", "createdAt": "2020-06-17T18:46:10Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features\n+\n+`inference_count`:::\n+(integer)\n+How many times inference were called\n+\n+`cache_miss_count`:::\n+(integer)\n+How many times the model was loaded for inference and NOT from\n+cache.\n+\n+`failure_count`:::\n+(integer)\n+The count of failures when the using the model for inference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjIzMzAyOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0OTo1NVrOGlSwiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0OTo1NVrOGlSwiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NzgzNQ==", "bodyText": "When these stats were last gathered.\n\nThis wording seems to imply that the data here will not indicate the current timestamp (i.e. when I called the API this time) but rather when it was last called (i.e. the previous invocation). Is that correct? If not, I'd recommend dropping \"last\".", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441757835", "createdAt": "2020-06-17T18:49:55Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features\n+\n+`inference_count`:::\n+(integer)\n+How many times inference were called\n+\n+`cache_miss_count`:::\n+(integer)\n+How many times the model was loaded for inference and NOT from\n+cache.\n+\n+`failure_count`:::\n+(integer)\n+The count of failures when the using the model for inference\n+\n+`timestamp`:::\n+(<<time-units,time units>>)\n+When these stats were last gathered.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI4NzQ3OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1OTowMlrOGlTWcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1OTowMlrOGlTWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2NzUzNg==", "bodyText": "See the ingest section ...\n\nThe node stats API defines that section as \"ingest statistics for the node\" so it makes me wonder which node the stats apply to here. If it's for multiple nodes, I think we should re-define the properties here and make that scope clearer.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441767536", "createdAt": "2020-06-17T18:59:02Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+How many ingest pipelines currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+How many inference calls were missing all their features\n+\n+`inference_count`:::\n+(integer)\n+How many times inference were called\n+\n+`cache_miss_count`:::\n+(integer)\n+How many times the model was loaded for inference and NOT from\n+cache.\n+\n+`failure_count`:::\n+(integer)\n+The count of failures when the using the model for inference\n+\n+`timestamp`:::\n+(<<time-units,time units>>)\n+When these stats were last gathered.\n+=====\n+\n+`ingest`:::\n+(object)\n+A collection of ingest stats for the model. See the `ingest` section in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI5MzU4OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMDozNlrOGlTaYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMDozNlrOGlTaYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODU0NA==", "bodyText": "Not a huge problem, but the response body section typically appears before the response code section (per the template here: https://github.com/elastic/docs/blob/master/shared/api-ref-ex.asciidoc)", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r441768544", "createdAt": "2020-06-17T19:00:36Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -74,7 +74,68 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n `404` (Missing resources)::\n   If `allow_no_match` is `false`, this code indicates that there are no\n   resources that match the request or only partial matches for the request.\n-  \n+\n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDUwOTQxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/trainedmodel/InferenceStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDoyMDo1MFrOGlpGTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDoyMDo1MFrOGlpGTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyMzg1NA==", "bodyText": "It would be better to call this something like unboxOrZero, as it doesn't simply unbox.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442123854", "createdAt": "2020-06-18T10:20:50Z", "author": {"login": "droberts195"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.ml.inference.trainedmodel;\n+\n+import org.elasticsearch.client.common.TimeUtil;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+public class InferenceStats implements ToXContentObject {\n+\n+    public static final String NAME = \"inference_stats\";\n+    public static final ParseField MISSING_ALL_FIELDS_COUNT = new ParseField(\"missing_all_fields_count\");\n+    public static final ParseField INFERENCE_COUNT = new ParseField(\"inference_count\");\n+    public static final ParseField CACHE_MISS_COUNT = new ParseField(\"cache_miss_count\");\n+    public static final ParseField FAILURE_COUNT = new ParseField(\"failure_count\");\n+    public static final ParseField TIMESTAMP = new ParseField(\"timestamp\");\n+\n+    public static final ConstructingObjectParser<InferenceStats, Void> PARSER = new ConstructingObjectParser<>(\n+        NAME,\n+        true,\n+        a -> new InferenceStats((Long)a[0], (Long)a[1], (Long)a[2], (Long)a[3], (Instant)a[4])\n+    );\n+    static {\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), MISSING_ALL_FIELDS_COUNT);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), INFERENCE_COUNT);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), FAILURE_COUNT);\n+        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), CACHE_MISS_COUNT);\n+        PARSER.declareField(ConstructingObjectParser.constructorArg(),\n+            p -> TimeUtil.parseTimeFieldToInstant(p, TIMESTAMP.getPreferredName()),\n+            TIMESTAMP,\n+            ObjectParser.ValueType.VALUE);\n+    }\n+\n+    private final long missingAllFieldsCount;\n+    private final long inferenceCount;\n+    private final long failureCount;\n+    private final long cacheMissCount;\n+    private final Instant timeStamp;\n+\n+    private InferenceStats(Long missingAllFieldsCount,\n+                           Long inferenceCount,\n+                           Long failureCount,\n+                           Long cacheMissCount,\n+                           Instant instant) {\n+        this(unbox(missingAllFieldsCount),\n+            unbox(inferenceCount),\n+            unbox(failureCount),\n+            unbox(cacheMissCount),\n+            instant);\n+    }\n+\n+    public InferenceStats(long missingAllFieldsCount,\n+                          long inferenceCount,\n+                          long failureCount,\n+                          long cacheMissCount,\n+                          Instant timeStamp) {\n+        this.missingAllFieldsCount = missingAllFieldsCount;\n+        this.inferenceCount = inferenceCount;\n+        this.failureCount = failureCount;\n+        this.cacheMissCount = cacheMissCount;\n+        this.timeStamp = timeStamp == null ?\n+            Instant.ofEpochMilli(Instant.now().toEpochMilli()) :\n+            Instant.ofEpochMilli(timeStamp.toEpochMilli());\n+    }\n+\n+    /**\n+     * How many times this model attempted to infer with all its fields missing\n+     */\n+    public long getMissingAllFieldsCount() {\n+        return missingAllFieldsCount;\n+    }\n+\n+    /**\n+     * How many inference calls were made against this model\n+     */\n+    public long getInferenceCount() {\n+        return inferenceCount;\n+    }\n+\n+    /**\n+     * How many inference failures occurred.\n+     */\n+    public long getFailureCount() {\n+        return failureCount;\n+    }\n+\n+    /**\n+     * How many cache misses occurred when inferring this model\n+     */\n+    public long getCacheMissCount() {\n+        return cacheMissCount;\n+    }\n+\n+    /**\n+     * The timestamp of these statistics.\n+     */\n+    public Instant getTimeStamp() {\n+        return timeStamp;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        builder.field(FAILURE_COUNT.getPreferredName(), failureCount);\n+        builder.field(INFERENCE_COUNT.getPreferredName(), inferenceCount);\n+        builder.field(CACHE_MISS_COUNT.getPreferredName(), cacheMissCount);\n+        builder.field(MISSING_ALL_FIELDS_COUNT.getPreferredName(), missingAllFieldsCount);\n+        builder.timeField(TIMESTAMP.getPreferredName(), TIMESTAMP.getPreferredName() + \"_string\", timeStamp.toEpochMilli());\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        InferenceStats that = (InferenceStats) o;\n+        return missingAllFieldsCount == that.missingAllFieldsCount\n+            && inferenceCount == that.inferenceCount\n+            && failureCount == that.failureCount\n+            && cacheMissCount == that.cacheMissCount\n+            && Objects.equals(timeStamp, that.timeStamp);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(missingAllFieldsCount, inferenceCount, failureCount, cacheMissCount, timeStamp);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"InferenceStats{\" +\n+            \"missingAllFieldsCount=\" + missingAllFieldsCount +\n+            \", inferenceCount=\" + inferenceCount +\n+            \", failureCount=\" + failureCount +\n+            \", cachMissCount=\" + cacheMissCount +\n+            \", timeStamp=\" + timeStamp +\n+            '}';\n+    }\n+\n+    private static long unbox(@Nullable Long value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDUyOTA1OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDoyNjo1NlrOGlpSjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDoyNjo1NlrOGlpSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyNjk4OQ==", "bodyText": "The fields here are in a different order to what toXContent() prints.  The docs will tie more closely to what real users see if the fields are in the same order.\nSame a few lines below.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442126989", "createdAt": "2020-06-18T10:26:56Z", "author": {"login": "droberts195"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -97,11 +158,25 @@ The API returns the following results:\n   \"trained_model_stats\": [\n     {\n       \"model_id\": \"flight-delay-prediction-1574775339910\",\n-      \"pipeline_count\": 0\n+      \"pipeline_count\": 0,\n+      \"inference_stats\": {\n+        \"missing_all_fields_count\": 0,\n+        \"inference_count\": 4,\n+        \"cache_miss_count\": 3,\n+        \"failure_count\": 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDUzOTg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMDoxMFrOGlpZcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMDoxMFrOGlpZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyODc1Mw==", "bodyText": "typo: cach -> cache", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442128753", "createdAt": "2020-06-18T10:30:10Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -175,6 +194,7 @@ public String toString() {\n             \"missingAllFieldsCount=\" + missingAllFieldsCount +\n             \", inferenceCount=\" + inferenceCount +\n             \", failureCount=\" + failureCount +\n+            \", cachMissCount=\" + cacheMissCount +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU0NjMxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/trainedmodel/InferenceStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjoyMVrOGlpdoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjoyMVrOGlpdoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyOTgyNQ==", "bodyText": "typo: cach -> cache", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442129825", "createdAt": "2020-06-18T10:32:21Z", "author": {"login": "droberts195"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.ml.inference.trainedmodel;\n+\n+import org.elasticsearch.client.common.TimeUtil;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+public class InferenceStats implements ToXContentObject {\n+\n+    public static final String NAME = \"inference_stats\";\n+    public static final ParseField MISSING_ALL_FIELDS_COUNT = new ParseField(\"missing_all_fields_count\");\n+    public static final ParseField INFERENCE_COUNT = new ParseField(\"inference_count\");\n+    public static final ParseField CACHE_MISS_COUNT = new ParseField(\"cache_miss_count\");\n+    public static final ParseField FAILURE_COUNT = new ParseField(\"failure_count\");\n+    public static final ParseField TIMESTAMP = new ParseField(\"timestamp\");\n+\n+    public static final ConstructingObjectParser<InferenceStats, Void> PARSER = new ConstructingObjectParser<>(\n+        NAME,\n+        true,\n+        a -> new InferenceStats((Long)a[0], (Long)a[1], (Long)a[2], (Long)a[3], (Instant)a[4])\n+    );\n+    static {\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), MISSING_ALL_FIELDS_COUNT);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), INFERENCE_COUNT);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), FAILURE_COUNT);\n+        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), CACHE_MISS_COUNT);\n+        PARSER.declareField(ConstructingObjectParser.constructorArg(),\n+            p -> TimeUtil.parseTimeFieldToInstant(p, TIMESTAMP.getPreferredName()),\n+            TIMESTAMP,\n+            ObjectParser.ValueType.VALUE);\n+    }\n+\n+    private final long missingAllFieldsCount;\n+    private final long inferenceCount;\n+    private final long failureCount;\n+    private final long cacheMissCount;\n+    private final Instant timeStamp;\n+\n+    private InferenceStats(Long missingAllFieldsCount,\n+                           Long inferenceCount,\n+                           Long failureCount,\n+                           Long cacheMissCount,\n+                           Instant instant) {\n+        this(unbox(missingAllFieldsCount),\n+            unbox(inferenceCount),\n+            unbox(failureCount),\n+            unbox(cacheMissCount),\n+            instant);\n+    }\n+\n+    public InferenceStats(long missingAllFieldsCount,\n+                          long inferenceCount,\n+                          long failureCount,\n+                          long cacheMissCount,\n+                          Instant timeStamp) {\n+        this.missingAllFieldsCount = missingAllFieldsCount;\n+        this.inferenceCount = inferenceCount;\n+        this.failureCount = failureCount;\n+        this.cacheMissCount = cacheMissCount;\n+        this.timeStamp = timeStamp == null ?\n+            Instant.ofEpochMilli(Instant.now().toEpochMilli()) :\n+            Instant.ofEpochMilli(timeStamp.toEpochMilli());\n+    }\n+\n+    /**\n+     * How many times this model attempted to infer with all its fields missing\n+     */\n+    public long getMissingAllFieldsCount() {\n+        return missingAllFieldsCount;\n+    }\n+\n+    /**\n+     * How many inference calls were made against this model\n+     */\n+    public long getInferenceCount() {\n+        return inferenceCount;\n+    }\n+\n+    /**\n+     * How many inference failures occurred.\n+     */\n+    public long getFailureCount() {\n+        return failureCount;\n+    }\n+\n+    /**\n+     * How many cache misses occurred when inferring this model\n+     */\n+    public long getCacheMissCount() {\n+        return cacheMissCount;\n+    }\n+\n+    /**\n+     * The timestamp of these statistics.\n+     */\n+    public Instant getTimeStamp() {\n+        return timeStamp;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        builder.field(FAILURE_COUNT.getPreferredName(), failureCount);\n+        builder.field(INFERENCE_COUNT.getPreferredName(), inferenceCount);\n+        builder.field(CACHE_MISS_COUNT.getPreferredName(), cacheMissCount);\n+        builder.field(MISSING_ALL_FIELDS_COUNT.getPreferredName(), missingAllFieldsCount);\n+        builder.timeField(TIMESTAMP.getPreferredName(), TIMESTAMP.getPreferredName() + \"_string\", timeStamp.toEpochMilli());\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        InferenceStats that = (InferenceStats) o;\n+        return missingAllFieldsCount == that.missingAllFieldsCount\n+            && inferenceCount == that.inferenceCount\n+            && failureCount == that.failureCount\n+            && cacheMissCount == that.cacheMissCount\n+            && Objects.equals(timeStamp, that.timeStamp);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(missingAllFieldsCount, inferenceCount, failureCount, cacheMissCount, timeStamp);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"InferenceStats{\" +\n+            \"missingAllFieldsCount=\" + missingAllFieldsCount +\n+            \", inferenceCount=\" + inferenceCount +\n+            \", failureCount=\" + failureCount +\n+            \", cachMissCount=\" + cacheMissCount +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU0Nzg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjo1NFrOGlpetQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjo1NFrOGlpetQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMDEwMQ==", "bodyText": "I know it was already in this file, but, as above, maybe unboxOrZero would be clearer.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442130101", "createdAt": "2020-06-18T10:32:54Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -62,19 +65,22 @@ public static String docId(String modelId, String nodeId) {\n     private final long missingAllFieldsCount;\n     private final long inferenceCount;\n     private final long failureCount;\n+    private final long cacheMissCount;\n     private final String modelId;\n     private final String nodeId;\n     private final Instant timeStamp;\n \n     private InferenceStats(Long missingAllFieldsCount,\n                            Long inferenceCount,\n                            Long failureCount,\n+                           Long cacheMissCount,\n                            String modelId,\n                            String nodeId,\n                            Instant instant) {\n         this(unbox(missingAllFieldsCount),\n             unbox(inferenceCount),\n             unbox(failureCount),\n+            unbox(cacheMissCount),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU5OTE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDo0OTo0NlrOGlqARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxNDozMlrOGl0EHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzODY5NQ==", "bodyText": "Not something for this PR, but I wonder if the read/write lock is over complication.  The things that are going on inside the locked sections of code are very simple operations.  In my experience you need to be doing a lot of stuff in the locked sections to make the cost of a read/write lock worthwhile.  The amount of work the lock is doing to ensure fairness probably dwarfs the amount of work in these methods.  Then each LongAdder is doing its own synchronization internally too.  It is probably the case that it would be more efficient to simply make all the methods that use the read/write lock synchronized, replace the LongAdders with simple longs, and just use ++ to increment them.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442138695", "createdAt": "2020-06-18T10:49:46Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -263,6 +289,15 @@ public Accumulator incFailure() {\n             }\n         }\n \n+        public Accumulator incCacheMiss() {\n+            readWriteLock.readLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2NzExMA==", "bodyText": "I will do some measurements and see which is better :)", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442167110", "createdAt": "2020-06-18T11:48:40Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -263,6 +289,15 @@ public Accumulator incFailure() {\n             }\n         }\n \n+        public Accumulator incCacheMiss() {\n+            readWriteLock.readLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzODY5NQ=="}, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTk1MA==", "bodyText": "Yet again, it is better to measure before making a decision about \"what is faster\".\nHere are average microsecond timed benchmarks for 1 and 128 threads.\nexample code:\nfor (int i = 1; i < 100_001; ++i) {\n    bh.consume(accumulator.incMissingFields().incFailure().incInference());\n}\n\nThe scenario was the BEST cast scenario for the RW lock (only ever doing increments, and never resetting with a full write lock).\nBenchmark                                                   Mode  Cnt        Score        Error  Units\nMultiThreadedStatsAccumulatorBenchmark.rwAccumulator_1      avgt   20     5957.399 \u00b1    112.892  us/op\nMultiThreadedStatsAccumulatorBenchmark.rwAccumulator_128    avgt   20  7480921.908 \u00b1 255364.820  us/op\nMultiThreadedStatsAccumulatorBenchmark.syncAccumulator_1    avgt   20      421.662 \u00b1      2.616  us/op\nMultiThreadedStatsAccumulatorBenchmark.syncAccumulator_128  avgt   20   792910.927 \u00b1  52219.577  us/op\n\nfull benchmark code: https://gist.github.com/benwtrent/b74254bf64aba0c55d4b24a474f9eff1\n@droberts195 ^", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442299950", "createdAt": "2020-06-18T15:09:10Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -263,6 +289,15 @@ public Accumulator incFailure() {\n             }\n         }\n \n+        public Accumulator incCacheMiss() {\n+            readWriteLock.readLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzODY5NQ=="}, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzUxNg==", "bodyText": "Yes, that tallies with what I've always seen in the past, which is that you have to do a lot of work in the locked sections for the benefit of an RW lock to outweigh the complexity of its internal code.\nUp to you if you want to change it in this PR or a different one though.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442303516", "createdAt": "2020-06-18T15:14:32Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -263,6 +289,15 @@ public Accumulator incFailure() {\n             }\n         }\n \n+        public Accumulator incCacheMiss() {\n+            readWriteLock.readLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzODY5NQ=="}, "originalCommit": {"oid": "352f3b2157cb8bf07211dc7d9147f3c09ff4ec7e"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk3MjA2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MDoyMFrOGl3iag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MDoyMFrOGl3iag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MDQyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Could be higher than the number of items in the `trained_model_stats` array as they\n          \n          \n            \n            Could be higher than the number of items in the `trained_model_stats` array as the", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442360426", "createdAt": "2020-06-18T16:40:20Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -67,14 +67,81 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=from]\n (Optional, integer) \n include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n \n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array as they", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4d5ffb601f0f24f508ffa499a34d2d84c72fdf7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk3NzUzOnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MTo0M1rOGl3l4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MTo0M1rOGl3l4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MTMxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is accross all inference contexts, including all pipelines.\n          \n          \n            \n            This is across all inference contexts, including all pipelines.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442361312", "createdAt": "2020-06-18T16:41:43Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -67,14 +67,81 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=from]\n (Optional, integer) \n include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n \n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array as the\n+size of the array is restricted by the supplied `size` parameter.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+The number of ingest pipelines that currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+The number of inference calls where all the training features for the model\n+were missing.\n+\n+`inference_count`:::\n+(integer)\n+The total number of times the model has been called for inference.\n+This is accross all inference contexts, including all pipelines.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "036246fac1e32de713f8db335c96f4f101b517a0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk4NTA2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MzoxMFrOGl3qdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MzoxMFrOGl3qdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MjQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            or its time-to-live (TTL). See <<ML Settings, general-ml-settings>> for the\n          \n          \n            \n            or its time-to-live (TTL). See <<general-ml-settings>> for the", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442362486", "createdAt": "2020-06-18T16:43:10Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -67,14 +67,81 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=from]\n (Optional, integer) \n include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n \n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array as the\n+size of the array is restricted by the supplied `size` parameter.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+The number of ingest pipelines that currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+The number of inference calls where all the training features for the model\n+were missing.\n+\n+`inference_count`:::\n+(integer)\n+The total number of times the model has been called for inference.\n+This is across all inference contexts, including all pipelines.\n+\n+`cache_miss_count`:::\n+(integer)\n+The number of times the model was loaded for inference and was not retrieved from the\n+cache. If this number is close to the `inference_count`, then the cache\n+is not being appropriately used. This can be remedied by increasing the cache's size\n+or its time-to-live (TTL). See <<ML Settings, general-ml-settings>> for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "842331422c053584c0492306d7ddbc9138fec320"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk4ODE3OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0Mzo1MlrOGl3saw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0Mzo1MlrOGl3saw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2Mjk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The number of failures when the using the model for inference\n          \n          \n            \n            The number of failures when using the model for inference.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442362987", "createdAt": "2020-06-18T16:43:52Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -67,14 +67,81 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=from]\n (Optional, integer) \n include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n \n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array as the\n+size of the array is restricted by the supplied `size` parameter.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+The number of ingest pipelines that currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+The number of inference calls where all the training features for the model\n+were missing.\n+\n+`inference_count`:::\n+(integer)\n+The total number of times the model has been called for inference.\n+This is across all inference contexts, including all pipelines.\n+\n+`cache_miss_count`:::\n+(integer)\n+The number of times the model was loaded for inference and was not retrieved from the\n+cache. If this number is close to the `inference_count`, then the cache\n+is not being appropriately used. This can be remedied by increasing the cache's size\n+or its time-to-live (TTL). See <<general-ml-settings>> for the\n+appropriate settings.\n+\n+`failure_count`:::\n+(integer)\n+The number of failures when the using the model for inference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84a280455feb2aa0e6c7d1ed1b734ed388c3232b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk5MTg5OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NDo1NlrOGl3u1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NDo1NlrOGl3u1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MzYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A collection of ingest stats for the model accross all nodes. The values are\n          \n          \n            \n            A collection of ingest stats for the model across all nodes. The values are", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442363604", "createdAt": "2020-06-18T16:44:56Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -67,14 +67,81 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=from]\n (Optional, integer) \n include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n \n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array as the\n+size of the array is restricted by the supplied `size` parameter.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+The number of ingest pipelines that currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+The number of inference calls where all the training features for the model\n+were missing.\n+\n+`inference_count`:::\n+(integer)\n+The total number of times the model has been called for inference.\n+This is across all inference contexts, including all pipelines.\n+\n+`cache_miss_count`:::\n+(integer)\n+The number of times the model was loaded for inference and was not retrieved from the\n+cache. If this number is close to the `inference_count`, then the cache\n+is not being appropriately used. This can be remedied by increasing the cache's size\n+or its time-to-live (TTL). See <<general-ml-settings>> for the\n+appropriate settings.\n+\n+`failure_count`:::\n+(integer)\n+The number of failures when using the model for inference.\n+\n+`timestamp`:::\n+(<<time-units,time units>>)\n+The time when the statistics were last updated.\n+=====\n+\n+`ingest`:::\n+(object)\n+A collection of ingest stats for the model accross all nodes. The values are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eed10adf254fb582eeb7de6742518b962a8bdfc"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk5NTI0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NTo0N1rOGl3w7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NTo0N1rOGl3w7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NDE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            section in <<cluster-nodes-stats,Nodes Stats>>.\n          \n          \n            \n            section in <<cluster-nodes-stats>>.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442364142", "createdAt": "2020-06-18T16:45:47Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc", "diffHunk": "@@ -67,14 +67,81 @@ include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=from]\n (Optional, integer) \n include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=size]\n \n+[role=\"child_attributes\"]\n+[[ml-get-inference-stats-results]]\n+==== {api-response-body-title}\n+\n+`count`::\n+(integer)\n+The total number of trained model statistics that matched the requested ID patterns.\n+Could be higher than the number of items in the `trained_model_stats` array as the\n+size of the array is restricted by the supplied `size` parameter.\n+\n+`trained_model_stats`::\n+(array)\n+An array of trained model statistics, which are sorted by the `model_id` value in\n+ascending order.\n++\n+.Properties of trained model stats\n+[%collapsible%open]\n+====\n+`model_id`:::\n+(string)\n+include::{es-repo-dir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+`pipeline_count`:::\n+(integer)\n+The number of ingest pipelines that currently refer to the model.\n+\n+`inference_stats`:::\n+(object)\n+A collection of inference stats fields.\n++\n+.Properties of inference stats\n+[%collapsible%open]\n+=====\n+\n+`missing_all_fields_count`:::\n+(integer)\n+The number of inference calls where all the training features for the model\n+were missing.\n+\n+`inference_count`:::\n+(integer)\n+The total number of times the model has been called for inference.\n+This is across all inference contexts, including all pipelines.\n+\n+`cache_miss_count`:::\n+(integer)\n+The number of times the model was loaded for inference and was not retrieved from the\n+cache. If this number is close to the `inference_count`, then the cache\n+is not being appropriately used. This can be remedied by increasing the cache's size\n+or its time-to-live (TTL). See <<general-ml-settings>> for the\n+appropriate settings.\n+\n+`failure_count`:::\n+(integer)\n+The number of failures when using the model for inference.\n+\n+`timestamp`:::\n+(<<time-units,time units>>)\n+The time when the statistics were last updated.\n+=====\n+\n+`ingest`:::\n+(object)\n+A collection of ingest stats for the model across all nodes. The values are\n+summations of the individual node statistics. The format matches the `ingest`\n+section in <<cluster-nodes-stats,Nodes Stats>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "470574c2cc5b278c46be48c92e49ecd6e0c4514d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA0MTgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1ODozNVrOGl4Otw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoxNToxNVrOGl-t4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTc2Nw==", "bodyText": "I think this method needs to be synchronized too", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442371767", "createdAt": "2020-06-18T16:58:35Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -194,73 +208,59 @@ public void writeTo(StreamOutput out) throws IOException {\n         out.writeVLong(this.missingAllFieldsCount);\n         out.writeVLong(this.inferenceCount);\n         out.writeVLong(this.failureCount);\n+        if (out.getVersion().onOrAfter(Version.V_7_9_0)) {\n+            out.writeVLong(this.cacheMissCount);\n+        }\n         out.writeOptionalString(this.modelId);\n         out.writeOptionalString(this.nodeId);\n         out.writeInstant(timeStamp);\n     }\n \n     public static class Accumulator {\n \n-        private final LongAdder missingFieldsAccumulator = new LongAdder();\n-        private final LongAdder inferenceAccumulator = new LongAdder();\n-        private final LongAdder failureCountAccumulator = new LongAdder();\n+        private long missingFieldsAccumulator = 0L;\n+        private long inferenceAccumulator = 0L;\n+        private long failureCountAccumulator = 0L;\n+        private long cacheMissAccumulator = 0L;\n         private final String modelId;\n         private final String nodeId;\n-        // curious reader\n-        // you may be wondering why the lock set to the fair.\n-        // When `currentStatsAndReset` is called, we want it guaranteed that it will eventually execute.\n-        // If a ReadWriteLock is unfair, there are no such guarantees.\n-        // A call for the `writelock::lock` could pause indefinitely.\n-        private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock(true);\n-\n-        public Accumulator(String modelId, String nodeId) {\n+\n+        public Accumulator(String modelId, String nodeId, long cacheMisses) {\n             this.modelId = modelId;\n             this.nodeId = nodeId;\n+            this.cacheMissAccumulator = cacheMisses;\n         }\n \n-        public Accumulator(InferenceStats previousStats) {\n+        Accumulator(InferenceStats previousStats) {\n             this.modelId = previousStats.modelId;\n             this.nodeId = previousStats.nodeId;\n-            this.missingFieldsAccumulator.add(previousStats.missingAllFieldsCount);\n-            this.inferenceAccumulator.add(previousStats.inferenceCount);\n-            this.failureCountAccumulator.add(previousStats.failureCount);\n+            this.missingFieldsAccumulator += previousStats.missingAllFieldsCount;\n+            this.inferenceAccumulator += previousStats.inferenceCount;\n+            this.failureCountAccumulator += previousStats.failureCount;\n+            this.cacheMissAccumulator += previousStats.cacheMissCount;\n         }\n \n         public Accumulator merge(InferenceStats otherStats) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a8429d8a3ae9c2c08051753ff76827b92d3dfe2"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3ODA1MA==", "bodyText": "It is only used within ConcurrentHashMap#compute\nSome docs\nThe entire method invocation is performed atomically. \nSome attempted update operations on this map by other threads\nmay be blocked while computation is in progress, so the\ncomputation should be short and simple, and must not attempt to\nupdate any other mappings of this Map.\n\nI will add a comment saying this method is not thread safe itself and should be used in a thread safe fashion.", "url": "https://github.com/elastic/elasticsearch/pull/58252#discussion_r442478050", "createdAt": "2020-06-18T20:15:15Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceStats.java", "diffHunk": "@@ -194,73 +208,59 @@ public void writeTo(StreamOutput out) throws IOException {\n         out.writeVLong(this.missingAllFieldsCount);\n         out.writeVLong(this.inferenceCount);\n         out.writeVLong(this.failureCount);\n+        if (out.getVersion().onOrAfter(Version.V_7_9_0)) {\n+            out.writeVLong(this.cacheMissCount);\n+        }\n         out.writeOptionalString(this.modelId);\n         out.writeOptionalString(this.nodeId);\n         out.writeInstant(timeStamp);\n     }\n \n     public static class Accumulator {\n \n-        private final LongAdder missingFieldsAccumulator = new LongAdder();\n-        private final LongAdder inferenceAccumulator = new LongAdder();\n-        private final LongAdder failureCountAccumulator = new LongAdder();\n+        private long missingFieldsAccumulator = 0L;\n+        private long inferenceAccumulator = 0L;\n+        private long failureCountAccumulator = 0L;\n+        private long cacheMissAccumulator = 0L;\n         private final String modelId;\n         private final String nodeId;\n-        // curious reader\n-        // you may be wondering why the lock set to the fair.\n-        // When `currentStatsAndReset` is called, we want it guaranteed that it will eventually execute.\n-        // If a ReadWriteLock is unfair, there are no such guarantees.\n-        // A call for the `writelock::lock` could pause indefinitely.\n-        private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock(true);\n-\n-        public Accumulator(String modelId, String nodeId) {\n+\n+        public Accumulator(String modelId, String nodeId, long cacheMisses) {\n             this.modelId = modelId;\n             this.nodeId = nodeId;\n+            this.cacheMissAccumulator = cacheMisses;\n         }\n \n-        public Accumulator(InferenceStats previousStats) {\n+        Accumulator(InferenceStats previousStats) {\n             this.modelId = previousStats.modelId;\n             this.nodeId = previousStats.nodeId;\n-            this.missingFieldsAccumulator.add(previousStats.missingAllFieldsCount);\n-            this.inferenceAccumulator.add(previousStats.inferenceCount);\n-            this.failureCountAccumulator.add(previousStats.failureCount);\n+            this.missingFieldsAccumulator += previousStats.missingAllFieldsCount;\n+            this.inferenceAccumulator += previousStats.inferenceCount;\n+            this.failureCountAccumulator += previousStats.failureCount;\n+            this.cacheMissAccumulator += previousStats.cacheMissCount;\n         }\n \n         public Accumulator merge(InferenceStats otherStats) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTc2Nw=="}, "originalCommit": {"oid": "4a8429d8a3ae9c2c08051753ff76827b92d3dfe2"}, "originalPosition": 215}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1566, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}