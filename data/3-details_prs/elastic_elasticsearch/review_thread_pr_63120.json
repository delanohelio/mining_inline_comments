{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTgzNTcy", "number": 63120, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0MDozOVrOEpdKpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0ODowNVrOEpxX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA0OTMyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0MDozOVrOHbIdrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0MDozOVrOHbIdrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMjI3MA==", "bodyText": "Can we generalize the block checks above with Character.isLetterOrDigit() == false ?", "url": "https://github.com/elastic/elasticsearch/pull/63120#discussion_r498212270", "createdAt": "2020-10-01T12:40:39Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -91,13 +93,98 @@\n     public static final String CONTENT_TYPE = \"wildcard\";\n     public static short MAX_CLAUSES_IN_APPROXIMATION_QUERY = 10;\n     public static final int NGRAM_SIZE = 3;\n-    static final NamedAnalyzer WILDCARD_ANALYZER = new NamedAnalyzer(\"_wildcard\", AnalyzerScope.GLOBAL, new Analyzer() {\n+    static final NamedAnalyzer WILDCARD_ANALYZER_7_10 = new NamedAnalyzer(\"_wildcard_7_10\", AnalyzerScope.GLOBAL, new Analyzer() {\n         @Override\n         public TokenStreamComponents createComponents(String fieldName) {\n             Tokenizer tokenizer = new NGramTokenizer(NGRAM_SIZE, NGRAM_SIZE);\n-            return new TokenStreamComponents(tokenizer);\n+            TokenStream tok = new NormaliseThinningFilter(tokenizer);\n+            \n+            return new TokenStreamComponents(r -> {\n+                tokenizer.setReader(r);\n+            }, tok);            \n+            \n+            \n         }\n     });\n+    \n+    // @deprecated - used for BWC with elasticsearch 7.9\n+    static final NamedAnalyzer WILDCARD_ANALYZER_7_9 = new NamedAnalyzer(\"_wildcard\", AnalyzerScope.GLOBAL, new Analyzer() {\n+        @Override\n+        public TokenStreamComponents createComponents(String fieldName) {\n+            Tokenizer tokenizer = new NGramTokenizer(NGRAM_SIZE, NGRAM_SIZE);\n+                return new TokenStreamComponents(tokenizer);\n+        }\n+    });\n+    \n+    public static class NormaliseThinningFilter extends TokenFilter {\n+        private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n+        \n+        /**\n+         * Create a new NormaliseThinningFilter, that normalizes token text such that even-numbered ascii values\n+         * are made odd and punctuation is replaced with /\n+         * \n+         * @param in TokenStream to filter\n+         */\n+        public NormaliseThinningFilter(TokenStream in) {\n+          super(in);\n+        }\n+        \n+        @Override\n+        public final boolean incrementToken() throws IOException {\n+          if (input.incrementToken()) {\n+              normalize(termAtt.buffer(), 0, termAtt.length());\n+            return true;\n+          } else\n+            return false;\n+        }\n+        \n+        public static String normalize(String s) {\n+            char[] chars = s.toCharArray();\n+            normalize(chars, 0, chars.length);\n+            return new String(chars);            \n+        }\n+        \n+        /**\n+         * Normalizes a token\n+         */\n+        public static void normalize(final char[] buffer, final int offset, final int limit) {\n+          assert buffer.length >= limit;\n+          assert 0 <= offset && offset <= buffer.length;\n+          for (int i = offset; i < limit;) {\n+            int codepoint = Character.codePointAt(buffer, i, limit);\n+            i += Character.toChars(\n+                    normalize(codepoint), buffer, i);\n+           }\n+        }\n+\n+        private static int normalize(int codepoint) {\n+            // Normalize  space ! \" # $ % &  ' ( } * + , - . chars to / \n+            if (codepoint >=32 && codepoint <= 47) {\n+                return 47; \n+            }\n+            // Normalize : ; < = > ? @ chars to / \n+            if (codepoint >=58 && codepoint <= 64) {\n+                return 47; \n+            }\n+            // Normalize  [ \\ ] ^ _ ` chars to / \n+            if (codepoint >=91 && codepoint <= 96) {\n+                return 47; \n+            }\n+            // Normalize  { | } ~ chars to / \n+            if (codepoint >=123 && codepoint <= 126) {\n+                return 47; \n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb82a10c64b94414dee8fa8a196886f61796a28"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA2NDQ2OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0NDozNFrOHbIm_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0NDozNFrOHbIm_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNDY1Mw==", "bodyText": "We could add the lowercase filter here instead of lowercasing outside of the analyzer ? I also wonder if putting a ASCIIFoldingFilter makes sense but that's maybe a different scope.", "url": "https://github.com/elastic/elasticsearch/pull/63120#discussion_r498214653", "createdAt": "2020-10-01T12:44:34Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -91,13 +93,98 @@\n     public static final String CONTENT_TYPE = \"wildcard\";\n     public static short MAX_CLAUSES_IN_APPROXIMATION_QUERY = 10;\n     public static final int NGRAM_SIZE = 3;\n-    static final NamedAnalyzer WILDCARD_ANALYZER = new NamedAnalyzer(\"_wildcard\", AnalyzerScope.GLOBAL, new Analyzer() {\n+    static final NamedAnalyzer WILDCARD_ANALYZER_7_10 = new NamedAnalyzer(\"_wildcard_7_10\", AnalyzerScope.GLOBAL, new Analyzer() {\n         @Override\n         public TokenStreamComponents createComponents(String fieldName) {\n             Tokenizer tokenizer = new NGramTokenizer(NGRAM_SIZE, NGRAM_SIZE);\n-            return new TokenStreamComponents(tokenizer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb82a10c64b94414dee8fa8a196886f61796a28"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA3ODc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODoxMFrOHbIwAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODoxMFrOHbIwAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNjk2MQ==", "bodyText": "This should depend on the index created version ?", "url": "https://github.com/elastic/elasticsearch/pull/63120#discussion_r498216961", "createdAt": "2020-10-01T12:48:10Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -215,13 +302,15 @@ public WildcardFieldMapper build(BuilderContext context) {\n         private WildcardFieldType(String name, FieldType fieldType, Map<String, String> meta) {\n             super(name, true, fieldType.stored(), true,\n                 new TextSearchInfo(fieldType, null, Lucene.KEYWORD_ANALYZER, Lucene.KEYWORD_ANALYZER), meta);\n-            setIndexAnalyzer(WILDCARD_ANALYZER);\n+            setIndexAnalyzer(WILDCARD_ANALYZER_7_10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb82a10c64b94414dee8fa8a196886f61796a28"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA4MzI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OToyNlrOHbIy7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OToyNlrOHbIy7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzcxMQ==", "bodyText": "You don't need to resolve this at query-time. The correct analyzer can be picked once from the index created version when the field type is created.", "url": "https://github.com/elastic/elasticsearch/pull/63120#discussion_r498217711", "createdAt": "2020-10-01T12:49:26Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -215,13 +302,15 @@ public WildcardFieldMapper build(BuilderContext context) {\n         private WildcardFieldType(String name, FieldType fieldType, Map<String, String> meta) {\n             super(name, true, fieldType.stored(), true,\n                 new TextSearchInfo(fieldType, null, Lucene.KEYWORD_ANALYZER, Lucene.KEYWORD_ANALYZER), meta);\n-            setIndexAnalyzer(WILDCARD_ANALYZER);\n+            setIndexAnalyzer(WILDCARD_ANALYZER_7_10);\n         }\n \n         @Override\n         public Query wildcardQuery(String wildcardPattern, RewriteMethod method, boolean caseInsensitive, QueryShardContext context) {\n \n             String ngramIndexPattern = addLineEndChars(toLowerCase(wildcardPattern));\n+            \n+            Analyzer analyzer = getCorrectAnalyzerForIndexVersion(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb82a10c64b94414dee8fa8a196886f61796a28"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA4NDUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OTo0MVrOHbIzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OTo0MVrOHbIzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzg4Mw==", "bodyText": "same here", "url": "https://github.com/elastic/elasticsearch/pull/63120#discussion_r498217883", "createdAt": "2020-10-01T12:49:41Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -673,6 +765,7 @@ public Query rangeQuery(\n         ) {\n             BytesRef lower = lowerTerm == null ? null : BytesRefs.toBytesRef(lowerTerm);\n             BytesRef upper = upperTerm == null ? null : BytesRefs.toBytesRef(upperTerm);\n+            Analyzer analyzer = getCorrectAnalyzerForIndexVersion(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb82a10c64b94414dee8fa8a196886f61796a28"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA4NDk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OTo0N1rOHbIz6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OTo0N1rOHbIz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzk2MA==", "bodyText": "and here", "url": "https://github.com/elastic/elasticsearch/pull/63120#discussion_r498217960", "createdAt": "2020-10-01T12:49:47Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -751,6 +836,8 @@ public Query fuzzyQuery(\n         ) {\n             String searchTerm = BytesRefs.toString(value);\n             String lowerSearchTerm = toLowerCase(searchTerm);\n+            Analyzer analyzer = getCorrectAnalyzerForIndexVersion(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb82a10c64b94414dee8fa8a196886f61796a28"}, "originalPosition": 341}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjM2MDA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0ODowNVrOHbpRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0ODowNVrOHbpRtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0OTg3Nw==", "bodyText": "nit: can we rename into PunctuationFoldingFilter or something similar ?", "url": "https://github.com/elastic/elasticsearch/pull/63120#discussion_r498749877", "createdAt": "2020-10-02T10:48:05Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -91,13 +94,95 @@\n     public static final String CONTENT_TYPE = \"wildcard\";\n     public static short MAX_CLAUSES_IN_APPROXIMATION_QUERY = 10;\n     public static final int NGRAM_SIZE = 3;\n-    static final NamedAnalyzer WILDCARD_ANALYZER = new NamedAnalyzer(\"_wildcard\", AnalyzerScope.GLOBAL, new Analyzer() {\n+    static final NamedAnalyzer WILDCARD_ANALYZER_7_10 = new NamedAnalyzer(\"_wildcard_7_10\", AnalyzerScope.GLOBAL, new Analyzer() {\n         @Override\n         public TokenStreamComponents createComponents(String fieldName) {\n             Tokenizer tokenizer = new NGramTokenizer(NGRAM_SIZE, NGRAM_SIZE);\n-            return new TokenStreamComponents(tokenizer);\n+            \n+            TokenStream tok = new LowerCaseFilter(tokenizer);\n+            tok = new NormaliseThinningFilter(tok);\n+            \n+            return new TokenStreamComponents(r -> {\n+                tokenizer.setReader(r);\n+            }, tok);            \n+            \n+            \n         }\n     });\n+    \n+    // @deprecated - used for BWC with elasticsearch 7.9\n+    static final NamedAnalyzer WILDCARD_ANALYZER_7_9 = new NamedAnalyzer(\"_wildcard\", AnalyzerScope.GLOBAL, new Analyzer() {\n+        @Override\n+        public TokenStreamComponents createComponents(String fieldName) {\n+            Tokenizer tokenizer = new NGramTokenizer(NGRAM_SIZE, NGRAM_SIZE);\n+            TokenStream tok = new LowerCaseFilter(tokenizer);\n+//                return new TokenStreamComponents(tokenizer);\n+            return new TokenStreamComponents(r -> {\n+                tokenizer.setReader(r);\n+            }, tok);            \n+        }\n+    });\n+    \n+    public static class NormaliseThinningFilter extends TokenFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e4e84800ac207379be6e1254a95e4c03833b17"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3213, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}