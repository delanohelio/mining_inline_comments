{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODY4NTc5", "number": 54358, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo1ODoxM1rODsno1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowMjo0OFrODsnutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTEzMzY2OnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo1ODoxM1rOF9kVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMToyN1rOF-RUbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwMjgyMQ==", "bodyText": "Why make this way more aggressive? I don't see the harm in doing so ... seems like we don't need these long timeout here, just wondering? :)", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400102821", "createdAt": "2020-03-30T10:58:13Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "diffHunk": "@@ -128,7 +135,7 @@ private BlobContainer createBlobContainer(final int maxRetries) {\n         final AzureStorageService service = new AzureStorageService(clientSettings.build()) {\n             @Override\n             RetryPolicyFactory createRetryPolicy(final AzureStorageSettings azureStorageSettings) {\n-                return new RetryExponentialRetry(1, 100, 500, azureStorageSettings.getMaxRetries());\n+                return new RetryExponentialRetry(1, 10, 100, azureStorageSettings.getMaxRetries());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTc4OA==", "bodyText": "While looking at this class I found them a bit high, specially when a high number of retries (5) is picked up so I lowered them. If that causes any issue on CI I'll restore the previous values.", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400839788", "createdAt": "2020-03-31T11:31:27Z", "author": {"login": "tlrx"}, "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "diffHunk": "@@ -128,7 +135,7 @@ private BlobContainer createBlobContainer(final int maxRetries) {\n         final AzureStorageService service = new AzureStorageService(clientSettings.build()) {\n             @Override\n             RetryPolicyFactory createRetryPolicy(final AzureStorageSettings azureStorageSettings) {\n-                return new RetryExponentialRetry(1, 100, 500, azureStorageSettings.getMaxRetries());\n+                return new RetryExponentialRetry(1, 10, 100, azureStorageSettings.getMaxRetries());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwMjgyMQ=="}, "originalCommit": {"oid": "8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE0ODcwOnYy", "diffSide": "RIGHT", "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowMjo0OFrOF9kfJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMDoxMlrOF-RSDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNTI1NQ==", "bodyText": "Maybe try { ... } finally { exchange.close()} around the whole handler so we don't get weird exceptions from the REST mock if an assertion trips?", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400105255", "createdAt": "2020-03-30T11:02:48Z", "author": {"login": "original-brownbear"}, "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "diffHunk": "@@ -198,6 +214,57 @@ public void testReadBlobWithRetries() throws Exception {\n         }\n     }\n \n+    public void testReadRangeBlobWithRetries() throws Exception {\n+        final int maxRetries = randomIntBetween(1, 5);\n+        final CountDown countDownHead = new CountDown(maxRetries);\n+        final CountDown countDownGet = new CountDown(maxRetries);\n+        final byte[] bytes = randomBlobContent();\n+        httpServer.createContext(\"/container/read_range_blob_max_retries\", exchange -> {\n+            Streams.readFully(exchange.getRequestBody());\n+            if (\"HEAD\".equals(exchange.getRequestMethod())) {\n+                if (countDownHead.countDown()) {\n+                    exchange.getResponseHeaders().add(\"Content-Type\", \"application/octet-stream\");\n+                    exchange.getResponseHeaders().add(\"x-ms-blob-content-length\", String.valueOf(bytes.length));\n+                    exchange.getResponseHeaders().add(\"x-ms-blob-type\", \"blockblob\");\n+                    exchange.sendResponseHeaders(RestStatus.OK.getStatus(), -1);\n+                    exchange.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTE4MA==", "bodyText": "Sure", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400839180", "createdAt": "2020-03-31T11:30:12Z", "author": {"login": "tlrx"}, "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "diffHunk": "@@ -198,6 +214,57 @@ public void testReadBlobWithRetries() throws Exception {\n         }\n     }\n \n+    public void testReadRangeBlobWithRetries() throws Exception {\n+        final int maxRetries = randomIntBetween(1, 5);\n+        final CountDown countDownHead = new CountDown(maxRetries);\n+        final CountDown countDownGet = new CountDown(maxRetries);\n+        final byte[] bytes = randomBlobContent();\n+        httpServer.createContext(\"/container/read_range_blob_max_retries\", exchange -> {\n+            Streams.readFully(exchange.getRequestBody());\n+            if (\"HEAD\".equals(exchange.getRequestMethod())) {\n+                if (countDownHead.countDown()) {\n+                    exchange.getResponseHeaders().add(\"Content-Type\", \"application/octet-stream\");\n+                    exchange.getResponseHeaders().add(\"x-ms-blob-content-length\", String.valueOf(bytes.length));\n+                    exchange.getResponseHeaders().add(\"x-ms-blob-type\", \"blockblob\");\n+                    exchange.sendResponseHeaders(RestStatus.OK.getStatus(), -1);\n+                    exchange.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNTI1NQ=="}, "originalCommit": {"oid": "8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4037, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}