{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODE2Njkx", "number": 56928, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjowMTo1NlrOD9xCUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NjoyNlrOD-q76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDkzMTM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjowMTo1NlrOGXdFVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoyNTozN1rOGYYaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjkzMw==", "bodyText": "nit: I was wondering if we should use covariance here and anywhere we return Strings, like we do for other types.", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r427246933", "createdAt": "2020-05-19T12:01:56Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -187,6 +187,11 @@ public KeywordFieldMapper build(BuilderContext context) {\n         }\n     }\n \n+    @Override\n+    protected Object parseSourceValue(Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDE5OQ==", "bodyText": "You do return a Number from NumberFieldMapper#parseValue. It feels like a good thing to do.", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r427500199", "createdAt": "2020-05-19T18:07:54Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -187,6 +187,11 @@ public KeywordFieldMapper build(BuilderContext context) {\n         }\n     }\n \n+    @Override\n+    protected Object parseSourceValue(Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjkzMw=="}, "originalCommit": {"oid": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODg4Ng==", "bodyText": "\ud83d\udc4d I agree that we should use the most specific type, had missed a couple classes here.\nA note that @javanna mentioned it could be helpful to return BytesRef here instead of String. I tried it out and found it simpler to use strings for now -- we can adjust it later if you end up using this API and need a change.", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428218886", "createdAt": "2020-05-20T18:25:37Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -187,6 +187,11 @@ public KeywordFieldMapper build(BuilderContext context) {\n         }\n     }\n \n+    @Override\n+    protected Object parseSourceValue(Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjkzMw=="}, "originalCommit": {"oid": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjQ4NDMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/RangeType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODowOTowMFrOGXslGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoyMzoyN1rOGYYVIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDgyNw==", "bodyText": "Could add a space after :? I have trouble reading it as a ternary without for some reason!", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r427500827", "createdAt": "2020-05-19T18:09:00Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RangeType.java", "diffHunk": "@@ -619,14 +629,17 @@ public Object parseTo(RangeFieldMapper.RangeFieldType fieldType, XContentParser\n     public abstract Query withinQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n     public abstract Query containsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n     public abstract Query intersectsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n-    public Object parse(Object value, boolean coerce) {\n-        return numberType.parse(value, coerce);\n-    }\n+\n     public Query rangeQuery(String field, boolean hasDocValues, Object from, Object to, boolean includeFrom, boolean includeTo,\n                             ShapeRelation relation, @Nullable ZoneId timeZone, @Nullable DateMathParser dateMathParser,\n                             QueryShardContext context) {\n-        Object lower = from == null ? minValue() : parse(from, false);\n-        Object upper = to == null ? maxValue() : parse(to, false);\n+        Object lower = from == null ? minValue() : parseValue(from, false, dateMathParser);\n+        Object upper = to == null ? maxValue() :parseValue(to, false, dateMathParser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNzYzNA==", "bodyText": "Oops, thanks. I actually opened #56976 to refactor RangeType separately -- once that's merged I'll rebase this PR on top of it.", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428217634", "createdAt": "2020-05-20T18:23:27Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RangeType.java", "diffHunk": "@@ -619,14 +629,17 @@ public Object parseTo(RangeFieldMapper.RangeFieldType fieldType, XContentParser\n     public abstract Query withinQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n     public abstract Query containsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n     public abstract Query intersectsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n-    public Object parse(Object value, boolean coerce) {\n-        return numberType.parse(value, coerce);\n-    }\n+\n     public Query rangeQuery(String field, boolean hasDocValues, Object from, Object to, boolean includeFrom, boolean includeTo,\n                             ShapeRelation relation, @Nullable ZoneId timeZone, @Nullable DateMathParser dateMathParser,\n                             QueryShardContext context) {\n-        Object lower = from == null ? minValue() : parse(from, false);\n-        Object upper = to == null ? maxValue() : parse(to, false);\n+        Object lower = from == null ? minValue() : parseValue(from, false, dateMathParser);\n+        Object upper = to == null ? maxValue() :parseValue(to, false, dateMathParser);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDgyNw=="}, "originalCommit": {"oid": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDM3MzczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjozNDowN1rOGY6FxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo1NzozM1rOGY67RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3MDc1Nw==", "bodyText": "Keywords shouldn't also consider ignore_above and the extraction from _source to happen with this value in mind?", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428770757", "createdAt": "2020-05-21T16:34:07Z", "author": {"login": "astefan"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -187,6 +187,11 @@ public KeywordFieldMapper build(BuilderContext context) {\n         }\n     }\n \n+    @Override\n+    protected String parseSourceValue(Object value) {\n+        return value.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4NDQ1Mg==", "bodyText": "I'm planning to tackle ignore_above (and likely null_value too) in a follow-up PR.", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428784452", "createdAt": "2020-05-21T16:57:33Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -187,6 +187,11 @@ public KeywordFieldMapper build(BuilderContext context) {\n         }\n     }\n \n+    @Override\n+    protected String parseSourceValue(Object value) {\n+        return value.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3MDc1Nw=="}, "originalCommit": {"oid": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDQxMjA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NDo1N1rOGY6eYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzowMDoxNVrOGY7Btg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3NzA1OQ==", "bodyText": "Really minor: all the indentations for the lines containing method calls in testLookupValues are inconsistent compared to the other methods in this class.", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428777059", "createdAt": "2020-05-21T16:44:57Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java", "diffHunk": "@@ -127,4 +130,27 @@ public void testMeta() throws Exception {\n                 new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n         assertEquals(mapping3, mapper.mappingSource().toString());\n     }\n+\n+    public void testLookupValues() throws Exception {\n+        IndexService indexService = createIndex(\"test\");\n+        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n+            .startObject(\"properties\").startObject(\"field\").field(\"type\", \"constant_keyword\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4NjEwMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428786102", "createdAt": "2020-05-21T17:00:15Z", "author": {"login": "jtibshirani"}, "path": "x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java", "diffHunk": "@@ -127,4 +130,27 @@ public void testMeta() throws Exception {\n                 new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n         assertEquals(mapping3, mapper.mappingSource().toString());\n     }\n+\n+    public void testLookupValues() throws Exception {\n+        IndexService indexService = createIndex(\"test\");\n+        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n+            .startObject(\"properties\").startObject(\"field\").field(\"type\", \"constant_keyword\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3NzA1OQ=="}, "originalCommit": {"oid": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDQxNzcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NjoyNlrOGY6h5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NjoyNlrOGY6h5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3Nzk1OA==", "bodyText": "Same comment as the one for keyword field: shouldn't ignore_above be considered when parsing the source?", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428777958", "createdAt": "2020-05-21T16:46:26Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -551,6 +551,11 @@ protected void parseCreateField(ParseContext context) throws IOException {\n         parseDoc.addAll(fields);\n     }\n \n+    @Override\n+    protected String parseSourceValue(Object value) {\n+        return value.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 372, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}