{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTc2MTE1", "number": 62932, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyMToyMFrOEoDY0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyNDoxMVrOEpDjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM0MDAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyMToyMFrOHY7GBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyMToyMFrOHY7GBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NjA3MA==", "bodyText": "Please add some tests for failures, e.g.:\n\nbackquote unescaped\ndouble backquotes\nescaped backslash and backquote: \\\\\\`", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r495896070", "createdAt": "2020-09-28T12:21:20Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "diffHunk": "@@ -136,6 +136,19 @@ public void testBackQuotedAttribute() {\n         assertThat(ua.qualifier(), is(nullValue()));\n     }\n \n+    public void testBackQuotedIdentifierWithEscapedBackQuote() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f54646128593b2e84b05c0d15f304daa7b22a8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDYwMjg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozMToyMVrOHadqiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo1ODo0NVrOHae86A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxMTA0OQ==", "bodyText": "Why is there a newIdentifier and the existing identifier is not reused?\nAlso shouldn't the condition check that the identifiers starts and stops with a backtick?\nPlease add a test for the following cases:\n`bar\n``bar`\n```bar`\nbar`\nbar``", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497511049", "createdAt": "2020-09-30T13:31:21Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java", "diffHunk": "@@ -27,6 +27,10 @@ public String visitQualifiedName(QualifiedNameContext ctx) {\n     }\n \n     private static String unquoteIdentifier(String identifier) {\n-        return identifier.replace(\"`\", \"\");\n+        String newIdentifier = identifier;\n+        if (identifier.charAt(0) == '`') {\n+            newIdentifier = identifier.substring(1, identifier.length() - 1);\n+        }\n+        return newIdentifier.replace(\"``\", \"`\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61ce147577143bf471eedcc99ce905bc454ae326"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzMjEzNg==", "bodyText": "I can reuse it, it's just personal pref to not change the passed arg.\nNot necessary because if it's correctly parsed from the parser it always has the ending backquote, we use the same checks for the unquoteString method.\nWill add more tests", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497532136", "createdAt": "2020-09-30T13:58:45Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java", "diffHunk": "@@ -27,6 +27,10 @@ public String visitQualifiedName(QualifiedNameContext ctx) {\n     }\n \n     private static String unquoteIdentifier(String identifier) {\n-        return identifier.replace(\"`\", \"\");\n+        String newIdentifier = identifier;\n+        if (identifier.charAt(0) == '`') {\n+            newIdentifier = identifier.substring(1, identifier.length() - 1);\n+        }\n+        return newIdentifier.replace(\"``\", \"`\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxMTA0OQ=="}, "originalCommit": {"oid": "61ce147577143bf471eedcc99ce905bc454ae326"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDYyMTQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozNTozNFrOHad2tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozNTozNFrOHad2tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNDE2Ng==", "bodyText": "this indicates = is not supported rather than the identifier not working...", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497514166", "createdAt": "2020-09-30T13:35:34Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "diffHunk": "@@ -136,6 +136,33 @@ public void testBackQuotedAttribute() {\n         assertThat(ua.qualifier(), is(nullValue()));\n     }\n \n+    public void testBackQuotedIdentifierWithEscapedBackQuote() {\n+        String quote = \"`\";\n+        String qualifier = \"``test``table``\";\n+        String expectedQualifier = \"`test`table`\";\n+        String name = \"@timestamp\";\n+        Expression exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n+        assertThat(exp, instanceOf(UnresolvedAttribute.class));\n+        UnresolvedAttribute ua = (UnresolvedAttribute) exp;\n+        assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifier(), is(nullValue()));\n+    }\n+\n+    public void testBackQuotedIdentifierWithUnescapedBackQuotes() {\n+        ParsingException e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier` = \\\"some_value\\\"\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` = \\\"some_value\\\"'\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3d0866924a29cf25a659b6bc8782a3e58d650"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDg1MjE2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyNDoxMVrOHagJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyNDoxMVrOHagJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1MTY3Nw==", "bodyText": "This means that any identifier containing a backquote needs quoting (that is be surrounded by backticks and any ticks inside of it be escaped by doubling:\n`foo -> ```foo`\n\n/cc @jrodewig", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497551677", "createdAt": "2020-09-30T14:24:11Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "diffHunk": "@@ -136,6 +137,60 @@ public void testBackQuotedAttribute() {\n         assertThat(ua.qualifier(), is(nullValue()));\n     }\n \n+    public void testBackQuotedIdentifierWithEscapedBackQuote() {\n+        String quote = \"`\";\n+        String qualifier = \"``test``table``\";\n+        String expectedQualifier = \"`test`table`\";\n+        String name = \"@timestamp\";\n+        Expression exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n+        assertThat(exp, instanceOf(UnresolvedAttribute.class));\n+        UnresolvedAttribute ua = (UnresolvedAttribute) exp;\n+        assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifier(), is(nullValue()));\n+\n+        quote = \"`\";\n+        qualifier = \"``test_table\";\n+        expectedQualifier = \"`test_table\";\n+        name = \"@timestamp\";\n+        exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n+        assertThat(exp, instanceOf(UnresolvedAttribute.class));\n+        ua = (UnresolvedAttribute) exp;\n+        assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifier(), is(nullValue()));\n+    }\n+\n+    public void testBackQuotedIdentifierWithUnescapedBackQuotes() {\n+        ParsingException e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"`wrong_identifier == true\"));\n+        assertEquals(\"line 1:1: token recognition error at: '`wrong_identifier == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier == true\"));\n+        assertThat(e.getMessage(), startsWith(\"line 1:3: mismatched input 'wrong_identifier' expecting {<EOF>, \"));\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier` == true\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"`wrong`identifier` == true\"));\n+        assertEquals(\"line 1:18: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"wrong_identifier` == true\"));\n+        assertEquals(\"line 1:17: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"wrong_identifier`` == true\"));\n+        assertThat(e.getMessage(), startsWith(\"line 1:17: mismatched input '``' expecting {<EOF>,\"));\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"`wrong_identifier`` == true\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` == true'\", e.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0da2c88907546b1ef1e78286bb7900f8c68e5c"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3368, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}