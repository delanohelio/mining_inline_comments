{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5ODA5NzU1", "number": 66303, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozNjo1N1rOFFP_CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxODowNzoyOVrOFVUfDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDQ5MDk3OnYy", "diffSide": "RIGHT", "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozNjo1N1rOIFrElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo1OToyNFrOIFwR4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxOTQ3Ng==", "bodyText": "Do any of these version functions need to handle pre-release information?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542819476", "createdAt": "2020-12-14T21:36:57Z", "author": {"login": "sethmlarson"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+class RuntimeInfo {\n+\n+    /**\n+     * Returns runtime info to append to the metadata header. Currently looks up classes identifying non-Java JVM\n+     * languages and appends their major/minor version patch.\n+     */\n+    public static String getRuntimeMetadata() {\n+        StringBuilder s = new StringBuilder();\n+        String version;\n+\n+        version = HlrcKind();\n+        if (version != null) {\n+            s.append(\",hl=\").append(version);\n+        }\n+\n+        version= kotlinVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwNDgwMA==", "bodyText": "Service/language/http-client versions are not stripped, and so can include pre-release information. For language runtimes we only keep major.minor as this information allows us to better understand the ecosystem and the patch version doesn't bring useful information. The patch version for these may only be of interest if we build dedicated clients for these languages, in which case their version will be reported as the language version.", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542904800", "createdAt": "2020-12-14T22:59:24Z", "author": {"login": "swallez"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+class RuntimeInfo {\n+\n+    /**\n+     * Returns runtime info to append to the metadata header. Currently looks up classes identifying non-Java JVM\n+     * languages and appends their major/minor version patch.\n+     */\n+    public static String getRuntimeMetadata() {\n+        StringBuilder s = new StringBuilder();\n+        String version;\n+\n+        version = HlrcKind();\n+        if (version != null) {\n+            s.append(\",hl=\").append(version);\n+        }\n+\n+        version= kotlinVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxOTQ3Ng=="}, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDQ5NDEwOnYy", "diffSide": "RIGHT", "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozNzoyN1rOIFrGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxMTozNDozNFrOIbDX9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxOTk3MQ==", "bodyText": "If patch numbers aren't long can we keep this info anyways?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542819971", "createdAt": "2020-12-14T21:37:27Z", "author": {"login": "sethmlarson"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+class RuntimeInfo {\n+\n+    /**\n+     * Returns runtime info to append to the metadata header. Currently looks up classes identifying non-Java JVM\n+     * languages and appends their major/minor version patch.\n+     */\n+    public static String getRuntimeMetadata() {\n+        StringBuilder s = new StringBuilder();\n+        String version;\n+\n+        version = HlrcKind();\n+        if (version != null) {\n+            s.append(\",hl=\").append(version);\n+        }\n+\n+        version= kotlinVersion();\n+        if (version != null) {\n+            s.append(\",kt=\").append(version);\n+        }\n+\n+        version = scalaVersion();\n+        if (version != null) {\n+            s.append(\",sc=\").append(version);\n+        }\n+\n+        version = clojureVersion();\n+        if (version != null) {\n+            s.append(\",clj=\").append(version);\n+        }\n+\n+        version = groovyVersion();\n+        if (version != null) {\n+            s.append(\",gy=\").append(version);\n+        }\n+\n+        return s.toString();\n+    }\n+\n+    public static String HlrcKind() {\n+        try {\n+            Class.forName(\"org.elasticsearch.client.RestHighLevelClient\");\n+        } catch (Exception t) {\n+            return null;\n+        }\n+        // 1 is the HLRC based on ES server request/response classes\n+        // 2 will be the HLRC based on code generation from API specs\n+        return \"1\";\n+    }\n+\n+    public static String kotlinVersion() {\n+        try {\n+            //KotlinVersion.CURRENT.toString()\n+            Class<?> clazz = Class.forName(\"kotlin.KotlinVersion\");\n+            Field field = clazz.getField(\"CURRENT\");\n+            String version = field.get(null).toString();\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String scalaVersion() {\n+        try {\n+            // scala.util.Properties.versionNumberString()\n+            Class<?> clazz = Class.forName(\"scala.util.Properties\");\n+            Method m = clazz.getMethod(\"versionNumberString\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String clojureVersion() {\n+        try {\n+            // (clojure-version) which translates to\n+            // clojure.core$clojure_version.invokeStatic()\n+            Class<?> clazz = Class.forName(\"clojure.core$clojure_version\");\n+            Method m = clazz.getMethod(\"invokeStatic\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String groovyVersion() {\n+        try {\n+            // groovy.lang.GroovySystem.getVersion()\n+            // There's also getShortVersion(), but only since Groovy 3.0.1\n+            Class<?> clazz = Class.forName(\"groovy.lang.GroovySystem\");\n+            Method m = clazz.getMethod(\"getVersion\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    static String stripPatchRevision(String version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTIzNzc0OA==", "bodyText": "They can be long depending on the language, like 2.13.0-M5-6e0cba7 for some release of Scala. We could also compact pre-release versions but there's honestly no real value in the patch revision for this particular use case where we just want to know if a particular language is present, and in what major version (minor language versions are often not exactly minor). The patch number won't give us any actionable information unless we have a dedicated client for that language, in which case the full version will be reported in the first part of the header.", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565237748", "createdAt": "2021-01-27T11:34:34Z", "author": {"login": "swallez"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+class RuntimeInfo {\n+\n+    /**\n+     * Returns runtime info to append to the metadata header. Currently looks up classes identifying non-Java JVM\n+     * languages and appends their major/minor version patch.\n+     */\n+    public static String getRuntimeMetadata() {\n+        StringBuilder s = new StringBuilder();\n+        String version;\n+\n+        version = HlrcKind();\n+        if (version != null) {\n+            s.append(\",hl=\").append(version);\n+        }\n+\n+        version= kotlinVersion();\n+        if (version != null) {\n+            s.append(\",kt=\").append(version);\n+        }\n+\n+        version = scalaVersion();\n+        if (version != null) {\n+            s.append(\",sc=\").append(version);\n+        }\n+\n+        version = clojureVersion();\n+        if (version != null) {\n+            s.append(\",clj=\").append(version);\n+        }\n+\n+        version = groovyVersion();\n+        if (version != null) {\n+            s.append(\",gy=\").append(version);\n+        }\n+\n+        return s.toString();\n+    }\n+\n+    public static String HlrcKind() {\n+        try {\n+            Class.forName(\"org.elasticsearch.client.RestHighLevelClient\");\n+        } catch (Exception t) {\n+            return null;\n+        }\n+        // 1 is the HLRC based on ES server request/response classes\n+        // 2 will be the HLRC based on code generation from API specs\n+        return \"1\";\n+    }\n+\n+    public static String kotlinVersion() {\n+        try {\n+            //KotlinVersion.CURRENT.toString()\n+            Class<?> clazz = Class.forName(\"kotlin.KotlinVersion\");\n+            Field field = clazz.getField(\"CURRENT\");\n+            String version = field.get(null).toString();\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String scalaVersion() {\n+        try {\n+            // scala.util.Properties.versionNumberString()\n+            Class<?> clazz = Class.forName(\"scala.util.Properties\");\n+            Method m = clazz.getMethod(\"versionNumberString\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String clojureVersion() {\n+        try {\n+            // (clojure-version) which translates to\n+            // clojure.core$clojure_version.invokeStatic()\n+            Class<?> clazz = Class.forName(\"clojure.core$clojure_version\");\n+            Method m = clazz.getMethod(\"invokeStatic\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String groovyVersion() {\n+        try {\n+            // groovy.lang.GroovySystem.getVersion()\n+            // There's also getShortVersion(), but only since Groovy 3.0.1\n+            Class<?> clazz = Class.forName(\"groovy.lang.GroovySystem\");\n+            Method m = clazz.getMethod(\"getVersion\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    static String stripPatchRevision(String version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxOTk3MQ=="}, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDQ5ODE4OnYy", "diffSide": "RIGHT", "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozODoxMVrOIFrJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzowNDoyNVrOIFwlBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDYyMA==", "bodyText": "metaHeaderEnabled to conform with the meta header noun", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542820620", "createdAt": "2020-12-14T21:38:11Z", "author": {"login": "sethmlarson"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -56,6 +68,39 @@\n     private NodeSelector nodeSelector = NodeSelector.ANY;\n     private boolean strictDeprecationMode = false;\n     private boolean compressionEnabled = false;\n+    private boolean metadataHeaderEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwOTcwMw==", "bodyText": "Done. Also renamed constants.", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542909703", "createdAt": "2020-12-14T23:04:25Z", "author": {"login": "swallez"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -56,6 +68,39 @@\n     private NodeSelector nodeSelector = NodeSelector.ANY;\n     private boolean strictDeprecationMode = false;\n     private boolean compressionEnabled = false;\n+    private boolean metadataHeaderEnabled = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDYyMA=="}, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDU1NzQ0OnYy", "diffSide": "RIGHT", "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0NzoxNlrOIFru8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo0NDo1OVrOIGG2PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDMyMA==", "bodyText": "While this is better, I still think we should not be silently allowing leniency in the computation. If the header is enabled, we should have a valid value, or throw an error. My original suggestion was to lazily set the cached header value (it could and should be outside this lambda, since as you say, the enabled flag is per client, we don't need to check it on every request). This way the method computing the header value does not need all of the try/catch for failures (with one exception: we still need to handle the various possible runtimes, but we should narrow those to ClassNotFoundException).", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542830320", "createdAt": "2020-12-14T21:47:16Z", "author": {"login": "rjernst"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -220,11 +276,20 @@ private CloseableHttpAsyncClient createHttpClient() {\n                 //default settings for connection pooling may be too constraining\n                 .setMaxConnPerRoute(DEFAULT_MAX_CONN_PER_ROUTE).setMaxConnTotal(DEFAULT_MAX_CONN_TOTAL)\n                 .setSSLContext(SSLContext.getDefault())\n+                .setUserAgent(USER_AGENT_HEADER_VALUE)\n                 .setTargetAuthenticationStrategy(new PersistentCredentialsAuthenticationStrategy());\n             if (httpClientConfigCallback != null) {\n                 httpClientBuilder = httpClientConfigCallback.customizeHttpClient(httpClientBuilder);\n             }\n \n+            // Always add metadata header last so that it's not overwritten\n+            httpClientBuilder.addInterceptorLast((HttpRequest request, HttpContext context) -> {\n+                if (metadataHeaderEnabled) {\n+                    request.setHeader(METADATA_HEADER, METADATA_HEADER_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5NjM5NA==", "bodyText": "The header was already computed outside the lambda. Moving it to a static initializer allows computing it only once instead of at every construction of a client.\nRegarding exceptions and leniency, this header is enabled by default and should not be something users should be concerned with, except if they want to opt out telemetry by calling RestClientBuilder.setMetadataHeaderEnabled(false). That's all. In particular we should not require users to change their build system if it strips out the manifests we read the version from.\nNo error related to this header should ever bubble up to the user, and we can accept it to contain partial information: knowing that an ES Java client is making a request even if we could not find its version is already interesting information as it contributes to aggregated statistics about the Java client. Since we know it can happen, the aggregation logic will take care of it, and so in this context partial information is still valid information.\nAnd we can then work to understand why the version was not found and fix/update the discovery code.\nRegarding runtimes, we also have to be robust against errors that go beyond the existence of the class. For example an application may have a language runtime in a older version that does have the class we're checking, but not the field/method we read the version from. We should not fail in that case.\nWe should actually return partial information in that case too (e.g. \"I found Groovy, but couldn't find its version\") which this PR currently does not do. I have updated my playground for runtime sniffing for this.\nWDYT? Does this make sense? Did I miss something?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542896394", "createdAt": "2020-12-14T22:50:50Z", "author": {"login": "swallez"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -220,11 +276,20 @@ private CloseableHttpAsyncClient createHttpClient() {\n                 //default settings for connection pooling may be too constraining\n                 .setMaxConnPerRoute(DEFAULT_MAX_CONN_PER_ROUTE).setMaxConnTotal(DEFAULT_MAX_CONN_TOTAL)\n                 .setSSLContext(SSLContext.getDefault())\n+                .setUserAgent(USER_AGENT_HEADER_VALUE)\n                 .setTargetAuthenticationStrategy(new PersistentCredentialsAuthenticationStrategy());\n             if (httpClientConfigCallback != null) {\n                 httpClientBuilder = httpClientConfigCallback.customizeHttpClient(httpClientBuilder);\n             }\n \n+            // Always add metadata header last so that it's not overwritten\n+            httpClientBuilder.addInterceptorLast((HttpRequest request, HttpContext context) -> {\n+                if (metadataHeaderEnabled) {\n+                    request.setHeader(METADATA_HEADER, METADATA_HEADER_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDMyMA=="}, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyNzY3Mg==", "bodyText": "Thanks for additional explanation. I understand the desire to not cause an error for a user, since this is something internal. It's understandable for the runtime. But for the Elasticsearch version or apache version, which make available through the build of our client, it could mask a bug on our end. Of course so could the runtimes; we could have a typo in the class or method names we introspect.\nThe thing that gives me pause about all this code is there are not really tests for the actual data, only for \"was anything written in the response?\"  Without tests for each of these runtimes, we can't be sure the code actually works. And for Elasticsearch version, using a fatjar seems like something that may be common, so I think we should expect any users building such a jar to include the appropriate manifest value. However, it is certainly something we can add as a requirement later, since something is better than nothing right now.", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542927672", "createdAt": "2020-12-14T23:42:49Z", "author": {"login": "rjernst"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -220,11 +276,20 @@ private CloseableHttpAsyncClient createHttpClient() {\n                 //default settings for connection pooling may be too constraining\n                 .setMaxConnPerRoute(DEFAULT_MAX_CONN_PER_ROUTE).setMaxConnTotal(DEFAULT_MAX_CONN_TOTAL)\n                 .setSSLContext(SSLContext.getDefault())\n+                .setUserAgent(USER_AGENT_HEADER_VALUE)\n                 .setTargetAuthenticationStrategy(new PersistentCredentialsAuthenticationStrategy());\n             if (httpClientConfigCallback != null) {\n                 httpClientBuilder = httpClientConfigCallback.customizeHttpClient(httpClientBuilder);\n             }\n \n+            // Always add metadata header last so that it's not overwritten\n+            httpClientBuilder.addInterceptorLast((HttpRequest request, HttpContext context) -> {\n+                if (metadataHeaderEnabled) {\n+                    request.setHeader(METADATA_HEADER, METADATA_HEADER_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDMyMA=="}, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3NDU1Nw==", "bodyText": "Without tests for each of these runtimes, we can't be sure the code actually works.\n\nThat's a fair point, and is why I have this \"playground project\" to test various runtimes. I see two possible approaches here:\n\nadd all those runtimes as test dependencies of the rest client.\nhave a separate project like the one above where we can test more language runtime variants, and have the rest client's RuntimeInfo code be a direct copy of the one tested in that separate project.\n\nFirst approach keeps the ES repo self-contained, but adds some dependencies that, even if limited to tests, add some weight to the build. It also doesn't allow testing different versions of a given language runtime unless we create additional Gradle subprojects.\nSecond approach allows having a more complex build with a main project containing the RuntimeInfo code, and several subprojects for each runtime version we want to test (e.g. scala-2.12, scala-2.13, scala-3). This allows testing RuntimeInfo with many combinations.\nThe drawback of this second approach is the manual operation to copy updated RuntimeInfo from that project to the rest client's code base, unless we can somehow automate it.\n\nit is certainly something we can add as a requirement later, since something is better than nothing right now.\n\nExactly. This is why I initially hard-coded the version as a string, but the additional maintenance burden that you pointed out led me to use what is available now and consider improving things later, e.g. by having a class generated at build time.\nWe should note that httpclient uses classpath resource lookup to find its version (e.g. /org/apache/http/nio/version.properties). Although not as strong as a hardcoded string, it should survive in a fat jar, contrarily to manifest attributes. So maybe an approach we should consider for ES itself (and the client).", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r543274557", "createdAt": "2020-12-15T11:44:59Z", "author": {"login": "swallez"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -220,11 +276,20 @@ private CloseableHttpAsyncClient createHttpClient() {\n                 //default settings for connection pooling may be too constraining\n                 .setMaxConnPerRoute(DEFAULT_MAX_CONN_PER_ROUTE).setMaxConnTotal(DEFAULT_MAX_CONN_TOTAL)\n                 .setSSLContext(SSLContext.getDefault())\n+                .setUserAgent(USER_AGENT_HEADER_VALUE)\n                 .setTargetAuthenticationStrategy(new PersistentCredentialsAuthenticationStrategy());\n             if (httpClientConfigCallback != null) {\n                 httpClientBuilder = httpClientConfigCallback.customizeHttpClient(httpClientBuilder);\n             }\n \n+            // Always add metadata header last so that it's not overwritten\n+            httpClientBuilder.addInterceptorLast((HttpRequest request, HttpContext context) -> {\n+                if (metadataHeaderEnabled) {\n+                    request.setHeader(METADATA_HEADER, METADATA_HEADER_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDMyMA=="}, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MTQyNTE4OnYy", "diffSide": "RIGHT", "path": "client/rest/src/main/java/org/elasticsearch/client/LanguageRuntimeVersions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNTo0NToxNFrOIbOQzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNjo1MDo0NFrOIbRdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQxNjE0Mw==", "bodyText": "Is the return null vs return \"\" difference purposeful? Isn't it the same \"can't get the version\" case?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565416143", "createdAt": "2021-01-27T15:45:14Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/LanguageRuntimeVersions.java", "diffHunk": "@@ -57,79 +54,74 @@ public static String getRuntimeMetadata() {\n             s.append(\",gy=\").append(version);\n         }\n \n+        version = jRubyVersion();\n+        if (version != null) {\n+            s.append(\",jrb=\").append(version);\n+        }\n+\n         return s.toString();\n     }\n \n-    public static String HlrcKind() {\n-        try {\n-            Class.forName(\"org.elasticsearch.client.RestHighLevelClient\");\n-        } catch (Exception t) {\n-            return null;\n-        }\n-        // 1 is the HLRC based on ES server request/response classes\n-        // 2 will be the HLRC based on code generation from API specs\n-        return \"1\";\n+    public static String kotlinVersion() {\n+        //KotlinVersion.CURRENT.toString()\n+        return keepMajorMinor(getStaticField(\"kotlin.KotlinVersion\", \"CURRENT\"));\n     }\n \n-    public static String kotlinVersion() {\n+    public static String scalaVersion() {\n+        // scala.util.Properties.versionNumberString()\n+        return keepMajorMinor(callStaticMethod(\"scala.util.Properties\", \"versionNumberString\"));\n+    }\n+\n+    public static String clojureVersion() {\n+        // (clojure-version) which translates to\n+        // clojure.core$clojure_version.invokeStatic()\n+        return keepMajorMinor(callStaticMethod(\"clojure.core$clojure_version\", \"invokeStatic\"));\n+    }\n+\n+    public static String groovyVersion() {\n+        // groovy.lang.GroovySystem.getVersion()\n+        // There's also getShortVersion(), but only since Groovy 3.0.1\n+        return keepMajorMinor(callStaticMethod(\"groovy.lang.GroovySystem\", \"getVersion\"));\n+    }\n+\n+    public static String jRubyVersion() {\n+        // org.jruby.runtime.Constants.VERSION\n+        return keepMajorMinor(getStaticField(\"org.jruby.runtime.Constants\", \"VERSION\"));\n+    }\n+\n+    private static String getStaticField(String className, String fieldName) {\n+        Class<?> clazz;\n         try {\n-            //KotlinVersion.CURRENT.toString()\n-            Class<?> clazz = Class.forName(\"kotlin.KotlinVersion\");\n-            Field field = clazz.getField(\"CURRENT\");\n-            String version = field.get(null).toString();\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n         }\n-        return null;\n-    }\n \n-    public static String scalaVersion() {\n         try {\n-            // scala.util.Properties.versionNumberString()\n-            Class<?> clazz = Class.forName(\"scala.util.Properties\");\n-            Method m = clazz.getMethod(\"versionNumberString\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            Field field = clazz.getField(fieldName);\n+            return field.get(null).toString();\n+        } catch (Exception e) {\n+            return \"\"; // can't get version information\n         }\n-        return null;\n     }\n \n-    public static String clojureVersion() {\n+    private static String callStaticMethod(String className, String methodName) {\n+        Class<?> clazz;\n         try {\n-            // (clojure-version) which translates to\n-            // clojure.core$clojure_version.invokeStatic()\n-            Class<?> clazz = Class.forName(\"clojure.core$clojure_version\");\n-            Method m = clazz.getMethod(\"invokeStatic\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ0NTQ2MA==", "bodyText": "Yes, it's slightly different: we return null when the class doesn't exist, i.e. we're sure the language runtime isn't there (or at least the class identifying it). When it exists and we can't call the method or can't get the field, this means the information to look for has changed, and we report the language as existing but without version information. That will trigger an analysis on our end to look for updates to the language runtime.", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565445460", "createdAt": "2021-01-27T16:21:36Z", "author": {"login": "swallez"}, "path": "client/rest/src/main/java/org/elasticsearch/client/LanguageRuntimeVersions.java", "diffHunk": "@@ -57,79 +54,74 @@ public static String getRuntimeMetadata() {\n             s.append(\",gy=\").append(version);\n         }\n \n+        version = jRubyVersion();\n+        if (version != null) {\n+            s.append(\",jrb=\").append(version);\n+        }\n+\n         return s.toString();\n     }\n \n-    public static String HlrcKind() {\n-        try {\n-            Class.forName(\"org.elasticsearch.client.RestHighLevelClient\");\n-        } catch (Exception t) {\n-            return null;\n-        }\n-        // 1 is the HLRC based on ES server request/response classes\n-        // 2 will be the HLRC based on code generation from API specs\n-        return \"1\";\n+    public static String kotlinVersion() {\n+        //KotlinVersion.CURRENT.toString()\n+        return keepMajorMinor(getStaticField(\"kotlin.KotlinVersion\", \"CURRENT\"));\n     }\n \n-    public static String kotlinVersion() {\n+    public static String scalaVersion() {\n+        // scala.util.Properties.versionNumberString()\n+        return keepMajorMinor(callStaticMethod(\"scala.util.Properties\", \"versionNumberString\"));\n+    }\n+\n+    public static String clojureVersion() {\n+        // (clojure-version) which translates to\n+        // clojure.core$clojure_version.invokeStatic()\n+        return keepMajorMinor(callStaticMethod(\"clojure.core$clojure_version\", \"invokeStatic\"));\n+    }\n+\n+    public static String groovyVersion() {\n+        // groovy.lang.GroovySystem.getVersion()\n+        // There's also getShortVersion(), but only since Groovy 3.0.1\n+        return keepMajorMinor(callStaticMethod(\"groovy.lang.GroovySystem\", \"getVersion\"));\n+    }\n+\n+    public static String jRubyVersion() {\n+        // org.jruby.runtime.Constants.VERSION\n+        return keepMajorMinor(getStaticField(\"org.jruby.runtime.Constants\", \"VERSION\"));\n+    }\n+\n+    private static String getStaticField(String className, String fieldName) {\n+        Class<?> clazz;\n         try {\n-            //KotlinVersion.CURRENT.toString()\n-            Class<?> clazz = Class.forName(\"kotlin.KotlinVersion\");\n-            Field field = clazz.getField(\"CURRENT\");\n-            String version = field.get(null).toString();\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n         }\n-        return null;\n-    }\n \n-    public static String scalaVersion() {\n         try {\n-            // scala.util.Properties.versionNumberString()\n-            Class<?> clazz = Class.forName(\"scala.util.Properties\");\n-            Method m = clazz.getMethod(\"versionNumberString\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            Field field = clazz.getField(fieldName);\n+            return field.get(null).toString();\n+        } catch (Exception e) {\n+            return \"\"; // can't get version information\n         }\n-        return null;\n     }\n \n-    public static String clojureVersion() {\n+    private static String callStaticMethod(String className, String methodName) {\n+        Class<?> clazz;\n         try {\n-            // (clojure-version) which translates to\n-            // clojure.core$clojure_version.invokeStatic()\n-            Class<?> clazz = Class.forName(\"clojure.core$clojure_version\");\n-            Method m = clazz.getMethod(\"invokeStatic\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQxNjE0Mw=="}, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2ODUwNQ==", "bodyText": "Hm, but if org.jruby.runtime.Constants is moved to org.jruby.newpackage.Constants this invariant will not hold anymore (ie. a particular class being there or not finding for the correct class FQN are indistinguishable cases IMO). I don't have a strong opinion on this, but I'd personally go for the simpler option of \"I don't know the version or if it is even present at all\"", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565468505", "createdAt": "2021-01-27T16:50:44Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/LanguageRuntimeVersions.java", "diffHunk": "@@ -57,79 +54,74 @@ public static String getRuntimeMetadata() {\n             s.append(\",gy=\").append(version);\n         }\n \n+        version = jRubyVersion();\n+        if (version != null) {\n+            s.append(\",jrb=\").append(version);\n+        }\n+\n         return s.toString();\n     }\n \n-    public static String HlrcKind() {\n-        try {\n-            Class.forName(\"org.elasticsearch.client.RestHighLevelClient\");\n-        } catch (Exception t) {\n-            return null;\n-        }\n-        // 1 is the HLRC based on ES server request/response classes\n-        // 2 will be the HLRC based on code generation from API specs\n-        return \"1\";\n+    public static String kotlinVersion() {\n+        //KotlinVersion.CURRENT.toString()\n+        return keepMajorMinor(getStaticField(\"kotlin.KotlinVersion\", \"CURRENT\"));\n     }\n \n-    public static String kotlinVersion() {\n+    public static String scalaVersion() {\n+        // scala.util.Properties.versionNumberString()\n+        return keepMajorMinor(callStaticMethod(\"scala.util.Properties\", \"versionNumberString\"));\n+    }\n+\n+    public static String clojureVersion() {\n+        // (clojure-version) which translates to\n+        // clojure.core$clojure_version.invokeStatic()\n+        return keepMajorMinor(callStaticMethod(\"clojure.core$clojure_version\", \"invokeStatic\"));\n+    }\n+\n+    public static String groovyVersion() {\n+        // groovy.lang.GroovySystem.getVersion()\n+        // There's also getShortVersion(), but only since Groovy 3.0.1\n+        return keepMajorMinor(callStaticMethod(\"groovy.lang.GroovySystem\", \"getVersion\"));\n+    }\n+\n+    public static String jRubyVersion() {\n+        // org.jruby.runtime.Constants.VERSION\n+        return keepMajorMinor(getStaticField(\"org.jruby.runtime.Constants\", \"VERSION\"));\n+    }\n+\n+    private static String getStaticField(String className, String fieldName) {\n+        Class<?> clazz;\n         try {\n-            //KotlinVersion.CURRENT.toString()\n-            Class<?> clazz = Class.forName(\"kotlin.KotlinVersion\");\n-            Field field = clazz.getField(\"CURRENT\");\n-            String version = field.get(null).toString();\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n         }\n-        return null;\n-    }\n \n-    public static String scalaVersion() {\n         try {\n-            // scala.util.Properties.versionNumberString()\n-            Class<?> clazz = Class.forName(\"scala.util.Properties\");\n-            Method m = clazz.getMethod(\"versionNumberString\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            Field field = clazz.getField(fieldName);\n+            return field.get(null).toString();\n+        } catch (Exception e) {\n+            return \"\"; // can't get version information\n         }\n-        return null;\n     }\n \n-    public static String clojureVersion() {\n+    private static String callStaticMethod(String className, String methodName) {\n+        Class<?> clazz;\n         try {\n-            // (clojure-version) which translates to\n-            // clojure.core$clojure_version.invokeStatic()\n-            Class<?> clazz = Class.forName(\"clojure.core$clojure_version\");\n-            Method m = clazz.getMethod(\"invokeStatic\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQxNjE0Mw=="}, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MTQ1MTk4OnYy", "diffSide": "RIGHT", "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNTo1MDowOVrOIbOhRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNjoxMjo1N1rOIbPotQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMDM1OQ==", "bodyText": "nit: if we initialise it here with \"\" as a default value, the below if (version == null)check is not needed anymore", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565420359", "createdAt": "2021-01-27T15:50:09Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -71,35 +71,38 @@\n     private boolean metaHeaderEnabled = true;\n \n     static {\n-        String version = \"\"; // unknown values are reported as empty strings in X-Elastic-Client-Meta\n-        final CodeSource codeSource = RestClientBuilder.class.getProtectionDomain().getCodeSource();\n-        if (codeSource != null) {\n-            URL url = codeSource.getLocation();\n-            if (url != null && url.toString().endsWith(\".jar\")) {\n-                try (JarInputStream jar = new JarInputStream(url.openStream())) {\n-                    Manifest manifest = jar.getManifest();\n-                    String esVersion = manifest.getMainAttributes().getValue(\"X-Compile-Elasticsearch-Version\");\n-                    if (esVersion != null) {\n-                        version = esVersion;\n-                    }\n-                } catch (Exception e) {\n-                    // Keep version unknown\n-                }\n+\n+        // Never fail on unknown version, even if an environment messed up their classpath enough that we can't find it.\n+        // Better have incomplete telemetry than crashing user applications.\n+        String version = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQzNjU5Nw==", "bodyText": "Actually it is: versions.getProperty(\"elasticsearch-client\") can return null if the property file exists but doesn't contain that property. I agree that this is unlikely to happen, but client applications are a wild environment \ud83d\ude1b\nSo I finally chose that approach so that we don't have a mix of tests for \"\" and null.", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565436597", "createdAt": "2021-01-27T16:10:18Z", "author": {"login": "swallez"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -71,35 +71,38 @@\n     private boolean metaHeaderEnabled = true;\n \n     static {\n-        String version = \"\"; // unknown values are reported as empty strings in X-Elastic-Client-Meta\n-        final CodeSource codeSource = RestClientBuilder.class.getProtectionDomain().getCodeSource();\n-        if (codeSource != null) {\n-            URL url = codeSource.getLocation();\n-            if (url != null && url.toString().endsWith(\".jar\")) {\n-                try (JarInputStream jar = new JarInputStream(url.openStream())) {\n-                    Manifest manifest = jar.getManifest();\n-                    String esVersion = manifest.getMainAttributes().getValue(\"X-Compile-Elasticsearch-Version\");\n-                    if (esVersion != null) {\n-                        version = esVersion;\n-                    }\n-                } catch (Exception e) {\n-                    // Keep version unknown\n-                }\n+\n+        // Never fail on unknown version, even if an environment messed up their classpath enough that we can't find it.\n+        // Better have incomplete telemetry than crashing user applications.\n+        String version = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMDM1OQ=="}, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQzODY0NQ==", "bodyText": "Ah, good shout!", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565438645", "createdAt": "2021-01-27T16:12:57Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -71,35 +71,38 @@\n     private boolean metaHeaderEnabled = true;\n \n     static {\n-        String version = \"\"; // unknown values are reported as empty strings in X-Elastic-Client-Meta\n-        final CodeSource codeSource = RestClientBuilder.class.getProtectionDomain().getCodeSource();\n-        if (codeSource != null) {\n-            URL url = codeSource.getLocation();\n-            if (url != null && url.toString().endsWith(\".jar\")) {\n-                try (JarInputStream jar = new JarInputStream(url.openStream())) {\n-                    Manifest manifest = jar.getManifest();\n-                    String esVersion = manifest.getMainAttributes().getValue(\"X-Compile-Elasticsearch-Version\");\n-                    if (esVersion != null) {\n-                        version = esVersion;\n-                    }\n-                } catch (Exception e) {\n-                    // Keep version unknown\n-                }\n+\n+        // Never fail on unknown version, even if an environment messed up their classpath enough that we can't find it.\n+        // Better have incomplete telemetry than crashing user applications.\n+        String version = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMDM1OQ=="}, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3OTAwMDQ2OnYy", "diffSide": "RIGHT", "path": "client/rest/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxODowNzoyOVrOIdt7YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxOToyOToyNVrOIdxEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAzMjA5Nw==", "bodyText": "We could simplify all this by just putting a file under src/main/resources with contents like so:\nelasticsearch-client=${elasticsearchVersion}\n\nThen we can configure the processResources task to replace that value when copying the file to the resources output directory.\ntasks.named(\"processResources\").configure {\n  expand elasticsearchVersion: versions.elasticsearch\n}", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r568032097", "createdAt": "2021-02-01T18:07:29Z", "author": {"login": "mark-vieira"}, "path": "client/rest/build.gradle", "diffHunk": "@@ -43,6 +43,21 @@ dependencies {\n   testImplementation \"org.elasticsearch:mocksocket:${versions.mocksocket}\"\n }\n \n+def generateVersionResource = tasks.register(\"generateVersionResource\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be9af3376e57972723fc960aae1cb563c23f5b7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODA3ODg4NQ==", "bodyText": "Excellent, TIL! Thanks!\nI pushed 80c11f9 where I just expand versions: versions so that the placeholder in the properties file is the more familiar ${versions.elasticsearch}. Can you please cross-check?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r568078885", "createdAt": "2021-02-01T19:21:29Z", "author": {"login": "swallez"}, "path": "client/rest/build.gradle", "diffHunk": "@@ -43,6 +43,21 @@ dependencies {\n   testImplementation \"org.elasticsearch:mocksocket:${versions.mocksocket}\"\n }\n \n+def generateVersionResource = tasks.register(\"generateVersionResource\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAzMjA5Nw=="}, "originalCommit": {"oid": "6be9af3376e57972723fc960aae1cb563c23f5b7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODA4MzYxMw==", "bodyText": "That'll work.", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r568083613", "createdAt": "2021-02-01T19:29:25Z", "author": {"login": "mark-vieira"}, "path": "client/rest/build.gradle", "diffHunk": "@@ -43,6 +43,21 @@ dependencies {\n   testImplementation \"org.elasticsearch:mocksocket:${versions.mocksocket}\"\n }\n \n+def generateVersionResource = tasks.register(\"generateVersionResource\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAzMjA5Nw=="}, "originalCommit": {"oid": "6be9af3376e57972723fc960aae1cb563c23f5b7"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4579, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}