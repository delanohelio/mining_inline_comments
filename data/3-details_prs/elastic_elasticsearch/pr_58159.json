{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDk0NTI3", "number": 58159, "title": "ILM: don't take snapshot of a data stream's write index", "bodyText": "We don't allow converting a data stream's writeable index into a searchable\nsnapshot. We are currently preventing swapping a data stream's write index\nwith the restored index.\nThis adds another step that will not proceed with the searchable snapshot action\nuntil the managed index is not the write index of a data stream anymore.\nFixes #58125", "createdAt": "2020-06-16T09:37:30Z", "url": "https://github.com/elastic/elasticsearch/pull/58159", "merged": true, "mergeCommit": {"oid": "ccd618ead7cf7f5a74b9fb34524d00024de1479a"}, "closed": true, "closedAt": "2020-06-17T07:35:11Z", "author": {"login": "andreidan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrx8QBgH2gAyNDM1MDk0NTI3OjQ3ODhhNGNmZTcwM2JlMTFkOTI3MjhjNDZmZmY4OGQ5YWZkNGQwOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr58xyAFqTQzMTgwMzU4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4788a4cfe703be11d92728c46fff88d9afd4d098", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/4788a4cfe703be11d92728c46fff88d9afd4d098", "committedDate": "2020-06-16T09:35:59Z", "message": "ILM: don't take snapshot of a data stream's write index\n\nWe don't allow converting a data stream's writeable index into a searchable\nsnapshot. We are currently preventing swapping a data stream's write index\nwith the restored index.\n\nThis adds another step that will not proceed with the searchable snapshot action\nuntil the managed index is not the write index of a data stream anymore."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDQ5ODIw", "url": "https://github.com/elastic/elasticsearch/pull/58159#pullrequestreview-431449820", "createdAt": "2020-06-16T12:27:31Z", "commit": {"oid": "4788a4cfe703be11d92728c46fff88d9afd4d098"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjoyNzozMVrOGkY5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjoyNzozMVrOGkY5zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTkzNQ==", "bodyText": "Minor, but other places we've made a point to compare Index instances so both the index name and UUID match.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (dataStream.getWriteIndex().getIndex().getName().equals(indexName)) {\n          \n          \n            \n                        if (dataStream.getWriteIndex().getIndex().equals(index)) {", "url": "https://github.com/elastic/elasticsearch/pull/58159#discussion_r440809935", "createdAt": "2020-06-16T12:27:31Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/CheckNotDataStreamWriteIndexStep.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexAbstraction;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.Index;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * Some actions cannot be executed on a data stream's write index (eg. `searchable-snapshot`). This step checks if the managed index is\n+ * part of a data stream, in which case it will check it's not the write index. If the managed index is the write index of a data stream\n+ * this step will wait until that's not the case (ie. rolling over the data stream will create a new index as the data stream's write\n+ * index and this step will be able to complete)\n+ */\n+public class CheckNotDataStreamWriteIndexStep extends ClusterStateWaitStep {\n+\n+    public static final String NAME = \"check-no-write-index\";\n+\n+    private static final Logger logger = LogManager.getLogger(CheckNotDataStreamWriteIndexStep.class);\n+\n+    CheckNotDataStreamWriteIndexStep(StepKey key, StepKey nextStepKey) {\n+        super(key, nextStepKey);\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public Result isConditionMet(Index index, ClusterState clusterState) {\n+        Metadata metadata = clusterState.metadata();\n+        IndexMetadata indexMetadata = metadata.index(index);\n+        String indexName = index.getName();\n+\n+        if (indexMetadata == null) {\n+            String errorMessage = String.format(Locale.ROOT, \"[%s] lifecycle action for index [%s] executed but index no longer exists\",\n+                getKey().getAction(), indexName);\n+            // Index must have been since deleted\n+            logger.debug(errorMessage);\n+            return new Result(false, new Info(errorMessage));\n+        }\n+\n+        String policyName = indexMetadata.getSettings().get(LifecycleSettings.LIFECYCLE_NAME);\n+        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(indexName);\n+        assert indexAbstraction != null : \"invalid cluster metadata. index [\" + indexName + \"] was not found\";\n+        IndexAbstraction.DataStream dataStream = indexAbstraction.getParentDataStream();\n+        if (dataStream != null) {\n+            assert dataStream.getWriteIndex() != null : dataStream.getName() + \" has no write index\";\n+            if (dataStream.getWriteIndex().getIndex().getName().equals(indexName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4788a4cfe703be11d92728c46fff88d9afd4d098"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe4b433c8180e93d6e9ce9d9b8cef44893ce826c", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe4b433c8180e93d6e9ce9d9b8cef44893ce826c", "committedDate": "2020-06-16T18:09:16Z", "message": "Compare index name and UUID\n\nCo-authored-by: Dan Hermann <danhermann@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzYyODcz", "url": "https://github.com/elastic/elasticsearch/pull/58159#pullrequestreview-431762873", "createdAt": "2020-06-16T18:05:56Z", "commit": {"oid": "4788a4cfe703be11d92728c46fff88d9afd4d098"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowNTo1NlrOGknJpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMDoxMVrOGknTfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MzM2Ng==", "bodyText": "Minor suggestion to make it clearer that we're not waiting for the write index not to exist:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String NAME = \"check-no-write-index\";\n          \n          \n            \n                public static final String NAME = \"check-not-write-index\";", "url": "https://github.com/elastic/elasticsearch/pull/58159#discussion_r441043366", "createdAt": "2020-06-16T18:05:56Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/CheckNotDataStreamWriteIndexStep.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexAbstraction;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.Index;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * Some actions cannot be executed on a data stream's write index (eg. `searchable-snapshot`). This step checks if the managed index is\n+ * part of a data stream, in which case it will check it's not the write index. If the managed index is the write index of a data stream\n+ * this step will wait until that's not the case (ie. rolling over the data stream will create a new index as the data stream's write\n+ * index and this step will be able to complete)\n+ */\n+public class CheckNotDataStreamWriteIndexStep extends ClusterStateWaitStep {\n+\n+    public static final String NAME = \"check-no-write-index\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4788a4cfe703be11d92728c46fff88d9afd4d098"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NTg4Ng==", "bodyText": "I think calling it \"stopping\" might be a little confusing, I would suggest something like:\n\"index [.ds-foo-0001] is the write index for data stream [foo], pausing ILM execution until this index is no longer the write index for the data stream via manual or automated rollover\"\nWhat do you think?", "url": "https://github.com/elastic/elasticsearch/pull/58159#discussion_r441045886", "createdAt": "2020-06-16T18:10:11Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/CheckNotDataStreamWriteIndexStep.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexAbstraction;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.Index;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * Some actions cannot be executed on a data stream's write index (eg. `searchable-snapshot`). This step checks if the managed index is\n+ * part of a data stream, in which case it will check it's not the write index. If the managed index is the write index of a data stream\n+ * this step will wait until that's not the case (ie. rolling over the data stream will create a new index as the data stream's write\n+ * index and this step will be able to complete)\n+ */\n+public class CheckNotDataStreamWriteIndexStep extends ClusterStateWaitStep {\n+\n+    public static final String NAME = \"check-no-write-index\";\n+\n+    private static final Logger logger = LogManager.getLogger(CheckNotDataStreamWriteIndexStep.class);\n+\n+    CheckNotDataStreamWriteIndexStep(StepKey key, StepKey nextStepKey) {\n+        super(key, nextStepKey);\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public Result isConditionMet(Index index, ClusterState clusterState) {\n+        Metadata metadata = clusterState.metadata();\n+        IndexMetadata indexMetadata = metadata.index(index);\n+        String indexName = index.getName();\n+\n+        if (indexMetadata == null) {\n+            String errorMessage = String.format(Locale.ROOT, \"[%s] lifecycle action for index [%s] executed but index no longer exists\",\n+                getKey().getAction(), indexName);\n+            // Index must have been since deleted\n+            logger.debug(errorMessage);\n+            return new Result(false, new Info(errorMessage));\n+        }\n+\n+        String policyName = indexMetadata.getSettings().get(LifecycleSettings.LIFECYCLE_NAME);\n+        IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(indexName);\n+        assert indexAbstraction != null : \"invalid cluster metadata. index [\" + indexName + \"] was not found\";\n+        IndexAbstraction.DataStream dataStream = indexAbstraction.getParentDataStream();\n+        if (dataStream != null) {\n+            assert dataStream.getWriteIndex() != null : dataStream.getName() + \" has no write index\";\n+            if (dataStream.getWriteIndex().getIndex().getName().equals(indexName)) {\n+                String errorMessage = String.format(Locale.ROOT, \"index [%s] is the write index for data stream [%s]. \" +\n+                    \"stopping execution of lifecycle [%s]. manually rolling over the index will resume the execution of the policy as \" +\n+                    \"the index will not be the data stream's write index anymore\", indexName, dataStream.getName(), policyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4788a4cfe703be11d92728c46fff88d9afd4d098"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361459d2068e304cc0c2caad71a514b9ac661ef8", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/361459d2068e304cc0c2caad71a514b9ac661ef8", "committedDate": "2020-06-16T18:17:50Z", "message": "Update step name\n\nCo-authored-by: Lee Hinman <dakrone@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96eef2c91126d4fa479d2f0b7fcf41da569c1830", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/96eef2c91126d4fa479d2f0b7fcf41da569c1830", "committedDate": "2020-06-16T18:38:23Z", "message": "Compare index name and UUID and change error message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODAzNTg4", "url": "https://github.com/elastic/elasticsearch/pull/58159#pullrequestreview-431803588", "createdAt": "2020-06-16T18:55:48Z", "commit": {"oid": "96eef2c91126d4fa479d2f0b7fcf41da569c1830"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 514, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}