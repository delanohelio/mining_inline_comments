{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDMwMTI1", "number": 51355, "title": "Add HLRC docs for AuthN and TLS", "bodyText": "This commit adds examples in our documentation for\n\nAn HLRC instance authenticating to an elasticsearch cluster using\nan elasticsearch token service access token or an API key\nAn HLRC instance connecting to an elasticsearch cluster that is\nsetup for TLS on the HTTP layer when the CA certificate of the\ncluster is available either as a PEM file or a keystore\nAn HLRC instance connecting to an elasticsearch cluster that\nrequires client authentication where the client key and certificate\nare available in a keystore\n\nResolves:  #44202\n\nDocs preview: http://elasticsearch_51355.docs-preview.app.elstc.co/guide/en/elasticsearch/client/java-rest/master/_encrypted_communication.html", "createdAt": "2020-01-23T15:45:00Z", "url": "https://github.com/elastic/elasticsearch/pull/51355", "merged": true, "mergeCommit": {"oid": "308f95d9f35f42273cd61d6b0b808ca70d944f3d"}, "closed": true, "closedAt": "2020-01-28T17:09:39Z", "author": {"login": "jkakavas"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9L8ZVAH2gAyMzY2NDMwMTI1Ojk4NDFkMzE2ZDBlNTljMGJkMjBiZWU5NzdhOTM5MTUzMGVjZTA0M2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-0eUmgFqTM0OTU0ODU4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9841d316d0e59c0bd20bee977a9391530ece043e", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/9841d316d0e59c0bd20bee977a9391530ece043e", "committedDate": "2020-01-23T15:19:14Z", "message": "Add HLRC docs for AuthN and TLS\n\nThis commit adds examples in our documentation for\n\n- An HLRC instance authenticating to an elasticsearch cluster using\nan elasticsearch token service access token or an API key\n- An HLRC instance connecting to an elasticsearch cluster that is\nsetup for TLS on the HTTP layer when the CA certificate of the\ncluster is available either as a PEM file or a keystore\n- An HLRC instance connecting to an elasticsearch cluster that\nrequires client authentication where the client key and certificate\nare available in a keystore\n\nResolves:  #44202"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c060524a5c2f0181876e8f981d70fe3998f25b8", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c060524a5c2f0181876e8f981d70fe3998f25b8", "committedDate": "2020-01-23T15:41:33Z", "message": "add paths in the examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/38fdea2f644488a71772a519f376f15112ed1c8e", "committedDate": "2020-01-23T16:03:08Z", "message": "fix snippet length"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NzQ5NzUy", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-347749752", "createdAt": "2020-01-24T04:49:08Z", "commit": {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDo0OTowOVrOFhT29w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNToyMDoxN1rOFhUJRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MjY5NQ==", "bodyText": "This doesn't look like a real API key to me (or am I confused?)\n$ printf \"%s\" 'VnVhQ2ZHY0JDZGJrUW0tZTVhT3gdWkybHAdzw' | base64 -D\nVuaCfGcBCdbkQm-e5aOxZL\ufffds%\n\nI think maybe we should we show the base64 process as well?\nString apiKeyId = \"uqlEyn8B_gQ_jlvwDIvM\"\nString apiKeySecret = \"HxHWk2m4RN-V_qg9cDpuX\"\nString apiKeyAuth = Base64.getEncoder().encodeToString((apiKeyId + \":\" + apiKeySecret).getBytes());", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370472695", "createdAt": "2020-01-24T04:49:09Z", "author": {"login": "tvernum"}, "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "diffHunk": "@@ -400,5 +402,81 @@ public HttpAsyncClientBuilder customizeHttpClient(\n                 });\n             //end::rest-client-config-encrypted-communication\n         }\n+        {\n+            //tag::rest-client-config-trust-ca-pem\n+            Path caCertificatePath = Paths.get(\"/path/to/ca.crt\");\n+            CertificateFactory factory =\n+                CertificateFactory.getInstance(\"X.509\");\n+            Certificate trustedCa;\n+            try (InputStream is = Files.newInputStream(caCertificatePath)) {\n+                trustedCa = factory.generateCertificate(is);\n+            }\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            trustStore.load(null, null);\n+            trustStore.setCertificateEntry(\"ca\", trustedCa);\n+            SSLContextBuilder sslContextBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null);\n+            final SSLContext sslContext = sslContextBuilder.build();\n+            RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-trust-ca-pem\n+        }\n+        {\n+            String trustStorePass = \"\";\n+            String keyStorePass = \"\";\n+            //tag::rest-client-config-mutual-tls-authentication\n+            Path trustStorePath = Paths.get(\"/path/to/your/truststore.p12\");\n+            Path keyStorePath = Paths.get(\"/path/to/your/keystore.p12\");\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            KeyStore keyStore = KeyStore.getInstance(\"pkcs12\");\n+            try (InputStream is = Files.newInputStream(trustStorePath)) {\n+                trustStore.load(is, trustStorePass.toCharArray());\n+            }\n+            try (InputStream is = Files.newInputStream(keyStorePath)) {\n+                keyStore.load(is, keyStorePass.toCharArray());\n+            }\n+            SSLContextBuilder sslBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null)\n+                .loadKeyMaterial(keyStore, keyStorePass.toCharArray());\n+            final SSLContext sslContext = sslBuilder.build();\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-mutual-tls-authentication\n+        }\n+        {\n+            //tag::rest-client-auth-bearer-token\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"Bearer u6iuAxZ0RG1Kcm5jVFI4eU4tZU9aVFEwT2F3\")};\n+            builder.setDefaultHeaders(defaultHeaders);\n+            //end::rest-client-auth-bearer-token\n+        }\n+        {\n+            //tag::rest-client-auth-api-key\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"ApiKey VnVhQ2ZHY0JDZGJrUW0tZTVhT3gdWkybHAdzw==\")};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NzM4MQ==", "bodyText": "Can we split this on two lines to that it is easier to read in the docs?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            openssl pkcs12 -export -in client.crt -inkey private_key.pem -name \"client\" -out client.p12\n          \n          \n            \n            openssl pkcs12 -export -in client.crt -inkey private_key.pem \\\n          \n          \n            \n                -name \"client\" -out client.p12", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370477381", "createdAt": "2020-01-24T05:20:17Z", "author": {"login": "tvernum"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,74 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n+a client certificate during the TLS handshake in order to authenticate. The following is an example of setting up the client for TLS\n+authentication with a certificate and a private key that are stored in a PKCS#12 keystore.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-mutual-tls-authentication]\n+--------------------------------------------------\n+\n+if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them\n+directly to build an SSLContext, without relying on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you\n+can use external tools to build a keystore from your PEM files, as shown in the following example:\n+\n+```\n+openssl pkcs12 -export -in client.crt -inkey private_key.pem -name \"client\" -out client.p12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31efd746869de7e11c5b96396bf2970b5f51b309", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/31efd746869de7e11c5b96396bf2970b5f51b309", "committedDate": "2020-01-24T06:11:36Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e57234cdc9c04f5a179848699573ac9a8ff86c3", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/0e57234cdc9c04f5a179848699573ac9a8ff86c3", "committedDate": "2020-01-24T06:23:35Z", "message": "that's what you get for not running precommit locally"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NzcwNjk4", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-347770698", "createdAt": "2020-01-24T06:36:54Z", "commit": {"oid": "0e57234cdc9c04f5a179848699573ac9a8ff86c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjozNjo1NFrOFhU9SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjozNjo1NFrOFhU9SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MDY5Ng==", "bodyText": ":) Sorry, my fault :)", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370490696", "createdAt": "2020-01-24T06:36:54Z", "author": {"login": "tvernum"}, "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "diffHunk": "@@ -474,7 +475,8 @@ public HttpAsyncClientBuilder customizeHttpClient(\n             String apiKeySecret = \"HxHWk2m4RN-V_qg9cDpuX\";\n             String apiKeyAuth =\n                 Base64.getEncoder().encodeToString(\n-                    (apiKeyId + \":\" + apiKeySecret).getBytes());\n+                    (apiKeyId + \":\" + apiKeySecret)\n+                        .getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e57234cdc9c04f5a179848699573ac9a8ff86c3"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NzcwODk3", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-347770897", "createdAt": "2020-01-24T06:37:28Z", "commit": {"oid": "0e57234cdc9c04f5a179848699573ac9a8ff86c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1da1c982941266060aac7774a4b5041ca3ffe67", "committedDate": "2020-01-24T08:52:33Z", "message": "add authentication scheme in the Authorization header for API keys"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg1OTc2", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348085976", "createdAt": "2020-01-24T16:49:55Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo0OTo1NVrOFhj1xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo0OTo1NVrOFhj1xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNDUzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n          \n          \n            \n            If you want the client to authenticate with an Elasticsearch access token, set the relevant HTTP request header.", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370734535", "createdAt": "2020-01-24T16:49:55Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg2NTc4", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348086578", "createdAt": "2020-01-24T16:50:51Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MDo1MVrOFhj3pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MDo1MVrOFhj3pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTAxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n          \n          \n            \n            If you want the client to authenticate with an Elasticsearch API key, set the relevant HTTP request header.", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735013", "createdAt": "2020-01-24T16:50:51Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg2OTE5", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348086919", "createdAt": "2020-01-24T16:51:23Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MToyM1rOFhj4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MToyM1rOFhj4pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTI2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n          \n          \n            \n            When accessing an Elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735269", "createdAt": "2020-01-24T16:51:23Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg3MDc4", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348087078", "createdAt": "2020-01-24T16:51:39Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MTozOVrOFhj5MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MTozOVrOFhj5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTQwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            elasticsearch is using.\n          \n          \n            \n            Elasticsearch is using.", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735408", "createdAt": "2020-01-24T16:51:39Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg3MzAw", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348087300", "createdAt": "2020-01-24T16:52:00Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjowMFrOFhj51Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjowMFrOFhj51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTU3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n          \n          \n            \n             The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735573", "createdAt": "2020-01-24T16:52:00Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg3NTEy", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348087512", "createdAt": "2020-01-24T16:52:18Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjoxOFrOFhj6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjoxOFrOFhj6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTcyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n          \n          \n            \n            The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735729", "createdAt": "2020-01-24T16:52:18Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg3ODcw", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348087870", "createdAt": "2020-01-24T16:52:51Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1Mjo1MVrOFhj7iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1Mjo1MVrOFhj7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n          \n          \n            \n            When Elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370736008", "createdAt": "2020-01-24T16:52:51Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg4OTI4", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348088928", "createdAt": "2020-01-24T16:54:33Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NDozM1rOFhj--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NDozM1rOFhj--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjg4OA==", "bodyText": "When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured ...\n\nThe use of \"i.e.\" here implies that this is the only situation where ES requires TLS authentication, which seems unlikely to me.  Should it be \"e.g.\" or \"for example\" instead?", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370736888", "createdAt": "2020-01-24T16:54:33Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg5Nzg3", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348089787", "createdAt": "2020-01-24T16:55:56Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NTo1NlrOFhkBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NTo1NlrOFhkBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNzU0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in the following example\n          \n          \n            \n            in the following example:", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370737548", "createdAt": "2020-01-24T16:55:56Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDkwMTc5", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348090179", "createdAt": "2020-01-24T16:56:35Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NjozNVrOFhkCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NjozNVrOFhkCtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNzg0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in the following example\n          \n          \n            \n            in the following example:", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370737844", "createdAt": "2020-01-24T16:56:35Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDkxNjAz", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348091603", "createdAt": "2020-01-24T16:58:44Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1ODo0NFrOFhkG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1ODo0NFrOFhkG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczODkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them\n          \n          \n            \n            If the client certificate and key are not available in a keystore but rather as PEM encoded files, you cannot use them", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370738925", "createdAt": "2020-01-24T16:58:44Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n+a client certificate during the TLS handshake in order to authenticate. The following is an example of setting up the client for TLS\n+authentication with a certificate and a private key that are stored in a PKCS#12 keystore.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-mutual-tls-authentication]\n+--------------------------------------------------\n+\n+if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDkyNTg3", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348092587", "createdAt": "2020-01-24T17:00:20Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowMDoyMFrOFhkJxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowMDoyMFrOFhkJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczOTY1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            directly to build an SSLContext, without relying on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you\n          \n          \n            \n            directly to build an SSLContext. You must rely on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370739654", "createdAt": "2020-01-24T17:00:20Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n+a client certificate during the TLS handshake in order to authenticate. The following is an example of setting up the client for TLS\n+authentication with a certificate and a private key that are stored in a PKCS#12 keystore.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-mutual-tls-authentication]\n+--------------------------------------------------\n+\n+if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them\n+directly to build an SSLContext, without relying on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTUwNzQ1", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-348150745", "createdAt": "2020-01-24T18:45:28Z", "commit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0NToyOVrOFhm6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0NToyOVrOFhm6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDc4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n          \n          \n            \n            When elasticsearch is configured to require client TLS authentication, e.g. when a PKI realm is configured, the client needs to provide", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370784786", "createdAt": "2020-01-24T18:45:29Z", "author": {"login": "jkakavas"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f19a284cb4bd6594e657e47164696d5ca78adec", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/8f19a284cb4bd6594e657e47164696d5ca78adec", "committedDate": "2020-01-24T18:46:47Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDQxMjQw", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-349041240", "createdAt": "2020-01-27T23:14:00Z", "commit": {"oid": "8f19a284cb4bd6594e657e47164696d5ca78adec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNDowMFrOFiUtrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNDowMFrOFiUtrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTI3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When Elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n          \n          \n            \n            When Elasticsearch is configured to require client TLS authentication, for example when a PKI realm is configured, the client needs to provide", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r371535279", "createdAt": "2020-01-27T23:14:00Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+If you want the client to authenticate with an Elasticsearch access token, set the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example:\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+If you want the client to authenticate with an Elasticsearch API key, set the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example:\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an Elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+Elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When Elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f19a284cb4bd6594e657e47164696d5ca78adec"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95207c8a668cc5c0039bf41b59d6e99dd263939f", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/95207c8a668cc5c0039bf41b59d6e99dd263939f", "committedDate": "2020-01-28T05:31:12Z", "message": "Update docs/java-rest/low-level/configuration.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NTQ4NTg4", "url": "https://github.com/elastic/elasticsearch/pull/51355#pullrequestreview-349548588", "createdAt": "2020-01-28T17:06:26Z", "commit": {"oid": "95207c8a668cc5c0039bf41b59d6e99dd263939f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2881, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}