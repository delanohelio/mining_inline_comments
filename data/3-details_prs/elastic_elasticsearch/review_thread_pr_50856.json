{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDY5Mzk0", "number": 50856, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDoyNToxNFrODXKucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDoyNToxNFrODXKucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjE5NTcwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDoyNToxNFrOFcVhtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDozMTowOFrOFcVtYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI1NzE0Mg==", "bodyText": "I guess this is a leftover.", "url": "https://github.com/elastic/elasticsearch/pull/50856#discussion_r365257142", "createdAt": "2020-01-10T14:25:14Z", "author": {"login": "dnhatn"}, "path": "server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java", "diffHunk": "@@ -432,20 +432,20 @@ protected long getShardWritingBytes(IndexShard shard) {\n             }\n         };\n         int iterations = randomIntBetween(10, 100);\n+        ThreadPoolStats.Stats beforeStats = getRefreshThreadPoolStats();\n         for (int i = 0; i < iterations; i++) {\n             controller.forceCheck();\n         }\n         assertBusy(() -> {\n             ThreadPoolStats.Stats stats = getRefreshThreadPoolStats();\n-            assertThat(stats.getQueue(), equalTo(0));\n-            assertThat(stats.getActive(), equalTo(1));\n+            assertThat(stats.getCompleted(), equalTo(beforeStats.getCompleted() + iterations - 1));\n         });\n         refreshLatch.get().countDown(); // allow refresh\n         assertBusy(() -> {\n             ThreadPoolStats.Stats stats = getRefreshThreadPoolStats();\n-            assertThat(stats.getQueue(), equalTo(0));\n-            assertThat(stats.getActive(), equalTo(0));\n+            assertThat(stats.getCompleted(), equalTo(beforeStats.getCompleted() + iterations));\n         });\n+        System.out.println(shard.refreshStats().getTotal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a6dee721ea3a438b8d436738bf5b12e0c7729e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2MDEzMQ==", "bodyText": "Yes, thanks, fixed in 1b8867e", "url": "https://github.com/elastic/elasticsearch/pull/50856#discussion_r365260131", "createdAt": "2020-01-10T14:31:08Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java", "diffHunk": "@@ -432,20 +432,20 @@ protected long getShardWritingBytes(IndexShard shard) {\n             }\n         };\n         int iterations = randomIntBetween(10, 100);\n+        ThreadPoolStats.Stats beforeStats = getRefreshThreadPoolStats();\n         for (int i = 0; i < iterations; i++) {\n             controller.forceCheck();\n         }\n         assertBusy(() -> {\n             ThreadPoolStats.Stats stats = getRefreshThreadPoolStats();\n-            assertThat(stats.getQueue(), equalTo(0));\n-            assertThat(stats.getActive(), equalTo(1));\n+            assertThat(stats.getCompleted(), equalTo(beforeStats.getCompleted() + iterations - 1));\n         });\n         refreshLatch.get().countDown(); // allow refresh\n         assertBusy(() -> {\n             ThreadPoolStats.Stats stats = getRefreshThreadPoolStats();\n-            assertThat(stats.getQueue(), equalTo(0));\n-            assertThat(stats.getActive(), equalTo(0));\n+            assertThat(stats.getCompleted(), equalTo(beforeStats.getCompleted() + iterations));\n         });\n+        System.out.println(shard.refreshStats().getTotal());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI1NzE0Mg=="}, "originalCommit": {"oid": "66a6dee721ea3a438b8d436738bf5b12e0c7729e"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4830, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}