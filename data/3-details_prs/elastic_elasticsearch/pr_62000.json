{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NzY3NzE4", "number": 62000, "title": "Improve Snapshot State Machine Performance", "bodyText": "Just a few random things to optimize motivated by somewhat sub-standard performance and the fact that the clone API will make some of these computations even heavier for large snapshot cluster states with many concurrent snapshots observed in production.", "createdAt": "2020-09-04T14:57:50Z", "url": "https://github.com/elastic/elasticsearch/pull/62000", "merged": true, "mergeCommit": {"oid": "5579025a73c6bb778c45ace7c34022acbd75b020"}, "closed": true, "closedAt": "2020-09-07T10:36:30Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFmdb2AH2gAyNDc5NzY3NzE4OjcwYTU5MjdhYzBjMTQ2NTA2YjdhNzViMDE4OGMyZjUwNDY4ZDcxYTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGereQgFqTQ4MzM1MzMzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "70a5927ac0c146506b7a75b0188c2f50468d71a1", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/70a5927ac0c146506b7a75b0188c2f50468d71a1", "committedDate": "2020-09-04T14:55:24Z", "message": "Improve Snapshot State Machine Performance\n\nJust a few random things to optimize motivated by somewhat sub-standard performance\nfor large snapshot cluster states with many concurrent snapshots observed in production."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/7f0fc0a02bf022098961f38bc3266444059dec80", "committedDate": "2020-09-04T17:57:52Z", "message": "Merge remote-tracking branch 'elastic/master' into no-duplicate-snapshot-shard-id"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTY2NDQy", "url": "https://github.com/elastic/elasticsearch/pull/62000#pullrequestreview-483166442", "createdAt": "2020-09-06T19:10:48Z", "commit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMDo0OFrOHNrX7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMDo0OFrOHNrX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwNDE3NA==", "bodyText": "Not a huge win but if we have a large number of snapshots this one might be the most common status and since there's logic that compares with this status in a hot loop it's worth it IMO.", "url": "https://github.com/elastic/elasticsearch/pull/62000#discussion_r484104174", "createdAt": "2020-09-06T19:10:48Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -450,14 +450,20 @@ private boolean assertConsistent() {\n             // If the state is failed we have to have a reason for this failure\n             assert state.failed() == false || reason != null;\n             assert (state != ShardState.INIT && state != ShardState.WAITING) || nodeId != null : \"Null node id for state [\" + state + \"]\";\n+            assert state != ShardState.QUEUED || (nodeId == null && generation == null && reason == null) :\n+                    \"Found unexpected non-null values for queued state shard nodeId[\" + nodeId + \"][\" + generation + \"][\" + reason + \"]\";\n             return true;\n         }\n \n-        public ShardSnapshotStatus(StreamInput in) throws IOException {\n-            nodeId = in.readOptionalString();\n-            state = ShardState.fromValue(in.readByte());\n-            generation = in.readOptionalString();\n-            reason = in.readOptionalString();\n+        public static ShardSnapshotStatus readFrom(StreamInput in) throws IOException {\n+            String nodeId = in.readOptionalString();\n+            final ShardState state = ShardState.fromValue(in.readByte());\n+            final String generation = in.readOptionalString();\n+            final String reason = in.readOptionalString();\n+            if (state == ShardState.QUEUED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTY2NDYz", "url": "https://github.com/elastic/elasticsearch/pull/62000#pullrequestreview-483166463", "createdAt": "2020-09-06T19:11:20Z", "commit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMToyMFrOHNrYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMToyMFrOHNrYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwNDIwOA==", "bodyText": "This is executed on all shard of all snapshots so it's super hot for large clusters, much cheaper to check state before doing the more expensive node id check.", "url": "https://github.com/elastic/elasticsearch/pull/62000#discussion_r484104208", "createdAt": "2020-09-06T19:11:20Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -205,8 +205,8 @@ private void startNewSnapshots(SnapshotsInProgress snapshotsInProgress) {\n                     // Add all new shards to start processing on\n                     final ShardId shardId = shard.key;\n                     final ShardSnapshotStatus shardSnapshotStatus = shard.value;\n-                    if (localNodeId.equals(shardSnapshotStatus.nodeId())\n-                        && shardSnapshotStatus.state() == ShardState.INIT\n+                    if (shardSnapshotStatus.state() == ShardState.INIT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTY2NTMy", "url": "https://github.com/elastic/elasticsearch/pull/62000#pullrequestreview-483166532", "createdAt": "2020-09-06T19:12:26Z", "commit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMjoyNlrOHNrYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMjoyNlrOHNrYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwNDMwMg==", "bodyText": "This whole logic could be made more efficient I suppose by computing the reassignments differently (compared to computing them the first time around), but for now this is an easy change that saves a ton of cycles if there's multiple snapshots running concurrently for a repo.", "url": "https://github.com/elastic/elasticsearch/pull/62000#discussion_r484104302", "createdAt": "2020-09-06T19:12:26Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1602,6 +1602,8 @@ private SnapshotsInProgress updatedSnapshotsInProgress(ClusterState currentState\n             boolean changed = false;\n \n             final String repoName = deleteEntry.repository();\n+            // Computing the new assignments can be quite costly, only do it once below if actually needed\n+            ImmutableOpenMap<ShardId, ShardSnapshotStatus> shardAssignments = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTY2NTc4", "url": "https://github.com/elastic/elasticsearch/pull/62000#pullrequestreview-483166578", "createdAt": "2020-09-06T19:13:17Z", "commit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMzoxN1rOHNrYug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxMzoxN1rOHNrYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwNDM3OA==", "bodyText": "No need to create a new shard id, especially not when we use that shard id for comparisons all over the place (doesn't help that much because we eventually read other instances back from the wire but it's a freebie IMO).", "url": "https://github.com/elastic/elasticsearch/pull/62000#discussion_r484104378", "createdAt": "2020-09-06T19:13:17Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1728,7 +1732,7 @@ public static ClusterState updateWithSnapshots(ClusterState state,\n                 final IndexRoutingTable indexRoutingTable = routingTable.index(indexName);\n                 assert indexRoutingTable != null;\n                 for (int i = 0; i < indexMetadata.getNumberOfShards(); i++) {\n-                    ShardId shardId = new ShardId(indexMetadata.getIndex(), i);\n+                    final ShardId shardId = indexRoutingTable.shard(i).shardId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTY2NjQy", "url": "https://github.com/elastic/elasticsearch/pull/62000#pullrequestreview-483166642", "createdAt": "2020-09-06T19:14:23Z", "commit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxNDoyNFrOHNrZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxOToxNDoyNFrOHNrZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwNDQ1OQ==", "bodyText": "This is very hot code (shard state updates path) so it's worth saving one map lookup here IMO.", "url": "https://github.com/elastic/elasticsearch/pull/62000#discussion_r484104459", "createdAt": "2020-09-06T19:14:24Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1902,11 +1906,10 @@ public boolean assertAllListenersResolved() {\n                     } else {\n                         final String updatedRepository = updateSnapshotState.snapshot().getRepository();\n                         final Set<ShardId> reusedShardIds = reusedShardIdsByRepo.computeIfAbsent(updatedRepository, k -> new HashSet<>());\n-                        if (entry.repository().equals(updatedRepository) &&\n-                            entry.state().completed() == false && reusedShardIds.contains(finishedShardId) == false\n-                                && entry.shards().keys().contains(finishedShardId)) {\n+                        if (entry.state().completed() == false && entry.repository().equals(updatedRepository)\n+                                && reusedShardIds.contains(finishedShardId) == false) {\n                             final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                            if (existingStatus.state() != ShardState.QUEUED) {\n+                            if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMzUzMzM3", "url": "https://github.com/elastic/elasticsearch/pull/62000#pullrequestreview-483353337", "createdAt": "2020-09-07T08:25:25Z", "commit": {"oid": "7f0fc0a02bf022098961f38bc3266444059dec80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4895, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}