{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NTg3MjEx", "number": 55722, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxNDowNFrOD3yOhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozMDoxMVrOD3yjng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODIxMTkxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxNDowNFrOGOPQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozNzozOFrOGOQC0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4MzM1MA==", "bodyText": "(input.read || input.write) will always succeed here, see line 56.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417583350", "createdAt": "2020-04-29T20:14:04Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            BraceSubDefNode braceSubDefNode = new BraceSubDefNode();\n+            braceSubDefNode.setChildNode(indexOutput.expressionNode);\n+            braceSubDefNode.setLocation(location);\n+            braceSubDefNode.setExpressionType(output.actual);\n+            expressionNode = braceSubDefNode;\n+        } else if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"put\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                throw createError(new IllegalArgumentException(\"Illegal map get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && setter.typeParameters.size() != 2) {\n+                throw createError(new IllegalArgumentException(\"Illegal map set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                    !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5NjExNA==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417596114", "createdAt": "2020-04-29T20:37:38Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            BraceSubDefNode braceSubDefNode = new BraceSubDefNode();\n+            braceSubDefNode.setChildNode(indexOutput.expressionNode);\n+            braceSubDefNode.setLocation(location);\n+            braceSubDefNode.setExpressionType(output.actual);\n+            expressionNode = braceSubDefNode;\n+        } else if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"put\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                throw createError(new IllegalArgumentException(\"Illegal map get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && setter.typeParameters.size() != 2) {\n+                throw createError(new IllegalArgumentException(\"Illegal map set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                    !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4MzM1MA=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODIyMjA1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxNzowNFrOGOPXcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozODowMVrOGOQDhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NTAxMA==", "bodyText": "Unnecessary first clause.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417585010", "createdAt": "2020-04-29T20:17:04Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            BraceSubDefNode braceSubDefNode = new BraceSubDefNode();\n+            braceSubDefNode.setChildNode(indexOutput.expressionNode);\n+            braceSubDefNode.setLocation(location);\n+            braceSubDefNode.setExpressionType(output.actual);\n+            expressionNode = braceSubDefNode;\n+        } else if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"put\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                throw createError(new IllegalArgumentException(\"Illegal map get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && setter.typeParameters.size() != 2) {\n+                throw createError(new IllegalArgumentException(\"Illegal map set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                    !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                Input indexInput = new Input();\n+                indexInput.expected = setter != null ? setter.typeParameters.get(0) : getter.typeParameters.get(0);\n+                indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+                index.cast(indexInput, indexOutput);\n+\n+                output.actual = setter != null ? setter.typeParameters.get(1) : getter.returnType;\n+            } else {\n+                throw createError(new IllegalArgumentException(\"Illegal map shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            MapSubShortcutNode mapSubShortcutNode = new MapSubShortcutNode();\n+            mapSubShortcutNode.setChildNode(index.cast(indexOutput));\n+            mapSubShortcutNode.setLocation(location);\n+            mapSubShortcutNode.setExpressionType(output.actual);\n+            mapSubShortcutNode.setGetter(getter);\n+            mapSubShortcutNode.setSetter(setter);\n+            expressionNode = mapSubShortcutNode;\n+        } else if (List.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"set\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1 ||\n+                    getter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && (setter.typeParameters.size() != 2 || setter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0))\n+                    || !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5NjI5Mg==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417596292", "createdAt": "2020-04-29T20:38:01Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            BraceSubDefNode braceSubDefNode = new BraceSubDefNode();\n+            braceSubDefNode.setChildNode(indexOutput.expressionNode);\n+            braceSubDefNode.setLocation(location);\n+            braceSubDefNode.setExpressionType(output.actual);\n+            expressionNode = braceSubDefNode;\n+        } else if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"put\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                throw createError(new IllegalArgumentException(\"Illegal map get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && setter.typeParameters.size() != 2) {\n+                throw createError(new IllegalArgumentException(\"Illegal map set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                    !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                Input indexInput = new Input();\n+                indexInput.expected = setter != null ? setter.typeParameters.get(0) : getter.typeParameters.get(0);\n+                indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+                index.cast(indexInput, indexOutput);\n+\n+                output.actual = setter != null ? setter.typeParameters.get(1) : getter.returnType;\n+            } else {\n+                throw createError(new IllegalArgumentException(\"Illegal map shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            MapSubShortcutNode mapSubShortcutNode = new MapSubShortcutNode();\n+            mapSubShortcutNode.setChildNode(index.cast(indexOutput));\n+            mapSubShortcutNode.setLocation(location);\n+            mapSubShortcutNode.setExpressionType(output.actual);\n+            mapSubShortcutNode.setGetter(getter);\n+            mapSubShortcutNode.setSetter(setter);\n+            expressionNode = mapSubShortcutNode;\n+        } else if (List.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"set\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1 ||\n+                    getter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && (setter.typeParameters.size() != 2 || setter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0))\n+                    || !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NTAxMA=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODIzMDk1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoxOTo0MlrOGOPc-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozNzo0NVrOGOQDFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NjQyNg==", "bodyText": "This check seems fruitless.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417586426", "createdAt": "2020-04-29T20:19:42Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            BraceSubDefNode braceSubDefNode = new BraceSubDefNode();\n+            braceSubDefNode.setChildNode(indexOutput.expressionNode);\n+            braceSubDefNode.setLocation(location);\n+            braceSubDefNode.setExpressionType(output.actual);\n+            expressionNode = braceSubDefNode;\n+        } else if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"put\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                throw createError(new IllegalArgumentException(\"Illegal map get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && setter.typeParameters.size() != 2) {\n+                throw createError(new IllegalArgumentException(\"Illegal map set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                    !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                Input indexInput = new Input();\n+                indexInput.expected = setter != null ? setter.typeParameters.get(0) : getter.typeParameters.get(0);\n+                indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+                index.cast(indexInput, indexOutput);\n+\n+                output.actual = setter != null ? setter.typeParameters.get(1) : getter.returnType;\n+            } else {\n+                throw createError(new IllegalArgumentException(\"Illegal map shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            MapSubShortcutNode mapSubShortcutNode = new MapSubShortcutNode();\n+            mapSubShortcutNode.setChildNode(index.cast(indexOutput));\n+            mapSubShortcutNode.setLocation(location);\n+            mapSubShortcutNode.setExpressionType(output.actual);\n+            mapSubShortcutNode.setGetter(getter);\n+            mapSubShortcutNode.setSetter(setter);\n+            expressionNode = mapSubShortcutNode;\n+        } else if (List.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"set\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1 ||\n+                    getter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && (setter.typeParameters.size() != 2 || setter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5NjE4MA==", "bodyText": "Oops. Was responding to the previous comment. Added this issue (#55976)", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417596180", "createdAt": "2020-04-29T20:37:45Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            BraceSubDefNode braceSubDefNode = new BraceSubDefNode();\n+            braceSubDefNode.setChildNode(indexOutput.expressionNode);\n+            braceSubDefNode.setLocation(location);\n+            braceSubDefNode.setExpressionType(output.actual);\n+            expressionNode = braceSubDefNode;\n+        } else if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"put\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                throw createError(new IllegalArgumentException(\"Illegal map get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && setter.typeParameters.size() != 2) {\n+                throw createError(new IllegalArgumentException(\"Illegal map set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                    !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+            }\n+\n+            Output indexOutput;\n+\n+            if ((input.read || input.write) && (input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                Input indexInput = new Input();\n+                indexInput.expected = setter != null ? setter.typeParameters.get(0) : getter.typeParameters.get(0);\n+                indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+                index.cast(indexInput, indexOutput);\n+\n+                output.actual = setter != null ? setter.typeParameters.get(1) : getter.returnType;\n+            } else {\n+                throw createError(new IllegalArgumentException(\"Illegal map shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            MapSubShortcutNode mapSubShortcutNode = new MapSubShortcutNode();\n+            mapSubShortcutNode.setChildNode(index.cast(indexOutput));\n+            mapSubShortcutNode.setLocation(location);\n+            mapSubShortcutNode.setExpressionType(output.actual);\n+            mapSubShortcutNode.setGetter(getter);\n+            mapSubShortcutNode.setSetter(setter);\n+            expressionNode = mapSubShortcutNode;\n+        } else if (List.class.isAssignableFrom(prefixOutput.actual)) {\n+            Class<?> targetClass = prefixOutput.actual;\n+            String canonicalClassName = PainlessLookupUtility.typeToCanonicalTypeName(targetClass);\n+\n+            PainlessMethod getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"get\", 1);\n+            PainlessMethod setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetClass, false, \"set\", 2);\n+\n+            if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1 ||\n+                    getter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list get shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (setter != null && (setter.typeParameters.size() != 2 || setter.typeParameters.get(0) != int.class)) {\n+                throw createError(new IllegalArgumentException(\"Illegal list set shortcut for type [\" + canonicalClassName + \"].\"));\n+            }\n+\n+            if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NjQyNg=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI0NDc3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyMzo1NlrOGOPl1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo1NDo1OVrOGOQn2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODY5NA==", "bodyText": "input.expected == ZonedDateTime.class?", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417588694", "createdAt": "2020-04-29T20:23:56Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessField;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.lang.reflect.Modifier;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a field load/store and defers to a child subnode.\n+ */\n+public class EDot extends AExpression {\n+\n+    protected final boolean nullSafe;\n+    protected final String value;\n+\n+    public EDot(Location location, AExpression prefix, boolean nullSafe, String value) {\n+        super(location, prefix);\n+\n+        this.nullSafe = nullSafe;\n+        this.value = Objects.requireNonNull(value);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of dot operator [.] not used\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        Class<?> targetType = prefixOutput.actual;\n+        String targetCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(targetType);\n+\n+        ExpressionNode expressionNode = null;\n+\n+        if (prefixOutput.actual.isArray()) {\n+            if (\"length\".equals(value)) {\n+                if (input.write) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"invalid assignment: cannot assign a value write to read-only field [length] for an array.\"));\n+                }\n+\n+                output.actual = int.class;\n+            } else {\n+                throw createError(new IllegalArgumentException(\n+                        \"Field [\" + value + \"] does not exist for type [\" + targetCanonicalTypeName + \"].\"));\n+            }\n+\n+            DotSubArrayLengthNode dotSubArrayLengthNode = new DotSubArrayLengthNode();\n+            dotSubArrayLengthNode.setLocation(location);\n+            dotSubArrayLengthNode.setExpressionType(output.actual);\n+            expressionNode = dotSubArrayLengthNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwNTU5Mw==", "bodyText": "Under certain conditions we can optimize out a cast and allow an invokedynamic call to do the cast for us. These conditions are during an assignment (that is not a compound assignment), where the left expression resolves to a def type brace or dot. For something like def x = new int[1]; x[0] = 1; the generated call from the invokedynamic instruction can take in the 1 as an int type instead of having to go from int to Object and then Object to int if we were to leave in the cast to a def type. However, this only works for assignments where the types can be implicitly cast to. Hence the exceptions here - if the user has done an explicit cast, if we do not know the target, and finally ZonedDateTime. ZonedDateTime is on this exception list because we allow unnatural implicit casts (ie invokedynamic doesn't do them natively) from JodaCompatibleDateTime to minimize disruptions to our users during our transition to Java time.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417605593", "createdAt": "2020-04-29T20:54:59Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessField;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.lang.reflect.Modifier;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a field load/store and defers to a child subnode.\n+ */\n+public class EDot extends AExpression {\n+\n+    protected final boolean nullSafe;\n+    protected final String value;\n+\n+    public EDot(Location location, AExpression prefix, boolean nullSafe, String value) {\n+        super(location, prefix);\n+\n+        this.nullSafe = nullSafe;\n+        this.value = Objects.requireNonNull(value);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of dot operator [.] not used\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        Class<?> targetType = prefixOutput.actual;\n+        String targetCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(targetType);\n+\n+        ExpressionNode expressionNode = null;\n+\n+        if (prefixOutput.actual.isArray()) {\n+            if (\"length\".equals(value)) {\n+                if (input.write) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"invalid assignment: cannot assign a value write to read-only field [length] for an array.\"));\n+                }\n+\n+                output.actual = int.class;\n+            } else {\n+                throw createError(new IllegalArgumentException(\n+                        \"Field [\" + value + \"] does not exist for type [\" + targetCanonicalTypeName + \"].\"));\n+            }\n+\n+            DotSubArrayLengthNode dotSubArrayLengthNode = new DotSubArrayLengthNode();\n+            dotSubArrayLengthNode.setLocation(location);\n+            dotSubArrayLengthNode.setExpressionType(output.actual);\n+            expressionNode = dotSubArrayLengthNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODY5NA=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI0NjQyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyNDoyOVrOGOPm9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo1NTowOFrOGOQoIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODk4Mg==", "bodyText": "input.expected == ZonedDateTime.class?", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417588982", "createdAt": "2020-04-29T20:24:29Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwNTY2NA==", "bodyText": "Answered above.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417605664", "createdAt": "2020-04-29T20:55:08Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.BraceNode;\n+import org.elasticsearch.painless.ir.BraceSubDefNode;\n+import org.elasticsearch.painless.ir.BraceSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an array load/store and defers to a child subnode.\n+ */\n+public class EBrace extends AExpression {\n+\n+    protected final AExpression index;\n+\n+    public EBrace(Location location, AExpression prefix, AExpression index) {\n+        super(location, prefix);\n+\n+        this.index = Objects.requireNonNull(index);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n+        }\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        ExpressionNode expressionNode;\n+        Output output = new Output();\n+\n+        if (prefixOutput.actual.isArray()) {\n+            Input indexInput = new Input();\n+            indexInput.expected = int.class;\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+            index.cast(indexInput, indexOutput);\n+\n+            output.actual = prefixOutput.actual.getComponentType();\n+\n+            BraceSubNode braceSubNode = new BraceSubNode();\n+            braceSubNode.setChildNode(index.cast(indexOutput));\n+            braceSubNode.setLocation(location);\n+            braceSubNode.setExpressionType(output.actual);\n+            expressionNode = braceSubNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            Input indexInput = new Input();\n+            Output indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODk4Mg=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI0ODgzOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ECall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyNTowOVrOGOPokQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo1NToxN1rOGOQodg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTM5Mw==", "bodyText": "Same ZonedDateTime question.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417589393", "createdAt": "2020-04-29T20:25:09Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ECall.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.CallNode;\n+import org.elasticsearch.painless.ir.CallSubDefNode;\n+import org.elasticsearch.painless.ir.CallSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.spi.annotation.NonDeterministicAnnotation;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a method call and defers to a child subnode.\n+ */\n+public class ECall extends AExpression {\n+\n+    protected final String name;\n+    protected final List<AExpression> arguments;\n+    protected final boolean nullSafe;\n+\n+    public ECall(Location location, AExpression prefix, String name, List<AExpression> arguments, boolean nullSafe) {\n+        super(location, prefix);\n+\n+        this.name = Objects.requireNonNull(name);\n+        this.arguments = Collections.unmodifiableList(Objects.requireNonNull(arguments));\n+        this.nullSafe = nullSafe;\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.write) {\n+            throw createError(new IllegalArgumentException(\n+                    \"invalid assignment: cannot assign a value to method call [\" + name + \"/\" + arguments.size() + \"]\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Input prefixInput = new Input();\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, prefixInput);\n+\n+        ExpressionNode expressionNode;\n+\n+        if (prefixOutput.actual == def.class) {\n+            List<Output> argumentOutputs = new ArrayList<>(arguments.size());\n+\n+            for (AExpression argument : arguments) {\n+                Input expressionInput = new Input();\n+                expressionInput.internal = true;\n+                Output expressionOutput = argument.analyze(classNode, scriptRoot, scope, expressionInput);\n+                argumentOutputs.add(expressionOutput);\n+\n+                if (expressionOutput.actual == void.class) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"Argument(s) cannot be of [void] type when calling method [\" + name + \"].\"));\n+                }\n+\n+                expressionInput.expected = expressionOutput.actual;\n+                argument.cast(expressionInput, expressionOutput);\n+            }\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwNTc1MA==", "bodyText": "Answered above.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417605750", "createdAt": "2020-04-29T20:55:17Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ECall.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.CallNode;\n+import org.elasticsearch.painless.ir.CallSubDefNode;\n+import org.elasticsearch.painless.ir.CallSubNode;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.spi.annotation.NonDeterministicAnnotation;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a method call and defers to a child subnode.\n+ */\n+public class ECall extends AExpression {\n+\n+    protected final String name;\n+    protected final List<AExpression> arguments;\n+    protected final boolean nullSafe;\n+\n+    public ECall(Location location, AExpression prefix, String name, List<AExpression> arguments, boolean nullSafe) {\n+        super(location, prefix);\n+\n+        this.name = Objects.requireNonNull(name);\n+        this.arguments = Collections.unmodifiableList(Objects.requireNonNull(arguments));\n+        this.nullSafe = nullSafe;\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.write) {\n+            throw createError(new IllegalArgumentException(\n+                    \"invalid assignment: cannot assign a value to method call [\" + name + \"/\" + arguments.size() + \"]\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Input prefixInput = new Input();\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, prefixInput);\n+\n+        ExpressionNode expressionNode;\n+\n+        if (prefixOutput.actual == def.class) {\n+            List<Output> argumentOutputs = new ArrayList<>(arguments.size());\n+\n+            for (AExpression argument : arguments) {\n+                Input expressionInput = new Input();\n+                expressionInput.internal = true;\n+                Output expressionOutput = argument.analyze(classNode, scriptRoot, scope, expressionInput);\n+                argumentOutputs.add(expressionOutput);\n+\n+                if (expressionOutput.actual == void.class) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"Argument(s) cannot be of [void] type when calling method [\" + name + \"].\"));\n+                }\n+\n+                expressionInput.expected = expressionOutput.actual;\n+                argument.cast(expressionInput, expressionOutput);\n+            }\n+\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTM5Mw=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI2NDUwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyOTo0NFrOGOPyiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo0MzowMVrOGOQOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MTk0Nw==", "bodyText": "(input.read || input.write)", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417591947", "createdAt": "2020-04-29T20:29:44Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessField;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.lang.reflect.Modifier;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a field load/store and defers to a child subnode.\n+ */\n+public class EDot extends AExpression {\n+\n+    protected final boolean nullSafe;\n+    protected final String value;\n+\n+    public EDot(Location location, AExpression prefix, boolean nullSafe, String value) {\n+        super(location, prefix);\n+\n+        this.nullSafe = nullSafe;\n+        this.value = Objects.requireNonNull(value);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of dot operator [.] not used\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        Class<?> targetType = prefixOutput.actual;\n+        String targetCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(targetType);\n+\n+        ExpressionNode expressionNode = null;\n+\n+        if (prefixOutput.actual.isArray()) {\n+            if (\"length\".equals(value)) {\n+                if (input.write) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"invalid assignment: cannot assign a value write to read-only field [length] for an array.\"));\n+                }\n+\n+                output.actual = int.class;\n+            } else {\n+                throw createError(new IllegalArgumentException(\n+                        \"Field [\" + value + \"] does not exist for type [\" + targetCanonicalTypeName + \"].\"));\n+            }\n+\n+            DotSubArrayLengthNode dotSubArrayLengthNode = new DotSubArrayLengthNode();\n+            dotSubArrayLengthNode.setLocation(location);\n+            dotSubArrayLengthNode.setExpressionType(output.actual);\n+            expressionNode = dotSubArrayLengthNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            DotSubDefNode dotSubDefNode = new DotSubDefNode();\n+            dotSubDefNode.setLocation(location);\n+            dotSubDefNode.setExpressionType(output.actual);\n+            dotSubDefNode.setValue(value);\n+            expressionNode = dotSubDefNode;\n+        } else {\n+            PainlessField field = scriptRoot.getPainlessLookup().lookupPainlessField(prefixOutput.actual, prefix instanceof EStatic, value);\n+\n+            if (field == null) {\n+                PainlessMethod getter;\n+                PainlessMethod setter;\n+\n+                getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"get\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter == null) {\n+                    getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                            \"is\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+                }\n+\n+                setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"set\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter != null || setter != null) {\n+                    if (getter != null && (getter.returnType == void.class || !getter.typeParameters.isEmpty())) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal get shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (setter != null && (setter.returnType != void.class || setter.typeParameters.size() != 1)) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal set shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (getter != null && setter != null && setter.typeParameters.get(0) != getter.returnType) {\n+                        throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                    }\n+\n+                    if ((input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                        output.actual = setter != null ? setter.typeParameters.get(0) : getter.returnType;\n+                    } else {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    DotSubShortcutNode dotSubShortcutNode = new DotSubShortcutNode();\n+                    dotSubShortcutNode.setLocation(location);\n+                    dotSubShortcutNode.setExpressionType(output.actual);\n+                    dotSubShortcutNode.setGetter(getter);\n+                    dotSubShortcutNode.setSetter(setter);\n+                    expressionNode = dotSubShortcutNode;\n+                } else {\n+                    EConstant index = new EConstant(location, value);\n+                    index.analyze(classNode, scriptRoot, scope, new Input());\n+\n+                    if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+                        getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"get\", 1);\n+                        setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"put\", 2);\n+\n+                        if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map get shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (setter != null && setter.typeParameters.size() != 2) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map set shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                                !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                            throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                        }\n+\n+                        Output indexOutput;\n+\n+                        if ((input.read || input.write)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5OTAzMg==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417599032", "createdAt": "2020-04-29T20:43:01Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessField;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.lang.reflect.Modifier;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a field load/store and defers to a child subnode.\n+ */\n+public class EDot extends AExpression {\n+\n+    protected final boolean nullSafe;\n+    protected final String value;\n+\n+    public EDot(Location location, AExpression prefix, boolean nullSafe, String value) {\n+        super(location, prefix);\n+\n+        this.nullSafe = nullSafe;\n+        this.value = Objects.requireNonNull(value);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of dot operator [.] not used\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        Class<?> targetType = prefixOutput.actual;\n+        String targetCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(targetType);\n+\n+        ExpressionNode expressionNode = null;\n+\n+        if (prefixOutput.actual.isArray()) {\n+            if (\"length\".equals(value)) {\n+                if (input.write) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"invalid assignment: cannot assign a value write to read-only field [length] for an array.\"));\n+                }\n+\n+                output.actual = int.class;\n+            } else {\n+                throw createError(new IllegalArgumentException(\n+                        \"Field [\" + value + \"] does not exist for type [\" + targetCanonicalTypeName + \"].\"));\n+            }\n+\n+            DotSubArrayLengthNode dotSubArrayLengthNode = new DotSubArrayLengthNode();\n+            dotSubArrayLengthNode.setLocation(location);\n+            dotSubArrayLengthNode.setExpressionType(output.actual);\n+            expressionNode = dotSubArrayLengthNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            DotSubDefNode dotSubDefNode = new DotSubDefNode();\n+            dotSubDefNode.setLocation(location);\n+            dotSubDefNode.setExpressionType(output.actual);\n+            dotSubDefNode.setValue(value);\n+            expressionNode = dotSubDefNode;\n+        } else {\n+            PainlessField field = scriptRoot.getPainlessLookup().lookupPainlessField(prefixOutput.actual, prefix instanceof EStatic, value);\n+\n+            if (field == null) {\n+                PainlessMethod getter;\n+                PainlessMethod setter;\n+\n+                getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"get\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter == null) {\n+                    getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                            \"is\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+                }\n+\n+                setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"set\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter != null || setter != null) {\n+                    if (getter != null && (getter.returnType == void.class || !getter.typeParameters.isEmpty())) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal get shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (setter != null && (setter.returnType != void.class || setter.typeParameters.size() != 1)) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal set shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (getter != null && setter != null && setter.typeParameters.get(0) != getter.returnType) {\n+                        throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                    }\n+\n+                    if ((input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                        output.actual = setter != null ? setter.typeParameters.get(0) : getter.returnType;\n+                    } else {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    DotSubShortcutNode dotSubShortcutNode = new DotSubShortcutNode();\n+                    dotSubShortcutNode.setLocation(location);\n+                    dotSubShortcutNode.setExpressionType(output.actual);\n+                    dotSubShortcutNode.setGetter(getter);\n+                    dotSubShortcutNode.setSetter(setter);\n+                    expressionNode = dotSubShortcutNode;\n+                } else {\n+                    EConstant index = new EConstant(location, value);\n+                    index.analyze(classNode, scriptRoot, scope, new Input());\n+\n+                    if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+                        getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"get\", 1);\n+                        setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"put\", 2);\n+\n+                        if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map get shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (setter != null && setter.typeParameters.size() != 2) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map set shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                                !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                            throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                        }\n+\n+                        Output indexOutput;\n+\n+                        if ((input.read || input.write)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MTk0Nw=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI2NTkwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDozMDoxMVrOGOPzeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDo0MzowOFrOGOQOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MjE4NQ==", "bodyText": "(input.read || input.write)", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417592185", "createdAt": "2020-04-29T20:30:11Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessField;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.lang.reflect.Modifier;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a field load/store and defers to a child subnode.\n+ */\n+public class EDot extends AExpression {\n+\n+    protected final boolean nullSafe;\n+    protected final String value;\n+\n+    public EDot(Location location, AExpression prefix, boolean nullSafe, String value) {\n+        super(location, prefix);\n+\n+        this.nullSafe = nullSafe;\n+        this.value = Objects.requireNonNull(value);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of dot operator [.] not used\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        Class<?> targetType = prefixOutput.actual;\n+        String targetCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(targetType);\n+\n+        ExpressionNode expressionNode = null;\n+\n+        if (prefixOutput.actual.isArray()) {\n+            if (\"length\".equals(value)) {\n+                if (input.write) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"invalid assignment: cannot assign a value write to read-only field [length] for an array.\"));\n+                }\n+\n+                output.actual = int.class;\n+            } else {\n+                throw createError(new IllegalArgumentException(\n+                        \"Field [\" + value + \"] does not exist for type [\" + targetCanonicalTypeName + \"].\"));\n+            }\n+\n+            DotSubArrayLengthNode dotSubArrayLengthNode = new DotSubArrayLengthNode();\n+            dotSubArrayLengthNode.setLocation(location);\n+            dotSubArrayLengthNode.setExpressionType(output.actual);\n+            expressionNode = dotSubArrayLengthNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            DotSubDefNode dotSubDefNode = new DotSubDefNode();\n+            dotSubDefNode.setLocation(location);\n+            dotSubDefNode.setExpressionType(output.actual);\n+            dotSubDefNode.setValue(value);\n+            expressionNode = dotSubDefNode;\n+        } else {\n+            PainlessField field = scriptRoot.getPainlessLookup().lookupPainlessField(prefixOutput.actual, prefix instanceof EStatic, value);\n+\n+            if (field == null) {\n+                PainlessMethod getter;\n+                PainlessMethod setter;\n+\n+                getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"get\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter == null) {\n+                    getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                            \"is\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+                }\n+\n+                setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"set\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter != null || setter != null) {\n+                    if (getter != null && (getter.returnType == void.class || !getter.typeParameters.isEmpty())) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal get shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (setter != null && (setter.returnType != void.class || setter.typeParameters.size() != 1)) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal set shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (getter != null && setter != null && setter.typeParameters.get(0) != getter.returnType) {\n+                        throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                    }\n+\n+                    if ((input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                        output.actual = setter != null ? setter.typeParameters.get(0) : getter.returnType;\n+                    } else {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    DotSubShortcutNode dotSubShortcutNode = new DotSubShortcutNode();\n+                    dotSubShortcutNode.setLocation(location);\n+                    dotSubShortcutNode.setExpressionType(output.actual);\n+                    dotSubShortcutNode.setGetter(getter);\n+                    dotSubShortcutNode.setSetter(setter);\n+                    expressionNode = dotSubShortcutNode;\n+                } else {\n+                    EConstant index = new EConstant(location, value);\n+                    index.analyze(classNode, scriptRoot, scope, new Input());\n+\n+                    if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+                        getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"get\", 1);\n+                        setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"put\", 2);\n+\n+                        if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map get shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (setter != null && setter.typeParameters.size() != 2) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map set shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                                !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                            throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                        }\n+\n+                        Output indexOutput;\n+\n+                        if ((input.read || input.write)\n+                                && (input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                            Input indexInput = new Input();\n+                            indexInput.expected = setter != null ? setter.typeParameters.get(0) : getter.typeParameters.get(0);\n+                            indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+                            index.cast(indexInput, indexOutput);\n+\n+                            output.actual = setter != null ? setter.typeParameters.get(1) : getter.returnType;\n+                        } else {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        MapSubShortcutNode mapSubShortcutNode = new MapSubShortcutNode();\n+                        mapSubShortcutNode.setChildNode(index.cast(indexOutput));\n+                        mapSubShortcutNode.setLocation(location);\n+                        mapSubShortcutNode.setExpressionType(output.actual);\n+                        mapSubShortcutNode.setGetter(getter);\n+                        mapSubShortcutNode.setSetter(setter);\n+                        expressionNode = mapSubShortcutNode;\n+                    }\n+\n+                    if (List.class.isAssignableFrom(prefixOutput.actual)) {\n+                        getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"get\", 1);\n+                        setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"set\", 2);\n+\n+                        if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1 ||\n+                                getter.typeParameters.get(0) != int.class)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal list get shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (setter != null && (setter.typeParameters.size() != 2 || setter.typeParameters.get(0) != int.class)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal list set shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0))\n+                                || !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                            throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                        }\n+\n+                        Output indexOutput;\n+\n+                        if ((input.read || input.write)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5OTA5NA==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/55722#discussion_r417599094", "createdAt": "2020-04-29T20:43:08Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EDot.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.node;\n+\n+import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.Scope;\n+import org.elasticsearch.painless.ir.ClassNode;\n+import org.elasticsearch.painless.ir.DotNode;\n+import org.elasticsearch.painless.ir.DotSubArrayLengthNode;\n+import org.elasticsearch.painless.ir.DotSubDefNode;\n+import org.elasticsearch.painless.ir.DotSubNode;\n+import org.elasticsearch.painless.ir.DotSubShortcutNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.ListSubShortcutNode;\n+import org.elasticsearch.painless.ir.MapSubShortcutNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.lookup.PainlessField;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.PainlessMethod;\n+import org.elasticsearch.painless.lookup.def;\n+import org.elasticsearch.painless.symbol.ScriptRoot;\n+\n+import java.lang.reflect.Modifier;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n+\n+/**\n+ * Represents a field load/store and defers to a child subnode.\n+ */\n+public class EDot extends AExpression {\n+\n+    protected final boolean nullSafe;\n+    protected final String value;\n+\n+    public EDot(Location location, AExpression prefix, boolean nullSafe, String value) {\n+        super(location, prefix);\n+\n+        this.nullSafe = nullSafe;\n+        this.value = Objects.requireNonNull(value);\n+    }\n+\n+    @Override\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        if (input.read == false && input.write == false) {\n+            throw createError(new IllegalArgumentException(\"not a statement: result of dot operator [.] not used\"));\n+        }\n+\n+        Output output = new Output();\n+\n+        Output prefixOutput = prefix.analyze(classNode, scriptRoot, scope, new Input());\n+\n+        Class<?> targetType = prefixOutput.actual;\n+        String targetCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(targetType);\n+\n+        ExpressionNode expressionNode = null;\n+\n+        if (prefixOutput.actual.isArray()) {\n+            if (\"length\".equals(value)) {\n+                if (input.write) {\n+                    throw createError(new IllegalArgumentException(\n+                            \"invalid assignment: cannot assign a value write to read-only field [length] for an array.\"));\n+                }\n+\n+                output.actual = int.class;\n+            } else {\n+                throw createError(new IllegalArgumentException(\n+                        \"Field [\" + value + \"] does not exist for type [\" + targetCanonicalTypeName + \"].\"));\n+            }\n+\n+            DotSubArrayLengthNode dotSubArrayLengthNode = new DotSubArrayLengthNode();\n+            dotSubArrayLengthNode.setLocation(location);\n+            dotSubArrayLengthNode.setExpressionType(output.actual);\n+            expressionNode = dotSubArrayLengthNode;\n+        } else if (prefixOutput.actual == def.class) {\n+            // TODO: remove ZonedDateTime exception when JodaCompatibleDateTime is removed\n+            output.actual = input.expected == null || input.expected == ZonedDateTime.class || input.explicit ? def.class : input.expected;\n+            output.isDefOptimized = true;\n+\n+            DotSubDefNode dotSubDefNode = new DotSubDefNode();\n+            dotSubDefNode.setLocation(location);\n+            dotSubDefNode.setExpressionType(output.actual);\n+            dotSubDefNode.setValue(value);\n+            expressionNode = dotSubDefNode;\n+        } else {\n+            PainlessField field = scriptRoot.getPainlessLookup().lookupPainlessField(prefixOutput.actual, prefix instanceof EStatic, value);\n+\n+            if (field == null) {\n+                PainlessMethod getter;\n+                PainlessMethod setter;\n+\n+                getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"get\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter == null) {\n+                    getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                            \"is\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+                }\n+\n+                setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(prefixOutput.actual, false,\n+                        \"set\" + Character.toUpperCase(value.charAt(0)) + value.substring(1), 0);\n+\n+                if (getter != null || setter != null) {\n+                    if (getter != null && (getter.returnType == void.class || !getter.typeParameters.isEmpty())) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal get shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (setter != null && (setter.returnType != void.class || setter.typeParameters.size() != 1)) {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal set shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    if (getter != null && setter != null && setter.typeParameters.get(0) != getter.returnType) {\n+                        throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                    }\n+\n+                    if ((input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                        output.actual = setter != null ? setter.typeParameters.get(0) : getter.returnType;\n+                    } else {\n+                        throw createError(new IllegalArgumentException(\n+                                \"Illegal shortcut on field [\" + value + \"] for type [\" + targetCanonicalTypeName + \"].\"));\n+                    }\n+\n+                    DotSubShortcutNode dotSubShortcutNode = new DotSubShortcutNode();\n+                    dotSubShortcutNode.setLocation(location);\n+                    dotSubShortcutNode.setExpressionType(output.actual);\n+                    dotSubShortcutNode.setGetter(getter);\n+                    dotSubShortcutNode.setSetter(setter);\n+                    expressionNode = dotSubShortcutNode;\n+                } else {\n+                    EConstant index = new EConstant(location, value);\n+                    index.analyze(classNode, scriptRoot, scope, new Input());\n+\n+                    if (Map.class.isAssignableFrom(prefixOutput.actual)) {\n+                        getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"get\", 1);\n+                        setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"put\", 2);\n+\n+                        if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map get shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (setter != null && setter.typeParameters.size() != 2) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map set shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0)) ||\n+                                !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                            throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                        }\n+\n+                        Output indexOutput;\n+\n+                        if ((input.read || input.write)\n+                                && (input.read == false || getter != null) && (input.write == false || setter != null)) {\n+                            Input indexInput = new Input();\n+                            indexInput.expected = setter != null ? setter.typeParameters.get(0) : getter.typeParameters.get(0);\n+                            indexOutput = index.analyze(classNode, scriptRoot, scope, indexInput);\n+                            index.cast(indexInput, indexOutput);\n+\n+                            output.actual = setter != null ? setter.typeParameters.get(1) : getter.returnType;\n+                        } else {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal map shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        MapSubShortcutNode mapSubShortcutNode = new MapSubShortcutNode();\n+                        mapSubShortcutNode.setChildNode(index.cast(indexOutput));\n+                        mapSubShortcutNode.setLocation(location);\n+                        mapSubShortcutNode.setExpressionType(output.actual);\n+                        mapSubShortcutNode.setGetter(getter);\n+                        mapSubShortcutNode.setSetter(setter);\n+                        expressionNode = mapSubShortcutNode;\n+                    }\n+\n+                    if (List.class.isAssignableFrom(prefixOutput.actual)) {\n+                        getter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"get\", 1);\n+                        setter = scriptRoot.getPainlessLookup().lookupPainlessMethod(targetType, false, \"set\", 2);\n+\n+                        if (getter != null && (getter.returnType == void.class || getter.typeParameters.size() != 1 ||\n+                                getter.typeParameters.get(0) != int.class)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal list get shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (setter != null && (setter.typeParameters.size() != 2 || setter.typeParameters.get(0) != int.class)) {\n+                            throw createError(new IllegalArgumentException(\n+                                    \"Illegal list set shortcut for type [\" + targetCanonicalTypeName + \"].\"));\n+                        }\n+\n+                        if (getter != null && setter != null && (!getter.typeParameters.get(0).equals(setter.typeParameters.get(0))\n+                                || !getter.returnType.equals(setter.typeParameters.get(1)))) {\n+                            throw createError(new IllegalArgumentException(\"Shortcut argument types must match.\"));\n+                        }\n+\n+                        Output indexOutput;\n+\n+                        if ((input.read || input.write)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MjE4NQ=="}, "originalCommit": {"oid": "a1ff4a0a9d2141722bffeb4d8b6fef3fc5e7addb"}, "originalPosition": 220}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2717, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}