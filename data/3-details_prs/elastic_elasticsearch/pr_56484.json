{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTQ3NDk1", "number": 56484, "title": "Support multiple tokens on LHS in stemmer_override rules (#56113)", "bodyText": "Support multiple tokens on LHS in stemmer_override rules (#56113)\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\nThis change also makes stemmer override rules parser more strict so\nthat it should catch more errors which were previously accepted.\nFixes #56113.", "createdAt": "2020-05-09T09:35:13Z", "url": "https://github.com/elastic/elasticsearch/pull/56484", "merged": true, "mergeCommit": {"oid": "66ded59929f76dcf9ef6ea8367c8741cff1452b1"}, "closed": true, "closedAt": "2020-05-29T20:28:41Z", "author": {"login": "telendt"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg5WFPAFqTQxMDkzMTE3NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmEx1-AH2gAyNDE1NTQ3NDk1OmU2NDllNTFiNDFhOGRlNDNkNTQ3MTA3NzBkMzhhOTYyYWZkMDQyMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTMxMTc1", "url": "https://github.com/elastic/elasticsearch/pull/56484#pullrequestreview-410931175", "createdAt": "2020-05-13T13:36:45Z", "commit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozNjo0NlrOGUx8xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NzoxMFrOGUy5Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzA3OQ==", "bodyText": "One suggestion: maybe we could use splitSmart(input, \",\", true) here, I believe this would allow to cover the (admittedly very unlikely) case where ppl need a comma in their rules. I believe a rule like a\\\\,b would then be resolved to a key a,b. If you think thats worth the troube we'd also need a small test for this (see other comment around unit testing).", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r424443079", "createdAt": "2020-05-13T13:36:46Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);\n             }\n \n-            if (key.isEmpty() || override.isEmpty()) {\n+            List<String> keys = Strings.splitSmart(sides.get(0), \",\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MzU4NQ==", "bodyText": "Could you add unit testing for this (and the later) exception?", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r424443585", "createdAt": "2020-05-13T13:37:26Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {\n         for (String rule : rules) {\n-            String key, override;\n-            List<String> mapping = Strings.splitSmart(rule, mappingSep, false);\n-            if (mapping.size() == 2) {\n-                key = mapping.get(0).trim();\n-                override = mapping.get(1).trim();\n-            } else {\n+            List<String> sides = Strings.splitSmart(rule, mappingSep, false);\n+            if (sides.size() != 2) {\n                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODU4Ng==", "bodyText": "Since this is a static method, it should be possible to unit test it directly. I think it would also be an improvement to make it return the StemmerOverrideFilter.Builder instead of passing it in and adding to it inside the method. That way you could use the returned builder to create a StemmerOverrideMap from it, which I think can be queried for testing. Its a Lucene class so not so easy to directly work with, but I lifted some parts from StemmerOverrideFilter and something like this should work:\n       StemmerOverrideMap map = builder.build();\n        BytesReader fstReader = map.getBytesReader();\n        final Arc<BytesRef> scratchArc = new FST.Arc<>();\n        String key = \"something\"\n        BytesRef bytesRef = map.get(key.toCharArray(), key.length() , scratchArc, fstReader);\n        assertEquals(\"someValue\", bytesRef.utf8ToString());\n\nIt would be nice to test a few more cases (with commas, trimming of whitespaces etc...) and the exception cases in a new unit test for StemmerOverrideTokenFilterFactory (that is a new StemmerOverrideTokenFilterFactoryTests) in the analysis-common module.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r424458586", "createdAt": "2020-05-13T13:57:10Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactory.java", "diffHunk": "@@ -57,19 +57,23 @@ public TokenStream create(TokenStream tokenStream) {\n \n     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f29f73db8a3a685c293932c764a48f1c98ce04e", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/9f29f73db8a3a685c293932c764a48f1c98ce04e", "committedDate": "2020-05-09T09:09:47Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)"}, "afterCommit": {"oid": "4afbdf58b48e722b838036c7b2c5cc006dc2f87a", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/4afbdf58b48e722b838036c7b2c5cc006dc2f87a", "committedDate": "2020-05-28T21:21:55Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes rules parser more strict so that it should\ncatch more errors which were previously accepted."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4afbdf58b48e722b838036c7b2c5cc006dc2f87a", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/4afbdf58b48e722b838036c7b2c5cc006dc2f87a", "committedDate": "2020-05-28T21:21:55Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes rules parser more strict so that it should\ncatch more errors which were previously accepted."}, "afterCommit": {"oid": "91be65109cd5612955a6dbb70812abbf1e76cd29", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/91be65109cd5612955a6dbb70812abbf1e76cd29", "committedDate": "2020-05-28T21:25:15Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes stemmer override rules parser more strict so\nthat it should catch more errors which were previously accepted."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTEyOTQ4", "url": "https://github.com/elastic/elasticsearch/pull/56484#pullrequestreview-420512948", "createdAt": "2020-05-28T21:41:00Z", "commit": {"oid": "4afbdf58b48e722b838036c7b2c5cc006dc2f87a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0MTozMlrOGcHwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0MTozMlrOGcHwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MDMyNA==", "bodyText": "This case was valid before when split still happened with smartSplit but it's not anymore.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r432140324", "createdAt": "2020-05-28T21:41:32Z", "author": {"login": "telendt"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactoryTests.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.analysis.common;\n+\n+import org.apache.lucene.analysis.Tokenizer;\n+import org.apache.lucene.analysis.core.WhitespaceTokenizer;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.index.analysis.AnalysisTestsHelper;\n+import org.elasticsearch.index.analysis.TokenFilterFactory;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.ESTokenStreamTestCase;\n+import org.junit.Rule;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+public class StemmerOverrideTokenFilterFactoryTests extends ESTokenStreamTestCase {\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    public TokenFilterFactory create(String... rules) throws IOException {\n+        ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(\n+            Settings.builder()\n+                .put(\"index.analysis.filter.my_stemmer_override.type\", \"stemmer_override\")\n+                .putList(\"index.analysis.filter.my_stemmer_override.rules\", rules)\n+                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+                .build(),\n+            new CommonAnalysisPlugin());\n+\n+        return analysis.tokenFilter.get(\"my_stemmer_override\");\n+    }\n+\n+    public void testRuleError() {\n+        for (String rule : List.of(\n+            \"\",        // empty\n+            \"a\",       // no arrow\n+            \"a=>b=>c\", // multiple arrows\n+            \"=>a=>b\",  // multiple arrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91be65109cd5612955a6dbb70812abbf1e76cd29"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTkwNzY1", "url": "https://github.com/elastic/elasticsearch/pull/56484#pullrequestreview-420990765", "createdAt": "2020-05-29T14:12:15Z", "commit": {"oid": "91be65109cd5612955a6dbb70812abbf1e76cd29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91be65109cd5612955a6dbb70812abbf1e76cd29", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/91be65109cd5612955a6dbb70812abbf1e76cd29", "committedDate": "2020-05-28T21:25:15Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes stemmer override rules parser more strict so\nthat it should catch more errors which were previously accepted."}, "afterCommit": {"oid": "32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8", "committedDate": "2020-05-29T14:43:49Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes stemmer override rules parser more strict so\nthat it should catch more errors which were previously accepted."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDYyNjk3", "url": "https://github.com/elastic/elasticsearch/pull/56484#pullrequestreview-421062697", "createdAt": "2020-05-29T15:32:56Z", "commit": {"oid": "32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMjo1NlrOGchvGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMjo1NlrOGchvGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NjA0Mg==", "bodyText": "Another small complaint coming from CI here:\n\"Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale]\"\nThe \"forbiddenAPIs\" plugin is configured to require several string-related methods to specify the locale explicitely, e.g. using Locale.ROOT here would work.", "url": "https://github.com/elastic/elasticsearch/pull/56484#discussion_r432566042", "createdAt": "2020-05-29T15:32:56Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/StemmerOverrideTokenFilterFactoryTests.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.analysis.common;\n+\n+import org.apache.lucene.analysis.Tokenizer;\n+import org.apache.lucene.analysis.core.WhitespaceTokenizer;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.index.analysis.AnalysisTestsHelper;\n+import org.elasticsearch.index.analysis.TokenFilterFactory;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.ESTokenStreamTestCase;\n+import org.junit.Rule;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+public class StemmerOverrideTokenFilterFactoryTests extends ESTokenStreamTestCase {\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    public static TokenFilterFactory create(String... rules) throws IOException {\n+        ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(\n+            Settings.builder()\n+                .put(\"index.analysis.filter.my_stemmer_override.type\", \"stemmer_override\")\n+                .putList(\"index.analysis.filter.my_stemmer_override.rules\", rules)\n+                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+                .build(),\n+            new CommonAnalysisPlugin());\n+\n+        return analysis.tokenFilter.get(\"my_stemmer_override\");\n+    }\n+\n+    public void testRuleError() {\n+        for (String rule : List.of(\n+            \"\",        // empty\n+            \"a\",       // no arrow\n+            \"a=>b=>c\", // multiple arrows\n+            \"=>a=>b\",  // multiple arrows\n+            \"a=>\",     // no override\n+            \"a=>b,c\",  // multiple overrides\n+            \"=>a\",     // no keys\n+            \"a,=>b\"    // empty key\n+        )) {\n+            expectThrows(RuntimeException.class, String.format(\"Should fail for invalid rule: '%s'\", rule), () -> create(rule));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9a882ad71d69b78b23a40e97a00752db2f1fd2b", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/d9a882ad71d69b78b23a40e97a00752db2f1fd2b", "committedDate": "2020-05-29T15:41:48Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes stemmer override rules parser more strict so\nthat it should catch more errors which were previously accepted."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/32c3fc50ca4cdb8919bdde03967d3bf3256fa7c8", "committedDate": "2020-05-29T14:43:49Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes stemmer override rules parser more strict so\nthat it should catch more errors which were previously accepted."}, "afterCommit": {"oid": "d9a882ad71d69b78b23a40e97a00752db2f1fd2b", "author": {"user": {"login": "telendt", "name": "Tomasz Elendt"}}, "url": "https://github.com/elastic/elasticsearch/commit/d9a882ad71d69b78b23a40e97a00752db2f1fd2b", "committedDate": "2020-05-29T15:41:48Z", "message": "Support multiple tokens on LHS in stemmer_override rules (#56113)\n\nThis commit adds support for rules with multiple tokens on LHS, also\nknown as \"contraction rules\", into stemmer override token\nfilter. Contraction rules are handy into translating multiple\ninflected words into the same root form. One side effect of this change is\nthat it brings stemmer override rules format closer to synonym rules\nformat so that it makes it easier to translate one into another.\n\nThis change also makes stemmer override rules parser more strict so\nthat it should catch more errors which were previously accepted."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e649e51b41a8de43d54710770d38a962afd04222", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/e649e51b41a8de43d54710770d38a962afd04222", "committedDate": "2020-05-29T16:09:16Z", "message": "Merge branch 'master' into stemmer-overrride-multiple-tokens-rule"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 113, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}