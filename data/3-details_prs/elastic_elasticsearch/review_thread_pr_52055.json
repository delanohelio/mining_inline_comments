{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDY5MjM2", "number": 52055, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxNTo0NVrODhoOwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxNTo0NVrODhoOwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTg4NzM3OnYy", "diffSide": "RIGHT", "path": "docs/reference/cluster/nodes-stats.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxNTo0NVrOFsd9cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjo0NTozOFrOFs1wCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MjUyOQ==", "bodyText": "This should just be fixed_bit_set", "url": "https://github.com/elastic/elasticsearch/pull/52055#discussion_r382172529", "createdAt": "2020-02-20T18:15:45Z", "author": {"login": "jbaiera"}, "path": "docs/reference/cluster/nodes-stats.asciidoc", "diffHunk": "@@ -446,77 +535,147 @@ in the query cache.\n (integer)\n Number of query cache evictions.\n \n+`indices.fielddata.memory_size`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for the field data cache across all shards\n+assigned to the node.\n+\n `indices.fielddata.memory_size_in_bytes`::\n (integer)\n-Memory, in bytes, used for fielddata cache.\n+Total amount of memory, in bytes, used for the field data cache across all\n+shards assigned to the node.\n \n `indices.fielddata.evictions`::\n (integer)\n Number of fielddata evictions.\n \n+`indices.completion.size`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for completion across all shards assigned to\n+the node.\n+\n `indices.completion.size_in_bytes`::\n (integer)\n-Memory, in bytes, used for completion.\n+Total amount of memory, in bytes, used for completion across all shards assigned\n+to the node.\n \n `indices.segments.count`::\n (integer)\n Number of segments.\n \n+`indices.segments.memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for segments across all shards assigned to the\n+node.\n+\n `indices.segments.memory_in_bytes`::\n (integer)\n-Size, in bytes, of segments.\n+Total amount of memory, in bytes, used for segments across all shards assigned\n+to the node.\n+\n+`indices.segments.terms_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for terms across all shards assigned to the node.\n \n `indices.segments.terms_memory_in_bytes`::\n (integer)\n-Memory, in bytes, used of terms\n-in segments.\n+Total amount of memory, in bytes, used for terms across all shards assigned to\n+the node.\n+\n+`indices.segments.stored_fields_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for stored fields across all shards assigned to\n+the node.\n \n `indices.segments.stored_fields_memory_in_bytes`::\n (integer)\n-Size, in bytes, of stored fields\n-in segments.\n+Total amount of memory, in bytes, used for stored fields across all shards\n+assigned to the node.\n+\n+`indices.segments.term_vectors_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for term vectors across all shards assigned to\n+the node.\n \n `indices.segments.term_vectors_memory_in_bytes`::\n (integer)\n-Size, in bytes, of term vectors\n-in segments.\n+Total amount of memory, in bytes, used for term vectors across all shards\n+assigned to the node.\n+\n+`indices.segments.norms_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for normalization factors across all shards assigned\n+to the node.\n \n `indices.segments.norms_memory_in_bytes`::\n (integer)\n-Size, in bytes, of normalization factors \n-in segments.\n+Total amount of memory, in bytes, used for normalization factors across all\n+shards assigned to the node.\n+\n+`indices.segments.points_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for points across all shards assigned to the node.\n \n `indices.segments.points_memory_in_bytes`::\n (integer)\n-Size, in bytes, of points\n-in segments.\n+Total amount of memory, in bytes, used for points across all shards assigned to\n+the node.\n+\n+`indices.segments.doc_values_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for doc values across all shards assigned to\n+the node.\n \n `indices.segments.doc_values_memory_in_bytes`::\n (integer)\n-Size, in bytes, of doc values\n-in segments.\n+Total amount of memory, in bytes, used for doc values across all shards assigned\n+to the node.\n+\n+`indices.segments.index_writer_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used by all index writers across all shards assigned to\n+the node.\n \n `indices.segments.index_writer_memory_in_bytes`::\n (integer)\n-Memory, in bytes, used by the index writer.\n+Total amount of memory, in bytes, used by all index writers across all shards\n+assigned to the node.\n+\n+`indices.segments.version_map_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used by all version maps across all shards assigned to\n+the node.\n \n `indices.segments.version_map_memory_in_bytes`::\n (integer)\n-Memory, in bytes, used by the version map.\n+Total amount of memory, in bytes, used by all version maps across all shards\n+assigned to the node.\n+\n+`indices.segments.fixed_bit_set_memory`::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5de44d6ee2d86250bfd65b36a728ffbf0e3bcc1"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MjMxMw==", "bodyText": "Good catch. Thanks @jbaiera.", "url": "https://github.com/elastic/elasticsearch/pull/52055#discussion_r382562313", "createdAt": "2020-02-21T12:45:38Z", "author": {"login": "jrodewig"}, "path": "docs/reference/cluster/nodes-stats.asciidoc", "diffHunk": "@@ -446,77 +535,147 @@ in the query cache.\n (integer)\n Number of query cache evictions.\n \n+`indices.fielddata.memory_size`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for the field data cache across all shards\n+assigned to the node.\n+\n `indices.fielddata.memory_size_in_bytes`::\n (integer)\n-Memory, in bytes, used for fielddata cache.\n+Total amount of memory, in bytes, used for the field data cache across all\n+shards assigned to the node.\n \n `indices.fielddata.evictions`::\n (integer)\n Number of fielddata evictions.\n \n+`indices.completion.size`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for completion across all shards assigned to\n+the node.\n+\n `indices.completion.size_in_bytes`::\n (integer)\n-Memory, in bytes, used for completion.\n+Total amount of memory, in bytes, used for completion across all shards assigned\n+to the node.\n \n `indices.segments.count`::\n (integer)\n Number of segments.\n \n+`indices.segments.memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for segments across all shards assigned to the\n+node.\n+\n `indices.segments.memory_in_bytes`::\n (integer)\n-Size, in bytes, of segments.\n+Total amount of memory, in bytes, used for segments across all shards assigned\n+to the node.\n+\n+`indices.segments.terms_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for terms across all shards assigned to the node.\n \n `indices.segments.terms_memory_in_bytes`::\n (integer)\n-Memory, in bytes, used of terms\n-in segments.\n+Total amount of memory, in bytes, used for terms across all shards assigned to\n+the node.\n+\n+`indices.segments.stored_fields_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for stored fields across all shards assigned to\n+the node.\n \n `indices.segments.stored_fields_memory_in_bytes`::\n (integer)\n-Size, in bytes, of stored fields\n-in segments.\n+Total amount of memory, in bytes, used for stored fields across all shards\n+assigned to the node.\n+\n+`indices.segments.term_vectors_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for term vectors across all shards assigned to\n+the node.\n \n `indices.segments.term_vectors_memory_in_bytes`::\n (integer)\n-Size, in bytes, of term vectors\n-in segments.\n+Total amount of memory, in bytes, used for term vectors across all shards\n+assigned to the node.\n+\n+`indices.segments.norms_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for normalization factors across all shards assigned\n+to the node.\n \n `indices.segments.norms_memory_in_bytes`::\n (integer)\n-Size, in bytes, of normalization factors \n-in segments.\n+Total amount of memory, in bytes, used for normalization factors across all\n+shards assigned to the node.\n+\n+`indices.segments.points_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for points across all shards assigned to the node.\n \n `indices.segments.points_memory_in_bytes`::\n (integer)\n-Size, in bytes, of points\n-in segments.\n+Total amount of memory, in bytes, used for points across all shards assigned to\n+the node.\n+\n+`indices.segments.doc_values_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used for doc values across all shards assigned to\n+the node.\n \n `indices.segments.doc_values_memory_in_bytes`::\n (integer)\n-Size, in bytes, of doc values\n-in segments.\n+Total amount of memory, in bytes, used for doc values across all shards assigned\n+to the node.\n+\n+`indices.segments.index_writer_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used by all index writers across all shards assigned to\n+the node.\n \n `indices.segments.index_writer_memory_in_bytes`::\n (integer)\n-Memory, in bytes, used by the index writer.\n+Total amount of memory, in bytes, used by all index writers across all shards\n+assigned to the node.\n+\n+`indices.segments.version_map_memory`::\n+(<<byte-units,byte value>>)\n+Total amount of memory used by all version maps across all shards assigned to\n+the node.\n \n `indices.segments.version_map_memory_in_bytes`::\n (integer)\n-Memory, in bytes, used by the version map.\n+Total amount of memory, in bytes, used by all version maps across all shards\n+assigned to the node.\n+\n+`indices.segments.fixed_bit_set_memory`::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MjUyOQ=="}, "originalCommit": {"oid": "f5de44d6ee2d86250bfd65b36a728ffbf0e3bcc1"}, "originalPosition": 381}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4827, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}