{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODgwMDY3", "number": 61858, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjo1OTo0NVrOEf-pRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMTowMTozOVrOEx2alA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTY3Njg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjo1OTo0NVrOHMlbiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjo1OTo0NVrOHMlbiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1ODIxNg==", "bodyText": "We talked about the auto create index logic and the allow auto create template flag yesterday. This logic is invoked from the bulk action and is evaluated on the coordinating node. While the decision the auto create an index or data stream is done in the AutoCreateAction on the elected master node.\nThe reason why we decided to make the decision to auto create an index or data stream in the AutoCreateAction and not here is, because if for some reason a node is lacking behind and doesn't have all the templates then an index is auto created instead of a data stream. Fixing the erroneous situation requires a lot of manual work, hence we moved making this decision to elected master node.\nThe question is whether the auto create index check (with this enhancement) should be moved to AutoCreateAction class too, so that all the decisions are made on the elected master node.\nI'm currently thinking the following:\n\nIn the case a coordinating node doesn't have the latest action.auto_create_index setting values or composable index templates then the worst that can happen is a new few write requests fail, because the target index doesn't exist.\nCurrently if action.auto_create_index is set to false then also data streams are no longer created. I think this is a bug, because the name of the setting implies auto creation of indices only.\nIf this logic is moved to AutoCreateAction class then the overhead is that remote requests are made to the elected master node in the case target indices don't exist. Most requests will index into an existing data stream or index, so the cost is acceptable.\nI remember that we eventually want to deprecate and remove the action.auto_create_index setting, but I may be mistaken.\n\nIf we are going to remove action.auto_create_index with the new allow auto create template flag then I think let's keep it here? And then maybe also add logic here that if a non existing index matches with a template that auto create data streams then checking the action.auto_create_index setting should be ignored?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r482958216", "createdAt": "2020-09-03T12:59:45Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java", "diffHunk": "@@ -67,6 +62,13 @@ public boolean shouldAutoCreate(String index, ClusterState state) {\n         if (resolver.hasIndexAbstraction(index, state)) {\n             return false;\n         }\n+\n+        // Templates can override the AUTO_CREATE_INDEX_SETTING setting\n+        final ComposableIndexTemplate template = findTemplate(index, state.metadata());\n+        if (template != null && template.getAllowAutoCreate()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c173711811b8577eb8360b3b84caf4f23b66796"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzMxODI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTo0MTo1MVrOHUZu-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToyNDoyOVrOHVxjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTE5NQ==", "bodyText": "Typically, we set this to V.8_0_0 until after we backport", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r491155195", "createdAt": "2020-09-18T19:41:51Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java", "diffHunk": "@@ -132,6 +138,11 @@ public ComposableIndexTemplate(StreamInput in) throws IOException {\n         } else {\n             this.dataStreamTemplate = null;\n         }\n+        if (in.getVersion().after(Version.V_7_10_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2694fb2776c4f710f9159bf85c5412d6ff535af9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5Mzk1Nw==", "bodyText": "Ah, I wasn't sure what the convention was here. Does that mean that the backport has V_7_10_0 and master has V_8_0_0, or do we also adjust master?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r492593957", "createdAt": "2020-09-22T09:24:29Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java", "diffHunk": "@@ -132,6 +138,11 @@ public ComposableIndexTemplate(StreamInput in) throws IOException {\n         } else {\n             this.dataStreamTemplate = null;\n         }\n+        if (in.getVersion().after(Version.V_7_10_0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTE5NQ=="}, "originalCommit": {"oid": "2694fb2776c4f710f9159bf85c5412d6ff535af9"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzMzMDI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTo0NjoxMVrOHUZ2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToyNDo0MFrOHVxjdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NzAzNA==", "bodyText": "we probably don't want this change to go in?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r491157034", "createdAt": "2020-09-18T19:46:11Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java", "diffHunk": "@@ -430,7 +430,7 @@ private boolean hasTemplate(final ClusterState clusterState, final String templa\n \n     // FIXME this should use the IndexTemplateMetadataUpgrader\n     private void putTemplate(String template, String source, ActionListener<AcknowledgedResponse> listener) {\n-        logger.debug(\"installing template [{}]\", template);\n+        logger.warn(\"installing template [{}]\", template);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2694fb2776c4f710f9159bf85c5412d6ff535af9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5NDAzOA==", "bodyText": "Indeed \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r492594038", "createdAt": "2020-09-22T09:24:40Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java", "diffHunk": "@@ -430,7 +430,7 @@ private boolean hasTemplate(final ClusterState clusterState, final String templa\n \n     // FIXME this should use the IndexTemplateMetadataUpgrader\n     private void putTemplate(String template, String source, ActionListener<AcknowledgedResponse> listener) {\n-        logger.debug(\"installing template [{}]\", template);\n+        logger.warn(\"installing template [{}]\", template);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NzAzNA=="}, "originalCommit": {"oid": "2694fb2776c4f710f9159bf85c5412d6ff535af9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjgxMjc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/resources/ilm-history.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToyODoxOFrOHVxsIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDowMToyM1rOHV7nVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5NjI1Ng==", "bodyText": "I think that allow_auto_create doesn't need to be defined? Since auto creation is allowed by default?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r492596256", "createdAt": "2020-09-22T09:28:18Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/core/src/main/resources/ilm-history.json", "diffHunk": "@@ -80,6 +80,7 @@\n         }\n       }\n   },\n+  \"allow_auto_create\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39abb3816a8884705ae406a2b6be9fc33d9a7217"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYwMDAxNA==", "bodyText": "This is to handle the situation where auto_create_index is set to false (or some restrictive pattern). In that case, having allow_auto_create set to true means that ES will still create the index, overriding auto_create_index. Is the name of this new field confusing, maybe?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r492600014", "createdAt": "2020-09-22T09:34:40Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/core/src/main/resources/ilm-history.json", "diffHunk": "@@ -80,6 +80,7 @@\n         }\n       }\n   },\n+  \"allow_auto_create\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5NjI1Ng=="}, "originalCommit": {"oid": "39abb3816a8884705ae406a2b6be9fc33d9a7217"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1ODg3MA==", "bodyText": "No, the name is not confusing. I forgot, that the new setting can also be used to overwrite anything that is specified in auto_create_index setting.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r492758870", "createdAt": "2020-09-22T14:01:23Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/core/src/main/resources/ilm-history.json", "diffHunk": "@@ -80,6 +80,7 @@\n         }\n       }\n   },\n+  \"allow_auto_create\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5NjI1Ng=="}, "originalCommit": {"oid": "39abb3816a8884705ae406a2b6be9fc33d9a7217"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQ3ODc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1Njo1OFrOHXhwUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1Njo1OFrOHXhwUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMjMzNw==", "bodyText": "I think we need to do a little more for this to be a full feature and only fall back to the setting if the value is null in the template:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (template != null && template.getAllowAutoCreate() != null && template.getAllowAutoCreate()) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (template != null && template.getAllowAutoCreate() != null) {\n          \n          \n            \n                        if (template.getAllowAutoCreate()) {\n          \n          \n            \n                            return true;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // explicit false overrides AUTO_CREATE_INDEX_SETTING\n          \n          \n            \n                            throw new IndexNotFoundException(\"composable template [\" + template.getIndexPatterns() + \"] forbids index auto creation\");\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r494432337", "createdAt": "2020-09-24T15:56:58Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java", "diffHunk": "@@ -67,6 +62,13 @@ public boolean shouldAutoCreate(String index, ClusterState state) {\n         if (resolver.hasIndexAbstraction(index, state)) {\n             return false;\n         }\n+\n+        // Templates can override the AUTO_CREATE_INDEX_SETTING setting\n+        final ComposableIndexTemplate template = findTemplate(index, state.metadata());\n+        if (template != null && template.getAllowAutoCreate() != null && template.getAllowAutoCreate()) {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0770988fe672838603ce7aa7e15263e1dd90e4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTg0NzAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjozNzo1NVrOHXu83w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjozNzo1NVrOHXu83w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0ODU0Mw==", "bodyText": "Can we define a constant for this version? It's less error-prone to only have to update it in one place when backporting.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r494648543", "createdAt": "2020-09-24T22:37:55Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java", "diffHunk": "@@ -132,6 +138,11 @@ public ComposableIndexTemplate(StreamInput in) throws IOException {\n         } else {\n             this.dataStreamTemplate = null;\n         }\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0770988fe672838603ce7aa7e15263e1dd90e4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTg4NTU1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjo1NToyMVrOHXvTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjo1NToyMVrOHXvTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY1NDI1MA==", "bodyText": "Could you add a positive version of this test case where the template has allow_auto_create=null, but action.auto_create_index is a pattern that allows creation of the index? This might be paranoia, but unit tests are cheap.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r494654250", "createdAt": "2020-09-24T22:55:21Z", "author": {"login": "gwbrown"}, "path": "server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java", "diffHunk": "@@ -191,6 +192,86 @@ public void testUpdate() {\n         assertThat(autoCreateIndex.getAutoCreate().getExpressions().get(0).v1(), equalTo(\"logs-*\"));\n     }\n \n+    /**\n+     * Check that if a template matches the index to be created, but that template does not have a value\n+     * for the allow_auto_create setting at all, then it does not cause the auto-create logic to trip over\n+     * on a null value.\n+     */\n+    public void testCanHandleNullAutoCreateSettingInTemplate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0770988fe672838603ce7aa7e15263e1dd90e4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTkwMjMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/watcher/qa/rest/src/yamlRestTest/resources/rest-api-spec/test/watcher/execute_watch/90_auto_create_index.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzowMjo0MlrOHXvcXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzowMjo0MlrOHXvcXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY1NjYwNw==", "bodyText": "I like this test case, but I think it should be moved to the put_watch directory, rather than being in execute_watch.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r494656607", "createdAt": "2020-09-24T23:02:42Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/watcher/qa/rest/src/yamlRestTest/resources/rest-api-spec/test/watcher/execute_watch/90_auto_create_index.yml", "diffHunk": "@@ -0,0 +1,52 @@\n+---", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0770988fe672838603ce7aa7e15263e1dd90e4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc4NjcwOnYy", "diffSide": "RIGHT", "path": "docs/reference/indices/put-component-template.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyNjoyOFrOHgMLcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozMjo0MFrOHgd8EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNjAxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `actions.auto_create_index`.  If set to `false`, then indices matching the\n          \n          \n            \n            `actions.auto_create_index`. If set to `false`, then indices matching the\n          \n      \n    \n    \n  \n\nSuper nitpick: Prefer single spaces following a full stop in the docs.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r503516017", "createdAt": "2020-10-12T20:26:28Z", "author": {"login": "gwbrown"}, "path": "docs/reference/indices/put-component-template.asciidoc", "diffHunk": "@@ -112,6 +112,16 @@ include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=settings]\n Version number used to manage component templates externally.\n This number is not automatically generated or incremented by {es}.\n \n+`allow_auto_create`::\n+(Optional, boolean)\n+This setting overrides the value of the\n+<<index-creation,`action.auto_create_index`>> cluster setting. If set to\n+`true` in a template, then indices can be automatically created using that\n+template even if auto-creation of indices is disabled via\n+`actions.auto_create_index`.  If set to `false`, then indices matching the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6127caf1c0fc37feaca3f3bc6446df140bd77150"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNjk5Mw==", "bodyText": "Ah thanks, I'm not a double spacer by habit, that must have come from re-wrapping the lines.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r503806993", "createdAt": "2020-10-13T09:32:40Z", "author": {"login": "pugnascotia"}, "path": "docs/reference/indices/put-component-template.asciidoc", "diffHunk": "@@ -112,6 +112,16 @@ include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=settings]\n Version number used to manage component templates externally.\n This number is not automatically generated or incremented by {es}.\n \n+`allow_auto_create`::\n+(Optional, boolean)\n+This setting overrides the value of the\n+<<index-creation,`action.auto_create_index`>> cluster setting. If set to\n+`true` in a template, then indices can be automatically created using that\n+template even if auto-creation of indices is disabled via\n+`actions.auto_create_index`.  If set to `false`, then indices matching the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNjAxNw=="}, "originalCommit": {"oid": "6127caf1c0fc37feaca3f3bc6446df140bd77150"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzgxNTU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/history/SnapshotLifecycleTemplateRegistry.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozODowN1rOHgMc8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjo0NjoxOVrOHkMkVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ==", "bodyText": "How do data streams interact with auto-creation and does it make sense to have both on the same template? I know that you can create a data stream via \"auto-creation\", but I'm not sure exactly how that's implemented.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r503520499", "createdAt": "2020-10-12T20:38:07Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/history/SnapshotLifecycleTemplateRegistry.java", "diffHunk": "@@ -37,8 +37,9 @@\n     // version 1: initial\n     // version 2: converted to hidden index\n     // version 3: templates moved to composable templates\n-    // version 4: add `allow_auto_create` setting\n-    public static final int INDEX_TEMPLATE_VERSION = 4;\n+    // version 4:converted data stream\n+    // version 5: add `allow_auto_create` setting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b2fc6588c839ff91af7e354eed44726295f523"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODA3NA==", "bodyText": "According to the AutoCreateAction class, data streams are always auto-created. I'm not sure whether that answers your question?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r503808074", "createdAt": "2020-10-13T09:34:22Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/history/SnapshotLifecycleTemplateRegistry.java", "diffHunk": "@@ -37,8 +37,9 @@\n     // version 1: initial\n     // version 2: converted to hidden index\n     // version 3: templates moved to composable templates\n-    // version 4: add `allow_auto_create` setting\n-    public static final int INDEX_TEMPLATE_VERSION = 4;\n+    // version 4:converted data stream\n+    // version 5: add `allow_auto_create` setting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}, "originalCommit": {"oid": "41b2fc6588c839ff91af7e354eed44726295f523"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2ODk1NA==", "bodyText": "Thanks - in that case, my question is: Is there a benefit to setting allow_auto_create: true on a data stream template? If not, we should revert the changes to this template and not increase the template version.\nWhat happens if a data stream template has allow_auto_create: false? Today, it looks like the data stream will be auto-created anyway. Is that the behavior we want? @martijnvg, you've already commented on this PR - any input on that point?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r504068954", "createdAt": "2020-10-13T15:56:10Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/history/SnapshotLifecycleTemplateRegistry.java", "diffHunk": "@@ -37,8 +37,9 @@\n     // version 1: initial\n     // version 2: converted to hidden index\n     // version 3: templates moved to composable templates\n-    // version 4: add `allow_auto_create` setting\n-    public static final int INDEX_TEMPLATE_VERSION = 4;\n+    // version 4:converted data stream\n+    // version 5: add `allow_auto_create` setting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}, "originalCommit": {"oid": "41b2fc6588c839ff91af7e354eed44726295f523"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0OTYyNQ==", "bodyText": "This is an interesting point. Right now, there's no benefit to adding allow_auto_create to data stream templates. However, it seems to me that the user experience would be more consistent if the auto-creation of data streams was also subject to the auto_create_index setting. Then an administrator could stop their users from e.g. creating a slew of logs-*-* data streams.\n@martijnvg I believe you added the code to auto-create data streams - what is your view here?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r504549625", "createdAt": "2020-10-14T09:52:38Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/history/SnapshotLifecycleTemplateRegistry.java", "diffHunk": "@@ -37,8 +37,9 @@\n     // version 1: initial\n     // version 2: converted to hidden index\n     // version 3: templates moved to composable templates\n-    // version 4: add `allow_auto_create` setting\n-    public static final int INDEX_TEMPLATE_VERSION = 4;\n+    // version 4:converted data stream\n+    // version 5: add `allow_auto_create` setting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}, "originalCommit": {"oid": "41b2fc6588c839ff91af7e354eed44726295f523"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNjY5Mg==", "bodyText": "I've changed AutoCreateAction so that data streams are now also subject to auto_create_index, and added an integration test. I tried reworking the exist auto-create IT, but as it's under qa the data stream API wasn't available.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r507716692", "createdAt": "2020-10-19T12:46:19Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/history/SnapshotLifecycleTemplateRegistry.java", "diffHunk": "@@ -37,8 +37,9 @@\n     // version 1: initial\n     // version 2: converted to hidden index\n     // version 3: templates moved to composable templates\n-    // version 4: add `allow_auto_create` setting\n-    public static final int INDEX_TEMPLATE_VERSION = 4;\n+    // version 4:converted data stream\n+    // version 5: add `allow_auto_create` setting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}, "originalCommit": {"oid": "41b2fc6588c839ff91af7e354eed44726295f523"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQ2NDQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowMzoyNFrOHkhkQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzoxOTowMlrOHmT0rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw==", "bodyText": "Moving this call here has the side effect of also applying action.auto_create_index to data streams if the template does not have allow_auto_create set, which I don't think is what we wanted to do.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r508060737", "createdAt": "2020-10-19T21:03:24Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDA4Nw==", "bodyText": "I must have misunderstood - to clarify, were you expecting that all I was going to do was apply the value of allow_auto_create to data streams, as opposed to also making them subject to auto_create_index? I'm happy to implement either, it just seemed strange that a user could control auto-creation for indices, but not for data streams. @jaymode what's your feeling here?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r508374087", "createdAt": "2020-10-20T10:05:42Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, "originalCommit": {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5OTA4Mw==", "bodyText": "At this point, making action.auto_create_index apply to data streams would be a breaking change, no? With allow_auto_create, that's a new feature so we can define the behavior however we want, but we have to be more careful with behavior we've already shipped.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r508699083", "createdAt": "2020-10-20T17:10:27Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, "originalCommit": {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzODA3Ng==", "bodyText": "Ah, that's a good point. I'll rework the code.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509138076", "createdAt": "2020-10-21T09:41:32Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, "originalCommit": {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5Mzg5Ng==", "bodyText": "I've reworked AutoCreateAction - what do you think about the docs for allow_auto_create, is it worth discussing the difference between indices and data streams w.r.t the new template setting?", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509193896", "createdAt": "2020-10-21T11:16:50Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, "originalCommit": {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM2NTk4OA==", "bodyText": "I think the fact that action.auto_create_index controls whether data streams can be auto created can be seen as a bug. Something that we missed during development. I would prefer that action.auto_create_index doesn't affect the auto creation of data streams.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509365988", "createdAt": "2020-10-21T15:03:20Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, "originalCommit": {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzMjcxOQ==", "bodyText": "Never mind my comment. The PR is doing what I suggested in my comment.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509932719", "createdAt": "2020-10-22T07:19:02Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, "originalCommit": {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjU3MjU4OnYy", "diffSide": "RIGHT", "path": "docs/reference/indices/put-component-template.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoyNDo0MVrOHmDfFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoyNDo0MVrOHmDfFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NTA0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `actions.auto_create_index`. If set to `false`, then indices matching the\n          \n          \n            \n            `actions.auto_create_index`. If set to `false`, then indices or data streams matching the\n          \n      \n    \n    \n  \n\nThis is the only note I'd make in the documentation, I think.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509665047", "createdAt": "2020-10-21T20:24:41Z", "author": {"login": "gwbrown"}, "path": "docs/reference/indices/put-component-template.asciidoc", "diffHunk": "@@ -112,6 +112,16 @@ include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=settings]\n Version number used to manage component templates externally.\n This number is not automatically generated or incremented by {es}.\n \n+`allow_auto_create`::\n+(Optional, boolean)\n+This setting overrides the value of the\n+<<index-creation,`action.auto_create_index`>> cluster setting. If set to\n+`true` in a template, then indices can be automatically created using that\n+template even if auto-creation of indices is disabled via\n+`actions.auto_create_index`. If set to `false`, then indices matching the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "421679d02c310eb2e6f5f7498b000f8deb404f55"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzA3MjIwOnYy", "diffSide": "RIGHT", "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/AutoCreateIndexIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMTowMTozOVrOHoKgug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjozMjozM1rOHoNY6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3NzMwNg==", "bodyText": "Maybe distribution/archives/integ-test-zip is a better place for this test class? Given that it doesn't extend HttpSmokeTestCase and this test class doesn't seem to require to start a node with special settings or plugins.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r511877306", "createdAt": "2020-10-26T11:01:39Z", "author": {"login": "martijnvg"}, "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/AutoCreateIndexIT.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.http;\n+\n+import org.elasticsearch.action.support.AutoCreateIndex;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class AutoCreateIndexIT extends ESRestTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd0f84799db02991f1fa84342288354d32fdc03"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkyNDQ1Ng==", "bodyText": "I'm honestly not sure. I tried before to find out where is the \"correct\" place for REST tests, but couldn't get a clear answer. I think I'll leave this test alone and start an email thread about it. I feel that it ought to be easier to say where a REST test should live.", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r511924456", "createdAt": "2020-10-26T12:32:33Z", "author": {"login": "pugnascotia"}, "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/AutoCreateIndexIT.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.http;\n+\n+import org.elasticsearch.action.support.AutoCreateIndex;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class AutoCreateIndexIT extends ESRestTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3NzMwNg=="}, "originalCommit": {"oid": "0fd0f84799db02991f1fa84342288354d32fdc03"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1847, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}