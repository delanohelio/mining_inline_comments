{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NDUyNzYz", "number": 62275, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1NTozOFrOEjEhHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozNTo1OFrOEzwQJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjA5NjI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1NTozOFrOHRObDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxODowMlrOHRTUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNDE0Mg==", "bodyText": "Is there a reason we cannot just always return NO_UNASSIGNED_PRIMARIES? Looks like we can avoid the dependency on debug in this method.", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487824142", "createdAt": "2020-09-14T10:55:38Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,53 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final boolean debug = allocation.debugDecision();\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return debug ? NO_UNASSIGNED_PRIMARIES : Decision.NO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDQwOQ==", "bodyText": "++ that works as far as I can tell", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487904409", "createdAt": "2020-09-14T13:18:02Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,53 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final boolean debug = allocation.debugDecision();\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return debug ? NO_UNASSIGNED_PRIMARIES : Decision.NO;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNDE0Mg=="}, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjEwNDU0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1ODowN1rOHROf5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1ODowN1rOHROf5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNTM4MQ==", "bodyText": "Add\n// fall-through\nto signal that fall through is intended.", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487825381", "createdAt": "2020-09-14T10:58:07Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,53 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final boolean debug = allocation.debugDecision();\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return debug ? NO_UNASSIGNED_PRIMARIES : Decision.NO;\n+                }\n+                // check if there are initializing primaries that don't have a relocatingNodeId entry.\n+                if (routingNodes.hasInactivePrimaries()) {\n+                    return debug ? NO_INACTIVE_PRIMARIES : Decision.NO;\n+                }\n+                return debug ? YES_ALL_PRIMARIES_ACTIVE : Decision.YES;\n+            case INDICES_ALL_ACTIVE:\n+                // check if there are unassigned shards.\n+                if (routingNodes.hasUnassignedShards()) {\n+                    return debug ? NO_UNASSIGNED_SHARDS : Decision.NO;\n+                }\n+                // in case all indices are assigned, are there initializing shards which\n+                // are not relocating?\n+                if (routingNodes.hasInactiveShards()) {\n+                    return debug ? NO_INACTIVE_SHARDS : Decision.NO;\n+                }\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjEwNjgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1ODo0NlrOHROhPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMzozM1rOHRTjiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNTcyNw==", "bodyText": "I wonder if this fits better into the switch now in a default block?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487825727", "createdAt": "2020-09-14T10:58:46Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,53 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final boolean debug = allocation.debugDecision();\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return debug ? NO_UNASSIGNED_PRIMARIES : Decision.NO;\n+                }\n+                // check if there are initializing primaries that don't have a relocatingNodeId entry.\n+                if (routingNodes.hasInactivePrimaries()) {\n+                    return debug ? NO_INACTIVE_PRIMARIES : Decision.NO;\n+                }\n+                return debug ? YES_ALL_PRIMARIES_ACTIVE : Decision.YES;\n+            case INDICES_ALL_ACTIVE:\n+                // check if there are unassigned shards.\n+                if (routingNodes.hasUnassignedShards()) {\n+                    return debug ? NO_UNASSIGNED_SHARDS : Decision.NO;\n+                }\n+                // in case all indices are assigned, are there initializing shards which\n+                // are not relocating?\n+                if (routingNodes.hasInactiveShards()) {\n+                    return debug ? NO_INACTIVE_SHARDS : Decision.NO;\n+                }\n         }\n-        // type == Type.ALWAYS\n-        return allocation.decision(Decision.YES, NAME, \"all shards are active\");\n+        // all shards active from above or type == Type.ALWAYS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwODIzMg==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487908232", "createdAt": "2020-09-14T13:23:33Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,53 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final boolean debug = allocation.debugDecision();\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return debug ? NO_UNASSIGNED_PRIMARIES : Decision.NO;\n+                }\n+                // check if there are initializing primaries that don't have a relocatingNodeId entry.\n+                if (routingNodes.hasInactivePrimaries()) {\n+                    return debug ? NO_INACTIVE_PRIMARIES : Decision.NO;\n+                }\n+                return debug ? YES_ALL_PRIMARIES_ACTIVE : Decision.YES;\n+            case INDICES_ALL_ACTIVE:\n+                // check if there are unassigned shards.\n+                if (routingNodes.hasUnassignedShards()) {\n+                    return debug ? NO_UNASSIGNED_SHARDS : Decision.NO;\n+                }\n+                // in case all indices are assigned, are there initializing shards which\n+                // are not relocating?\n+                if (routingNodes.hasInactiveShards()) {\n+                    return debug ? NO_INACTIVE_SHARDS : Decision.NO;\n+                }\n         }\n-        // type == Type.ALWAYS\n-        return allocation.decision(Decision.YES, NAME, \"all shards are active\");\n+        // all shards active from above or type == Type.ALWAYS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNTcyNw=="}, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI3MzU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0OTo1MlrOHRQFBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMzoxMFrOHRTidw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MTI3MQ==", "bodyText": "Rather than inline the debug flag switch, would it be possible to use a supplier-style (perhaps a function, depending on input) just like is done for logging? So that it would be either:\nallocation.decision(Decision.NO, NAME, \"......[%d]...[%s]\", a -> a.args(maxRetry, unassignedInfo.toString()))\n\nor\nallocation.decision(Decision.NO, NAME, res -> debugDecision(res, unassignedInfo, numFailedAllcations, maxRetry))", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487851271", "createdAt": "2020-09-14T11:49:52Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "diffHunk": "@@ -41,27 +41,36 @@\n \n     public static final String NAME = \"max_retry\";\n \n+    private static final Decision YES_NO_FAILURES = Decision.single(Decision.Type.YES, NAME, \"shard has no previous failures\");\n+\n     @Override\n     public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {\n         final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();\n         final Decision decision;\n-        if (unassignedInfo != null && unassignedInfo.getNumFailedAllocations() > 0) {\n+        final boolean debug = allocation.debugDecision();\n+        final int numFailedAllocations = unassignedInfo == null ? 0 : unassignedInfo.getNumFailedAllocations();\n+        if (numFailedAllocations > 0) {\n             final IndexMetadata indexMetadata = allocation.metadata().getIndexSafe(shardRouting.index());\n             final int maxRetry = SETTING_ALLOCATION_MAX_RETRY.get(indexMetadata.getSettings());\n-            if (unassignedInfo.getNumFailedAllocations() >= maxRetry) {\n-                decision = allocation.decision(Decision.NO, NAME, \"shard has exceeded the maximum number of retries [%d] on \" +\n-                    \"failed allocation attempts - manually call [/_cluster/reroute?retry_failed=true] to retry, [%s]\",\n-                    maxRetry, unassignedInfo.toString());\n-            } else {\n-                decision = allocation.decision(Decision.YES, NAME, \"shard has failed allocating [%d] times but [%d] retries are allowed\",\n-                    unassignedInfo.getNumFailedAllocations(), maxRetry);\n-            }\n+            final Decision res = numFailedAllocations >= maxRetry ? Decision.NO : Decision.YES;\n+            decision = debug ? debugDecision(res, unassignedInfo, numFailedAllocations, maxRetry) : res;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNzk1OQ==", "bodyText": "I guess technically yes, but it looks a lot more complicated and won't inline as well. I mean even for logging we often use\ne.g. if (logger.isTraceEnabled()) {because the suppliers aren't free as well (especially when they capture a bunch of vars?).", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487907959", "createdAt": "2020-09-14T13:23:10Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "diffHunk": "@@ -41,27 +41,36 @@\n \n     public static final String NAME = \"max_retry\";\n \n+    private static final Decision YES_NO_FAILURES = Decision.single(Decision.Type.YES, NAME, \"shard has no previous failures\");\n+\n     @Override\n     public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {\n         final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();\n         final Decision decision;\n-        if (unassignedInfo != null && unassignedInfo.getNumFailedAllocations() > 0) {\n+        final boolean debug = allocation.debugDecision();\n+        final int numFailedAllocations = unassignedInfo == null ? 0 : unassignedInfo.getNumFailedAllocations();\n+        if (numFailedAllocations > 0) {\n             final IndexMetadata indexMetadata = allocation.metadata().getIndexSafe(shardRouting.index());\n             final int maxRetry = SETTING_ALLOCATION_MAX_RETRY.get(indexMetadata.getSettings());\n-            if (unassignedInfo.getNumFailedAllocations() >= maxRetry) {\n-                decision = allocation.decision(Decision.NO, NAME, \"shard has exceeded the maximum number of retries [%d] on \" +\n-                    \"failed allocation attempts - manually call [/_cluster/reroute?retry_failed=true] to retry, [%s]\",\n-                    maxRetry, unassignedInfo.toString());\n-            } else {\n-                decision = allocation.decision(Decision.YES, NAME, \"shard has failed allocating [%d] times but [%d] retries are allowed\",\n-                    unassignedInfo.getNumFailedAllocations(), maxRetry);\n-            }\n+            final Decision res = numFailedAllocations >= maxRetry ? Decision.NO : Decision.YES;\n+            decision = debug ? debugDecision(res, unassignedInfo, numFailedAllocations, maxRetry) : res;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MTI3MQ=="}, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI3Njc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1MDo0NFrOHRQG3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNzoxN1rOHRTSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MTc0Mg==", "bodyText": "I wonder if it was just as good (or better) to just extract the non-happy path here out into a method of its own?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487851742", "createdAt": "2020-09-14T11:50:44Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "diffHunk": "@@ -41,27 +41,36 @@\n \n     public static final String NAME = \"max_retry\";\n \n+    private static final Decision YES_NO_FAILURES = Decision.single(Decision.Type.YES, NAME, \"shard has no previous failures\");\n+\n     @Override\n     public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {\n         final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();\n         final Decision decision;\n-        if (unassignedInfo != null && unassignedInfo.getNumFailedAllocations() > 0) {\n+        final boolean debug = allocation.debugDecision();\n+        final int numFailedAllocations = unassignedInfo == null ? 0 : unassignedInfo.getNumFailedAllocations();\n+        if (numFailedAllocations > 0) {\n             final IndexMetadata indexMetadata = allocation.metadata().getIndexSafe(shardRouting.index());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzkzMQ==", "bodyText": "Sure why not, certainly fits in with the theme of this PR :)", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487903931", "createdAt": "2020-09-14T13:17:17Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "diffHunk": "@@ -41,27 +41,36 @@\n \n     public static final String NAME = \"max_retry\";\n \n+    private static final Decision YES_NO_FAILURES = Decision.single(Decision.Type.YES, NAME, \"shard has no previous failures\");\n+\n     @Override\n     public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {\n         final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();\n         final Decision decision;\n-        if (unassignedInfo != null && unassignedInfo.getNumFailedAllocations() > 0) {\n+        final boolean debug = allocation.debugDecision();\n+        final int numFailedAllocations = unassignedInfo == null ? 0 : unassignedInfo.getNumFailedAllocations();\n+        if (numFailedAllocations > 0) {\n             final IndexMetadata indexMetadata = allocation.metadata().getIndexSafe(shardRouting.index());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MTc0Mg=="}, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI3ODk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1MToyNFrOHRQIKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxMzozOFrOHRTJGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MjA3NQ==", "bodyText": "I am not sure we need to switch on debug for purely constant decisions?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487852075", "createdAt": "2020-09-14T11:51:24Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "diffHunk": "@@ -41,27 +41,36 @@\n \n     public static final String NAME = \"max_retry\";\n \n+    private static final Decision YES_NO_FAILURES = Decision.single(Decision.Type.YES, NAME, \"shard has no previous failures\");\n+\n     @Override\n     public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {\n         final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();\n         final Decision decision;\n-        if (unassignedInfo != null && unassignedInfo.getNumFailedAllocations() > 0) {\n+        final boolean debug = allocation.debugDecision();\n+        final int numFailedAllocations = unassignedInfo == null ? 0 : unassignedInfo.getNumFailedAllocations();\n+        if (numFailedAllocations > 0) {\n             final IndexMetadata indexMetadata = allocation.metadata().getIndexSafe(shardRouting.index());\n             final int maxRetry = SETTING_ALLOCATION_MAX_RETRY.get(indexMetadata.getSettings());\n-            if (unassignedInfo.getNumFailedAllocations() >= maxRetry) {\n-                decision = allocation.decision(Decision.NO, NAME, \"shard has exceeded the maximum number of retries [%d] on \" +\n-                    \"failed allocation attempts - manually call [/_cluster/reroute?retry_failed=true] to retry, [%s]\",\n-                    maxRetry, unassignedInfo.toString());\n-            } else {\n-                decision = allocation.decision(Decision.YES, NAME, \"shard has failed allocating [%d] times but [%d] retries are allowed\",\n-                    unassignedInfo.getNumFailedAllocations(), maxRetry);\n-            }\n+            final Decision res = numFailedAllocations >= maxRetry ? Decision.NO : Decision.YES;\n+            decision = debug ? debugDecision(res, unassignedInfo, numFailedAllocations, maxRetry) : res;\n         } else {\n-            decision = allocation.decision(Decision.YES, NAME, \"shard has no previous failures\");\n+            decision = debug ? YES_NO_FAILURES : Decision.YES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMTQ2Ng==", "bodyText": "I looked into this and I think no we don't, we seem to only be using the full explanation in the explain allocation request -> will adjust accordingly", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r487901466", "createdAt": "2020-09-14T13:13:38Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java", "diffHunk": "@@ -41,27 +41,36 @@\n \n     public static final String NAME = \"max_retry\";\n \n+    private static final Decision YES_NO_FAILURES = Decision.single(Decision.Type.YES, NAME, \"shard has no previous failures\");\n+\n     @Override\n     public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {\n         final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();\n         final Decision decision;\n-        if (unassignedInfo != null && unassignedInfo.getNumFailedAllocations() > 0) {\n+        final boolean debug = allocation.debugDecision();\n+        final int numFailedAllocations = unassignedInfo == null ? 0 : unassignedInfo.getNumFailedAllocations();\n+        if (numFailedAllocations > 0) {\n             final IndexMetadata indexMetadata = allocation.metadata().getIndexSafe(shardRouting.index());\n             final int maxRetry = SETTING_ALLOCATION_MAX_RETRY.get(indexMetadata.getSettings());\n-            if (unassignedInfo.getNumFailedAllocations() >= maxRetry) {\n-                decision = allocation.decision(Decision.NO, NAME, \"shard has exceeded the maximum number of retries [%d] on \" +\n-                    \"failed allocation attempts - manually call [/_cluster/reroute?retry_failed=true] to retry, [%s]\",\n-                    maxRetry, unassignedInfo.toString());\n-            } else {\n-                decision = allocation.decision(Decision.YES, NAME, \"shard has failed allocating [%d] times but [%d] retries are allowed\",\n-                    unassignedInfo.getNumFailedAllocations(), maxRetry);\n-            }\n+            final Decision res = numFailedAllocations >= maxRetry ? Decision.NO : Decision.YES;\n+            decision = debug ? debugDecision(res, unassignedInfo, numFailedAllocations, maxRetry) : res;\n         } else {\n-            decision = allocation.decision(Decision.YES, NAME, \"shard has no previous failures\");\n+            decision = debug ? YES_NO_FAILURES : Decision.YES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MjA3NQ=="}, "originalCommit": {"oid": "99019b353fa4bc462a92a5b1cdc1b834c469319b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA3MDUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0Mjo0N1rOHUNspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjowMjoyMFrOHUTI8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1Nzk4OQ==", "bodyText": "I think it would be nice to add Decision.constant that still uses Decision.Single but avoids the trap of being able to specify parameters (or eagerly resolves the string if anyone do specify them).", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r490957989", "createdAt": "2020-09-18T13:42:47Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,55 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNDM4Ng==", "bodyText": "Actually, I'm starting to wonder how much point there even is in making the String creation in the existing Decision.single lazy? The memory savings probably aren't that massive they only affect debug anyway?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r491014386", "createdAt": "2020-09-18T15:08:22Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,55 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1Nzk4OQ=="}, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMjAyNQ==", "bodyText": "++, seems just resolving this early is not a big deal. It will resolve it anyway in both equals, hashCode and streaming write.", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r491032025", "createdAt": "2020-09-18T15:37:33Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,55 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1Nzk4OQ=="}, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0NzE1Mg==", "bodyText": "Perfect :) Made it eager serialize now, also makes the Decision object immutable in general :)", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r491047152", "createdAt": "2020-09-18T16:02:20Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,55 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1Nzk4OQ=="}, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA4MDE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/SameShardAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0NTowN1rOHUNyxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTowODozMFrOHURJQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1OTU1Nw==", "bodyText": "Maybe remove this variable that it is only used once?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r490959557", "createdAt": "2020-09-18T13:45:07Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/SameShardAllocationDecider.java", "diffHunk": "@@ -75,6 +78,7 @@ public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, Routing\n             return decision;\n         }\n         if (node.node() != null) {\n+            final boolean debug = allocation.debugDecision();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNDQ2NA==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r491014464", "createdAt": "2020-09-18T15:08:30Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/SameShardAllocationDecider.java", "diffHunk": "@@ -75,6 +78,7 @@ public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, Routing\n             return decision;\n         }\n         if (node.node() != null) {\n+            final boolean debug = allocation.debugDecision();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1OTU1Nw=="}, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjE2MDM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowNDowNFrOHUOkLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo0MToyMlrOHrLdTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MjIwNA==", "bodyText": "In AllocationDeciders we choose to early terminate no decisions, but only if the object is Decision.NO. I think we need to change that to check the underlying type if we return constants here.", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r490972204", "createdAt": "2020-09-18T14:04:04Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,55 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    @SuppressWarnings(\"fallthrough\")\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return NO_UNASSIGNED_PRIMARIES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0NzU0OQ==", "bodyText": "Fixed by checking decision type :) thanks for spotting this!", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r491047549", "createdAt": "2020-09-18T16:02:54Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,55 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    @SuppressWarnings(\"fallthrough\")\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return NO_UNASSIGNED_PRIMARIES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MjIwNA=="}, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzODU0Mg==", "bodyText": "I wonder if we can add a test that the early termination works in AllocationDeciders? At least one specific test with one specific example if making something that randomly exercises all decider NO decisions is too complicated.", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r515038542", "createdAt": "2020-10-30T11:41:22Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java", "diffHunk": "@@ -109,40 +110,55 @@ public Decision canRebalance(ShardRouting shardRouting, RoutingAllocation alloca\n         return canRebalance(allocation);\n     }\n \n+    private static final Decision YES_ALL_PRIMARIES_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all primary shards are active\");\n+\n+    private static final Decision YES_ALL_SHARDS_ACTIVE = Decision.single(Decision.Type.YES, NAME, \"all shards are active\");\n+\n+    private static final Decision NO_UNASSIGNED_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned primary shards and cluster setting [\"\n+                    + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE + \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_PRIMARIES = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive primary shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE + \"]\");\n+\n+    private static final Decision NO_UNASSIGNED_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has unassigned shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    private static final Decision NO_INACTIVE_SHARDS = Decision.single(Decision.Type.NO, NAME,\n+            \"the cluster has inactive shards and cluster setting [\" + CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE +\n+                    \"] is set to [\" + ClusterRebalanceType.INDICES_ALL_ACTIVE + \"]\");\n+\n+    @SuppressWarnings(\"fallthrough\")\n     @Override\n     public Decision canRebalance(RoutingAllocation allocation) {\n-        if (type == ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE) {\n-            // check if there are unassigned primaries.\n-            if ( allocation.routingNodes().hasUnassignedPrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // check if there are initializing primaries that don't have a relocatingNodeId entry.\n-            if ( allocation.routingNodes().hasInactivePrimaries() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive primary shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-\n-            return allocation.decision(Decision.YES, NAME, \"all primary shards are active\");\n-        }\n-        if (type == ClusterRebalanceType.INDICES_ALL_ACTIVE) {\n-            // check if there are unassigned shards.\n-            if (allocation.routingNodes().hasUnassignedShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has unassigned shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n-            // in case all indices are assigned, are there initializing shards which\n-            // are not relocating?\n-            if ( allocation.routingNodes().hasInactiveShards() ) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"the cluster has inactive shards and cluster setting [%s] is set to [%s]\",\n-                        CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, type);\n-            }\n+        final RoutingNodes routingNodes = allocation.routingNodes();\n+        switch (type) {\n+            case INDICES_PRIMARIES_ACTIVE:\n+                // check if there are unassigned primaries.\n+                if (routingNodes.hasUnassignedPrimaries()) {\n+                    return NO_UNASSIGNED_PRIMARIES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MjIwNA=="}, "originalCommit": {"oid": "6e772a0327072fff62e7fb11b212d18b86b0b7db"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAzMzk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozNTo1OFrOHrLSDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo0NTozNlrOHrVDYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNTY2MQ==", "bodyText": "Is there a reason for not using [%s] for the settings key?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r515035661", "createdAt": "2020-10-30T11:35:58Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java", "diffHunk": "@@ -185,18 +188,31 @@ private Decision underCapacity(ShardRouting shardRouting, RoutingNode node, Rout\n             final int currentNodeCount = shardPerAttribute.get(node.node().getAttributes().get(awarenessAttribute));\n             final int maximumNodeCount = (shardCount + numberOfAttributes - 1) / numberOfAttributes; // ceil(shardCount/numberOfAttributes)\n             if (currentNodeCount > maximumNodeCount) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n-                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n-                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n-                        awarenessAttribute,\n-                        shardCount,\n-                        numberOfAttributes,\n-                        currentNodeCount,\n-                        maximumNodeCount);\n+                return debug ? debugNoTooManyCopies(shardCount, awarenessAttribute, numberOfAttributes, currentNodeCount, maximumNodeCount)\n+                        : Decision.NO;\n             }\n         }\n \n-        return allocation.decision(Decision.YES, NAME, \"node meets all awareness attribute requirements\");\n+        return YES_ALL_MET;\n+    }\n+\n+    private static Decision debugNoTooManyCopies(int shardCount, String awarenessAttribute, int numberOfAttributes, int currentNodeCount,\n+                                                 int maximumNodeCount) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n+                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n+                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n+                awarenessAttribute,\n+                shardCount,\n+                numberOfAttributes,\n+                currentNodeCount,\n+                maximumNodeCount);\n+    }\n+\n+    private static Decision debugNoMissingAttribute(String awarenessAttribute, List<String> awarenessAttributes) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"node does not contain the awareness attribute [%s]; required attributes cluster setting [\"\n+                        + CLUSTER_ROUTING_ALLOCATION_AWARENESS_ATTRIBUTE_SETTING.getKey() + \"=%s]\", awarenessAttribute,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a59791711df64248ce2d2dc153fc5ab2d98479a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4NDc1Mg==", "bodyText": "I figured if we're already optimizing, why not just make this compile to one string constant instead of a constant format replacement", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r515084752", "createdAt": "2020-10-30T13:10:38Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java", "diffHunk": "@@ -185,18 +188,31 @@ private Decision underCapacity(ShardRouting shardRouting, RoutingNode node, Rout\n             final int currentNodeCount = shardPerAttribute.get(node.node().getAttributes().get(awarenessAttribute));\n             final int maximumNodeCount = (shardCount + numberOfAttributes - 1) / numberOfAttributes; // ceil(shardCount/numberOfAttributes)\n             if (currentNodeCount > maximumNodeCount) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n-                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n-                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n-                        awarenessAttribute,\n-                        shardCount,\n-                        numberOfAttributes,\n-                        currentNodeCount,\n-                        maximumNodeCount);\n+                return debug ? debugNoTooManyCopies(shardCount, awarenessAttribute, numberOfAttributes, currentNodeCount, maximumNodeCount)\n+                        : Decision.NO;\n             }\n         }\n \n-        return allocation.decision(Decision.YES, NAME, \"node meets all awareness attribute requirements\");\n+        return YES_ALL_MET;\n+    }\n+\n+    private static Decision debugNoTooManyCopies(int shardCount, String awarenessAttribute, int numberOfAttributes, int currentNodeCount,\n+                                                 int maximumNodeCount) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n+                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n+                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n+                awarenessAttribute,\n+                shardCount,\n+                numberOfAttributes,\n+                currentNodeCount,\n+                maximumNodeCount);\n+    }\n+\n+    private static Decision debugNoMissingAttribute(String awarenessAttribute, List<String> awarenessAttributes) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"node does not contain the awareness attribute [%s]; required attributes cluster setting [\"\n+                        + CLUSTER_ROUTING_ALLOCATION_AWARENESS_ATTRIBUTE_SETTING.getKey() + \"=%s]\", awarenessAttribute,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNTY2MQ=="}, "originalCommit": {"oid": "8a59791711df64248ce2d2dc153fc5ab2d98479a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzOTkyOA==", "bodyText": "Sure, it just seems odd to have both forms (string concatenation and replacement) in the very same line?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r515139928", "createdAt": "2020-10-30T14:31:04Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java", "diffHunk": "@@ -185,18 +188,31 @@ private Decision underCapacity(ShardRouting shardRouting, RoutingNode node, Rout\n             final int currentNodeCount = shardPerAttribute.get(node.node().getAttributes().get(awarenessAttribute));\n             final int maximumNodeCount = (shardCount + numberOfAttributes - 1) / numberOfAttributes; // ceil(shardCount/numberOfAttributes)\n             if (currentNodeCount > maximumNodeCount) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n-                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n-                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n-                        awarenessAttribute,\n-                        shardCount,\n-                        numberOfAttributes,\n-                        currentNodeCount,\n-                        maximumNodeCount);\n+                return debug ? debugNoTooManyCopies(shardCount, awarenessAttribute, numberOfAttributes, currentNodeCount, maximumNodeCount)\n+                        : Decision.NO;\n             }\n         }\n \n-        return allocation.decision(Decision.YES, NAME, \"node meets all awareness attribute requirements\");\n+        return YES_ALL_MET;\n+    }\n+\n+    private static Decision debugNoTooManyCopies(int shardCount, String awarenessAttribute, int numberOfAttributes, int currentNodeCount,\n+                                                 int maximumNodeCount) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n+                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n+                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n+                awarenessAttribute,\n+                shardCount,\n+                numberOfAttributes,\n+                currentNodeCount,\n+                maximumNodeCount);\n+    }\n+\n+    private static Decision debugNoMissingAttribute(String awarenessAttribute, List<String> awarenessAttributes) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"node does not contain the awareness attribute [%s]; required attributes cluster setting [\"\n+                        + CLUSTER_ROUTING_ALLOCATION_AWARENESS_ATTRIBUTE_SETTING.getKey() + \"=%s]\", awarenessAttribute,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNTY2MQ=="}, "originalCommit": {"oid": "8a59791711df64248ce2d2dc153fc5ab2d98479a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0NDg0NA==", "bodyText": "Hmm replacement with a constant seems odd as well to me as well :) But I just realized that this is the debug path anyway, so I'm happy to change this back if you want.\nThat said, for better or for worse, we do have that pattern of mixing concatenation + replacement in a bunch of places for logging or for file name formatting in BlobstoreRepository for example?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r515144844", "createdAt": "2020-10-30T14:38:41Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java", "diffHunk": "@@ -185,18 +188,31 @@ private Decision underCapacity(ShardRouting shardRouting, RoutingNode node, Rout\n             final int currentNodeCount = shardPerAttribute.get(node.node().getAttributes().get(awarenessAttribute));\n             final int maximumNodeCount = (shardCount + numberOfAttributes - 1) / numberOfAttributes; // ceil(shardCount/numberOfAttributes)\n             if (currentNodeCount > maximumNodeCount) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n-                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n-                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n-                        awarenessAttribute,\n-                        shardCount,\n-                        numberOfAttributes,\n-                        currentNodeCount,\n-                        maximumNodeCount);\n+                return debug ? debugNoTooManyCopies(shardCount, awarenessAttribute, numberOfAttributes, currentNodeCount, maximumNodeCount)\n+                        : Decision.NO;\n             }\n         }\n \n-        return allocation.decision(Decision.YES, NAME, \"node meets all awareness attribute requirements\");\n+        return YES_ALL_MET;\n+    }\n+\n+    private static Decision debugNoTooManyCopies(int shardCount, String awarenessAttribute, int numberOfAttributes, int currentNodeCount,\n+                                                 int maximumNodeCount) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n+                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n+                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n+                awarenessAttribute,\n+                shardCount,\n+                numberOfAttributes,\n+                currentNodeCount,\n+                maximumNodeCount);\n+    }\n+\n+    private static Decision debugNoMissingAttribute(String awarenessAttribute, List<String> awarenessAttributes) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"node does not contain the awareness attribute [%s]; required attributes cluster setting [\"\n+                        + CLUSTER_ROUTING_ALLOCATION_AWARENESS_ATTRIBUTE_SETTING.getKey() + \"=%s]\", awarenessAttribute,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNTY2MQ=="}, "originalCommit": {"oid": "8a59791711df64248ce2d2dc153fc5ab2d98479a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1ODYxMQ==", "bodyText": "OK, leave it as is, I can certainly gladly accept it as is, was a small nit only.\n\ncompile to one string constant\n\nI think the getKey call prevents that? Though maybe the jit does something smart about this?", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r515158611", "createdAt": "2020-10-30T14:54:48Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java", "diffHunk": "@@ -185,18 +188,31 @@ private Decision underCapacity(ShardRouting shardRouting, RoutingNode node, Rout\n             final int currentNodeCount = shardPerAttribute.get(node.node().getAttributes().get(awarenessAttribute));\n             final int maximumNodeCount = (shardCount + numberOfAttributes - 1) / numberOfAttributes; // ceil(shardCount/numberOfAttributes)\n             if (currentNodeCount > maximumNodeCount) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n-                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n-                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n-                        awarenessAttribute,\n-                        shardCount,\n-                        numberOfAttributes,\n-                        currentNodeCount,\n-                        maximumNodeCount);\n+                return debug ? debugNoTooManyCopies(shardCount, awarenessAttribute, numberOfAttributes, currentNodeCount, maximumNodeCount)\n+                        : Decision.NO;\n             }\n         }\n \n-        return allocation.decision(Decision.YES, NAME, \"node meets all awareness attribute requirements\");\n+        return YES_ALL_MET;\n+    }\n+\n+    private static Decision debugNoTooManyCopies(int shardCount, String awarenessAttribute, int numberOfAttributes, int currentNodeCount,\n+                                                 int maximumNodeCount) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n+                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n+                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n+                awarenessAttribute,\n+                shardCount,\n+                numberOfAttributes,\n+                currentNodeCount,\n+                maximumNodeCount);\n+    }\n+\n+    private static Decision debugNoMissingAttribute(String awarenessAttribute, List<String> awarenessAttributes) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"node does not contain the awareness attribute [%s]; required attributes cluster setting [\"\n+                        + CLUSTER_ROUTING_ALLOCATION_AWARENESS_ATTRIBUTE_SETTING.getKey() + \"=%s]\", awarenessAttribute,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNTY2MQ=="}, "originalCommit": {"oid": "8a59791711df64248ce2d2dc153fc5ab2d98479a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5NTc0NQ==", "bodyText": "I think the getKey call prevents that? Though maybe the jit does something smart about this?\n\nI would have thought the JIT can figure this out, but it took only a few minutes with JitWatch to learn that this is not the case. This initially compiles to:\n  private static org.elasticsearch.cluster.routing.allocation.decider.Decision debugNoMissingAttribute(java.lang.String, java.util.List<java.lang.String>);\n    Code:\n       0: getstatic     #236                // Field org/elasticsearch/cluster/routing/allocation/decider/Decision$Type.NO:Lorg/elasticsearch/cluster/routing/allocation/decider/Decision$Type;\n       3: ldc           #241                // String awareness\n       5: getstatic     #7                  // Field CLUSTER_ROUTING_ALLOCATION_AWARENESS_ATTRIBUTE_SETTING:Lorg/elasticsearch/common/settings/Setting;\n       8: invokevirtual #257                // Method org/elasticsearch/common/settings/Setting.getKey:()Ljava/lang/String;\n      11: invokedynamic #259,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n      16: iconst_2\n      17: anewarray     #245                // class java/lang/Object\n      20: dup\n      21: iconst_0\n      22: aload_0\n      23: aastore\n      24: dup\n      25: iconst_1\n      26: aload_1\n\nand all that happens is that the getKey call is eventually inlined but the string concatenation still happens every time.\n-> I'll revert this before merging in a bit :)", "url": "https://github.com/elastic/elasticsearch/pull/62275#discussion_r515195745", "createdAt": "2020-10-30T15:45:36Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java", "diffHunk": "@@ -185,18 +188,31 @@ private Decision underCapacity(ShardRouting shardRouting, RoutingNode node, Rout\n             final int currentNodeCount = shardPerAttribute.get(node.node().getAttributes().get(awarenessAttribute));\n             final int maximumNodeCount = (shardCount + numberOfAttributes - 1) / numberOfAttributes; // ceil(shardCount/numberOfAttributes)\n             if (currentNodeCount > maximumNodeCount) {\n-                return allocation.decision(Decision.NO, NAME,\n-                        \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n-                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n-                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n-                        awarenessAttribute,\n-                        shardCount,\n-                        numberOfAttributes,\n-                        currentNodeCount,\n-                        maximumNodeCount);\n+                return debug ? debugNoTooManyCopies(shardCount, awarenessAttribute, numberOfAttributes, currentNodeCount, maximumNodeCount)\n+                        : Decision.NO;\n             }\n         }\n \n-        return allocation.decision(Decision.YES, NAME, \"node meets all awareness attribute requirements\");\n+        return YES_ALL_MET;\n+    }\n+\n+    private static Decision debugNoTooManyCopies(int shardCount, String awarenessAttribute, int numberOfAttributes, int currentNodeCount,\n+                                                 int maximumNodeCount) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"there are too many copies of the shard allocated to nodes with attribute [%s], there are [%d] total configured \" +\n+                        \"shard copies for this shard id and [%d] total attribute values, expected the allocated shard count per \" +\n+                        \"attribute [%d] to be less than or equal to the upper bound of the required number of shards per attribute [%d]\",\n+                awarenessAttribute,\n+                shardCount,\n+                numberOfAttributes,\n+                currentNodeCount,\n+                maximumNodeCount);\n+    }\n+\n+    private static Decision debugNoMissingAttribute(String awarenessAttribute, List<String> awarenessAttributes) {\n+        return Decision.single(Decision.Type.NO, NAME,\n+                \"node does not contain the awareness attribute [%s]; required attributes cluster setting [\"\n+                        + CLUSTER_ROUTING_ALLOCATION_AWARENESS_ATTRIBUTE_SETTING.getKey() + \"=%s]\", awarenessAttribute,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNTY2MQ=="}, "originalCommit": {"oid": "8a59791711df64248ce2d2dc153fc5ab2d98479a"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1516, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}