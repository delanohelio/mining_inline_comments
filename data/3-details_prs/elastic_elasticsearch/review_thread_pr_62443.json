{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3ODk0MDY5", "number": 62443, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo1OToxNFrOEkEbKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo1OToxNFrOEkEbKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjU2NjgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/RecoverySourcePruneMergePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo1OToxNFrOHSyQzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNjoxM1rOHS5MUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1OTkxNw==", "bodyText": "Maybe also make getMergeInstance() method abstract here? So that implementors have to think about whether that method should be implemented too?", "url": "https://github.com/elastic/elasticsearch/pull/62443#discussion_r489459917", "createdAt": "2020-09-16T13:59:14Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/index/engine/RecoverySourcePruneMergePolicy.java", "diffHunk": "@@ -212,38 +196,76 @@ public long ramBytesUsed() {\n             }\n         }\n \n-        private static class FilterStoredFieldsReader extends StoredFieldsReader {\n+        private abstract static class FilterStoredFieldsReader extends StoredFieldsReader {\n \n-            private final StoredFieldsReader fieldsReader;\n+            protected final StoredFieldsReader in;\n \n             FilterStoredFieldsReader(StoredFieldsReader fieldsReader) {\n-                this.fieldsReader = fieldsReader;\n+                this.in = fieldsReader;\n             }\n \n             @Override\n             public long ramBytesUsed() {\n-                return fieldsReader.ramBytesUsed();\n+                return in.ramBytesUsed();\n             }\n \n             @Override\n             public void close() throws IOException {\n-                fieldsReader.close();\n+                in.close();\n             }\n \n             @Override\n             public void visitDocument(int docID, StoredFieldVisitor visitor) throws IOException {\n-                fieldsReader.visitDocument(docID, visitor);\n+                in.visitDocument(docID, visitor);\n             }\n \n             @Override\n-            public StoredFieldsReader clone() {\n-                return fieldsReader.clone();\n-            }\n+            public abstract StoredFieldsReader clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db13f2a879594aadc345ace8e016e5860a51830"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzQ1OQ==", "bodyText": "The consensus on Lucene is that FilterXXX classes should not override methods that have a default implementation in the base class (e.g. FilterLeafReader doesn't override LeafReader#postings), so I tried to be consistent.", "url": "https://github.com/elastic/elasticsearch/pull/62443#discussion_r489573459", "createdAt": "2020-09-16T16:36:13Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/engine/RecoverySourcePruneMergePolicy.java", "diffHunk": "@@ -212,38 +196,76 @@ public long ramBytesUsed() {\n             }\n         }\n \n-        private static class FilterStoredFieldsReader extends StoredFieldsReader {\n+        private abstract static class FilterStoredFieldsReader extends StoredFieldsReader {\n \n-            private final StoredFieldsReader fieldsReader;\n+            protected final StoredFieldsReader in;\n \n             FilterStoredFieldsReader(StoredFieldsReader fieldsReader) {\n-                this.fieldsReader = fieldsReader;\n+                this.in = fieldsReader;\n             }\n \n             @Override\n             public long ramBytesUsed() {\n-                return fieldsReader.ramBytesUsed();\n+                return in.ramBytesUsed();\n             }\n \n             @Override\n             public void close() throws IOException {\n-                fieldsReader.close();\n+                in.close();\n             }\n \n             @Override\n             public void visitDocument(int docID, StoredFieldVisitor visitor) throws IOException {\n-                fieldsReader.visitDocument(docID, visitor);\n+                in.visitDocument(docID, visitor);\n             }\n \n             @Override\n-            public StoredFieldsReader clone() {\n-                return fieldsReader.clone();\n-            }\n+            public abstract StoredFieldsReader clone();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1OTkxNw=="}, "originalCommit": {"oid": "0db13f2a879594aadc345ace8e016e5860a51830"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1467, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}