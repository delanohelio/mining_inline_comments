{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDE3Njgx", "number": 59721, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxMjo0MFrOEPh3cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1ODoyMVrOEPpKkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE4OTYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/LongScriptFieldScript.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxMjo0MFrOGzSc-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzozNTowN1rOGzTP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjg5MQ==", "bodyText": "does it need to be protected? Also maybe rename to something like collectValue ? I find it weird to call add against the script itself", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456432891", "createdAt": "2020-07-17T13:12:40Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/LongScriptFieldScript.java", "diffHunk": "@@ -32,14 +32,47 @@\n     }\n \n     public interface LeafFactory {\n-        LongScriptFieldScript newInstance(LeafReaderContext ctx, LongConsumer sync) throws IOException;\n+        LongScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private final LongConsumer sync;\n+    private long[] values = new long[1];\n+    private int count;\n \n-    public LongScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx, LongConsumer sync) {\n+    public LongScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n-        this.sync = sync;\n+    }\n+\n+    /**\n+     * Execute the script for the provided {@code docId}.\n+     */\n+    public final void runForDoc(int docId) {\n+        count = 0;\n+        setDocument(docId);\n+        execute();\n+    }\n+\n+    /**\n+     * Values from the last time {@link #runForDoc(int)} was called. This array\n+     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n+     * It is also oversized and will contain garbage at all indices at and\n+     * above {@link #count()}.\n+     */\n+    public final long[] values() {\n+        return values;\n+    }\n+\n+    /**\n+     * The number of results produced the last time {@link #runForDoc(int)} was called.\n+     */\n+    public final int count() {\n+        return count;\n+    }\n+\n+    protected final void add(long v) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0NTkxMg==", "bodyText": "does it need to be protected?\n\nI thought so, but I'll take a look.\n\nAlso maybe rename to something like collectValue\n\n\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456445912", "createdAt": "2020-07-17T13:35:07Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/LongScriptFieldScript.java", "diffHunk": "@@ -32,14 +32,47 @@\n     }\n \n     public interface LeafFactory {\n-        LongScriptFieldScript newInstance(LeafReaderContext ctx, LongConsumer sync) throws IOException;\n+        LongScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private final LongConsumer sync;\n+    private long[] values = new long[1];\n+    private int count;\n \n-    public LongScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx, LongConsumer sync) {\n+    public LongScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n-        this.sync = sync;\n+    }\n+\n+    /**\n+     * Execute the script for the provided {@code docId}.\n+     */\n+    public final void runForDoc(int docId) {\n+        count = 0;\n+        setDocument(docId);\n+        execute();\n+    }\n+\n+    /**\n+     * Values from the last time {@link #runForDoc(int)} was called. This array\n+     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n+     * It is also oversized and will contain garbage at all indices at and\n+     * above {@link #count()}.\n+     */\n+    public final long[] values() {\n+        return values;\n+    }\n+\n+    /**\n+     * The number of results produced the last time {@link #runForDoc(int)} was called.\n+     */\n+    public final int count() {\n+        return count;\n+    }\n+\n+    protected final void add(long v) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjg5MQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE5NjU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongDocValues.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNDoyOFrOGzSg4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0MDowM1rOGzTa8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzg4OQ==", "bodyText": "you can use SortingNumericDocValues?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456433889", "createdAt": "2020-07-17T13:14:28Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongDocValues.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.elasticsearch.index.fielddata.AbstractSortedNumericDocValues;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+public final class ScriptLongDocValues extends AbstractSortedNumericDocValues {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0Njc3Nw==", "bodyText": "It'd force me to copy the longs from one array to the other rather than just sort. We already have to copy string because of BytesRef vs String stuff. But here I don't have to copy unless I want to.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456446777", "createdAt": "2020-07-17T13:36:37Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongDocValues.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.elasticsearch.index.fielddata.AbstractSortedNumericDocValues;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+public final class ScriptLongDocValues extends AbstractSortedNumericDocValues {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzg4OQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0ODc1Mw==", "bodyText": "I see, makes sense then", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456448753", "createdAt": "2020-07-17T13:40:03Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongDocValues.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.elasticsearch.index.fielddata.AbstractSortedNumericDocValues;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+public final class ScriptLongDocValues extends AbstractSortedNumericDocValues {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzg4OQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIwMDExOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNToyN1rOGzSjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNToyN1rOGzSjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDQzMw==", "bodyText": "For now we need to the same as I proposed in #59762 so that we can carry the params around. That will go away once we can change the signature of fielddataBuilder", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456434433", "createdAt": "2020-07-17T13:15:27Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIwMjY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNjoxNVrOGzSkrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzowNToxMFrOGzajFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDg2MQ==", "bodyText": "if you carry the script around you can remove this TODO :)", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456434861", "createdAt": "2020-07-17T13:16:15Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;\n+\n+        public Builder(LongScriptFieldScript.Factory scriptFactory) {\n+            this.scriptFactory = scriptFactory;\n+        }\n+\n+        @Override\n+        public ScriptLongFieldData build(\n+            IndexSettings indexSettings,\n+            MappedFieldType fieldType,\n+            IndexFieldDataCache cache,\n+            CircuitBreakerService breakerService,\n+            MapperService mapperService\n+        ) {\n+            return new ScriptLongFieldData(indexSettings.getIndex(), fieldType.name(), scriptFactory);\n+        }\n+    }\n+\n+    private final Index index;\n+    private final String fieldName;\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+    private final SetOnce<LongScriptFieldScript.LeafFactory> leafFactory = new SetOnce<>();\n+\n+    private ScriptLongFieldData(Index index, String fieldName, LongScriptFieldScript.Factory scriptFactory) {\n+        this.index = index;\n+        this.fieldName = fieldName;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    public void setSearchLookup(SearchLookup searchLookup) {\n+        // TODO wire the params from the mappings definition, we don't parse them yet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2NTUyNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456565525", "createdAt": "2020-07-17T17:05:10Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;\n+\n+        public Builder(LongScriptFieldScript.Factory scriptFactory) {\n+            this.scriptFactory = scriptFactory;\n+        }\n+\n+        @Override\n+        public ScriptLongFieldData build(\n+            IndexSettings indexSettings,\n+            MappedFieldType fieldType,\n+            IndexFieldDataCache cache,\n+            CircuitBreakerService breakerService,\n+            MapperService mapperService\n+        ) {\n+            return new ScriptLongFieldData(indexSettings.getIndex(), fieldType.name(), scriptFactory);\n+        }\n+    }\n+\n+    private final Index index;\n+    private final String fieldName;\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+    private final SetOnce<LongScriptFieldScript.LeafFactory> leafFactory = new SetOnce<>();\n+\n+    private ScriptLongFieldData(Index index, String fieldName, LongScriptFieldScript.Factory scriptFactory) {\n+        this.index = index;\n+        this.fieldName = fieldName;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    public void setSearchLookup(SearchLookup searchLookup) {\n+        // TODO wire the params from the mappings definition, we don't parse them yet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDg2MQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIwNjM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNzoyOVrOGzSnBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzowNjoxOVrOGzalUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNTQ2Mw==", "bodyText": "another change that I lost somehow, but this should rather be ExceptionsHelper#convertToElastic . Can you make the same change in the binary one too?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456435463", "createdAt": "2020-07-17T13:17:29Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;\n+\n+        public Builder(LongScriptFieldScript.Factory scriptFactory) {\n+            this.scriptFactory = scriptFactory;\n+        }\n+\n+        @Override\n+        public ScriptLongFieldData build(\n+            IndexSettings indexSettings,\n+            MappedFieldType fieldType,\n+            IndexFieldDataCache cache,\n+            CircuitBreakerService breakerService,\n+            MapperService mapperService\n+        ) {\n+            return new ScriptLongFieldData(indexSettings.getIndex(), fieldType.name(), scriptFactory);\n+        }\n+    }\n+\n+    private final Index index;\n+    private final String fieldName;\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+    private final SetOnce<LongScriptFieldScript.LeafFactory> leafFactory = new SetOnce<>();\n+\n+    private ScriptLongFieldData(Index index, String fieldName, LongScriptFieldScript.Factory scriptFactory) {\n+        this.index = index;\n+        this.fieldName = fieldName;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    public void setSearchLookup(SearchLookup searchLookup) {\n+        // TODO wire the params from the mappings definition, we don't parse them yet\n+        this.leafFactory.set(scriptFactory.newFactory(Collections.emptyMap(), searchLookup));\n+    }\n+\n+    @Override\n+    public String getFieldName() {\n+        return fieldName;\n+    }\n+\n+    @Override\n+    public ValuesSourceType getValuesSourceType() {\n+        return CoreValuesSourceType.NUMERIC;\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData load(LeafReaderContext context) {\n+        try {\n+            return loadDirect(context);\n+        } catch (Exception e) {\n+            if (e instanceof ElasticsearchException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2NjA5Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456566096", "createdAt": "2020-07-17T17:06:19Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;\n+\n+        public Builder(LongScriptFieldScript.Factory scriptFactory) {\n+            this.scriptFactory = scriptFactory;\n+        }\n+\n+        @Override\n+        public ScriptLongFieldData build(\n+            IndexSettings indexSettings,\n+            MappedFieldType fieldType,\n+            IndexFieldDataCache cache,\n+            CircuitBreakerService breakerService,\n+            MapperService mapperService\n+        ) {\n+            return new ScriptLongFieldData(indexSettings.getIndex(), fieldType.name(), scriptFactory);\n+        }\n+    }\n+\n+    private final Index index;\n+    private final String fieldName;\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+    private final SetOnce<LongScriptFieldScript.LeafFactory> leafFactory = new SetOnce<>();\n+\n+    private ScriptLongFieldData(Index index, String fieldName, LongScriptFieldScript.Factory scriptFactory) {\n+        this.index = index;\n+        this.fieldName = fieldName;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    public void setSearchLookup(SearchLookup searchLookup) {\n+        // TODO wire the params from the mappings definition, we don't parse them yet\n+        this.leafFactory.set(scriptFactory.newFactory(Collections.emptyMap(), searchLookup));\n+    }\n+\n+    @Override\n+    public String getFieldName() {\n+        return fieldName;\n+    }\n+\n+    @Override\n+    public ValuesSourceType getValuesSourceType() {\n+        return CoreValuesSourceType.NUMERIC;\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData load(LeafReaderContext context) {\n+        try {\n+            return loadDirect(context);\n+        } catch (Exception e) {\n+            if (e instanceof ElasticsearchException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNTQ2Mw=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIwOTIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxODoxOVrOGzSovg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzowNzowMFrOGzamww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNTkwMg==", "bodyText": "this is not needed right?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456435902", "createdAt": "2020-07-17T13:18:19Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;\n+\n+        public Builder(LongScriptFieldScript.Factory scriptFactory) {\n+            this.scriptFactory = scriptFactory;\n+        }\n+\n+        @Override\n+        public ScriptLongFieldData build(\n+            IndexSettings indexSettings,\n+            MappedFieldType fieldType,\n+            IndexFieldDataCache cache,\n+            CircuitBreakerService breakerService,\n+            MapperService mapperService\n+        ) {\n+            return new ScriptLongFieldData(indexSettings.getIndex(), fieldType.name(), scriptFactory);\n+        }\n+    }\n+\n+    private final Index index;\n+    private final String fieldName;\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+    private final SetOnce<LongScriptFieldScript.LeafFactory> leafFactory = new SetOnce<>();\n+\n+    private ScriptLongFieldData(Index index, String fieldName, LongScriptFieldScript.Factory scriptFactory) {\n+        this.index = index;\n+        this.fieldName = fieldName;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    public void setSearchLookup(SearchLookup searchLookup) {\n+        // TODO wire the params from the mappings definition, we don't parse them yet\n+        this.leafFactory.set(scriptFactory.newFactory(Collections.emptyMap(), searchLookup));\n+    }\n+\n+    @Override\n+    public String getFieldName() {\n+        return fieldName;\n+    }\n+\n+    @Override\n+    public ValuesSourceType getValuesSourceType() {\n+        return CoreValuesSourceType.NUMERIC;\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData load(LeafReaderContext context) {\n+        try {\n+            return loadDirect(context);\n+        } catch (Exception e) {\n+            if (e instanceof ElasticsearchException) {\n+                throw (ElasticsearchException) e;\n+            } else {\n+                throw new ElasticsearchException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData loadDirect(LeafReaderContext context) throws IOException {\n+        return new ScriptLongLeafFieldData(new ScriptLongDocValues(leafFactory.get().newInstance(context)));\n+    }\n+\n+    @Override\n+    public NumericType getNumericType() {\n+        return NumericType.LONG;\n+    }\n+\n+    @Override\n+    protected boolean sortRequiresCustomComparator() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void clear() {}\n+\n+    @Override\n+    public Index index() {\n+        return index;\n+    }\n+\n+    public static class ScriptLongLeafFieldData implements LeafNumericFieldData {\n+        private final ScriptLongDocValues scriptBinaryDocValues;\n+\n+        ScriptLongLeafFieldData(ScriptLongDocValues scriptBinaryDocValues) {\n+            this.scriptBinaryDocValues = scriptBinaryDocValues;\n+        }\n+\n+        @Override\n+        public ScriptDocValues<?> getScriptValues() {\n+            return new ScriptDocValues.Longs(getLongValues());\n+        }\n+\n+        @Override\n+        public SortedBinaryDocValues getBytesValues() {\n+            return FieldData.toString(scriptBinaryDocValues);\n+        }\n+\n+        @Override\n+        public SortedNumericDoubleValues getDoubleValues() {\n+            return FieldData.castToDouble(getLongValues());\n+        }\n+\n+        @Override\n+        public SortedNumericDocValues getLongValues() {\n+            return scriptBinaryDocValues;\n+        }\n+\n+        @Override\n+        public long ramBytesUsed() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void close() {\n+\n+        }\n+    }\n+\n+    static class ScriptBinaryResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNjA0OQ==", "bodyText": "needs to be removed also in the binary one, it's unused :)", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456436049", "createdAt": "2020-07-17T13:18:36Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;\n+\n+        public Builder(LongScriptFieldScript.Factory scriptFactory) {\n+            this.scriptFactory = scriptFactory;\n+        }\n+\n+        @Override\n+        public ScriptLongFieldData build(\n+            IndexSettings indexSettings,\n+            MappedFieldType fieldType,\n+            IndexFieldDataCache cache,\n+            CircuitBreakerService breakerService,\n+            MapperService mapperService\n+        ) {\n+            return new ScriptLongFieldData(indexSettings.getIndex(), fieldType.name(), scriptFactory);\n+        }\n+    }\n+\n+    private final Index index;\n+    private final String fieldName;\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+    private final SetOnce<LongScriptFieldScript.LeafFactory> leafFactory = new SetOnce<>();\n+\n+    private ScriptLongFieldData(Index index, String fieldName, LongScriptFieldScript.Factory scriptFactory) {\n+        this.index = index;\n+        this.fieldName = fieldName;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    public void setSearchLookup(SearchLookup searchLookup) {\n+        // TODO wire the params from the mappings definition, we don't parse them yet\n+        this.leafFactory.set(scriptFactory.newFactory(Collections.emptyMap(), searchLookup));\n+    }\n+\n+    @Override\n+    public String getFieldName() {\n+        return fieldName;\n+    }\n+\n+    @Override\n+    public ValuesSourceType getValuesSourceType() {\n+        return CoreValuesSourceType.NUMERIC;\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData load(LeafReaderContext context) {\n+        try {\n+            return loadDirect(context);\n+        } catch (Exception e) {\n+            if (e instanceof ElasticsearchException) {\n+                throw (ElasticsearchException) e;\n+            } else {\n+                throw new ElasticsearchException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData loadDirect(LeafReaderContext context) throws IOException {\n+        return new ScriptLongLeafFieldData(new ScriptLongDocValues(leafFactory.get().newInstance(context)));\n+    }\n+\n+    @Override\n+    public NumericType getNumericType() {\n+        return NumericType.LONG;\n+    }\n+\n+    @Override\n+    protected boolean sortRequiresCustomComparator() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void clear() {}\n+\n+    @Override\n+    public Index index() {\n+        return index;\n+    }\n+\n+    public static class ScriptLongLeafFieldData implements LeafNumericFieldData {\n+        private final ScriptLongDocValues scriptBinaryDocValues;\n+\n+        ScriptLongLeafFieldData(ScriptLongDocValues scriptBinaryDocValues) {\n+            this.scriptBinaryDocValues = scriptBinaryDocValues;\n+        }\n+\n+        @Override\n+        public ScriptDocValues<?> getScriptValues() {\n+            return new ScriptDocValues.Longs(getLongValues());\n+        }\n+\n+        @Override\n+        public SortedBinaryDocValues getBytesValues() {\n+            return FieldData.toString(scriptBinaryDocValues);\n+        }\n+\n+        @Override\n+        public SortedNumericDoubleValues getDoubleValues() {\n+            return FieldData.castToDouble(getLongValues());\n+        }\n+\n+        @Override\n+        public SortedNumericDocValues getLongValues() {\n+            return scriptBinaryDocValues;\n+        }\n+\n+        @Override\n+        public long ramBytesUsed() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void close() {\n+\n+        }\n+    }\n+\n+    static class ScriptBinaryResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNTkwMg=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2NjQ2Nw==", "bodyText": "\ud83d\udc4d\nI remember looking at it and thinking \"this isn't used\" and then forgetting.....", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456566467", "createdAt": "2020-07-17T17:07:00Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptLongFieldData.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.fielddata.FieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.fielddata.IndexFieldDataCache;\n+import org.elasticsearch.index.fielddata.IndexNumericFieldData;\n+import org.elasticsearch.index.fielddata.LeafNumericFieldData;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.index.fielddata.SearchLookupAware;\n+import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class ScriptLongFieldData extends IndexNumericFieldData implements SearchLookupAware {\n+\n+    public static class Builder implements IndexFieldData.Builder {\n+\n+        private final LongScriptFieldScript.Factory scriptFactory;\n+\n+        public Builder(LongScriptFieldScript.Factory scriptFactory) {\n+            this.scriptFactory = scriptFactory;\n+        }\n+\n+        @Override\n+        public ScriptLongFieldData build(\n+            IndexSettings indexSettings,\n+            MappedFieldType fieldType,\n+            IndexFieldDataCache cache,\n+            CircuitBreakerService breakerService,\n+            MapperService mapperService\n+        ) {\n+            return new ScriptLongFieldData(indexSettings.getIndex(), fieldType.name(), scriptFactory);\n+        }\n+    }\n+\n+    private final Index index;\n+    private final String fieldName;\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+    private final SetOnce<LongScriptFieldScript.LeafFactory> leafFactory = new SetOnce<>();\n+\n+    private ScriptLongFieldData(Index index, String fieldName, LongScriptFieldScript.Factory scriptFactory) {\n+        this.index = index;\n+        this.fieldName = fieldName;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    public void setSearchLookup(SearchLookup searchLookup) {\n+        // TODO wire the params from the mappings definition, we don't parse them yet\n+        this.leafFactory.set(scriptFactory.newFactory(Collections.emptyMap(), searchLookup));\n+    }\n+\n+    @Override\n+    public String getFieldName() {\n+        return fieldName;\n+    }\n+\n+    @Override\n+    public ValuesSourceType getValuesSourceType() {\n+        return CoreValuesSourceType.NUMERIC;\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData load(LeafReaderContext context) {\n+        try {\n+            return loadDirect(context);\n+        } catch (Exception e) {\n+            if (e instanceof ElasticsearchException) {\n+                throw (ElasticsearchException) e;\n+            } else {\n+                throw new ElasticsearchException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ScriptLongLeafFieldData loadDirect(LeafReaderContext context) throws IOException {\n+        return new ScriptLongLeafFieldData(new ScriptLongDocValues(leafFactory.get().newInstance(context)));\n+    }\n+\n+    @Override\n+    public NumericType getNumericType() {\n+        return NumericType.LONG;\n+    }\n+\n+    @Override\n+    protected boolean sortRequiresCustomComparator() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void clear() {}\n+\n+    @Override\n+    public Index index() {\n+        return index;\n+    }\n+\n+    public static class ScriptLongLeafFieldData implements LeafNumericFieldData {\n+        private final ScriptLongDocValues scriptBinaryDocValues;\n+\n+        ScriptLongLeafFieldData(ScriptLongDocValues scriptBinaryDocValues) {\n+            this.scriptBinaryDocValues = scriptBinaryDocValues;\n+        }\n+\n+        @Override\n+        public ScriptDocValues<?> getScriptValues() {\n+            return new ScriptDocValues.Longs(getLongValues());\n+        }\n+\n+        @Override\n+        public SortedBinaryDocValues getBytesValues() {\n+            return FieldData.toString(scriptBinaryDocValues);\n+        }\n+\n+        @Override\n+        public SortedNumericDoubleValues getDoubleValues() {\n+            return FieldData.castToDouble(getLongValues());\n+        }\n+\n+        @Override\n+        public SortedNumericDocValues getLongValues() {\n+            return scriptBinaryDocValues;\n+        }\n+\n+        @Override\n+        public long ramBytesUsed() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void close() {\n+\n+        }\n+    }\n+\n+    static class ScriptBinaryResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNTkwMg=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIxNDA4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxOTo0MFrOGzSrrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzowODo1OVrOGzaqWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNjY1NQ==", "bodyText": "shall we add some way to not forget about overriding familyType for all the subclasses? Maybe we could override the method and make it call some other new abstract method?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456436655", "createdAt": "2020-07-17T13:19:40Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent.Params;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.TextSearchInfo;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n+\n+/**\n+ * Abstract base {@linkplain MappedFieldType} for scripted fields.\n+ */\n+abstract class AbstractScriptMappedFieldType extends MappedFieldType {\n+    protected final Script script;\n+\n+    AbstractScriptMappedFieldType(String name, Script script, Map<String, String> meta) {\n+        super(name, false, false, TextSearchInfo.NONE, meta);\n+        this.script = script;\n+    }\n+\n+    @Override\n+    public final String typeName() {\n+        return ScriptFieldMapper.CONTENT_TYPE;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNzA4OA==", "bodyText": "oh well I see below that you have runtimeType, so it would be enough to override familyTypeName and call runtimeType in there.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456437088", "createdAt": "2020-07-17T13:20:26Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent.Params;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.TextSearchInfo;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n+\n+/**\n+ * Abstract base {@linkplain MappedFieldType} for scripted fields.\n+ */\n+abstract class AbstractScriptMappedFieldType extends MappedFieldType {\n+    protected final Script script;\n+\n+    AbstractScriptMappedFieldType(String name, Script script, Map<String, String> meta) {\n+        super(name, false, false, TextSearchInfo.NONE, meta);\n+        this.script = script;\n+    }\n+\n+    @Override\n+    public final String typeName() {\n+        return ScriptFieldMapper.CONTENT_TYPE;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNjY1NQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2NzM4NA==", "bodyText": "Got it!", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456567384", "createdAt": "2020-07-17T17:08:59Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent.Params;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.TextSearchInfo;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n+\n+/**\n+ * Abstract base {@linkplain MappedFieldType} for scripted fields.\n+ */\n+abstract class AbstractScriptMappedFieldType extends MappedFieldType {\n+    protected final Script script;\n+\n+    AbstractScriptMappedFieldType(String name, Script script, Map<String, String> meta) {\n+        super(name, false, false, TextSearchInfo.NONE, meta);\n+        this.script = script;\n+    }\n+\n+    @Override\n+    public final String typeName() {\n+        return ScriptFieldMapper.CONTENT_TYPE;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNjY1NQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIyMDMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMToxNVrOGzSvRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzowOToxN1rOGzaq4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNzU3NA==", "bodyText": "use the existing constant from KeywordFieldMapper#CONTENT_TYPE?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456437574", "createdAt": "2020-07-17T13:21:15Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -31,27 +26,30 @@\n import org.elasticsearch.xpack.runtimefields.query.StringScriptFieldTermsQuery;\n import org.elasticsearch.xpack.runtimefields.query.StringScriptFieldWildcardQuery;\n \n-import java.io.IOException;\n import java.time.ZoneId;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n \n import static java.util.stream.Collectors.toSet;\n-import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n \n-public final class RuntimeKeywordMappedFieldType extends MappedFieldType {\n+public final class ScriptKeywordMappedFieldType extends AbstractScriptMappedFieldType {\n \n     private final Script script;\n     private final StringScriptFieldScript.Factory scriptFactory;\n \n-    RuntimeKeywordMappedFieldType(String name, Script script, StringScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n-        super(name, false, false, TextSearchInfo.NONE, meta);\n+    ScriptKeywordMappedFieldType(String name, Script script, StringScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n         this.script = script;\n         this.scriptFactory = scriptFactory;\n     }\n \n+    @Override\n+    protected String runtimeType() {\n+        return \"keyword\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2NzUyMQ==", "bodyText": "I'm going to use the lookup that you built instead.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456567521", "createdAt": "2020-07-17T17:09:17Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -31,27 +26,30 @@\n import org.elasticsearch.xpack.runtimefields.query.StringScriptFieldTermsQuery;\n import org.elasticsearch.xpack.runtimefields.query.StringScriptFieldWildcardQuery;\n \n-import java.io.IOException;\n import java.time.ZoneId;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n \n import static java.util.stream.Collectors.toSet;\n-import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n \n-public final class RuntimeKeywordMappedFieldType extends MappedFieldType {\n+public final class ScriptKeywordMappedFieldType extends AbstractScriptMappedFieldType {\n \n     private final Script script;\n     private final StringScriptFieldScript.Factory scriptFactory;\n \n-    RuntimeKeywordMappedFieldType(String name, Script script, StringScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n-        super(name, false, false, TextSearchInfo.NONE, meta);\n+    ScriptKeywordMappedFieldType(String name, Script script, StringScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n         this.script = script;\n         this.scriptFactory = scriptFactory;\n     }\n \n+    @Override\n+    protected String runtimeType() {\n+        return \"keyword\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNzU3NA=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIyNDE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMjoxNlrOGzSxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzowOToyOVrOGzarOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODE3OA==", "bodyText": "I was making changes to the lookup as well in #59762 , let's use the constants from the existing mappers for their type?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456438178", "createdAt": "2020-07-17T13:22:16Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "diffHunk": "@@ -131,6 +125,27 @@ public ScriptFieldMapper build(BuilderContext context) {\n             );\n         }\n \n+        private MappedFieldType buildType(String fullName) {\n+            switch (runtimeType.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2NzYxMQ==", "bodyText": "I'll use your lookup, sure.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456567611", "createdAt": "2020-07-17T17:09:29Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "diffHunk": "@@ -131,6 +125,27 @@ public ScriptFieldMapper build(BuilderContext context) {\n             );\n         }\n \n+        private MappedFieldType buildType(String fullName) {\n+            switch (runtimeType.getValue()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODE3OA=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIyOTM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMzozOFrOGzS0pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1NTowOFrOGzd1Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODk1MA==", "bodyText": "should we introduce some way to not forget the check? like having this done in the base class, and define queries through new abstract methods?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456438950", "createdAt": "2020-07-17T13:23:38Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldType.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldTermQuery;\n+\n+import java.util.Map;\n+\n+public class ScriptLongMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptLongMappedFieldType(String name, Script script, LongScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return \"long\";\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        return value; // These should come back as a Long\n+    }\n+\n+    @Override\n+    public ScriptLongFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        // TODO once we get SearchLookup as an argument, we can already call scriptFactory.newFactory here and pass through the result\n+        return new ScriptLongFieldData.Builder(scriptFactory);\n+    }\n+\n+    private LongScriptFieldScript.LeafFactory leafFactory(QueryShardContext context) {\n+        return scriptFactory.newFactory(script.getParams(), context.lookup());\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2ODE0MA==", "bodyText": "That is tricky because not all subclasses will override all queries......\nI wonder if we can wait on this one until we have more subclasses.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456568140", "createdAt": "2020-07-17T17:10:31Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldType.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldTermQuery;\n+\n+import java.util.Map;\n+\n+public class ScriptLongMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptLongMappedFieldType(String name, Script script, LongScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return \"long\";\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        return value; // These should come back as a Long\n+    }\n+\n+    @Override\n+    public ScriptLongFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        // TODO once we get SearchLookup as an argument, we can already call scriptFactory.newFactory here and pass through the result\n+        return new ScriptLongFieldData.Builder(scriptFactory);\n+    }\n+\n+    private LongScriptFieldScript.LeafFactory leafFactory(QueryShardContext context) {\n+        return scriptFactory.newFactory(script.getParams(), context.lookup());\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODk1MA=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4MjEzOQ==", "bodyText": "I see, it is fine to wait. Though this will require us to extend every single query at least for this check and then call super? Maybe it is actually a reason to force overriding every query? Not sure though", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456582139", "createdAt": "2020-07-17T17:38:54Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldType.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldTermQuery;\n+\n+import java.util.Map;\n+\n+public class ScriptLongMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptLongMappedFieldType(String name, Script script, LongScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return \"long\";\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        return value; // These should come back as a Long\n+    }\n+\n+    @Override\n+    public ScriptLongFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        // TODO once we get SearchLookup as an argument, we can already call scriptFactory.newFactory here and pass through the result\n+        return new ScriptLongFieldData.Builder(scriptFactory);\n+    }\n+\n+    private LongScriptFieldScript.LeafFactory leafFactory(QueryShardContext context) {\n+        return scriptFactory.newFactory(script.getParams(), context.lookup());\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODk1MA=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4Nzg1NA==", "bodyText": "Me neither!\nI wonder if I could move this into the query ctor. It'd be a bit wonky, but I think it'd force the check fairly easilly.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456587854", "createdAt": "2020-07-17T17:50:10Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldType.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldTermQuery;\n+\n+import java.util.Map;\n+\n+public class ScriptLongMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptLongMappedFieldType(String name, Script script, LongScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return \"long\";\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        return value; // These should come back as a Long\n+    }\n+\n+    @Override\n+    public ScriptLongFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        // TODO once we get SearchLookup as an argument, we can already call scriptFactory.newFactory here and pass through the result\n+        return new ScriptLongFieldData.Builder(scriptFactory);\n+    }\n+\n+    private LongScriptFieldScript.LeafFactory leafFactory(QueryShardContext context) {\n+        return scriptFactory.newFactory(script.getParams(), context.lookup());\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODk1MA=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODc1NQ==", "bodyText": "know what? I am having second thoughts about this check and the way it is performed. We are going to fail on all shards which is not desirable. We should rather have a way to fail on the coordinating node, but I know that is hard. Maybe we should reconsider and discuss this?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456598755", "createdAt": "2020-07-17T18:11:40Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldType.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldTermQuery;\n+\n+import java.util.Map;\n+\n+public class ScriptLongMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptLongMappedFieldType(String name, Script script, LongScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return \"long\";\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        return value; // These should come back as a Long\n+    }\n+\n+    @Override\n+    public ScriptLongFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        // TODO once we get SearchLookup as an argument, we can already call scriptFactory.newFactory here and pass through the result\n+        return new ScriptLongFieldData.Builder(scriptFactory);\n+    }\n+\n+    private LongScriptFieldScript.LeafFactory leafFactory(QueryShardContext context) {\n+        return scriptFactory.newFactory(script.getParams(), context.lookup());\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODk1MA=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxOTMxMA==", "bodyText": "let's leave this for now, we will revisit this later", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456619310", "createdAt": "2020-07-17T18:55:08Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldType.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.lucene.search.Queries;\n+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldExistsQuery;\n+import org.elasticsearch.xpack.runtimefields.query.LongScriptFieldTermQuery;\n+\n+import java.util.Map;\n+\n+public class ScriptLongMappedFieldType extends AbstractScriptMappedFieldType {\n+    private final LongScriptFieldScript.Factory scriptFactory;\n+\n+    ScriptLongMappedFieldType(String name, Script script, LongScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, script, meta);\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    @Override\n+    protected String runtimeType() {\n+        return \"long\";\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        return value; // These should come back as a Long\n+    }\n+\n+    @Override\n+    public ScriptLongFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        // TODO once we get SearchLookup as an argument, we can already call scriptFactory.newFactory here and pass through the result\n+        return new ScriptLongFieldData.Builder(scriptFactory);\n+    }\n+\n+    private LongScriptFieldScript.LeafFactory leafFactory(QueryShardContext context) {\n+        return scriptFactory.newFactory(script.getParams(), context.lookup());\n+    }\n+\n+    @Override\n+    public Query existsQuery(QueryShardContext context) {\n+        checkAllowExpensiveQueries(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODk1MA=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIzMjM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractLongScriptFieldQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyNDoxM1rOGzS2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxMDo0MVrOGzatog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzOTM4OQ==", "bodyText": "Shall we make this a shared constant somewhere, and remove the TODO as that is what we will keep for the time being?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456439389", "createdAt": "2020-07-17T13:24:13Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractLongScriptFieldQuery.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * Abstract base class for building queries based on {@link StringScriptFieldScript}.\n+ */\n+abstract class AbstractLongScriptFieldQuery extends AbstractScriptFieldQuery {\n+    private final LongScriptFieldScript.LeafFactory leafFactory;\n+\n+    AbstractLongScriptFieldQuery(Script script, LongScriptFieldScript.LeafFactory leafFactory, String fieldName) {\n+        super(script, fieldName);\n+        this.leafFactory = Objects.requireNonNull(leafFactory);\n+    }\n+\n+    /**\n+     * Does the value match this query?\n+     */\n+    protected abstract boolean matches(long[] values, int count);\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                LongScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        script.runForDoc(approximation().docID());\n+                        return AbstractLongScriptFieldQuery.this.matches(script.values(), script.count());\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2ODIyNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456568226", "createdAt": "2020-07-17T17:10:41Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractLongScriptFieldQuery.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * Abstract base class for building queries based on {@link StringScriptFieldScript}.\n+ */\n+abstract class AbstractLongScriptFieldQuery extends AbstractScriptFieldQuery {\n+    private final LongScriptFieldScript.LeafFactory leafFactory;\n+\n+    AbstractLongScriptFieldQuery(Script script, LongScriptFieldScript.LeafFactory leafFactory, String fieldName) {\n+        super(script, fieldName);\n+        this.leafFactory = Objects.requireNonNull(leafFactory);\n+    }\n+\n+    /**\n+     * Does the value match this query?\n+     */\n+    protected abstract boolean matches(long[] values, int count);\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                LongScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        script.runForDoc(approximation().docID());\n+                        return AbstractLongScriptFieldQuery.this.matches(script.values(), script.count());\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzOTM4OQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIzNTA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/LongScriptFieldExistsQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyNDo1NVrOGzS33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxODo0M1rOGza9iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzOTc3Mg==", "bodyText": "I would be fine with even printing the getSimpleName", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456439772", "createdAt": "2020-07-17T13:24:55Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/LongScriptFieldExistsQuery.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+public class LongScriptFieldExistsQuery extends AbstractLongScriptFieldQuery {\n+    public LongScriptFieldExistsQuery(Script script, LongScriptFieldScript.LeafFactory leafFactory, String fieldName) {\n+        super(script, leafFactory, fieldName);\n+    }\n+\n+    @Override\n+    protected boolean matches(long[] values, int count) {\n+        return count > 0;\n+    }\n+\n+    @Override\n+    public final String toString(String field) {\n+        if (fieldName().contentEquals(field)) {\n+            return \"ScriptFieldExists\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MjI5Nw==", "bodyText": "Sure!", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456572297", "createdAt": "2020-07-17T17:18:43Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/LongScriptFieldExistsQuery.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+\n+public class LongScriptFieldExistsQuery extends AbstractLongScriptFieldQuery {\n+    public LongScriptFieldExistsQuery(Script script, LongScriptFieldScript.LeafFactory leafFactory, String fieldName) {\n+        super(script, leafFactory, fieldName);\n+    }\n+\n+    @Override\n+    protected boolean matches(long[] values, int count) {\n+        return count > 0;\n+    }\n+\n+    @Override\n+    public final String toString(String field) {\n+        if (fieldName().contentEquals(field)) {\n+            return \"ScriptFieldExists\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzOTc3Mg=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzI0NzA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapperTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyODowMVrOGzS-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyODowMVrOGzS-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MTU4OA==", "bodyText": "we are going to have ton of conflicts here with #59672, but I like the direction :)", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456441588", "createdAt": "2020-07-17T13:28:01Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapperTests.java", "diffHunk": "@@ -93,27 +95,43 @@ public void testStoredScriptsAreNotSupported() throws Exception {\n         );\n     }\n \n-    public void testDefaultMapping() throws Exception {\n-        XContentBuilder mapping = XContentFactory.jsonBuilder()\n-            .startObject()\n-            .startObject(\"_doc\")\n-            .startObject(\"properties\")\n-            .startObject(\"field\")\n-            .field(\"type\", \"script\")\n-            .field(\"runtime_type\", randomFrom(SUPPORTED_RUNTIME_TYPES))\n-            .startObject(\"script\")\n-            .field(\"source\", \"value('test')\")\n-            .field(\"lang\", \"test\")\n-            .endObject()\n-            .endObject()\n-            .endObject()\n-            .endObject()\n-            .endObject();\n+    public void testKeyword() throws IOException {\n+        MapperService mapperService = createIndex(\"test\", Settings.EMPTY, mapping(\"keyword\")).mapperService();\n+        FieldMapper mapper = (FieldMapper) mapperService.documentMapper().mappers().getMapper(\"field\");\n+        assertThat(mapper, instanceOf(ScriptFieldMapper.class));\n+        assertEquals(Strings.toString(mapping(\"keyword\")), Strings.toString(mapperService.documentMapper()));\n+    }\n \n-        MapperService mapperService = createIndex(\"test\", Settings.EMPTY, mapping).mapperService();\n+    public void testLong() throws IOException {\n+        MapperService mapperService = createIndex(\"test\", Settings.EMPTY, mapping(\"long\")).mapperService();\n         FieldMapper mapper = (FieldMapper) mapperService.documentMapper().mappers().getMapper(\"field\");\n         assertThat(mapper, instanceOf(ScriptFieldMapper.class));\n-        assertEquals(Strings.toString(mapping), Strings.toString(mapperService.documentMapper()));\n+        assertEquals(Strings.toString(mapping(\"long\")), Strings.toString(mapperService.documentMapper()));\n+    }\n+\n+    private XContentBuilder mapping(String type) throws IOException {\n+        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject();\n+        {\n+            mapping.startObject(\"_doc\");\n+            {\n+                mapping.startObject(\"properties\");\n+                {\n+                    mapping.startObject(\"field\");\n+                    {\n+                        mapping.field(\"type\", \"script\").field(\"runtime_type\", type);\n+                        mapping.startObject(\"script\");\n+                        {\n+                            mapping.field(\"source\", \"dummy_source\").field(\"lang\", \"test\");\n+                        }\n+                        mapping.endObject();\n+                    }\n+                    mapping.endObject();\n+                }\n+                mapping.endObject();\n+            }\n+            mapping.endObject();\n+        }\n+        return mapping.endObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzI1MDkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldTypeTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyOTowM1rOGzTBMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxOToyMlrOGza-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MjE2MQ==", "bodyText": "shall we have a test for aggs and a test for term query that use script params?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456442161", "createdAt": "2020-07-17T13:29:03Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldTypeTests.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.document.StoredField;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.search.Collector;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.LeafCollector;\n+import org.apache.lucene.search.MatchAllDocsQuery;\n+import org.apache.lucene.search.Scorable;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.painless.PainlessPlugin;\n+import org.elasticsearch.plugins.ExtensiblePlugin.ExtensionLoader;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.script.ScriptModule;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.RuntimeFields;\n+import org.elasticsearch.xpack.runtimefields.RuntimeFieldsPainlessExtension;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+\n+import static java.util.Collections.emptyMap;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class ScriptLongMappedFieldTypeTests extends AbstractScriptMappedFieldTypeTestCase {\n+    public void testDocValues() throws IOException {\n+        try (Directory directory = newDirectory(); RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n+            iw.addDocument(List.of(new StoredField(\"_source\", new BytesRef(\"{\\\"foo\\\": [1]}\"))));\n+            iw.addDocument(List.of(new StoredField(\"_source\", new BytesRef(\"{\\\"foo\\\": [2, 1]}\"))));\n+            List<Long> results = new ArrayList<>();\n+            try (DirectoryReader reader = iw.getReader()) {\n+                IndexSearcher searcher = newSearcher(reader);\n+                ScriptLongMappedFieldType ft = build(\"for (def v : source.foo) {value(v)}\");\n+                IndexMetadata imd = IndexMetadata.builder(\"test\")\n+                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT))\n+                    .numberOfShards(1)\n+                    .numberOfReplicas(1)\n+                    .build();\n+                ScriptLongFieldData ifd = ft.fielddataBuilder(\"test\").build(new IndexSettings(imd, Settings.EMPTY), ft, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MjYzNw==", "bodyText": "I've added a test for field data and for the term query that use script params.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456572637", "createdAt": "2020-07-17T17:19:22Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptLongMappedFieldTypeTests.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.document.StoredField;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.index.SortedNumericDocValues;\n+import org.apache.lucene.search.Collector;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.LeafCollector;\n+import org.apache.lucene.search.MatchAllDocsQuery;\n+import org.apache.lucene.search.Scorable;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.painless.PainlessPlugin;\n+import org.elasticsearch.plugins.ExtensiblePlugin.ExtensionLoader;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.script.ScriptModule;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.xpack.runtimefields.LongScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.RuntimeFields;\n+import org.elasticsearch.xpack.runtimefields.RuntimeFieldsPainlessExtension;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptLongFieldData;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+\n+import static java.util.Collections.emptyMap;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class ScriptLongMappedFieldTypeTests extends AbstractScriptMappedFieldTypeTestCase {\n+    public void testDocValues() throws IOException {\n+        try (Directory directory = newDirectory(); RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n+            iw.addDocument(List.of(new StoredField(\"_source\", new BytesRef(\"{\\\"foo\\\": [1]}\"))));\n+            iw.addDocument(List.of(new StoredField(\"_source\", new BytesRef(\"{\\\"foo\\\": [2, 1]}\"))));\n+            List<Long> results = new ArrayList<>();\n+            try (DirectoryReader reader = iw.getReader()) {\n+                IndexSearcher searcher = newSearcher(reader);\n+                ScriptLongMappedFieldType ft = build(\"for (def v : source.foo) {value(v)}\");\n+                IndexMetadata imd = IndexMetadata.builder(\"test\")\n+                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT))\n+                    .numberOfShards(1)\n+                    .numberOfReplicas(1)\n+                    .build();\n+                ScriptLongFieldData ifd = ft.fielddataBuilder(\"test\").build(new IndexSettings(imd, Settings.EMPTY), ft, null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MjE2MQ=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzI1MzEzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/10_keyword.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyOTozN1rOGzTCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoyNTowMlrOGzVE2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MjUwNw==", "bodyText": "why this?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456442507", "createdAt": "2020-07-17T13:29:37Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/10_keyword.yml", "diffHunk": "@@ -14,7 +14,7 @@ setup:\n               temperature:\n                 type: long\n               voltage:\n-                type: float\n+                type: double", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3NTg2NQ==", "bodyText": "Sneaky rounding error in the multiplication in the test script had me waste an hour trying to find out why 5.1 * 10 == 52. Stupid floating point.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456475865", "createdAt": "2020-07-17T14:25:02Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/10_keyword.yml", "diffHunk": "@@ -14,7 +14,7 @@ setup:\n               temperature:\n                 type: long\n               voltage:\n-                type: float\n+                type: double", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MjUwNw=="}, "originalCommit": {"oid": "5ff1e756de5c87f130f5514d5ea94b46bbeb50fc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM2NDkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/StringScriptFieldScript.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1MTozMlrOGzdusQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1MTozMlrOGzdusQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxNzY0OQ==", "bodyText": "thanks! that was my bad after all :D", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456617649", "createdAt": "2020-07-17T18:51:32Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/StringScriptFieldScript.java", "diffHunk": "@@ -35,7 +35,7 @@\n         StringScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    protected final List<String> results = new ArrayList<>();\n+    private final List<String> results = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1763c20dea8df05bafa2bb9a7813b2d27267ddd7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM2OTYzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1MzoxM1rOGzdxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDowMzoxOVrOGzfppw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxODQwMw==", "bodyText": "I no longer remember what this TODO is about. what can we do to address it? and what do we need this method for, again?", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456618403", "createdAt": "2020-07-17T18:53:13Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.xcontent.ToXContent.Params;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.TextSearchInfo;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n+\n+/**\n+ * Abstract base {@linkplain MappedFieldType} for scripted fields.\n+ */\n+abstract class AbstractScriptMappedFieldType extends MappedFieldType {\n+    protected final Script script;\n+\n+    AbstractScriptMappedFieldType(String name, Script script, Map<String, String> meta) {\n+        super(name, false, false, TextSearchInfo.NONE, meta);\n+        this.script = script;\n+    }\n+\n+    protected abstract String runtimeType();\n+\n+    void mapperXContentBody(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(\"runtime_type\", runtimeType());\n+        builder.field(\"script\", script.getIdOrCode()); // TODO For some reason this doesn't allow us to do the full xcontent of the script.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1763c20dea8df05bafa2bb9a7813b2d27267ddd7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzNTc4Mw==", "bodyText": "It spits out the script in the xcontent of the mapper. I think we might want to merge it into the FieldMapper's xcontent rendering. I can have a look in a follow up.\nThat TODO is basically complaining that I can render the whole script - it won't parse properly if I do. I don't remember why. I'll dig.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456635783", "createdAt": "2020-07-17T19:32:47Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.xcontent.ToXContent.Params;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.TextSearchInfo;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n+\n+/**\n+ * Abstract base {@linkplain MappedFieldType} for scripted fields.\n+ */\n+abstract class AbstractScriptMappedFieldType extends MappedFieldType {\n+    protected final Script script;\n+\n+    AbstractScriptMappedFieldType(String name, Script script, Map<String, String> meta) {\n+        super(name, false, false, TextSearchInfo.NONE, meta);\n+        this.script = script;\n+    }\n+\n+    protected abstract String runtimeType();\n+\n+    void mapperXContentBody(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(\"runtime_type\", runtimeType());\n+        builder.field(\"script\", script.getIdOrCode()); // TODO For some reason this doesn't allow us to do the full xcontent of the script.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxODQwMw=="}, "originalCommit": {"oid": "1763c20dea8df05bafa2bb9a7813b2d27267ddd7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0OTEyNw==", "bodyText": "I opened #59813 for the TODO.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456649127", "createdAt": "2020-07-17T20:03:19Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.xcontent.ToXContent.Params;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.TextSearchInfo;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n+\n+/**\n+ * Abstract base {@linkplain MappedFieldType} for scripted fields.\n+ */\n+abstract class AbstractScriptMappedFieldType extends MappedFieldType {\n+    protected final Script script;\n+\n+    AbstractScriptMappedFieldType(String name, Script script, Map<String, String> meta) {\n+        super(name, false, false, TextSearchInfo.NONE, meta);\n+        this.script = script;\n+    }\n+\n+    protected abstract String runtimeType();\n+\n+    void mapperXContentBody(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(\"runtime_type\", runtimeType());\n+        builder.field(\"script\", script.getIdOrCode()); // TODO For some reason this doesn't allow us to do the full xcontent of the script.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxODQwMw=="}, "originalCommit": {"oid": "1763c20dea8df05bafa2bb9a7813b2d27267ddd7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM3MjcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1NDoxMVrOGzdzaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1NDoxMVrOGzdzaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxODg1OQ==", "bodyText": "++ thanks!", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456618859", "createdAt": "2020-07-17T18:54:11Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -32,27 +27,30 @@\n import org.elasticsearch.xpack.runtimefields.query.StringScriptFieldTermsQuery;\n import org.elasticsearch.xpack.runtimefields.query.StringScriptFieldWildcardQuery;\n \n-import java.io.IOException;\n import java.time.ZoneId;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n \n import static java.util.stream.Collectors.toSet;\n-import static org.elasticsearch.search.SearchService.ALLOW_EXPENSIVE_QUERIES;\n \n-public final class RuntimeKeywordMappedFieldType extends MappedFieldType {\n+public final class ScriptKeywordMappedFieldType extends AbstractScriptMappedFieldType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1763c20dea8df05bafa2bb9a7813b2d27267ddd7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM4NTQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo1ODoyMVrOGzd7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTozMzoxMFrOGze2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMDg1OA==", "bodyText": "maybe adding one of these methods could even be automatic once a new supported field type is added to the map? not sure that it's important now though", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456620858", "createdAt": "2020-07-17T18:58:21Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapperTests.java", "diffHunk": "@@ -106,46 +107,32 @@ public void testStoredScriptsAreNotSupported() throws Exception {\n     }\n \n     public void testUnsupportedRuntimeType() throws Exception {\n-        XContentBuilder mapping = XContentFactory.jsonBuilder()\n-            .startObject()\n-            .startObject(\"_doc\")\n-            .startObject(\"properties\")\n-            .startObject(\"field\")\n-            .field(\"type\", \"script\")\n-            .field(\"runtime_type\", \"unsupported\")\n-            .startObject(\"script\")\n-            .field(\"source\", \"keyword('test')\")\n-            .field(\"lang\", \"test\")\n-            .endObject()\n-            .endObject()\n-            .endObject()\n-            .endObject()\n-            .endObject();\n-\n-        MapperParsingException exc = expectThrows(MapperParsingException.class, () -> createIndex(\"test\", Settings.EMPTY, mapping));\n+        MapperParsingException exc = expectThrows(\n+            MapperParsingException.class,\n+            () -> createIndex(\"test\", Settings.EMPTY, mapping(\"unsupported\"))\n+        );\n         assertEquals(\"Failed to parse mapping: runtime_type [unsupported] not supported\", exc.getMessage());\n     }\n \n+    public void testKeyword() throws IOException {\n+        MapperService mapperService = createIndex(\"test\", Settings.EMPTY, mapping(\"keyword\")).mapperService();\n+        FieldMapper mapper = (FieldMapper) mapperService.documentMapper().mappers().getMapper(\"field\");\n+        assertThat(mapper, instanceOf(ScriptFieldMapper.class));\n+        assertEquals(Strings.toString(mapping(\"keyword\")), Strings.toString(mapperService.documentMapper()));\n+    }\n+\n+    public void testLong() throws IOException {\n+        MapperService mapperService = createIndex(\"test\", Settings.EMPTY, mapping(\"long\")).mapperService();\n+        FieldMapper mapper = (FieldMapper) mapperService.documentMapper().mappers().getMapper(\"field\");\n+        assertThat(mapper, instanceOf(ScriptFieldMapper.class));\n+        assertEquals(Strings.toString(mapping(\"long\")), Strings.toString(mapperService.documentMapper()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1763c20dea8df05bafa2bb9a7813b2d27267ddd7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzNTk0OA==", "bodyText": "Its a good idea. We could loop through the list but I kind of like having a method for each one.", "url": "https://github.com/elastic/elasticsearch/pull/59721#discussion_r456635948", "createdAt": "2020-07-17T19:33:10Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapperTests.java", "diffHunk": "@@ -106,46 +107,32 @@ public void testStoredScriptsAreNotSupported() throws Exception {\n     }\n \n     public void testUnsupportedRuntimeType() throws Exception {\n-        XContentBuilder mapping = XContentFactory.jsonBuilder()\n-            .startObject()\n-            .startObject(\"_doc\")\n-            .startObject(\"properties\")\n-            .startObject(\"field\")\n-            .field(\"type\", \"script\")\n-            .field(\"runtime_type\", \"unsupported\")\n-            .startObject(\"script\")\n-            .field(\"source\", \"keyword('test')\")\n-            .field(\"lang\", \"test\")\n-            .endObject()\n-            .endObject()\n-            .endObject()\n-            .endObject()\n-            .endObject();\n-\n-        MapperParsingException exc = expectThrows(MapperParsingException.class, () -> createIndex(\"test\", Settings.EMPTY, mapping));\n+        MapperParsingException exc = expectThrows(\n+            MapperParsingException.class,\n+            () -> createIndex(\"test\", Settings.EMPTY, mapping(\"unsupported\"))\n+        );\n         assertEquals(\"Failed to parse mapping: runtime_type [unsupported] not supported\", exc.getMessage());\n     }\n \n+    public void testKeyword() throws IOException {\n+        MapperService mapperService = createIndex(\"test\", Settings.EMPTY, mapping(\"keyword\")).mapperService();\n+        FieldMapper mapper = (FieldMapper) mapperService.documentMapper().mappers().getMapper(\"field\");\n+        assertThat(mapper, instanceOf(ScriptFieldMapper.class));\n+        assertEquals(Strings.toString(mapping(\"keyword\")), Strings.toString(mapperService.documentMapper()));\n+    }\n+\n+    public void testLong() throws IOException {\n+        MapperService mapperService = createIndex(\"test\", Settings.EMPTY, mapping(\"long\")).mapperService();\n+        FieldMapper mapper = (FieldMapper) mapperService.documentMapper().mappers().getMapper(\"field\");\n+        assertThat(mapper, instanceOf(ScriptFieldMapper.class));\n+        assertEquals(Strings.toString(mapping(\"long\")), Strings.toString(mapperService.documentMapper()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMDg1OA=="}, "originalCommit": {"oid": "1763c20dea8df05bafa2bb9a7813b2d27267ddd7"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2259, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}