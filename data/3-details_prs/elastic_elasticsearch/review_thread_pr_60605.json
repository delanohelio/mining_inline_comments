{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjU3MjM3", "number": 60605, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowNTo0OFrOEXR7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowNTo0OFrOEXR7Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQ2NDM1OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/NoMasterNodeIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowNTo0OFrOG--4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoxNTozMVrOG_UvXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NTEwNQ==", "bodyText": "I wonder if we should add integration tests for the two primary ways indexing can fail with the new block:\n\nAn index or data-stream is to be auto-created.\nA dynamic mapping update is done.\n\nAFAICS, this will work out fine though.", "url": "https://github.com/elastic/elasticsearch/pull/60605#discussion_r468695105", "createdAt": "2020-08-11T16:05:48Z", "author": {"login": "henningandersen"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/NoMasterNodeIT.java", "diffHunk": "@@ -261,4 +266,74 @@ public void testNoMasterActionsWriteMasterBlock() throws Exception {\n \n         internalCluster().clearDisruptionScheme(true);\n     }\n+\n+    public void testNoMasterActionsMetadataWriteMasterBlock() throws Exception {\n+        Settings settings = Settings.builder()\n+            .put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), false)\n+            .put(NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), \"metadata_write\")\n+            .build();\n+\n+        final List<String> nodes = internalCluster().startNodes(3, settings);\n+\n+        prepareCreate(\"test1\").setSettings(\n+            Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 1)).get();\n+        client().admin().cluster().prepareHealth(\"_all\").setWaitForGreenStatus().get();\n+        client().prepareIndex(\"test1\").setId(\"1\").setSource(\"field\", \"value1\").get();\n+        refresh();\n+\n+        ensureGreen(\"test1\");\n+\n+        ClusterStateResponse clusterState = client().admin().cluster().prepareState().get();\n+        logger.info(\"Cluster state:\\n{}\", clusterState.getState());\n+\n+        final List<String> nodesWithShards = clusterState.getState().routingTable().index(\"test1\").shard(0).activeShards().stream()\n+            .map(shardRouting -> shardRouting.currentNodeId()).map(nodeId -> clusterState.getState().nodes().resolveNode(nodeId))\n+            .map(DiscoveryNode::getName).collect(Collectors.toList());\n+\n+        client().execute(AddVotingConfigExclusionsAction.INSTANCE,\n+            new AddVotingConfigExclusionsRequest(nodesWithShards.toArray(new String[0]))).get();\n+        ensureGreen(\"test1\");\n+\n+        String partitionedNode = nodes.stream().filter(n -> nodesWithShards.contains(n) == false).findFirst().get();\n+\n+        final NetworkDisruption disruptionScheme\n+            = new NetworkDisruption(new NetworkDisruption.TwoPartitions(Collections.singleton(partitionedNode),\n+            new HashSet<>(nodesWithShards)), NetworkDisruption.DISCONNECT);\n+        internalCluster().setDisruptionScheme(disruptionScheme);\n+        disruptionScheme.startDisrupting();\n+\n+        assertBusy(() -> {\n+            for (String node : nodesWithShards) {\n+                ClusterState state = client(node).admin().cluster().prepareState().setLocal(true).get().getState();\n+                assertTrue(state.blocks().hasGlobalBlockWithId(NoMasterBlockService.NO_MASTER_BLOCK_ID));\n+            }\n+        });\n+\n+        GetResponse getResponse = client(randomFrom(nodesWithShards)).prepareGet(\"test1\", \"1\").get();\n+        assertExists(getResponse);\n+\n+        expectThrows(Exception.class, () -> client(partitionedNode).prepareGet(\"test1\", \"1\").get());\n+\n+        SearchResponse countResponse = client(randomFrom(nodesWithShards)).prepareSearch(\"test1\")\n+            .setAllowPartialSearchResults(true).setSize(0).get();\n+        assertHitCount(countResponse, 1L);\n+\n+        expectThrows(Exception.class, () -> client(partitionedNode).prepareSearch(\"test1\")\n+            .setAllowPartialSearchResults(true).setSize(0).get());\n+\n+        TimeValue timeout = TimeValue.timeValueMillis(200);\n+        client(randomFrom(nodesWithShards)).prepareUpdate(\"test1\", \"1\")\n+            .setDoc(Requests.INDEX_CONTENT_TYPE, \"field\", \"value2\").setTimeout(timeout).get();\n+\n+        expectThrows(UnavailableShardsException.class, () -> client(partitionedNode).prepareUpdate(\"test1\", \"1\")\n+            .setDoc(Requests.INDEX_CONTENT_TYPE, \"field\", \"value2\").setTimeout(timeout).get());\n+\n+        client(randomFrom(nodesWithShards)).prepareIndex(\"test1\").setId(\"1\")\n+            .setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout).get();\n+\n+        expectThrows(UnavailableShardsException.class, () -> client(partitionedNode).prepareIndex(\"test1\").setId(\"1\")\n+            .setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout).get());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b9b68215e6e8b3ba54c4f78b06ad3040f1a2fb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1MzI3OA==", "bodyText": "added in d9d2e10", "url": "https://github.com/elastic/elasticsearch/pull/60605#discussion_r469053278", "createdAt": "2020-08-12T07:15:31Z", "author": {"login": "ywelsch"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/NoMasterNodeIT.java", "diffHunk": "@@ -261,4 +266,74 @@ public void testNoMasterActionsWriteMasterBlock() throws Exception {\n \n         internalCluster().clearDisruptionScheme(true);\n     }\n+\n+    public void testNoMasterActionsMetadataWriteMasterBlock() throws Exception {\n+        Settings settings = Settings.builder()\n+            .put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), false)\n+            .put(NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), \"metadata_write\")\n+            .build();\n+\n+        final List<String> nodes = internalCluster().startNodes(3, settings);\n+\n+        prepareCreate(\"test1\").setSettings(\n+            Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 1)).get();\n+        client().admin().cluster().prepareHealth(\"_all\").setWaitForGreenStatus().get();\n+        client().prepareIndex(\"test1\").setId(\"1\").setSource(\"field\", \"value1\").get();\n+        refresh();\n+\n+        ensureGreen(\"test1\");\n+\n+        ClusterStateResponse clusterState = client().admin().cluster().prepareState().get();\n+        logger.info(\"Cluster state:\\n{}\", clusterState.getState());\n+\n+        final List<String> nodesWithShards = clusterState.getState().routingTable().index(\"test1\").shard(0).activeShards().stream()\n+            .map(shardRouting -> shardRouting.currentNodeId()).map(nodeId -> clusterState.getState().nodes().resolveNode(nodeId))\n+            .map(DiscoveryNode::getName).collect(Collectors.toList());\n+\n+        client().execute(AddVotingConfigExclusionsAction.INSTANCE,\n+            new AddVotingConfigExclusionsRequest(nodesWithShards.toArray(new String[0]))).get();\n+        ensureGreen(\"test1\");\n+\n+        String partitionedNode = nodes.stream().filter(n -> nodesWithShards.contains(n) == false).findFirst().get();\n+\n+        final NetworkDisruption disruptionScheme\n+            = new NetworkDisruption(new NetworkDisruption.TwoPartitions(Collections.singleton(partitionedNode),\n+            new HashSet<>(nodesWithShards)), NetworkDisruption.DISCONNECT);\n+        internalCluster().setDisruptionScheme(disruptionScheme);\n+        disruptionScheme.startDisrupting();\n+\n+        assertBusy(() -> {\n+            for (String node : nodesWithShards) {\n+                ClusterState state = client(node).admin().cluster().prepareState().setLocal(true).get().getState();\n+                assertTrue(state.blocks().hasGlobalBlockWithId(NoMasterBlockService.NO_MASTER_BLOCK_ID));\n+            }\n+        });\n+\n+        GetResponse getResponse = client(randomFrom(nodesWithShards)).prepareGet(\"test1\", \"1\").get();\n+        assertExists(getResponse);\n+\n+        expectThrows(Exception.class, () -> client(partitionedNode).prepareGet(\"test1\", \"1\").get());\n+\n+        SearchResponse countResponse = client(randomFrom(nodesWithShards)).prepareSearch(\"test1\")\n+            .setAllowPartialSearchResults(true).setSize(0).get();\n+        assertHitCount(countResponse, 1L);\n+\n+        expectThrows(Exception.class, () -> client(partitionedNode).prepareSearch(\"test1\")\n+            .setAllowPartialSearchResults(true).setSize(0).get());\n+\n+        TimeValue timeout = TimeValue.timeValueMillis(200);\n+        client(randomFrom(nodesWithShards)).prepareUpdate(\"test1\", \"1\")\n+            .setDoc(Requests.INDEX_CONTENT_TYPE, \"field\", \"value2\").setTimeout(timeout).get();\n+\n+        expectThrows(UnavailableShardsException.class, () -> client(partitionedNode).prepareUpdate(\"test1\", \"1\")\n+            .setDoc(Requests.INDEX_CONTENT_TYPE, \"field\", \"value2\").setTimeout(timeout).get());\n+\n+        client(randomFrom(nodesWithShards)).prepareIndex(\"test1\").setId(\"1\")\n+            .setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout).get();\n+\n+        expectThrows(UnavailableShardsException.class, () -> client(partitionedNode).prepareIndex(\"test1\").setId(\"1\")\n+            .setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout).get());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NTEwNQ=="}, "originalCommit": {"oid": "97b9b68215e6e8b3ba54c4f78b06ad3040f1a2fb"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2607, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}