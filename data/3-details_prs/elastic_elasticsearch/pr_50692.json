{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5ODE2NzI3", "number": 50692, "title": "Fix Snapshot Repository Corruption in Downgrade Scenarios", "bodyText": "This PR introduces test infrastructure for downgrading a cluster while interacting with a given repository.\nIt fixes the fact that repository metadata in the new format could be written while there's still older snaphshots in the repository that require the old-format metadata to be restorable.\nThis PR does not yet introduce a new field in RepositoryData to avoid old versions from corrupting the repository. That will have to happen in a subsequent PR once the ability to read the new min_version field has been backported to 7.6 (see related TODO in the diff).\nMarked non-issue since this problem never made it into a release.", "createdAt": "2020-01-07T04:21:22Z", "url": "https://github.com/elastic/elasticsearch/pull/50692", "merged": true, "mergeCommit": {"oid": "ee6fbcc4a7a79bd7bd3e05768824798af264a30e"}, "closed": true, "closedAt": "2020-01-09T14:31:22Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3rsojAH2gAyMzU5ODE2NzI3OmVkYmZmMGZkNzI2YmQxOGJiMTRmOTJjN2IwMGE4M2E1ZWY2ZmI1ZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4qHIAgH2gAyMzU5ODE2NzI3OjJlZTQ1ZDYzODI2OWMwOGZhZGFlMmNhYmZkNjgwNTkxODQxZDQ2NWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "edbff0fd726bd18bb14f92c7b00a83a5ef6fb5f5", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/edbff0fd726bd18bb14f92c7b00a83a5ef6fb5f5", "committedDate": "2020-01-06T12:55:26Z", "message": "start"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c2228dd800492478b77b1112b6f3d2fa651223", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/81c2228dd800492478b77b1112b6f3d2fa651223", "committedDate": "2020-01-06T16:01:34Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7306db7049a2ecadce23c59cd51f945d587b13a", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7306db7049a2ecadce23c59cd51f945d587b13a", "committedDate": "2020-01-06T18:05:32Z", "message": "works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78907a1688cebb9cb1cad40cd7b99cafb8befa3b", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/78907a1688cebb9cb1cad40cd7b99cafb8befa3b", "committedDate": "2020-01-06T23:46:07Z", "message": "works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea223c98659431942650dd7314cf1d96b42c8a70", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/ea223c98659431942650dd7314cf1d96b42c8a70", "committedDate": "2020-01-06T23:52:21Z", "message": "works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9832b04d3907326be5c4e6faa051bfe2763e55a", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/e9832b04d3907326be5c4e6faa051bfe2763e55a", "committedDate": "2020-01-07T03:25:39Z", "message": "reproduces at last"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74ce345182d07d01522b9835706b90676168c1b9", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/74ce345182d07d01522b9835706b90676168c1b9", "committedDate": "2020-01-07T03:26:07Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3497874d745e6586fc3e6074c64e775bd3feeba", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/b3497874d745e6586fc3e6074c64e775bd3feeba", "committedDate": "2020-01-07T03:47:28Z", "message": "fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61b8e9a67947a59af36cdc45b342119cea9ba33", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/b61b8e9a67947a59af36cdc45b342119cea9ba33", "committedDate": "2020-01-07T04:01:21Z", "message": "nicer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dbe0c4a8f5ce92bb25ee5f8dda2e156af7a996e", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/3dbe0c4a8f5ce92bb25ee5f8dda2e156af7a996e", "committedDate": "2020-01-07T04:14:26Z", "message": "add assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9249816281b2640e0af2e5443427483375fd025", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/f9249816281b2640e0af2e5443427483375fd025", "committedDate": "2020-01-07T04:36:00Z", "message": "add min version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93c57769c24ea2dc0e18268fc6ccb5561803e7d9", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/93c57769c24ea2dc0e18268fc6ccb5561803e7d9", "committedDate": "2020-01-07T06:55:37Z", "message": "bck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13ce331bcc6860ea3185c173453c8eef883ddcf8", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/13ce331bcc6860ea3185c173453c8eef883ddcf8", "committedDate": "2020-01-07T07:17:53Z", "message": "fix compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04702eb2061c0cdf0b60ca48fcbfbd397802184c", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/04702eb2061c0cdf0b60ca48fcbfbd397802184c", "committedDate": "2020-01-07T07:28:45Z", "message": "better efficiency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de5cad79b7dc3ad1aadb5ff0405d444eecae884", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/8de5cad79b7dc3ad1aadb5ff0405d444eecae884", "committedDate": "2020-01-07T11:05:55Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15bbc0498de7a654a569bb7af5b2f71c7c48aa72", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/15bbc0498de7a654a569bb7af5b2f71c7c48aa72", "committedDate": "2020-01-07T14:53:36Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e7fef0dc6b031ff3c809da51086c379a090902c", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/3e7fef0dc6b031ff3c809da51086c379a090902c", "committedDate": "2020-01-07T15:55:29Z", "message": "need 2 steps ..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c0499970647f6ce74c3458223b6daac4c29ac26", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c0499970647f6ce74c3458223b6daac4c29ac26", "committedDate": "2020-01-07T15:59:28Z", "message": "document test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb509701350eb36654a9dac16e7fb62b3a5eb021", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/cb509701350eb36654a9dac16e7fb62b3a5eb021", "committedDate": "2020-01-07T16:07:23Z", "message": "drier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5004dda3a0daec9f2ce04df12b05feab04802f8d", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/5004dda3a0daec9f2ce04df12b05feab04802f8d", "committedDate": "2020-01-07T20:05:19Z", "message": "drier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33a3acdcb81dc0b22e2a6f52daec3a8663ea2944", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/33a3acdcb81dc0b22e2a6f52daec3a8663ea2944", "committedDate": "2020-01-07T20:38:54Z", "message": "drier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77ccd28d6fecebe0ec68668a6a8682a67b5a5b0", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/f77ccd28d6fecebe0ec68668a6a8682a67b5a5b0", "committedDate": "2020-01-07T20:39:10Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e65fce3e4800cc9da74e13c6e97869173577ab", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/f7e65fce3e4800cc9da74e13c6e97869173577ab", "committedDate": "2020-01-08T09:10:59Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/72cfb1b8dbe85afe4976311e6a4fc84994298532", "committedDate": "2020-01-08T09:21:56Z", "message": "nicer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Nzg3Nzgw", "url": "https://github.com/elastic/elasticsearch/pull/50692#pullrequestreview-339787780", "createdAt": "2020-01-08T10:56:02Z", "commit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDo1NjowM1rOFbTY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMToyMzozMFrOFbUAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3MzU1NQ==", "bodyText": "I think we should avoid the \"downgrade\" terminology (i.e. needs changes across the whole PR). This is not a downgrade in the classical sense. It is more of a \"revert to a previously good state\" scenario where, after a cluster was upgraded, we revert it back to a last good known state based on a backup.\nPerhaps we could frame these tests under the context of \"multi-version access to repo\"\nWe would have an old version cluster and a new version cluster.\nThere would be no \"upgrade\" in the classical sense.\nI would do the following:\nStep1: Add and write to repo on old cluster, then remove rep\nStep2: We add and write to repo on new cluster, then remove repo\nStep3: We add repo again and restore snapshot from step 1 on old cluster. We write a new snapshot, then remove repo\nStep4:  We add repo again and restore snapshots from step 1, step2, step3 on new cluster. We write a new snapshots and check if it can be restored.\nHave another test that does something similar, but instead of removing repo at the end of each step, remounts it as read-only, and uses same read-only repo in step+2 to restore.\nHave another test that only works in step1 and step2 and deletes all old snapshots in step2 and checks that snapshotting works as desired.", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364173555", "createdAt": "2020-01-08T10:56:03Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTA4OA==", "bodyText": "perhaps these steps should just be abstractly named \"STEP1_OLD_CLUSTER, STEP2_NEW_CLUSTER, STEP3_OLD_CLUSTER, STEP4_NEW_CLUSTER\"", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175088", "createdAt": "2020-01-08T10:59:56Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTQzNw==", "bodyText": "do we need this?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175437", "createdAt": "2020-01-08T11:00:50Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTQ5MQ==", "bodyText": "do we need this?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175491", "createdAt": "2020-01-08T11:00:58Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveILMPoliciesUponCompletion() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTU0Ng==", "bodyText": "do we need this?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175546", "createdAt": "2020-01-08T11:01:07Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveILMPoliciesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSLMPoliciesUponCompletion() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4MTg0MQ==", "bodyText": "good idea. In my steps above, account for this as well", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364181841", "createdAt": "2020-01-08T11:18:25Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveILMPoliciesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSLMPoliciesUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateSnapshot() throws IOException {\n+        final String repoName = \"repo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            if (TEST_STEP == TestStep.OLD || TEST_STEP == TestStep.DOWNGRADED) {\n+                createIndex(client, \"test-index\", shards);\n+                assertThat(client.snapshot().createRepository(new PutRepositoryRequest(repoName).type(\"fs\").settings(\n+                    Settings.builder().put(\"location\", \".\")), RequestOptions.DEFAULT).isAcknowledged(), is(true));\n+            }\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP.toString().toLowerCase(Locale.ROOT));\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4MzcwOQ==", "bodyText": "why do we need to convert to a list here? Why is Collection not good enough=?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364183709", "createdAt": "2020-01-08T11:23:30Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +353,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final List<SnapshotId> snapshotIds = List.copyOf(repositoryData.getSnapshotIds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbb2b3d8942b4768e583f0823bda7f69de863dd3", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/bbb2b3d8942b4768e583f0823bda7f69de863dd3", "committedDate": "2020-01-08T11:33:31Z", "message": "CR: rename qa project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1321106bad5462b06b14019ba63e0c624d35e17a", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/1321106bad5462b06b14019ba63e0c624d35e17a", "committedDate": "2020-01-08T11:46:26Z", "message": "CR: remove dead code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2637126b9f73fd5a806f2069604cffdddfa2ec6d", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/2637126b9f73fd5a806f2069604cffdddfa2ec6d", "committedDate": "2020-01-08T13:14:53Z", "message": "CR: more tests and renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfe7254c9fbb199ccedfe331fdd37cd10b86cf31", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/cfe7254c9fbb199ccedfe331fdd37cd10b86cf31", "committedDate": "2020-01-08T13:15:48Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5df61002ba5a7a031f4f2ccd535d55be0ad6a094", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/5df61002ba5a7a031f4f2ccd535d55be0ad6a094", "committedDate": "2020-01-08T13:25:35Z", "message": "rename qa projct"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38de2a738c6b867384f2e66990a96f87d61cc475", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/38de2a738c6b867384f2e66990a96f87d61cc475", "committedDate": "2020-01-08T16:03:14Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cecf2d088e5c3ac398054cc6c0bd25ad18cb829e", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/cecf2d088e5c3ac398054cc6c0bd25ad18cb829e", "committedDate": "2020-01-08T16:19:29Z", "message": "only use 2 clusters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/cc6740e999e6eadb94eb316778019fff3e07238c", "committedDate": "2020-01-08T16:20:13Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMDIwODcw", "url": "https://github.com/elastic/elasticsearch/pull/50692#pullrequestreview-340020870", "createdAt": "2020-01-08T17:22:47Z", "commit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzoyMjo0N1rOFbeHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzo0NTowM1rOFbetNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0OTM4MA==", "bodyText": "reverted is a strange name. Perhaps use\nString oldClusterName = \"${baseName}-old\"\nString newClusterName = \"${baseName}-new\"", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364349380", "createdAt": "2020-01-08T17:22:47Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/build.gradle", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.elasticsearch.gradle.Version\n+import org.elasticsearch.gradle.info.BuildParams\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask\n+\n+apply plugin: 'elasticsearch.testclusters'\n+apply plugin: 'elasticsearch.standalone-test'\n+\n+tasks.register(\"bwcTest\") {\n+  description = 'Runs backwards compatibility tests.'\n+  group = 'verification'\n+}\n+\n+dependencies {\n+  testCompile project(':client:rest-high-level')\n+}\n+\n+for (Version bwcVersion : bwcVersions.indexCompatible) {\n+  String baseName = \"v${bwcVersion}\"\n+  String revertedClusterName = \"${baseName}-reverted\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1MjkwMg==", "bodyText": "I'm confused by the terminology here. We're not starting a cluster again in step 3?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364352902", "createdAt": "2020-01-08T17:30:55Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NDEzMQ==", "bodyText": "why is it always taking the first node here?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364354131", "createdAt": "2020-01-08T17:33:46Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Once again start a cluster running the current version: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NDQ0Nw==", "bodyText": "check that the snapshot can be listed before deletion?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364354447", "createdAt": "2020-01-08T17:34:29Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Once again start a cluster running the current version: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NzUwMA==", "bodyText": "why 2 nodes? Isn't one node sufficient?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364357500", "createdAt": "2020-01-08T17:41:34Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/build.gradle", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.elasticsearch.gradle.Version\n+import org.elasticsearch.gradle.info.BuildParams\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask\n+\n+apply plugin: 'elasticsearch.testclusters'\n+apply plugin: 'elasticsearch.standalone-test'\n+\n+tasks.register(\"bwcTest\") {\n+  description = 'Runs backwards compatibility tests.'\n+  group = 'verification'\n+}\n+\n+dependencies {\n+  testCompile project(':client:rest-high-level')\n+}\n+\n+for (Version bwcVersion : bwcVersions.indexCompatible) {\n+  String baseName = \"v${bwcVersion}\"\n+  String revertedClusterName = \"${baseName}-reverted\"\n+\n+  def clusterSettings = { v ->\n+    return {\n+      version = v\n+      numberOfNodes = 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA==", "bodyText": "what if we can't load one of these snapshot info? Should we be lenient in that case? Will this o.w. break snapshotting in a way that wasn't broken before?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364358964", "createdAt": "2020-01-08T17:45:03Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd55b40c870ddfa370ee38d2943cd599a68b93ab", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd55b40c870ddfa370ee38d2943cd599a68b93ab", "committedDate": "2020-01-08T19:30:16Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1cda9ddbde710db0a7cb92fdc6da3485695c102", "committedDate": "2020-01-08T20:13:33Z", "message": "CR: more checks + renaming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzUzNTA5", "url": "https://github.com/elastic/elasticsearch/pull/50692#pullrequestreview-340353509", "createdAt": "2020-01-09T08:30:12Z", "commit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODozMDoxMlrOFbuATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo0NTo1M1rOFbuaHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwOTYxNA==", "bodyText": "suit -> suite", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364609614", "createdAt": "2020-01-09T08:30:12Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxMDYxMQ==", "bodyText": "Use getTestName()", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364610611", "createdAt": "2020-01-09T08:32:56Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNDg4MA==", "bodyText": "I think it deserves its own utility method, something like assertSnapshotStatusSuccessful()", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364614880", "createdAt": "2020-01-09T08:42:39Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshotsIncludingToDelete = listSnapshots(repoName);\n+            // Every step creates one snapshot and we have to add one more for the temporary snapshot\n+            assertThat(snapshotsIncludingToDelete, hasSize(TEST_STEP.ordinal() + 1 + 1));\n+            assertThat(snapshotsIncludingToDelete.stream().map(\n+                sn -> (String) sn.get(\"snapshot\")).collect(Collectors.toList()), hasItem(snapshotToDeleteName));\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                for (TestStep value : TestStep.values()) {\n+                    ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + value, shards);\n+                }\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    public void testReadOnlyRepo() throws IOException {\n+        final String repoName = \"testReadOnlyRepo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            final boolean readOnly = TEST_STEP.ordinal() > 1; // only restore from read-only repo in steps 3 and 4\n+            createRepository(client, repoName, readOnly);\n+            if (readOnly == false) {\n+                createIndex(client, \"test-index\", shards);\n+                createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            }\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            switch (TEST_STEP) {\n+                case STEP1_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(1));\n+                    break;\n+                case STEP2_NEW_CLUSTER:\n+                case STEP4_NEW_CLUSTER:\n+                case STEP3_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(2));\n+                    break;\n+            }\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+            }\n+        }\n+    }\n+\n+    public void testUpgradeMovesRepoToNewMetaVersion() throws IOException {\n+        if (TEST_STEP.ordinal() > 1) {\n+            // Only testing the first 2 steps here\n+            return;\n+        }\n+        final String repoName = \"testUpgradeMovesRepoToNewMetaVersion\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            // Every step creates one snapshot\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNjIyMw==", "bodyText": "Maybe check that the deletion is acked?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364616223", "createdAt": "2020-01-09T08:45:53Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshotsIncludingToDelete = listSnapshots(repoName);\n+            // Every step creates one snapshot and we have to add one more for the temporary snapshot\n+            assertThat(snapshotsIncludingToDelete, hasSize(TEST_STEP.ordinal() + 1 + 1));\n+            assertThat(snapshotsIncludingToDelete.stream().map(\n+                sn -> (String) sn.get(\"snapshot\")).collect(Collectors.toList()), hasItem(snapshotToDeleteName));\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                for (TestStep value : TestStep.values()) {\n+                    ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + value, shards);\n+                }\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    public void testReadOnlyRepo() throws IOException {\n+        final String repoName = \"testReadOnlyRepo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            final boolean readOnly = TEST_STEP.ordinal() > 1; // only restore from read-only repo in steps 3 and 4\n+            createRepository(client, repoName, readOnly);\n+            if (readOnly == false) {\n+                createIndex(client, \"test-index\", shards);\n+                createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            }\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            switch (TEST_STEP) {\n+                case STEP1_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(1));\n+                    break;\n+                case STEP2_NEW_CLUSTER:\n+                case STEP4_NEW_CLUSTER:\n+                case STEP3_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(2));\n+                    break;\n+            }\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+            }\n+        }\n+    }\n+\n+    public void testUpgradeMovesRepoToNewMetaVersion() throws IOException {\n+        if (TEST_STEP.ordinal() > 1) {\n+            // Only testing the first 2 steps here\n+            return;\n+        }\n+        final String repoName = \"testUpgradeMovesRepoToNewMetaVersion\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            // Every step creates one snapshot\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP1_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else {\n+                deleteSnapshot(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+                createSnapshot(client, repoName, \"snapshot-1\");\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-1\", shards);\n+                deleteSnapshot(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER);\n+                createSnapshot(client, repoName, \"snapshot-2\");\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-2\", shards);\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    private void deleteSnapshot(RestHighLevelClient client, String repoName, String name) throws IOException {\n+        client.snapshot().delete(new DeleteSnapshotRequest(repoName, name), RequestOptions.DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 220}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1436d39eb305bb0f292540b0fe089f3fd2524a0", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/c1436d39eb305bb0f292540b0fe089f3fd2524a0", "committedDate": "2020-01-09T08:55:58Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4a18d85b81fd98a52fdd0b258d8ee1f085c21c6", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/d4a18d85b81fd98a52fdd0b258d8ee1f085c21c6", "committedDate": "2020-01-09T09:09:35Z", "message": "nicer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba5f826ac80001849411b3451daeee217d5f015f", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/ba5f826ac80001849411b3451daeee217d5f015f", "committedDate": "2020-01-09T10:05:27Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5d2565b0e8c0df84d89e0fd5f3c37d5a87199b", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/7d5d2565b0e8c0df84d89e0fd5f3c37d5a87199b", "committedDate": "2020-01-09T10:52:41Z", "message": "assume old version when missing snap- blob"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNTA2ODcz", "url": "https://github.com/elastic/elasticsearch/pull/50692#pullrequestreview-340506873", "createdAt": "2020-01-09T13:09:29Z", "commit": {"oid": "7d5d2565b0e8c0df84d89e0fd5f3c37d5a87199b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ee45d638269c08fadae2cabfd680591841d465c", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/2ee45d638269c08fadae2cabfd680591841d465c", "committedDate": "2020-01-09T13:38:29Z", "message": "Merge remote-tracking branch 'elastic/master' into test-downgrade-bwc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3865, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}