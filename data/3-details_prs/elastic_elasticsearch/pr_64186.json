{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzQyNzM1", "number": 64186, "title": "Introduce functional tests for new REST test plugins", "bodyText": "This commit introduces 2 new Gradle plugin functional tests.\nThese tests make use of dummy subprojects to help satisfy the\ninter dependencies of the projects in use. Helper methods\nhave been added to the shared common parent.", "createdAt": "2020-10-26T22:25:31Z", "url": "https://github.com/elastic/elasticsearch/pull/64186", "merged": true, "mergeCommit": {"oid": "bc3838f29b8895e573a72c82508de0e5cf6022b6"}, "closed": true, "closedAt": "2021-01-20T19:33:54Z", "author": {"login": "jakelandis"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWZkRigH2gAyNTEwMzQyNzM1OmE0OTE1ZTRjOGE3YTMwOTY4MDE1ZTc0NGMyMjg1NDg1ODMyZGU1OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyC47DAH2gAyNTEwMzQyNzM1OmUwMmJlMWEzODRkYmIxZTI1NTk2ZmJmZDVjNWY0OGIwYWYzNmQxZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a4915e4c8a7a30968015e744c2285485832de58d", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/a4915e4c8a7a30968015e744c2285485832de58d", "committedDate": "2020-10-26T19:30:49Z", "message": "introduce functional test for yamlRestTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58805877c71ed79175befb8bf2be6394859e16d5", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/58805877c71ed79175befb8bf2be6394859e16d5", "committedDate": "2020-10-26T19:40:21Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/645136c68fd1387bb6943b339c37310bcef570f8", "committedDate": "2020-10-26T22:21:30Z", "message": "add test for yamlRestCompatTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjIzMDU0", "url": "https://github.com/elastic/elasticsearch/pull/64186#pullrequestreview-517223054", "createdAt": "2020-10-26T22:30:44Z", "commit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjozMDo0NVrOHokzSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjozMDo0NVrOHokzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwODA0Mg==", "bodyText": "Wasn't a fan of doing this...but for reasons I have hard time following, this requires the :distribution:archives:linux-tar (my workstation is a linux box) project to exist. I assume that OS specific resolution, and did not want to have to mirror all of the variants from distribution:archive as dummy projects.\nAlternatively, I think i could only run this test specifically for a given OS, but avoided doing that since there is some file copying going on and wanted to get coverage across OS's. The distribution in use is not an important detail of the test.", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r512308042", "createdAt": "2020-10-26T22:30:45Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,9 +73,11 @@ public void apply(Project project) {\n         SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n         GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n \n-        // create the test cluster container, and always use the default distribution\n+        // create the test cluster container, and use the default distribution. System property is only used to help test this plugin.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDUzNjA4", "url": "https://github.com/elastic/elasticsearch/pull/64186#pullrequestreview-517453608", "createdAt": "2020-10-27T08:35:18Z", "commit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODozNToxOFrOHowjpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxMjoyNlrOHox_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwMDY0NQ==", "bodyText": "One day I fix this wrong naming of the configuration with the trailing -... :)", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r512500645", "createdAt": "2020-10-27T08:35:18Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/YamlRestCompatTestPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+import spock.lang.IgnoreIf\n+\n+class YamlRestCompatTestPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"yamlRestCompatTest does nothing when there are no tests\"() {\n+        given:\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        buildFile << \"\"\"\n+        plugins {\n+          id 'elasticsearch.yaml-rest-compat-test'\n+        }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\", '-i').build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.NO_SOURCE\n+    }\n+\n+    def \"yamlRestCompatTest executes and copies api and tests from :bwc:minor\"() {\n+        given:\n+        String api = \"wrongversion.json\"\n+        String test = \"wrongversion.yml\"\n+        setupInternalRestResources(api, test)\n+\n+        //don't use default distro from here since it requires resolving OS specific project and don't want to create the mock projects\n+        System.setProperty(\"tests.rest.compat.use.default.distro\", \"false\");\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        //add the compatible test and api files\n+        file(\"distribution/bwc/minor/checkoutDir/src/yamlRestTest/resources/rest-api-spec/test/foo/10_basic.yml\") << \"\"\n+        file(\"distribution/bwc/minor/checkoutDir/rest-api-spec/src/main/resources/rest-api-spec/api/foo.json\") << \"\"\n+\n+        buildFile << \" apply plugin: 'elasticsearch.yaml-rest-compat-test'\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\", '-i').build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE //no Java classes in source set\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.SUCCESS\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.SUCCESS\n+\n+        File resourceDir = new File(testProjectDir.root, \"build/resources/yamlRestCompatTest/rest-api-spec\")\n+        // ensure the compatible resources from bwc:minor are in the resource dir\n+        assert new File(resourceDir, \"test/foo/10_basic.yml\").exists()\n+        assert new File(resourceDir, \"api/foo.json\").exists()\n+        // we don't copy the \"normal\" rest resources to the compat resource dir\n+        assert new File(resourceDir, \"/test/\" + test).exists() == false\n+        assert new File(resourceDir, \"/api/\" + api).exists() == false\n+\n+        when:\n+        //add the mock java test and dependency to run, the runner from the yamlRestTest sourceSet is used\n+        file(\"src/yamlRestTest/java/MockIT.java\") << \"import org.junit.Test;class MockIT { @Test public void doNothing() { }}\"\n+\n+        buildFile << \"\"\"\n+           dependencies {\n+           yamlRestTestImplementation \"junit:junit:4.12\"\n+        }\n+        \"\"\"\n+\n+        result = gradleRunner(\"yamlRestCompatTest\", '-i').buildAndFail() //expect failure - we don't actually spin up a cluster\n+\n+        then:\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.UP_TO_DATE\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.UP_TO_DATE\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.FAILED\n+        assertOutputContains(result.output, \"Starting `node{::yamlRestCompatTest-0}`\")\n+        assertOutputContains(result.output, \"Expected configuration ':es_distro_extracted_testclusters--yamlRestCompatTest-\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwMTEwMQ==", "bodyText": "-i can be removed. Seen this in other tests too", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r512501101", "createdAt": "2020-10-27T08:36:05Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/YamlRestTestPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+\n+class YamlRestTestPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"yamlRestTest does nothing when there are no tests\"() {\n+        given:\n+        buildFile << \"\"\"\n+        plugins {\n+          id 'elasticsearch.yaml-rest-test'\n+        }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestTest\", '-i').build()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyMjQwMQ==", "bodyText": "you should be able to get rid of the need for this property by just explicitly configure the test distribution here in the test like adding:\nsth like\n        buildFile << \"\"\"\n        testClusters {\n            yamlRestCompatTest.setTestDistribution(TestDistribution.INTEG_TEST)\n        }\n        \"\"\"", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r512522401", "createdAt": "2020-10-27T09:09:32Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/YamlRestCompatTestPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+import spock.lang.IgnoreIf\n+\n+class YamlRestCompatTestPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"yamlRestCompatTest does nothing when there are no tests\"() {\n+        given:\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        buildFile << \"\"\"\n+        plugins {\n+          id 'elasticsearch.yaml-rest-compat-test'\n+        }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\", '-i').build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.NO_SOURCE\n+    }\n+\n+    def \"yamlRestCompatTest executes and copies api and tests from :bwc:minor\"() {\n+        given:\n+        String api = \"wrongversion.json\"\n+        String test = \"wrongversion.yml\"\n+        setupInternalRestResources(api, test)\n+\n+        //don't use default distro from here since it requires resolving OS specific project and don't want to create the mock projects\n+        System.setProperty(\"tests.rest.compat.use.default.distro\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyMjc2MA==", "bodyText": "this needs to be added after the plugin is applied though otherwise the test cluster doesn't exist yet", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r512522760", "createdAt": "2020-10-27T09:10:06Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/YamlRestCompatTestPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+import spock.lang.IgnoreIf\n+\n+class YamlRestCompatTestPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"yamlRestCompatTest does nothing when there are no tests\"() {\n+        given:\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        buildFile << \"\"\"\n+        plugins {\n+          id 'elasticsearch.yaml-rest-compat-test'\n+        }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\", '-i').build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.NO_SOURCE\n+    }\n+\n+    def \"yamlRestCompatTest executes and copies api and tests from :bwc:minor\"() {\n+        given:\n+        String api = \"wrongversion.json\"\n+        String test = \"wrongversion.yml\"\n+        setupInternalRestResources(api, test)\n+\n+        //don't use default distro from here since it requires resolving OS specific project and don't want to create the mock projects\n+        System.setProperty(\"tests.rest.compat.use.default.distro\", \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyMjQwMQ=="}, "originalCommit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNDIyMg==", "bodyText": "As I mentioned in another comment, you should be able to just configure the distribution explicitly in the tests so this sys property in the production code should not be required. IMO its fine to not test all OS specific resolutions as this is mostly logic done in the distribution-download-plugin and the test cluster plugin which we test separately", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r512524222", "createdAt": "2020-10-27T09:12:26Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -73,9 +73,11 @@ public void apply(Project project) {\n         SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n         GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n \n-        // create the test cluster container, and always use the default distribution\n+        // create the test cluster container, and use the default distribution. System property is only used to help test this plugin.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwODA0Mg=="}, "originalCommit": {"oid": "645136c68fd1387bb6943b339c37310bcef570f8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "249f64f05d572de4c0480ab87fae858ee7902442", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/249f64f05d572de4c0480ab87fae858ee7902442", "committedDate": "2020-10-27T17:30:36Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/f92eade1aa00451a664ab679523cd763aedbcff7", "committedDate": "2020-10-27T18:26:41Z", "message": "Merge branch 'master' into yaml_rest_test_tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTk0MDUz", "url": "https://github.com/elastic/elasticsearch/pull/64186#pullrequestreview-518194053", "createdAt": "2020-10-27T22:19:41Z", "commit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjoxOTo0MVrOHpTIGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTowNToxMFrOHpWV7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NzAzNA==", "bodyText": "can we include the term \"path\" in this argument to make that explicit?", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r513067034", "createdAt": "2020-10-27T22:19:41Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/fixtures/AbstractGradleFuncTest.groovy", "diffHunk": "@@ -42,6 +42,12 @@ abstract class AbstractGradleFuncTest extends Specification {\n         buildFile = testProjectDir.newFile('build.gradle')\n     }\n \n+    def addSubProject(String subProject){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NzU4Nw==", "bodyText": "Since this returns a File let's make the return type exlicit vs using def. Using def as a substitute for void only seems to be the existing pattern here.", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r513067587", "createdAt": "2020-10-27T22:21:05Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/fixtures/AbstractGradleFuncTest.groovy", "diffHunk": "@@ -42,6 +42,12 @@ abstract class AbstractGradleFuncTest extends Specification {\n         buildFile = testProjectDir.newFile('build.gradle')\n     }\n \n+    def addSubProject(String subProject){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExODQ3MQ==", "bodyText": "I don't believe we need assert here. Any boolean expression in a then: block is an implicit assertion.", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r513118471", "createdAt": "2020-10-28T01:00:16Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/YamlRestCompatTestPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+import spock.lang.IgnoreIf\n+\n+class YamlRestCompatTestPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"yamlRestCompatTest does nothing when there are no tests\"() {\n+        given:\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        buildFile << \"\"\"\n+        plugins {\n+          id 'elasticsearch.yaml-rest-compat-test'\n+        }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\").build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.NO_SOURCE\n+    }\n+\n+    def \"yamlRestCompatTest executes and copies api and tests from :bwc:minor\"() {\n+        given:\n+        String api = \"wrongversion.json\"\n+        String test = \"wrongversion.yml\"\n+        setupInternalRestResources(api, test)\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        //add the compatible test and api files\n+        file(\"distribution/bwc/minor/checkoutDir/src/yamlRestTest/resources/rest-api-spec/test/foo/10_basic.yml\") << \"\"\n+        file(\"distribution/bwc/minor/checkoutDir/rest-api-spec/src/main/resources/rest-api-spec/api/foo.json\") << \"\"\n+\n+        buildFile << \"\"\"\n+          apply plugin: 'elasticsearch.yaml-rest-compat-test'\n+          import org.elasticsearch.gradle.testclusters.TestDistribution;\n+          testClusters {\n+            yamlRestCompatTest.setTestDistribution(TestDistribution.INTEG_TEST)\n+          }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\").build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE //no Java classes in source set\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.SUCCESS\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.SUCCESS\n+\n+        File resourceDir = new File(testProjectDir.root, \"build/resources/yamlRestCompatTest/rest-api-spec\")\n+        // ensure the compatible resources from bwc:minor are in the resource dir\n+        assert new File(resourceDir, \"test/foo/10_basic.yml\").exists()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExOTEzNg==", "bodyText": "What exactly are we testing in this scenario? Just that the copy tasks are still up to date? If not, should this be a separate feature method?", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r513119136", "createdAt": "2020-10-28T01:02:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/YamlRestCompatTestPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+import spock.lang.IgnoreIf\n+\n+class YamlRestCompatTestPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"yamlRestCompatTest does nothing when there are no tests\"() {\n+        given:\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        buildFile << \"\"\"\n+        plugins {\n+          id 'elasticsearch.yaml-rest-compat-test'\n+        }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\").build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.NO_SOURCE\n+    }\n+\n+    def \"yamlRestCompatTest executes and copies api and tests from :bwc:minor\"() {\n+        given:\n+        String api = \"wrongversion.json\"\n+        String test = \"wrongversion.yml\"\n+        setupInternalRestResources(api, test)\n+\n+        addSubProject(\":distribution:bwc:minor\") <<  \"\"\"\n+        configurations { checkout }\n+        artifacts {\n+            checkout(new File(projectDir, \"checkoutDir\"))\n+        }\n+        \"\"\"\n+\n+        //add the compatible test and api files\n+        file(\"distribution/bwc/minor/checkoutDir/src/yamlRestTest/resources/rest-api-spec/test/foo/10_basic.yml\") << \"\"\n+        file(\"distribution/bwc/minor/checkoutDir/rest-api-spec/src/main/resources/rest-api-spec/api/foo.json\") << \"\"\n+\n+        buildFile << \"\"\"\n+          apply plugin: 'elasticsearch.yaml-rest-compat-test'\n+          import org.elasticsearch.gradle.testclusters.TestDistribution;\n+          testClusters {\n+            yamlRestCompatTest.setTestDistribution(TestDistribution.INTEG_TEST)\n+          }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestCompatTest\").build()\n+\n+        then:\n+        result.task(':yamlRestCompatTest').outcome == TaskOutcome.NO_SOURCE //no Java classes in source set\n+        result.task(':copyRestApiCompatSpecsTask').outcome == TaskOutcome.SUCCESS\n+        result.task(':copyRestApiCompatTestTask').outcome == TaskOutcome.SUCCESS\n+\n+        File resourceDir = new File(testProjectDir.root, \"build/resources/yamlRestCompatTest/rest-api-spec\")\n+        // ensure the compatible resources from bwc:minor are in the resource dir\n+        assert new File(resourceDir, \"test/foo/10_basic.yml\").exists()\n+        assert new File(resourceDir, \"api/foo.json\").exists()\n+        // we don't copy the \"normal\" rest resources to the compat resource dir\n+        assert new File(resourceDir, \"/test/\" + test).exists() == false\n+        assert new File(resourceDir, \"/api/\" + api).exists() == false\n+\n+        when:\n+        //add the mock java test and dependency to run, the runner from the yamlRestTest sourceSet is used\n+        file(\"src/yamlRestTest/java/MockIT.java\") << \"import org.junit.Test;class MockIT { @Test public void doNothing() { }}\"\n+\n+        buildFile << \"\"\"\n+           dependencies {\n+           yamlRestTestImplementation \"junit:junit:4.12\"\n+        }\n+        \"\"\"\n+\n+        result = gradleRunner(\"yamlRestCompatTest\", '-i').buildAndFail() //expect failure - we don't actually spin up a cluster\n+\n+        then:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExOTcyNw==", "bodyText": "This seems the same as the last one. What exactly is this testing? Are we just testing that the source set is created properly?", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r513119727", "createdAt": "2020-10-28T01:05:10Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/YamlRestTestPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+\n+class YamlRestTestPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"yamlRestTest does nothing when there are no tests\"() {\n+        given:\n+        buildFile << \"\"\"\n+        plugins {\n+          id 'elasticsearch.yaml-rest-test'\n+        }\n+        \"\"\"\n+\n+        when:\n+        def result = gradleRunner(\"yamlRestTest\").build()\n+\n+        then:\n+        result.task(':yamlRestTest').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyYamlTestsTask').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyRestApiSpecsTask').outcome == TaskOutcome.NO_SOURCE\n+    }\n+\n+    def \"yamlRestTest executes and copies api and tests from :rest-api-spec\"() {\n+        given:\n+        String api = \"foo.json\"\n+        String test = \"foo/10_basic.yml\"\n+        setupInternalRestResources(api, test)\n+\n+        buildFile << \"\"\"\n+        apply plugin: 'elasticsearch.yaml-rest-test'\n+\n+        restResources {\n+          restTests {\n+            includeCore '*'\n+          }\n+        }\n+        \"\"\"\n+        when:\n+        def result = gradleRunner(\"yamlRestTest\").build()\n+\n+        then:\n+        result.task(':yamlRestTest').outcome == TaskOutcome.NO_SOURCE //no Java classes in source set\n+        result.task(':copyYamlTestsTask').outcome == TaskOutcome.SUCCESS\n+        result.task(':copyRestApiSpecsTask').outcome == TaskOutcome.SUCCESS\n+\n+        File resourceDir = new File(testProjectDir.root, \"build/resources/yamlRestTest/rest-api-spec\")\n+        assert new File(resourceDir, \"/test/\" + test).exists()\n+        assert new File(resourceDir, \"/api/\" + api).exists()\n+\n+        when:\n+        //add the mock java test and dependency to run\n+        file(\"src/yamlRestTest/java/MockIT.java\") << \"import org.junit.Test;class MockIT { @Test public void doNothing() { }}\"\n+\n+        buildFile << \"\"\"\n+           dependencies {\n+           yamlRestTestImplementation \"junit:junit:4.12\"\n+        }\n+        \"\"\"\n+\n+        result = gradleRunner(\"yamlRestTest\", '-i').buildAndFail() //expect to fail since we don't actually spin up a cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDc0NjUw", "url": "https://github.com/elastic/elasticsearch/pull/64186#pullrequestreview-518474650", "createdAt": "2020-10-28T09:37:35Z", "commit": {"oid": "f92eade1aa00451a664ab679523cd763aedbcff7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "856c2d3992d0b429e73207f25cd46319ce87674c", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/856c2d3992d0b429e73207f25cd46319ce87674c", "committedDate": "2021-01-13T14:25:27Z", "message": "Merge branch 'master' into yaml_rest_test_tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baf2aefbc5112b43eec046852932f98e7312033c", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/baf2aefbc5112b43eec046852932f98e7312033c", "committedDate": "2021-01-13T14:38:52Z", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into yaml_rest_test_tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e1b9cfa22a8fb005a08f5ca2a6ffd51d0aaa90", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/19e1b9cfa22a8fb005a08f5ca2a6ffd51d0aaa90", "committedDate": "2021-01-15T22:34:57Z", "message": "wip: add rest resource plugin test (broke others)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c947825f71a4c468e6c222d4bd89898caa6bae", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/c7c947825f71a4c468e6c222d4bd89898caa6bae", "committedDate": "2021-01-18T20:51:43Z", "message": "fix other tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a951ae55d777dd8e765894858813d5e7dbc1054d", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/a951ae55d777dd8e765894858813d5e7dbc1054d", "committedDate": "2021-01-19T14:32:12Z", "message": "minor review change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNTYwNzQz", "url": "https://github.com/elastic/elasticsearch/pull/64186#pullrequestreview-571560743", "createdAt": "2021-01-19T19:06:16Z", "commit": {"oid": "a951ae55d777dd8e765894858813d5e7dbc1054d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMTQzMzc3", "url": "https://github.com/elastic/elasticsearch/pull/64186#pullrequestreview-572143377", "createdAt": "2021-01-20T11:50:41Z", "commit": {"oid": "a951ae55d777dd8e765894858813d5e7dbc1054d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMTo1MDo0MlrOIW6spw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMTo1NDo0NFrOIW61XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwMTI4Nw==", "bodyText": "just a little hint.\nyou could use the convenience file() method for better reading:\nfile(\"/build/resources/test/rest-api-spec/api/\" + apiCore1).exists()\n\neven though there's some repeating I personally think this makes the test more readable.", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r560901287", "createdAt": "2021-01-20T11:50:42Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/RestResourcesPluginFuncTest.groovy", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle\n+\n+import org.elasticsearch.gradle.fixtures.AbstractGradleFuncTest\n+import org.gradle.testkit.runner.TaskOutcome\n+\n+class RestResourcesPluginFuncTest extends AbstractGradleFuncTest {\n+\n+    def \"restResources does nothing when there are no tests\"() {\n+        given:\n+        internalBuild()\n+        buildFile << \"\"\"\n+            apply plugin: 'elasticsearch.rest-resources'\n+            apply plugin: 'elasticsearch.java'\n+        \"\"\"\n+\n+        String api = \"foo.json\"\n+        setupRestResources([api])\n+\n+        when:\n+        def result = gradleRunner(\"copyRestApiSpecsTask\").build()\n+\n+        then:\n+        result.task(':copyRestApiSpecsTask').outcome == TaskOutcome.NO_SOURCE\n+        result.task(':copyYamlTestsTask').outcome == TaskOutcome.NO_SOURCE\n+    }\n+\n+    def \"restResources copies API by default for projects with tests\"() {\n+        given:\n+        internalBuild()\n+        buildFile << \"\"\"\n+           apply plugin: 'elasticsearch.rest-resources'\n+           apply plugin: 'elasticsearch.java'\n+        \"\"\"\n+        String api = \"foo.json\"\n+        setupRestResources([api])\n+        addRestTestsToProject([\"10_basic.yml\"])\n+\n+        when:\n+        def result = gradleRunner(\"copyRestApiSpecsTask\").build()\n+\n+        then:\n+        result.task(':copyRestApiSpecsTask').outcome == TaskOutcome.SUCCESS\n+        result.task(':copyYamlTestsTask').outcome == TaskOutcome.NO_SOURCE\n+        File resourceDir = new File(testProjectDir.root, \"build/resources/test/rest-api-spec\")\n+        new File(resourceDir, \"/api/\" + api).exists()\n+    }\n+\n+    def \"restResources copies all core API (but not x-pack) by default for projects with copied tests\"() {\n+        given:\n+        internalBuild()\n+        buildFile << \"\"\"\n+            apply plugin: 'elasticsearch.rest-resources'\n+            apply plugin: 'elasticsearch.java'\n+\n+            restResources {\n+                restTests {\n+                    includeCore 'foo'\n+                    includeXpack 'bar'\n+                }\n+            }\n+        \"\"\"\n+        String apiCore1 = \"foo1.json\"\n+        String apiCore2 = \"foo2.json\"\n+        String apiXpack = \"xpack.json\"\n+        String coreTest = \"foo/10_basic.yml\"\n+        String xpackTest = \"bar/10_basic.yml\"\n+        setupRestResources([apiCore1, apiCore2], [coreTest], [apiXpack], [xpackTest])\n+        // intentionally not adding tests to project, they will be copied over via the plugin\n+        // this tests that the test copy happens before the api copy since the api copy will only trigger if there are tests in the project\n+\n+        when:\n+        def result = gradleRunner(\"copyRestApiSpecsTask\").build()\n+\n+        then:\n+        result.task(':copyRestApiSpecsTask').outcome == TaskOutcome.SUCCESS\n+        result.task(':copyYamlTestsTask').outcome == TaskOutcome.SUCCESS\n+        File resourceDir = new File(testProjectDir.root, \"build/resources/test/rest-api-spec\")\n+        new File(resourceDir, \"/api/\" + apiCore1).exists()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a951ae55d777dd8e765894858813d5e7dbc1054d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwMzUxNw==", "bodyText": "I think this would better live in an AbstractRestResourcesFuncTest than in the general AbstractGradleFuncTest. AbstractGradleFuncTest should only contain more general logic applied to a most functional tests", "url": "https://github.com/elastic/elasticsearch/pull/64186#discussion_r560903517", "createdAt": "2021-01-20T11:54:44Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/fixtures/AbstractGradleFuncTest.groovy", "diffHunk": "@@ -136,4 +142,47 @@ abstract class AbstractGradleFuncTest extends Specification {\n             System.err.println(\"Syserr: \" + proc.errorStream.text)\n         }\n     }\n+\n+    void setupRestResources(List<String> apis, List<String> tests = [], List<String> xpackApis = [], List<String> xpackTests = []) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a951ae55d777dd8e765894858813d5e7dbc1054d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5021379eabe4a2362a763df91d342e8bbc3af495", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/5021379eabe4a2362a763df91d342e8bbc3af495", "committedDate": "2021-01-20T16:34:29Z", "message": "introduce AbstractGradleFuncTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02be1a384dbb1e25596fbfd5c5f48b0af36d1d0", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/e02be1a384dbb1e25596fbfd5c5f48b0af36d1d0", "committedDate": "2021-01-20T16:55:26Z", "message": "prefer file(..) over new File()"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 989, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}