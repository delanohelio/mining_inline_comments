{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDcyMzU5", "number": 51267, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo0NTozN1rODZvOCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1OTozMlrODZvYvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzE0NjM1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo0NTozN1rOFgS4fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjozNjoxN1rOFgamHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwODEyNg==", "bodyText": "Could you add a comment explaining how does changing MlNativeAutodetectIntegTestCase to ESRestTestCase solve the issue this PR is supposed to solve?\nIf I were to write a new IT test, how would I know which base class should I use?", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369408126", "createdAt": "2020-01-22T07:45:37Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyODI2Ng==", "bodyText": "@przemekwitek there are cleanups and cluster state requirements in MlNativeAutodetectIntegTestCase which are causing problems. Something with how ingest pipeline _simulate works is disallowing cleanups to occur (has nothing to do with our code). I attempted to troubleshoot, but it started to turn into wasted time.\nSo, instead, I moved to REST cases instead.", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369528266", "createdAt": "2020-01-22T12:21:04Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwODEyNg=="}, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzNDQ5Mw==", "bodyText": "Could you add at least one sentence in class-level comment? Just in an unlikely case someone does a rewrite of this test to MlNativeAutodetectIntegTestCase in a year from now not remembering there was an issue.", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369534493", "createdAt": "2020-01-22T12:36:17Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwODEyNg=="}, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzE1NTI2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1MDoxM1rOFgS9qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjozOTo0OFrOFgarlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwOTQ1MQ==", "bodyText": "Do you plan to use this method in other places?\nIf not, you can either inline it into cleanUpData or make it private.", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369409451", "createdAt": "2020-01-22T07:50:13Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {\n+\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER =\n+        basicAuthHeaderValue(\"x_pack_rest_user\", SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n \n     @Before\n     public void createBothModels() throws Exception {\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildClassificationModel())).actionGet();\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildRegressionModel())).actionGet();\n+        Request request = new Request(\"PUT\", \"_ml/inference/test_classification\");\n+        request.setJsonEntity(CLASSIFICATION_CONFIG);\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"_ml/inference/test_regression\");\n+        request.setJsonEntity(REGRESSION_CONFIG);\n+        client().performRequest(request);\n+    }\n+\n+    public void clearMlState() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MTAyMQ==", "bodyText": "I think there should be a wider rethink of the cleanup methods.\nMlNativeAutodetectIntegTestCase extends MlNativeIntegTestCase, and MlNativeIntegTestCase already has an @After method that calls the abstract method cleanUpResources() then waits for pending tasks.\nSince this clearMlState() method also waits for pending tasks that means we're waiting twice, which will slow down the cleanup.  If possible I would prefer that we only wait for pending tasks once, at the very end of all cleanup operations.\n@benwtrent please can you try to integrate your cleanup into the MlNativeIntegTestCase framework, by overriding cleanUpResources().  And if that doesn't work for some reason and multiple cleanup phases are required please add some comments explaining what the full sequence is and why a simpler sequence doesn't work.  (For example, I can imagine there might be something annoying like the ML annotations index being created part way through the cleanup, but if you found that problem and worked around it it would be good to document that this can happen so that the next maintainer can take it into account.)", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369441021", "createdAt": "2020-01-22T09:11:42Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {\n+\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER =\n+        basicAuthHeaderValue(\"x_pack_rest_user\", SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n \n     @Before\n     public void createBothModels() throws Exception {\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildClassificationModel())).actionGet();\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildRegressionModel())).actionGet();\n+        Request request = new Request(\"PUT\", \"_ml/inference/test_classification\");\n+        request.setJsonEntity(CLASSIFICATION_CONFIG);\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"_ml/inference/test_regression\");\n+        request.setJsonEntity(REGRESSION_CONFIG);\n+        client().performRequest(request);\n+    }\n+\n+    public void clearMlState() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwOTQ1MQ=="}, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMTQ1Mw==", "bodyText": "@droberts195 I don't understand\n\nSince this clearMlState() method also waits for pending tasks that means we're waiting twice, which will slow down the cleanup.\n\nThis test class is now inheriting from ESRestTestCase which does not wait for tasks to finish.\nThis clean up code is the same we use for other ESRestTestCase classes.\nMlNativeIntegTestCase already does something similar (see: \n  \n    \n      elasticsearch/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeIntegTestCase.java\n    \n    \n         Line 128\n      in\n      d2aee62\n    \n    \n    \n    \n\n        \n          \n           cleanUpResources(); \n        \n    \n  \n\n)\nAs for the issues I originally had that prompted this change to ESRestTestCase, the issue has nothing to do with any code paths that the ML team has written. It even occurred with the set processor. So, adjusting our cleanup process would do nothing.\n@przemekwitek\n\nDo you plan to use this method in other places?\n\nI could make it private", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369531453", "createdAt": "2020-01-22T12:28:52Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {\n+\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER =\n+        basicAuthHeaderValue(\"x_pack_rest_user\", SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n \n     @Before\n     public void createBothModels() throws Exception {\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildClassificationModel())).actionGet();\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildRegressionModel())).actionGet();\n+        Request request = new Request(\"PUT\", \"_ml/inference/test_classification\");\n+        request.setJsonEntity(CLASSIFICATION_CONFIG);\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"_ml/inference/test_regression\");\n+        request.setJsonEntity(REGRESSION_CONFIG);\n+        client().performRequest(request);\n+    }\n+\n+    public void clearMlState() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwOTQ1MQ=="}, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzNTg5NA==", "bodyText": "Sorry, I must have been colour blind when reading the diff.", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369535894", "createdAt": "2020-01-22T12:39:48Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {\n+\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER =\n+        basicAuthHeaderValue(\"x_pack_rest_user\", SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n \n     @Before\n     public void createBothModels() throws Exception {\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildClassificationModel())).actionGet();\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildRegressionModel())).actionGet();\n+        Request request = new Request(\"PUT\", \"_ml/inference/test_classification\");\n+        request.setJsonEntity(CLASSIFICATION_CONFIG);\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"_ml/inference/test_regression\");\n+        request.setJsonEntity(REGRESSION_CONFIG);\n+        client().performRequest(request);\n+    }\n+\n+    public void clearMlState() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwOTQ1MQ=="}, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzE2NDQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1NDozN1rOFgTDTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjoyMTo1MlrOFgaPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDg5Mw==", "bodyText": "Before the isAcknowledged bit was being checked. Would it be possible to add an equivalent check in the new setting?", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369410893", "createdAt": "2020-01-22T07:54:37Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {\n+\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER =\n+        basicAuthHeaderValue(\"x_pack_rest_user\", SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n \n     @Before\n     public void createBothModels() throws Exception {\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildClassificationModel())).actionGet();\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildRegressionModel())).actionGet();\n+        Request request = new Request(\"PUT\", \"_ml/inference/test_classification\");\n+        request.setJsonEntity(CLASSIFICATION_CONFIG);\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"_ml/inference/test_regression\");\n+        request.setJsonEntity(REGRESSION_CONFIG);\n+        client().performRequest(request);\n+    }\n+\n+    public void clearMlState() throws Exception {\n+        new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata();\n+        ESRestTestCase.waitForPendingTasks(adminClient());\n+    }\n+\n+    @Override\n+    protected Settings restClientSettings() {\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", BASIC_AUTH_VALUE_SUPER_USER).build();\n     }\n \n     @After\n-    public void deleteBothModels() {\n-        client().execute(DeleteTrainedModelAction.INSTANCE, new DeleteTrainedModelAction.Request(\"test_classification\")).actionGet();\n-        client().execute(DeleteTrainedModelAction.INSTANCE, new DeleteTrainedModelAction.Request(\"test_regression\")).actionGet();\n+    public void cleanUpData() throws Exception {\n+        clearMlState();\n+        client().performRequest(new Request(\"DELETE\", \"_ml/inference/test_classification\"));\n+        client().performRequest(new Request(\"DELETE\", \"_ml/inference/test_regression\"));\n     }\n \n     public void testPipelineCreationAndDeletion() throws Exception {\n \n         for (int i = 0; i < 10; i++) {\n-            assertThat(client().admin().cluster().preparePutPipeline(\"simple_classification_pipeline\",\n-                new BytesArray(CLASSIFICATION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-                XContentType.JSON).get().isAcknowledged(), is(true));\n-\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(new HashMap<>(){{\n-                    put(\"col1\", randomFrom(\"female\", \"male\"));\n-                    put(\"col2\", randomFrom(\"S\", \"M\", \"L\", \"XL\"));\n-                    put(\"col3\", randomFrom(\"true\", \"false\", \"none\", \"other\"));\n-                    put(\"col4\", randomIntBetween(0, 10));\n-                }})\n-                .setPipeline(\"simple_classification_pipeline\")\n-                .get();\n-\n-            assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_classification_pipeline\").get().isAcknowledged(),\n-                is(true));\n-\n-            assertThat(client().admin().cluster().preparePutPipeline(\"simple_regression_pipeline\",\n-                new BytesArray(REGRESSION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-                XContentType.JSON).get().isAcknowledged(), is(true));\n-\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(new HashMap<>(){{\n-                    put(\"col1\", randomFrom(\"female\", \"male\"));\n-                    put(\"col2\", randomFrom(\"S\", \"M\", \"L\", \"XL\"));\n-                    put(\"col3\", randomFrom(\"true\", \"false\", \"none\", \"other\"));\n-                    put(\"col4\", randomIntBetween(0, 10));\n-                }})\n-                .setPipeline(\"simple_regression_pipeline\")\n-                .get();\n-\n-            assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_regression_pipeline\").get().isAcknowledged(),\n-                is(true));\n-        }\n+            client().performRequest(putPipeline(\"simple_classification_pipeline\", CLASSIFICATION_PIPELINE));\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_classification_pipeline\", generateSourceDoc()));\n+            client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_classification_pipeline\"));\n \n-        assertThat(client().admin().cluster().preparePutPipeline(\"simple_classification_pipeline\",\n-            new BytesArray(CLASSIFICATION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-            XContentType.JSON).get().isAcknowledged(), is(true));\n+            client().performRequest(putPipeline(\"simple_regression_pipeline\", REGRESSION_PIPELINE));\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_regression_pipeline\", generateSourceDoc()));\n+            client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_regression_pipeline\"));\n+        }\n \n-        assertThat(client().admin().cluster().preparePutPipeline(\"simple_regression_pipeline\",\n-            new BytesArray(REGRESSION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-            XContentType.JSON).get().isAcknowledged(), is(true));\n+        client().performRequest(putPipeline(\"simple_classification_pipeline\", CLASSIFICATION_PIPELINE));\n+        client().performRequest(putPipeline(\"simple_regression_pipeline\", REGRESSION_PIPELINE));\n \n         for (int i = 0; i < 10; i++) {\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(generateSourceDoc())\n-                .setPipeline(\"simple_classification_pipeline\")\n-                .get();\n-\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(generateSourceDoc())\n-                .setPipeline(\"simple_regression_pipeline\")\n-                .get();\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_classification_pipeline\", generateSourceDoc()));\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_regression_pipeline\", generateSourceDoc()));\n         }\n \n-        assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_classification_pipeline\").get().isAcknowledged(),\n-            is(true));\n-\n-        assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_regression_pipeline\").get().isAcknowledged(),\n-            is(true));\n-\n-        client().admin().indices().refresh(new RefreshRequest(\"index_for_inference_test\")).get();\n-\n-        assertThat(client().search(new SearchRequest().indices(\"index_for_inference_test\")\n-                .source(new SearchSourceBuilder()\n-                    .size(0)\n-                    .trackTotalHits(true)\n-                    .query(QueryBuilders.boolQuery()\n-                        .filter(\n-                            QueryBuilders.existsQuery(\"ml.inference.regression.predicted_value\"))))).get().getHits().getTotalHits().value,\n-            equalTo(20L));\n-\n-        assertThat(client().search(new SearchRequest().indices(\"index_for_inference_test\")\n-                .source(new SearchSourceBuilder()\n-                    .size(0)\n-                    .trackTotalHits(true)\n-                    .query(QueryBuilders.boolQuery()\n-                        .filter(\n-                            QueryBuilders.existsQuery(\"ml.inference.classification.predicted_value\")))))\n-                .get()\n-                .getHits()\n-                .getTotalHits()\n-                .value,\n-            equalTo(20L));\n+        client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_regression_pipeline\"));\n+        client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_classification_pipeline\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyODYwMQ==", "bodyText": "I could, but it is not really required as anything other than a 200 will throw.", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369528601", "createdAt": "2020-01-22T12:21:52Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -5,141 +5,107 @@\n  */\n package org.elasticsearch.xpack.ml.integration;\n \n-import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n-import org.elasticsearch.action.ingest.SimulateDocumentBaseResult;\n-import org.elasticsearch.action.ingest.SimulatePipelineResponse;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.common.bytes.BytesArray;\n-import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentHelper;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n-import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n-import org.elasticsearch.xpack.core.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.xpack.core.ml.integration.MlRestTestStateCleaner;\n import org.junit.After;\n import org.junit.Before;\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n \n-public class InferenceIngestIT extends MlNativeAutodetectIntegTestCase {\n+public class InferenceIngestIT extends ESRestTestCase {\n+\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER =\n+        basicAuthHeaderValue(\"x_pack_rest_user\", SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n \n     @Before\n     public void createBothModels() throws Exception {\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildClassificationModel())).actionGet();\n-        client().execute(PutTrainedModelAction.INSTANCE, new PutTrainedModelAction.Request(buildRegressionModel())).actionGet();\n+        Request request = new Request(\"PUT\", \"_ml/inference/test_classification\");\n+        request.setJsonEntity(CLASSIFICATION_CONFIG);\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"_ml/inference/test_regression\");\n+        request.setJsonEntity(REGRESSION_CONFIG);\n+        client().performRequest(request);\n+    }\n+\n+    public void clearMlState() throws Exception {\n+        new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata();\n+        ESRestTestCase.waitForPendingTasks(adminClient());\n+    }\n+\n+    @Override\n+    protected Settings restClientSettings() {\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", BASIC_AUTH_VALUE_SUPER_USER).build();\n     }\n \n     @After\n-    public void deleteBothModels() {\n-        client().execute(DeleteTrainedModelAction.INSTANCE, new DeleteTrainedModelAction.Request(\"test_classification\")).actionGet();\n-        client().execute(DeleteTrainedModelAction.INSTANCE, new DeleteTrainedModelAction.Request(\"test_regression\")).actionGet();\n+    public void cleanUpData() throws Exception {\n+        clearMlState();\n+        client().performRequest(new Request(\"DELETE\", \"_ml/inference/test_classification\"));\n+        client().performRequest(new Request(\"DELETE\", \"_ml/inference/test_regression\"));\n     }\n \n     public void testPipelineCreationAndDeletion() throws Exception {\n \n         for (int i = 0; i < 10; i++) {\n-            assertThat(client().admin().cluster().preparePutPipeline(\"simple_classification_pipeline\",\n-                new BytesArray(CLASSIFICATION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-                XContentType.JSON).get().isAcknowledged(), is(true));\n-\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(new HashMap<>(){{\n-                    put(\"col1\", randomFrom(\"female\", \"male\"));\n-                    put(\"col2\", randomFrom(\"S\", \"M\", \"L\", \"XL\"));\n-                    put(\"col3\", randomFrom(\"true\", \"false\", \"none\", \"other\"));\n-                    put(\"col4\", randomIntBetween(0, 10));\n-                }})\n-                .setPipeline(\"simple_classification_pipeline\")\n-                .get();\n-\n-            assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_classification_pipeline\").get().isAcknowledged(),\n-                is(true));\n-\n-            assertThat(client().admin().cluster().preparePutPipeline(\"simple_regression_pipeline\",\n-                new BytesArray(REGRESSION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-                XContentType.JSON).get().isAcknowledged(), is(true));\n-\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(new HashMap<>(){{\n-                    put(\"col1\", randomFrom(\"female\", \"male\"));\n-                    put(\"col2\", randomFrom(\"S\", \"M\", \"L\", \"XL\"));\n-                    put(\"col3\", randomFrom(\"true\", \"false\", \"none\", \"other\"));\n-                    put(\"col4\", randomIntBetween(0, 10));\n-                }})\n-                .setPipeline(\"simple_regression_pipeline\")\n-                .get();\n-\n-            assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_regression_pipeline\").get().isAcknowledged(),\n-                is(true));\n-        }\n+            client().performRequest(putPipeline(\"simple_classification_pipeline\", CLASSIFICATION_PIPELINE));\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_classification_pipeline\", generateSourceDoc()));\n+            client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_classification_pipeline\"));\n \n-        assertThat(client().admin().cluster().preparePutPipeline(\"simple_classification_pipeline\",\n-            new BytesArray(CLASSIFICATION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-            XContentType.JSON).get().isAcknowledged(), is(true));\n+            client().performRequest(putPipeline(\"simple_regression_pipeline\", REGRESSION_PIPELINE));\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_regression_pipeline\", generateSourceDoc()));\n+            client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_regression_pipeline\"));\n+        }\n \n-        assertThat(client().admin().cluster().preparePutPipeline(\"simple_regression_pipeline\",\n-            new BytesArray(REGRESSION_PIPELINE.getBytes(StandardCharsets.UTF_8)),\n-            XContentType.JSON).get().isAcknowledged(), is(true));\n+        client().performRequest(putPipeline(\"simple_classification_pipeline\", CLASSIFICATION_PIPELINE));\n+        client().performRequest(putPipeline(\"simple_regression_pipeline\", REGRESSION_PIPELINE));\n \n         for (int i = 0; i < 10; i++) {\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(generateSourceDoc())\n-                .setPipeline(\"simple_classification_pipeline\")\n-                .get();\n-\n-            client().prepareIndex(\"index_for_inference_test\")\n-                .setSource(generateSourceDoc())\n-                .setPipeline(\"simple_regression_pipeline\")\n-                .get();\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_classification_pipeline\", generateSourceDoc()));\n+            client().performRequest(indexRequest(\"index_for_inference_test\", \"simple_regression_pipeline\", generateSourceDoc()));\n         }\n \n-        assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_classification_pipeline\").get().isAcknowledged(),\n-            is(true));\n-\n-        assertThat(client().admin().cluster().prepareDeletePipeline(\"simple_regression_pipeline\").get().isAcknowledged(),\n-            is(true));\n-\n-        client().admin().indices().refresh(new RefreshRequest(\"index_for_inference_test\")).get();\n-\n-        assertThat(client().search(new SearchRequest().indices(\"index_for_inference_test\")\n-                .source(new SearchSourceBuilder()\n-                    .size(0)\n-                    .trackTotalHits(true)\n-                    .query(QueryBuilders.boolQuery()\n-                        .filter(\n-                            QueryBuilders.existsQuery(\"ml.inference.regression.predicted_value\"))))).get().getHits().getTotalHits().value,\n-            equalTo(20L));\n-\n-        assertThat(client().search(new SearchRequest().indices(\"index_for_inference_test\")\n-                .source(new SearchSourceBuilder()\n-                    .size(0)\n-                    .trackTotalHits(true)\n-                    .query(QueryBuilders.boolQuery()\n-                        .filter(\n-                            QueryBuilders.existsQuery(\"ml.inference.classification.predicted_value\")))))\n-                .get()\n-                .getHits()\n-                .getTotalHits()\n-                .value,\n-            equalTo(20L));\n+        client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_regression_pipeline\"));\n+        client().performRequest(new Request(\"DELETE\", \"_ingest/pipeline/simple_classification_pipeline\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDg5Mw=="}, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzE3Mzc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1OTozMlrOFgTJZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjoyMjozMFrOFgaQKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMjQ1NA==", "bodyText": "Is this a standard practice in REST tests to grep for substrings rather than parsing the response into JSON?", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369412454", "createdAt": "2020-01-22T07:59:32Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -181,15 +147,10 @@ public void testSimulate() {\n             \"    }}]\\n\" +\n             \"}\";\n \n-        SimulatePipelineResponse response = client().admin().cluster()\n-            .prepareSimulatePipeline(new BytesArray(source.getBytes(StandardCharsets.UTF_8)),\n-                XContentType.JSON).get();\n-        SimulateDocumentBaseResult baseResult = (SimulateDocumentBaseResult)response.getResults().get(0);\n-        assertThat(baseResult.getIngestDocument().getFieldValue(\"ml.regression.predicted_value\", Double.class), equalTo(1.0));\n-        assertThat(baseResult.getIngestDocument().getFieldValue(\"ml.classification.predicted_value\", String.class),\n-            equalTo(\"second\"));\n-        assertThat(baseResult.getIngestDocument().getFieldValue(\"ml.classification.result_class_prob\", List.class).size(),\n-            equalTo(2));\n+        Response response = client().performRequest(simulateRequest(source));\n+        String responseString = EntityUtils.toString(response.getEntity());\n+        assertThat(responseString, containsString(\"\\\"predicted_value\\\":\\\"second\\\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyODg3NQ==", "bodyText": "Yes, it is. It checks what I want without having to parse an object.", "url": "https://github.com/elastic/elasticsearch/pull/51267#discussion_r369528875", "createdAt": "2020-01-22T12:22:30Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -181,15 +147,10 @@ public void testSimulate() {\n             \"    }}]\\n\" +\n             \"}\";\n \n-        SimulatePipelineResponse response = client().admin().cluster()\n-            .prepareSimulatePipeline(new BytesArray(source.getBytes(StandardCharsets.UTF_8)),\n-                XContentType.JSON).get();\n-        SimulateDocumentBaseResult baseResult = (SimulateDocumentBaseResult)response.getResults().get(0);\n-        assertThat(baseResult.getIngestDocument().getFieldValue(\"ml.regression.predicted_value\", Double.class), equalTo(1.0));\n-        assertThat(baseResult.getIngestDocument().getFieldValue(\"ml.classification.predicted_value\", String.class),\n-            equalTo(\"second\"));\n-        assertThat(baseResult.getIngestDocument().getFieldValue(\"ml.classification.result_class_prob\", List.class).size(),\n-            equalTo(2));\n+        Response response = client().performRequest(simulateRequest(source));\n+        String responseString = EntityUtils.toString(response.getEntity());\n+        assertThat(responseString, containsString(\"\\\"predicted_value\\\":\\\"second\\\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMjQ1NA=="}, "originalCommit": {"oid": "c4d6115e383a28488e35dd6989c1927ff282dce6"}, "originalPosition": 224}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4409, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}