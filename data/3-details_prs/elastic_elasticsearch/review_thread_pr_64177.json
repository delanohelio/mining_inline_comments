{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMTc1MjQ4", "number": 64177, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowODo0NVrOEy41xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowOTo0NFrOEy43sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzk1NTI3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowODo0NVrOHpx7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyOToxNFrOHrUPKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MTYxMA==", "bodyText": "This is a substantional enough class that it should be pulled out into it's own file.", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r513571610", "createdAt": "2020-10-28T16:08:45Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -31,40 +31,56 @@\n \n     /* ---- begin decorations ---- */\n \n-    public interface IRDecoration {\n+    public abstract static class IRDecoration<V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f3e98230120f60bc2e4717dd866630a5f4ab5e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4MjM3Ng==", "bodyText": "I agree, but I'm going to hold off on this for now as I think we should reorg everything into user and ir packages with subpackages for node and phase. I will do that in a follow up PR.", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r515182376", "createdAt": "2020-10-30T15:29:14Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -31,40 +31,56 @@\n \n     /* ---- begin decorations ---- */\n \n-    public interface IRDecoration {\n+    public abstract static class IRDecoration<V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MTYxMA=="}, "originalCommit": {"oid": "40f3e98230120f60bc2e4717dd866630a5f4ab5e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzk2MDE2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowOTo0NFrOHpx-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTozMzozMFrOHrUfmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MjQyNg==", "bodyText": "getDecorationValueOrDefault", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r513572426", "createdAt": "2020-10-28T16:09:44Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -31,40 +31,56 @@\n \n     /* ---- begin decorations ---- */\n \n-    public interface IRDecoration {\n+    public abstract static class IRDecoration<V> {\n \n+        private final V value;\n+\n+        public IRDecoration(V value) {\n+            this.value = value;\n+        }\n+\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return value.toString();\n+        }\n     }\n \n-    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n+    private final Map<Class<? extends IRDecoration<?>>, IRDecoration<?>> decorations = new HashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends IRDecoration> T attachDecoration(T decoration) {\n-        return (T)decorations.put(decoration.getClass(), decoration);\n+    public <V> V attachDecoration(IRDecoration<V> decoration) {\n+        IRDecoration<V> previous = (IRDecoration<V>)decorations.put((Class<? extends IRDecoration<?>>)decoration.getClass(), decoration);\n+        return previous == null ? null : previous.getValue();\n     }\n \n-    public <T extends IRDecoration> T removeDecoration(Class<T> type) {\n+    public <T extends IRDecoration<?>> T removeDecoration(Class<T> type) {\n         return type.cast(decorations.remove(type));\n     }\n \n-    public <T extends IRDecoration> T getDecoration(Class<T> type) {\n-        return type.cast(decorations.get(type));\n-    }\n-\n-    public boolean hasDecoration(Class<? extends IRDecoration> type) {\n+    public boolean hasDecoration(Class<? extends IRDecoration<?>> type) {\n         return decorations.containsKey(type);\n     }\n \n-    public <T extends IRDecoration> boolean copyDecorationFrom(IRNode copyFromIRNode, Class<T> type) {\n-        T decoration = copyFromIRNode.getDecoration(type);\n-\n+    public <T extends IRDecoration<?>> T getDecoration(Class<T> type) {\n+        return type.cast(decorations.get(type));\n+    }\n \n-        if (decoration != null) {\n-            attachDecoration(decoration);\n+    public <T extends IRDecoration<V>, V> V getDecorationValue(Class<T> type) {\n+        return getDecorationValueOrDefaultValue(type, null);\n+    }\n \n-            return true;\n-        }\n+    public <T extends IRDecoration<V>, V> V getDecorationValueOrDefaultValue(Class<T> type, V defaultValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f3e98230120f60bc2e4717dd866630a5f4ab5e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4NjU4NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r515186584", "createdAt": "2020-10-30T15:33:30Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -31,40 +31,56 @@\n \n     /* ---- begin decorations ---- */\n \n-    public interface IRDecoration {\n+    public abstract static class IRDecoration<V> {\n \n+        private final V value;\n+\n+        public IRDecoration(V value) {\n+            this.value = value;\n+        }\n+\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return value.toString();\n+        }\n     }\n \n-    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n+    private final Map<Class<? extends IRDecoration<?>>, IRDecoration<?>> decorations = new HashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends IRDecoration> T attachDecoration(T decoration) {\n-        return (T)decorations.put(decoration.getClass(), decoration);\n+    public <V> V attachDecoration(IRDecoration<V> decoration) {\n+        IRDecoration<V> previous = (IRDecoration<V>)decorations.put((Class<? extends IRDecoration<?>>)decoration.getClass(), decoration);\n+        return previous == null ? null : previous.getValue();\n     }\n \n-    public <T extends IRDecoration> T removeDecoration(Class<T> type) {\n+    public <T extends IRDecoration<?>> T removeDecoration(Class<T> type) {\n         return type.cast(decorations.remove(type));\n     }\n \n-    public <T extends IRDecoration> T getDecoration(Class<T> type) {\n-        return type.cast(decorations.get(type));\n-    }\n-\n-    public boolean hasDecoration(Class<? extends IRDecoration> type) {\n+    public boolean hasDecoration(Class<? extends IRDecoration<?>> type) {\n         return decorations.containsKey(type);\n     }\n \n-    public <T extends IRDecoration> boolean copyDecorationFrom(IRNode copyFromIRNode, Class<T> type) {\n-        T decoration = copyFromIRNode.getDecoration(type);\n-\n+    public <T extends IRDecoration<?>> T getDecoration(Class<T> type) {\n+        return type.cast(decorations.get(type));\n+    }\n \n-        if (decoration != null) {\n-            attachDecoration(decoration);\n+    public <T extends IRDecoration<V>, V> V getDecorationValue(Class<T> type) {\n+        return getDecorationValueOrDefaultValue(type, null);\n+    }\n \n-            return true;\n-        }\n+    public <T extends IRDecoration<V>, V> V getDecorationValueOrDefaultValue(Class<T> type, V defaultValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MjQyNg=="}, "originalCommit": {"oid": "40f3e98230120f60bc2e4717dd866630a5f4ab5e"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4185, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}