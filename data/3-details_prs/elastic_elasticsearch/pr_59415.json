{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjQ3NzUw", "number": 59415, "title": "EQL: Add telemetry metrics", "bodyText": "This PR is the second part of the telemetry work for EQL, by adding the actual metrics to the telemetry reports.", "createdAt": "2020-07-13T13:14:23Z", "url": "https://github.com/elastic/elasticsearch/pull/59415", "merged": true, "mergeCommit": {"oid": "fe7b667c0f3a20e4efc6855a4f77623e1d1aada7"}, "closed": true, "closedAt": "2020-07-14T13:25:54Z", "author": {"login": "astefan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczRqNzgH2gAyNDQ4MjQ3NzUwOmUzNzBjZmY1MWFiZjYxNGZmNDc0MDg2Y2I1NjZmYzAwOTc0Yjk0NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc01NXtgH2gAyNDQ4MjQ3NzUwOmVlYzRjZmRmOWZhZmQ4MTlmZDQxODA3MjAxNjIxZTQzMTA1YmQ2ZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e370cff51abf614ff474086cb566fc00974b945c", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/e370cff51abf614ff474086cb566fc00974b945c", "committedDate": "2020-07-09T16:30:43Z", "message": "Add metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1279e338e6c6723935b827b4635a9ccb74137720", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/1279e338e6c6723935b827b4635a9ccb74137720", "committedDate": "2020-07-09T16:31:10Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into telemetry_metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8fdd68977e6f92e4889ad850cc802ef76bc955b", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/b8fdd68977e6f92e4889ad850cc802ef76bc955b", "committedDate": "2020-07-13T13:06:28Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c05019fc29e8384f7c4701bf6393c44c263020f", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/3c05019fc29e8384f7c4701bf6393c44c263020f", "committedDate": "2020-07-13T13:07:17Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into telemetry_metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6abfc90926b1263aa75cea4208c0203110e3820a", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/6abfc90926b1263aa75cea4208c0203110e3820a", "committedDate": "2020-07-13T15:18:30Z", "message": "Create a common \"pipes\" section and put there head and tail\nSplit \"until\" and place a join_until and sequence_until in each\ncorrespondent section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9145a049f3e8e1e54a902f26cb38090e3dc9160c", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/9145a049f3e8e1e54a902f26cb38090e3dc9160c", "committedDate": "2020-07-13T15:18:55Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into telemetry_metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzU5MjE0", "url": "https://github.com/elastic/elasticsearch/pull/59415#pullrequestreview-447359214", "createdAt": "2020-07-13T15:28:28Z", "commit": {"oid": "9145a049f3e8e1e54a902f26cb38090e3dc9160c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOGwtv9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOGwtv9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNDM5MA==", "bodyText": "It would be better to have an object that contains all the counters so moving them around doesn't affect the method signature and thus all calls of it.", "url": "https://github.com/elastic/elasticsearch/pull/59415#discussion_r453734390", "createdAt": "2020-07-13T15:28:29Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/stats/VerifierMetricsTests.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.stats;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.watcher.common.stats.Counters;\n+import org.elasticsearch.xpack.eql.EqlTestUtils;\n+import org.elasticsearch.xpack.eql.analysis.Analyzer;\n+import org.elasticsearch.xpack.eql.analysis.PreAnalyzer;\n+import org.elasticsearch.xpack.eql.analysis.Verifier;\n+import org.elasticsearch.xpack.eql.expression.function.EqlFunctionRegistry;\n+import org.elasticsearch.xpack.eql.optimizer.OptimizerTests;\n+import org.elasticsearch.xpack.eql.parser.EqlParser;\n+import org.elasticsearch.xpack.ql.index.IndexResolution;\n+\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.EVENT;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_ONE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_HEAD;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_TAIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_MAXSPAN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.FPREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.JOIN_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.KEYS_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.PIPES_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.SEQUENCE_PREFIX;\n+\n+public class VerifierMetricsTests extends ESTestCase {\n+    \n+    private EqlParser parser = new EqlParser();\n+    private PreAnalyzer preAnalyzer = new PreAnalyzer();\n+    private EqlFunctionRegistry eqlFunctionRegistry = new EqlFunctionRegistry();\n+    private IndexResolution index = OptimizerTests.loadIndexResolution(\"mapping-default.json\");\n+    protected static String FEATURES_KEYS_PREFIX = FPREFIX + KEYS_PREFIX;\n+    protected static String FEATURES_JOIN_PREFIX = FPREFIX + JOIN_PREFIX;\n+    protected static String FEATURES_SEQUENCE_PREFIX = FPREFIX + SEQUENCE_PREFIX;\n+    protected static String FEATURES_PIPES_PREFIX = FPREFIX + PIPES_PREFIX;\n+    \n+    public void testEventQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceQuery() {\n+        Counters c = eql(\"sequence\\r\\n\" + \n+            \"  [process where serial_event_id = 1]\\r\\n\" + \n+            \"  [process where serial_event_id = 2]\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+\n+    @AwaitsFix(bugUrl = \"waiting for the join implementation\")\n+    public void testJoinQuery() {\n+        Counters c = eql(\"join\\r\\n\" + \n+            \"  [file where file_name=\\\"*.exe\\\"] by ppid\\r\\n\" + \n+            \"  [file where file_name=\\\"*.com\\\"] by pid\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 1\");\n+        assertCounters(0, 0, 1L, 1L, 0, 0, 0, 1L, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testHeadQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | head 2\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testTailQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | tail 2\");\n+        assertCounters(0, 1L, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceMaxSpanQuery() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [process where opcode == 2] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithTwoQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithFiveQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithSevenQueries() {\n+        Counters c = eql(\"sequence by exit_code, user\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"]\\r\\n\" +\n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"| tail 1\");\n+        assertCounters(1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithFourKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, c);\n+    }\n+\n+    public void testSequenceWithFiveKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid, ppid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, c);\n+    }    \n+\n+    private void assertCounters(long sequence, long event, long join, long head, long tail, long seqMaxSpan, long seqUntil, long joinUntil,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9145a049f3e8e1e54a902f26cb38090e3dc9160c"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Mzk3MDA2", "url": "https://github.com/elastic/elasticsearch/pull/59415#pullrequestreview-447397006", "createdAt": "2020-07-13T16:12:01Z", "commit": {"oid": "9145a049f3e8e1e54a902f26cb38090e3dc9160c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoxMjowMlrOGwvoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoxMjowMlrOGwvoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NTE0NQ==", "bodyText": "+1", "url": "https://github.com/elastic/elasticsearch/pull/59415#discussion_r453765145", "createdAt": "2020-07-13T16:12:02Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/stats/VerifierMetricsTests.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.stats;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.watcher.common.stats.Counters;\n+import org.elasticsearch.xpack.eql.EqlTestUtils;\n+import org.elasticsearch.xpack.eql.analysis.Analyzer;\n+import org.elasticsearch.xpack.eql.analysis.PreAnalyzer;\n+import org.elasticsearch.xpack.eql.analysis.Verifier;\n+import org.elasticsearch.xpack.eql.expression.function.EqlFunctionRegistry;\n+import org.elasticsearch.xpack.eql.optimizer.OptimizerTests;\n+import org.elasticsearch.xpack.eql.parser.EqlParser;\n+import org.elasticsearch.xpack.ql.index.IndexResolution;\n+\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.EVENT;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_ONE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_HEAD;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_TAIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_MAXSPAN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.FPREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.JOIN_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.KEYS_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.PIPES_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.SEQUENCE_PREFIX;\n+\n+public class VerifierMetricsTests extends ESTestCase {\n+    \n+    private EqlParser parser = new EqlParser();\n+    private PreAnalyzer preAnalyzer = new PreAnalyzer();\n+    private EqlFunctionRegistry eqlFunctionRegistry = new EqlFunctionRegistry();\n+    private IndexResolution index = OptimizerTests.loadIndexResolution(\"mapping-default.json\");\n+    protected static String FEATURES_KEYS_PREFIX = FPREFIX + KEYS_PREFIX;\n+    protected static String FEATURES_JOIN_PREFIX = FPREFIX + JOIN_PREFIX;\n+    protected static String FEATURES_SEQUENCE_PREFIX = FPREFIX + SEQUENCE_PREFIX;\n+    protected static String FEATURES_PIPES_PREFIX = FPREFIX + PIPES_PREFIX;\n+    \n+    public void testEventQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceQuery() {\n+        Counters c = eql(\"sequence\\r\\n\" + \n+            \"  [process where serial_event_id = 1]\\r\\n\" + \n+            \"  [process where serial_event_id = 2]\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+\n+    @AwaitsFix(bugUrl = \"waiting for the join implementation\")\n+    public void testJoinQuery() {\n+        Counters c = eql(\"join\\r\\n\" + \n+            \"  [file where file_name=\\\"*.exe\\\"] by ppid\\r\\n\" + \n+            \"  [file where file_name=\\\"*.com\\\"] by pid\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 1\");\n+        assertCounters(0, 0, 1L, 1L, 0, 0, 0, 1L, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testHeadQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | head 2\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testTailQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | tail 2\");\n+        assertCounters(0, 1L, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceMaxSpanQuery() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [process where opcode == 2] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithTwoQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithFiveQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithSevenQueries() {\n+        Counters c = eql(\"sequence by exit_code, user\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"]\\r\\n\" +\n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"| tail 1\");\n+        assertCounters(1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithFourKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, c);\n+    }\n+\n+    public void testSequenceWithFiveKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid, ppid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, c);\n+    }    \n+\n+    private void assertCounters(long sequence, long event, long join, long head, long tail, long seqMaxSpan, long seqUntil, long joinUntil,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNDM5MA=="}, "originalCommit": {"oid": "9145a049f3e8e1e54a902f26cb38090e3dc9160c"}, "originalPosition": 166}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6069444dc9986bd0d9f5b0cff3de1732ae970e36", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/6069444dc9986bd0d9f5b0cff3de1732ae970e36", "committedDate": "2020-07-14T07:52:16Z", "message": "Improve the prefix handling for FeatureMetric"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2878116209e76ddfcbca15ff8299fb4c817b75e8", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/2878116209e76ddfcbca15ff8299fb4c817b75e8", "committedDate": "2020-07-14T07:52:44Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into telemetry_metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fd7c37a6749a55c9986bf4ce1bf9b9edfdb501a", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/5fd7c37a6749a55c9986bf4ce1bf9b9edfdb501a", "committedDate": "2020-07-14T12:29:15Z", "message": "Bump the supported version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eec4cfdf9fafd819fd41807201621e43105bd6ec", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/eec4cfdf9fafd819fd41807201621e43105bd6ec", "committedDate": "2020-07-14T12:29:43Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into telemetry_metrics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4533, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}