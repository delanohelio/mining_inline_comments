{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDQ1MDE2", "number": 51889, "title": "[ML] Add bwc serialization unit test scaffold", "bodyText": "Adds new AbstractBWCSerializationTestCase which provides easy scaffolding for BWC serialization unit tests.\nThese are no replacement for true BWC tests (which execute actual old code). These tests do provide some good coverage for the current code when serializing to/from old versions.\nI changed one of our object model serialization test classes to take advantage of this change.\nI think this scaffolding could be made more general/available once we have exercised it to determine it is good enough for mass consumption within the testing framework.", "createdAt": "2020-02-04T20:53:06Z", "url": "https://github.com/elastic/elasticsearch/pull/51889", "merged": true, "mergeCommit": {"oid": "d03aae7a0bd102e35b649e3b9aa1063ddc2d228c"}, "closed": true, "closedAt": "2020-02-07T16:21:44Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBH3jKgH2gAyMzcxMDQ1MDE2OjNkOGNjMDQxOTM3ODgxNTUxNzFmMGJhMDYwODg4ZTQ1YzA5MWEwMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCA_HOAFqTM1NTIzMTU0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3d8cc04193788155171f0ba060888e45c091a003", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/3d8cc04193788155171f0ba060888e45c091a003", "committedDate": "2020-02-04T20:50:01Z", "message": "[ML] Add bwc serialization unit test scaffold"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84470ada6e4f42d77a9b02534255eef6f8b76ae8", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/84470ada6e4f42d77a9b02534255eef6f8b76ae8", "committedDate": "2020-02-04T21:14:09Z", "message": "Merge branch 'master' into feature/ml-add-bwc-serialization-unit-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/2ea86d71501ac4fa7922d79219b8a1c8fee3538f", "committedDate": "2020-02-05T12:10:53Z", "message": "Merge branch 'master' into feature/ml-add-bwc-serialization-unit-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NDEzNTY1", "url": "https://github.com/elastic/elasticsearch/pull/51889#pullrequestreview-354413565", "createdAt": "2020-02-06T12:30:53Z", "commit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMDo1M1rOFmZbxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozOTo0OFrOFmZqKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNjkxOQ==", "bodyText": "This bit seems like it belongs in the tests for OutlierDetection. However, we'd need to access that mutation from here too to make this test work. We could reuse the mutateInstanceForVersion method of other tests here (by extracting the logic in a static method, similarly to our createRandom methods). However, I don't see how we'd get rid of the instanceof here.\nOne thing this makes me wonder is if it'd be better to design this in a way where we have a separate test for each BWC change we're testing. Say we have for example a private test method that takes some params and we can call it from different tests where we isolate the change we're testing. That would help avoiding mutateInstanceForVersion become too complex.\nI like the idea of having these tests a lot, don't take me wrong! I think it's great! Just pondering a few ideas on the details.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375806919", "createdAt": "2020-02-06T12:30:53Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed\n+            }\n+            builder.setSource(new DataFrameAnalyticsSource.Builder(instance.getSource())\n+                .setSourceFiltering(null)\n+                .build());\n+        }\n+        if (version.before(Version.V_7_5_0)) {\n+            builder.setAllowLazyStart(false);\n+            if (instance.getAnalysis() instanceof OutlierDetection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNzQ0Ng==", "bodyText": "Do these belong in the respective test classes? See below.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375807446", "createdAt": "2020-02-06T12:32:12Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxMDYwMw==", "bodyText": "This one too. Also, I wonder if it's worth having a Builder class for this just for this test. If we had a DataFrameAnalyticsSourceTests.mutateInstanceForVersion it could perform this logic just by using the constructor.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r375810603", "createdAt": "2020-02-06T12:39:48Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +90,49 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return Arrays.asList(Version.V_7_0_0,\n+            Version.V_7_1_1,\n+            Version.V_7_2_1,\n+            Version.V_7_3_2,\n+            Version.V_7_4_2,\n+            Version.V_7_5_3,\n+            Version.V_7_6_0,\n+            Version.V_7_7_0);\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfig mutateInstanceForVersion(DataFrameAnalyticsConfig instance, Version version) {\n+        DataFrameAnalyticsConfig.Builder builder = new DataFrameAnalyticsConfig.Builder(instance);\n+        if (version.before(Version.V_7_6_0)) {\n+            if (instance.getAnalysis() instanceof Regression) {\n+                // TODO regression and classification serialize a randomized value for the random seed\n+            }\n+            builder.setSource(new DataFrameAnalyticsSource.Builder(instance.getSource())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea86d71501ac4fa7922d79219b8a1c8fee3538f"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/620c8a027a01fd87711255d2d702fb298f2fee66", "committedDate": "2020-02-06T16:32:13Z", "message": "generating versions, improving scaffolding"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTc0Njk4", "url": "https://github.com/elastic/elasticsearch/pull/51889#pullrequestreview-355174698", "createdAt": "2020-02-07T14:02:14Z", "commit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTk1MzI4", "url": "https://github.com/elastic/elasticsearch/pull/51889#pullrequestreview-355195328", "createdAt": "2020-02-07T14:32:59Z", "commit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozMjo1OVrOFm-4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozODo0OFrOFm_ERw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDM1Ng==", "bodyText": "Question: I wonder if that's robust w.r.t. the \"ghost\" version, which does not really exist. E.g. we have a constant for 7.5.3 which will exist until 7.6.0 (or 7.6.1?) is released. I do not recall the logic, but there is some magic version.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376420356", "createdAt": "2020-02-07T14:32:59Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.test.AbstractSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.Version.getDeclaredVersions;\n+\n+public abstract class AbstractBWCSerializationTestCase<T extends Writeable & ToXContent> extends AbstractSerializingTestCase<T> {\n+\n+    private static final List<Version> ALL_VERSIONS = Collections.unmodifiableList(getDeclaredVersions(Version.class));\n+\n+    public static List<Version> getAllBWCVersions(Version version) {\n+        return ALL_VERSIONS.stream().filter(v -> v.before(version) && version.isCompatible(v)).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjAzOA==", "bodyText": "why is it overridden? why is DEFAULT_BWC_VERSIONS not sufficient?\n(if possible add the answer as code comment)", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376422038", "createdAt": "2020-02-07T14:36:01Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigTests.java", "diffHunk": "@@ -88,6 +93,88 @@ protected DataFrameAnalyticsConfig createTestInstance() {\n         return createRandom(randomValidId(), lenient);\n     }\n \n+    @Override\n+    protected List<Version> bwcVersions() {\n+        return AbstractBWCSerializationTestCase.getAllBWCVersions(Version.V_7_7_0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMzQ5NQ==", "bodyText": "how do you ignore versions where the feature does not exist yet, e.g. 7.1??\nI think we never check that.", "url": "https://github.com/elastic/elasticsearch/pull/51889#discussion_r376423495", "createdAt": "2020-02-07T14:38:48Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/AbstractBWCSerializationTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.test.AbstractSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.Version.getDeclaredVersions;\n+\n+public abstract class AbstractBWCSerializationTestCase<T extends Writeable & ToXContent> extends AbstractSerializingTestCase<T> {\n+\n+    private static final List<Version> ALL_VERSIONS = Collections.unmodifiableList(getDeclaredVersions(Version.class));\n+\n+    public static List<Version> getAllBWCVersions(Version version) {\n+        return ALL_VERSIONS.stream().filter(v -> v.before(version) && version.isCompatible(v)).collect(Collectors.toList());\n+    }\n+\n+    private static final List<Version> DEFAULT_BWC_VERSIONS = getAllBWCVersions(Version.CURRENT);\n+\n+    /**\n+     * Returns the expected instance if serialized from the given version.\n+     */\n+    protected abstract T mutateInstanceForVersion(T instance, Version version);\n+\n+    /**\n+     * The bwc versions to test serialization against\n+     */\n+    protected List<Version> bwcVersions() {\n+        return DEFAULT_BWC_VERSIONS;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjMxNTQx", "url": "https://github.com/elastic/elasticsearch/pull/51889#pullrequestreview-355231541", "createdAt": "2020-02-07T15:22:52Z", "commit": {"oid": "620c8a027a01fd87711255d2d702fb298f2fee66"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2785, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}