{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTAzNjA1", "number": 56514, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDozNTowN1rOD7RFFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1MzoxMVrOD7RkdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDcyNDA0OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/transform/transforms/pivot/GeoTileGroupSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDozNTowN1rOGTfFtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxMjozOVrOGTllOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4NTQ5Mw==", "bodyText": "could we use transform instead?", "url": "https://github.com/elastic/elasticsearch/pull/56514#discussion_r423085493", "createdAt": "2020-05-11T14:35:07Z", "author": {"login": "hendrikmuhs"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/transform/transforms/pivot/GeoTileGroupSource.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.transform.transforms.pivot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.geogrid.GeoTileUtils;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/*\n+ * A geotile_grid aggregation source for group_by\n+ */\n+public class GeoTileGroupSource extends SingleGroupSource implements ToXContentObject {\n+    private static final String NAME = \"data_frame_geo_tile_group\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268dd8420ac3d82460afac0c1b84129c1c6908af"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MTg2Nw==", "bodyText": "for sure! This is copy-paste from other group sources.", "url": "https://github.com/elastic/elasticsearch/pull/56514#discussion_r423191867", "createdAt": "2020-05-11T17:12:39Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/transform/transforms/pivot/GeoTileGroupSource.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.transform.transforms.pivot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.geogrid.GeoTileUtils;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/*\n+ * A geotile_grid aggregation source for group_by\n+ */\n+public class GeoTileGroupSource extends SingleGroupSource implements ToXContentObject {\n+    private static final String NAME = \"data_frame_geo_tile_group\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4NTQ5Mw=="}, "originalCommit": {"oid": "268dd8420ac3d82460afac0c1b84129c1c6908af"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDc0ODQ4OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/transform/transforms/pivot/GeoTileGroupSourceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo0MDoyMVrOGTfUyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo0MDoyMVrOGTfUyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4OTM1NQ==", "bodyText": "could you also add a test class in org.elasticsearch.client.transform.transforms.pivot.hlrc?", "url": "https://github.com/elastic/elasticsearch/pull/56514#discussion_r423089355", "createdAt": "2020-05-11T14:40:21Z", "author": {"login": "hendrikmuhs"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/transform/transforms/pivot/GeoTileGroupSourceTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.transform.transforms.pivot;\n+\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+import org.elasticsearch.common.geo.GeoPoint;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.geo.GeometryTestUtils;\n+import org.elasticsearch.geometry.Rectangle;\n+import org.elasticsearch.search.aggregations.bucket.geogrid.GeoTileUtils;\n+import org.elasticsearch.test.AbstractXContentTestCase;\n+\n+import java.io.IOException;\n+import java.util.function.Predicate;\n+\n+public class GeoTileGroupSourceTests extends AbstractXContentTestCase<GeoTileGroupSource> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268dd8420ac3d82460afac0c1b84129c1c6908af"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDc2NTMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/GeoTileGroupSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo0NDoxN1rOGTffzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo0NDoxN1rOGTffzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5MjE3NA==", "bodyText": "could we use transform instead?\n(FWIW: we still need to figure out some more renames without breaking BWC, still I suggest to use transform for new code)", "url": "https://github.com/elastic/elasticsearch/pull/56514#discussion_r423092174", "createdAt": "2020-05-11T14:44:17Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/GeoTileGroupSource.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.transform.transforms.pivot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+import org.elasticsearch.common.geo.GeoPoint;\n+import org.elasticsearch.common.geo.parsers.ShapeParser;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.geometry.Rectangle;\n+import org.elasticsearch.index.mapper.GeoShapeFieldMapper;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.GeoBoundingBoxQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.aggregations.bucket.geogrid.GeoTileUtils;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/*\n+ * A geotile_grid aggregation source for group_by\n+ */\n+public class GeoTileGroupSource extends SingleGroupSource {\n+    private static final String NAME = \"data_frame_geo_tile_group\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268dd8420ac3d82460afac0c1b84129c1c6908af"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDgwNDM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/SchemaUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1MzoxMVrOGTf4pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToyMjo1MFrOGTqELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5ODUzMg==", "bodyText": "nit:\nif (group.getMappingType() != null) {\n    fieldTypesForGrouping.put(destinationFieldName, group.getMappingType());\n} else {\n    fieldNamesForGrouping.put(destinationFieldName, group.getField());\n}", "url": "https://github.com/elastic/elasticsearch/pull/56514#discussion_r423098532", "createdAt": "2020-05-11T14:53:11Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/SchemaUtil.java", "diffHunk": "@@ -68,10 +70,18 @@ public static void deduceMappings(\n         Map<String, String> aggregationTypes = new HashMap<>();\n         // collects the fieldnames and target fieldnames used for grouping\n         Map<String, String> fieldNamesForGrouping = new HashMap<>();\n+        // collects the target mapping types used for grouping\n+        Map<String, String> fieldTypesForGrouping = new HashMap<>();\n \n         config.getGroupConfig()\n             .getGroups()\n-            .forEach((destinationFieldName, group) -> { fieldNamesForGrouping.put(destinationFieldName, group.getField()); });\n+            .forEach((destinationFieldName, group) -> {\n+                fieldNamesForGrouping.put(destinationFieldName, group.getField());\n+                if (group.getMappingType() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268dd8420ac3d82460afac0c1b84129c1c6908af"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2MTgwOA==", "bodyText": "This won't work, fieldNamesForGrouping always needs the group config field name so that it can add it to the mapping. Sometimes the group config has a desired type and that will get added to the new fieldTypesForGrouping map.\nAdding comments explaining such.", "url": "https://github.com/elastic/elasticsearch/pull/56514#discussion_r423261808", "createdAt": "2020-05-11T19:16:11Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/SchemaUtil.java", "diffHunk": "@@ -68,10 +70,18 @@ public static void deduceMappings(\n         Map<String, String> aggregationTypes = new HashMap<>();\n         // collects the fieldnames and target fieldnames used for grouping\n         Map<String, String> fieldNamesForGrouping = new HashMap<>();\n+        // collects the target mapping types used for grouping\n+        Map<String, String> fieldTypesForGrouping = new HashMap<>();\n \n         config.getGroupConfig()\n             .getGroups()\n-            .forEach((destinationFieldName, group) -> { fieldNamesForGrouping.put(destinationFieldName, group.getField()); });\n+            .forEach((destinationFieldName, group) -> {\n+                fieldNamesForGrouping.put(destinationFieldName, group.getField());\n+                if (group.getMappingType() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5ODUzMg=="}, "originalCommit": {"oid": "268dd8420ac3d82460afac0c1b84129c1c6908af"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NTMyNg==", "bodyText": "my bad, human parsing error: fieldTypesForGrouping vs. fieldNamesForGrouping - when reading over it the first time, it looked the same.", "url": "https://github.com/elastic/elasticsearch/pull/56514#discussion_r423265326", "createdAt": "2020-05-11T19:22:50Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/SchemaUtil.java", "diffHunk": "@@ -68,10 +70,18 @@ public static void deduceMappings(\n         Map<String, String> aggregationTypes = new HashMap<>();\n         // collects the fieldnames and target fieldnames used for grouping\n         Map<String, String> fieldNamesForGrouping = new HashMap<>();\n+        // collects the target mapping types used for grouping\n+        Map<String, String> fieldTypesForGrouping = new HashMap<>();\n \n         config.getGroupConfig()\n             .getGroups()\n-            .forEach((destinationFieldName, group) -> { fieldNamesForGrouping.put(destinationFieldName, group.getField()); });\n+            .forEach((destinationFieldName, group) -> {\n+                fieldNamesForGrouping.put(destinationFieldName, group.getField());\n+                if (group.getMappingType() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5ODUzMg=="}, "originalCommit": {"oid": "268dd8420ac3d82460afac0c1b84129c1c6908af"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 533, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}