{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MzYxOTk2", "number": 64849, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxMTo0M1rOE5VfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxNTo0MlrOE5Vpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTU2NDczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxMTo0M1rOHzulLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozOTo1MlrOHzwgNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwMjYwNQ==", "bodyText": "Could you explain what is the value of this assertion given that you check this condition in the line above?", "url": "https://github.com/elastic/elasticsearch/pull/64849#discussion_r524002605", "createdAt": "2020-11-16T09:11:43Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessage.java", "diffHunk": "@@ -95,7 +96,13 @@ public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params par\n         if (resourceId != null) {\n             builder.field(getResourceField(), resourceId);\n         }\n-        builder.field(MESSAGE.getPreferredName(), message.substring(0, Math.min(message.length(), MAX_AUDIT_MESSAGE_CHARS)));\n+\n+        if (message.length() > MAX_AUDIT_MESSAGE_CHARS) {\n+            assert message.length() > MAX_AUDIT_MESSAGE_CHARS : \"Audit message is unexpectedly large\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "011a97019852f919bd8bd1afd231a009ec7dd4b5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzNDEwMg==", "bodyText": "The idea is that we want this to throw in CI tests if we get a super long message. We don't expect to have a long message but if we do we would like to know about it.\nObviously the assertion won't affect production deployments", "url": "https://github.com/elastic/elasticsearch/pull/64849#discussion_r524034102", "createdAt": "2020-11-16T09:39:52Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessage.java", "diffHunk": "@@ -95,7 +96,13 @@ public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params par\n         if (resourceId != null) {\n             builder.field(getResourceField(), resourceId);\n         }\n-        builder.field(MESSAGE.getPreferredName(), message.substring(0, Math.min(message.length(), MAX_AUDIT_MESSAGE_CHARS)));\n+\n+        if (message.length() > MAX_AUDIT_MESSAGE_CHARS) {\n+            assert message.length() > MAX_AUDIT_MESSAGE_CHARS : \"Audit message is unexpectedly large\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwMjYwNQ=="}, "originalCommit": {"oid": "011a97019852f919bd8bd1afd231a009ec7dd4b5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTU4MDQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessageTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxNDoyMFrOHzuvfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxNDoyMFrOHzuvfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwNTI0Nw==", "bodyText": "Let's put a blank line before each example to be able to visually tell them apart.", "url": "https://github.com/elastic/elasticsearch/pull/64849#discussion_r524005247", "createdAt": "2020-11-16T09:14:20Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessageTests.java", "diffHunk": "@@ -79,6 +86,67 @@ public void testNewError() {\n         assertThat(message.getNodeName(), equalTo(NODE_NAME));\n     }\n \n+    public void testLongMessageIsTruncated() throws IOException {\n+        AbstractAuditMessage longMessage = new AbstractAuditMessage(\n+            randomBoolean() ? null : randomAlphaOfLength(10),\n+            \"thisis17charslong\".repeat(490),\n+            randomFrom(Level.values()),\n+            new Date(),\n+            randomBoolean() ? null : randomAlphaOfLengthBetween(1, 20)\n+        ) {\n+            @Override\n+            public String getJobType() {\n+                return \"unused\";\n+            }\n+\n+            @Override\n+            protected String getResourceField() {\n+                return \"unused\";\n+            }\n+        };\n+\n+        assertThat(longMessage.getMessage().length(), greaterThan(AbstractAuditMessage.MAX_AUDIT_MESSAGE_CHARS));\n+\n+        // serialise the message and check the new message is truncated\n+        XContentType xContentType = randomFrom(XContentType.values());\n+        BytesReference originalXContent = XContentHelper.toXContent(longMessage, xContentType, randomBoolean());\n+        XContentParser parser = createParser(XContentFactory.xContent(xContentType), originalXContent);\n+        AbstractAuditMessage parsed = doParseInstance(parser);\n+        assertThat(parsed.getMessage().length(), equalTo(AbstractAuditMessage.MAX_AUDIT_MESSAGE_CHARS));\n+    }\n+\n+    public void testTruncateString() {\n+        String message = \"a short message short message short message short message short message\";\n+        String truncated = AbstractAuditMessage.truncateMessage(message, 20);\n+        assertEquals(\"a ... (truncated)\", truncated);\n+        assertThat(truncated.length(), lessThanOrEqualTo(20));\n+        truncated = AbstractAuditMessage.truncateMessage(message, 23);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "011a97019852f919bd8bd1afd231a009ec7dd4b5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTU4OTc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessageTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxNTo0MlrOHzu1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1MTozNFrOHzxTng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwNjc1NA==", "bodyText": "assertThat(..., equalTo(...)) could be used instead of assertEquals for consistency as you're already using assertThat with lessThanOrEqualTo below.", "url": "https://github.com/elastic/elasticsearch/pull/64849#discussion_r524006754", "createdAt": "2020-11-16T09:15:42Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessageTests.java", "diffHunk": "@@ -79,6 +86,67 @@ public void testNewError() {\n         assertThat(message.getNodeName(), equalTo(NODE_NAME));\n     }\n \n+    public void testLongMessageIsTruncated() throws IOException {\n+        AbstractAuditMessage longMessage = new AbstractAuditMessage(\n+            randomBoolean() ? null : randomAlphaOfLength(10),\n+            \"thisis17charslong\".repeat(490),\n+            randomFrom(Level.values()),\n+            new Date(),\n+            randomBoolean() ? null : randomAlphaOfLengthBetween(1, 20)\n+        ) {\n+            @Override\n+            public String getJobType() {\n+                return \"unused\";\n+            }\n+\n+            @Override\n+            protected String getResourceField() {\n+                return \"unused\";\n+            }\n+        };\n+\n+        assertThat(longMessage.getMessage().length(), greaterThan(AbstractAuditMessage.MAX_AUDIT_MESSAGE_CHARS));\n+\n+        // serialise the message and check the new message is truncated\n+        XContentType xContentType = randomFrom(XContentType.values());\n+        BytesReference originalXContent = XContentHelper.toXContent(longMessage, xContentType, randomBoolean());\n+        XContentParser parser = createParser(XContentFactory.xContent(xContentType), originalXContent);\n+        AbstractAuditMessage parsed = doParseInstance(parser);\n+        assertThat(parsed.getMessage().length(), equalTo(AbstractAuditMessage.MAX_AUDIT_MESSAGE_CHARS));\n+    }\n+\n+    public void testTruncateString() {\n+        String message = \"a short message short message short message short message short message\";\n+        String truncated = AbstractAuditMessage.truncateMessage(message, 20);\n+        assertEquals(\"a ... (truncated)\", truncated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "011a97019852f919bd8bd1afd231a009ec7dd4b5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA0NzI2Mg==", "bodyText": "I know it is not consistent but I find assertEquals easier to read and understand.", "url": "https://github.com/elastic/elasticsearch/pull/64849#discussion_r524047262", "createdAt": "2020-11-16T09:51:34Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditMessageTests.java", "diffHunk": "@@ -79,6 +86,67 @@ public void testNewError() {\n         assertThat(message.getNodeName(), equalTo(NODE_NAME));\n     }\n \n+    public void testLongMessageIsTruncated() throws IOException {\n+        AbstractAuditMessage longMessage = new AbstractAuditMessage(\n+            randomBoolean() ? null : randomAlphaOfLength(10),\n+            \"thisis17charslong\".repeat(490),\n+            randomFrom(Level.values()),\n+            new Date(),\n+            randomBoolean() ? null : randomAlphaOfLengthBetween(1, 20)\n+        ) {\n+            @Override\n+            public String getJobType() {\n+                return \"unused\";\n+            }\n+\n+            @Override\n+            protected String getResourceField() {\n+                return \"unused\";\n+            }\n+        };\n+\n+        assertThat(longMessage.getMessage().length(), greaterThan(AbstractAuditMessage.MAX_AUDIT_MESSAGE_CHARS));\n+\n+        // serialise the message and check the new message is truncated\n+        XContentType xContentType = randomFrom(XContentType.values());\n+        BytesReference originalXContent = XContentHelper.toXContent(longMessage, xContentType, randomBoolean());\n+        XContentParser parser = createParser(XContentFactory.xContent(xContentType), originalXContent);\n+        AbstractAuditMessage parsed = doParseInstance(parser);\n+        assertThat(parsed.getMessage().length(), equalTo(AbstractAuditMessage.MAX_AUDIT_MESSAGE_CHARS));\n+    }\n+\n+    public void testTruncateString() {\n+        String message = \"a short message short message short message short message short message\";\n+        String truncated = AbstractAuditMessage.truncateMessage(message, 20);\n+        assertEquals(\"a ... (truncated)\", truncated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwNjc1NA=="}, "originalCommit": {"oid": "011a97019852f919bd8bd1afd231a009ec7dd4b5"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3052, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}