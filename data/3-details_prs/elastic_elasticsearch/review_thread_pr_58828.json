{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjU4MTY2", "number": 58828, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoyNjowN1rOELkeAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo0MTo1OVrOELkyUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTY3Mjk2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/searchablesnapshots/SearchableSnapshotFeatureSetUsage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoyNjowN1rOGtLv_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0NDowNFrOGtVrPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMTYxNQ==", "bodyText": "Since it can't be disabled, we may as well inline this argument?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(XPackField.SEARCHABLE_SNAPSHOTS, available, enabled);\n          \n          \n            \n                    super(XPackField.SEARCHABLE_SNAPSHOTS, available, true);", "url": "https://github.com/elastic/elasticsearch/pull/58828#discussion_r450031615", "createdAt": "2020-07-06T07:26:07Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/searchablesnapshots/SearchableSnapshotFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.searchablesnapshots;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SearchableSnapshotFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    private final int numberOfSearchableSnapshotIndices;\n+\n+    public SearchableSnapshotFeatureSetUsage(StreamInput input) throws IOException {\n+        super(input);\n+        numberOfSearchableSnapshotIndices = input.readVInt();\n+    }\n+\n+    @Override\n+    public Version getMinimalSupportedVersion() {\n+        return Version.V_8_0_0;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeVInt(numberOfSearchableSnapshotIndices);\n+    }\n+\n+    public SearchableSnapshotFeatureSetUsage(boolean available, boolean enabled,\n+                                             int numberOfSearchableSnapshotIndices) {\n+        super(XPackField.SEARCHABLE_SNAPSHOTS, available, enabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5de0155f8a15b405baffa65a6a733662f01e69"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDIzOA==", "bodyText": "sure, done in af2b703", "url": "https://github.com/elastic/elasticsearch/pull/58828#discussion_r450194238", "createdAt": "2020-07-06T12:44:04Z", "author": {"login": "ywelsch"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/searchablesnapshots/SearchableSnapshotFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.searchablesnapshots;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SearchableSnapshotFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    private final int numberOfSearchableSnapshotIndices;\n+\n+    public SearchableSnapshotFeatureSetUsage(StreamInput input) throws IOException {\n+        super(input);\n+        numberOfSearchableSnapshotIndices = input.readVInt();\n+    }\n+\n+    @Override\n+    public Version getMinimalSupportedVersion() {\n+        return Version.V_8_0_0;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeVInt(numberOfSearchableSnapshotIndices);\n+    }\n+\n+    public SearchableSnapshotFeatureSetUsage(boolean available, boolean enabled,\n+                                             int numberOfSearchableSnapshotIndices) {\n+        super(XPackField.SEARCHABLE_SNAPSHOTS, available, enabled);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMTYxNQ=="}, "originalCommit": {"oid": "ed5de0155f8a15b405baffa65a6a733662f01e69"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTY4ODM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsUsageTransportAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozMTowOFrOGtL5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0MToyOFrOGtVmEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMzk0OQ==", "bodyText": "Would the tests all still pass even without this vital line? Would be good to have something that checks we do return something other than zero here.", "url": "https://github.com/elastic/elasticsearch/pull/58828#discussion_r450033949", "createdAt": "2020-07-06T07:31:08Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsUsageTransportAction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.protocol.xpack.XPackUsageRequest;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureAction;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureResponse;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureTransportAction;\n+import org.elasticsearch.xpack.core.searchablesnapshots.SearchableSnapshotFeatureSetUsage;\n+\n+public class SearchableSnapshotsUsageTransportAction extends XPackUsageFeatureTransportAction {\n+\n+    private final XPackLicenseState licenseState;\n+\n+    @Inject\n+    public SearchableSnapshotsUsageTransportAction(\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ThreadPool threadPool,\n+        ActionFilters actionFilters,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        XPackLicenseState licenseState\n+    ) {\n+        super(\n+            XPackUsageFeatureAction.SEARCHABLE_SNAPSHOTS.name(),\n+            transportService,\n+            clusterService,\n+            threadPool,\n+            actionFilters,\n+            indexNameExpressionResolver\n+        );\n+        this.licenseState = licenseState;\n+    }\n+\n+    @Override\n+    protected void masterOperation(\n+        Task task,\n+        XPackUsageRequest request,\n+        ClusterState state,\n+        ActionListener<XPackUsageFeatureResponse> listener\n+    ) {\n+        int numSnapIndices = 0;\n+        for (IndexMetadata indexMetadata : state.metadata()) {\n+            if (SearchableSnapshotsConstants.isSearchableSnapshotStore(indexMetadata.getSettings())) {\n+                numSnapIndices++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5de0155f8a15b405baffa65a6a733662f01e69"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjkxMw==", "bodyText": "I've added a test in 0839e24", "url": "https://github.com/elastic/elasticsearch/pull/58828#discussion_r450192913", "createdAt": "2020-07-06T12:41:28Z", "author": {"login": "ywelsch"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsUsageTransportAction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.protocol.xpack.XPackUsageRequest;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureAction;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureResponse;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureTransportAction;\n+import org.elasticsearch.xpack.core.searchablesnapshots.SearchableSnapshotFeatureSetUsage;\n+\n+public class SearchableSnapshotsUsageTransportAction extends XPackUsageFeatureTransportAction {\n+\n+    private final XPackLicenseState licenseState;\n+\n+    @Inject\n+    public SearchableSnapshotsUsageTransportAction(\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ThreadPool threadPool,\n+        ActionFilters actionFilters,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        XPackLicenseState licenseState\n+    ) {\n+        super(\n+            XPackUsageFeatureAction.SEARCHABLE_SNAPSHOTS.name(),\n+            transportService,\n+            clusterService,\n+            threadPool,\n+            actionFilters,\n+            indexNameExpressionResolver\n+        );\n+        this.licenseState = licenseState;\n+    }\n+\n+    @Override\n+    protected void masterOperation(\n+        Task task,\n+        XPackUsageRequest request,\n+        ClusterState state,\n+        ActionListener<XPackUsageFeatureResponse> listener\n+    ) {\n+        int numSnapIndices = 0;\n+        for (IndexMetadata indexMetadata : state.metadata()) {\n+            if (SearchableSnapshotsConstants.isSearchableSnapshotStore(indexMetadata.getSettings())) {\n+                numSnapIndices++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMzk0OQ=="}, "originalCommit": {"oid": "ed5de0155f8a15b405baffa65a6a733662f01e69"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTcyNDk3OnYy", "diffSide": "RIGHT", "path": "docs/reference/rest-api/usage.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo0MTo1OVrOGtMOaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0MToxN1rOGtVlrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTQwMQ==", "bodyText": "Can we have YAML REST tests for this? I know we don't have a good coverage for usage/info REST APIs but I still think it's better than nothing.", "url": "https://github.com/elastic/elasticsearch/pull/58828#discussion_r450039401", "createdAt": "2020-07-06T07:41:59Z", "author": {"login": "tlrx"}, "path": "docs/reference/rest-api/usage.asciidoc", "diffHunk": "@@ -252,6 +252,11 @@ GET /_xpack/usage\n     \"available\" : true,\n     \"enabled\" : true\n   },\n+  \"searchable_snapshots\" : {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5de0155f8a15b405baffa65a6a733662f01e69"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjgxNQ==", "bodyText": "I've added a test in 0839e24", "url": "https://github.com/elastic/elasticsearch/pull/58828#discussion_r450192815", "createdAt": "2020-07-06T12:41:17Z", "author": {"login": "ywelsch"}, "path": "docs/reference/rest-api/usage.asciidoc", "diffHunk": "@@ -252,6 +252,11 @@ GET /_xpack/usage\n     \"available\" : true,\n     \"enabled\" : true\n   },\n+  \"searchable_snapshots\" : {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTQwMQ=="}, "originalCommit": {"oid": "ed5de0155f8a15b405baffa65a6a733662f01e69"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2191, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}