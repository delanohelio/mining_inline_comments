{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDA4Nzcx", "number": 53243, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1OTo1OFrODl9HLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1OTo1OFrODl9HLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTI1MTY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/BitArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1OTo1OFrOFzIvSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1OTo1OFrOFzIvSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDg3NQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         * No need resize the array to just to clear bit because we'll\n          \n          \n            \n                         * No need to resize the array to just clear bit because we'll", "url": "https://github.com/elastic/elasticsearch/pull/53243#discussion_r389164875", "createdAt": "2020-03-06T21:59:58Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/util/BitArray.java", "diffHunk": "@@ -41,21 +45,31 @@ public BitArray(int initialSize, BigArrays bigArrays) {\n      * Set the {@code index}th bit.\n      */\n     public void set(int index) {\n-        fill(index, true);\n+        int wordNum = wordNum(index);\n+        bits = bigArrays.grow(bits, wordNum + 1);\n+        bits.set(wordNum, bits.get(wordNum) | bitmask(index));\n     }\n \n     /**\n      * Clear the {@code index}th bit.\n      */\n     public void clear(int index) {\n-        fill(index, false);\n+        int wordNum = wordNum(index);\n+        if (wordNum >= bits.size()) {\n+            /*\n+             * No need resize the array to just to clear bit because we'll", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dee699c17349bd9a2a713cac0641ae0acd4f2d"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3343, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}