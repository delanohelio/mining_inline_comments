{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTA3MzA5", "number": 65926, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1MDozNlrOFCQaBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDowOToyNVrOFDZN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTEwMjc3OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/index/shard/IndexShardIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1MDozNlrOIBTYHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyNjowM1rOICSD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNjk1OA==", "bodyText": "Suggest assert false : indexPaths rather than listener.set(true), it might be useful to see the stack trace that led to calling this listener unexpectedly.", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r538236958", "createdAt": "2020-12-08T10:50:36Z", "author": {"login": "DaveCTurner"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/index/shard/IndexShardIT.java", "diffHunk": "@@ -150,16 +150,17 @@ public void testLockTryingToDelete() throws Exception {\n         // Test without the regular shard lock to assume we can acquire it\n         // (worst case, meaning that the shard lock could be acquired and\n         // we're green to delete the shard's directory)\n-        ShardLock sLock = new DummyShardLock(new ShardId(index, 0));\n-        try {\n-            env.deleteShardDirectoryUnderLock(sLock, IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY));\n-            fail(\"should not have been able to delete the directory\");\n-        } catch (LockObtainFailedException e) {\n-            assertTrue(\"msg: \" + e.getMessage(), e.getMessage().contains(\"unable to acquire write.lock\"));\n-        }\n+        final ShardLock sLock = new DummyShardLock(new ShardId(index, 0));\n+        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        final AtomicBoolean listener = new AtomicBoolean();\n+        final LockObtainFailedException exception = expectThrows(LockObtainFailedException.class, () ->\n+            env.deleteShardDirectoryUnderLock(sLock, indexSettings, indexPaths -> listener.set(true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2Mzk3Mg==", "bodyText": "Good suggestion, I pushed bd7aca5", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r539263972", "createdAt": "2020-12-09T12:26:03Z", "author": {"login": "tlrx"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/index/shard/IndexShardIT.java", "diffHunk": "@@ -150,16 +150,17 @@ public void testLockTryingToDelete() throws Exception {\n         // Test without the regular shard lock to assume we can acquire it\n         // (worst case, meaning that the shard lock could be acquired and\n         // we're green to delete the shard's directory)\n-        ShardLock sLock = new DummyShardLock(new ShardId(index, 0));\n-        try {\n-            env.deleteShardDirectoryUnderLock(sLock, IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY));\n-            fail(\"should not have been able to delete the directory\");\n-        } catch (LockObtainFailedException e) {\n-            assertTrue(\"msg: \" + e.getMessage(), e.getMessage().contains(\"unable to acquire write.lock\"));\n-        }\n+        final ShardLock sLock = new DummyShardLock(new ShardId(index, 0));\n+        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        final AtomicBoolean listener = new AtomicBoolean();\n+        final LockObtainFailedException exception = expectThrows(LockObtainFailedException.class, () ->\n+            env.deleteShardDirectoryUnderLock(sLock, indexSettings, indexPaths -> listener.set(true)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNjk1OA=="}, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE2MTg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/store/CompositeIndexFoldersDeletionListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowMzoyOVrOIBT6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyODo1NlrOICSLTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NTcyNQ==", "bodyText": "This is a bit trappy IMO, do we permit these methods to throw exceptions or not? It looks like callers don't expect exceptions, but implementors expect to be able to throw them, so we must be sure always to use a CompositeIndexFoldersDeletionListener in the middle to swallow any exceptions.\n(I know we have this pattern in other Composite... places but that doesn't mean I agree with it)\nCould we not swallow exceptions here (and maybe assert no exception is thrown). Alternatively could we make the field in IndicesService into a CompositeIndexFoldersDeletionListener rather than a IndexStorePlugin.IndexFoldersDeletionListener to spell out that the exception-swallowing behaviour is required.", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r538245725", "createdAt": "2020-12-08T11:03:29Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/indices/store/CompositeIndexFoldersDeletionListener.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices.store;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.plugins.IndexStorePlugin;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class CompositeIndexFoldersDeletionListener implements IndexStorePlugin.IndexFoldersDeletionListener {\n+\n+    private static final Logger logger = LogManager.getLogger(CompositeIndexFoldersDeletionListener.class);\n+    private final List<IndexStorePlugin.IndexFoldersDeletionListener> listeners;\n+\n+    public CompositeIndexFoldersDeletionListener(List<IndexStorePlugin.IndexFoldersDeletionListener> listeners) {\n+        for (IndexStorePlugin.IndexFoldersDeletionListener listener : listeners) {\n+            if (listener == null) {\n+                throw new IllegalArgumentException(\"listeners must be non-null\");\n+            }\n+        }\n+        this.listeners = List.copyOf(listeners);\n+    }\n+\n+    @Override\n+    public void beforeIndexFoldersDeleted(Index index, IndexSettings indexSettings, List<Path> indexPaths) {\n+        for (IndexStorePlugin.IndexFoldersDeletionListener listener : listeners) {\n+            try {\n+                listener.beforeIndexFoldersDeleted(index, indexSettings, indexPaths);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NTg2OQ==", "bodyText": "I agree this is trappy. Looking at the places where the IndexFoldersDeletionListener are expected to be called I think we can just not swallowing them in CompositeIndexFoldersDeletionListener (I pushed d6a6e2d) and allow listeners to throw exceptions.", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r539265869", "createdAt": "2020-12-09T12:28:56Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/indices/store/CompositeIndexFoldersDeletionListener.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices.store;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.plugins.IndexStorePlugin;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class CompositeIndexFoldersDeletionListener implements IndexStorePlugin.IndexFoldersDeletionListener {\n+\n+    private static final Logger logger = LogManager.getLogger(CompositeIndexFoldersDeletionListener.class);\n+    private final List<IndexStorePlugin.IndexFoldersDeletionListener> listeners;\n+\n+    public CompositeIndexFoldersDeletionListener(List<IndexStorePlugin.IndexFoldersDeletionListener> listeners) {\n+        for (IndexStorePlugin.IndexFoldersDeletionListener listener : listeners) {\n+            if (listener == null) {\n+                throw new IllegalArgumentException(\"listeners must be non-null\");\n+            }\n+        }\n+        this.listeners = List.copyOf(listeners);\n+    }\n+\n+    @Override\n+    public void beforeIndexFoldersDeleted(Index index, IndexSettings indexSettings, List<Path> indexPaths) {\n+        for (IndexStorePlugin.IndexFoldersDeletionListener listener : listeners) {\n+            try {\n+                listener.beforeIndexFoldersDeleted(index, indexSettings, indexPaths);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NTcyNQ=="}, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE3MjUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/IndexStorePlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowNTo1M1rOIBUAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyNjowN1rOICSEHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzM3Mg==", "bodyText": "I think we don't need to supply a no-op default here, we can reasonably require implementations to implement both methods.", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r538247372", "createdAt": "2020-12-08T11:05:53Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/plugins/IndexStorePlugin.java", "diffHunk": "@@ -82,4 +86,41 @@\n     default Map<String, RecoveryStateFactory> getRecoveryStateFactories() {\n         return Collections.emptyMap();\n     }\n+\n+    /**\n+     * {@link IndexFoldersDeletionListener} are invoked before the folders of a shard or an index are deleted from disk.\n+     */\n+    interface IndexFoldersDeletionListener {\n+        /**\n+         * Invoked before the folders of an index are deleted from disk. The list of folders contains {@link Path}s that may or may not\n+         * exist on disk. Shard locks are expected to be acquired at the time this method is invoked.\n+         *\n+         * @param index         the {@link Index} of the index whose folders are going to be deleted\n+         * @param indexSettings settings for the index whose folders are going to be deleted\n+         * @param indexPaths    the paths of the folders that are going to be deleted\n+         */\n+        default void beforeIndexFoldersDeleted(Index index, IndexSettings indexSettings, List<Path> indexPaths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NDAyOA==", "bodyText": "I pushed 5925e5a", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r539264028", "createdAt": "2020-12-09T12:26:07Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/plugins/IndexStorePlugin.java", "diffHunk": "@@ -82,4 +86,41 @@\n     default Map<String, RecoveryStateFactory> getRecoveryStateFactories() {\n         return Collections.emptyMap();\n     }\n+\n+    /**\n+     * {@link IndexFoldersDeletionListener} are invoked before the folders of a shard or an index are deleted from disk.\n+     */\n+    interface IndexFoldersDeletionListener {\n+        /**\n+         * Invoked before the folders of an index are deleted from disk. The list of folders contains {@link Path}s that may or may not\n+         * exist on disk. Shard locks are expected to be acquired at the time this method is invoked.\n+         *\n+         * @param index         the {@link Index} of the index whose folders are going to be deleted\n+         * @param indexSettings settings for the index whose folders are going to be deleted\n+         * @param indexPaths    the paths of the folders that are going to be deleted\n+         */\n+        default void beforeIndexFoldersDeleted(Index index, IndexSettings indexSettings, List<Path> indexPaths) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzM3Mg=="}, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE4NjcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/env/NodeEnvironment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowOToxNlrOIBUJMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyNjoxOVrOICSEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0OTUyMg==", "bodyText": "All callers call List#of(Path[]) on the listener, maybe we should make this a Consumer<Path[]> instead?", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r538249522", "createdAt": "2020-12-08T11:09:16Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/env/NodeEnvironment.java", "diffHunk": "@@ -553,11 +554,15 @@ private static String toString(Collection<String> items) {\n      * @param shardId the id of the shard to delete to delete\n      * @throws IOException if an IOException occurs\n      */\n-    public void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings) throws IOException, ShardLockObtainFailedException {\n+    public void deleteShardDirectorySafe(\n+        ShardId shardId,\n+        IndexSettings indexSettings,\n+        Consumer<List<Path>> listener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NDE2OQ==", "bodyText": "Ok, I pushed 850d1a3 to use Path[] all over the place", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r539264169", "createdAt": "2020-12-09T12:26:19Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/env/NodeEnvironment.java", "diffHunk": "@@ -553,11 +554,15 @@ private static String toString(Collection<String> items) {\n      * @param shardId the id of the shard to delete to delete\n      * @throws IOException if an IOException occurs\n      */\n-    public void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings) throws IOException, ShardLockObtainFailedException {\n+    public void deleteShardDirectorySafe(\n+        ShardId shardId,\n+        IndexSettings indexSettings,\n+        Consumer<List<Path>> listener", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0OTUyMg=="}, "originalCommit": {"oid": "f32967b35ceaac7f946cae378c7dd0c1da2f2a34"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTAxOTQ1OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/plugins/IndexFoldersDeletionListenerIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDowNjo0NlrOIDBPqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDowNjo0NlrOIDBPqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzNzAzNA==", "bodyText": "Nice work, this looked to be pretty tricky to trigger \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r540037034", "createdAt": "2020-12-10T10:06:46Z", "author": {"login": "DaveCTurner"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/plugins/IndexFoldersDeletionListenerIT.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.action.support.ActiveShardCount;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ConcurrentCollections;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.indices.IndicesService;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.InternalTestCluster;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.env.NodeEnvironment.INDICES_FOLDER;\n+import static org.elasticsearch.gateway.MetadataStateFormat.STATE_DIR_NAME;\n+import static org.elasticsearch.index.shard.ShardPath.INDEX_FOLDER_NAME;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST)\n+public class IndexFoldersDeletionListenerIT extends ESIntegTestCase {\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        final List<Class<? extends Plugin>> plugins = new ArrayList<>(super.nodePlugins());\n+        plugins.add(IndexFoldersDeletionListenerPlugin.class);\n+        return plugins;\n+    }\n+\n+    public void testListenersInvokedWhenIndexIsDeleted() throws Exception {\n+        final String indexName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        createIndex(indexName);\n+\n+        final NumShards numShards = getNumShards(indexName);\n+        ensureClusterSizeConsistency(); // wait for a stable cluster\n+        ensureGreen(indexName); // wait for no relocation\n+\n+        final ClusterState clusterState = clusterService().state();\n+        final Index index = clusterState.metadata().index(indexName).getIndex();\n+        final Map<String, List<ShardRouting>> shardsByNodes = shardRoutingsByNodes(clusterState, index);\n+        assertThat(shardsByNodes.values().stream().mapToInt(List::size).sum(), equalTo(numShards.totalNumShards));\n+\n+        for (Map.Entry<String, List<ShardRouting>> shardsByNode : shardsByNodes.entrySet()) {\n+            final String nodeName = shardsByNode.getKey();\n+            final IndexFoldersDeletionListenerPlugin plugin = plugin(nodeName);\n+            assertTrue(\"Expecting no indices deleted on node \" + nodeName, plugin.deletedIndices.isEmpty());\n+            assertTrue(\"Expecting no shards deleted on node \" + nodeName, plugin.deletedShards.isEmpty());\n+        }\n+\n+        assertAcked(client().admin().indices().prepareDelete(indexName));\n+\n+        assertBusy(() -> {\n+            for (Map.Entry<String, List<ShardRouting>> shardsByNode : shardsByNodes.entrySet()) {\n+                final String nodeName = shardsByNode.getKey();\n+                final IndexFoldersDeletionListenerPlugin plugin = plugin(nodeName);\n+                assertTrue(\"Listener should have been notified of deletion of index \" + index + \" on node \" + nodeName,\n+                    plugin.deletedIndices.contains(index));\n+\n+                final List<ShardId> deletedShards = plugin.deletedShards.get(index);\n+                assertThat(deletedShards, notNullValue());\n+                assertFalse(\"Listener should have been notified of deletion of one or more shards on node \" + nodeName,\n+                    deletedShards.isEmpty());\n+\n+                for (ShardRouting shardRouting : shardsByNode.getValue()) {\n+                    final ShardId shardId = shardRouting.shardId();\n+                    assertTrue(\"Listener should have been notified of deletion of shard \" + shardId + \" on node \" + nodeName,\n+                        deletedShards.contains(shardId));\n+                }\n+            }\n+        });\n+    }\n+\n+    public void testListenersInvokedWhenIndexIsRelocated() throws Exception {\n+        internalCluster().ensureAtLeastNumDataNodes(4);\n+        final String indexName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        createIndex(indexName, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, between(4, 10))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, between(0, 1))\n+            .build());\n+\n+        final NumShards numShards = getNumShards(indexName);\n+        ensureGreen(indexName);\n+\n+        final ClusterState clusterState = clusterService().state();\n+        final Index index = clusterState.metadata().index(indexName).getIndex();\n+        final Map<String, List<ShardRouting>> shardsByNodes = shardRoutingsByNodes(clusterState, index);\n+        assertThat(shardsByNodes.values().stream().mapToInt(List::size).sum(), equalTo(numShards.totalNumShards));\n+\n+        for (Map.Entry<String, List<ShardRouting>> shardsByNode : shardsByNodes.entrySet()) {\n+            final String nodeName = shardsByNode.getKey();\n+            final IndexFoldersDeletionListenerPlugin plugin = plugin(nodeName);\n+            assertTrue(\"Expecting no indices deleted on node \" + nodeName, plugin.deletedIndices.isEmpty());\n+            assertTrue(\"Expecting no shards deleted on node \" + nodeName, plugin.deletedShards.isEmpty());\n+        }\n+\n+        final List<String> excludedNodes = randomSubsetOf(2, shardsByNodes.keySet());\n+        assertAcked(client().admin().indices().prepareUpdateSettings(indexName)\n+            .setSettings(Settings.builder()\n+                .put(\"index.routing.allocation.exclude._name\", String.join(\",\", excludedNodes))\n+                .build()));\n+        ensureGreen(indexName);\n+\n+        assertBusy(() -> {\n+            for (Map.Entry<String, List<ShardRouting>> shardsByNode : shardsByNodes.entrySet()) {\n+                final String nodeName = shardsByNode.getKey();\n+                final IndexFoldersDeletionListenerPlugin plugin = plugin(nodeName);\n+\n+                if (excludedNodes.contains(nodeName)) {\n+                    assertTrue(\"Listener should have been notified of deletion of index \" + index + \" on node \" + nodeName,\n+                        plugin.deletedIndices.contains(index));\n+\n+                    final List<ShardId> deletedShards = plugin.deletedShards.get(index);\n+                    assertThat(deletedShards, notNullValue());\n+                    assertFalse(\"Listener should have been notified of deletion of one or more shards on node \" + nodeName,\n+                        deletedShards.isEmpty());\n+\n+                    for (ShardRouting shardRouting : shardsByNode.getValue()) {\n+                        final ShardId shardId = shardRouting.shardId();\n+                        assertTrue(\"Listener should have been notified of deletion of shard \" + shardId + \" on node \" + nodeName,\n+                            deletedShards.contains(shardId));\n+                    }\n+                } else {\n+                    assertTrue(\"Expecting no indices deleted on node \" + nodeName, plugin.deletedIndices.isEmpty());\n+                    assertTrue(\"Expecting no shards deleted on node \" + nodeName, plugin.deletedShards.isEmpty());\n+                }\n+            }\n+        });\n+    }\n+\n+    public void testListenersInvokedWhenIndexIsDangling() throws Exception {\n+        internalCluster().ensureAtLeastNumDataNodes(4);\n+        final String indexName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        createIndex(indexName, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, between(4, 10))\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, between(0, 1))\n+            .build());\n+\n+        final NumShards numShards = getNumShards(indexName);\n+        ensureGreen(indexName);\n+\n+        final ClusterState clusterState = clusterService().state();\n+        final Index index = clusterState.metadata().index(indexName).getIndex();\n+        final Map<String, List<ShardRouting>> shardsByNodes = shardRoutingsByNodes(clusterState, index);\n+        assertThat(shardsByNodes.values().stream().mapToInt(List::size).sum(), equalTo(numShards.totalNumShards));\n+\n+        for (Map.Entry<String, List<ShardRouting>> shardsByNode : shardsByNodes.entrySet()) {\n+            final String nodeName = shardsByNode.getKey();\n+            final IndexFoldersDeletionListenerPlugin plugin = plugin(nodeName);\n+            assertTrue(\"Expecting no indices deleted on node \" + nodeName, plugin.deletedIndices.isEmpty());\n+            assertTrue(\"Expecting no shards deleted on node \" + nodeName, plugin.deletedShards.isEmpty());\n+        }\n+\n+        final String stoppedNode = randomFrom(shardsByNodes.keySet());\n+        final Settings stoppedNodeDataPathSettings = internalCluster().dataPathSettings(stoppedNode);\n+        internalCluster().stopRandomNode(InternalTestCluster.nameFilter(stoppedNode));\n+\n+        assertAcked(client().admin().indices().prepareDelete(indexName));\n+\n+        final String restartedNode = internalCluster().startNode(stoppedNodeDataPathSettings);\n+        assertBusy(() -> {\n+            final IndexFoldersDeletionListenerPlugin plugin = plugin(restartedNode);\n+            assertTrue(\"Listener should have been notified of deletion of index \" + index + \" on node \" + restartedNode,\n+                plugin.deletedIndices.contains(index));\n+        });\n+    }\n+\n+    public void testListenersInvokedWhenIndexHasLeftOverShard() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797cce2942661d4a95a0cf791eee0905b1dbd3e3"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTAzMTY2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDowOToyMVrOIDBXFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0MjoxOFrOIDCz9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzODkzMg==", "bodyText": "Maybe assert false rather than listener::set?", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r540038932", "createdAt": "2020-12-10T10:09:21Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java", "diffHunk": "@@ -211,39 +212,47 @@ public void testResolveIndexFolders() throws Exception {\n     public void testDeleteSafe() throws Exception {\n         final NodeEnvironment env = newNodeEnvironment();\n         final Index index = new Index(\"foo\", \"fooUUID\");\n-        ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n+        final ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n         assertEquals(new ShardId(index, 0), fooLock.getShardId());\n \n         for (Path path : env.indexPaths(index)) {\n             Files.createDirectories(path.resolve(\"0\"));\n             Files.createDirectories(path.resolve(\"1\"));\n         }\n \n-        try {\n-            env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings);\n-            fail(\"shard is locked\");\n-        } catch (ShardLockObtainFailedException ex) {\n-            // expected\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            ShardLockObtainFailedException ex = expectThrows(ShardLockObtainFailedException.class,\n+                () -> env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings, listener::set));\n+            assertNull(listener.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797cce2942661d4a95a0cf791eee0905b1dbd3e3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2MjcxMA==", "bodyText": "Oups, I missed it the last time. I pushed aea4e6d", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r540062710", "createdAt": "2020-12-10T10:42:18Z", "author": {"login": "tlrx"}, "path": "server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java", "diffHunk": "@@ -211,39 +212,47 @@ public void testResolveIndexFolders() throws Exception {\n     public void testDeleteSafe() throws Exception {\n         final NodeEnvironment env = newNodeEnvironment();\n         final Index index = new Index(\"foo\", \"fooUUID\");\n-        ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n+        final ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n         assertEquals(new ShardId(index, 0), fooLock.getShardId());\n \n         for (Path path : env.indexPaths(index)) {\n             Files.createDirectories(path.resolve(\"0\"));\n             Files.createDirectories(path.resolve(\"1\"));\n         }\n \n-        try {\n-            env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings);\n-            fail(\"shard is locked\");\n-        } catch (ShardLockObtainFailedException ex) {\n-            // expected\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            ShardLockObtainFailedException ex = expectThrows(ShardLockObtainFailedException.class,\n+                () -> env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings, listener::set));\n+            assertNull(listener.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzODkzMg=="}, "originalCommit": {"oid": "797cce2942661d4a95a0cf791eee0905b1dbd3e3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTAzMjI5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDowOToyNVrOIDBXag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0MjoyNlrOIDC0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzOTAxOA==", "bodyText": "Maybe assert false rather than listener::set?", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r540039018", "createdAt": "2020-12-10T10:09:25Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java", "diffHunk": "@@ -211,39 +212,47 @@ public void testResolveIndexFolders() throws Exception {\n     public void testDeleteSafe() throws Exception {\n         final NodeEnvironment env = newNodeEnvironment();\n         final Index index = new Index(\"foo\", \"fooUUID\");\n-        ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n+        final ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n         assertEquals(new ShardId(index, 0), fooLock.getShardId());\n \n         for (Path path : env.indexPaths(index)) {\n             Files.createDirectories(path.resolve(\"0\"));\n             Files.createDirectories(path.resolve(\"1\"));\n         }\n \n-        try {\n-            env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings);\n-            fail(\"shard is locked\");\n-        } catch (ShardLockObtainFailedException ex) {\n-            // expected\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            ShardLockObtainFailedException ex = expectThrows(ShardLockObtainFailedException.class,\n+                () -> env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings, listener::set));\n+            assertNull(listener.get());\n         }\n \n         for (Path path : env.indexPaths(index)) {\n             assertTrue(Files.exists(path.resolve(\"0\")));\n             assertTrue(Files.exists(path.resolve(\"1\")));\n         }\n \n-        env.deleteShardDirectorySafe(new ShardId(index, 1), idxSettings);\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            env.deleteShardDirectorySafe(new ShardId(index, 1), idxSettings, listener::set);\n+            Path[] deletedPaths = listener.get();\n+            for (int i = 0; i < env.nodePaths().length; i++) {\n+                assertThat(deletedPaths[i], equalTo(env.nodePaths()[i].resolve(index).resolve(\"1\")));\n+            }\n+        }\n \n         for (Path path : env.indexPaths(index)) {\n             assertTrue(Files.exists(path.resolve(\"0\")));\n             assertFalse(Files.exists(path.resolve(\"1\")));\n         }\n \n-        try {\n-            env.deleteIndexDirectorySafe(index, randomIntBetween(0, 10), idxSettings);\n-            fail(\"shard is locked\");\n-        } catch (ShardLockObtainFailedException ex) {\n-            // expected\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            ShardLockObtainFailedException ex = expectThrows(ShardLockObtainFailedException.class,\n+                () -> env.deleteIndexDirectorySafe(index, randomIntBetween(0, 10), idxSettings, listener::set));\n+            assertNull(listener.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797cce2942661d4a95a0cf791eee0905b1dbd3e3"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2MjgxNw==", "bodyText": "I pushed aea4e6d", "url": "https://github.com/elastic/elasticsearch/pull/65926#discussion_r540062817", "createdAt": "2020-12-10T10:42:26Z", "author": {"login": "tlrx"}, "path": "server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java", "diffHunk": "@@ -211,39 +212,47 @@ public void testResolveIndexFolders() throws Exception {\n     public void testDeleteSafe() throws Exception {\n         final NodeEnvironment env = newNodeEnvironment();\n         final Index index = new Index(\"foo\", \"fooUUID\");\n-        ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n+        final ShardLock fooLock = env.shardLock(new ShardId(index, 0), \"1\");\n         assertEquals(new ShardId(index, 0), fooLock.getShardId());\n \n         for (Path path : env.indexPaths(index)) {\n             Files.createDirectories(path.resolve(\"0\"));\n             Files.createDirectories(path.resolve(\"1\"));\n         }\n \n-        try {\n-            env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings);\n-            fail(\"shard is locked\");\n-        } catch (ShardLockObtainFailedException ex) {\n-            // expected\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            ShardLockObtainFailedException ex = expectThrows(ShardLockObtainFailedException.class,\n+                () -> env.deleteShardDirectorySafe(new ShardId(index, 0), idxSettings, listener::set));\n+            assertNull(listener.get());\n         }\n \n         for (Path path : env.indexPaths(index)) {\n             assertTrue(Files.exists(path.resolve(\"0\")));\n             assertTrue(Files.exists(path.resolve(\"1\")));\n         }\n \n-        env.deleteShardDirectorySafe(new ShardId(index, 1), idxSettings);\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            env.deleteShardDirectorySafe(new ShardId(index, 1), idxSettings, listener::set);\n+            Path[] deletedPaths = listener.get();\n+            for (int i = 0; i < env.nodePaths().length; i++) {\n+                assertThat(deletedPaths[i], equalTo(env.nodePaths()[i].resolve(index).resolve(\"1\")));\n+            }\n+        }\n \n         for (Path path : env.indexPaths(index)) {\n             assertTrue(Files.exists(path.resolve(\"0\")));\n             assertFalse(Files.exists(path.resolve(\"1\")));\n         }\n \n-        try {\n-            env.deleteIndexDirectorySafe(index, randomIntBetween(0, 10), idxSettings);\n-            fail(\"shard is locked\");\n-        } catch (ShardLockObtainFailedException ex) {\n-            // expected\n+        {\n+            SetOnce<Path[]> listener = new SetOnce<>();\n+            ShardLockObtainFailedException ex = expectThrows(ShardLockObtainFailedException.class,\n+                () -> env.deleteIndexDirectorySafe(index, randomIntBetween(0, 10), idxSettings, listener::set));\n+            assertNull(listener.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzOTAxOA=="}, "originalCommit": {"oid": "797cce2942661d4a95a0cf791eee0905b1dbd3e3"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1772, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}