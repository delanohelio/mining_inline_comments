{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDE5OTc1", "number": 53982, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTowOToxOVrODrQgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNzoyMVrODsCV6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njg1ODcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTowOToxOVrOF7fwPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxMzoyMFrOF7f9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDU1Nw==", "bodyText": "Looks like a lot of error messages such as this one that assume only alias or index types would benefit from wording changes that accommodate data streams, too.", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397930557", "createdAt": "2020-03-25T15:09:19Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java", "diffHunk": "@@ -263,16 +263,15 @@ static String generateRolloverIndexName(String sourceIndexName, IndexNameExpress\n     }\n \n     static void validate(MetaData metaData, RolloverRequest request) {\n-        final AliasOrIndex aliasOrIndex = metaData.getAliasAndIndexLookup().get(request.getAlias());\n-        if (aliasOrIndex == null) {\n+        final IndexSpace indexSpace = metaData.getAliasAndIndexLookup().get(request.getAlias());\n+        if (indexSpace == null) {\n             throw new IllegalArgumentException(\"source alias does not exist\");\n         }\n-        if (aliasOrIndex.isAlias() == false) {\n+        if (indexSpace.getType() != IndexSpace.Type.ALIAS) {\n             throw new IllegalArgumentException(\"source alias is a concrete index\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146535bbd852c4f7ccfafbc759ac4e766059c1b3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMzgyNQ==", "bodyText": "Good point. I will go over these checks and messages and adjust.", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397933825", "createdAt": "2020-03-25T15:13:20Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java", "diffHunk": "@@ -263,16 +263,15 @@ static String generateRolloverIndexName(String sourceIndexName, IndexNameExpress\n     }\n \n     static void validate(MetaData metaData, RolloverRequest request) {\n-        final AliasOrIndex aliasOrIndex = metaData.getAliasAndIndexLookup().get(request.getAlias());\n-        if (aliasOrIndex == null) {\n+        final IndexSpace indexSpace = metaData.getAliasAndIndexLookup().get(request.getAlias());\n+        if (indexSpace == null) {\n             throw new IllegalArgumentException(\"source alias does not exist\");\n         }\n-        if (aliasOrIndex.isAlias() == false) {\n+        if (indexSpace.getType() != IndexSpace.Type.ALIAS) {\n             throw new IllegalArgumentException(\"source alias is a concrete index\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDU1Nw=="}, "originalCommit": {"oid": "146535bbd852c4f7ccfafbc759ac4e766059c1b3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njg4NTMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxNDozM1rOF7gA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxNDozM1rOF7gA9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDgzNw==", "bodyText": "We'll probably want to rename that variable from indexOrAlias. Can be done in a later PR, though.", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397934837", "createdAt": "2020-03-25T15:14:33Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -281,18 +281,16 @@ static boolean resolvePipelines(final DocWriteRequest<?> originalRequest, final\n             IndexMetaData indexMetaData = metaData.indices().get(originalRequest.index());\n             // check the alias for the index request (this is how normal index requests are modeled)\n             if (indexMetaData == null && indexRequest.index() != null) {\n-                AliasOrIndex indexOrAlias = metaData.getAliasAndIndexLookup().get(indexRequest.index());\n-                if (indexOrAlias != null && indexOrAlias.isAlias()) {\n-                    AliasOrIndex.Alias alias = (AliasOrIndex.Alias) indexOrAlias;\n-                    indexMetaData = alias.getWriteIndex();\n+                IndexSpace indexOrAlias = metaData.getAliasAndIndexLookup().get(indexRequest.index());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146535bbd852c4f7ccfafbc759ac4e766059c1b3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njg5NTc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexSpace.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxNjo0NVrOF7gHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxNjo0NVrOF7gHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNjUzNQ==", "bodyText": "nit: \"may be therefor also be returned\" -> \"may therefore also be returned\"", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397936535", "createdAt": "2020-03-25T15:16:45Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexSpace.java", "diffHunk": "@@ -35,30 +34,68 @@\n import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_HIDDEN_SETTING;\n \n /**\n- * Encapsulates the  {@link IndexMetaData} instances of a concrete index or indices an alias is pointing to.\n+ * An index space is a reference to one or more concrete indices.\n+ * An index space has a unique name and encapsulates all the  {@link IndexMetaData} instances it is pointing to.\n+ * Also depending on type it may refer to a single or many concrete indices and may or may not have a write index.\n  */\n-public interface AliasOrIndex {\n+public interface IndexSpace {\n+\n+    /**\n+     * @return the type of the index space\n+     */\n+    Type getType();\n \n     /**\n-     * @return whether this an alias or concrete index\n+     * @return the name of the index space\n      */\n-    boolean isAlias();\n+    String getName();\n \n     /**\n-     * @return All {@link IndexMetaData} of all concrete indices this alias is referring to\n-     * or if this is a concrete index its {@link IndexMetaData}\n+     * @return All {@link IndexMetaData} of all concrete indices this index space is referring to.\n      */\n     List<IndexMetaData> getIndices();\n \n     /**\n-     * @return whether this alias/index is hidden or not\n+     * A write index is a dedicated concrete index, that accepts all the new documents that belong to an index space.\n+     *\n+     * A write index may also be a regular concrete index of a index space and may be therefor also be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146535bbd852c4f7ccfafbc759ac4e766059c1b3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjkzNTMyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToyNDozN1rOF7ggYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTozMjozMVrOF7-OMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0Mjg4Mw==", "bodyText": "Will we want to eventually rename this class to something like IndexSpaceResolver?", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397942883", "createdAt": "2020-03-25T15:24:37Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java", "diffHunk": "@@ -14,7 +14,7 @@\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.support.IndicesOptions;\n import org.elasticsearch.cluster.metadata.AliasMetaData;\n-import org.elasticsearch.cluster.metadata.AliasOrIndex;\n+import org.elasticsearch.cluster.metadata.IndexSpace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146535bbd852c4f7ccfafbc759ac4e766059c1b3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyOTc0Ng==", "bodyText": "Yes, I think so.", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r398429746", "createdAt": "2020-03-26T09:32:31Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java", "diffHunk": "@@ -14,7 +14,7 @@\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.support.IndicesOptions;\n import org.elasticsearch.cluster.metadata.AliasMetaData;\n-import org.elasticsearch.cluster.metadata.AliasOrIndex;\n+import org.elasticsearch.cluster.metadata.IndexSpace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0Mjg4Mw=="}, "originalCommit": {"oid": "146535bbd852c4f7ccfafbc759ac4e766059c1b3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDgzMzEyOnYy", "diffSide": "RIGHT", "path": "plugins/examples/security-authorization-engine/src/test/java/org/elasticsearch/example/CustomAuthorizationEngineTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTowNjo1OFrOF8siRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTowNjo1OFrOF8siRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4ODU1MQ==", "bodyText": "Remove \"Space\" from variable name?", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399188551", "createdAt": "2020-03-27T11:06:58Z", "author": {"login": "henningandersen"}, "path": "plugins/examples/security-authorization-engine/src/test/java/org/elasticsearch/example/CustomAuthorizationEngineTests.java", "diffHunk": "@@ -130,8 +130,8 @@ public void testAuthorizeClusterAction() {\n \n     public void testAuthorizeIndexAction() {\n         CustomAuthorizationEngine engine = new CustomAuthorizationEngine();\n-        Map<String, AliasOrIndex> aliasOrIndexMap = new HashMap<>();\n-        aliasOrIndexMap.put(\"index\", new Index(IndexMetaData.builder(\"index\")\n+        Map<String, IndexAbstraction> indexSpaceMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b68fe8a9ee666db7a6d0408667712fb831d7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDkxMzYyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTozMjo0MlrOF8tUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTozMjo0MlrOF8tUQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwMTM0Ng==", "bodyText": "nit: also verify type (since we no longer do the cast).", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399201346", "createdAt": "2020-03-27T11:32:42Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java", "diffHunk": "@@ -341,7 +341,7 @@ public void testRolloverClusterState() throws Exception {\n             IndexMetaData rolloverIndexMetaData = rolloverMetaData.index(newIndexName);\n             assertThat(rolloverIndexMetaData.getNumberOfShards(), equalTo(numberOfShards));\n \n-            AliasOrIndex.Alias alias = (AliasOrIndex.Alias) rolloverMetaData.getAliasAndIndexLookup().get(aliasName);\n+            IndexAbstraction alias = rolloverMetaData.getIndicesLookup().get(aliasName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b68fe8a9ee666db7a6d0408667712fb831d7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAwMTgyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowMDo0MVrOF8uJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowMDo0MVrOF8uJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNTA0MA==", "bodyText": "I think the change to the exception message is not really a big issue. But with data streams also appearing, it could be nice to stick to the old message since that would give you some information on whether it is a datastream or concrete index. I think we could easily generate such a message by adding a display name (\"concrete index\") to the IndexAbstract.Type enum?\nAlso, this does make me wonder if Type.INDEX should be Type.CONCRETE_INDEX for consistency with that display name? Not truly important to me, feel free to ignore this part.", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399215040", "createdAt": "2020-03-27T12:00:41Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java", "diffHunk": "@@ -212,7 +212,7 @@ public void testValidation() {\n         assertThat(exception.getMessage(), equalTo(\"source alias [\" + aliasWithNoWriteIndex + \"] does not point to a write index\"));\n         exception = expectThrows(IllegalArgumentException.class, () ->\n             MetaDataRolloverService.validate(metaData, randomFrom(index1, index2)));\n-        assertThat(exception.getMessage(), equalTo(\"source alias is a concrete index\"));\n+        assertThat(exception.getMessage(), equalTo(\"source alias is not an alias\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b68fe8a9ee666db7a6d0408667712fb831d7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAxNTkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProviderIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNTowM1rOF8uSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNTowM1rOF8uSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNzE4Nw==", "bodyText": "Same comment on retaining the original message here.", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399217187", "createdAt": "2020-03-27T12:05:03Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProviderIndex.java", "diffHunk": "@@ -187,11 +187,11 @@ public void close() {\n         clusterService.removeListener(clusterStateListener);\n     }\n \n-    private void logChangedAliasState(AliasOrIndex aliasInfo) {\n+    private void logChangedAliasState(IndexAbstraction aliasInfo) {\n         if (aliasInfo == null) {\n             logger.warn(\"service provider index/alias [{}] no longer exists\", ALIAS_NAME);\n-        } else if (aliasInfo.isAlias() == false) {\n-            logger.warn(\"service provider index [{}] exists as a concrete index, but it should be an alias\", ALIAS_NAME);\n+        } else if (aliasInfo.getType() != IndexAbstraction.Type.ALIAS) {\n+            logger.warn(\"service provider index [{}] does not exist as an alias, but it should be\", ALIAS_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b68fe8a9ee666db7a6d0408667712fb831d7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAxOTE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlConfigMigratorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNjoxM1rOF8uUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNjoxM1rOF8uUNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNzcxOQ==", "bodyText": "Remove \"Space\" from variable name?", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399217719", "createdAt": "2020-03-27T12:06:13Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlConfigMigratorIT.java", "diffHunk": "@@ -83,8 +83,8 @@ public void setUpTests() {\n         ClusterSettings clusterSettings = new ClusterSettings(nodeSettings(), new HashSet<>(Collections.singletonList(\n                 MlConfigMigrationEligibilityCheck.ENABLE_CONFIG_MIGRATION)));\n         MetaData metaData = mock(MetaData.class);\n-        SortedMap<String, AliasOrIndex> aliasOrIndexSortedMap = new TreeMap<>();\n-        when(metaData.getAliasAndIndexLookup()).thenReturn(aliasOrIndexSortedMap);\n+        SortedMap<String, IndexAbstraction> indexSpaceSortedMap = new TreeMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b68fe8a9ee666db7a6d0408667712fb831d7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAyMzEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNzoyMVrOF8uWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNzoyMVrOF8uWbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODI4NQ==", "bodyText": "I think we should also include the display name of the actual type here.", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399218285", "createdAt": "2020-03-27T12:07:21Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java", "diffHunk": "@@ -228,12 +228,12 @@ static String getPutMappingIndexOrAlias(PutMappingRequest request, List<String>\n         final String concreteIndexName = request.getConcreteIndex().getName();\n \n         // validate that the concrete index exists, otherwise there is no remapping that we could do\n-        final AliasOrIndex aliasOrIndex = metaData.getAliasAndIndexLookup().get(concreteIndexName);\n+        final IndexAbstraction indexAbstraction = metaData.getIndicesLookup().get(concreteIndexName);\n         final String resolvedAliasOrIndex;\n-        if (aliasOrIndex == null) {\n+        if (indexAbstraction == null) {\n             resolvedAliasOrIndex = concreteIndexName;\n-        } else if (aliasOrIndex.isAlias()) {\n-            throw new IllegalStateException(\"concrete index [\" + concreteIndexName + \"] is an alias but should not be\");\n+        } else if (indexAbstraction.getType() != IndexAbstraction.Type.INDEX) {\n+            throw new IllegalStateException(\"concrete index [\" + concreteIndexName + \"] is not an index but should be\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b68fe8a9ee666db7a6d0408667712fb831d7"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4214, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}