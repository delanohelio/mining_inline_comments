{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Nzc3NDI4", "number": 51776, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1Mzo1NFrODcyeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozMToyMlrODdC01A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTEzNjIzOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1Mzo1NVrOFlBSBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjoyOTo0MFrOFlax1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MjYyOA==", "bodyText": "Consider cutting an issue for TODOs like this so they don't get lost, then ref the issue in the comment.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374362628", "createdAt": "2020-02-03T21:53:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java", "diffHunk": "@@ -125,7 +125,8 @@ public void writeStatementOffset(Location location) {\n         int offset = location.getOffset();\n         // ensure we don't have duplicate stuff going in here. can catch bugs\n         // (e.g. nodes get assigned wrong offsets by antlr walker)\n-        assert statements.get(offset) == false;\n+        // TODO: introduce a way to ignore internal statements so this assert is not triggered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzI5MA==", "bodyText": "Done: #51836", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374387290", "createdAt": "2020-02-03T22:52:08Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java", "diffHunk": "@@ -125,7 +125,8 @@ public void writeStatementOffset(Location location) {\n         int offset = location.getOffset();\n         // ensure we don't have duplicate stuff going in here. can catch bugs\n         // (e.g. nodes get assigned wrong offsets by antlr walker)\n-        assert statements.get(offset) == false;\n+        // TODO: introduce a way to ignore internal statements so this assert is not triggered", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MjYyOA=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MDM3Mg==", "bodyText": "Pls reference from TODO.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374780372", "createdAt": "2020-02-04T16:29:40Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java", "diffHunk": "@@ -125,7 +125,8 @@ public void writeStatementOffset(Location location) {\n         int offset = location.getOffset();\n         // ensure we don't have duplicate stuff going in here. can catch bugs\n         // (e.g. nodes get assigned wrong offsets by antlr walker)\n-        assert statements.get(offset) == false;\n+        // TODO: introduce a way to ignore internal statements so this assert is not triggered", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MjYyOA=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTE0MDExOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1NToyMlrOFlBUdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjo1NzozM1rOFlC6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MzI1NQ==", "bodyText": "Consider adding a comment here \"handle execute\" or something similar.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374363255", "createdAt": "2020-02-03T21:55:22Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -251,7 +252,20 @@ public ANode visitSource(SourceContext ctx) {\n             statements.add((AStatement)visit(statement));\n         }\n \n-        return new SClass(scriptClassInfo, sourceName, sourceText, debugStream, location(ctx), functions, statements);\n+        String returnCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(scriptClassInfo.getExecuteMethodReturnType());\n+        List<String> paramTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4OTMwNw==", "bodyText": "Added.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374389307", "createdAt": "2020-02-03T22:57:33Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -251,7 +252,20 @@ public ANode visitSource(SourceContext ctx) {\n             statements.add((AStatement)visit(statement));\n         }\n \n-        return new SClass(scriptClassInfo, sourceName, sourceText, debugStream, location(ctx), functions, statements);\n+        String returnCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(scriptClassInfo.getExecuteMethodReturnType());\n+        List<String> paramTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MzI1NQ=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTE0MjY4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1NjoxMVrOFlBV6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjo1Nzo1N1rOFlC69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MzYyNg==", "bodyText": "true, false, false, true\n\nugh.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374363626", "createdAt": "2020-02-03T21:56:11Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -251,7 +252,20 @@ public ANode visitSource(SourceContext ctx) {\n             statements.add((AStatement)visit(statement));\n         }\n \n-        return new SClass(scriptClassInfo, sourceName, sourceText, debugStream, location(ctx), functions, statements);\n+        String returnCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(scriptClassInfo.getExecuteMethodReturnType());\n+        List<String> paramTypes = new ArrayList<>();\n+        List<String> paramNames = new ArrayList<>();\n+\n+        for (ScriptClassInfo.MethodArgument argument : scriptClassInfo.getExecuteArguments()) {\n+            paramTypes.add(PainlessLookupUtility.typeToCanonicalTypeName(argument.getClazz()));\n+            paramNames.add(argument.getName());\n+        }\n+\n+        SFunction execute = new SFunction(location(ctx), returnCanonicalTypeName, \"execute\", paramTypes, paramNames, new SBlock(\n+                location(ctx), statements), true, false, false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4OTQ5NQ==", "bodyText": "Agreed. I would like to change these to an enum in a future PR.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374389495", "createdAt": "2020-02-03T22:57:57Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -251,7 +252,20 @@ public ANode visitSource(SourceContext ctx) {\n             statements.add((AStatement)visit(statement));\n         }\n \n-        return new SClass(scriptClassInfo, sourceName, sourceText, debugStream, location(ctx), functions, statements);\n+        String returnCanonicalTypeName = PainlessLookupUtility.typeToCanonicalTypeName(scriptClassInfo.getExecuteMethodReturnType());\n+        List<String> paramTypes = new ArrayList<>();\n+        List<String> paramNames = new ArrayList<>();\n+\n+        for (ScriptClassInfo.MethodArgument argument : scriptClassInfo.getExecuteArguments()) {\n+            paramTypes.add(PainlessLookupUtility.typeToCanonicalTypeName(argument.getClazz()));\n+            paramNames.add(argument.getName());\n+        }\n+\n+        SFunction execute = new SFunction(location(ctx), returnCanonicalTypeName, \"execute\", paramTypes, paramNames, new SBlock(\n+                location(ctx), statements), true, false, false, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MzYyNg=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTE1MDc1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/test/java/org/elasticsearch/painless/node/NodeToStringTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1ODozOFrOFlBamA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDoyNzoyOVrOFlEnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2NDgyNA==", "bodyText": "?", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374364824", "createdAt": "2020-02-03T21:58:38Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/test/java/org/elasticsearch/painless/node/NodeToStringTests.java", "diffHunk": "@@ -19,39 +19,16 @@\n \n package org.elasticsearch.painless.node;\n \n-import org.elasticsearch.painless.CompilerSettings;\n-import org.elasticsearch.painless.FeatureTestObject;\n-import org.elasticsearch.painless.Scope.Variable;\n-import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.ScriptClassInfo;\n-import org.elasticsearch.painless.action.PainlessExecuteAction.PainlessTestScript;\n-import org.elasticsearch.painless.antlr.Walker;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessClass;\n-import org.elasticsearch.painless.lookup.PainlessField;\n-import org.elasticsearch.painless.lookup.PainlessLookup;\n-import org.elasticsearch.painless.lookup.PainlessLookupBuilder;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n-import org.elasticsearch.painless.spi.Whitelist;\n-import org.elasticsearch.painless.spi.WhitelistLoader;\n import org.elasticsearch.test.ESTestCase;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.singletonList;\n+// TODO: fix these tests to match new node structure\n \n /**\n  * Tests {@link Object#toString} implementations on all extensions of {@link ANode}.\n  */\n public class NodeToStringTests extends ESTestCase {\n \n-    public void testEAssignment() {\n+    /*public void testEAssignment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODg4OQ==", "bodyText": "Can you do Test.skip(\"ignoring rapidly changing tests until quiescent, see issue #XXXX\")", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374368889", "createdAt": "2020-02-03T22:07:42Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/test/java/org/elasticsearch/painless/node/NodeToStringTests.java", "diffHunk": "@@ -19,39 +19,16 @@\n \n package org.elasticsearch.painless.node;\n \n-import org.elasticsearch.painless.CompilerSettings;\n-import org.elasticsearch.painless.FeatureTestObject;\n-import org.elasticsearch.painless.Scope.Variable;\n-import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.ScriptClassInfo;\n-import org.elasticsearch.painless.action.PainlessExecuteAction.PainlessTestScript;\n-import org.elasticsearch.painless.antlr.Walker;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessClass;\n-import org.elasticsearch.painless.lookup.PainlessField;\n-import org.elasticsearch.painless.lookup.PainlessLookup;\n-import org.elasticsearch.painless.lookup.PainlessLookupBuilder;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n-import org.elasticsearch.painless.spi.Whitelist;\n-import org.elasticsearch.painless.spi.WhitelistLoader;\n import org.elasticsearch.test.ESTestCase;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.singletonList;\n+// TODO: fix these tests to match new node structure\n \n /**\n  * Tests {@link Object#toString} implementations on all extensions of {@link ANode}.\n  */\n public class NodeToStringTests extends ESTestCase {\n \n-    public void testEAssignment() {\n+    /*public void testEAssignment() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2NDgyNA=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNzE1Ng==", "bodyText": "Done: #51842", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374417156", "createdAt": "2020-02-04T00:27:29Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/test/java/org/elasticsearch/painless/node/NodeToStringTests.java", "diffHunk": "@@ -19,39 +19,16 @@\n \n package org.elasticsearch.painless.node;\n \n-import org.elasticsearch.painless.CompilerSettings;\n-import org.elasticsearch.painless.FeatureTestObject;\n-import org.elasticsearch.painless.Scope.Variable;\n-import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.ScriptClassInfo;\n-import org.elasticsearch.painless.action.PainlessExecuteAction.PainlessTestScript;\n-import org.elasticsearch.painless.antlr.Walker;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessClass;\n-import org.elasticsearch.painless.lookup.PainlessField;\n-import org.elasticsearch.painless.lookup.PainlessLookup;\n-import org.elasticsearch.painless.lookup.PainlessLookupBuilder;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n-import org.elasticsearch.painless.spi.Whitelist;\n-import org.elasticsearch.painless.spi.WhitelistLoader;\n import org.elasticsearch.test.ESTestCase;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.singletonList;\n+// TODO: fix these tests to match new node structure\n \n /**\n  * Tests {@link Object#toString} implementations on all extensions of {@link ANode}.\n  */\n public class NodeToStringTests extends ESTestCase {\n \n-    public void testEAssignment() {\n+    /*public void testEAssignment() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2NDgyNA=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTIwMTc4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjoxNjo0NVrOFlB6Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzo0Nzo1N1rOFlD7RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3Mjg2Ng==", "bodyText": "doAutoReturn implies an action, perhaps autoReturnEnabled?", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374372866", "createdAt": "2020-02-03T22:16:45Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "diffHunk": "@@ -56,19 +59,23 @@\n \n     org.objectweb.asm.commons.Method method;\n \n+    private ScriptRoot scriptRoot;\n     private boolean methodEscape;\n \n     public SFunction(Location location, String rtnType, String name,\n             List<String> paramTypes, List<String> paramNames,\n-            SBlock block, boolean synthetic) {\n+            SBlock block, boolean isInternal, boolean isStatic, boolean synthetic, boolean doAutoReturn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNTk1Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374405957", "createdAt": "2020-02-03T23:47:57Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "diffHunk": "@@ -56,19 +59,23 @@\n \n     org.objectweb.asm.commons.Method method;\n \n+    private ScriptRoot scriptRoot;\n     private boolean methodEscape;\n \n     public SFunction(Location location, String rtnType, String name,\n             List<String> paramTypes, List<String> paramNames,\n-            SBlock block, boolean synthetic) {\n+            SBlock block, boolean isInternal, boolean isStatic, boolean synthetic, boolean doAutoReturn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3Mjg2Ng=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTIyMDQyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjoyMzozM1rOFlCFVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzo0ODowM1rOFlD7YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3NTc2Ng==", "bodyText": "Even with the name change, a comment on the semantics of this var would be useful since it's a non-standard extension.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374375766", "createdAt": "2020-02-03T22:23:33Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "diffHunk": "@@ -47,14 +63,25 @@ public BlockNode getBlockNode() {\n \n     /* ---- end tree structure, begin node data ---- */\n \n+    private ScriptRoot scriptRoot;\n     private String name;\n     private Class<?> returnType;\n     private List<Class<?>> typeParameters = new ArrayList<>();\n     private List<String> parameterNames = new ArrayList<>();\n+    private boolean isStatic;\n     private boolean isSynthetic;\n+    private boolean doAutoReturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNTk4NQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374405985", "createdAt": "2020-02-03T23:48:03Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "diffHunk": "@@ -47,14 +63,25 @@ public BlockNode getBlockNode() {\n \n     /* ---- end tree structure, begin node data ---- */\n \n+    private ScriptRoot scriptRoot;\n     private String name;\n     private Class<?> returnType;\n     private List<Class<?>> typeParameters = new ArrayList<>();\n     private List<String> parameterNames = new ArrayList<>();\n+    private boolean isStatic;\n     private boolean isSynthetic;\n+    private boolean doAutoReturn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3NTc2Ng=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTIzODQyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjozMDoxOFrOFlCQYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDowMzozMFrOFlEMsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3ODU5NA==", "bodyText": "Can you do something like:\ntry {\n\n} catch (XXX) {\n\n}", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374378594", "createdAt": "2020-02-03T22:30:18Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "diffHunk": "@@ -136,6 +185,34 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals\n         methodWriter = classWriter.newMethodWriter(access, method);\n         methodWriter.visitCode();\n \n+        // TODO: do not specialize for execute\n+        Label startTry = new Label();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3ODc5Mg==", "bodyText": "It's hard to understand what's going here without some clarity.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374378792", "createdAt": "2020-02-03T22:30:41Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "diffHunk": "@@ -136,6 +185,34 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals\n         methodWriter = classWriter.newMethodWriter(access, method);\n         methodWriter.visitCode();\n \n+        // TODO: do not specialize for execute\n+        Label startTry = new Label();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3ODU5NA=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3OTE4Nw==", "bodyText": "Just a sign-post here would be fine.  \"Start handling try\"", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374379187", "createdAt": "2020-02-03T22:31:39Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "diffHunk": "@@ -136,6 +185,34 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals\n         methodWriter = classWriter.newMethodWriter(access, method);\n         methodWriter.visitCode();\n \n+        // TODO: do not specialize for execute\n+        Label startTry = new Label();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3ODU5NA=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMDQxNw==", "bodyText": "Added several comments to clarify what's happening in this code", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374410417", "createdAt": "2020-02-04T00:03:30Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FunctionNode.java", "diffHunk": "@@ -136,6 +185,34 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals\n         methodWriter = classWriter.newMethodWriter(access, method);\n         methodWriter.visitCode();\n \n+        // TODO: do not specialize for execute\n+        Label startTry = new Label();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3ODU5NA=="}, "originalCommit": {"oid": "b12215f7e148551246196c6a3b419273d8147aea"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzgxNTg4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozMToyMlrOFla2Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzowMzoxNVrOFlcBlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MTQ1MA==", "bodyText": "no need to change, but I usually do something like\n// TODO: do not specialize for execute, see #51841", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374781450", "createdAt": "2020-02-04T16:31:22Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "diffHunk": "@@ -122,9 +149,17 @@ void analyze(ScriptRoot scriptRoot) {\n         block.analyze(scriptRoot, functionScope.newLocalScope());\n         methodEscape = block.methodEscape;\n \n-        if (!methodEscape && returnType != void.class) {\n-            throw createError(new IllegalArgumentException(\"Not all paths provide a return value for method [\" + name + \"].\"));\n+        if (methodEscape == false && isAutoReturnEnabled == false && returnType != void.class) {\n+            throw createError(new IllegalArgumentException(\"not all paths provide a return value \" +\n+                    \"for function [\" + name + \"] with [\" + typeParameters.size() + \"] parameters\"));\n+        }\n+\n+        // TODO: do not specialize for execute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3479ef0f3c3b19a33e39bdb7828b1e01373f589a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMDc4OQ==", "bodyText": "Got it. Will do for the next instance.", "url": "https://github.com/elastic/elasticsearch/pull/51776#discussion_r374800789", "createdAt": "2020-02-04T17:03:15Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "diffHunk": "@@ -122,9 +149,17 @@ void analyze(ScriptRoot scriptRoot) {\n         block.analyze(scriptRoot, functionScope.newLocalScope());\n         methodEscape = block.methodEscape;\n \n-        if (!methodEscape && returnType != void.class) {\n-            throw createError(new IllegalArgumentException(\"Not all paths provide a return value for method [\" + name + \"].\"));\n+        if (methodEscape == false && isAutoReturnEnabled == false && returnType != void.class) {\n+            throw createError(new IllegalArgumentException(\"not all paths provide a return value \" +\n+                    \"for function [\" + name + \"] with [\" + typeParameters.size() + \"] parameters\"));\n+        }\n+\n+        // TODO: do not specialize for execute", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MTQ1MA=="}, "originalCommit": {"oid": "3479ef0f3c3b19a33e39bdb7828b1e01373f589a"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 27, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}