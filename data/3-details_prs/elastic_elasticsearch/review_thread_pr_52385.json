{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTg0NDE5", "number": 52385, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowMjozNVrODgB8TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyNToxNFrODjR5tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTEyODQ0OnYy", "diffSide": "RIGHT", "path": "modules/kibana/build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowMjozNVrOFqE7hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTozNzo1OFrOFrPwwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTI4NA==", "bodyText": "This caught my eye and after a quick search I see we do this all over the place. @rjernst any idea why were are explicitly declaring a dependency on the publishing project's runtime configuration? This is generally redundant as the default configuration for Java projects is this already.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r379665284", "createdAt": "2020-02-14T22:02:35Z", "author": {"login": "mark-vieira"}, "path": "modules/kibana/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Plugin exposing APIs for Kibana system indices'\n+  classname 'org.elasticsearch.kibana.KibanaPlugin'\n+}\n+\n+dependencies {\n+  compile project(path: ':modules:reindex', configuration: 'runtime')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb8a65cd070403e9d6b35e1421ebdeb49466068"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTkzMw==", "bodyText": "Well actually, I think what the behavior of this is, is that we will bring in all the runtime dependencies of that project, but not the JAR for that project itself. Is that handled differently? Are we expecting the module jars to be on the runtime classpath already so no need?", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r379665933", "createdAt": "2020-02-14T22:04:34Z", "author": {"login": "mark-vieira"}, "path": "modules/kibana/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Plugin exposing APIs for Kibana system indices'\n+  classname 'org.elasticsearch.kibana.KibanaPlugin'\n+}\n+\n+dependencies {\n+  compile project(path: ':modules:reindex', configuration: 'runtime')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTI4NA=="}, "originalCommit": {"oid": "8cb8a65cd070403e9d6b35e1421ebdeb49466068"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3MDQxMA==", "bodyText": "I don't recall why we have this in some places. I do now notice we explicitly declare the default configuration to extend runtime (in PluginBuildPlugin):\nproject.configurations.getByName('default').extendsFrom(project.configurations.getByName('runtime'))\n\nI vaguely recall having issues with getting the jars instead of the zip. In the case here, we are trying to reuse the request builders, but unfortunately we don't package or ship these, so we must pull in a copy of the entire module.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r379670410", "createdAt": "2020-02-14T22:18:55Z", "author": {"login": "rjernst"}, "path": "modules/kibana/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Plugin exposing APIs for Kibana system indices'\n+  classname 'org.elasticsearch.kibana.KibanaPlugin'\n+}\n+\n+dependencies {\n+  compile project(path: ':modules:reindex', configuration: 'runtime')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTI4NA=="}, "originalCommit": {"oid": "8cb8a65cd070403e9d6b35e1421ebdeb49466068"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5MTMyOQ==", "bodyText": "I vaguely recall having issues with getting the jars instead of the zip.\n\nAh, this sounds like it makes sense. Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r380891329", "createdAt": "2020-02-18T19:37:58Z", "author": {"login": "mark-vieira"}, "path": "modules/kibana/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Plugin exposing APIs for Kibana system indices'\n+  classname 'org.elasticsearch.kibana.KibanaPlugin'\n+}\n+\n+dependencies {\n+  compile project(path: ':modules:reindex', configuration: 'runtime')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTI4NA=="}, "originalCommit": {"oid": "8cb8a65cd070403e9d6b35e1421ebdeb49466068"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjcxMjUwOnYy", "diffSide": "RIGHT", "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MTowNlrOFu7bKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoyNDo0OFrOFvgBoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw==", "bodyText": "@tylersmalley I was looking at elastic/kibana#49764 and I wanted to make sure I understood the request there for the paths where you have _kibana/{kibana.name}/ and kibana.name would be understood by elasticsearch based on settings.\nRight now in this plugin, the setting I have would look like this in the elasticsearch.yml file:\nkibana.system_indices: [ \".kibana\", \".kibana_task_manager\", \".reporting\" ]\nI think the Kibana issue is actually looking for something more like:\nkibana:\n  instances:\n    my_kibana:\n       kibana_index: \".my-kibana\"\n       task_manager_index: \".my-tm\"\n       reporting_index: \".my-reports\"\nIs this correct?", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384752427", "createdAt": "2020-02-26T20:41:06Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNDU5NA==", "bodyText": "The latter is correct. Ideally, I would like to define a list of names which we could derive each index off of, but that won't work today as users can configure them individually.\nIn that example, would the endpoint be _kibana/my_kibana/*?\nIt would probably also make sense to include a default so Kibana instance configuration is only necessary if they intend on having multiple instances.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384814594", "createdAt": "2020-02-26T22:47:23Z", "author": {"login": "tylersmalley"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyODIyNw==", "bodyText": "Yes that would be the endpoint path. For the default, I think we will still want an instance name so maybe just \u2018kibana\u2019 for that?", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384828227", "createdAt": "2020-02-26T23:24:09Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODg4MA==", "bodyText": "Agreed. Though, could we use default for the name of the default instance? I feel this should be clear as to what the instance is and avoid _kibana/kibana/*", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384838880", "createdAt": "2020-02-26T23:57:11Z", "author": {"login": "tylersmalley"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NDc3MQ==", "bodyText": "What is the risk for not whitelisting kibana instances and indices? From a user's perspective it's error prone to have to adjust both the kibana and elasticsearch config files and keep them in sync. The status quo is that Kibana creates any instances (it's currently just an index prefix) and indices it wants to.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385044771", "createdAt": "2020-02-27T10:39:43Z", "author": {"login": "rudolf"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyNDQwMg==", "bodyText": "Every system index plugin needs to declare the system indices it is used for as a way to identify indices that are system indices. If you are ok with just creating all of your indices under a single prefix, then I think that would be fine.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385224402", "createdAt": "2020-02-27T16:32:15Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyODA0Ng==", "bodyText": "A question was also brought up as to if we would consider this a breaking change if it was introduced before 8.0. Currently, to migrate to the system indices the user would be required to update ES and Kibana configuration.\nThe prefixing is interesting idea worth exploring, but would require coming up with a plan to migrate to these index names, correct?", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385228046", "createdAt": "2020-02-27T16:37:45Z", "author": {"login": "tylersmalley"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MjAyOA==", "bodyText": "Good point on it being breaking. One thing we can do is allow the APIs under /_kibana to be unrestricted for the indices that could be used in 7.x.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385242028", "createdAt": "2020-02-27T16:59:20Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MjA5Nw==", "bodyText": "For the time being, I have gone ahead and removed the limiting of indices accessible by the APIs until we figure out what we should do here regarding these indices and their names.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385352097", "createdAt": "2020-02-27T20:24:48Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjQyNw=="}, "originalCommit": {"oid": "2a749968b156b57cc1258f4272f37415f03c9325"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzEyMzk4OnYy", "diffSide": "RIGHT", "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1Mjo0MVrOFu_WFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1Mjo0MVrOFu_WFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNjY2Mg==", "bodyText": "Nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))\n          \n          \n            \n                        .map(pattern -> new SystemIndexDescriptor(pattern, \"System index used by kibana\"))\n          \n      \n    \n    \n  \n\nThe description applies to a single index, not multiple.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384816662", "createdAt": "2020-02-26T22:52:41Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",\n+        unmodifiableList(Arrays.asList(\".kibana\", \".kibana_task_manager\", \".reporting\")), Function.identity(), Property.NodeScope);\n+\n+    @Override\n+    public Collection<SystemIndexDescriptor> getSystemIndexDescriptors(Settings settings) {\n+        return KIBANA_INDEX_NAMES_SETTING.get(settings).stream()\n+            .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzEzNjQzOnYy", "diffSide": "RIGHT", "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1NzoxNlrOFu_diA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoyNToxMVrOFvX76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODU2OA==", "bodyText": "Do you think this is worth breaking out into its own file, rather than nesting it in the Kibana plugin? This seems like it might be useful for any other plugins that follow this pattern.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384818568", "createdAt": "2020-02-26T22:57:16Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",\n+        unmodifiableList(Arrays.asList(\".kibana\", \".kibana_task_manager\", \".reporting\")), Function.identity(), Property.NodeScope);\n+\n+    @Override\n+    public Collection<SystemIndexDescriptor> getSystemIndexDescriptors(Settings settings) {\n+        return KIBANA_INDEX_NAMES_SETTING.get(settings).stream()\n+            .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))\n+            .collect(Collectors.toUnmodifiableList());\n+    }\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,\n+                                             IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter,\n+                                             IndexNameExpressionResolver indexNameExpressionResolver,\n+                                             Supplier<DiscoveryNodes> nodesInCluster) {\n+        final List<String> allowedIndexPatterns = KIBANA_INDEX_NAMES_SETTING.get(settings);\n+        return List.of(\n+            // Based on https://github.com/elastic/kibana/issues/49764\n+            // apis needed to perform migrations... ideally these will go away\n+            new KibanaWrappedRestHandler(new RestCreateIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestGetAliasesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexPutAliasAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestRefreshAction(), allowedIndexPatterns),\n+\n+            // apis needed to access saved objects\n+            new KibanaWrappedRestHandler(new RestGetAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestMultiGetAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestBulkAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteByQueryAction(), allowedIndexPatterns),\n+\n+            // api used for testing\n+            new KibanaWrappedRestHandler(new RestUpdateSettingsAction(), allowedIndexPatterns),\n+\n+            // apis used specifically by reporting\n+            new KibanaWrappedRestHandler(new RestGetIndicesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestUpdateAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchScrollAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestClearScrollAction(), allowedIndexPatterns)\n+        );\n+\n+    }\n+\n+    @Override\n+    public List<Setting<?>> getSettings() {\n+        return List.of(KIBANA_INDEX_NAMES_SETTING);\n+    }\n+\n+    static class KibanaWrappedRestHandler extends BaseRestHandler.Wrapper {\n+\n+        private final List<String> allowedIndexPatterns;\n+\n+        KibanaWrappedRestHandler(BaseRestHandler delegate, List<String> allowedIndexPatterns) {\n+            super(delegate);\n+            this.allowedIndexPatterns = allowedIndexPatterns;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"kibana_\" + super.getName();\n+        }\n+\n+        @Override\n+        public List<Route> routes() {\n+            return super.routes().stream().map(route -> new Route(route.getMethod(), \"/_kibana\" + route.getPath()))\n+                .collect(Collectors.toUnmodifiableList());\n+        }\n+\n+        @Override\n+        protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+            client.threadPool().getThreadContext().allowSystemIndexAccess(allowedIndexPatterns);\n+            return super.prepareRequest(request, new IndexLimitingNodeClient(client, allowedIndexPatterns));\n+        }\n+    }\n+\n+    static class IndexLimitingNodeClient extends NodeClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxOTU2Mw==", "bodyText": "I am not ready to break this out just yet because there are no guarantees that its functional beyond the APIs used by this plugin. Also, I still have some reservations about whether I should do it this way or handle it elsewhere.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385219563", "createdAt": "2020-02-27T16:25:11Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",\n+        unmodifiableList(Arrays.asList(\".kibana\", \".kibana_task_manager\", \".reporting\")), Function.identity(), Property.NodeScope);\n+\n+    @Override\n+    public Collection<SystemIndexDescriptor> getSystemIndexDescriptors(Settings settings) {\n+        return KIBANA_INDEX_NAMES_SETTING.get(settings).stream()\n+            .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))\n+            .collect(Collectors.toUnmodifiableList());\n+    }\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,\n+                                             IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter,\n+                                             IndexNameExpressionResolver indexNameExpressionResolver,\n+                                             Supplier<DiscoveryNodes> nodesInCluster) {\n+        final List<String> allowedIndexPatterns = KIBANA_INDEX_NAMES_SETTING.get(settings);\n+        return List.of(\n+            // Based on https://github.com/elastic/kibana/issues/49764\n+            // apis needed to perform migrations... ideally these will go away\n+            new KibanaWrappedRestHandler(new RestCreateIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestGetAliasesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexPutAliasAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestRefreshAction(), allowedIndexPatterns),\n+\n+            // apis needed to access saved objects\n+            new KibanaWrappedRestHandler(new RestGetAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestMultiGetAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestBulkAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteByQueryAction(), allowedIndexPatterns),\n+\n+            // api used for testing\n+            new KibanaWrappedRestHandler(new RestUpdateSettingsAction(), allowedIndexPatterns),\n+\n+            // apis used specifically by reporting\n+            new KibanaWrappedRestHandler(new RestGetIndicesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestUpdateAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchScrollAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestClearScrollAction(), allowedIndexPatterns)\n+        );\n+\n+    }\n+\n+    @Override\n+    public List<Setting<?>> getSettings() {\n+        return List.of(KIBANA_INDEX_NAMES_SETTING);\n+    }\n+\n+    static class KibanaWrappedRestHandler extends BaseRestHandler.Wrapper {\n+\n+        private final List<String> allowedIndexPatterns;\n+\n+        KibanaWrappedRestHandler(BaseRestHandler delegate, List<String> allowedIndexPatterns) {\n+            super(delegate);\n+            this.allowedIndexPatterns = allowedIndexPatterns;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"kibana_\" + super.getName();\n+        }\n+\n+        @Override\n+        public List<Route> routes() {\n+            return super.routes().stream().map(route -> new Route(route.getMethod(), \"/_kibana\" + route.getPath()))\n+                .collect(Collectors.toUnmodifiableList());\n+        }\n+\n+        @Override\n+        protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+            client.threadPool().getThreadContext().allowSystemIndexAccess(allowedIndexPatterns);\n+            return super.prepareRequest(request, new IndexLimitingNodeClient(client, allowedIndexPatterns));\n+        }\n+    }\n+\n+    static class IndexLimitingNodeClient extends NodeClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODU2OA=="}, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzE0ODkwOnYy", "diffSide": "RIGHT", "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowMjoyMFrOFu_lVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowMjoyMFrOFu_lVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMDU2Nw==", "bodyText": "We might need wildcard support eventually, although I don't think we do for Kibana (@tylersmalley do you know?). Date math support is more questionable. It might be worth trying to detect it and throwing an exception, similar to what we do here.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384820567", "createdAt": "2020-02-26T23:02:20Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/main/java/org/elasticsearch/kibana/KibanaPlugin.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.CharacterRunAutomaton;\n+import org.apache.lucene.util.automaton.Operations;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.get.MultiGetRequest;\n+import org.elasticsearch.action.get.MultiGetRequest.Item;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Setting.Property;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.index.reindex.RestDeleteByQueryAction;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetAliasesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestGetIndicesAction;\n+import org.elasticsearch.rest.action.admin.indices.RestIndexPutAliasAction;\n+import org.elasticsearch.rest.action.admin.indices.RestRefreshAction;\n+import org.elasticsearch.rest.action.admin.indices.RestUpdateSettingsAction;\n+import org.elasticsearch.rest.action.document.RestBulkAction;\n+import org.elasticsearch.rest.action.document.RestDeleteAction;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+import org.elasticsearch.rest.action.document.RestIndexAction;\n+import org.elasticsearch.rest.action.document.RestMultiGetAction;\n+import org.elasticsearch.rest.action.document.RestUpdateAction;\n+import org.elasticsearch.rest.action.search.RestClearScrollAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchScrollAction;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.unmodifiableList;\n+\n+public class KibanaPlugin extends Plugin implements SystemIndexPlugin {\n+\n+    public static final Setting<List<String>> KIBANA_INDEX_NAMES_SETTING = Setting.listSetting(\"kibana.system_indices\",\n+        unmodifiableList(Arrays.asList(\".kibana\", \".kibana_task_manager\", \".reporting\")), Function.identity(), Property.NodeScope);\n+\n+    @Override\n+    public Collection<SystemIndexDescriptor> getSystemIndexDescriptors(Settings settings) {\n+        return KIBANA_INDEX_NAMES_SETTING.get(settings).stream()\n+            .map(pattern -> new SystemIndexDescriptor(pattern, \"System indices used by kibana\"))\n+            .collect(Collectors.toUnmodifiableList());\n+    }\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,\n+                                             IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter,\n+                                             IndexNameExpressionResolver indexNameExpressionResolver,\n+                                             Supplier<DiscoveryNodes> nodesInCluster) {\n+        final List<String> allowedIndexPatterns = KIBANA_INDEX_NAMES_SETTING.get(settings);\n+        return List.of(\n+            // Based on https://github.com/elastic/kibana/issues/49764\n+            // apis needed to perform migrations... ideally these will go away\n+            new KibanaWrappedRestHandler(new RestCreateIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestGetAliasesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexPutAliasAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestRefreshAction(), allowedIndexPatterns),\n+\n+            // apis needed to access saved objects\n+            new KibanaWrappedRestHandler(new RestGetAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestMultiGetAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestBulkAction(settings), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestDeleteByQueryAction(), allowedIndexPatterns),\n+\n+            // api used for testing\n+            new KibanaWrappedRestHandler(new RestUpdateSettingsAction(), allowedIndexPatterns),\n+\n+            // apis used specifically by reporting\n+            new KibanaWrappedRestHandler(new RestGetIndicesAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestIndexAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestUpdateAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestSearchScrollAction(), allowedIndexPatterns),\n+            new KibanaWrappedRestHandler(new RestClearScrollAction(), allowedIndexPatterns)\n+        );\n+\n+    }\n+\n+    @Override\n+    public List<Setting<?>> getSettings() {\n+        return List.of(KIBANA_INDEX_NAMES_SETTING);\n+    }\n+\n+    static class KibanaWrappedRestHandler extends BaseRestHandler.Wrapper {\n+\n+        private final List<String> allowedIndexPatterns;\n+\n+        KibanaWrappedRestHandler(BaseRestHandler delegate, List<String> allowedIndexPatterns) {\n+            super(delegate);\n+            this.allowedIndexPatterns = allowedIndexPatterns;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"kibana_\" + super.getName();\n+        }\n+\n+        @Override\n+        public List<Route> routes() {\n+            return super.routes().stream().map(route -> new Route(route.getMethod(), \"/_kibana\" + route.getPath()))\n+                .collect(Collectors.toUnmodifiableList());\n+        }\n+\n+        @Override\n+        protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+            client.threadPool().getThreadContext().allowSystemIndexAccess(allowedIndexPatterns);\n+            return super.prepareRequest(request, new IndexLimitingNodeClient(client, allowedIndexPatterns));\n+        }\n+    }\n+\n+    static class IndexLimitingNodeClient extends NodeClient {\n+\n+        private final NodeClient nodeClient;\n+        private final String[] allowedIndexPatterns;\n+        private final Automaton allowedIndexAutomaton;\n+        private final CharacterRunAutomaton automaton;\n+\n+        IndexLimitingNodeClient(NodeClient nodeClient, List<String> allowedIndexPatterns) {\n+            super(nodeClient.settings(), nodeClient.threadPool());\n+            this.nodeClient = nodeClient;\n+            this.allowedIndexPatterns = allowedIndexPatterns.toArray(Strings.EMPTY_ARRAY);\n+            this.allowedIndexAutomaton = Regex.simpleMatchToAutomaton(this.allowedIndexPatterns);\n+            this.automaton = new CharacterRunAutomaton(this.allowedIndexAutomaton);\n+        }\n+\n+        @Override\n+        public <Request extends ActionRequest, Response extends ActionResponse> Task executeLocally(ActionType<Response> action,\n+                                                                                                    Request request,\n+                                                                                                    ActionListener<Response> listener) {\n+            final String[] indices;\n+            if (request instanceof BulkRequest) {\n+                indices = ((BulkRequest) request).requests().stream()\n+                    .map(DocWriteRequest::index)\n+                    .collect(Collectors.toList())\n+                    .toArray(Strings.EMPTY_ARRAY);\n+            } else if (request instanceof MultiGetRequest) {\n+                indices = ((MultiGetRequest) request).getItems().stream()\n+                    .map(Item::index)\n+                    .collect(Collectors.toList())\n+                    .toArray(Strings.EMPTY_ARRAY);\n+            } else if (request instanceof IndicesRequest) {\n+                indices = ((IndicesRequest) request).indices();\n+            } else {\n+                throw new IllegalArgumentException(\"This client cannot be used to make a non indices request\");\n+            }\n+\n+            if (indices == null || indices.length == 0 ||\n+                (indices.length == 1 && (IndexNameExpressionResolver.isAllIndices(List.of(indices)) || indices[0].equals(\"*\")))) {\n+                if (request instanceof IndicesRequest.Replaceable) {\n+                    // just replace this with the allowed system index patterns\n+                    ((IndicesRequest.Replaceable) request).indices(allowedIndexPatterns);\n+                } else {\n+                    throw new IllegalStateException(\"Unable to replace indices on request \" +\n+                        request.getClass().getSimpleName());\n+                }\n+            } else {\n+                for (String index : indices) {\n+                    // TODO this will not handle date math, is that OK? Do we need wildcard support?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzE1NzU0OnYy", "diffSide": "RIGHT", "path": "modules/kibana/src/test/java/org/elasticsearch/kibana/KibanaSystemIndexIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowNTo0OVrOFu_qgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo1MDo0NVrOFvWg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMTg4OA==", "bodyText": "Since this appears to be using the REST interface anyway, any reason this isn't an ESRestTestCase? I thought that was generally preferred for new suites that don't need to meddle with ES internals over ESIntegTestCase.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384821888", "createdAt": "2020-02-26T23:05:49Z", "author": {"login": "gwbrown"}, "path": "modules/kibana/src/test/java/org/elasticsearch/kibana/KibanaSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.test.ESIntegTestCase;\n+\n+import java.io.IOException;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class KibanaSystemIndexIT extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5NjI2NA==", "bodyText": "Good call", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385196264", "createdAt": "2020-02-27T15:50:45Z", "author": {"login": "jaymode"}, "path": "modules/kibana/src/test/java/org/elasticsearch/kibana/KibanaSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.kibana;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.test.ESIntegTestCase;\n+\n+import java.io.IOException;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class KibanaSystemIndexIT extends ESIntegTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMTg4OA=="}, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzIwMDU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/transport/InboundMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyNToxNFrOFvAEtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoyMzowMFrOFvX2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyODU5Ng==", "bodyText": "I'm not sure anything really needs to change, but I think we're now setting the version of the input stream multiple times - decompressingStream() and namedWriteableStream() in this file both set the version after constructing a new wrapper object, but both wrappers delegate version handling to the original StreamInput object anyway. I'm not sure why it wasn't set here in the first place.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r384828596", "createdAt": "2020-02-26T23:25:14Z", "author": {"login": "gwbrown"}, "path": "server/src/main/java/org/elasticsearch/transport/InboundMessage.java", "diffHunk": "@@ -62,6 +62,7 @@ InboundMessage deserialize(BytesReference reference) throws IOException {\n                 long requestId = streamInput.readLong();\n                 byte status = streamInput.readByte();\n                 Version remoteVersion = Version.fromId(streamInput.readInt());\n+                streamInput.setVersion(remoteVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxODEyMg==", "bodyText": "Thanks for pointing this out. I went ahead and did some cleanup work here.", "url": "https://github.com/elastic/elasticsearch/pull/52385#discussion_r385218122", "createdAt": "2020-02-27T16:23:00Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/transport/InboundMessage.java", "diffHunk": "@@ -62,6 +62,7 @@ InboundMessage deserialize(BytesReference reference) throws IOException {\n                 long requestId = streamInput.readLong();\n                 byte status = streamInput.readByte();\n                 Version remoteVersion = Version.fromId(streamInput.readInt());\n+                streamInput.setVersion(remoteVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyODU5Ng=="}, "originalCommit": {"oid": "2a8b63747fe4a06df2ac63192c9c5c8931370dd5"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3914, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}