{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjU4MjM0", "number": 55639, "title": "Add a simple 'fetch fields' phase.", "bodyText": "Note: the PR is opened against the field-retrieval feature branch.\nCurrently the phase just looks up each field name in the _source and returns its values in the 'fields' section of the response. This PR just lays out the initial class structure and tests -- much of the interesting functionality will come in subsequent PRs.\nKnown issues that will be addressed in future commits:\n\nFields like geopoints whose value can be an array are not handled correctly. Without consulting the mapping, it's not possible to know if it's a multi-valued field, or a single field with an array value.\nWe take a very simple approach to loading the values from _source. I've had discussions with the scripting team about a new SourceLookup method they have planned to efficiently load particular values: #52591. I plan to make use of this when it's available, but for now added a placeholder method extractValues.\n\nRelates to #55363.", "createdAt": "2020-04-23T03:28:15Z", "url": "https://github.com/elastic/elasticsearch/pull/55639", "merged": true, "mergeCommit": {"oid": "1dcfdcc997f315c24a8ad3d6a22a2d89bc02a80f"}, "closed": true, "closedAt": "2020-04-24T16:27:16Z", "author": {"login": "jtibshirani"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaUY71gBqjMyNjMyMzM5MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcayCXYgFqTM5OTk3NzEyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10d498ddde3208f11cc4e06f3cd0a178a06c3cec", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/10d498ddde3208f11cc4e06f3cd0a178a06c3cec", "committedDate": "2020-04-23T03:08:42Z", "message": "Resolve field names only one time for all hits."}, "afterCommit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/358ade3ebab12dd8899d6d156a780a2801ddd43c", "committedDate": "2020-04-23T03:29:43Z", "message": "Resolve field names only one time for all hits."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzM4NTM3", "url": "https://github.com/elastic/elasticsearch/pull/55639#pullrequestreview-398738537", "createdAt": "2020-04-23T03:44:36Z", "commit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzo0NDozNlrOGKVN8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzo0NDozNlrOGKVN8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4NjU3Nw==", "bodyText": "We'll no longer use a flat list of fields once we introduce support for formatting the values.", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413486577", "createdAt": "2020-04-23T03:44:36Z", "author": {"login": "jtibshirani"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/330_fetch_fields.yml", "diffHunk": "@@ -0,0 +1,42 @@\n+setup:\n+  - do:\n+      indices.create:\n+          index:  test\n+          body:\n+            mappings:\n+              properties:\n+                keyword:\n+                  type: keyword\n+                integer_range:\n+                  type: integer_range\n+\n+  - do:\n+      index:\n+          index:  test\n+          id:     1\n+          body:\n+            keyword: [ \"first\", \"second\" ]\n+            integer_range:\n+              gte: 0\n+              lte: 42\n+\n+  - do:\n+      indices.refresh:\n+          index: [ test ]\n+\n+---\n+\"Test basic field retrieval\":\n+  - do:\n+      search:\n+        index: test\n+        body:\n+          fields: [keyword, integer_range]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzQxNzAz", "url": "https://github.com/elastic/elasticsearch/pull/55639#pullrequestreview-398741703", "createdAt": "2020-04-23T03:55:50Z", "commit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzo1NTo1MFrOGKVbHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzo1NTo1MFrOGKVbHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4OTk0OA==", "bodyText": "I tried hard to write proper unit tests (in the style of FetchSourcePhaseTests), but it's currently challenging to stub out the required pieces like source lookup. I think some broader refactors are necessary before it's possible to unit test these classes.", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413489948", "createdAt": "2020-04-23T03:55:50Z", "author": {"login": "jtibshirani"}, "path": "server/src/test/java/org/elasticsearch/search/fetch/subphase/FetchFieldsPhaseTests.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch.subphase;\n+\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.SearchRequestBuilder;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.document.DocumentField;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.test.ESSingleNodeTestCase;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItems;\n+\n+public class FetchFieldsPhaseTests extends ESSingleNodeTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88d42d8aaf2643d75f8fc716d0a13251690253df", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/88d42d8aaf2643d75f8fc716d0a13251690253df", "committedDate": "2020-04-23T04:04:10Z", "message": "Add a simple 'fetch fields' phase.\n\nCurrently the phase just looks up each field name in the _source and returns its\nvalues in the 'fields' section of the response. There are several aspects that\nneed improvement -- this PR just lays out the initial class structure and tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9583e1a94326787f35ea24f573bf0ef4c31d2304", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/9583e1a94326787f35ea24f573bf0ef4c31d2304", "committedDate": "2020-04-23T04:24:33Z", "message": "Test that DocumentField can handle maps and lists."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c86a781ceed507c4dbca4b6f18efde5b90f085", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/e6c86a781ceed507c4dbca4b6f18efde5b90f085", "committedDate": "2020-04-23T04:24:35Z", "message": "Ensure we don't return values for object fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/facc1ccf9c9d4dee761d54427d04ca41ad669193", "committedDate": "2020-04-23T04:26:25Z", "message": "Resolve field names only one time for all hits."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/358ade3ebab12dd8899d6d156a780a2801ddd43c", "committedDate": "2020-04-23T03:29:43Z", "message": "Resolve field names only one time for all hits."}, "afterCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/facc1ccf9c9d4dee761d54427d04ca41ad669193", "committedDate": "2020-04-23T04:26:25Z", "message": "Resolve field names only one time for all hits."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjgwODg4", "url": "https://github.com/elastic/elasticsearch/pull/55639#pullrequestreview-399280888", "createdAt": "2020-04-23T16:38:48Z", "commit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozODo0OVrOGKxnxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo1Nzo1NVrOGKycbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MTk0Mg==", "bodyText": "You just have this temporarily because it is simpler to parse?", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413951942", "createdAt": "2020-04-23T16:38:49Z", "author": {"login": "nik9000"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search/330_fetch_fields.yml", "diffHunk": "@@ -0,0 +1,42 @@\n+setup:\n+  - do:\n+      indices.create:\n+          index:  test\n+          body:\n+            mappings:\n+              properties:\n+                keyword:\n+                  type: keyword\n+                integer_range:\n+                  type: integer_range\n+\n+  - do:\n+      index:\n+          index:  test\n+          id:     1\n+          body:\n+            keyword: [ \"first\", \"second\" ]\n+            integer_range:\n+              gte: 0\n+              lte: 42\n+\n+  - do:\n+      indices.refresh:\n+          index: [ test ]\n+\n+---\n+\"Test basic field retrieval\":\n+  - do:\n+      search:\n+        index: test\n+        body:\n+          fields: [keyword, integer_range]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4NjU3Nw=="}, "originalCommit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MjYyNQ==", "bodyText": "Ah! Except it won't be for stuff like geo_points, right?", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413952625", "createdAt": "2020-04-23T16:39:52Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/document/DocumentField.java", "diffHunk": "@@ -113,10 +113,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startArray(name);\n         for (Object value : values) {\n-            // this call doesn't really need to support writing any kind of object.\n-            // Stored fields values are converted using MappedFieldType#valueForDisplay.\n-            // As a result they can either be Strings, Numbers, or Booleans, that's\n-            // all.\n+            // This call doesn't really need to support writing any kind of object, since the values\n+            // here are always serializable to xContent. Each value could be a leaf types like a string,\n+            // number, or boolean, a list of such values, or a map of such values with string keys.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MzEyNg==", "bodyText": "I do wonder if it'd be nicer to have the \"type\" of the field available so we don't need all the nasty reflection in value.", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413953126", "createdAt": "2020-04-23T16:40:34Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/document/DocumentField.java", "diffHunk": "@@ -113,10 +113,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startArray(name);\n         for (Object value : values) {\n-            // this call doesn't really need to support writing any kind of object.\n-            // Stored fields values are converted using MappedFieldType#valueForDisplay.\n-            // As a result they can either be Strings, Numbers, or Booleans, that's\n-            // all.\n+            // This call doesn't really need to support writing any kind of object, since the values\n+            // here are always serializable to xContent. Each value could be a leaf types like a string,\n+            // number, or boolean, a list of such values, or a map of such values with string keys.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MjYyNQ=="}, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MzIzMQ==", "bodyText": "But that is a problem for another time, I think.", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413953231", "createdAt": "2020-04-23T16:40:42Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/document/DocumentField.java", "diffHunk": "@@ -113,10 +113,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startArray(name);\n         for (Object value : values) {\n-            // this call doesn't really need to support writing any kind of object.\n-            // Stored fields values are converted using MappedFieldType#valueForDisplay.\n-            // As a result they can either be Strings, Numbers, or Booleans, that's\n-            // all.\n+            // This call doesn't really need to support writing any kind of object, since the values\n+            // here are always serializable to xContent. Each value could be a leaf types like a string,\n+            // number, or boolean, a list of such values, or a map of such values with string keys.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MjYyNQ=="}, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MzUwNw==", "bodyText": "readOptionalStringList?", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413953507", "createdAt": "2020-04-23T16:41:01Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java", "diffHunk": "@@ -244,6 +247,12 @@ public SearchSourceBuilder(StreamInput in) throws IOException {\n         sliceBuilder = in.readOptionalWriteable(SliceBuilder::new);\n         collapse = in.readOptionalWriteable(CollapseBuilder::new);\n         trackTotalHitsUpTo = in.readOptionalInt();\n+\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            if (in.readBoolean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MzY1MQ==", "bodyText": "writeOptionalStringCollection?", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413953651", "createdAt": "2020-04-23T16:41:12Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java", "diffHunk": "@@ -298,6 +307,13 @@ public void writeTo(StreamOutput out) throws IOException {\n         out.writeOptionalWriteable(sliceBuilder);\n         out.writeOptionalWriteable(collapse);\n         out.writeOptionalInt(trackTotalHitsUpTo);\n+\n+        if (out.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            out.writeBoolean(fetchFields != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NzM2MQ==", "bodyText": "I wonder when it'll be time to convert this to ObjectParser.....", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413957361", "createdAt": "2020-04-23T16:46:31Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java", "diffHunk": "@@ -1120,6 +1154,11 @@ public void parseXContent(XContentParser parser, boolean checkTrailingTokens) th\n                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n                         docValueFields.add(FieldAndFormat.fromXContent(parser));\n                     }\n+                } else if (FETCH_FIELDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1ODc4OA==", "bodyText": "Do you see this ever being more than List<FieldConfig> or something like that?", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413958788", "createdAt": "2020-04-23T16:48:35Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchFieldsContext.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.search.fetch.subphase;\n+\n+import java.util.List;\n+\n+/**\n+ * The context needed to retrieve fields.\n+ */\n+public class FetchFieldsContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1OTA1Ng==", "bodyText": "I'm wondering if it makes sense to have this class at all if it'll never end up holding more than a single list.", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413959056", "createdAt": "2020-04-23T16:48:59Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchFieldsContext.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.search.fetch.subphase;\n+\n+import java.util.List;\n+\n+/**\n+ * The context needed to retrieve fields.\n+ */\n+public class FetchFieldsContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1ODc4OA=="}, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1OTk0NQ==", "bodyText": "I could see wanting to switch this to something a little less instanceof soon. But this'll get the job done for now!", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413959945", "createdAt": "2020-04-23T16:50:20Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchFieldsPhase.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch.subphase;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.ReaderUtil;\n+import org.elasticsearch.common.document.DocumentField;\n+import org.elasticsearch.index.mapper.DocumentMapper;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.fetch.FetchSubPhase;\n+import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.lookup.SourceLookup;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * A fetch sub-phase for high-level field retrieval. Given a list of fields, it\n+ * retrieves the field values from _source and returns them as document fields.\n+ */\n+public final class FetchFieldsPhase implements FetchSubPhase {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void hitsExecute(SearchContext context, SearchHit[] hits) {\n+        FetchFieldsContext fetchFieldsContext = context.fetchFieldsContext();\n+        if (fetchFieldsContext == null || fetchFieldsContext.fields().isEmpty()) {\n+            return;\n+        }\n+\n+        DocumentMapper documentMapper = context.mapperService().documentMapper();\n+        if (documentMapper.sourceMapper().enabled() == false) {\n+            throw new IllegalArgumentException(\"Unable to retrieve the requested [fields] since _source is \" +\n+                \"disabled in the mappings for index [\" + context.indexShard().shardId().getIndexName() + \"]\");\n+        }\n+\n+        Set<String> fields = new HashSet<>();\n+        for (String fieldPattern : context.fetchFieldsContext().fields()) {\n+            if (documentMapper.objectMappers().containsKey(fieldPattern)) {\n+                continue;\n+            }\n+            Collection<String> concreteFields = context.mapperService().simpleMatchToFullName(fieldPattern);\n+            fields.addAll(concreteFields);\n+        }\n+\n+        SourceLookup sourceLookup = context.lookup().source();\n+\n+        for (SearchHit hit : hits) {\n+            int readerIndex = ReaderUtil.subIndex(hit.docId(), context.searcher().getIndexReader().leaves());\n+            LeafReaderContext readerContext = context.searcher().getIndexReader().leaves().get(readerIndex);\n+            sourceLookup.setSegmentAndDocument(readerContext, hit.docId());\n+\n+            Map<String, Object> valuesByField = sourceLookup.extractValues(fields);\n+\n+            for (Map.Entry<String, Object> entry : valuesByField.entrySet()) {\n+                String field = entry.getKey();\n+                Object value = entry.getValue();\n+                List<Object> values = value instanceof List\n+                    ? (List<Object>) value\n+                    : List.of(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MDMyMA==", "bodyText": "I think we should have javadoc for this.", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413960320", "createdAt": "2020-04-23T16:50:53Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/internal/SearchContext.java", "diffHunk": "@@ -201,6 +202,10 @@ public InnerHitsContext innerHits() {\n \n     public abstract SearchContext docValuesContext(FetchDocValuesContext docValuesContext);\n \n+    public abstract FetchFieldsContext fetchFieldsContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MjYzMw==", "bodyText": "I wonder if this'd be better kept in the new fetch phase, especially if we're going to migrate away from it.\nI wonder if a better interface for collecting the values is Map<String, Consumer<?>> or something shaped like that. I feel like it'd let you build flexible casting and formatting pretty naturally. But that can wait too.", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413962633", "createdAt": "2020-04-23T16:54:05Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/lookup/SourceLookup.java", "diffHunk": "@@ -128,6 +129,22 @@ public BytesReference internalSourceRef() {\n         return XContentMapValues.extractRawValues(path, loadSourceIfNeeded());\n     }\n \n+    /**\n+     * For each of the provided paths, return its value in the source. Note that\n+     */\n+    public Map<String, Object> extractValues(Collection<String> paths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MzI2NQ==", "bodyText": "\ud83d\udc4d\nThis on looks like it took a while to find!", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413963265", "createdAt": "2020-04-23T16:54:58Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/SearchHitTests.java", "diffHunk": "@@ -188,7 +188,7 @@ public void testFromXContentLenientParsing() throws IOException {\n         XContentType xContentType = randomFrom(XContentType.values());\n         SearchHit searchHit = createTestItem(xContentType, true, true);\n         BytesReference originalBytes = toXContent(searchHit, xContentType, true);\n-        Predicate<String> pathsToExclude = path -> (path.endsWith(\"highlight\") || path.endsWith(\"fields\") || path.contains(\"_source\")\n+        Predicate<String> pathsToExclude = path -> (path.endsWith(\"highlight\") || path.contains(\"fields\") || path.contains(\"_source\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2NTQyMw==", "bodyText": "What if you made something like:\npublic void hitsExecute(Function<SearchHit, Map<String, Object>> sourceLookup, SearchHit[] hits)\n\nand unit tested that? Then and the only thing missing a unit test would be the map from search context to \"simple\" classes?", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r413965423", "createdAt": "2020-04-23T16:57:55Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/fetch/subphase/FetchFieldsPhaseTests.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.fetch.subphase;\n+\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.SearchRequestBuilder;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.document.DocumentField;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.test.ESSingleNodeTestCase;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItems;\n+\n+public class FetchFieldsPhaseTests extends ESSingleNodeTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4OTk0OA=="}, "originalCommit": {"oid": "358ade3ebab12dd8899d6d156a780a2801ddd43c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63653944d324d395a1a6f99534b99a05588094e8", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/63653944d324d395a1a6f99534b99a05588094e8", "committedDate": "2020-04-23T18:08:31Z", "message": "Use correct stream serialization methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1f179ae0270329b74eab52c9b475ee27fd7d155", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1f179ae0270329b74eab52c9b475ee27fd7d155", "committedDate": "2020-04-23T20:57:25Z", "message": "Pull extractValues up into FetchFieldsPhase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb9c6e07e00f1c971a97d33409a9b22f970be751", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/cb9c6e07e00f1c971a97d33409a9b22f970be751", "committedDate": "2020-04-23T20:57:27Z", "message": "Add javadoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f71d7b750515cdfd8aa3aa22bc6daa672ebbdd3", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/8f71d7b750515cdfd8aa3aa22bc6daa672ebbdd3", "committedDate": "2020-04-23T21:16:53Z", "message": "Bring FetchFieldsPhaseTests closer to a real unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64415e452fd6183d343b146c9950934ff690ce0", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/f64415e452fd6183d343b146c9950934ff690ce0", "committedDate": "2020-04-23T21:39:21Z", "message": "Fix javadoc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTc3MTIy", "url": "https://github.com/elastic/elasticsearch/pull/55639#pullrequestreview-399977122", "createdAt": "2020-04-24T14:05:29Z", "commit": {"oid": "f64415e452fd6183d343b146c9950934ff690ce0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDowNToyOVrOGLZVVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDowNToyOVrOGLZVVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMjU4Mg==", "bodyText": "Fair enough!", "url": "https://github.com/elastic/elasticsearch/pull/55639#discussion_r414602582", "createdAt": "2020-04-24T14:05:29Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchFieldsContext.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.search.fetch.subphase;\n+\n+import java.util.List;\n+\n+/**\n+ * The context needed to retrieve fields.\n+ */\n+public class FetchFieldsContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1ODc4OA=="}, "originalCommit": {"oid": "facc1ccf9c9d4dee761d54427d04ca41ad669193"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 516, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}