{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MTM2ODAx", "number": 60201, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MjoyNlrOETQnug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTo0N1rOETWNWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjMwNzE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MjoyNlrOG45Biw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyMzo0N1rOG468hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzcyMw==", "bodyText": "This now doesn't always return a multiple of pageSize; is that deliberate? Maybe it's ok, but if it is ok then why do we put effort into rounding newSize up to the next multiple of pageSize in the else branch?", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462307723", "createdAt": "2020-07-29T13:42:26Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNDIxMA==", "bodyText": "This now doesn't always return a multiple of pageSize; is that deliberate?\n\nThis was the case before as well. For small allocations (those for which Arrays.oversize does return less than a page) we return the result of oversize.\n\nMaybe it's ok, but if it is ok then why do we put effort into rounding newSize up to the next multiple of pageSize in the else branch?\n\nI think the reasoning is that we only want to use a full page for allocations above a certain size. But once we get to large allocations we only want to use full pages.\nFor small pages I mostly retained the behavior here. Except for the case of say 15k with 16k pages, where previously oversize would spit out something like 17k and we'd then go for 2 pages, whereas now we go for a single page.\nBut as long as oversize stays below a full page in size the behavior should not change with this PR.", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462334210", "createdAt": "2020-07-29T14:17:24Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzcyMw=="}, "originalCommit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzOTIwNQ==", "bodyText": "Ah ok I misinterpreted min as max. I see now, thanks.", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462339205", "createdAt": "2020-07-29T14:23:47Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzcyMw=="}, "originalCommit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjMxMjAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MzozNVrOG45Epw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MzozNVrOG45Epw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwODUxOQ==", "bodyText": "Optional suggestion, I prefer this implementation of ceil(n/d).\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);\n          \n          \n            \n                        final long pages = (minTargetSize + pageSize - 1) / pageSize; // ceil(minTargetSize/pageSize)\n          \n          \n            \n                        newSize = pages * pageSize;", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462308519", "createdAt": "2020-07-29T13:43:35Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {\n-            // round to a multiple of pageSize\n-            newSize = newSize - (newSize % pageSize) + pageSize;\n-            assert newSize % pageSize == 0;\n+            newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjUzNDcyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyOTo1MlrOG47PcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozMTo1OFrOG47V9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDA0OQ==", "bodyText": "Stronger assertions that would have avoided my confusion here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(size - minSize, lessThan((long) pageSize));\n          \n          \n            \n                    assertThat(size, greaterThanOrEqualTo((long)minSize));\n          \n          \n            \n                    if (size >= pageSize) {\n          \n          \n            \n                        assertThat(size + \" is a multiple of \" + pageSize, size % pageSize, equalTo(0L));\n          \n          \n            \n                    }\n          \n          \n            \n                    assertThat(size - minSize, lessThan((long) pageSize));", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462344049", "createdAt": "2020-07-29T14:29:52Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java", "diffHunk": "@@ -389,6 +390,13 @@ public void testEstimatedBytesSameAsActualBytes() throws Exception {\n         }\n     }\n \n+    public void testOverSizeUsesMinPageCount() {\n+        final int pageSize = 1 << (randomIntBetween(2, 16));\n+        final int minSize = randomIntBetween(1, pageSize) * randomIntBetween(1, 100);\n+        final long size = BigArrays.overSize(minSize, pageSize, 1);\n+        assertThat(size - minSize, lessThan((long) pageSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9142bc39057caf3e5267a2c88a2c58667123fcf1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NTcxNg==", "bodyText": "++ makes sense", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462345716", "createdAt": "2020-07-29T14:31:58Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java", "diffHunk": "@@ -389,6 +390,13 @@ public void testEstimatedBytesSameAsActualBytes() throws Exception {\n         }\n     }\n \n+    public void testOverSizeUsesMinPageCount() {\n+        final int pageSize = 1 << (randomIntBetween(2, 16));\n+        final int minSize = randomIntBetween(1, pageSize) * randomIntBetween(1, 100);\n+        final long size = BigArrays.overSize(minSize, pageSize, 1);\n+        assertThat(size - minSize, lessThan((long) pageSize));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDA0OQ=="}, "originalCommit": {"oid": "9142bc39057caf3e5267a2c88a2c58667123fcf1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzIyMjY1OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTo0N1rOG5CAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTo1NVrOG5CA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDkxMw==", "bodyText": "I wonder if resizeInPlace took a number of pages instead of a size and we only used oversize for when the size is less than a page. We may not need this method at all in that case. I just feel like we're doing something like (pages + 1) * pageSize / pageSize and it feels clumsy.", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462454913", "createdAt": "2020-07-29T17:09:47Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,10 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NTAwNA==", "bodyText": "It'd be a bigger change though.", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462455004", "createdAt": "2020-07-29T17:09:55Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,10 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDkxMw=="}, "originalCommit": {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2061, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}