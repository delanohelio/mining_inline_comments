{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMTY1OTYz", "number": 60517, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MzoyMVrOEUEQKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDozMFrOEUhczw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc2NjQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MzoyMVrOG6JZow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MzoyMVrOG6JZow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDYxMQ==", "bodyText": "This is only used in the BwC path and kind of weird, left it logically unchanged because the BwC path goes away in master once 7.9 is out anyway and I didn't want to add any risk since we don't have full test coverage on aborts on mixed version clusters.", "url": "https://github.com/elastic/elasticsearch/pull/60517#discussion_r463624611", "createdAt": "2020-07-31T13:53:21Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -146,42 +159,67 @@ private static boolean assertShardsConsistent(State state, List<IndexId> indices\n             shards.keysIt().forEachRemaining(s -> indexNamesInShards.add(s.getIndexName()));\n             assert indexNames.equals(indexNamesInShards)\n                 : \"Indices in shards \" + indexNamesInShards + \" differ from expected indices \" + indexNames + \" for state [\" + state + \"]\";\n+            assert (state.completed() && completed(shards.values())) || state.completed() == false\n+                : \"Completed state must imply all shards completed but saw state [\" + state + \"] and shards \" + shards;\n             return true;\n         }\n \n-        public Entry(Snapshot snapshot, boolean includeGlobalState, boolean partial, State state, List<IndexId> indices,\n-                     long startTime, long repositoryStateId, ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards,\n-                     Map<String, Object> userMetadata, Version version) {\n-            this(snapshot, includeGlobalState, partial, state, indices, Collections.emptyList(), startTime, repositoryStateId, shards,\n-                null, userMetadata, version);\n-        }\n-\n-        public Entry(Entry entry, State state, ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards) {\n-            this(entry.snapshot, entry.includeGlobalState, entry.partial, state, entry.indices, entry.dataStreams, entry.startTime,\n-                entry.repositoryStateId, shards, entry.failure, entry.userMetadata, entry.version);\n-        }\n-\n-        public Entry(Entry entry, State state, ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards, String failure) {\n-            this(entry.snapshot, entry.includeGlobalState, entry.partial, state, entry.indices, entry.dataStreams, entry.startTime,\n-                 entry.repositoryStateId, shards, failure, entry.userMetadata, entry.version);\n-        }\n-\n-        public Entry(Entry entry, ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards) {\n-            this(entry, entry.state, shards, entry.failure);\n-        }\n-\n         public Entry withRepoGen(long newRepoGen) {\n             assert newRepoGen > repositoryStateId : \"Updated repository generation [\" + newRepoGen\n                     + \"] must be higher than current generation [\" + repositoryStateId + \"]\";\n             return new Entry(snapshot, includeGlobalState, partial, state, indices, dataStreams, startTime, newRepoGen, shards, failure,\n                     userMetadata, version);\n         }\n \n-        public Entry withShards(ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards) {\n+        public Entry abort() {\n+            final ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shardsBuilder = ImmutableOpenMap.builder();\n+            boolean completed = true;\n+            for (ObjectObjectCursor<ShardId, ShardSnapshotStatus> shardEntry : shards) {\n+                ShardSnapshotStatus status = shardEntry.value;\n+                if (status.state().completed() == false) {\n+                    final String nodeId = status.nodeId();\n+                    status = new ShardSnapshotStatus(nodeId, nodeId == null ? ShardState.FAILED : ShardState.ABORTED,\n+                            \"aborted by snapshot deletion\", status.generation());\n+                }\n+                completed &= status.state().completed();\n+                shardsBuilder.put(shardEntry.key, status);\n+            }\n+            return fail(shardsBuilder.build(), completed ? State.SUCCESS : State.ABORTED, \"Snapshot was aborted by deletion\");\n+        }\n+\n+        public Entry fail(ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards, State state, String failure) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1495c92ca3529e164d4ed79798922279069fe62"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTU1MDIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDozMFrOG6xcvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDozMFrOG6xcvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4MDc2Ng==", "bodyText": "perhaps mention that the state can also be success here already?", "url": "https://github.com/elastic/elasticsearch/pull/60517#discussion_r464280766", "createdAt": "2020-08-03T08:54:30Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -83,6 +83,18 @@ public String toString() {\n         return builder.append(\"]\").toString();\n     }\n \n+    /**\n+     * Creates the initial {@link Entry} when starting a snapshot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb6249ad740fbaeffa133516d9aec7e614b738"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2677, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}