{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTg2NDY1", "number": 65706, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo0Mzo0NlrOE_zTZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo0Mzo0NlrOE_zTZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzM2Mjk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/slice/SliceBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo0Mzo0NlrOH9tYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoxNjoyNVrOIAaq4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2ODYxNA==", "bodyText": "I guess a case when shardIdex() = -1 (when a coordinating node is v < 8.0)  and there is a preference or indexRouting present in scroll slice is a very rare case, and we can disregard it.", "url": "https://github.com/elastic/elasticsearch/pull/65706#discussion_r534468614", "createdAt": "2020-12-02T20:43:46Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/main/java/org/elasticsearch/search/slice/SliceBuilder.java", "diffHunk": "@@ -205,40 +197,14 @@ public int hashCode() {\n      * @param context Additional information needed to build the query\n      */\n     @SuppressWarnings(\"rawtypes\")\n-    public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context) {\n+    public Query toFilter(ShardSearchRequest request, QueryShardContext context) {\n         final MappedFieldType type = context.getFieldType(field);\n         if (type == null) {\n             throw new IllegalArgumentException(\"field \" + field + \" not found\");\n         }\n \n-        int shardId = request.shardId().id();\n-        int numShards = context.getIndexSettings().getNumberOfShards();\n-        if (request.preference() != null || request.indexRoutings().length > 0) {\n-            GroupShardsIterator<ShardIterator> group = buildShardIterator(clusterService, request);\n-            assert group.size() <= numShards : \"index routing shards: \" + group.size() +\n-                \" cannot be greater than total number of shards: \" + numShards;\n-            if (group.size() < numShards) {\n-                /*\n-                 * The routing of this request targets a subset of the shards of this index so we need to we retrieve\n-                 * the original {@link GroupShardsIterator} and compute the request shard id and number of\n-                 * shards from it.\n-                 */\n-                numShards = group.size();\n-                int ord = 0;\n-                shardId = -1;\n-                // remap the original shard id with its index (position) in the sorted shard iterator.\n-                for (ShardIterator it : group) {\n-                    assert it.shardId().getIndex().equals(request.shardId().getIndex());\n-                    if (request.shardId().equals(it.shardId())) {\n-                        shardId = ord;\n-                        break;\n-                    }\n-                    ++ord;\n-                }\n-                assert shardId != -1 : \"shard id: \" + request.shardId().getId() + \" not found in index shard routing\";\n-            }\n-        }\n-\n+        int shardIndex = request.shardIndex() != -1 ? request.shardIndex() : request.shardId().id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ae5402bf3bbbaf00492f248a846619d38a3c68"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwNzg3NQ==", "bodyText": "Yes, that's my reasoning too.", "url": "https://github.com/elastic/elasticsearch/pull/65706#discussion_r537307875", "createdAt": "2020-12-07T08:16:25Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/slice/SliceBuilder.java", "diffHunk": "@@ -205,40 +197,14 @@ public int hashCode() {\n      * @param context Additional information needed to build the query\n      */\n     @SuppressWarnings(\"rawtypes\")\n-    public Query toFilter(ClusterService clusterService, ShardSearchRequest request, QueryShardContext context) {\n+    public Query toFilter(ShardSearchRequest request, QueryShardContext context) {\n         final MappedFieldType type = context.getFieldType(field);\n         if (type == null) {\n             throw new IllegalArgumentException(\"field \" + field + \" not found\");\n         }\n \n-        int shardId = request.shardId().id();\n-        int numShards = context.getIndexSettings().getNumberOfShards();\n-        if (request.preference() != null || request.indexRoutings().length > 0) {\n-            GroupShardsIterator<ShardIterator> group = buildShardIterator(clusterService, request);\n-            assert group.size() <= numShards : \"index routing shards: \" + group.size() +\n-                \" cannot be greater than total number of shards: \" + numShards;\n-            if (group.size() < numShards) {\n-                /*\n-                 * The routing of this request targets a subset of the shards of this index so we need to we retrieve\n-                 * the original {@link GroupShardsIterator} and compute the request shard id and number of\n-                 * shards from it.\n-                 */\n-                numShards = group.size();\n-                int ord = 0;\n-                shardId = -1;\n-                // remap the original shard id with its index (position) in the sorted shard iterator.\n-                for (ShardIterator it : group) {\n-                    assert it.shardId().getIndex().equals(request.shardId().getIndex());\n-                    if (request.shardId().equals(it.shardId())) {\n-                        shardId = ord;\n-                        break;\n-                    }\n-                    ++ord;\n-                }\n-                assert shardId != -1 : \"shard id: \" + request.shardId().getId() + \" not found in index shard routing\";\n-            }\n-        }\n-\n+        int shardIndex = request.shardIndex() != -1 ? request.shardIndex() : request.shardId().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2ODYxNA=="}, "originalCommit": {"oid": "02ae5402bf3bbbaf00492f248a846619d38a3c68"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1884, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}