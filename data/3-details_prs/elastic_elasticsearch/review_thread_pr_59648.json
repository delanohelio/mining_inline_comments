{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjQ3ODY3", "number": 59648, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoxNzoxNlrOETxaEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyODo0MlrOEVmWPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTY3ODg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoxNzoxN1rOG5sdPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzo0MDo0OFrOG8T-Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1MDM5OQ==", "bodyText": "This preserves the existing behavior (i.e. it tracks composite usage like it was tracked before setting up the registry). It might be worth more detailed tracking, since we can capture what key types and values sources are being used.   But this PR is big enough already, and we don't have a clear plan for composite usage tracking, so I'm leaving it be for now.  Can open a ticket if folks think it's worth tinkering with, or we can just leave it alone.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r463150399", "createdAt": "2020-07-30T17:17:17Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregationBuilder.java", "diffHunk": "@@ -61,6 +62,14 @@\n         PARSER.declareObject(CompositeAggregationBuilder::aggregateAfter, (p, context) -> p.map(), AFTER_FIELD_NAME);\n     }\n \n+    public static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n+        DateHistogramValuesSourceBuilder.register(builder);\n+        HistogramValuesSourceBuilder.register(builder);\n+        GeoTileGridValuesSourceBuilder.register(builder);\n+        TermsValuesSourceBuilder.register(builder);\n+        builder.registerUsage(NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef398db887558b6336c340093d09142b686eb25a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5NTAwNw==", "bodyText": "\ud83d\udc4d to preserving the original behavior for now.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r465895007", "createdAt": "2020-08-05T17:40:48Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregationBuilder.java", "diffHunk": "@@ -61,6 +62,14 @@\n         PARSER.declareObject(CompositeAggregationBuilder::aggregateAfter, (p, context) -> p.map(), AFTER_FIELD_NAME);\n     }\n \n+    public static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n+        DateHistogramValuesSourceBuilder.register(builder);\n+        HistogramValuesSourceBuilder.register(builder);\n+        GeoTileGridValuesSourceBuilder.register(builder);\n+        TermsValuesSourceBuilder.register(builder);\n+        builder.registerUsage(NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1MDM5OQ=="}, "originalCommit": {"oid": "ef398db887558b6336c340093d09142b686eb25a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTcxMjQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzoyNjozMlrOG5syNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODo1ODo1OVrOG8Wmbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1NTc2Ng==", "bodyText": "It's definitely a little weird that CompositeValuesSourceConfig is both the object that holds this function, and a parameter to this function.  I'm pretty confidant that there's a less tangled way to do this.  My plan is to land this initial change to get stuff into the registry at all, and try to neaten up this edge in a follow up PR.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r463155766", "createdAt": "2020-07-30T17:26:32Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceConfig.java", "diffHunk": "@@ -19,13 +19,29 @@\n \n package org.elasticsearch.search.aggregations.bucket.composite;\n \n+import org.apache.lucene.index.IndexReader;\n import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.util.BigArrays;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.search.DocValueFormat;\n import org.elasticsearch.search.aggregations.support.ValuesSource;\n import org.elasticsearch.search.sort.SortOrder;\n \n-class CompositeValuesSourceConfig {\n+import java.util.function.LongConsumer;\n+\n+public class CompositeValuesSourceConfig {\n+\n+    @FunctionalInterface\n+    public interface SingleDimensionValuesSourceProvider {\n+        SingleDimensionValuesSource<?> createValuesSource(\n+            BigArrays bigArrays,\n+            IndexReader reader,\n+            int size,\n+            LongConsumer addRequestCircuitBreakerBytes,\n+            CompositeValuesSourceConfig config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef398db887558b6336c340093d09142b686eb25a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzODAzMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r465938030", "createdAt": "2020-08-05T18:58:59Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceConfig.java", "diffHunk": "@@ -19,13 +19,29 @@\n \n package org.elasticsearch.search.aggregations.bucket.composite;\n \n+import org.apache.lucene.index.IndexReader;\n import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.util.BigArrays;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.search.DocValueFormat;\n import org.elasticsearch.search.aggregations.support.ValuesSource;\n import org.elasticsearch.search.sort.SortOrder;\n \n-class CompositeValuesSourceConfig {\n+import java.util.function.LongConsumer;\n+\n+public class CompositeValuesSourceConfig {\n+\n+    @FunctionalInterface\n+    public interface SingleDimensionValuesSourceProvider {\n+        SingleDimensionValuesSource<?> createValuesSource(\n+            BigArrays bigArrays,\n+            IndexReader reader,\n+            int size,\n+            LongConsumer addRequestCircuitBreakerBytes,\n+            CompositeValuesSourceConfig config", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1NTc2Ng=="}, "originalCommit": {"oid": "ef398db887558b6336c340093d09142b686eb25a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTc3MTExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/DateHistogramValuesSourceBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0NDowOFrOG5tXnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0NDowOFrOG5tXnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NTM0MQ==", "bodyText": "We should be able to do this now,  but I didn't.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r463165341", "createdAt": "2020-07-30T17:44:08Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/DateHistogramValuesSourceBuilder.java", "diffHunk": "@@ -246,25 +253,61 @@ public DateHistogramValuesSourceBuilder offset(long offset) {\n         return this;\n     }\n \n+    public static void register(ValuesSourceRegistry.Builder builder) {\n+        builder.registerComposite(\n+            TYPE,\n+            List.of(CoreValuesSourceType.DATE, CoreValuesSourceType.NUMERIC),\n+            ((valuesSourceConfig, compositeBucketStrategy, name, hasScript, format, missingBucket, order) -> {\n+                ValuesSource.Numeric numeric = (ValuesSource.Numeric) valuesSourceConfig.getValuesSource();\n+                // TODO once composite is plugged in to the values source registry or at least understands Date values source types use it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef398db887558b6336c340093d09142b686eb25a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTg5OTI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeBucketStrategy.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoyNzo1NFrOG7HopA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToxMToxMFrOG8W_zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NDI2MA==", "bodyText": "It seems to me that this should be an interface that returns a T extends ValuesSource given a ValuesSource.\nexamples\n    interface StrategyApplier<T extends ValuesSource, R extends ValuesSource> {\n\n        R build(T valueSource);\n\n    }\n\n    //Terms one\n    public static class None implements StrategyApplier<ValuesSource, ValuesSource> {\n        @Override\n        public ValuesSource build(ValuesSource valuesSource) {\n            return valuesSource;\n        }\n    }\n\n    //Geotile one\n    public static class Geo implements StrategyApplier<ValuesSource.GeoPoint, CellIdSource> {\n\n        private final int precision;\n        private final GeoBoundingBox boundingBox;\n        \n        public Geo(int precision, GeoBoundingBox boundingBox) {\n            this.precision = precision;\n            this.boundingBox = boundingBox;\n        }\n\n        @Override\n        public CellIdSource build(ValuesSource.GeoPoint valueSource) {\n            return new CellIdSource(\n                valueSource,\n                precision,\n                boundingBox,\n                GeoTileUtils::longEncode\n            );\n        }\n    }\n\n\nThese appliers could constructed in your innerBuild objects. You will have to cast things, but it is doing that anyways in the register methods.\nThis seems cleaner to me than asserting on a strategy enum and having this pseudo union type.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r464644260", "createdAt": "2020-08-03T20:27:54Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeBucketStrategy.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.bucket.composite;\n+\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+\n+/**\n+ * This class acts as a bit of syntactic sugar to let us pass in the rounding info for dates or the interval for numeric histograms as one\n+ * class, to save needing three different interfaces.  Sometimes I miss C-style Union structures.\n+ */\n+public class CompositeBucketStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709ee18027ada4bf0129fac20b03d2414695c811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2ODI0Ng==", "bodyText": "The problem is that we can't say that Geo always takes a ValuesSource.GeoPoint.  The whole goal here is to allow plugging in values sources from plugins without needing to touch the main aggregation code.  If we hard cast from innerBuilder, that breaks.  The hard casts need to happen in the registered CompositeSuppliers.  What I can do, and what we did for the other aggs, is instead of having one CompositeSupplier which takes this union thing, I can have four CompositeSupplier classes, one for each agg type, which take the appropriate rounding information.  I'd avoided doing that because it caused a lot of confusion when I did it last time, but maybe it's better than this?  IDK.\nI'll code it up and we can compare.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r464668246", "createdAt": "2020-08-03T21:20:11Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeBucketStrategy.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.bucket.composite;\n+\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+\n+/**\n+ * This class acts as a bit of syntactic sugar to let us pass in the rounding info for dates or the interval for numeric histograms as one\n+ * class, to save needing three different interfaces.  Sometimes I miss C-style Union structures.\n+ */\n+public class CompositeBucketStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NDI2MA=="}, "originalCommit": {"oid": "709ee18027ada4bf0129fac20b03d2414695c811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5ODY1Nw==", "bodyText": "@not-napoleon\n\nThe problem is that we can't say that Geo always takes a ValuesSource.GeoPoint\n\nOk, maybe I misunderstand, but the geo composite strategy requires a CellIdSource, which requires a ValuesSource.GeoPoint.\nIf you are adding flexibility somewhere, I don't see it.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r464998657", "createdAt": "2020-08-04T12:00:43Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeBucketStrategy.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.bucket.composite;\n+\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+\n+/**\n+ * This class acts as a bit of syntactic sugar to let us pass in the rounding info for dates or the interval for numeric histograms as one\n+ * class, to save needing three different interfaces.  Sometimes I miss C-style Union structures.\n+ */\n+public class CompositeBucketStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NDI2MA=="}, "originalCommit": {"oid": "709ee18027ada4bf0129fac20b03d2414695c811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NTMxNA==", "bodyText": "CellIdSource is just a way of turning a GeoPoint into a Long.  What GeoTileValuesSource requires is a function that yields longs, for which we currently pass in CellIdSource#longValues().  Before this change, that was the only option, and was hard-coded in CompositeAggregator.  Essentially, we assumed that if you asked for a GeoTile composite, you must be using a geo point.\nThe flexibility comes from being able to look up that logic at run time, rather than hard code it at compile time.  So, in the Spatial plugin, we have a class GeoShapeCellSourceId.  This change allows us to add a lookup that says \"if you have a GeoShape, use the GeoShape version of CellSourceId instead\".  That's done via that register method, which maps a values source type to a supplier function.  We can't put that logic directly into innerBuilder without adding a compile time dependency on the module, which we want to avoid.\nAlthough I haven't written an example in here (in the interest of time and smaller change sets), the idea is that plugins which define new ValuesSourceTypes, like Spatial defines GeoShape as a values source type, would register those types along with logic for how to turn those into what the key generation functions want.  In this way of thinking, it's \"safe\" to cast a values source from within a registered supplier function, because we know what type of the mapping key for that function, which indicates the type of values source we're getting.  It's not safe to cast from innerBuilder, because at that point we don't know what types we have, since a plugin could have added types at run time.  Make sense?\nIt's a little tricky to follow for composite because composite uses ValuesSource to mean three different things.  I'm going to do some follow up work to clean up some of that terminology.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r465075314", "createdAt": "2020-08-04T14:05:36Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeBucketStrategy.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.bucket.composite;\n+\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+\n+/**\n+ * This class acts as a bit of syntactic sugar to let us pass in the rounding info for dates or the interval for numeric histograms as one\n+ * class, to save needing three different interfaces.  Sometimes I miss C-style Union structures.\n+ */\n+public class CompositeBucketStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NDI2MA=="}, "originalCommit": {"oid": "709ee18027ada4bf0129fac20b03d2414695c811"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NDUyNA==", "bodyText": "I wonder if it'd make sense to move the have three methods on CompositeSupplier that map to these three ctors. Each supplier could implement the strategy it supports and throw an exception for the ones it doesn't?", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r465944524", "createdAt": "2020-08-05T19:11:10Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeBucketStrategy.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.bucket.composite;\n+\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.geo.GeoBoundingBox;\n+\n+/**\n+ * This class acts as a bit of syntactic sugar to let us pass in the rounding info for dates or the interval for numeric histograms as one\n+ * class, to save needing three different interfaces.  Sometimes I miss C-style Union structures.\n+ */\n+public class CompositeBucketStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NDI2MA=="}, "originalCommit": {"oid": "709ee18027ada4bf0129fac20b03d2414695c811"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTkyODQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/SearchModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzo0MDowM1rOG8T8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzo0MDowM1rOG8T8zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5NDYwNQ==", "bodyText": "While you are here could you remove the extra (?", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r465894605", "createdAt": "2020-08-05T17:40:03Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/SearchModule.java", "diffHunk": "@@ -468,8 +468,12 @@ private ValuesSourceRegistry registerAggregations(List<SearchPlugin> plugins) {\n                     .setAggregatorRegistrar(GeoCentroidAggregationBuilder::registerAggregators), builder);\n         registerAggregation(new AggregationSpec(ScriptedMetricAggregationBuilder.NAME, ScriptedMetricAggregationBuilder::new,\n                 ScriptedMetricAggregationBuilder.PARSER).addResultReader(InternalScriptedMetric::new), builder);\n-        registerAggregation((new AggregationSpec(CompositeAggregationBuilder.NAME, CompositeAggregationBuilder::new,\n-                CompositeAggregationBuilder.PARSER).addResultReader(InternalComposite::new)), builder);\n+        registerAggregation(\n+            (new AggregationSpec(CompositeAggregationBuilder.NAME, CompositeAggregationBuilder::new, CompositeAggregationBuilder.PARSER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709ee18027ada4bf0129fac20b03d2414695c811"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgzNDQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNzowMFrOG8cvXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoyNDoxMFrOG8zVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODYyMA==", "bodyText": "@nik9000 - What do you think is the right thing to throw from here?  This would be a startup-time error to plugin authors indicating that they loaded a miss-matched supplier.  Thinking about it, throwing from registration is pretty scary. If the plugin doesn't catch this, we could utterly break its whole registration process.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r466038620", "createdAt": "2020-08-05T22:27:00Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceRegistry.java", "diffHunk": "@@ -78,6 +85,48 @@ public void register(String aggregationName, List<ValuesSourceType> valuesSource\n             }\n         }\n \n+        /**\n+         * Register a new key generation function for the\n+         * {@link org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregation}.\n+         * @param supplierClass the subclass of {@link CompositeSupplier} associated with the {@link CompositeValuesSourceBuilder} type this\n+         *                      mapping is being registered for\n+         * @param valuesSourceType the {@link ValuesSourceType} this mapping applies to\n+         * @param compositeSupplier A function returning an appropriate\n+         *                          {@link org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSourceConfig}\n+         */\n+        public void registerComposite(\n+            Class<? extends CompositeSupplier> supplierClass,\n+            ValuesSourceType valuesSourceType,\n+            CompositeSupplier compositeSupplier\n+        ) {\n+            // TODO: Assert is almost definitely wrong here, but I don't know what the right thing to throw is.\n+            assert compositeSupplier.getClass() == supplierClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70eba12a41be3ee1ae28485d750ca8d8e53f0bcf"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwODc0Ng==", "bodyText": "public <T extend CompositeSupplier> registerComposite(Class<T> supplierClass, ValuesSourceType vst, T compositeSupplier)\n\nwould make it fail at compile time. Unless the caller does mean things with type erasure. And if they do that then the deserve all the terrible failure they'll get.", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r466408746", "createdAt": "2020-08-06T13:24:10Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceRegistry.java", "diffHunk": "@@ -78,6 +85,48 @@ public void register(String aggregationName, List<ValuesSourceType> valuesSource\n             }\n         }\n \n+        /**\n+         * Register a new key generation function for the\n+         * {@link org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregation}.\n+         * @param supplierClass the subclass of {@link CompositeSupplier} associated with the {@link CompositeValuesSourceBuilder} type this\n+         *                      mapping is being registered for\n+         * @param valuesSourceType the {@link ValuesSourceType} this mapping applies to\n+         * @param compositeSupplier A function returning an appropriate\n+         *                          {@link org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSourceConfig}\n+         */\n+        public void registerComposite(\n+            Class<? extends CompositeSupplier> supplierClass,\n+            ValuesSourceType valuesSourceType,\n+            CompositeSupplier compositeSupplier\n+        ) {\n+            // TODO: Assert is almost definitely wrong here, but I don't know what the right thing to throw is.\n+            assert compositeSupplier.getClass() == supplierClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODYyMA=="}, "originalCommit": {"oid": "70eba12a41be3ee1ae28485d750ca8d8e53f0bcf"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgzODM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyODo0MlrOG8cxwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoyMjowOFrOG8zPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzOTIzMw==", "bodyText": "@nik9000 In this model, we no longer have convenient access to the composite key type name here, so we can't throw a well formed error message.  I kind of feel like this means we should be using the CompositeValuesSourceBuilder class as the key here, since we can at least use reflection to get a name out of that.  I don't love it though.  Thoughts?", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r466039233", "createdAt": "2020-08-05T22:28:42Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceRegistry.java", "diffHunk": "@@ -139,6 +195,21 @@ public AggregatorSupplier getAggregator(ValuesSourceConfig valuesSourceConfig, S\n         throw  new AggregationExecutionException(\"Unregistered Aggregation [\" + aggregationName + \"]\");\n     }\n \n+    public <T extends CompositeSupplier> T getComposite(Class<T> supplierClass, ValuesSourceConfig config) {\n+        if (supplierClass != null && compositeRegistry.containsKey(supplierClass)) {\n+            CompositeSupplier supplier = compositeRegistry.get(supplierClass).get(config.valueSourceType());\n+            if (supplier == null) {\n+                // TODO: Fix this error message! The class name of the supplier isn't going to mean anything to a user\n+                throw new IllegalArgumentException(\n+                    config.getDescription() + \" is not supported for composite source [\" + supplierClass.getCanonicalName() + \"]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70eba12a41be3ee1ae28485d750ca8d8e53f0bcf"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNzM0NQ==", "bodyText": "I see what you mean. I guess you could put the nice name on the supplierClass somehow. That seems like overkill though.\nBy using the builder as the key do you mean that it'd have some Class<? extends CompositeSupplier> supplierClass method on it? Maybe that isn't too bad? Or maybe we could just pass the name of the supplier in here and declare it as \"for error messages\".", "url": "https://github.com/elastic/elasticsearch/pull/59648#discussion_r466407345", "createdAt": "2020-08-06T13:22:08Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceRegistry.java", "diffHunk": "@@ -139,6 +195,21 @@ public AggregatorSupplier getAggregator(ValuesSourceConfig valuesSourceConfig, S\n         throw  new AggregationExecutionException(\"Unregistered Aggregation [\" + aggregationName + \"]\");\n     }\n \n+    public <T extends CompositeSupplier> T getComposite(Class<T> supplierClass, ValuesSourceConfig config) {\n+        if (supplierClass != null && compositeRegistry.containsKey(supplierClass)) {\n+            CompositeSupplier supplier = compositeRegistry.get(supplierClass).get(config.valueSourceType());\n+            if (supplier == null) {\n+                // TODO: Fix this error message! The class name of the supplier isn't going to mean anything to a user\n+                throw new IllegalArgumentException(\n+                    config.getDescription() + \" is not supported for composite source [\" + supplierClass.getCanonicalName() + \"]\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzOTIzMw=="}, "originalCommit": {"oid": "70eba12a41be3ee1ae28485d750ca8d8e53f0bcf"}, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2330, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}