{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTI5NjM1", "number": 53459, "title": "Associate translog with Lucene index commit for searchable snapshots shards", "bodyText": "Today searchable snapshot shards can be restored from a snapshot, recovered from a peer or force-allocated as stale primary on data node without copying any files on disk. It works because SearchableSnapshotDirectory does not rely on local files on disk and because every time such a Directory is instantiated an empty translog is associated to it through a new Lucene commit (holds in memory).\nThe translog/lucene commit association is done within a cluster state update when the IndexShard's directory is created and requires to open an IndexWriter and to create the translog and translog checkpoint files on disk. Opening the IndexWriter causes multiple files to be accessed (to verify  checksums and to load field infos) and for some shards this can take a lot of time, causing cluster state applying timeouts. Creating the translog files triggers multiple accesses to disk in order to create or delete directories and fsync files.\nThis PR moves the translog/lucene commit association out of the Directory instantiation - and therefore out of the cluster state update thread - in order to make it happen in a pre-recovery phase\nat the beginning of the recovery process. It introduces a new hook method named preRecovery()  that in turns execute the registered IndexEventListeners. This allows the searchable snapshot module to register a specific IndexEventListener that will create a new empty translog with a given translog UUID so that it will be associated with the last lucene commit.\nThis translog creation will happen when restoring the shard from a snapshot; right before recovering a shard from a peer; and when recovering the shard from the existing store after a node restart or a forced allocation. Associating a new translog with the Lucene index (and not the other way around like it is usually done during recoveries) prevent more Lucene commits to happen (as they required an IndexWriter, which triggers many file accesses).\nRelates \u00a0#50999", "createdAt": "2020-03-12T09:25:17Z", "url": "https://github.com/elastic/elasticsearch/pull/53459", "merged": true, "mergeCommit": {"oid": "4bde03a599c524429d84e4e083cd3dcd2f2d0fb8"}, "closed": true, "closedAt": "2020-03-13T11:46:26Z", "author": {"login": "tlrx"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM3q86AH2gAyMzg3MTI5NjM1OjQwNmQ0ZGVmODZjNzUyZDY2NGMwYmY4YjdmNjRkMTRlNTBmMGRkZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNNSb4AH2gAyMzg3MTI5NjM1OmYzZmMxNjMyZTFjYTFmZGU1NjFkNjAyMjc2ZmI1N2Y0Mzg3YmY5NjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "406d4def86c752d664c0bf8b7f64d14e50f0ddd6", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/406d4def86c752d664c0bf8b7f64d14e50f0ddd6", "committedDate": "2020-03-12T08:44:52Z", "message": "Associate translog with Lucene index commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32df1c4e79ae27eb47fbca05a8d8fb43b0fe04ca", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/32df1c4e79ae27eb47fbca05a8d8fb43b0fe04ca", "committedDate": "2020-03-12T13:29:57Z", "message": "Partial revert \"Associate translog with Lucene index commit\"\n\nThis partially reverts commit 406d4def"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/4ab94ce30de70f4b95a6daa67538bb07ab926129", "committedDate": "2020-03-12T15:57:08Z", "message": "Add pre recovery hook"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzAwMDky", "url": "https://github.com/elastic/elasticsearch/pull/53459#pullrequestreview-373700092", "createdAt": "2020-03-12T16:14:30Z", "commit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNDozMFrOF1laAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNDozMFrOF1laAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTcxMw==", "bodyText": "I think this might need to remain within the try block, as indexShard() can throw an exception.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r391731713", "createdAt": "2020-03-12T16:14:30Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java", "diffHunk": "@@ -171,11 +171,13 @@ private void doRecovery(final long recoveryId) {\n             final RecoveryTarget recoveryTarget = recoveryRef.target();\n             timer = recoveryTarget.state().getTimer();\n             cancellableThreads = recoveryTarget.cancellableThreads();\n+            final IndexShard indexShard = recoveryTarget.indexShard();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzQ1MTEx", "url": "https://github.com/elastic/elasticsearch/pull/53459#pullrequestreview-373745111", "createdAt": "2020-03-12T17:09:37Z", "commit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzowOTozN1rOF1nlUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoxMzoyN1rOF1nuXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2NzM3Ng==", "bodyText": "More for my curiosity than something that needs changing: why can we not assert state == IndexShardState.RECOVERING here? The lifecycle of an IndexShard is still a bit opaque to me.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r391767376", "createdAt": "2020-03-12T17:09:37Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/index/shard/IndexShard.java", "diffHunk": "@@ -1313,6 +1313,13 @@ public void close(String reason, boolean flushEngine) throws IOException {\n         }\n     }\n \n+    public void preRecovery() {\n+        if (state != IndexShardState.RECOVERING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2OTY5NQ==", "bodyText": "Suggest adding a big warning in a comment here saying how dangerous it is to specify the translog UUID and that it should only be used for shards that will see no indexing.\nI'm also idly wondering about how hard it would be to make this Translog read-only when it's not been created with a fresh UUID. Probably too hard to be worth doing, but thought I'd mention it anyway.", "url": "https://github.com/elastic/elasticsearch/pull/53459#discussion_r391769695", "createdAt": "2020-03-12T17:13:27Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/index/translog/Translog.java", "diffHunk": "@@ -1838,20 +1840,41 @@ public static String createEmptyTranslog(final Path location, final long initial\n \n     static String createEmptyTranslog(Path location, long initialGlobalCheckpoint, ShardId shardId,\n                                       ChannelFactory channelFactory, long primaryTerm) throws IOException {\n+        return createEmptyTranslog(location, shardId, initialGlobalCheckpoint, primaryTerm, null, channelFactory);\n+    }\n+\n+    public static String createEmptyTranslog(final Path location,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab94ce30de70f4b95a6daa67538bb07ab926129"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "557d924f02ea84cbd084734a132277706bfead62", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/557d924f02ea84cbd084734a132277706bfead62", "committedDate": "2020-03-13T09:04:35Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3fc1632e1ca1fde561d602276fb57f4387bf962", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/f3fc1632e1ca1fde561d602276fb57f4387bf962", "committedDate": "2020-03-13T09:56:00Z", "message": "Merge branch 'feature/searchable-snapshots' into associate-translog-with-lucene-index"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1537, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}