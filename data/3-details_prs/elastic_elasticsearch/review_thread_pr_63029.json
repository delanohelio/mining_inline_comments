{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTgwNjU5", "number": 63029, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoyNDoxMVrOEoqw0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozNjozM1rOEorD7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDc5MTIyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/java.util.regex.txt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoyNDoxMVrOHZ5Gzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo1NjoxMFrOHahuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjA3OA==", "bodyText": "Since we don't actually whitelist this method, I think this is just a comment to note if we did allow that method it would allow escaping the regex limiting? Could you clarify the comment?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496912078", "createdAt": "2020-09-29T17:24:11Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/java.util.regex.txt", "diffHunk": "@@ -58,6 +58,7 @@ class java.util.regex.Matcher {\n   String replaceFirst(String)\n   boolean requireEnd()\n   Matcher reset()\n+  # Whitelisting Matcher.reset(String) works around the regex limiting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MjE5Mw==", "bodyText": "Will do.", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497572193", "createdAt": "2020-09-30T14:49:39Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/java.util.regex.txt", "diffHunk": "@@ -58,6 +58,7 @@ class java.util.regex.Matcher {\n   String replaceFirst(String)\n   boolean requireEnd()\n   Matcher reset()\n+  # Whitelisting Matcher.reset(String) works around the regex limiting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjA3OA=="}, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3NzUyNQ==", "bodyText": "Updated comment.", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497577525", "createdAt": "2020-09-30T14:56:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/java.util.regex.txt", "diffHunk": "@@ -58,6 +58,7 @@ class java.util.regex.Matcher {\n   String replaceFirst(String)\n   boolean requireEnd()\n   Matcher reset()\n+  # Whitelisting Matcher.reset(String) works around the regex limiting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjA3OA=="}, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDc5MjExOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/ScriptScope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoyNDoyNFrOHZ5HZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0OTowOVrOHahXsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjIzMA==", "bodyText": "leftover todo?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496912230", "createdAt": "2020-09-29T17:24:24Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/ScriptScope.java", "diffHunk": "@@ -66,6 +66,8 @@ public ScriptScope(PainlessLookup painlessLookup, CompilerSettings compilerSetti\n         staticConstants.put(\"$SOURCE\", scriptSource);\n         staticConstants.put(\"$DEFINITION\", painlessLookup);\n         staticConstants.put(\"$FUNCTIONS\", functionTable);\n+        // TODO(stu): inject compiler settings here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MTc2Mw==", "bodyText": "Yup, these and all the left over todos were why this was initially a draft.  They are gone now.", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497571763", "createdAt": "2020-09-30T14:49:09Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/ScriptScope.java", "diffHunk": "@@ -66,6 +66,8 @@ public ScriptScope(PainlessLookup painlessLookup, CompilerSettings compilerSetti\n         staticConstants.put(\"$SOURCE\", scriptSource);\n         staticConstants.put(\"$DEFINITION\", painlessLookup);\n         staticConstants.put(\"$FUNCTIONS\", functionTable);\n+        // TODO(stu): inject compiler settings here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMjIzMA=="}, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDgyODEzOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozMzoyMVrOHZ5eCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0ODo0NFrOHahWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxODAyNg==", "bodyText": "what is this todo?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496918026", "createdAt": "2020-09-29T17:33:21Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -211,7 +211,7 @@ protected void injectStaticFieldsAndGetters() {\n         irLoadFieldMemberNode.setLocation(internalLocation);\n         irLoadFieldMemberNode.setExpressionType(String.class);\n         irLoadFieldMemberNode.setName(\"$NAME\");\n-        irLoadFieldMemberNode.setStatic(true);\n+        irLoadFieldMemberNode.setStatic(true); // TODO(stu): add $COMPILER_INJECTS, add hash map and set it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MTQ1OA==", "bodyText": "Removed.", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497571458", "createdAt": "2020-09-30T14:48:44Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -211,7 +211,7 @@ protected void injectStaticFieldsAndGetters() {\n         irLoadFieldMemberNode.setLocation(internalLocation);\n         irLoadFieldMemberNode.setExpressionType(String.class);\n         irLoadFieldMemberNode.setName(\"$NAME\");\n-        irLoadFieldMemberNode.setStatic(true);\n+        irLoadFieldMemberNode.setStatic(true); // TODO(stu): add $COMPILER_INJECTS, add hash map and set it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxODAyNg=="}, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDgzNzY1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotationParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozNTo1MFrOHZ5j5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0OToxOVrOHahYQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTUyNw==", "bodyText": "Todos like this are very cryptic. Can we just have a normal comment if some explanation is needed?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496919527", "createdAt": "2020-09-29T17:35:50Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotationParser.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+public class InjectConstantAnnotationParser implements WhitelistAnnotationParser {\n+\n+    public static final InjectConstantAnnotationParser INSTANCE = new InjectConstantAnnotationParser();\n+\n+    private InjectConstantAnnotationParser() {}\n+\n+    @Override\n+    public Object parse(Map<String, String> arguments) {\n+        if (arguments.isEmpty()) {\n+            throw new IllegalArgumentException(\"[@inject_constant] requires at least one name to inject\");\n+        }\n+        ArrayList<String> argList = new ArrayList<>(arguments.size());\n+        for (int i = 1; i <= arguments.size(); i++) {\n+            String argNum = Integer.toString(i);\n+            if (arguments.containsKey(argNum) == false) {\n+                throw new IllegalArgumentException(\"[@inject_constant] missing argument number [\" + argNum + \"]\");\n+            }\n+            // TODO(stu): Jack, how do I verify against CompilerSettings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MTkwNQ==", "bodyText": "Removed when draft.", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497571905", "createdAt": "2020-09-30T14:49:19Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotationParser.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+public class InjectConstantAnnotationParser implements WhitelistAnnotationParser {\n+\n+    public static final InjectConstantAnnotationParser INSTANCE = new InjectConstantAnnotationParser();\n+\n+    private InjectConstantAnnotationParser() {}\n+\n+    @Override\n+    public Object parse(Map<String, String> arguments) {\n+        if (arguments.isEmpty()) {\n+            throw new IllegalArgumentException(\"[@inject_constant] requires at least one name to inject\");\n+        }\n+        ArrayList<String> argList = new ArrayList<>(arguments.size());\n+        for (int i = 1; i <= arguments.size(); i++) {\n+            String argNum = Integer.toString(i);\n+            if (arguments.containsKey(argNum) == false) {\n+                throw new IllegalArgumentException(\"[@inject_constant] missing argument number [\" + argNum + \"]\");\n+            }\n+            // TODO(stu): Jack, how do I verify against CompilerSettings.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTUyNw=="}, "originalCommit": {"oid": "e3e15cf46998120b017ac620afad0dbba2d6dd7b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDg0MDE0OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozNjozM1rOHZ5leA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo1NTo1MFrOHahtIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTkyOA==", "bodyText": "Can we have some basic java docs on this?", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r496919928", "createdAt": "2020-09-29T17:36:33Z", "author": {"login": "rjernst"}, "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotation.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class InjectConstantAnnotation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d58686cfb46b976007f235e9c04641881684a29"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MjMwMQ==", "bodyText": "Will do.", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497572301", "createdAt": "2020-09-30T14:49:46Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotation.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class InjectConstantAnnotation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTkyOA=="}, "originalCommit": {"oid": "6d58686cfb46b976007f235e9c04641881684a29"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3NzI1MA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/63029#discussion_r497577250", "createdAt": "2020-09-30T14:55:50Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/annotation/InjectConstantAnnotation.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.spi.annotation;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class InjectConstantAnnotation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxOTkyOA=="}, "originalCommit": {"oid": "6d58686cfb46b976007f235e9c04641881684a29"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3265, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}