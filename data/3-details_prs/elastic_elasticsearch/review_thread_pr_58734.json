{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTczOTA4", "number": 58734, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0OToyOFrOEKFMSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mjo0NlrOEKItTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDA2MjgxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/regression/PseudoHuberMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0OToyOFrOGq6veQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0NToxM1rOGrXjzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NTgwMQ==", "bodyText": "This comment is incorrect", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r447655801", "createdAt": "2020-06-30T12:49:28Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/regression/PseudoHuberMetric.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: msle = 1/n * \u03a3(log(y + offset) - log(y\u00b4 + offset))^2\n+ * where offset is used to make sure the argument to log function is always positive\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNzk0OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r448127949", "createdAt": "2020-07-01T05:45:13Z", "author": {"login": "przemekwitek"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/regression/PseudoHuberMetric.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: msle = 1/n * \u03a3(log(y + offset) - log(y\u00b4 + offset))^2\n+ * where offset is used to make sure the argument to log function is always positive\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NTgwMQ=="}, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDU4MTQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/regression/PseudoHuber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0MToxM1rOGq_vnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0NDo1NVrOGrXjYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNzc1OQ==", "bodyText": "incorrect comment", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r447737759", "createdAt": "2020-06-30T14:41:13Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/regression/PseudoHuber.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregation;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationParameters;\n+\n+import java.io.IOException;\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: mse = 1/n * \u03a3(y - y\u00b4)^2\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNzg0MQ==", "bodyText": "Ooops, done.", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r448127841", "createdAt": "2020-07-01T05:44:55Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/regression/PseudoHuber.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregation;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationParameters;\n+\n+import java.io.IOException;\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: mse = 1/n * \u03a3(y - y\u00b4)^2\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNzc1OQ=="}, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDU5MDE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/ml/evaluate_data_frame.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0MzoxMVrOGq_1FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0NTozMlrOGrXkKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczOTE1Ng==", "bodyText": "would be good to have a test here that adjusts the delta.", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r447739156", "createdAt": "2020-06-30T14:43:11Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/ml/evaluate_data_frame.yml", "diffHunk": "@@ -868,6 +869,27 @@ setup:\n   - match: { regression.mean_squared_logarithmic_error.error: 0.08680568028334916 }\n   - is_false: regression.mean_squared_error.value\n   - is_false: regression.r_squared.value\n+  - is_false: regression.pseudo_huber.value\n+---\n+\"Test regression pseudo_huber\":\n+  - do:\n+      ml.evaluate_data_frame:\n+        body: >\n+          {\n+            \"index\": \"utopia\",\n+            \"evaluation\": {\n+              \"regression\": {\n+                \"actual_field\": \"regression_field_act\",\n+                \"predicted_field\": \"regression_field_pred\",\n+                \"metrics\": { \"pseudo_huber\": {} }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODA0MA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r448128040", "createdAt": "2020-07-01T05:45:32Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/ml/evaluate_data_frame.yml", "diffHunk": "@@ -868,6 +869,27 @@ setup:\n   - match: { regression.mean_squared_logarithmic_error.error: 0.08680568028334916 }\n   - is_false: regression.mean_squared_error.value\n   - is_false: regression.r_squared.value\n+  - is_false: regression.pseudo_huber.value\n+---\n+\"Test regression pseudo_huber\":\n+  - do:\n+      ml.evaluate_data_frame:\n+        body: >\n+          {\n+            \"index\": \"utopia\",\n+            \"evaluation\": {\n+              \"regression\": {\n+                \"actual_field\": \"regression_field_act\",\n+                \"predicted_field\": \"regression_field_pred\",\n+                \"metrics\": { \"pseudo_huber\": {} }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczOTE1Ng=="}, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDYzODg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/regression/PseudoHuber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mjo0NlrOGrAS2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTozNDo1MlrOGrXX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0Njc3OA==", "bodyText": "you should calculate delta squared just once and pass it into the script.", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r447746778", "createdAt": "2020-06-30T14:52:46Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/regression/PseudoHuber.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregation;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationParameters;\n+\n+import java.io.IOException;\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: mse = 1/n * \u03a3(y - y\u00b4)^2\n+ */\n+public class PseudoHuber implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"pseudo_huber\");\n+\n+    public static final ParseField DELTA = new ParseField(\"delta\");\n+    private static final double DEFAULT_DELTA = 1.0;\n+\n+    private static final String PAINLESS_TEMPLATE =\n+        \"def delta2 = Math.pow({2}, 2);\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNDkyNw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/58734#discussion_r448124927", "createdAt": "2020-07-01T05:34:52Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/regression/PseudoHuber.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregation;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationParameters;\n+\n+import java.io.IOException;\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.xpack.core.ml.dataframe.evaluation.MlEvaluationNamedXContentProvider.registeredMetricName;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: mse = 1/n * \u03a3(y - y\u00b4)^2\n+ */\n+public class PseudoHuber implements EvaluationMetric {\n+\n+    public static final ParseField NAME = new ParseField(\"pseudo_huber\");\n+\n+    public static final ParseField DELTA = new ParseField(\"delta\");\n+    private static final double DEFAULT_DELTA = 1.0;\n+\n+    private static final String PAINLESS_TEMPLATE =\n+        \"def delta2 = Math.pow({2}, 2);\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0Njc3OA=="}, "originalCommit": {"oid": "f47462870d6d375625e00e5b4e0230db2cf94eea"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2274, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}