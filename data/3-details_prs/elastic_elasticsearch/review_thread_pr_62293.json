{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NDU5NjE5", "number": 62293, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowNTo1MFrOEjCCDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyNToyNlrOEjCgLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTY4OTA5OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/full-cluster-restart/src/test/java/org/elasticsearch/xpack/restart/MlConfigIndexMappingsFullClusterRestartIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowNTo1MFrOHRKnLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowNTo1MFrOHRKnLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2MTcxMQ==", "bodyText": "We want to remove the dependency on x-pack core in these rest tests, taking out these builders helps.\nMlMigrationFullClusterRestartIT still uses the core builders so we can't break that dependency yet but that test will be removed from this branch soon.", "url": "https://github.com/elastic/elasticsearch/pull/62293#discussion_r487761711", "createdAt": "2020-09-14T09:05:50Z", "author": {"login": "davidkyle"}, "path": "x-pack/qa/full-cluster-restart/src/test/java/org/elasticsearch/xpack/restart/MlConfigIndexMappingsFullClusterRestartIT.java", "diffHunk": "@@ -98,15 +76,21 @@ private void assertThatMlConfigIndexDoesNotExist() {\n     }\n \n     private void createAnomalyDetectorJob(String jobId) throws IOException {\n-        Detector.Builder detector = new Detector.Builder(\"metric\", \"responsetime\");\n-        AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(Collections.singletonList(detector.build()))\n-            .setBucketSpan(TimeValue.timeValueMinutes(10));\n-        Job.Builder job = new Job.Builder(jobId)\n-            .setAnalysisConfig(analysisConfig)\n-            .setDataDescription(new DataDescription.Builder());\n+        String jobConfig =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecbe5ba48e921b986a7ffbb1823085495d30acd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTc2NjIyOnYy", "diffSide": "RIGHT", "path": "x-pack/qa/src/main/java/org/elasticsearch/xpack/test/rest/IndexTemplateAsserter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyNToyNlrOHRLVZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyNToyNlrOHRLVZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3MzU0Mg==", "bodyText": "Please fix indentation of parameters.", "url": "https://github.com/elastic/elasticsearch/pull/62293#discussion_r487773542", "createdAt": "2020-09-14T09:25:26Z", "author": {"login": "przemekwitek"}, "path": "x-pack/qa/src/main/java/org/elasticsearch/xpack/test/rest/IndexTemplateAsserter.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.test.rest;\n+\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.common.xcontent.support.XContentMapValues;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Utilities for checking that the current index mappings match\n+ * the mappings defined in the template.\n+ *\n+ * The tests are intended to catch cases where an index mapping has been\n+ * updated dynamically or a write occurred before the template was put\n+ * causing the index to have the wrong mappings.\n+ *\n+ * These assertions are usually part of upgrade testing.\n+ */\n+public class IndexTemplateAsserter {\n+    /**\n+     * Assert that the mappings of the ml indices are the same as in the\n+     * templates. If different this is either a consequence of an unintended\n+     * write (dynamic update) or the mappings have not been updated after\n+     * upgrade.\n+     *\n+     * A failure here will be very difficult to reproduce as it may be a side\n+     * effect of a different test running in the cluster.\n+     *\n+     * @param client The rest client\n+     * @throws IOException On error\n+     */\n+    public static void assertMlMappingsMatchTemplates(RestClient client) throws IOException {\n+        // Keys that have been dynamically mapped in the .ml-config index\n+        // but are not in the template. These can only be fixed with\n+        // re-index and should be addressed at the next major upgrade.\n+        // For now this serves as documentation of the missing fields\n+        Set<String> configIndexExceptions = new HashSet<>();\n+        configIndexExceptions.add(\"properties.allow_lazy_start.type\");\n+        configIndexExceptions.add(\"properties.analysis.properties.classification.properties.randomize_seed.type\");\n+        configIndexExceptions.add(\"properties.analysis.properties.outlier_detection.properties.compute_feature_influence.type\");\n+        configIndexExceptions.add(\"properties.analysis.properties.outlier_detection.properties.outlier_fraction.type\");\n+        configIndexExceptions.add(\"properties.analysis.properties.outlier_detection.properties.standardization_enabled.type\");\n+        configIndexExceptions.add(\"properties.analysis.properties.regression.properties.randomize_seed.type\");\n+        configIndexExceptions.add(\"properties.deleting.type\");\n+        configIndexExceptions.add(\"properties.model_memory_limit.type\");\n+\n+        assertLegacyTemplateMatchesIndexMappings(client, \".ml-config\", \".ml-config\", false, configIndexExceptions);\n+        // the true parameter means the index may not have been created\n+        assertLegacyTemplateMatchesIndexMappings(client, \".ml-meta\", \".ml-meta\", true, Collections.emptySet());\n+        assertLegacyTemplateMatchesIndexMappings(client, \".ml-stats\", \".ml-stats-000001\", true, Collections.emptySet());\n+        assertLegacyTemplateMatchesIndexMappings(client, \".ml-state\", \".ml-state-000001\", true, Collections.emptySet());\n+        assertLegacyTemplateMatchesIndexMappings(client, \".ml-notifications-000001\", \".ml-notifications-000001\");\n+        assertLegacyTemplateMatchesIndexMappings(client, \".ml-inference-000003\", \".ml-inference-000003\", true, Collections.emptySet());\n+        // .ml-annotations-6 does not use a template\n+        // .ml-anomalies-shared uses a template but will have dynamically updated mappings as new jobs are opened\n+    }\n+\n+    /**\n+     * Compares the mappings from the template and the index and asserts they\n+     * are the same. The assertion error message details the differences in\n+     * the mappings.\n+     *\n+     * The Mappings, which are maps of maps, are flattened with the keys built\n+     * from the keys of the sub-maps appended to the parent key.\n+     * This makes diffing the 2 maps easier and diffs more comprehensible.\n+     *\n+     * The _meta field is not compared as it contains version numbers that\n+     * change even when the mappings don't.\n+     *\n+     * Mistakes happen and some indices may be stuck with the incorrect mappings\n+     * that cannot be fixed without re-index. In this case use the {@code exceptions}\n+     * parameter to filter out fields in the index mapping that are not in the\n+     * template. Each exception should be a '.' separated path to the value\n+     * e.g. {@code properties.analysis.analysis_field.type}.\n+     *\n+     * @param client The rest client to use\n+     * @param templateName The template\n+     * @param indexName The index\n+     * @param notAnErrorIfIndexDoesNotExist The index may or may not have been created from\n+     *                                      the template. If {@code true} then the missing\n+     *                                      index does not cause an error\n+     * @param exceptions List of keys to ignore in the index mappings.\n+     *                   The key is a '.' separated path.\n+     * @throws IOException Yes\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static void assertLegacyTemplateMatchesIndexMappings(RestClient client,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecbe5ba48e921b986a7ffbb1823085495d30acd"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1534, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}