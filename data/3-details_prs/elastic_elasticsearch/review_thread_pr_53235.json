{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTIwNDAw", "number": 53235, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoxOToyMlrODl-GLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoxOToyMlrODl-GLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQxMjkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoxOToyMlrOFzKQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoxOToyMlrOFzKQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4OTg3Mg==", "bodyText": "nit: Metric singular?", "url": "https://github.com/elastic/elasticsearch/pull/53235#discussion_r389189872", "createdAt": "2020-03-06T23:19:22Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodesStatsRequest.java", "diffHunk": "@@ -139,180 +117,234 @@ public NodesStatsRequest indices(boolean indices) {\n      * Should the node OS be returned.\n      */\n     public boolean os() {\n-        return this.os;\n+        return Metrics.OS.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node OS be returned.\n      */\n     public NodesStatsRequest os(boolean os) {\n-        this.os = os;\n+        addOrRemoveMetric(os, Metrics.OS.metricName());\n         return this;\n     }\n \n     /**\n      * Should the node Process be returned.\n      */\n     public boolean process() {\n-        return this.process;\n+        return Metrics.PROCESS.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node Process be returned.\n      */\n     public NodesStatsRequest process(boolean process) {\n-        this.process = process;\n+        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n         return this;\n     }\n \n     /**\n      * Should the node JVM be returned.\n      */\n     public boolean jvm() {\n-        return this.jvm;\n+        return Metrics.JVM.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node JVM be returned.\n      */\n     public NodesStatsRequest jvm(boolean jvm) {\n-        this.jvm = jvm;\n+        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n         return this;\n     }\n \n     /**\n      * Should the node Thread Pool be returned.\n      */\n     public boolean threadPool() {\n-        return this.threadPool;\n+        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node Thread Pool be returned.\n      */\n     public NodesStatsRequest threadPool(boolean threadPool) {\n-        this.threadPool = threadPool;\n+        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n         return this;\n     }\n \n     /**\n      * Should the node file system stats be returned.\n      */\n     public boolean fs() {\n-        return this.fs;\n+        return Metrics.FS.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node file system stats be returned.\n      */\n     public NodesStatsRequest fs(boolean fs) {\n-        this.fs = fs;\n+        addOrRemoveMetric(fs, Metrics.FS.metricName());\n         return this;\n     }\n \n     /**\n      * Should the node Transport be returned.\n      */\n     public boolean transport() {\n-        return this.transport;\n+        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node Transport be returned.\n      */\n     public NodesStatsRequest transport(boolean transport) {\n-        this.transport = transport;\n+        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n         return this;\n     }\n \n     /**\n      * Should the node HTTP be returned.\n      */\n     public boolean http() {\n-        return this.http;\n+        return Metrics.HTTP.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node HTTP be returned.\n      */\n     public NodesStatsRequest http(boolean http) {\n-        this.http = http;\n+        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n         return this;\n     }\n \n     public boolean breaker() {\n-        return this.breaker;\n+        return Metrics.BREAKER.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node's circuit breaker stats be returned.\n      */\n     public NodesStatsRequest breaker(boolean breaker) {\n-        this.breaker = breaker;\n+        addOrRemoveMetric(breaker, Metrics.BREAKER.metricName());\n         return this;\n     }\n \n     public boolean script() {\n-        return script;\n+        return Metrics.SCRIPT.containedIn(requestedMetrics);\n     }\n \n     public NodesStatsRequest script(boolean script) {\n-        this.script = script;\n+        addOrRemoveMetric(script, Metrics.SCRIPT.metricName());\n         return this;\n     }\n \n \n     public boolean discovery() {\n-        return this.discovery;\n+        return Metrics.DISCOVERY.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should the node's discovery stats be returned.\n      */\n     public NodesStatsRequest discovery(boolean discovery) {\n-        this.discovery = discovery;\n+        addOrRemoveMetric(discovery, Metrics.DISCOVERY.metricName());\n         return this;\n     }\n \n     public boolean ingest() {\n-        return ingest;\n+        return Metrics.INGEST.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should ingest statistics be returned.\n      */\n     public NodesStatsRequest ingest(boolean ingest) {\n-        this.ingest = ingest;\n+        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n         return this;\n     }\n \n     public boolean adaptiveSelection() {\n-        return adaptiveSelection;\n+        return Metrics.ADAPTIVE_SELECTION.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should adaptiveSelection statistics be returned.\n      */\n     public NodesStatsRequest adaptiveSelection(boolean adaptiveSelection) {\n-        this.adaptiveSelection = adaptiveSelection;\n+        addOrRemoveMetric(adaptiveSelection, Metrics.ADAPTIVE_SELECTION.metricName());\n         return this;\n     }\n \n+    /**\n+     * Helper method for adding and removing metrics.\n+     * @param includeMetric Whether or not to include a metric.\n+     * @param metricName Name of the metric to include or remove.\n+     */\n+    private void addOrRemoveMetric(boolean includeMetric, String metricName) {\n+        if (includeMetric) {\n+            requestedMetrics.add(metricName);\n+        } else {\n+            requestedMetrics.remove(metricName);\n+        }\n+    }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n         indices.writeTo(out);\n-        out.writeBoolean(os);\n-        out.writeBoolean(process);\n-        out.writeBoolean(jvm);\n-        out.writeBoolean(threadPool);\n-        out.writeBoolean(fs);\n-        out.writeBoolean(transport);\n-        out.writeBoolean(http);\n-        out.writeBoolean(breaker);\n-        out.writeBoolean(script);\n-        out.writeBoolean(discovery);\n-        out.writeBoolean(ingest);\n-        out.writeBoolean(adaptiveSelection);\n+        if (out.getVersion().before(Version.V_7_7_0)) {\n+            out.writeBoolean(Metrics.OS.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.PROCESS.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.JVM.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.THREAD_POOL.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.FS.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.TRANSPORT.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.HTTP.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.BREAKER.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.SCRIPT.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.DISCOVERY.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.INGEST.containedIn(requestedMetrics));\n+            out.writeBoolean(Metrics.ADAPTIVE_SELECTION.containedIn(requestedMetrics));\n+        } else {\n+            out.writeStringArray(requestedMetrics.toArray(String[]::new));\n+        }\n+    }\n+\n+    /**\n+     * An enumeration of the \"core\" sections of metrics that may be requested\n+     * from the nodes stats endpoint. Eventually this list will be pluggable.\n+     */\n+    private enum Metrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efcaefc337ad290340163c4ae1cf38a403b26da6"}, "originalPosition": 354}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3339, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}