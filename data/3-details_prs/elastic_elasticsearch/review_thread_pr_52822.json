{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzMyNzk5", "number": 52822, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxMDowMlrODjHSUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNDo1MFrODlXtXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTQ2MTI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxMDowMlrOFuvUcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMDowOFrOFuyYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NDA5Nw==", "bodyText": "this leniency looks dangerous?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384554097", "createdAt": "2020-02-26T15:10:02Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -708,6 +708,8 @@ private DefaultSearchContext createSearchContext(SearchRewriteContext rewriteCon\n                 searcher, clusterService, indexService, indexShard, bigArrays, threadPool::relativeTimeInMillis, timeout, fetchPhase);\n             success = true;\n             return searchContext;\n+        } catch (IOException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNDI4NA==", "bodyText": "Should I simply propagate the exception? or any other suggestion?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384604284", "createdAt": "2020-02-26T16:20:08Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -708,6 +708,8 @@ private DefaultSearchContext createSearchContext(SearchRewriteContext rewriteCon\n                 searcher, clusterService, indexService, indexShard, bigArrays, threadPool::relativeTimeInMillis, timeout, fetchPhase);\n             success = true;\n             return searchContext;\n+        } catch (IOException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NDA5Nw=="}, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTQ3NTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxMzoyMVrOFuvdMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNToyM1rOFv4uJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NjMzNw==", "bodyText": "This implementation feels a bit awkward, I'd rather like to fork ExitableDirectoryReader entirely to not inherit from its QueryTimeout abstraction.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384556337", "createdAt": "2020-02-26T15:13:21Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +340,99 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a cancellation Runnable task.\n+     */\n+    private static class CancellableIndexReader extends FilterDirectoryReader {\n+\n+        private final Cancellable checkCancelled;\n+\n+        private CancellableIndexReader(DirectoryReader in, Cancellable checkCancelled) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, checkCancelled);\n+                }\n+            });\n+            this.checkCancelled = checkCancelled;\n+        }\n+\n+        private void setCheckCancelled(Supplier<Runnable> checkCancelled) {\n+            this.checkCancelled.setCancellable(checkCancelled);\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a leaf reader with a cancellable task\n+     */\n+    private static class CancellableLeafReader extends ExitableDirectoryReader.ExitableFilterAtomicReader {\n+\n+        private CancellableLeafReader(LeafReader leafReader, Cancellable checkCancelled)  {\n+            super(leafReader, checkCancelled);\n+        }\n+\n+        @Override\n+        public NumericDocValues getNumericDocValues(String field) throws IOException {\n+            return in.getNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n+            return in.getBinaryDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedDocValues getSortedDocValues(String field) throws IOException {\n+            return in.getSortedDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedNumericDocValues getSortedNumericDocValues(String field) throws IOException {\n+            return in.getSortedNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n+            return in.getSortedSetDocValues(field);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of {@link QueryTimeout} with a Runnable task.\n+     */\n+    private static class Cancellable implements QueryTimeout {\n+\n+        private Supplier<Runnable> cancellable;\n+\n+        public void setCancellable(Supplier<Runnable> cancellable) {\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public boolean shouldExit() {\n+            assert cancellable != null : \"checkCancelled must be set immediately after the construction of CancellableIndexReader\";\n+            if (cancellable.get() == null) {\n+                return false;\n+            }\n+            cancellable.get().run();\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5ODk2Ng==", "bodyText": "I tried that in the 1st approach but this means we have to copy the whole ExitablePointValues to wrap the point values and therefore the ExitableIntersectVisitor.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384598966", "createdAt": "2020-02-26T16:12:20Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +340,99 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a cancellation Runnable task.\n+     */\n+    private static class CancellableIndexReader extends FilterDirectoryReader {\n+\n+        private final Cancellable checkCancelled;\n+\n+        private CancellableIndexReader(DirectoryReader in, Cancellable checkCancelled) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, checkCancelled);\n+                }\n+            });\n+            this.checkCancelled = checkCancelled;\n+        }\n+\n+        private void setCheckCancelled(Supplier<Runnable> checkCancelled) {\n+            this.checkCancelled.setCancellable(checkCancelled);\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a leaf reader with a cancellable task\n+     */\n+    private static class CancellableLeafReader extends ExitableDirectoryReader.ExitableFilterAtomicReader {\n+\n+        private CancellableLeafReader(LeafReader leafReader, Cancellable checkCancelled)  {\n+            super(leafReader, checkCancelled);\n+        }\n+\n+        @Override\n+        public NumericDocValues getNumericDocValues(String field) throws IOException {\n+            return in.getNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n+            return in.getBinaryDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedDocValues getSortedDocValues(String field) throws IOException {\n+            return in.getSortedDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedNumericDocValues getSortedNumericDocValues(String field) throws IOException {\n+            return in.getSortedNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n+            return in.getSortedSetDocValues(field);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of {@link QueryTimeout} with a Runnable task.\n+     */\n+    private static class Cancellable implements QueryTimeout {\n+\n+        private Supplier<Runnable> cancellable;\n+\n+        public void setCancellable(Supplier<Runnable> cancellable) {\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public boolean shouldExit() {\n+            assert cancellable != null : \"checkCancelled must be set immediately after the construction of CancellableIndexReader\";\n+            if (cancellable.get() == null) {\n+                return false;\n+            }\n+            cancellable.get().run();\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NjMzNw=="}, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1OTgxNg==", "bodyText": "I don't mind copying it.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385159816", "createdAt": "2020-02-27T14:27:03Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +340,99 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a cancellation Runnable task.\n+     */\n+    private static class CancellableIndexReader extends FilterDirectoryReader {\n+\n+        private final Cancellable checkCancelled;\n+\n+        private CancellableIndexReader(DirectoryReader in, Cancellable checkCancelled) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, checkCancelled);\n+                }\n+            });\n+            this.checkCancelled = checkCancelled;\n+        }\n+\n+        private void setCheckCancelled(Supplier<Runnable> checkCancelled) {\n+            this.checkCancelled.setCancellable(checkCancelled);\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a leaf reader with a cancellable task\n+     */\n+    private static class CancellableLeafReader extends ExitableDirectoryReader.ExitableFilterAtomicReader {\n+\n+        private CancellableLeafReader(LeafReader leafReader, Cancellable checkCancelled)  {\n+            super(leafReader, checkCancelled);\n+        }\n+\n+        @Override\n+        public NumericDocValues getNumericDocValues(String field) throws IOException {\n+            return in.getNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n+            return in.getBinaryDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedDocValues getSortedDocValues(String field) throws IOException {\n+            return in.getSortedDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedNumericDocValues getSortedNumericDocValues(String field) throws IOException {\n+            return in.getSortedNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n+            return in.getSortedSetDocValues(field);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of {@link QueryTimeout} with a Runnable task.\n+     */\n+    private static class Cancellable implements QueryTimeout {\n+\n+        private Supplier<Runnable> cancellable;\n+\n+        public void setCancellable(Supplier<Runnable> cancellable) {\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public boolean shouldExit() {\n+            assert cancellable != null : \"checkCancelled must be set immediately after the construction of CancellableIndexReader\";\n+            if (cancellable.get() == null) {\n+                return false;\n+            }\n+            cancellable.get().run();\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NjMzNw=="}, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjcxMA==", "bodyText": "+1 to copy", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385756710", "createdAt": "2020-02-28T15:25:23Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +340,99 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a cancellation Runnable task.\n+     */\n+    private static class CancellableIndexReader extends FilterDirectoryReader {\n+\n+        private final Cancellable checkCancelled;\n+\n+        private CancellableIndexReader(DirectoryReader in, Cancellable checkCancelled) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, checkCancelled);\n+                }\n+            });\n+            this.checkCancelled = checkCancelled;\n+        }\n+\n+        private void setCheckCancelled(Supplier<Runnable> checkCancelled) {\n+            this.checkCancelled.setCancellable(checkCancelled);\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a leaf reader with a cancellable task\n+     */\n+    private static class CancellableLeafReader extends ExitableDirectoryReader.ExitableFilterAtomicReader {\n+\n+        private CancellableLeafReader(LeafReader leafReader, Cancellable checkCancelled)  {\n+            super(leafReader, checkCancelled);\n+        }\n+\n+        @Override\n+        public NumericDocValues getNumericDocValues(String field) throws IOException {\n+            return in.getNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n+            return in.getBinaryDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedDocValues getSortedDocValues(String field) throws IOException {\n+            return in.getSortedDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedNumericDocValues getSortedNumericDocValues(String field) throws IOException {\n+            return in.getSortedNumericDocValues(field);\n+        }\n+\n+        @Override\n+        public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n+            return in.getSortedSetDocValues(field);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of {@link QueryTimeout} with a Runnable task.\n+     */\n+    private static class Cancellable implements QueryTimeout {\n+\n+        private Supplier<Runnable> cancellable;\n+\n+        public void setCancellable(Supplier<Runnable> cancellable) {\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public boolean shouldExit() {\n+            assert cancellable != null : \"checkCancelled must be set immediately after the construction of CancellableIndexReader\";\n+            if (cancellable.get() == null) {\n+                return false;\n+            }\n+            cancellable.get().run();\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NjMzNw=="}, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTQ4NTQ0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxNToyNFrOFuvjDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxNToyNFrOFuvjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NzgzOQ==", "bodyText": "use try-with-resources?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384557839", "createdAt": "2020-02-26T15:15:24Z", "author": {"login": "jpountz"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java", "diffHunk": "@@ -62,13 +61,19 @@ public void testEmpty() throws IOException {\n                 .method(PercentilesMethod.TDIGEST);\n         MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n         fieldType.setName(\"field\");\n-        try (IndexReader reader = new MultiReader()) {\n+\n+        Directory directory = newDirectory();\n+        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), directory);\n+        try (IndexReader reader = unmappedIndexWriter.getReader()) {\n             IndexSearcher searcher = new IndexSearcher(reader);\n             PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n             Percentile rank = ranks.iterator().next();\n             assertEquals(Double.NaN, rank.getPercent(), 0d);\n             assertEquals(0.5, rank.getValue(), 0d);\n             assertFalse(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n+        } finally {\n+            unmappedIndexWriter.close();\n+            directory.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTQ5NTkwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxNzo0OVrOFuvpug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNzoyN1rOFuyRjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1OTU0Ng==", "bodyText": "CancellableIndexReader shouldn't have any overhead, so it might be simpler to wrap all the time here.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384559546", "createdAt": "2020-02-26T15:17:49Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -79,8 +89,18 @@\n     private QueryProfiler profiler;\n     private Runnable checkCancelled;\n \n-    public ContextIndexSearcher(IndexReader reader, Similarity similarity, QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) {\n-        super(reader);\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) throws IOException {\n+        this(reader, similarity, queryCache, queryCachingPolicy, true);\n+    }\n+\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy,\n+                                boolean shouldWrap) throws IOException {\n+        super(shouldWrap? new CancellableIndexReader((DirectoryReader) reader, new Cancellable()) : reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMjUwOQ==", "bodyText": "This boolean was added together with a second constructor because of the AggregatorTestCase and hundreds of tests that derive from that. If we wrap the IndexReader we get:\njava.lang.AssertionError: The top-reader used to create Weight is not the same as the current reader's top-reader (org.apache.lucene.index.CompositeReaderContext@382edaaa\n\nwhich I tried to fix by changing the AggregatorTestCase to receive IndexReader and not IndexSearcher as an argument. and all the tests to use the derived IndexSearcher from the context created. But even with this there were a few more tests failing that didn't manage to fix, so after discussion with @jimczi we decided to make this workaround for the moment and address the issue in a separate PR afterwards.\nI can add a TODO though to not miss it.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384602509", "createdAt": "2020-02-26T16:17:27Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -79,8 +89,18 @@\n     private QueryProfiler profiler;\n     private Runnable checkCancelled;\n \n-    public ContextIndexSearcher(IndexReader reader, Similarity similarity, QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) {\n-        super(reader);\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) throws IOException {\n+        this(reader, similarity, queryCache, queryCachingPolicy, true);\n+    }\n+\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy,\n+                                boolean shouldWrap) throws IOException {\n+        super(shouldWrap? new CancellableIndexReader((DirectoryReader) reader, new Cancellable()) : reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1OTU0Ng=="}, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTQ5OTAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxODoyNlrOFuvrmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxODoyNlrOFuvrmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2MDAyNQ==", "bodyText": "Let's call it CancellableDirectoryReader if it extends DirectoryReader.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r384560025", "createdAt": "2020-02-26T15:18:26Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +340,99 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a cancellation Runnable task.\n+     */\n+    private static class CancellableIndexReader extends FilterDirectoryReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ebfb48fab5d86de9137dfe624967c078cd88bf"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODAyMzU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTowMDoyMFrOFvtwNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNjoxMFrOFv4wGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzAxNQ==", "bodyText": "Why do we need to do this?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385577015", "createdAt": "2020-02-28T09:00:20Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "diffHunk": "@@ -310,6 +297,8 @@ static boolean executeInternal(SearchContext searchContext) throws QueryPhaseExe\n                 queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize());\n                 queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA());\n             }\n+            // Search phase has finished, no longer need to check for timeout\n+            searcher.unsetCheckTimeout();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce2d557d56d860402220bb64cfbca16c100eef25"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4NjQ4MA==", "bodyText": "So that we don't experience a timeout during the aggregation phase. (there were integ tests that were failing because of this). I changed the comment to mention it.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385686480", "createdAt": "2020-02-28T13:10:43Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "diffHunk": "@@ -310,6 +297,8 @@ static boolean executeInternal(SearchContext searchContext) throws QueryPhaseExe\n                 queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize());\n                 queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA());\n             }\n+            // Search phase has finished, no longer need to check for timeout\n+            searcher.unsetCheckTimeout();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzAxNQ=="}, "originalCommit": {"oid": "ce2d557d56d860402220bb64cfbca16c100eef25"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NzIwOQ==", "bodyText": "We should do this on the cancellable object directly. The searcher shouldn't be able to unset this way. See my comment on the context searcher.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385757209", "createdAt": "2020-02-28T15:26:10Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "diffHunk": "@@ -310,6 +297,8 @@ static boolean executeInternal(SearchContext searchContext) throws QueryPhaseExe\n                 queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize());\n                 queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA());\n             }\n+            // Search phase has finished, no longer need to check for timeout\n+            searcher.unsetCheckTimeout();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzAxNQ=="}, "originalCommit": {"oid": "ce2d557d56d860402220bb64cfbca16c100eef25"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE2ODM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMDowMFrOFv4iKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMDowMFrOFv4iKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzY0MQ==", "bodyText": "The implementation should live on the QueryPhase imo. This way you don't need to expose the checkDirReaderCancelled and checkDirReaderCancelled  in the searcher.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385753641", "createdAt": "2020-02-28T15:20:00Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {\n+            checkCancelled();\n+        }\n+        void unsetCheckTimeout();\n+    }\n+\n+    public static class CancellableImpl implements Cancellable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE3MDUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMDozOFrOFv4jcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMTozNzoyNVrOFwI7eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1Mzk2OQ==", "bodyText": "These two functions should not be part of the interface, checkCancelled should be enough", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385753969", "createdAt": "2020-02-28T15:20:38Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMjI2Ng==", "bodyText": "I don't like that much either, I exposed the checkDirReaderCancelled() so that I we can have tests that differentiate between exit in the searcher and exit from the dirReader: https://github.com/elastic/elasticsearch/pull/52822/files#diff-2abce48f3a52657ce3740afade6d5f8fR132\nBut as discussed I could just unit test the Cancellable reader instead.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386022266", "createdAt": "2020-02-29T11:37:25Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1Mzk2OQ=="}, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE3MjA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMDo1OFrOFv4kVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMDo1OFrOFv4kVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDE5Ng==", "bodyText": "Can you call QueryCancellable ?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385754196", "createdAt": "2020-02-28T15:20:58Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE4NDk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNDozNFrOFv4sKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMjoxMjozMFrOFwN2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjIwMA==", "bodyText": "why do you need to use a custom Holder ? Now that cancellable directory reader is forked, you should be able to set the cancellable lazily ? So instead of passing the Cancellable here you'd set it in ContextIndexSearcher#setCancellable ?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385756200", "createdAt": "2020-02-28T15:24:34Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -77,10 +89,27 @@\n \n     private AggregatedDfs aggregatedDfs;\n     private QueryProfiler profiler;\n-    private Runnable checkCancelled;\n+    private Holder<Cancellable> cancellable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MjU4Mg==", "bodyText": "The issue is that we need a reference to the cancellable (the holder actually) during construction of the Reader: https://github.com/elastic/elasticsearch/pull/52822/files#diff-913ad694a7d744ee93ae1dac48d67b0eR403\nSo that later on with the setCancellable we can set it to the holder.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385792582", "createdAt": "2020-02-28T16:27:05Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -77,10 +89,27 @@\n \n     private AggregatedDfs aggregatedDfs;\n     private QueryProfiler profiler;\n-    private Runnable checkCancelled;\n+    private Holder<Cancellable> cancellable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjIwMA=="}, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwMjgzMQ==", "bodyText": "Alreanatively I changed so that the ContextIndexSearcher doesn't know of the holder, but then a cast to CancellableDirectoryReader is required to call the setCancellable.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386102831", "createdAt": "2020-03-01T12:12:30Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -77,10 +89,27 @@\n \n     private AggregatedDfs aggregatedDfs;\n     private QueryProfiler profiler;\n-    private Runnable checkCancelled;\n+    private Holder<Cancellable> cancellable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjIwMA=="}, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE5NTc5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzoxMVrOFv4ypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyNzozM1rOFv67Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1Nzg2Mg==", "bodyText": "Can you revert this change ? It should work without this modification so I'd like to keep this for a different pr since the issue is not related to the exitable directory reader.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385757862", "createdAt": "2020-02-28T15:27:11Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "diffHunk": "@@ -611,14 +611,8 @@ public void testCacheAggregation() throws IOException {\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MjgzMA==", "bodyText": "Sure, will do.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385792830", "createdAt": "2020-02-28T16:27:33Z", "author": {"login": "matriv"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "diffHunk": "@@ -611,14 +611,8 @@ public void testCacheAggregation() throws IOException {\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1Nzg2Mg=="}, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE5NzgxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzozN1rOFv4zwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzozN1rOFv4zwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODE0NQ==", "bodyText": "Same here, this shouldn't be needed with the extra constructor.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385758145", "createdAt": "2020-02-28T15:27:37Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java", "diffHunk": "@@ -920,14 +920,8 @@ public void testCacheAggregation() throws IOException {\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE5ODYxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzo0OFrOFv40Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzo0OFrOFv40Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODI2Mw==", "bodyText": "Here too ;)", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385758263", "createdAt": "2020-02-28T15:27:48Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java", "diffHunk": "@@ -22,7 +22,6 @@\n import org.apache.lucene.document.Document;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUxNTA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1NDo0MVrOFv718w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1NDo0MVrOFv718w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNzg1OQ==", "bodyText": "can you check that the argument is not null since we seem to assume it's never null in some places?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385807859", "createdAt": "2020-02-28T16:54:41Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -92,10 +121,14 @@ public void setProfiler(QueryProfiler profiler) {\n \n     /**\n      * Set a {@link Runnable} that will be run on a regular basis while\n-     * collecting documents.\n+     * collecting documents and check for query cancellation or timeout\n      */\n-    public void setCheckCancelled(Runnable checkCancelled) {\n-        this.checkCancelled = checkCancelled;\n+    public void setCancellable(Cancellable cancellable) {\n+        this.cancellable.set(cancellable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUxOTY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1NjoxMlrOFv743Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1NjoxMlrOFv743Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwODYwNQ==", "bodyText": "Let's do the get() call once for all instead of forcing the bulk scorer to do it every time it wants to check whether the request has been cancelled?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    return new CancellableBulkScorer(in, () -> cancellable.get().checkCancelled());\n          \n          \n            \n                                    Runnable checkCancelled = cancellable.get();\n          \n          \n            \n                                    return new CancellableBulkScorer(in, checkCancelled);", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385808605", "createdAt": "2020-02-28T16:56:12Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -244,7 +270,7 @@ public Scorer scorer(LeafReaderContext context) throws IOException {\n                 public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n                     BulkScorer in = weight.bulkScorer(context);\n                     if (in != null) {\n-                        return new CancellableBulkScorer(in, checkCancelled);\n+                        return new CancellableBulkScorer(in, () -> cancellable.get().checkCancelled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUyODgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1ODo0OFrOFv7-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1ODo0OFrOFv7-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDAyMg==", "bodyText": "let's throw an UnsupportedOperationException? (this is only used when asking a DirectoryReader to take into account some new changes in a directory, which should never happen with this impl)", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385810022", "createdAt": "2020-02-28T16:58:48Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {\n+            checkCancelled();\n+        }\n+        void unsetCheckTimeout();\n+    }\n+\n+    public static class CancellableImpl implements Cancellable {\n+\n+        private Runnable checkCancelled;\n+        private Runnable checkTimeout;\n+\n+        private CancellableImpl() {\n+        }\n+\n+        public CancellableImpl(Runnable checkTimeout, Runnable checkCancelled) {\n+            this.checkCancelled = checkCancelled;\n+            this.checkTimeout = checkTimeout;\n+        }\n+\n+        @Override\n+        public boolean isEnabled() {\n+            return checkCancelled != null || checkTimeout != null;\n+        }\n+\n+        @Override\n+        public void checkCancelled() {\n+            if (checkTimeout != null) {\n+                checkTimeout.run();\n+            }\n+            if (checkCancelled != null) {\n+                checkCancelled.run();\n+            }\n+        }\n+\n+        @Override\n+        public void unsetCheckTimeout() {\n+            this.checkTimeout = null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<Cancellable> cancellable) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellable);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUzNzI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowMToyMFrOFv8DoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjo0MzoyMVrOFweKNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMTM2MA==", "bodyText": "If we want to reduce the overhead to a minimum, we could make MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK a power of two minus 1 (e.g. (1 << 4) - 1, ie. 15, and use a mask instead of a remainder: (calls++ & MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK) == 0.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r385811360", "createdAt": "2020-02-28T17:01:20Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {\n+            checkCancelled();\n+        }\n+        void unsetCheckTimeout();\n+    }\n+\n+    public static class CancellableImpl implements Cancellable {\n+\n+        private Runnable checkCancelled;\n+        private Runnable checkTimeout;\n+\n+        private CancellableImpl() {\n+        }\n+\n+        public CancellableImpl(Runnable checkTimeout, Runnable checkCancelled) {\n+            this.checkCancelled = checkCancelled;\n+            this.checkTimeout = checkTimeout;\n+        }\n+\n+        @Override\n+        public boolean isEnabled() {\n+            return checkCancelled != null || checkTimeout != null;\n+        }\n+\n+        @Override\n+        public void checkCancelled() {\n+            if (checkTimeout != null) {\n+                checkTimeout.run();\n+            }\n+            if (checkCancelled != null) {\n+                checkCancelled.run();\n+            }\n+        }\n+\n+        @Override\n+        public void unsetCheckTimeout() {\n+            this.checkTimeout = null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<Cancellable> cancellable) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellable);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a {@link FilterLeafReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableLeafReader extends FilterLeafReader {\n+\n+        private final Holder<Cancellable> cancellable;\n+\n+        private CancellableLeafReader(LeafReader leafReader, Holder<Cancellable> cancellable)  {\n+            super(leafReader);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public PointValues getPointValues(String field) throws IOException {\n+            final PointValues pointValues = in.getPointValues(field);\n+            if (pointValues == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled()) ? new ExitablePointValues(pointValues, cancellable.get()) : pointValues;\n+        }\n+\n+        @Override\n+        public Terms terms(String field) throws IOException {\n+            Terms terms = in.terms(field);\n+            if (terms == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled() && terms instanceof CompletionTerms == false) ?\n+                    new ExitableTerms(terms, cancellable.get()) : terms;\n+        }\n+\n+        @Override\n+        public CacheHelper getCoreCacheHelper() {\n+            return in.getCoreCacheHelper();\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Helper class to be used as an immutable reference so that the underlying\n+     * {@link Cancellable} passed trough the hierarchy to the {@link Terms} and {@link PointValues}\n+     * during construction can be set later with {@link ContextIndexSearcher#setCancellable}\n+     */\n+    private static class Holder<T> {\n+\n+        private T in;\n+\n+        private Holder(T in) {\n+            this.in = in;\n+        }\n+\n+        private void set(T in) {\n+            this.in = in;\n+        }\n+\n+        private T get() {\n+            return in;\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTerms} that check for query cancellation or timeout.\n+     */\n+    private static class ExitableTerms extends FilterTerms {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTerms(Terms terms, Cancellable cancellable) {\n+            super(terms);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n+            return new ExitableTermsEnum(in.intersect(compiled, startTerm), cancellable);\n+        }\n+\n+        @Override\n+        public TermsEnum iterator() throws IOException {\n+            return new ExitableTermsEnum(in.iterator(), cancellable);\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTermsEnum} that is used by {@link ExitableTerms} for\n+     * implementing an exitable enumeration of terms.\n+     */\n+    private static class ExitableTermsEnum extends FilterTermsEnum {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTermsEnum(TermsEnum termsEnum, Cancellable cancellable) {\n+            super(termsEnum);\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public BytesRef next() throws IOException {\n+            // Before every iteration, check if the iteration should exit\n+            this.cancellable.checkDirReaderCancelled();\n+            return in.next();\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link PointValues} that checks for query cancellation or timeout.\n+     */\n+    private static class ExitablePointValues extends PointValues {\n+\n+        private final PointValues in;\n+        private final Cancellable cancellable;\n+\n+        private ExitablePointValues(PointValues in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public void intersect(IntersectVisitor visitor) throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            in.intersect(new ExitableIntersectVisitor(visitor, cancellable));\n+        }\n+\n+        @Override\n+        public long estimatePointCount(IntersectVisitor visitor) {\n+            cancellable.checkDirReaderCancelled();\n+            return in.estimatePointCount(visitor);\n+        }\n+\n+        @Override\n+        public byte[] getMinPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMinPackedValue();\n+        }\n+\n+        @Override\n+        public byte[] getMaxPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMaxPackedValue();\n+        }\n+\n+        @Override\n+        public int getNumDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumDimensions();\n+        }\n+\n+        @Override\n+        public int getNumIndexDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumIndexDimensions();\n+        }\n+\n+        @Override\n+        public int getBytesPerDimension() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getBytesPerDimension();\n+        }\n+\n+        @Override\n+        public long size() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.size();\n+        }\n+\n+        @Override\n+        public int getDocCount() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getDocCount();\n+        }\n+    }\n+\n+    private static class ExitableIntersectVisitor implements PointValues.IntersectVisitor {\n+\n+        private static final int MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK = 10;\n+\n+        private final PointValues.IntersectVisitor in;\n+        private final Cancellable cancellable;\n+        private int calls;\n+\n+        private ExitableIntersectVisitor(PointValues.IntersectVisitor in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+        }\n+\n+        private void checkAndThrowWithSampling() {\n+            if (calls++ % MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 409}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMTkyNg==", "bodyText": "Could you please explain why power of two - 1 is better?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386021926", "createdAt": "2020-02-29T11:30:27Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {\n+            checkCancelled();\n+        }\n+        void unsetCheckTimeout();\n+    }\n+\n+    public static class CancellableImpl implements Cancellable {\n+\n+        private Runnable checkCancelled;\n+        private Runnable checkTimeout;\n+\n+        private CancellableImpl() {\n+        }\n+\n+        public CancellableImpl(Runnable checkTimeout, Runnable checkCancelled) {\n+            this.checkCancelled = checkCancelled;\n+            this.checkTimeout = checkTimeout;\n+        }\n+\n+        @Override\n+        public boolean isEnabled() {\n+            return checkCancelled != null || checkTimeout != null;\n+        }\n+\n+        @Override\n+        public void checkCancelled() {\n+            if (checkTimeout != null) {\n+                checkTimeout.run();\n+            }\n+            if (checkCancelled != null) {\n+                checkCancelled.run();\n+            }\n+        }\n+\n+        @Override\n+        public void unsetCheckTimeout() {\n+            this.checkTimeout = null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<Cancellable> cancellable) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellable);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a {@link FilterLeafReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableLeafReader extends FilterLeafReader {\n+\n+        private final Holder<Cancellable> cancellable;\n+\n+        private CancellableLeafReader(LeafReader leafReader, Holder<Cancellable> cancellable)  {\n+            super(leafReader);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public PointValues getPointValues(String field) throws IOException {\n+            final PointValues pointValues = in.getPointValues(field);\n+            if (pointValues == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled()) ? new ExitablePointValues(pointValues, cancellable.get()) : pointValues;\n+        }\n+\n+        @Override\n+        public Terms terms(String field) throws IOException {\n+            Terms terms = in.terms(field);\n+            if (terms == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled() && terms instanceof CompletionTerms == false) ?\n+                    new ExitableTerms(terms, cancellable.get()) : terms;\n+        }\n+\n+        @Override\n+        public CacheHelper getCoreCacheHelper() {\n+            return in.getCoreCacheHelper();\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Helper class to be used as an immutable reference so that the underlying\n+     * {@link Cancellable} passed trough the hierarchy to the {@link Terms} and {@link PointValues}\n+     * during construction can be set later with {@link ContextIndexSearcher#setCancellable}\n+     */\n+    private static class Holder<T> {\n+\n+        private T in;\n+\n+        private Holder(T in) {\n+            this.in = in;\n+        }\n+\n+        private void set(T in) {\n+            this.in = in;\n+        }\n+\n+        private T get() {\n+            return in;\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTerms} that check for query cancellation or timeout.\n+     */\n+    private static class ExitableTerms extends FilterTerms {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTerms(Terms terms, Cancellable cancellable) {\n+            super(terms);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n+            return new ExitableTermsEnum(in.intersect(compiled, startTerm), cancellable);\n+        }\n+\n+        @Override\n+        public TermsEnum iterator() throws IOException {\n+            return new ExitableTermsEnum(in.iterator(), cancellable);\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTermsEnum} that is used by {@link ExitableTerms} for\n+     * implementing an exitable enumeration of terms.\n+     */\n+    private static class ExitableTermsEnum extends FilterTermsEnum {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTermsEnum(TermsEnum termsEnum, Cancellable cancellable) {\n+            super(termsEnum);\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public BytesRef next() throws IOException {\n+            // Before every iteration, check if the iteration should exit\n+            this.cancellable.checkDirReaderCancelled();\n+            return in.next();\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link PointValues} that checks for query cancellation or timeout.\n+     */\n+    private static class ExitablePointValues extends PointValues {\n+\n+        private final PointValues in;\n+        private final Cancellable cancellable;\n+\n+        private ExitablePointValues(PointValues in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public void intersect(IntersectVisitor visitor) throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            in.intersect(new ExitableIntersectVisitor(visitor, cancellable));\n+        }\n+\n+        @Override\n+        public long estimatePointCount(IntersectVisitor visitor) {\n+            cancellable.checkDirReaderCancelled();\n+            return in.estimatePointCount(visitor);\n+        }\n+\n+        @Override\n+        public byte[] getMinPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMinPackedValue();\n+        }\n+\n+        @Override\n+        public byte[] getMaxPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMaxPackedValue();\n+        }\n+\n+        @Override\n+        public int getNumDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumDimensions();\n+        }\n+\n+        @Override\n+        public int getNumIndexDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumIndexDimensions();\n+        }\n+\n+        @Override\n+        public int getBytesPerDimension() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getBytesPerDimension();\n+        }\n+\n+        @Override\n+        public long size() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.size();\n+        }\n+\n+        @Override\n+        public int getDocCount() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getDocCount();\n+        }\n+    }\n+\n+    private static class ExitableIntersectVisitor implements PointValues.IntersectVisitor {\n+\n+        private static final int MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK = 10;\n+\n+        private final PointValues.IntersectVisitor in;\n+        private final Cancellable cancellable;\n+        private int calls;\n+\n+        private ExitableIntersectVisitor(PointValues.IntersectVisitor in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+        }\n+\n+        private void checkAndThrowWithSampling() {\n+            if (calls++ % MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMTM2MA=="}, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 409}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwODQ0MA==", "bodyText": "Masks are typically cheaper than remainders. And a%b is the same as a & (b-1) when a is positive and b is a power of two.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386308440", "createdAt": "2020-03-02T10:24:36Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {\n+            checkCancelled();\n+        }\n+        void unsetCheckTimeout();\n+    }\n+\n+    public static class CancellableImpl implements Cancellable {\n+\n+        private Runnable checkCancelled;\n+        private Runnable checkTimeout;\n+\n+        private CancellableImpl() {\n+        }\n+\n+        public CancellableImpl(Runnable checkTimeout, Runnable checkCancelled) {\n+            this.checkCancelled = checkCancelled;\n+            this.checkTimeout = checkTimeout;\n+        }\n+\n+        @Override\n+        public boolean isEnabled() {\n+            return checkCancelled != null || checkTimeout != null;\n+        }\n+\n+        @Override\n+        public void checkCancelled() {\n+            if (checkTimeout != null) {\n+                checkTimeout.run();\n+            }\n+            if (checkCancelled != null) {\n+                checkCancelled.run();\n+            }\n+        }\n+\n+        @Override\n+        public void unsetCheckTimeout() {\n+            this.checkTimeout = null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<Cancellable> cancellable) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellable);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a {@link FilterLeafReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableLeafReader extends FilterLeafReader {\n+\n+        private final Holder<Cancellable> cancellable;\n+\n+        private CancellableLeafReader(LeafReader leafReader, Holder<Cancellable> cancellable)  {\n+            super(leafReader);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public PointValues getPointValues(String field) throws IOException {\n+            final PointValues pointValues = in.getPointValues(field);\n+            if (pointValues == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled()) ? new ExitablePointValues(pointValues, cancellable.get()) : pointValues;\n+        }\n+\n+        @Override\n+        public Terms terms(String field) throws IOException {\n+            Terms terms = in.terms(field);\n+            if (terms == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled() && terms instanceof CompletionTerms == false) ?\n+                    new ExitableTerms(terms, cancellable.get()) : terms;\n+        }\n+\n+        @Override\n+        public CacheHelper getCoreCacheHelper() {\n+            return in.getCoreCacheHelper();\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Helper class to be used as an immutable reference so that the underlying\n+     * {@link Cancellable} passed trough the hierarchy to the {@link Terms} and {@link PointValues}\n+     * during construction can be set later with {@link ContextIndexSearcher#setCancellable}\n+     */\n+    private static class Holder<T> {\n+\n+        private T in;\n+\n+        private Holder(T in) {\n+            this.in = in;\n+        }\n+\n+        private void set(T in) {\n+            this.in = in;\n+        }\n+\n+        private T get() {\n+            return in;\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTerms} that check for query cancellation or timeout.\n+     */\n+    private static class ExitableTerms extends FilterTerms {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTerms(Terms terms, Cancellable cancellable) {\n+            super(terms);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n+            return new ExitableTermsEnum(in.intersect(compiled, startTerm), cancellable);\n+        }\n+\n+        @Override\n+        public TermsEnum iterator() throws IOException {\n+            return new ExitableTermsEnum(in.iterator(), cancellable);\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTermsEnum} that is used by {@link ExitableTerms} for\n+     * implementing an exitable enumeration of terms.\n+     */\n+    private static class ExitableTermsEnum extends FilterTermsEnum {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTermsEnum(TermsEnum termsEnum, Cancellable cancellable) {\n+            super(termsEnum);\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public BytesRef next() throws IOException {\n+            // Before every iteration, check if the iteration should exit\n+            this.cancellable.checkDirReaderCancelled();\n+            return in.next();\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link PointValues} that checks for query cancellation or timeout.\n+     */\n+    private static class ExitablePointValues extends PointValues {\n+\n+        private final PointValues in;\n+        private final Cancellable cancellable;\n+\n+        private ExitablePointValues(PointValues in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public void intersect(IntersectVisitor visitor) throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            in.intersect(new ExitableIntersectVisitor(visitor, cancellable));\n+        }\n+\n+        @Override\n+        public long estimatePointCount(IntersectVisitor visitor) {\n+            cancellable.checkDirReaderCancelled();\n+            return in.estimatePointCount(visitor);\n+        }\n+\n+        @Override\n+        public byte[] getMinPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMinPackedValue();\n+        }\n+\n+        @Override\n+        public byte[] getMaxPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMaxPackedValue();\n+        }\n+\n+        @Override\n+        public int getNumDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumDimensions();\n+        }\n+\n+        @Override\n+        public int getNumIndexDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumIndexDimensions();\n+        }\n+\n+        @Override\n+        public int getBytesPerDimension() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getBytesPerDimension();\n+        }\n+\n+        @Override\n+        public long size() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.size();\n+        }\n+\n+        @Override\n+        public int getDocCount() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getDocCount();\n+        }\n+    }\n+\n+    private static class ExitableIntersectVisitor implements PointValues.IntersectVisitor {\n+\n+        private static final int MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK = 10;\n+\n+        private final PointValues.IntersectVisitor in;\n+        private final Cancellable cancellable;\n+        private int calls;\n+\n+        private ExitableIntersectVisitor(PointValues.IntersectVisitor in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+        }\n+\n+        private void checkAndThrowWithSampling() {\n+            if (calls++ % MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMTM2MA=="}, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 409}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MDEwMQ==", "bodyText": "Thank you!", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386370101", "createdAt": "2020-03-02T12:43:21Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +346,298 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface Cancellable {\n+\n+        boolean isEnabled();\n+        void checkCancelled();\n+        default void checkDirReaderCancelled() {\n+            checkCancelled();\n+        }\n+        void unsetCheckTimeout();\n+    }\n+\n+    public static class CancellableImpl implements Cancellable {\n+\n+        private Runnable checkCancelled;\n+        private Runnable checkTimeout;\n+\n+        private CancellableImpl() {\n+        }\n+\n+        public CancellableImpl(Runnable checkTimeout, Runnable checkCancelled) {\n+            this.checkCancelled = checkCancelled;\n+            this.checkTimeout = checkTimeout;\n+        }\n+\n+        @Override\n+        public boolean isEnabled() {\n+            return checkCancelled != null || checkTimeout != null;\n+        }\n+\n+        @Override\n+        public void checkCancelled() {\n+            if (checkTimeout != null) {\n+                checkTimeout.run();\n+            }\n+            if (checkCancelled != null) {\n+                checkCancelled.run();\n+            }\n+        }\n+\n+        @Override\n+        public void unsetCheckTimeout() {\n+            this.checkTimeout = null;\n+        }\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<Cancellable> cancellable) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellable);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            return in;\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a {@link FilterLeafReader} with a {@link Cancellable}.\n+     */\n+    private static class CancellableLeafReader extends FilterLeafReader {\n+\n+        private final Holder<Cancellable> cancellable;\n+\n+        private CancellableLeafReader(LeafReader leafReader, Holder<Cancellable> cancellable)  {\n+            super(leafReader);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public PointValues getPointValues(String field) throws IOException {\n+            final PointValues pointValues = in.getPointValues(field);\n+            if (pointValues == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled()) ? new ExitablePointValues(pointValues, cancellable.get()) : pointValues;\n+        }\n+\n+        @Override\n+        public Terms terms(String field) throws IOException {\n+            Terms terms = in.terms(field);\n+            if (terms == null) {\n+                return null;\n+            }\n+            return (cancellable.get().isEnabled() && terms instanceof CompletionTerms == false) ?\n+                    new ExitableTerms(terms, cancellable.get()) : terms;\n+        }\n+\n+        @Override\n+        public CacheHelper getCoreCacheHelper() {\n+            return in.getCoreCacheHelper();\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Helper class to be used as an immutable reference so that the underlying\n+     * {@link Cancellable} passed trough the hierarchy to the {@link Terms} and {@link PointValues}\n+     * during construction can be set later with {@link ContextIndexSearcher#setCancellable}\n+     */\n+    private static class Holder<T> {\n+\n+        private T in;\n+\n+        private Holder(T in) {\n+            this.in = in;\n+        }\n+\n+        private void set(T in) {\n+            this.in = in;\n+        }\n+\n+        private T get() {\n+            return in;\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTerms} that check for query cancellation or timeout.\n+     */\n+    private static class ExitableTerms extends FilterTerms {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTerms(Terms terms, Cancellable cancellable) {\n+            super(terms);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n+            return new ExitableTermsEnum(in.intersect(compiled, startTerm), cancellable);\n+        }\n+\n+        @Override\n+        public TermsEnum iterator() throws IOException {\n+            return new ExitableTermsEnum(in.iterator(), cancellable);\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTermsEnum} that is used by {@link ExitableTerms} for\n+     * implementing an exitable enumeration of terms.\n+     */\n+    private static class ExitableTermsEnum extends FilterTermsEnum {\n+\n+        private final Cancellable cancellable;\n+\n+        private ExitableTermsEnum(TermsEnum termsEnum, Cancellable cancellable) {\n+            super(termsEnum);\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public BytesRef next() throws IOException {\n+            // Before every iteration, check if the iteration should exit\n+            this.cancellable.checkDirReaderCancelled();\n+            return in.next();\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link PointValues} that checks for query cancellation or timeout.\n+     */\n+    private static class ExitablePointValues extends PointValues {\n+\n+        private final PointValues in;\n+        private final Cancellable cancellable;\n+\n+        private ExitablePointValues(PointValues in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+            this.cancellable.checkDirReaderCancelled();\n+        }\n+\n+        @Override\n+        public void intersect(IntersectVisitor visitor) throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            in.intersect(new ExitableIntersectVisitor(visitor, cancellable));\n+        }\n+\n+        @Override\n+        public long estimatePointCount(IntersectVisitor visitor) {\n+            cancellable.checkDirReaderCancelled();\n+            return in.estimatePointCount(visitor);\n+        }\n+\n+        @Override\n+        public byte[] getMinPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMinPackedValue();\n+        }\n+\n+        @Override\n+        public byte[] getMaxPackedValue() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getMaxPackedValue();\n+        }\n+\n+        @Override\n+        public int getNumDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumDimensions();\n+        }\n+\n+        @Override\n+        public int getNumIndexDimensions() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getNumIndexDimensions();\n+        }\n+\n+        @Override\n+        public int getBytesPerDimension() throws IOException {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getBytesPerDimension();\n+        }\n+\n+        @Override\n+        public long size() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.size();\n+        }\n+\n+        @Override\n+        public int getDocCount() {\n+            cancellable.checkDirReaderCancelled();\n+            return in.getDocCount();\n+        }\n+    }\n+\n+    private static class ExitableIntersectVisitor implements PointValues.IntersectVisitor {\n+\n+        private static final int MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK = 10;\n+\n+        private final PointValues.IntersectVisitor in;\n+        private final Cancellable cancellable;\n+        private int calls;\n+\n+        private ExitableIntersectVisitor(PointValues.IntersectVisitor in, Cancellable cancellable) {\n+            this.in = in;\n+            this.cancellable = cancellable;\n+        }\n+\n+        private void checkAndThrowWithSampling() {\n+            if (calls++ % MAX_CALLS_BEFORE_QUERY_TIMEOUT_CHECK == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMTM2MA=="}, "originalCommit": {"oid": "9ebd847614c3c6c4f12ec2df7682c18fed6d67ff"}, "originalPosition": 409}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzE3NDcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMToyODowNFrOFxCD8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMToyODowNFrOFxCD8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1ODMyMg==", "bodyText": "Let's use a method ref instead in order to avoid creating an anonymous class\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    return new CancellableBulkScorer(in, () -> checkCancelled());\n          \n          \n            \n                                    return new CancellableBulkScorer(in, cancellable::checkCancelled);", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386958322", "createdAt": "2020-03-03T11:28:04Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -244,7 +269,7 @@ public Scorer scorer(LeafReaderContext context) throws IOException {\n                 public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n                     BulkScorer in = weight.bulkScorer(context);\n                     if (in != null) {\n-                        return new CancellableBulkScorer(in, checkCancelled);\n+                        return new CancellableBulkScorer(in, () -> checkCancelled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzE3NjQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMToyODo0MFrOFxCE_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMToyODo0MFrOFxCE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1ODU4OA==", "bodyText": "can you avoid doing a null check every time we check whether the request should be cancelled, like the code did before?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386958588", "createdAt": "2020-03-03T11:28:40Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -207,8 +233,7 @@ private void searchLeaf(LeafReaderContext ctx, Weight weight, Collector collecto\n             Scorer scorer = weight.scorer(ctx);\n             if (scorer != null) {\n                 try {\n-                    intersectScorerAndBitSet(scorer, liveDocsBitSet, leafCollector,\n-                        checkCancelled == null ? () -> { } : checkCancelled);\n+                    intersectScorerAndBitSet(scorer, liveDocsBitSet, leafCollector, () -> checkCancelled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzE4MTkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTozMDozMlrOFxCIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjoxNDo1MlrOFxYkSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1OTQ5MA==", "bodyText": "this constructor seems to always be called with a Holder around a null, so let's remove it from the ctor arguments and just set cancellableHolder = new Holder<>(null);?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386959490", "createdAt": "2020-03-03T11:30:32Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +345,266 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private final Holder<QueryCancellable> cancellableHolder;\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<QueryCancellable> cancellableHolder) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3OTE4MQ==", "bodyText": "The issue is that we need to pass it in the ctor because we need to use it in the constructor: https://github.com/elastic/elasticsearch/pull/52822/files/9695114f3028f98ae59dc5ff7481aab3251bce9f#diff-913ad694a7d744ee93ae1dac48d67b0eR368\nso that it's passed down the object tree properly.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386979181", "createdAt": "2020-03-03T12:12:47Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +345,266 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private final Holder<QueryCancellable> cancellableHolder;\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<QueryCancellable> cancellableHolder) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1OTQ5MA=="}, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MDQ3NA==", "bodyText": "Ah, I see. Nevermind then.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386990474", "createdAt": "2020-03-03T12:36:02Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +345,266 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private final Holder<QueryCancellable> cancellableHolder;\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<QueryCancellable> cancellableHolder) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1OTQ5MA=="}, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNzA0OA==", "bodyText": "I also wonder if we can replace the Holder with a mutable QueryTimeout implementation:\nSomething like:\n   private static class MutableQueryTimeout implements QueryTimeout {\n        private final Set<Runnable> runnables = new HashSet<>();\n\n        Object add(Runnable action) {\n            if (runnables.add(action) == false) {\n                throw new IllegalArgumentException(\"already added\");\n            }\n            return action;\n        }\n\n        boolean remove(Runnable action) {\n            return runnables.remove(action);\n        }\n\n        @Override\n        public boolean shouldExit() {\n            for (Runnable timeout : runnables) {\n                timeout.run();\n            }\n            return false;\n        }\n\n        @Override\n        public boolean isTimeoutEnabled() {\n            return runnables.size() > 0;\n        }\n    }\n\nThis way you can expose a simple QueryTimeout in the wrapped reader and keep the logic simple there ?\nThe ContextIndexSearcher could then expose the addQueryTimeout, removeQueryTimeout directly for the QueryPhase modification.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387327048", "createdAt": "2020-03-03T22:14:52Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +345,266 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private final Holder<QueryCancellable> cancellableHolder;\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<QueryCancellable> cancellableHolder) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1OTQ5MA=="}, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzE5MDIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTozMjo0NFrOFxCNLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjozNjo1MlrOFxEDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDY4Nw==", "bodyText": "can you add a comment about why we're not wrapping CompletionTerms? I also wonder that this instanceof logic might be fragile as terms may be wrapped e.g. if document-level security is used?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386960687", "createdAt": "2020-03-03T11:32:44Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +345,266 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private final Holder<QueryCancellable> cancellableHolder;\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<QueryCancellable> cancellableHolder) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellableHolder);\n+                }\n+            });\n+            this.cancellableHolder = cancellableHolder;\n+        }\n+\n+        private void setCancellable(QueryCancellable cancellable) {\n+            this.cancellableHolder.set(cancellable);\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            throw new UnsupportedOperationException(\"doWrapDirectoryReader() should never be invoked\");\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a {@link FilterLeafReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableLeafReader extends FilterLeafReader {\n+\n+        private final Holder<QueryCancellable> cancellable;\n+\n+        private CancellableLeafReader(LeafReader leafReader, Holder<QueryCancellable> cancellable)  {\n+            super(leafReader);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public PointValues getPointValues(String field) throws IOException {\n+            final PointValues pointValues = in.getPointValues(field);\n+            if (pointValues == null) {\n+                return null;\n+            }\n+            return (cancellable.get() != null) ? new ExitablePointValues(pointValues, cancellable.get()) : pointValues;\n+        }\n+\n+        @Override\n+        public Terms terms(String field) throws IOException {\n+            Terms terms = in.terms(field);\n+            if (terms == null) {\n+                return null;\n+            }\n+            return (cancellable.get() != null && terms instanceof CompletionTerms == false) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MDkwNA==", "bodyText": "Added a comment.\n\nWhat other wrapping classes could we encouter?\nShould we have another ExitableTerms class that extends CompletionTerms and also wrap those with cancellation?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386990904", "createdAt": "2020-03-03T12:36:52Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +345,266 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private final Holder<QueryCancellable> cancellableHolder;\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<QueryCancellable> cancellableHolder) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellableHolder);\n+                }\n+            });\n+            this.cancellableHolder = cancellableHolder;\n+        }\n+\n+        private void setCancellable(QueryCancellable cancellable) {\n+            this.cancellableHolder.set(cancellable);\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            throw new UnsupportedOperationException(\"doWrapDirectoryReader() should never be invoked\");\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a {@link FilterLeafReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableLeafReader extends FilterLeafReader {\n+\n+        private final Holder<QueryCancellable> cancellable;\n+\n+        private CancellableLeafReader(LeafReader leafReader, Holder<QueryCancellable> cancellable)  {\n+            super(leafReader);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public PointValues getPointValues(String field) throws IOException {\n+            final PointValues pointValues = in.getPointValues(field);\n+            if (pointValues == null) {\n+                return null;\n+            }\n+            return (cancellable.get() != null) ? new ExitablePointValues(pointValues, cancellable.get()) : pointValues;\n+        }\n+\n+        @Override\n+        public Terms terms(String field) throws IOException {\n+            Terms terms = in.terms(field);\n+            if (terms == null) {\n+                return null;\n+            }\n+            return (cancellable.get() != null && terms instanceof CompletionTerms == false) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDY4Nw=="}, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzE5NTI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTozMzo1NlrOFxCP5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTozMzo1NlrOFxCP5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MTM4MA==", "bodyText": "Can we do it on a regular interval (like in ExitableIntersectVisitor) instead of for every term, I worry that this might add noticeable overhead.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r386961380", "createdAt": "2020-03-03T11:33:56Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +345,266 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {\n+\n+        private final Holder<QueryCancellable> cancellableHolder;\n+\n+        private CancellableDirectoryReader(DirectoryReader in, Holder<QueryCancellable> cancellableHolder) throws IOException {\n+            super(in, new SubReaderWrapper() {\n+                @Override\n+                public LeafReader wrap(LeafReader reader) {\n+                    return new CancellableLeafReader(reader, cancellableHolder);\n+                }\n+            });\n+            this.cancellableHolder = cancellableHolder;\n+        }\n+\n+        private void setCancellable(QueryCancellable cancellable) {\n+            this.cancellableHolder.set(cancellable);\n+        }\n+\n+        @Override\n+        protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) {\n+            throw new UnsupportedOperationException(\"doWrapDirectoryReader() should never be invoked\");\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Wraps a {@link FilterLeafReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableLeafReader extends FilterLeafReader {\n+\n+        private final Holder<QueryCancellable> cancellable;\n+\n+        private CancellableLeafReader(LeafReader leafReader, Holder<QueryCancellable> cancellable)  {\n+            super(leafReader);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public PointValues getPointValues(String field) throws IOException {\n+            final PointValues pointValues = in.getPointValues(field);\n+            if (pointValues == null) {\n+                return null;\n+            }\n+            return (cancellable.get() != null) ? new ExitablePointValues(pointValues, cancellable.get()) : pointValues;\n+        }\n+\n+        @Override\n+        public Terms terms(String field) throws IOException {\n+            Terms terms = in.terms(field);\n+            if (terms == null) {\n+                return null;\n+            }\n+            return (cancellable.get() != null && terms instanceof CompletionTerms == false) ?\n+                    new ExitableTerms(terms, cancellable.get()) : terms;\n+        }\n+\n+        @Override\n+        public CacheHelper getCoreCacheHelper() {\n+            return in.getCoreCacheHelper();\n+        }\n+\n+        @Override\n+        public CacheHelper getReaderCacheHelper() {\n+            return in.getReaderCacheHelper();\n+        }\n+    }\n+\n+    /**\n+     * Helper class to be used as an immutable reference so that the underlying\n+     * {@link QueryCancellable} passed trough the hierarchy to the {@link Terms} and {@link PointValues}\n+     * during construction can be set later with {@link ContextIndexSearcher#setCancellable}\n+     */\n+    private static class Holder<T> {\n+\n+        private T in;\n+\n+        private Holder(T in) {\n+            this.in = in;\n+        }\n+\n+        private void set(T in) {\n+            this.in = in;\n+        }\n+\n+        private T get() {\n+            return in;\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTerms} that check for query cancellation or timeout.\n+     */\n+    static class ExitableTerms extends FilterTerms {\n+\n+        private final QueryCancellable cancellable;\n+\n+        private ExitableTerms(Terms terms, QueryCancellable cancellable) {\n+            super(terms);\n+            this.cancellable = cancellable;\n+        }\n+\n+        @Override\n+        public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n+            return new ExitableTermsEnum(in.intersect(compiled, startTerm), cancellable);\n+        }\n+\n+        @Override\n+        public TermsEnum iterator() throws IOException {\n+            return new ExitableTermsEnum(in.iterator(), cancellable);\n+        }\n+    }\n+\n+    /**\n+     * Wrapper class for {@link FilterTermsEnum} that is used by {@link ExitableTerms} for\n+     * implementing an exitable enumeration of terms.\n+     */\n+    private static class ExitableTermsEnum extends FilterTermsEnum {\n+\n+        private final QueryCancellable cancellable;\n+\n+        private ExitableTermsEnum(TermsEnum termsEnum, QueryCancellable cancellable) {\n+            super(termsEnum);\n+            this.cancellable = cancellable;\n+            this.cancellable.checkCancelled();\n+        }\n+\n+        @Override\n+        public BytesRef next() throws IOException {\n+            // Before every iteration, check if the iteration should exit\n+            this.cancellable.checkCancelled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9695114f3028f98ae59dc5ff7481aab3251bce9f"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODU1MTUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoxNzo0NFrOFxPHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoxNzo0NFrOFxPHNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MjE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        this.cancellable == null ? () -> {} : this::checkCancelled);\n          \n          \n            \n                                        this.cancellable == null ? () -> {} : cancellable::checkCancelled);", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387172149", "createdAt": "2020-03-03T17:17:44Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -208,7 +235,7 @@ private void searchLeaf(LeafReaderContext ctx, Weight weight, Collector collecto\n             if (scorer != null) {\n                 try {\n                     intersectScorerAndBitSet(scorer, liveDocsBitSet, leafCollector,\n-                        checkCancelled == null ? () -> { } : checkCancelled);\n+                            this.cancellable == null ? () -> {} : this::checkCancelled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6243ceddaf39089ce8fef6c14da6d22608099f3f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODU4MTc1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/SearchCancellationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoyNjoxNFrOFxPaNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoyNjoxNFrOFxPaNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NzAxMw==", "bodyText": "I tend to prefer fully-qualified calls to TestUtil#nextInt instead of adding a static import, given that this method name is quite generic.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387177013", "createdAt": "2020-03-03T17:26:14Z", "author": {"login": "jpountz"}, "path": "server/src/test/java/org/elasticsearch/search/SearchCancellationTests.java", "diffHunk": "@@ -53,17 +57,19 @@ public static void setup() throws IOException {\n         // we need at least 2 segments - so no merges should be allowed\n         w.w.getConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n         w.setDoRandomForceMerge(false);\n-        indexRandomDocuments(w, TestUtil.nextInt(random(), 2, 20));\n+        int numDocs = nextInt(random(), 2, 20);\n+        indexRandomDocuments(w, numDocs, 0);\n         w.flush();\n-        indexRandomDocuments(w, TestUtil.nextInt(random(), 1, 20));\n+        indexRandomDocuments(w, nextInt(random(), 1, 20), numDocs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6243ceddaf39089ce8fef6c14da6d22608099f3f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODU4OTgwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/SearchCancellationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoyODozM1rOFxPfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1ODo1N1rOFxwnaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3ODMxMw==", "bodyText": "let's also test that it can interrupt iteration over the terms/points?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387178313", "createdAt": "2020-03-03T17:28:33Z", "author": {"login": "jpountz"}, "path": "server/src/test/java/org/elasticsearch/search/SearchCancellationTests.java", "diffHunk": "@@ -92,4 +98,22 @@ public void testCancellableCollector() throws IOException {\n             () -> searcher.search(new MatchAllDocsQuery(), collector));\n     }\n \n+    public void testCancellableDirectoryReader() throws IOException {\n+        AtomicBoolean cancelled = new AtomicBoolean();\n+        ContextIndexSearcher searcher = new ContextIndexSearcher(reader,\n+                IndexSearcher.getDefaultSimilarity(), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy());\n+        searcher.setCancellable(() -> {\n+            if (cancelled.get()) {\n+                throw new TaskCancelledException(\"cancelled\");\n+            }\n+        });\n+        searcher.getIndexReader().leaves().get(0).reader().terms(STRING_FIELD_NAME).iterator();\n+        searcher.getIndexReader().leaves().get(0).reader().getPointValues(POINT_FIELD_NAME).getDocCount();\n+\n+        cancelled.set(true);\n+        expectThrows(TaskCancelledException.class,\n+                () -> searcher.getIndexReader().leaves().get(0).reader().terms(STRING_FIELD_NAME).iterator());\n+        expectThrows(TaskCancelledException.class,\n+                () -> searcher.getIndexReader().leaves().get(0).reader().getPointValues(POINT_FIELD_NAME).getDocCount());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6243ceddaf39089ce8fef6c14da6d22608099f3f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMTA2Nw==", "bodyText": "Can you also test the removal of the runnable ?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387721067", "createdAt": "2020-03-04T14:58:57Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/SearchCancellationTests.java", "diffHunk": "@@ -92,4 +98,22 @@ public void testCancellableCollector() throws IOException {\n             () -> searcher.search(new MatchAllDocsQuery(), collector));\n     }\n \n+    public void testCancellableDirectoryReader() throws IOException {\n+        AtomicBoolean cancelled = new AtomicBoolean();\n+        ContextIndexSearcher searcher = new ContextIndexSearcher(reader,\n+                IndexSearcher.getDefaultSimilarity(), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy());\n+        searcher.setCancellable(() -> {\n+            if (cancelled.get()) {\n+                throw new TaskCancelledException(\"cancelled\");\n+            }\n+        });\n+        searcher.getIndexReader().leaves().get(0).reader().terms(STRING_FIELD_NAME).iterator();\n+        searcher.getIndexReader().leaves().get(0).reader().getPointValues(POINT_FIELD_NAME).getDocCount();\n+\n+        cancelled.set(true);\n+        expectThrows(TaskCancelledException.class,\n+                () -> searcher.getIndexReader().leaves().get(0).reader().terms(STRING_FIELD_NAME).iterator());\n+        expectThrows(TaskCancelledException.class,\n+                () -> searcher.getIndexReader().leaves().get(0).reader().getPointValues(POINT_FIELD_NAME).getDocCount());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3ODMxMw=="}, "originalCommit": {"oid": "6243ceddaf39089ce8fef6c14da6d22608099f3f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQ5NzM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjowNzo0MFrOFxYXUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDowMDoyMFrOFxbALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzcyOQ==", "bodyText": "nit: This class deserves its own file. Is there a specific reason to rename from ExitableDirectoryReader ?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387323729", "createdAt": "2020-03-03T22:07:40Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +347,278 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19bdbdf07825ecdb51d3a8e90e30a84ae5f224a4"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMzNzczNg==", "bodyText": "Initially I didn't want to mix it up with Lucene's ExitableDirectoryReader, but I can rename. Only this class or also include the underlying wrapper classes?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387337736", "createdAt": "2020-03-03T22:39:03Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +347,278 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzcyOQ=="}, "originalCommit": {"oid": "19bdbdf07825ecdb51d3a8e90e30a84ae5f224a4"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMzODU2MA==", "bodyText": "Also if we move it to its own file then it needs to know of the MutableQueryTimeout.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387338560", "createdAt": "2020-03-03T22:40:56Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +347,278 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzcyOQ=="}, "originalCommit": {"oid": "19bdbdf07825ecdb51d3a8e90e30a84ae5f224a4"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2Njk1OA==", "bodyText": "Only this class or also include the underlying wrapper classes?\n\nAll of it, yes.\n\nAlso if we move it to its own file then it needs to know of the MutableQueryTimeout.\n\nWhy that ? The idea is to have a simple interface in the reader and to use the mutable impl only for the searcher. You can create one in the ctr like this:\n public ContextIndexSearcher(IndexReader reader,\n                                Similarity similarity,\n                                QueryCache queryCache,\n                                QueryCachingPolicy queryCachingPolicy) throws IOException {\n        this(reader, similarity, queryCache, queryCachingPolicy, new MutableQueryTimeout());\n    }\n\n    private ContextIndexSearcher(IndexReader reader,\n                                Similarity similarity,\n                                QueryCache queryCache,\n                                QueryCachingPolicy queryCachingPolicy,\n                                MutableQueryTimeout timeout) throws IOException {\n        super(ExitableDirectoryReader.wrap((DirectoryReader) reader, timeout));\n        this.queryTimeout = timeout;\n        setSimilarity(similarity);\n        setQueryCache(queryCache);\n        setQueryCachingPolicy(queryCachingPolicy);\n    }\n\n?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387366958", "createdAt": "2020-03-04T00:00:20Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +347,278 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    /**\n+     * iFace which implements the query timeout / cancellation logic\n+     */\n+    public interface QueryCancellable {\n+\n+        void checkCancelled();\n+    }\n+\n+    /**\n+     * Wraps an {@link IndexReader} with a {@link QueryCancellable}.\n+     */\n+    static class CancellableDirectoryReader extends FilterDirectoryReader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzcyOQ=="}, "originalCommit": {"oid": "19bdbdf07825ecdb51d3a8e90e30a84ae5f224a4"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTUzMjI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjoxOTo0NlrOFxYtZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjoxOTo0NlrOFxYtZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyOTM4Mg==", "bodyText": "See my comment below, I think this could be simplified into:\n            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&\n                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false;\n            final Runnable timeoutRunnable;\n            if (timeoutSet) {\n                final long startTime = searchContext.getRelativeTimeInMillis();\n                final long timeout = searchContext.timeout().millis();\n                final long maxTime = startTime + timeout;\n                timeoutRunnable = searcher.addQueryTimeout(() -> {\n                    final long time = searchContext.getRelativeTimeInMillis();\n                    if (time > maxTime) {\n                        throw new TimeExceededException();\n                    }\n                });\n            } else {\n                timeoutRunnable = null;\n            }\n\n            if (searchContext.lowLevelCancellation()) {\n                SearchShardTask task = searchContext.getTask();\n                searcher.addQueryTimeout(() -> {\n                    if (task.isCancelled()) {\n                        throw new TaskCancelledException(\"cancelled\");\n                    }\n                });\n            }\n            try {\n                ...\n            } finally {\n              if (timeoutRunnable != null) {\n                 searcher.removeQueryTimeout(timeoutRunnable);\n              }\n           }", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387329382", "createdAt": "2020-03-03T22:19:46Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "diffHunk": "@@ -272,20 +273,8 @@ static boolean executeInternal(SearchContext searchContext) throws QueryPhaseExe\n                 cancellationRunnable = null;\n             }\n \n-            final Runnable checkCancelled;\n-            if (timeoutRunnable != null && cancellationRunnable != null) {\n-                checkCancelled = () -> {\n-                    timeoutRunnable.run();\n-                    cancellationRunnable.run();\n-                };\n-            } else if (timeoutRunnable != null) {\n-                checkCancelled = timeoutRunnable;\n-            } else if (cancellationRunnable != null) {\n-                checkCancelled = cancellationRunnable;\n-            } else {\n-                checkCancelled = null;\n-            }\n-            searcher.setCheckCancelled(checkCancelled);\n+            QueryCancellableImpl cancellable = new QueryCancellableImpl(timeoutRunnable, cancellationRunnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19bdbdf07825ecdb51d3a8e90e30a84ae5f224a4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjAzODg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzowNVrOFxwiGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozMTowOVrOFyONXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTcwNg==", "bodyText": "nit: the naming of the add is inconsistent with the remove. I wonder how to expose the name here, [add/remove]CheckExitReader ?\nIn any case the javadocs should be adapted to mention the fact that these checks run when we access the reader so not only when collecting document. This makes me think that we may want to wrap the task cancellation check before we rewrite the Lucene query for instance. I am fine if we do this in a follow up since it should be fairly easy to add.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387719706", "createdAt": "2020-03-04T14:57:05Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -77,25 +80,42 @@\n \n     private AggregatedDfs aggregatedDfs;\n     private QueryProfiler profiler;\n-    private Runnable checkCancelled;\n+    private MutableQueryTimeout cancellable;\n \n-    public ContextIndexSearcher(IndexReader reader, Similarity similarity, QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) {\n-        super(reader);\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) throws IOException {\n+        this(reader, similarity, queryCache, queryCachingPolicy, new MutableQueryTimeout());\n+    }\n+\n+    // TODO: Make the 2nd constructor private so that the IndexReader is always wrapped.\n+    // Some issues must be fixed:\n+    //   - regarding tests deriving from AggregatorTestCase and more specifically the use of searchAndReduce and\n+    //     the ShardSearcher sub-searchers.\n+    //   - tests that use a MultiReader\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy,\n+                                MutableQueryTimeout cancellable) throws IOException {\n+        super(cancellable != null ? new ExitableDirectoryReader((DirectoryReader) reader, cancellable) : reader);\n         setSimilarity(similarity);\n         setQueryCache(queryCache);\n         setQueryCachingPolicy(queryCachingPolicy);\n+        this.cancellable = cancellable != null ? cancellable : new MutableQueryTimeout();\n     }\n \n     public void setProfiler(QueryProfiler profiler) {\n         this.profiler = profiler;\n     }\n \n     /**\n-     * Set a {@link Runnable} that will be run on a regular basis while\n-     * collecting documents.\n+     * Add a {@link Runnable} that will be run on a regular basis while\n+     * collecting documents and check for query cancellation or timeout.\n      */\n-    public void setCheckCancelled(Runnable checkCancelled) {\n-        this.checkCancelled = checkCancelled;\n+    public Runnable addQueryCancellation(Runnable action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183da1740e1380abba936dd676eba04694717bb5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczODcxOQ==", "bodyText": "I prefer the addQueryCancellation since the cancellation is used not only for the reader.\nWill rename the removal method and fix the javadoc though.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387738719", "createdAt": "2020-03-04T15:25:06Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -77,25 +80,42 @@\n \n     private AggregatedDfs aggregatedDfs;\n     private QueryProfiler profiler;\n-    private Runnable checkCancelled;\n+    private MutableQueryTimeout cancellable;\n \n-    public ContextIndexSearcher(IndexReader reader, Similarity similarity, QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) {\n-        super(reader);\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) throws IOException {\n+        this(reader, similarity, queryCache, queryCachingPolicy, new MutableQueryTimeout());\n+    }\n+\n+    // TODO: Make the 2nd constructor private so that the IndexReader is always wrapped.\n+    // Some issues must be fixed:\n+    //   - regarding tests deriving from AggregatorTestCase and more specifically the use of searchAndReduce and\n+    //     the ShardSearcher sub-searchers.\n+    //   - tests that use a MultiReader\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy,\n+                                MutableQueryTimeout cancellable) throws IOException {\n+        super(cancellable != null ? new ExitableDirectoryReader((DirectoryReader) reader, cancellable) : reader);\n         setSimilarity(similarity);\n         setQueryCache(queryCache);\n         setQueryCachingPolicy(queryCachingPolicy);\n+        this.cancellable = cancellable != null ? cancellable : new MutableQueryTimeout();\n     }\n \n     public void setProfiler(QueryProfiler profiler) {\n         this.profiler = profiler;\n     }\n \n     /**\n-     * Set a {@link Runnable} that will be run on a regular basis while\n-     * collecting documents.\n+     * Add a {@link Runnable} that will be run on a regular basis while\n+     * collecting documents and check for query cancellation or timeout.\n      */\n-    public void setCheckCancelled(Runnable checkCancelled) {\n-        this.checkCancelled = checkCancelled;\n+    public Runnable addQueryCancellation(Runnable action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTcwNg=="}, "originalCommit": {"oid": "183da1740e1380abba936dd676eba04694717bb5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNTkxOA==", "bodyText": "ok fine with me", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r388205918", "createdAt": "2020-03-05T10:31:09Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -77,25 +80,42 @@\n \n     private AggregatedDfs aggregatedDfs;\n     private QueryProfiler profiler;\n-    private Runnable checkCancelled;\n+    private MutableQueryTimeout cancellable;\n \n-    public ContextIndexSearcher(IndexReader reader, Similarity similarity, QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) {\n-        super(reader);\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) throws IOException {\n+        this(reader, similarity, queryCache, queryCachingPolicy, new MutableQueryTimeout());\n+    }\n+\n+    // TODO: Make the 2nd constructor private so that the IndexReader is always wrapped.\n+    // Some issues must be fixed:\n+    //   - regarding tests deriving from AggregatorTestCase and more specifically the use of searchAndReduce and\n+    //     the ShardSearcher sub-searchers.\n+    //   - tests that use a MultiReader\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy,\n+                                MutableQueryTimeout cancellable) throws IOException {\n+        super(cancellable != null ? new ExitableDirectoryReader((DirectoryReader) reader, cancellable) : reader);\n         setSimilarity(similarity);\n         setQueryCache(queryCache);\n         setQueryCachingPolicy(queryCachingPolicy);\n+        this.cancellable = cancellable != null ? cancellable : new MutableQueryTimeout();\n     }\n \n     public void setProfiler(QueryProfiler profiler) {\n         this.profiler = profiler;\n     }\n \n     /**\n-     * Set a {@link Runnable} that will be run on a regular basis while\n-     * collecting documents.\n+     * Add a {@link Runnable} that will be run on a regular basis while\n+     * collecting documents and check for query cancellation or timeout.\n      */\n-    public void setCheckCancelled(Runnable checkCancelled) {\n-        this.checkCancelled = checkCancelled;\n+    public Runnable addQueryCancellation(Runnable action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTcwNg=="}, "originalCommit": {"oid": "183da1740e1380abba936dd676eba04694717bb5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjU0OTIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo1NzoyNVrOFx1jIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoxMToxN1rOFx2C0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMTg5MQ==", "bodyText": "Please don't implement QueryTimeout, I think this introduces more issues than it helps, since its contract is that shouldExit should return true once the timeout is hit, while we instead use runnables that throw exceptions.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387801891", "createdAt": "2020-03-04T16:57:25Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +338,34 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    private static class MutableQueryTimeout implements QueryTimeout {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a912fa348d07c8cc9b2d90a376f7b1f2aeb52280"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMDAwMw==", "bodyText": "Replaced with our own iface.", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387810003", "createdAt": "2020-03-04T17:11:17Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -320,4 +338,34 @@ public DirectoryReader getDirectoryReader() {\n         assert reader instanceof DirectoryReader : \"expected an instance of DirectoryReader, got \" + reader.getClass();\n         return (DirectoryReader) reader;\n     }\n+\n+    private static class MutableQueryTimeout implements QueryTimeout {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMTg5MQ=="}, "originalCommit": {"oid": "a912fa348d07c8cc9b2d90a376f7b1f2aeb52280"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjYwNjIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ExitableDirectoryReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoxMzoyNFrOFx2HRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyMDoxMlrOFx2W0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMTE0MA==", "bodyText": "Can you document the contract?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387811140", "createdAt": "2020-03-04T17:13:24Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ExitableDirectoryReader.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.internal;\n+\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.FilterDirectoryReader;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReader;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.index.Terms;\n+import org.apache.lucene.index.TermsEnum;\n+import org.apache.lucene.search.suggest.document.CompletionTerms;\n+import org.apache.lucene.util.BytesRef;\n+import org.apache.lucene.util.automaton.CompiledAutomaton;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Wraps an {@link IndexReader} with a {@link QueryCancellation}\n+ * which checks for cancelled or timed-out query.\n+ */\n+class ExitableDirectoryReader extends FilterDirectoryReader {\n+\n+    interface QueryCancellation {\n+\n+        boolean isEnabled();\n+\n+        void checkCancelled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23c3adc7129b3ca912e5c19a4828dd01c26364bb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNTEyMA==", "bodyText": "Sure!", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r387815120", "createdAt": "2020-03-04T17:20:12Z", "author": {"login": "matriv"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ExitableDirectoryReader.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.internal;\n+\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.FilterDirectoryReader;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReader;\n+import org.apache.lucene.index.PointValues;\n+import org.apache.lucene.index.Terms;\n+import org.apache.lucene.index.TermsEnum;\n+import org.apache.lucene.search.suggest.document.CompletionTerms;\n+import org.apache.lucene.util.BytesRef;\n+import org.apache.lucene.util.automaton.CompiledAutomaton;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Wraps an {@link IndexReader} with a {@link QueryCancellation}\n+ * which checks for cancelled or timed-out query.\n+ */\n+class ExitableDirectoryReader extends FilterDirectoryReader {\n+\n+    interface QueryCancellation {\n+\n+        boolean isEnabled();\n+\n+        void checkCancelled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMTE0MA=="}, "originalCommit": {"oid": "23c3adc7129b3ca912e5c19a4828dd01c26364bb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTEyMzUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNDo1MFrOFyOVGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNDo1MFrOFyOVGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNzg5Ng==", "bodyText": "nit: s/while accessing/while fetching document/ this is confusing since we don't check the cancellation when visiting the stored fields ?", "url": "https://github.com/elastic/elasticsearch/pull/52822#discussion_r388207896", "createdAt": "2020-03-05T10:34:50Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java", "diffHunk": "@@ -77,25 +79,46 @@\n \n     private AggregatedDfs aggregatedDfs;\n     private QueryProfiler profiler;\n-    private Runnable checkCancelled;\n+    private MutableQueryTimeout cancellable;\n \n-    public ContextIndexSearcher(IndexReader reader, Similarity similarity, QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) {\n-        super(reader);\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy) throws IOException {\n+        this(reader, similarity, queryCache, queryCachingPolicy, new MutableQueryTimeout());\n+    }\n+\n+    // TODO: Make the 2nd constructor private so that the IndexReader is always wrapped.\n+    // Some issues must be fixed:\n+    //   - regarding tests deriving from AggregatorTestCase and more specifically the use of searchAndReduce and\n+    //     the ShardSearcher sub-searchers.\n+    //   - tests that use a MultiReader\n+    public ContextIndexSearcher(IndexReader reader, Similarity similarity,\n+                                QueryCache queryCache, QueryCachingPolicy queryCachingPolicy,\n+                                MutableQueryTimeout cancellable) throws IOException {\n+        super(cancellable != null ? new ExitableDirectoryReader((DirectoryReader) reader, cancellable) : reader);\n         setSimilarity(similarity);\n         setQueryCache(queryCache);\n         setQueryCachingPolicy(queryCachingPolicy);\n+        this.cancellable = cancellable != null ? cancellable : new MutableQueryTimeout();\n     }\n \n     public void setProfiler(QueryProfiler profiler) {\n         this.profiler = profiler;\n     }\n \n     /**\n-     * Set a {@link Runnable} that will be run on a regular basis while\n-     * collecting documents.\n+     * Add a {@link Runnable} that will be run on a regular basis while fetching document from the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0da4c8c45aa49ebeceb276ec871c6f4d03d4de"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3515, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}