{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDg4NjAz", "number": 59112, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoyNDoyMFrOEMwevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoyNDoyMFrOEMwevg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODEyNjcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoyNDoyMFrOGvDRHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNzowN1rOGvIxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4OTc5MA==", "bodyText": "I wonder if we should care whether they're the same logical value? We don't for other cases, but I think we should be.\nPerhaps:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                && (\"true\".equalsIgnoreCase((String)value2) || \"false\".equalsIgnoreCase((String)value2))) {\n          \n          \n            \n                                && String.valueOf(value1).equals(value2) ) {", "url": "https://github.com/elastic/elasticsearch/pull/59112#discussion_r451989790", "createdAt": "2020-07-09T06:24:20Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -670,8 +670,18 @@ static JSONObject mergeObjects(JSONObject idToken, JSONObject userInfo) {\n             } else if (value1 instanceof JSONObject) {\n                 idToken.put(entry.getKey(), mergeObjects((JSONObject) value1, value2));\n             } else if (value1.getClass().equals(value2.getClass()) == false) {\n-                throw new IllegalStateException(\"Error merging ID token and userinfo claim value for claim [\" + entry.getKey() + \"]. \" +\n-                    \"Cannot merge [\" + value1.getClass().getName() + \"] with [\" + value2.getClass().getName() + \"]\");\n+                // A special handling for certain OPs that mix the usage of true and \"true\"\n+                // Retain value from idToken as all other primitive types\n+                if (value1 instanceof Boolean && value2 instanceof String\n+                    && (\"true\".equalsIgnoreCase((String)value2) || \"false\".equalsIgnoreCase((String)value2))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5727f0c5ab6657ee4c8d128e03734e37e74168"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3OTk2Mg==", "bodyText": "Updated as suggested. It's a bit inconsistent with other primitive types. But I think it fits for \"minimal leniency\" purpose which is I am after currently. Also, as discussed, it's worthwhile to revisit the whole merging behaviour in future.", "url": "https://github.com/elastic/elasticsearch/pull/59112#discussion_r452079962", "createdAt": "2020-07-09T09:17:07Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -670,8 +670,18 @@ static JSONObject mergeObjects(JSONObject idToken, JSONObject userInfo) {\n             } else if (value1 instanceof JSONObject) {\n                 idToken.put(entry.getKey(), mergeObjects((JSONObject) value1, value2));\n             } else if (value1.getClass().equals(value2.getClass()) == false) {\n-                throw new IllegalStateException(\"Error merging ID token and userinfo claim value for claim [\" + entry.getKey() + \"]. \" +\n-                    \"Cannot merge [\" + value1.getClass().getName() + \"] with [\" + value2.getClass().getName() + \"]\");\n+                // A special handling for certain OPs that mix the usage of true and \"true\"\n+                // Retain value from idToken as all other primitive types\n+                if (value1 instanceof Boolean && value2 instanceof String\n+                    && (\"true\".equalsIgnoreCase((String)value2) || \"false\".equalsIgnoreCase((String)value2))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4OTc5MA=="}, "originalCommit": {"oid": "7d5727f0c5ab6657ee4c8d128e03734e37e74168"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1971, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}