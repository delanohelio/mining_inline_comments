{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzc4OTI4", "number": 65959, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMjoyMjoxM1rOFFXCKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMjoyNDo0MlrOFFXEtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTY0NTg2OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/indices/SystemIndexManagerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMjoyMjoxM1rOIF1y2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMjoyMjoxM1rOIF1y2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk5NTE2Mw==", "bodyText": "Maybe just do the assertMappings in an assertBusy because the update is async and not controlled by the test? Then you can remove this line", "url": "https://github.com/elastic/elasticsearch/pull/65959#discussion_r542995163", "createdAt": "2020-12-15T02:22:13Z", "author": {"login": "jaymode"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/indices/SystemIndexManagerIT.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest;\n+import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.CollectionUtils;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.elasticsearch.test.XContentTestUtils.convertToXContent;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0)\n+public class SystemIndexManagerIT extends ESIntegTestCase {\n+\n+    private static final String INDEX_NAME = \".test-index\";\n+    private static final String PRIMARY_INDEX_NAME = INDEX_NAME + \"-1\";\n+\n+    @Before\n+    public void beforeEach() {\n+        TestSystemIndexDescriptor.useNewMappings.set(false);\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return CollectionUtils.appendToCopy(super.nodePlugins(), TestPlugin.class);\n+    }\n+\n+    /**\n+     * Check that if the the SystemIndexManager finds a managed index with out-of-date mappings, then\n+     * the manager updates those mappings.\n+     */\n+    public void testSystemIndexManagerUpgradesMappings() throws Exception {\n+        internalCluster().startNodes(1);\n+\n+        // Trigger the creation of the system index\n+        assertAcked(prepareCreate(INDEX_NAME));\n+        ensureGreen(INDEX_NAME);\n+\n+        assertMappings(TestSystemIndexDescriptor.getOldMappings());\n+\n+        // Poke the test descriptor so that the mappings are now \"updated\"\n+        TestSystemIndexDescriptor.useNewMappings.set(true);\n+\n+        // Cause a cluster state update, so that the SystemIndexManager will update the mappings in our index\n+        triggerClusterStateUpdates();\n+        waitNoPendingTasksOnAll(); // FIXME why do I need this to see the new mappings?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356954a1d447633b3d4abfcb73405d291efee7cc"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTY1MjM4OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/indices/SystemIndexManagerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMjoyNDo0MlrOIF12PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMjoyNDo0MlrOIF12PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk5NjAyOQ==", "bodyText": "Can we do something else like put a template or an empty reroute command? I prefer not to reach into a node a grab services if there is a way to trigger via an API", "url": "https://github.com/elastic/elasticsearch/pull/65959#discussion_r542996029", "createdAt": "2020-12-15T02:24:42Z", "author": {"login": "jaymode"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/indices/SystemIndexManagerIT.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.indices;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest;\n+import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.CollectionUtils;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.elasticsearch.test.XContentTestUtils.convertToXContent;\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0)\n+public class SystemIndexManagerIT extends ESIntegTestCase {\n+\n+    private static final String INDEX_NAME = \".test-index\";\n+    private static final String PRIMARY_INDEX_NAME = INDEX_NAME + \"-1\";\n+\n+    @Before\n+    public void beforeEach() {\n+        TestSystemIndexDescriptor.useNewMappings.set(false);\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return CollectionUtils.appendToCopy(super.nodePlugins(), TestPlugin.class);\n+    }\n+\n+    /**\n+     * Check that if the the SystemIndexManager finds a managed index with out-of-date mappings, then\n+     * the manager updates those mappings.\n+     */\n+    public void testSystemIndexManagerUpgradesMappings() throws Exception {\n+        internalCluster().startNodes(1);\n+\n+        // Trigger the creation of the system index\n+        assertAcked(prepareCreate(INDEX_NAME));\n+        ensureGreen(INDEX_NAME);\n+\n+        assertMappings(TestSystemIndexDescriptor.getOldMappings());\n+\n+        // Poke the test descriptor so that the mappings are now \"updated\"\n+        TestSystemIndexDescriptor.useNewMappings.set(true);\n+\n+        // Cause a cluster state update, so that the SystemIndexManager will update the mappings in our index\n+        triggerClusterStateUpdates();\n+        waitNoPendingTasksOnAll(); // FIXME why do I need this to see the new mappings?\n+\n+        assertMappings(TestSystemIndexDescriptor.getNewMappings());\n+    }\n+\n+    /**\n+     * Check that if the the SystemIndexManager finds a managed index with mappings that claim to be newer than\n+     * what it expects, then those mappings are left alone.\n+     */\n+    public void testSystemIndexManagerLeavesNewerMappingsAlone() throws Exception {\n+        TestSystemIndexDescriptor.useNewMappings.set(true);\n+\n+        internalCluster().startNodes(1);\n+        // Trigger the creation of the system index\n+        assertAcked(prepareCreate(INDEX_NAME));\n+        ensureGreen(INDEX_NAME);\n+\n+        assertMappings(TestSystemIndexDescriptor.getNewMappings());\n+\n+        // Poke the test descriptor so that the mappings are now out-dated.\n+        TestSystemIndexDescriptor.useNewMappings.set(false);\n+\n+        // Cause a cluster state update, so that the SystemIndexManager will update the mappings in our index\n+        triggerClusterStateUpdates();\n+        waitNoPendingTasksOnAll(); // FIXME why do I need this to see the new mappings?\n+\n+        // Mappings should be unchanged.\n+        assertMappings(TestSystemIndexDescriptor.getNewMappings());\n+    }\n+\n+    /**\n+     * Performs a no-op cluster state update in order to trigger any cluster state listeners - specifically, SystemIndexManager.\n+     */\n+    private void triggerClusterStateUpdates() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356954a1d447633b3d4abfcb73405d291efee7cc"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1785, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}