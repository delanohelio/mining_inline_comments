{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NjU3OTIz", "number": 50550, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzozMjowM1rODVctqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxNDoxNDo1M1rODVdOIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODE3MTMwOnYy", "diffSide": "RIGHT", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzozMjowM1rOFZrnog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzozMjowM1rOFZrnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3MzM3OA==", "bodyText": "Admittedly quite a bit of code, but I'm hoping we can just extend the REST layer mocking here and dry things up against the fixture step-by-step like we did for S3 and the other cloud providers in the repository tests to get rid of all our complicated mocking of actual AWS SDK classes and just mock on the REST layer.", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362473378", "createdAt": "2020-01-02T13:32:03Z", "author": {"login": "original-brownbear"}, "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d835a8cda8e04832b9e06633d389ab0145f60dd"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODE3MzE0OnYy", "diffSide": "RIGHT", "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzozMzoxN1rOFZro1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzozMzoxN1rOFZro1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3MzY4NA==", "bodyText": "Just using the default retry condition here now. We may want to make the retry interval configurable, if only internally for tests. The current settings make the first retry happen after almost 20s but I didn't want to add that complication here yet.", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362473684", "createdAt": "2020-01-02T13:33:17Z", "author": {"login": "original-brownbear"}, "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "diffHunk": "@@ -79,7 +79,7 @@ static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings c\n         // Increase the number of retries in case of 5xx API responses\n         final Random rand = Randomness.get();\n         final RetryPolicy retryPolicy = new RetryPolicy(\n-            RetryPolicy.RetryCondition.NO_RETRY_CONDITION,\n+            null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d835a8cda8e04832b9e06633d389ab0145f60dd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODE3ODExOnYy", "diffSide": "RIGHT", "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzozNTo1NFrOFZrruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzo1NDowN1rOFZsAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NDQyNA==", "bodyText": "Can we avoid setting our own retry policy at all and use the SDK default? The SDK makes a more nuanced decision about how much to back off based on the error type. If we really want 10 retries then that can be overridden with setMaxErrorRetry(10) instead?", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362474424", "createdAt": "2020-01-02T13:35:54Z", "author": {"login": "DaveCTurner"}, "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "diffHunk": "@@ -79,7 +79,7 @@ static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings c\n         // Increase the number of retries in case of 5xx API responses\n         final Random rand = Randomness.get();\n         final RetryPolicy retryPolicy = new RetryPolicy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d835a8cda8e04832b9e06633d389ab0145f60dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3OTc1OA==", "bodyText": "Right, that's much nicer. Moved to the default and kept retries at 10 for now in d015576 :)", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362479758", "createdAt": "2020-01-02T13:54:07Z", "author": {"login": "original-brownbear"}, "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "diffHunk": "@@ -79,7 +79,7 @@ static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings c\n         // Increase the number of retries in case of 5xx API responses\n         final Random rand = Randomness.get();\n         final RetryPolicy retryPolicy = new RetryPolicy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3NDQyNA=="}, "originalCommit": {"oid": "2d835a8cda8e04832b9e06633d389ab0145f60dd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODIxOTMxOnYy", "diffSide": "RIGHT", "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzo1NzozNFrOFZsEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzo1NzozNFrOFZsEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4MDc1Nw==", "bodyText": "I think this is equivalent (and I prefer it):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    clientConfiguration.setRetryPolicy(retryPolicy);\n          \n          \n            \n                     clientConfiguration.setMaxErrorRetry(10);", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362480757", "createdAt": "2020-01-02T13:57:34Z", "author": {"login": "DaveCTurner"}, "path": "plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java", "diffHunk": "@@ -77,16 +75,7 @@ static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings c\n             clientConfiguration.setProxyPassword(clientSettings.proxyPassword);\n         }\n         // Increase the number of retries in case of 5xx API responses\n-        final Random rand = Randomness.get();\n-        final RetryPolicy retryPolicy = new RetryPolicy(\n-            RetryPolicy.RetryCondition.NO_RETRY_CONDITION,\n-            (originalRequest, exception, retriesAttempted) -> {\n-               // with 10 retries the max delay time is 320s/320000ms (10 * 2^5 * 1 * 1000)\n-               logger.warn(\"EC2 API request failed, retry again. Reason was:\", exception);\n-               return 1000L * (long) (10d * Math.pow(2, retriesAttempted / 2.0d) * (1.0d + rand.nextDouble()));\n-            },\n-            10,\n-            false);\n+        final RetryPolicy retryPolicy = new RetryPolicy(null, null, 10, false);\n         clientConfiguration.setRetryPolicy(retryPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d015576900c80123733e36ce2a8f5a4b8c897b41"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODI0NzI0OnYy", "diffSide": "RIGHT", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxNDoxMToxN1rOFZsU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxNDoxMToxN1rOFZsU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NDk3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        fail(\"did not send response\");", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362484973", "createdAt": "2020-01-02T14:11:17Z", "author": {"login": "DaveCTurner"}, "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {\n+                        exchange.sendResponseHeaders(HttpStatus.SC_SERVICE_UNAVAILABLE, -1);\n+                        return;\n+                    }\n+                    // Simulate an EC2 DescribeInstancesResponse\n+                    byte[] responseBody = null;\n+                    for (NameValuePair parse : URLEncodedUtils.parse(request, UTF_8)) {\n+                        if (\"Action\".equals(parse.getName())) {\n+                            responseBody = generateDescribeInstancesResponse(hosts);\n+                            break;\n+                        }\n+                    }\n+                    responseBody = responseBody == null ? new byte[0] : responseBody;\n+                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/xml; charset=UTF-8\");\n+                    exchange.sendResponseHeaders(HttpStatus.SC_OK, responseBody.length);\n+                    exchange.getResponseBody().write(responseBody);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d015576900c80123733e36ce2a8f5a4b8c897b41"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODI0NzgwOnYy", "diffSide": "RIGHT", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxNDoxMTozNVrOFZsVRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxNDo0NTowMFrOFZtC4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NTA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                exchange.getResponseBody().write(responseBody);\n          \n          \n            \n                                exchange.getResponseBody().write(responseBody);\n          \n          \n            \n                                return;", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362485062", "createdAt": "2020-01-02T14:11:35Z", "author": {"login": "DaveCTurner"}, "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {\n+                        exchange.sendResponseHeaders(HttpStatus.SC_SERVICE_UNAVAILABLE, -1);\n+                        return;\n+                    }\n+                    // Simulate an EC2 DescribeInstancesResponse\n+                    byte[] responseBody = null;\n+                    for (NameValuePair parse : URLEncodedUtils.parse(request, UTF_8)) {\n+                        if (\"Action\".equals(parse.getName())) {\n+                            responseBody = generateDescribeInstancesResponse(hosts);\n+                            break;\n+                        }\n+                    }\n+                    responseBody = responseBody == null ? new byte[0] : responseBody;\n+                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/xml; charset=UTF-8\");\n+                    exchange.sendResponseHeaders(HttpStatus.SC_OK, responseBody.length);\n+                    exchange.getResponseBody().write(responseBody);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d015576900c80123733e36ce2a8f5a4b8c897b41"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ5NjczNg==", "bodyText": "Makes sense applied together with the otehr suggestion :)", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362496736", "createdAt": "2020-01-02T14:45:00Z", "author": {"login": "original-brownbear"}, "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {\n+                        exchange.sendResponseHeaders(HttpStatus.SC_SERVICE_UNAVAILABLE, -1);\n+                        return;\n+                    }\n+                    // Simulate an EC2 DescribeInstancesResponse\n+                    byte[] responseBody = null;\n+                    for (NameValuePair parse : URLEncodedUtils.parse(request, UTF_8)) {\n+                        if (\"Action\".equals(parse.getName())) {\n+                            responseBody = generateDescribeInstancesResponse(hosts);\n+                            break;\n+                        }\n+                    }\n+                    responseBody = responseBody == null ? new byte[0] : responseBody;\n+                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/xml; charset=UTF-8\");\n+                    exchange.sendResponseHeaders(HttpStatus.SC_OK, responseBody.length);\n+                    exchange.getResponseBody().write(responseBody);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NTA2Mg=="}, "originalCommit": {"oid": "d015576900c80123733e36ce2a8f5a4b8c897b41"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODI1NDQzOnYy", "diffSide": "RIGHT", "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxNDoxNDo1M1rOFZsZTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxNDo0NDozM1rOFZtCVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NjA5Mg==", "bodyText": "Could we also check that we retry repeatedly? The first five retries take less than a second.", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362486092", "createdAt": "2020-01-02T14:14:53Z", "author": {"login": "DaveCTurner"}, "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d015576900c80123733e36ce2a8f5a4b8c897b41"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ5NjU5Nw==", "bodyText": "Done :)", "url": "https://github.com/elastic/elasticsearch/pull/50550#discussion_r362496597", "createdAt": "2020-01-02T14:44:33Z", "author": {"login": "original-brownbear"}, "path": "plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/EC2RetriesTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.discovery.ec2;\n+\n+import com.amazonaws.http.HttpMethodName;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkService;\n+import org.elasticsearch.common.settings.MockSecureSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.util.PageCacheRecycler;\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.elasticsearch.discovery.SeedHostsProvider;\n+import org.elasticsearch.discovery.SeedHostsResolver;\n+import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.MockTransportService;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.transport.nio.MockNioTransport;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressForbidden(reason = \"use a http server\")\n+public class EC2RetriesTests extends ESTestCase {\n+\n+    private HttpServer httpServer;\n+\n+    private ThreadPool threadPool;\n+\n+    private MockTransportService transportService;\n+\n+    private NetworkService networkService = new NetworkService(Collections.emptyList());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.start();\n+        threadPool = new TestThreadPool(EC2RetriesTests.class.getName());\n+        final MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, networkService,\n+            PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()),\n+            new NoneCircuitBreakerService());\n+        transportService =\n+            new MockTransportService(Settings.EMPTY, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            IOUtils.close(transportService, () -> terminate(threadPool), () -> httpServer.stop(0));\n+        } finally {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testEC2DiscoveryRetriesOnRateLimiting() throws IOException {\n+        final String accessKey = \"ec2_access\";\n+        final List<String> hosts = List.of(\"127.0.0.1:9000\");\n+        final Set<String> failedRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+        httpServer.createContext(\"/\", exchange -> {\n+            if (exchange.getRequestMethod().equals(HttpMethodName.POST.name())) {\n+                final String request = new String(exchange.getRequestBody().readAllBytes(), UTF_8);\n+                final String userAgent = exchange.getRequestHeaders().getFirst(\"User-Agent\");\n+                if (userAgent != null && userAgent.startsWith(\"aws-sdk-java\")) {\n+                    final String auth = exchange.getRequestHeaders().getFirst(\"Authorization\");\n+                    if (auth == null || auth.contains(accessKey) == false) {\n+                        throw new IllegalArgumentException(\"wrong access key: \" + auth);\n+                    }\n+                    if (failedRequests.add(exchange.getRequestHeaders().getFirst(\"Amz-sdk-invocation-id\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ4NjA5Mg=="}, "originalCommit": {"oid": "d015576900c80123733e36ce2a8f5a4b8c897b41"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4941, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}