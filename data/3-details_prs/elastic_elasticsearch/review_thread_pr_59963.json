{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NDA2MDU2", "number": 59963, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyOTozMlrOEQlKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyOTozMlrOEQlKUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODIxNTIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/TestDocsIterator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyOTozMlrOG0zvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoxOTowMFrOG0_wMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyNjc2MQ==", "bodyText": "I think this method could be turned to stream expression for brevity, sth like:\nreturn extractedFields.getDocValueFields().collect(toMap(ExtractedField::getSearchField, ExtractedField::docValueFormat));", "url": "https://github.com/elastic/elasticsearch/pull/59963#discussion_r458026761", "createdAt": "2020-07-21T11:29:32Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/TestDocsIterator.java", "diffHunk": "@@ -18,18 +18,32 @@\n import org.elasticsearch.xpack.core.ClientHelper;\n import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.extractor.ExtractedField;\n+import org.elasticsearch.xpack.ml.extractor.ExtractedFields;\n import org.elasticsearch.xpack.ml.utils.persistence.SearchAfterDocumentsIterator;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Objects;\n \n public class TestDocsIterator extends SearchAfterDocumentsIterator<SearchHit> {\n \n     private final DataFrameAnalyticsConfig config;\n     private String lastDocId;\n+    private final Map<String, String> docValueFieldAndFormatPairs;\n \n-    TestDocsIterator(OriginSettingClient client, DataFrameAnalyticsConfig config) {\n+    TestDocsIterator(OriginSettingClient client, DataFrameAnalyticsConfig config, ExtractedFields extractedFields) {\n         super(client, config.getDest().getIndex(), true);\n         this.config = Objects.requireNonNull(config);\n+        this.docValueFieldAndFormatPairs = buildDocValueFieldAndFormatPairs(extractedFields);\n+    }\n+\n+    private static Map<String, String> buildDocValueFieldAndFormatPairs(ExtractedFields extractedFields) {\n+        Map<String, String> docValueFieldAndFormatPairs = new HashMap<>();\n+        for (ExtractedField docValueField : extractedFields.getDocValueFields()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aec0566eac70fb82b353da1abff6d17193808a7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMzY2Nw==", "bodyText": "I reverted this as it doesn't play well with nullable map values.", "url": "https://github.com/elastic/elasticsearch/pull/59963#discussion_r458223667", "createdAt": "2020-07-21T16:19:00Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/TestDocsIterator.java", "diffHunk": "@@ -18,18 +18,32 @@\n import org.elasticsearch.xpack.core.ClientHelper;\n import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.extractor.ExtractedField;\n+import org.elasticsearch.xpack.ml.extractor.ExtractedFields;\n import org.elasticsearch.xpack.ml.utils.persistence.SearchAfterDocumentsIterator;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Objects;\n \n public class TestDocsIterator extends SearchAfterDocumentsIterator<SearchHit> {\n \n     private final DataFrameAnalyticsConfig config;\n     private String lastDocId;\n+    private final Map<String, String> docValueFieldAndFormatPairs;\n \n-    TestDocsIterator(OriginSettingClient client, DataFrameAnalyticsConfig config) {\n+    TestDocsIterator(OriginSettingClient client, DataFrameAnalyticsConfig config, ExtractedFields extractedFields) {\n         super(client, config.getDest().getIndex(), true);\n         this.config = Objects.requireNonNull(config);\n+        this.docValueFieldAndFormatPairs = buildDocValueFieldAndFormatPairs(extractedFields);\n+    }\n+\n+    private static Map<String, String> buildDocValueFieldAndFormatPairs(ExtractedFields extractedFields) {\n+        Map<String, String> docValueFieldAndFormatPairs = new HashMap<>();\n+        for (ExtractedField docValueField : extractedFields.getDocValueFields()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyNjc2MQ=="}, "originalCommit": {"oid": "4aec0566eac70fb82b353da1abff6d17193808a7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2186, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}