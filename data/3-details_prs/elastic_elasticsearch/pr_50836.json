{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMzAxMjA2", "number": 50836, "title": "Voting config exclusions should work with absent nodes", "bodyText": "Voting config exclusions should work with absent nodes. For details, please see #47990.", "createdAt": "2020-01-10T06:46:49Z", "url": "https://github.com/elastic/elasticsearch/pull/50836", "merged": true, "mergeCommit": {"oid": "6b299d4e227d35f3cb33cd5e9422bb310b4fbd47"}, "closed": true, "closedAt": "2020-04-16T08:59:04Z", "author": {"login": "zacharymorn"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4gc1sgH2gAyMzYxMzAxMjA2OmMzZDQ2MTUyYmJkMzQwYTA5ZGNiMzIxYmY5M2IzN2VlYTU1MTdjZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYI2DqgFqTM5NDQzMjU4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c3d46152bbd340a09dcb321bf93b37eea5517cfd", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/c3d46152bbd340a09dcb321bf93b37eea5517cfd", "committedDate": "2020-01-09T02:23:09Z", "message": "Voting config exclusions should work with absent nodes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMDgwNjQ4", "url": "https://github.com/elastic/elasticsearch/pull/50836#pullrequestreview-341080648", "createdAt": "2020-01-10T10:38:29Z", "commit": {"oid": "c3d46152bbd340a09dcb321bf93b37eea5517cfd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7881e7bfc30adba3f4f0edd60bc678080d2b83fa", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/7881e7bfc30adba3f4f0edd60bc678080d2b83fa", "committedDate": "2020-01-17T19:24:19Z", "message": "Merge branch 'master' into issue-47990"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/39eb2a11bb95b50a18fb408a52a925f9161275c8", "committedDate": "2020-01-17T21:47:12Z", "message": "Add new APIs to add voting config exclusion just based on node id or name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDQzOTk4", "url": "https://github.com/elastic/elasticsearch/pull/50836#pullrequestreview-349443998", "createdAt": "2020-01-28T15:02:04Z", "commit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowMjowNVrOFioSBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNjo0NFrOFiodgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NTg3OA==", "bodyText": "I think you can register the bare URI /_cluster/voting_config_exclusions (no query parameters) and then consume the query parameters in code.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371855878", "createdAt": "2020-01-28T15:02:05Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -36,7 +36,11 @@\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.\n         controller.registerHandler(RestRequest.Method.POST, \"/_cluster/voting_config_exclusions/{node_name}\", this);\n+\n+        controller.registerHandler(RestRequest.Method.POST,\n+            \"/_cluster/voting_config_exclusions/node_ids_or_names/{node_id_or_names}\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzEzOA==", "bodyText": "See e.g. here for how to emit deprecation warnings:\n\n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestSyncedFlushAction.java\n    \n    \n        Lines 65 to 66\n      in\n      09b46c8\n    \n    \n    \n    \n\n        \n          \n           DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"synced_flush\", \n        \n\n        \n          \n               \"Synced flush was removed and a normal flush was performed instead. This transition will be removed in a future version.\");", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371857138", "createdAt": "2020-01-28T15:04:05Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzU4MQ==", "bodyText": "We should throw an IllegalArgumentException if this is set as well as the query parameters, and should also throw an IllegalArgumentException if both query parameters are in use.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371857581", "createdAt": "2020-01-28T15:04:50Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated\n+        if (request.hasParam(\"node_name\")) {\n+            nodeDescriptions = request.param(\"node_name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODgxNg==", "bodyText": "I think this should be stricter about interpreting the node descriptions differently depending on their source (whether old-style deprecated URI or one of the two new-style parameters). This will entail adding more fields to this request class, and supporting backwards-compatibility on (de)serialisation by behaving differently according to StreamOutput#getVersion and StreamInput#getVersion.\nAs it is, this is too lenient.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371858816", "createdAt": "2020-01-28T15:06:44Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -72,16 +74,22 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        final DiscoveryNodes.NodeResolutionResults nodeResolutionResults = allNodes.resolveNodesExact(nodeDescriptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "committedDate": "2020-02-28T06:18:22Z", "message": "Address feedback comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDE0ODc2", "url": "https://github.com/elastic/elasticsearch/pull/50836#pullrequestreview-367014876", "createdAt": "2020-03-02T08:26:02Z", "commit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoyNjowMlrOFwWzhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToxMzoxN1rOFwYFzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYwNg==", "bodyText": "I think this can (and should) be final.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386249606", "createdAt": "2020-03-02T08:26:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYzNA==", "bodyText": "I think this can (and should) be final.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386249634", "createdAt": "2020-03-02T08:26:06Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;\n+    private String[] nodeNames = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MDQzMQ==", "bodyText": "Since we're currently targeting master:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (in.getVersion() == Version.V_EMPTY) {\n          \n          \n            \n                    if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n          \n      \n    \n    \n  \n\nWe will adjust this when backporting.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386250431", "createdAt": "2020-03-02T08:28:07Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ==", "bodyText": "Yes, this PR deprecates this parameter which means that after the backport is complete we can follow-up with another PR that removes it. No action required in this PR, however.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386252931", "createdAt": "2020-03-02T08:33:51Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA==", "bodyText": "This constructor is only used in tests, and it looks like we could migrate all of those tests over to using node names instead of node descriptions. Some of them would also be neater if we used a varargs:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n          \n          \n            \n                public AddVotingConfigExclusionsRequest(String... nodeNames) {", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386254430", "createdAt": "2020-03-02T08:37:27Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDg1Mw==", "bodyText": "Maybe also throw an IllegalArgumentException here if more than one of the args is nonempty.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386254853", "createdAt": "2020-03-02T08:38:31Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NTgzOA==", "bodyText": "Think you can revert the changes to this file?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386255838", "createdAt": "2020-03-02T08:40:56Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java", "diffHunk": "@@ -233,7 +233,8 @@ public CoordinationMetaData build() {\n         private final String nodeName;\n \n         public VotingConfigExclusion(DiscoveryNode node) {\n-            this(node.getId(), node.getName());\n+            this.nodeId = node.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NjczMA==", "bodyText": "Does controller.registerAsDeprecatedHandler work for this?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386256730", "createdAt": "2020-03-02T08:43:07Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -23,20 +23,28 @@\n import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsRequest;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.common.unit.TimeValue;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.RestController;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n \n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n+    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(logger);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NzE3OQ==", "bodyText": "This isn't needed if using controller.registerAsDeprecatedHandler.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386257179", "createdAt": "2020-03-02T08:44:09Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1ODI4Mw==", "bodyText": "The house style is to use == false since unary ! is too easy to miss:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n          \n            \n                    if (oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames) == false) {\n          \n      \n    \n    \n  \n\nHowever in this case maybe we can invert the sense of this method instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n          \n            \n                    if (moreThanOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n      \n    \n    \n  \n\nAlso, as requested earlier, we can move this validation to the constructor of AddVotingConfigExclusionsRequest.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386258283", "createdAt": "2020-03-02T08:46:40Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n+                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n+                    \"Please use [node_ids] or [node_names] instead\");\n+            deprecatedNodeDescription = request.param(\"node_name\");\n+        }\n+\n+        if (request.hasParam(\"node_ids\")){\n+            nodeIds = request.param(\"node_ids\");\n+        }\n+\n+        if (request.hasParam(\"node_names\")){\n+            nodeNames = request.param(\"node_names\");\n+        }\n+\n+        if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA==", "bodyText": "I think we should revert the changes to these tests (they're still valid tests of the now-deprecated behaviour) and add more tests for the new behaviour. We should remove them in the followup PR that removes the old behaviour.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386259748", "createdAt": "2020-03-02T08:50:04Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -87,16 +88,6 @@ public void testResolve() {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n-        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDIxNA==", "bodyText": "I think we should revert the changes to these tests (they're still valid tests of the now-deprecated behaviour) and add more tests for the new behaviour. We can remove them in the followup PR that removes the legacy support.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386260214", "createdAt": "2020-03-02T08:50:58Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -166,58 +167,6 @@ public void testWithdrawsVotesFromMultipleNodes() throws InterruptedException {\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n                 containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n     }\n-\n-    public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MTI5MA==", "bodyText": "I don't think we should ever call this with a null or empty array.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386261290", "createdAt": "2020-03-02T08:53:12Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjY0MQ==", "bodyText": "Seems strange to select two completely different behaviours with a boolean flag like this. Why not two methods? Or even no methods and just inline the two branches at the call sites.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386262641", "createdAt": "2020-03-02T08:55:57Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ==", "bodyText": "Maybe just the master-eligible nodes?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386263135", "createdAt": "2020-03-02T08:57:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {\n+                for (String nodeId : nodes) {\n+                    if (nodeExists(nodeId)) {\n+                        resolvedNodes.add(nodeId);\n+                    }\n+                    else {\n+                        unresolvedNodes.add(nodeId);\n+                    }\n+                }\n+            }\n+            else {\n+                Map<String, String> existingNodesNameId = new HashMap<>();\n+                for (DiscoveryNode node : this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2NTYwMg==", "bodyText": "Can this happen? I think only if both args are empty? In which case I think we can detect it sooner and throw a more helpful message.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386265602", "createdAt": "2020-03-02T09:02:14Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n+            }\n+\n+            resolvedNodes = Arrays.stream(nodeResolutionResults.getResolvedNodes())\n                 .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n \n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+            allProcessedNodes = Sets.newHashSet(Iterables.concat(resolvedNodes, unresolvedNodes));\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for nodeIds \" + Arrays.asList(nodeIds) +\n+                    \" or nodeNames \" + Arrays.asList(nodeNames) + \" matched no master-eligible nodes or absent nodes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw==", "bodyText": "Suggest using a sentinel value other than \"\" here to clarify why the node name is missing. I suspect this will save some confusion in a future debugging session.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n          \n          \n            \n                                .map(nodeName -> new VotingConfigExclusion(\"_absent_\", nodeName)).collect(Collectors.toSet());\n          \n      \n    \n    \n  \n\nDo these name-only exclusions do anything? IOW if you add an exclusion by name for an absent node, and then a node with that name joins the cluster, do we exclude it from the voting configuration? I think we don't today, but we should. I think it would also be helpful to update the VotingConfigExclusion to include the node  ID in that case.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386269477", "createdAt": "2020-03-02T09:10:44Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDY2OQ==", "bodyText": "Suggest using a sentinel value other than \"\" here to clarify why the node name is missing. I suspect this will save some confusion in a future debugging session.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n          \n          \n            \n                                .map(nodeId -> new VotingConfigExclusion(nodeId, \"_absent_\")).collect(Collectors.toSet());", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386270669", "createdAt": "2020-03-02T09:13:17Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad415731524169e2f745ff3fff302aa67f04abfa", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/ad415731524169e2f745ff3fff302aa67f04abfa", "committedDate": "2020-03-04T07:23:06Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b085c2cd8980b504ba19c1ce89c4513f9ab143f5", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/b085c2cd8980b504ba19c1ce89c4513f9ab143f5", "committedDate": "2020-03-04T07:57:50Z", "message": "Address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57cbc474394df4f442e849dc953ad1281b6c430a", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/57cbc474394df4f442e849dc953ad1281b6c430a", "committedDate": "2020-03-04T22:00:30Z", "message": "Update nodeId for VotingConfigExclusion when node with matching name joins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e08a8a15a34a8ed138b62ac1115f9232323a41dd", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/e08a8a15a34a8ed138b62ac1115f9232323a41dd", "committedDate": "2020-03-06T07:37:34Z", "message": "Add test cases to AddVotingConfigExclusionsRequestTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32512355d379374ae40cd8b7f1d7e0fd2a207cb", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/d32512355d379374ae40cd8b7f1d7e0fd2a207cb", "committedDate": "2020-03-06T22:21:38Z", "message": "Add assertion for voting config exclusion in cluster state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bede9a011b95a8b838bbd51d6053726e1f008932", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/bede9a011b95a8b838bbd51d6053726e1f008932", "committedDate": "2020-03-06T23:12:54Z", "message": "Add test cases to TransportAddVotingConfigExclusionsActionTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb337f2efd5476fe0160356b45cda3a653de67ce", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/fb337f2efd5476fe0160356b45cda3a653de67ce", "committedDate": "2020-03-09T17:54:15Z", "message": "Add test to NodeJoinTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e28294d54d11a047ed376d1eb517591ab6fc11f", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e28294d54d11a047ed376d1eb517591ab6fc11f", "committedDate": "2020-03-09T20:20:57Z", "message": "Add test to CooridnatorTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49f749c02cb7c2fda6f705f130e1e269f97e7703", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/49f749c02cb7c2fda6f705f130e1e269f97e7703", "committedDate": "2020-03-10T05:35:25Z", "message": "Inline deprecation message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "committedDate": "2020-03-10T05:51:47Z", "message": "Merge branch 'master' into issue-47990"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTg4NDgw", "url": "https://github.com/elastic/elasticsearch/pull/50836#pullrequestreview-380988480", "createdAt": "2020-03-25T09:42:17Z", "commit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "state": "COMMENTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo0MjoxN1rOF7S-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDozMjowMlrOF7U2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMTIyNw==", "bodyText": "This isn't resolved yet?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397721227", "createdAt": "2020-03-25T09:42:17Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNDk0NQ==", "bodyText": "Would you remove this (and other //TODO comments)? We can track follow-up work with GitHub issues if needed, although the follow-up to remove this parameter should be relatively simple so we can go straight to a PR.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397724945", "createdAt": "2020-03-25T09:47:59Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzU4OQ==", "bodyText": "This whole process seems more complicated than it needs to be. Why not create a new HashSet<VotingConfigExclusion>() here and then add the voting config exclusions to it as we go? IOW why collect the node IDs, then separately convert them to unresolved exclusions, and then do the lookups all over again for the resolved nodes?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397727589", "createdAt": "2020-03-25T09:52:22Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +65,100 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n+        else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzg5NA==", "bodyText": "I think this is equivalent:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    else if (arrayHasElement(nodeNames)) {\n          \n          \n            \n                    else {\n          \n          \n            \n                        return arrayHasElement(nodeNames) == false;\n          \n          \n            \n                    }", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397727894", "createdAt": "2020-03-25T09:52:51Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTY2OA==", "bodyText": "I don't think these things can be null so this can be simplified to a length check (and then inlined, the length check is shorter than the method call)", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397729668", "createdAt": "2020-03-25T09:55:48Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {\n+            return false;\n+        }\n+        else {\n+            // none of the node identifiers are set\n+            return true;\n+        }\n+    }\n+\n+    private boolean arrayHasElement(String[] array) {\n+        return array != null && array.length > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMTQ4OQ==", "bodyText": "Hmm this is a good point. We should deprecate the use of nodeDescriptions in this PR so we can remove it in 8.0. That means the constructor should log a deprecation warning  if nodeDescriptions is nonempty.\nThis is in addition to the deprecation warning on the REST layer, because it's possible that someone is using the transport client to bypass those checks in 7.x.\n(Also this TODO comment should be removed)", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397731489", "createdAt": "2020-03-25T09:58:40Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -121,15 +232,22 @@ public ActionRequestValidationException validate() {\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMjM2Mw==", "bodyText": "We can deduce that it's this assertion that fails from the stack trace, so there's no need for this message, but it would be useful to see the cluster state when it fails:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +\n          \n          \n            \n                    assert validVotingConfigExclusionState(clusterState) : clusterState;", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397732363", "createdAt": "2020-03-25T10:00:04Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -868,6 +868,8 @@ assert localNodeMayWinElection(getLastAcceptedState()) :\n     // Package-private for testing\n     ClusterState improveConfiguration(ClusterState clusterState) {\n         assert Thread.holdsLock(mutex) : \"Coordinator mutex not held\";\n+        assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMzU1Mg==", "bodyText": "The changes to this file are now only whitespace, would you revert them please?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397733552", "createdAt": "2020-03-25T10:01:57Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -337,6 +337,7 @@ public DiscoveryNode resolveNode(String node) {\n             return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new);\n         } else {\n             ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNDY5OQ==", "bodyText": "Could you revert the whitespace changes too?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397734699", "createdAt": "2020-03-25T10:03:47Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -87,16 +88,6 @@ public void testResolve() {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n-        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTM5NA==", "bodyText": "Did you mean to remove these assertions? Can you explain why?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735394", "createdAt": "2020-03-25T10:04:50Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -131,15 +322,8 @@ public void testResolveAndCheckMaximum() {\n                 .coordinationMetaData(CoordinationMetaData.builder().addVotingConfigExclusion(otherNode1Exclusion).build()));\n         final ClusterState clusterState = builder.build();\n \n-        assertThat(makeRequest().resolveVotingConfigExclusionsAndCheckMaximum(clusterState, 3, \"setting.name\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTY5Ng==", "bodyText": "Could you revert the whitespace changes to this file?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735696", "createdAt": "2020-03-25T10:05:18Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -181,7 +182,7 @@ public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedExce\n \n         assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n-                containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTg3Nw==", "bodyText": "I think the zero timeout is important for this test?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735877", "createdAt": "2020-03-25T10:05:37Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -231,7 +231,7 @@ public void testReturnsImmediatelyIfVoteAlreadyWithdrawn() throws InterruptedExc\n \n         // no observer to reconfigure\n         transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n-            new AddVotingConfigExclusionsRequest(new String[]{\"other1\"}, TimeValue.ZERO),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNjA3NA==", "bodyText": "Lost newline?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397736074", "createdAt": "2020-03-25T10:06:00Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -302,8 +304,7 @@ public void testJoinWithHigherTermButBetterStateGetsRejected() {\n         assertFalse(isLocalNodeElectedMaster());\n     }\n \n-    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() {\n-        DiscoveryNode node0 = newNode(0, true);\n+    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() { DiscoveryNode node0 = newNode(0, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNzUxMA==", "bodyText": "I think this might cause confusion as it's not clear exactly what change needs to be made. How about this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +\n          \n          \n            \n                private static final String DEPRECATION_MESSAGE = \"POST /_cluster/voting_config_exclusions/{node_name} will be removed in a future version. Please use POST /_cluster/voting_config_exclusions?node_ids=... or POST /_cluster/voting_config_exclusions?node_names=... instead.\"", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397737510", "createdAt": "2020-03-25T10:08:26Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -28,23 +28,28 @@\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n import java.util.List;\n \n import static org.elasticsearch.rest.RestRequest.Method.POST;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n-\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n \n+    private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczODM5OQ==", "bodyText": "Yes I think we should ignore master-ineligible nodes here.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397738399", "createdAt": "2020-03-25T10:09:52Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTgwOA==", "bodyText": "Yes, seems reasonable.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397741808", "createdAt": "2020-03-25T10:15:32Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -895,6 +897,31 @@ ClusterState improveConfiguration(ClusterState clusterState) {\n         return clusterState;\n     }\n \n+    /*\n+    * Valid Voting Configuration Exclusion state criteria:\n+    * 1. Every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name\n+    * 2. Every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID\n+     */\n+    private boolean validVotingConfigExclusionState(ClusterState clusterState) {\n+        Set<VotingConfigExclusion> votingConfigExclusions = clusterState.getVotingConfigExclusions();\n+        Set<String> nodeNamesWithAbsentId = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeId().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeName)\n+                                                .collect(Collectors.toSet());\n+        Set<String> nodeIdsWithAbsentName = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeName().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeId)\n+                                                .collect(Collectors.toSet());\n+        for (DiscoveryNode node : clusterState.getNodes()) {\n+            // TODO should this check be applied to master-eligible nodes only?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MzIwNQ==", "bodyText": "I think we should only do this if we actually resolved any missing values (i.e. newVotingConfigExclusions is different from currentVotingConfigExclusions).", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397743205", "createdAt": "2020-03-25T10:17:51Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?\n+                    joiniedNodeNameIds.put(node.getName(), node.getId());\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n                 }\n             }\n             results.success(joinTask);\n         }\n+\n         if (nodesChanged) {\n             rerouteService.reroute(\"post-join reroute\", Priority.HIGH, ActionListener.wrap(\n                 r -> logger.trace(\"post-join reroute completed\"),\n                 e -> logger.debug(\"post-join reroute failed\", e)));\n \n-            return results.build(allocationService.adaptAutoExpandReplicas(newState.nodes(nodesBuilder).build()));\n+            if (joiniedNodeNameIds.isEmpty() == false) {\n+                Set<CoordinationMetaData.VotingConfigExclusion> currentVotingConfigExclusions = currentState.getVotingConfigExclusions();\n+                Set<CoordinationMetaData.VotingConfigExclusion> newVotingConfigExclusions = currentVotingConfigExclusions.stream()\n+                    .map(e -> {\n+                        // Update nodeId in VotingConfigExclusion when a new node with excluded node name joins\n+                        if (CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER.equals(e.getNodeId()) &&\n+                            joiniedNodeNameIds.containsKey(e.getNodeName())) {\n+                            return new CoordinationMetaData.VotingConfigExclusion(joiniedNodeNameIds.get(e.getNodeName()), e.getNodeName());\n+                        } else {\n+                            return e;\n+                        }\n+                    }).collect(Collectors.toSet());\n+\n+                CoordinationMetaData.Builder coordMetaDataBuilder = CoordinationMetaData.builder(currentState.coordinationMetaData())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTA5Mw==", "bodyText": "No, cross-version compatibility should be covered by the BWC integration tests.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397745093", "createdAt": "2020-03-25T10:21:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -35,25 +36,50 @@\n \n import static java.util.Collections.emptyMap;\n import static java.util.Collections.emptySet;\n-import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n \n public class AddVotingConfigExclusionsRequestTests extends ESTestCase {\n     public void testSerialization() throws IOException {\n-        int descriptionCount = between(0, 5);\n+        int descriptionCount = between(1, 5);\n         String[] descriptions = new String[descriptionCount];\n         for (int i = 0; i < descriptionCount; i++) {\n             descriptions[i] = randomAlphaOfLength(10);\n         }\n         TimeValue timeout = TimeValue.timeValueMillis(between(0, 30000));\n-        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, timeout);\n+        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, Strings.EMPTY_ARRAY,\n+            Strings.EMPTY_ARRAY, timeout);\n         final AddVotingConfigExclusionsRequest deserialized = copyWriteable(originalRequest, writableRegistry(),\n             AddVotingConfigExclusionsRequest::new);\n         assertThat(deserialized.getNodeDescriptions(), equalTo(originalRequest.getNodeDescriptions()));\n         assertThat(deserialized.getTimeout(), equalTo(originalRequest.getTimeout()));\n     }\n \n+    public void testSerializationForNodeIdOrNodeName() throws IOException {\n+        // TODO still need adjustment for version? copyWriteable uses Version.CURRENT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODc5NQ==", "bodyText": "I think it would be better to only add this in testJoinUpdateVotingConfigExclusion by taking the result of initialState and adjusting it. It will make the setup for that test a bit longer, but I don't think we should pollute other tests with this change.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397748795", "createdAt": "2020-03-25T10:26:58Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -113,6 +113,8 @@ private static ClusterState initialState(DiscoveryNode localNode, long term, lon\n                         .term(term)\n                         .lastAcceptedConfiguration(config)\n                         .lastCommittedConfiguration(config)\n+                        .addVotingConfigExclusion(new CoordinationMetaData.VotingConfigExclusion(\n+                            CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER, \"knownNodeName\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTI3MA==", "bodyText": "Suggest making this non-private and static so you can test it directly, rather than indirectly by catching assertions in tests.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397751270", "createdAt": "2020-03-25T10:31:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -895,6 +897,31 @@ ClusterState improveConfiguration(ClusterState clusterState) {\n         return clusterState;\n     }\n \n+    /*\n+    * Valid Voting Configuration Exclusion state criteria:\n+    * 1. Every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name\n+    * 2. Every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID\n+     */\n+    private boolean validVotingConfigExclusionState(ClusterState clusterState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTg1Nw==", "bodyText": "I'd prefer to test the logic in the assertion directly (by making the method static) rather than this quite complicated setup that catches assertions.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397751857", "createdAt": "2020-03-25T10:32:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1418,4 +1421,53 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "committedDate": "2020-03-26T04:40:29Z", "message": "Address some comments that can be fixed quickly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fb29c3e76656cd13b4c8ee6e523ceb2adff97cc", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/0fb29c3e76656cd13b4c8ee6e523ceb2adff97cc", "committedDate": "2020-03-26T05:16:04Z", "message": "Make Coordinator#validVotingConfigExclusionState package static for testability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaa0f895ff2fa09ac0922997314944946647d042", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/aaa0f895ff2fa09ac0922997314944946647d042", "committedDate": "2020-03-26T17:25:36Z", "message": "Refactoring for node resolution logic and NodeJoinTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a353317d415560ba94947771f09e7fa1257277", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/02a353317d415560ba94947771f09e7fa1257277", "committedDate": "2020-03-26T18:29:29Z", "message": "Refactor out deprecated AddVotingConfigExclusionsRequest constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53f133c3c434d5aa22a4f79a2e4fdc3badae63a3", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/53f133c3c434d5aa22a4f79a2e4fdc3badae63a3", "committedDate": "2020-03-27T06:53:54Z", "message": "Fix checkstyle and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fe180ee5e48039d21fdbfaf87f10c9920b85b5d", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/5fe180ee5e48039d21fdbfaf87f10c9920b85b5d", "committedDate": "2020-03-27T07:02:10Z", "message": "Merge branch 'master' into issue-47990"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6dd6fd5e9d1501c84345f1c666659fed1bd9ef", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/0f6dd6fd5e9d1501c84345f1c666659fed1bd9ef", "committedDate": "2020-03-27T07:54:14Z", "message": "Fix test failure due to misnomer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ0NDcz", "url": "https://github.com/elastic/elasticsearch/pull/50836#pullrequestreview-389944473", "createdAt": "2020-04-08T12:53:41Z", "commit": {"oid": "0f6dd6fd5e9d1501c84345f1c666659fed1bd9ef"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d0a976f6366dd7370239e42aa6858837380e26", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0d0a976f6366dd7370239e42aa6858837380e26", "committedDate": "2020-04-08T17:03:59Z", "message": "Revert \"Refactor out deprecated AddVotingConfigExclusionsRequest constructor\"\n\nThis reverts commit 02a353317d415560ba94947771f09e7fa1257277."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7a226f29540e46f5d6e26db8722e1f8123db69", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/5c7a226f29540e46f5d6e26db8722e1f8123db69", "committedDate": "2020-04-08T18:26:42Z", "message": "Migrate some tests that use nodeDescriptions to using nodeNames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6fbce8534d44b6b073415412bccc7aa14c77831", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/c6fbce8534d44b6b073415412bccc7aa14c77831", "committedDate": "2020-04-08T20:23:33Z", "message": "Fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd39120b5cd35a42ba6c53a3de6a349cb119fff", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/fcd39120b5cd35a42ba6c53a3de6a349cb119fff", "committedDate": "2020-04-08T20:26:19Z", "message": "Merge branch 'master' into issue-47990"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e6247b5e768e28f797b4e0e96eba803e76736c", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/a2e6247b5e768e28f797b4e0e96eba803e76736c", "committedDate": "2020-04-09T03:27:28Z", "message": "Revert \"Merge branch 'master' into issue-47990\"\n\nThis reverts commit fcd39120b5cd35a42ba6c53a3de6a349cb119fff."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf6c7388184d57d0e1b523a3aaa1efc6053d173", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/ccf6c7388184d57d0e1b523a3aaa1efc6053d173", "committedDate": "2020-04-09T03:44:46Z", "message": "Merge branch 'master' into issue-47990"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/2a01d702a3861af4655b2c6524b0adfb61e38ba0", "committedDate": "2020-04-09T06:18:51Z", "message": "Fix spacing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjQwNzg0", "url": "https://github.com/elastic/elasticsearch/pull/50836#pullrequestreview-390640784", "createdAt": "2020-04-09T09:39:12Z", "commit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTozOToxMlrOGDRSMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDowNzozNFrOGDSSRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4MjA5OA==", "bodyText": "Suggest a Map<String, DiscoveryNode> here rather than doing two lookups, and also suggest only adding master-eligible nodes to this map rather than filtering them out below.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406082098", "createdAt": "2020-04-09T09:39:12Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -18,70 +18,140 @@\n  */\n package org.elasticsearch.action.admin.cluster.configuration;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionRequestValidationException;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.coordination.CoordinationMetadata.VotingConfigExclusion;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A request to add voting config exclusions for certain master-eligible nodes, and wait for these nodes to be removed from the voting\n  * configuration.\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n+    public static final String DEPRECATION_MESSAGE = \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+                                                                        LogManager.getLogger(AddVotingConfigExclusionsRequest.class));\n     private final String[] nodeDescriptions;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n \n     /**\n-     * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n+     * Construct a request to add voting config exclusions for master-eligible nodes matching the given node names, and wait for a\n      * default 30 seconds for these exclusions to take effect, removing the nodes from the voting configuration.\n-     * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n+     * @param nodeNames Names of the nodes to add - see {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n-        this(nodeDescriptions, TimeValue.timeValueSeconds(30));\n+    public AddVotingConfigExclusionsRequest(String... nodeNames) {\n+        this(Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, nodeNames, TimeValue.timeValueSeconds(30));\n     }\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for these\n      * nodes to be removed from the voting configuration.\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n+     * @param nodeIds Ids of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n+     * @param nodeNames Names of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if (noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        } else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\",\n+                \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\");\n+        }\n+\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n-                .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-\n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+        Set<VotingConfigExclusion> newVotingConfigExclusions = new HashSet<>();\n+\n+        if (nodeDescriptions.length >= 1) {\n+            newVotingConfigExclusions = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (newVotingConfigExclusions.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else if (nodeIds.length >= 1) {\n+            for (String nodeId : nodeIds) {\n+                if (allNodes.nodeExists(nodeId)) {\n+                    DiscoveryNode discoveryNode = allNodes.get(nodeId);\n+                    if (discoveryNode.isMasterNode()) {\n+                        newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n+                    }\n+                } else {\n+                    newVotingConfigExclusions.add(new VotingConfigExclusion(nodeId, VotingConfigExclusion.MISSING_VALUE_MARKER));\n+                }\n+            }\n+        } else {\n+            Map<String, String> existingNodeNameId = StreamSupport.stream(allNodes.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4NTMwMw==", "bodyText": "I think this is equivalent and simpler:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (Sets.difference(currentVotingConfigExclusions, newVotingConfigExclusions).isEmpty() == false) {\n          \n          \n            \n                            if (newVotingConfigExclusions.equals(currentVotingConfigExclusions) == false) {", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406085303", "createdAt": "2020-04-09T09:44:55Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,18 +149,47 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    if (node.isMasterNode()) {\n+                        joiniedNodeNameIds.put(node.getName(), node.getId());\n+                    }\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n                 }\n             }\n             results.success(joinTask);\n         }\n+\n         if (nodesChanged) {\n             rerouteService.reroute(\"post-join reroute\", Priority.HIGH, ActionListener.wrap(\n                 r -> logger.trace(\"post-join reroute completed\"),\n                 e -> logger.debug(\"post-join reroute failed\", e)));\n \n+            if (joiniedNodeNameIds.isEmpty() == false) {\n+                Set<CoordinationMetadata.VotingConfigExclusion> currentVotingConfigExclusions = currentState.getVotingConfigExclusions();\n+                Set<CoordinationMetadata.VotingConfigExclusion> newVotingConfigExclusions = currentVotingConfigExclusions.stream()\n+                    .map(e -> {\n+                        // Update nodeId in VotingConfigExclusion when a new node with excluded node name joins\n+                        if (CoordinationMetadata.VotingConfigExclusion.MISSING_VALUE_MARKER.equals(e.getNodeId()) &&\n+                            joiniedNodeNameIds.containsKey(e.getNodeName())) {\n+                            return new CoordinationMetadata.VotingConfigExclusion(joiniedNodeNameIds.get(e.getNodeName()), e.getNodeName());\n+                        } else {\n+                            return e;\n+                        }\n+                    }).collect(Collectors.toSet());\n+\n+                // if VotingConfigExclusions did get updated\n+                if (Sets.difference(currentVotingConfigExclusions, newVotingConfigExclusions).isEmpty() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MjQzNg==", "bodyText": "To clarify that we already excluded the case where the user didn't ask for anything at all:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                    } else {\n          \n          \n            \n                        assert nodeNames.length >= 1;", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406092436", "createdAt": "2020-04-09T09:57:10Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -18,70 +18,140 @@\n  */\n package org.elasticsearch.action.admin.cluster.configuration;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionRequestValidationException;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.coordination.CoordinationMetadata.VotingConfigExclusion;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A request to add voting config exclusions for certain master-eligible nodes, and wait for these nodes to be removed from the voting\n  * configuration.\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n+    public static final String DEPRECATION_MESSAGE = \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+                                                                        LogManager.getLogger(AddVotingConfigExclusionsRequest.class));\n     private final String[] nodeDescriptions;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n \n     /**\n-     * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n+     * Construct a request to add voting config exclusions for master-eligible nodes matching the given node names, and wait for a\n      * default 30 seconds for these exclusions to take effect, removing the nodes from the voting configuration.\n-     * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n+     * @param nodeNames Names of the nodes to add - see {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n-        this(nodeDescriptions, TimeValue.timeValueSeconds(30));\n+    public AddVotingConfigExclusionsRequest(String... nodeNames) {\n+        this(Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, nodeNames, TimeValue.timeValueSeconds(30));\n     }\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for these\n      * nodes to be removed from the voting configuration.\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n+     * @param nodeIds Ids of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n+     * @param nodeNames Names of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if (noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        } else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\",\n+                \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\");\n+        }\n+\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n-                .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-\n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+        Set<VotingConfigExclusion> newVotingConfigExclusions = new HashSet<>();\n+\n+        if (nodeDescriptions.length >= 1) {\n+            newVotingConfigExclusions = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (newVotingConfigExclusions.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else if (nodeIds.length >= 1) {\n+            for (String nodeId : nodeIds) {\n+                if (allNodes.nodeExists(nodeId)) {\n+                    DiscoveryNode discoveryNode = allNodes.get(nodeId);\n+                    if (discoveryNode.isMasterNode()) {\n+                        newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n+                    }\n+                } else {\n+                    newVotingConfigExclusions.add(new VotingConfigExclusion(nodeId, VotingConfigExclusion.MISSING_VALUE_MARKER));\n+                }\n+            }\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5ODUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {\n          \n          \n            \n                public void testImproveConfigurationPerformsVotingConfigExclusionStateCheck() {", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406098503", "createdAt": "2020-04-09T10:07:34Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1433,4 +1436,46 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d6353eb1962ff0a12ee00c43d6effe75ece1c31", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/6d6353eb1962ff0a12ee00c43d6effe75ece1c31", "committedDate": "2020-04-10T01:47:54Z", "message": "Update server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n\nCo-Authored-By: David Turner <david.turner@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99a584d65fa3aacffc8e99709e60f6115fe5322f", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/99a584d65fa3aacffc8e99709e60f6115fe5322f", "committedDate": "2020-04-10T01:48:41Z", "message": "Update server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\nCo-Authored-By: David Turner <david.turner@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ab437277a67d4f48689a32374424c2ba393992", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/89ab437277a67d4f48689a32374424c2ba393992", "committedDate": "2020-04-10T01:49:12Z", "message": "Update server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\n\nCo-Authored-By: David Turner <david.turner@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd64f4b9f4673b3c341bb52a3df5098cc046db1b", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd64f4b9f4673b3c341bb52a3df5098cc046db1b", "committedDate": "2020-04-10T01:52:28Z", "message": "Address feedback to use Map<String, DiscoveryNode> for existing nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51f74bfaac3fd279fd895b28032b1c56840b4a5b", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/51f74bfaac3fd279fd895b28032b1c56840b4a5b", "committedDate": "2020-04-10T17:55:00Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NDMyNTg3", "url": "https://github.com/elastic/elasticsearch/pull/50836#pullrequestreview-394432587", "createdAt": "2020-04-16T08:58:33Z", "commit": {"oid": "51f74bfaac3fd279fd895b28032b1c56840b4a5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3746, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}