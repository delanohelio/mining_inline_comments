{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5Mjk1NDcw", "number": 64948, "title": "Adding a warning header when a license is about to expire", "bodyText": "This implementation will add the warning header\nif the license is going to expire in less than\n{LICENSE_EXPIRATION_WARNING_PERIOD} days.\nThe messages added:\nWarning: 299 Elasticsearch-8.0.0-###\"Your license will expire in [N] days. Contact your administrator or update your license for continued use of features\"\nor\nWarning: 299 Elasticsearch-8.0.0-### \"Your license expires today. Contact your administrator or update your license for continued use of features\"\nIf license has expired less than\n{GRACE_PERIOD_DURATION} days ago following\nwarning is added:\nWarning: 299 Elasticsearch-8.0.0-### \"Your license expired on [\"EEEE, MMMM dd, yyyy\" ]. Contact your administrator or update your license for continued use of features\"\nBoth {LICENSE_EXPIRATION_WARNING_PERIOD}\nand {GRACE_PERIOD_DURATION} are currently 7 days.\nThe message will be added to each request unless\nauthentication fails.\nNote: with this change all warning headers will be removed\nfrom a response if authentication fails.\nResolves #60562", "createdAt": "2020-11-11T16:05:08Z", "url": "https://github.com/elastic/elasticsearch/pull/64948", "merged": true, "mergeCommit": {"oid": "0b586c2886a053028bc734eaca4dba5f16a4d9c8"}, "closed": true, "closedAt": "2020-12-04T16:41:12Z", "author": {"login": "BigPandaToo"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbgMfqAH2gAyNTE5Mjk1NDcwOmY4NWE2MjQzMmQxY2FiMGMyNGE1Y2Y1YjRiNWVmZWJlNDAyYzBmNjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi2OPGgH2gAyNTE5Mjk1NDcwOmE5MzlhZTg1YTdhZTZjYWM3ZmUyMGFlOWU1NjUzYjBjNjg5YzZlZmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f85a62432d1cab0c24a5cf5b4b5efebe402c0f63", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/f85a62432d1cab0c24a5cf5b4b5efebe402c0f63", "committedDate": "2020-11-11T16:03:48Z", "message": "This change adds a warning header when a license is about to expire\n\nResolves #60562"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af38237928955e54cab5d6da544ffddfabab603f", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/af38237928955e54cab5d6da544ffddfabab603f", "committedDate": "2020-11-11T16:52:24Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70461a2b97617c8d0f6577f45afb4328e9b7b3f6", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/70461a2b97617c8d0f6577f45afb4328e9b7b3f6", "committedDate": "2020-11-11T16:59:18Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e3cebe217b738eafe41c272c1553b2d95cf676", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/f6e3cebe217b738eafe41c272c1553b2d95cf676", "committedDate": "2020-11-11T19:55:39Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e52f2318e01cf795d97f4c2f9a5422d12d4909a8", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/e52f2318e01cf795d97f4c2f9a5422d12d4909a8", "committedDate": "2020-11-12T09:41:38Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10029990758325d0400f7b2abc5a2607e4a99dbf", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/10029990758325d0400f7b2abc5a2607e4a99dbf", "committedDate": "2020-11-12T20:07:31Z", "message": "This change adds realm name of the realm used to perform authentication to the responses of _security/oidc/authenticate and _security/oidc/authenticate APIs\n\nResolves #53161"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTIwMDM3", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-532120037", "createdAt": "2020-11-17T08:25:13Z", "commit": {"oid": "10029990758325d0400f7b2abc5a2607e4a99dbf"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoyNToxM1rOH0pWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODozODo0NVrOH0p2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NTU0Nw==", "bodyText": "s/avILble/available. Nit: also change the description of the Status class above to add the expiration date", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524965547", "createdAt": "2020-11-17T08:25:13Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -400,9 +404,13 @@ private static boolean isBasic(OperationMode mode) {\n         /** True if the license is active, or false if it is expired. */\n         final boolean active;\n \n-        Status(OperationMode mode, boolean active) {\n+        /** The current expiration date of the license; Long.MAX_VALUE if not avILble yet. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10029990758325d0400f7b2abc5a2607e4a99dbf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MTM2NA==", "bodyText": "I think we'd need to access this by calling checkAgainstStatus instead of accessing the licenseExpiryDate  field directly", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524971364", "createdAt": "2020-11-17T08:34:59Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,18 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0\n+            && now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10029990758325d0400f7b2abc5a2607e4a99dbf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MjA5Nw==", "bodyText": "nit: if (feature....", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524972097", "createdAt": "2020-11-17T08:36:14Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,18 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10029990758325d0400f7b2abc5a2607e4a99dbf"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MzYxNg==", "bodyText": "I'm not sure about the wording here but I'll defer to a native speaker and maybe get Fabio's input too?\nMaybe s/update/renew ?  and s/for continued use of/in order to continue using the licensed ?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524973616", "createdAt": "2020-11-17T08:38:45Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,18 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0\n+            && now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {\n+            HeaderWarning.addWarning(\"Your license will expire in [{}] days. \" +\n+                    \"Contact your administrator or update your license for continued use of features\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10029990758325d0400f7b2abc5a2607e4a99dbf"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "committedDate": "2020-11-17T21:47:44Z", "message": "Adding doc for the new API introduced by #64517 - /_security/saml/metadata/{realm}\n\nRelated to #49018"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffcd72bed08f16f5d9603a0cb2e9885955a86a95", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/ffcd72bed08f16f5d9603a0cb2e9885955a86a95", "committedDate": "2020-11-17T22:37:02Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzI3MDgx", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-533327081", "createdAt": "2020-11-18T10:56:53Z", "commit": {"oid": "ffcd72bed08f16f5d9603a0cb2e9885955a86a95"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo1Njo1NFrOH1oLlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo1NzozNVrOH1oNSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg==", "bodyText": "If we're in the grace period, shouldn't this say has expired ?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r525994902", "createdAt": "2020-11-18T10:56:54Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,17 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n+            HeaderWarning.addWarning(\"Your license will expire in [{}] days. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffcd72bed08f16f5d9603a0cb2e9885955a86a95"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NTMzNg==", "bodyText": "Why is this dependent on the GRACE_PERIOD ? It seems to be a co-incidence that they're both 7days, but they shouldn't be tied to one another.", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r525995336", "createdAt": "2020-11-18T10:57:35Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -627,6 +644,22 @@ public boolean isAllowedByLicense(OperationMode minimumMode, boolean needActive)\n         });\n     }\n \n+    /**\n+     * Test whether current license expires in less than {@code GRACE_PERIOD_DURATION}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffcd72bed08f16f5d9603a0cb2e9885955a86a95"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "committedDate": "2020-11-19T18:39:52Z", "message": "Adding a warning header when a license is about to expire\n\nResolves #60562"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTg4NDM2", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-535188436", "createdAt": "2020-11-20T07:57:43Z", "commit": {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Mjk0MTQw", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-535294140", "createdAt": "2020-11-20T10:12:25Z", "commit": {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoxMjoyNVrOH3JZgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo0NDo0OFrOH3Kj9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NzcxMw==", "bodyText": "Given what this does, would it make sense to name it shouldWarnAboutLicense() ?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527587713", "createdAt": "2020-11-20T10:12:25Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -627,6 +650,22 @@ public boolean isAllowedByLicense(OperationMode minimumMode, boolean needActive)\n         });\n     }\n \n+    /**\n+     * Test whether current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}.\n+     *\n+     * @param now  Current time in milliseconds\n+     *\n+     * @return true if current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}, otherwise false\n+     */\n+    public boolean isLicenseExpiring(long now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5NjExNQ==", "bodyText": "Do we have to do the double update dance here? setLicensingExpirationDate is the only thing that calls update with anything other than Long.MAX_VALUE, what cluster state could trigger the license state (Expiration date) to change ?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527596115", "createdAt": "2020-11-20T10:26:44Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -235,8 +293,42 @@ private void enableLicensing(License.OperationMode operationMode) throws Excepti\n             // re-apply the update in case any node received an updated cluster state that triggered the license state\n             // to change\n             for (XPackLicenseState licenseState : internalCluster().getInstances(XPackLicenseState.class)) {\n-                licenseState.update(operationMode, true, null);\n+                licenseState.update(operationMode, true, Long.MAX_VALUE, null);\n             }\n         }, 30L, TimeUnit.SECONDS);\n     }\n+\n+    private void setLicensingExpirationDate(License.OperationMode operationMode, long expirationDate) throws Exception {\n+        // do this in an await busy since there is a chance that the setting expiration date of the license is\n+        // overwritten by some other cluster activity and the node throws an exception while we\n+        // wait for things to stabilize!\n+        assertBusy(() -> {\n+            // first update the license so we can execute monitoring actions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwNjM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final String expiryMessage = days == 0? \"expires today\":\n          \n          \n            \n                        final String expiryMessage = days == 0 ? \"expires today\" :", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527606385", "createdAt": "2020-11-20T10:44:06Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -505,12 +516,24 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwNjc3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n          \n          \n            \n                            (days > 0 ? String.format(Locale.ROOT, \"will expire in [%d] days\", days):", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527606773", "createdAt": "2020-11-20T10:44:48Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -505,12 +516,24 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":\n+                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbbd2fa2363e6711c47837769dfe33e0e38b125c", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/fbbd2fa2363e6711c47837769dfe33e0e38b125c", "committedDate": "2020-11-23T16:05:16Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a57d4b163070c635f73eec402e0fd2842e887650", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/a57d4b163070c635f73eec402e0fd2842e887650", "committedDate": "2020-11-23T17:17:23Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "committedDate": "2020-11-23T20:13:41Z", "message": "Addressing the PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODI1NTM1", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-536825535", "createdAt": "2020-11-23T20:35:43Z", "commit": {"oid": "1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ed1cb2741104d21cdb6458403a9a672ad26b65a", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ed1cb2741104d21cdb6458403a9a672ad26b65a", "committedDate": "2020-11-26T10:19:43Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MTkzMzM1", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-539193335", "createdAt": "2020-11-26T10:37:38Z", "commit": {"oid": "1ed1cb2741104d21cdb6458403a9a672ad26b65a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNzozOFrOH6Vjzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNzozOFrOH6Vjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMjY4Ng==", "bodyText": "Not necessary?  This method doesn't appear to use Math.abs().", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r530932686", "createdAt": "2020-11-26T10:37:38Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -507,12 +513,15 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed1cb2741104d21cdb6458403a9a672ad26b65a"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ca874c54b20bec12bf7d8c914ba3f21fa546e1", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/80ca874c54b20bec12bf7d8c914ba3f21fa546e1", "committedDate": "2020-11-26T11:23:23Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07fa3e2d67ea5250e0c9dce9ca8688f3b632f8b3", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/07fa3e2d67ea5250e0c9dce9ca8688f3b632f8b3", "committedDate": "2020-11-26T18:26:59Z", "message": "Switching back to adding the header during featureCheck to allow\nwarnings when authentication is disabled as well. Adding filterHeader\nimplementation to SecurityRestFilter exception handling to remove all\nthe warnings if authentication fails."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/39e7ca7b5d29c8efa4519895b67d4843f387d3f8", "committedDate": "2020-11-30T19:17:09Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNTE2MzUx", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-541516351", "createdAt": "2020-12-01T06:17:10Z", "commit": {"oid": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoxNzoxMVrOH8ZncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyNTozMVrOH8Zx0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NjMwNQ==", "bodyText": "For expired licenses, I think it's preferable to just print out the date that is expired, rather than calculate how lonh ago that was.\nThat's what the log warning does and it seems neater for this case.\n\nLICENSE [EXPIRED] ON [SUNDAY, NOVEMBER 29, 2020]\n\nThe number of days makes sense for \"will expire\" because it creates a sense of urgency, but once it's expired I think the date is a better option.", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533096305", "createdAt": "2020-12-01T06:17:11Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -507,12 +518,26 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n+        long licenseExpirationDate = getLicenseExpiryDate();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n+            now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":\n+                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n+                    String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODE0OQ==", "bodyText": "I think we should be doing the first round of calculations in millis, not in days otherwise we potentially says \"expires today\" after the expiry date (because it's less than 1 day expired)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n          \n          \n            \n                        now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n          \n          \n            \n                        final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n          \n          \n            \n                        final String expiryMessage = days == 0? \"expires today\":\n          \n          \n            \n                            (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n          \n          \n            \n                                String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));\n          \n          \n            \n                \n          \n          \n            \n                    if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0) {\n          \n          \n            \n                        final long expiryMillis = licenseExpirationDate - now;        \n          \n          \n            \n                        if (expiryMillis < LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n          \n          \n            \n                            final String expiryMessage;\n          \n          \n            \n                            if (expiryMillis <= 0) {\n          \n          \n            \n                                expiryMessage = \"expired on [\" + DATE_FORMATTER.formatMillis(expirationMillis) + \"]\";\n          \n          \n            \n                            } else {\n          \n          \n            \n                                final long days = TimeUnit.MILLISECONDS.toDays(expiryMillis);\n          \n          \n            \n                                expiryMessage = days == 0 ? \"expires today\": \n          \n          \n            \n                                   String.format(Locale.ROOT, \"will expire in [%d] days\", days);\n          \n          \n            \n                            }", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533098149", "createdAt": "2020-12-01T06:23:02Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -507,12 +518,26 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n+        long licenseExpirationDate = getLicenseExpiryDate();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n+            now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":\n+                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n+                    String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODk2Mw==", "bodyText": "Do we have a test for this anywhere?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533098963", "createdAt": "2020-12-01T06:25:31Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "diffHunk": "@@ -100,6 +102,14 @@ private void handleException(String actionType, RestRequest request, RestChannel\n                 @Override\n                 protected boolean skipStackTrace() { return restStatus == RestStatus.UNAUTHORIZED; }\n \n+                @Override\n+                public Map<String, List<String>> filterHeaders(Map<String, List<String>> headers) {\n+                    if (headers.containsKey(\"Warning\")) {\n+                        return Maps.copyMapWithRemovedEntry(headers, \"Warning\");\n+                    }\n+                    return headers;\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27df6f4d69e968dc39e417ef3abafc441ffa4cb", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/d27df6f4d69e968dc39e417ef3abafc441ffa4cb", "committedDate": "2020-12-01T19:42:24Z", "message": "Changing the wording for \"expired\" message to be consistent with the log\n messages; changing \"today\" calculation; adding a test case for failing\n authN to make sure we remove the warning header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNTYwNzA0", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-543560704", "createdAt": "2020-12-03T05:59:21Z", "commit": {"oid": "d27df6f4d69e968dc39e417ef3abafc441ffa4cb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTo1OToyMVrOH97mWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTo1OToyMVrOH97mWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMTY1OQ==", "bodyText": "In general we prefer to use Matcher based assertions because they provide better context when something fails.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(afterWarningHeaders.size() == 1);\n          \n          \n            \n                    assertTrue(afterWarningHeaders.stream().anyMatch(v ->v.contains(\"Your license will expire in [6] days. \" +\n          \n          \n            \n                        \"Contact your administrator or update your license for continued use of features\")));\n          \n          \n            \n                    assertThat(afterWarningHeaders, Matchers.hasSize(1));\n          \n          \n            \n                    assertThat(afterWarningHeaders, Matchers.contains(\"Your license will expire in [6] days. \" +\n          \n          \n            \n                        \"Contact your administrator or update your license for continued use of features\"));\n          \n      \n    \n    \n  \n\n(Although, technically, the first assertion is redundant, because the `contains matcher already checks size)", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r534701659", "createdAt": "2020-12-03T05:59:21Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -192,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(afterWarningHeaders.size() == 1);\n+        assertTrue(afterWarningHeaders.stream().anyMatch(v ->v.contains(\"Your license will expire in [6] days. \" +\n+            \"Contact your administrator or update your license for continued use of features\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d27df6f4d69e968dc39e417ef3abafc441ffa4cb"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3f2eba6fbe9239d9bfc67dcb0c0f55cacd29126", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/a3f2eba6fbe9239d9bfc67dcb0c0f55cacd29126", "committedDate": "2020-12-03T17:52:59Z", "message": "Merge branch 'master' into Warning_header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "committedDate": "2020-12-03T18:58:06Z", "message": "Small changes in the way we verify header in tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTgxMTAz", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-544581103", "createdAt": "2020-12-04T00:56:27Z", "commit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzc4MDk0", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-544778094", "createdAt": "2020-12-04T09:14:38Z", "commit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNDozOVrOH_Hs0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMDowN1rOH_IUaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODQ5Nw==", "bodyText": "Do we want to remove all warning headers on authentication failure?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535948497", "createdAt": "2020-12-04T09:14:39Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "diffHunk": "@@ -100,6 +102,14 @@ private void handleException(String actionType, RestRequest request, RestChannel\n                 @Override\n                 protected boolean skipStackTrace() { return restStatus == RestStatus.UNAUTHORIZED; }\n \n+                @Override\n+                public Map<String, List<String>> filterHeaders(Map<String, List<String>> headers) {\n+                    if (headers.containsKey(\"Warning\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDA0MQ==", "bodyText": "I think you can use a randomAlphaNumericOfLength , or a permutation of TEST_PASSWORD plus some random string for whenever we need this, other than defining it here. That's just personal preference, no strong views, feel free to keep as is if you prefer it", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535950041", "createdAt": "2020-12-04T09:16:56Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/test/SecuritySettingsSourceField.java", "diffHunk": "@@ -10,6 +10,7 @@\n public final class SecuritySettingsSourceField {\n     public static final SecureString TEST_PASSWORD_SECURE_STRING = new SecureString(\"x-pack-test-password\".toCharArray());\n     public static final String TEST_PASSWORD = \"x-pack-test-password\";\n+    public static final String TEST_INVALID_PASSWORD = \"invalid-test-password\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDg2MQ==", "bodyText": "use assertThat ?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535950861", "createdAt": "2020-12-04T09:18:15Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MTI2NQ==", "bodyText": "nit: Do we need all the empty lines?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535951265", "createdAt": "2020-12-04T09:18:50Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NjQzMg==", "bodyText": "I Guess we are fine with the message in warnigns and subtleties of toDays and being close to midnight in a given timezone , right? I think we are, just asking for completeness.", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535956432", "createdAt": "2020-12-04T09:26:50Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -509,12 +520,26 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        final long licenseExpiryDate = getLicenseExpiryDate();\n+        final long diff = licenseExpiryDate - System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n+            LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() > diff) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(diff);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1ODE1NA==", "bodyText": "use assertThat ?", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535958154", "createdAt": "2020-12-04T09:29:24Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now + 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now - 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        long finalNewExpirationDate = newExpirationDate;\n+        String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n+            LicenseService.DATE_FORMATTER.formatMillis(finalNewExpirationDate));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(expiredMessage +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+    }\n+\n+    public void testWarningHeaderAuthenticationFailed() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_INVALID_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+        Header[] headers = null;\n+        try {\n+            getRestClient().performRequest(request);\n+        } catch (ResponseException e) {\n+            headers = e.getResponse().getHeaders();\n+            List<String> afterWarningHeaders= getWarningHeaders(e.getResponse().getHeaders());\n+            assertThat(afterWarningHeaders, Matchers.hasSize(0));\n+        }\n+        assertTrue(headers != null && headers.length == 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1ODYzMg==", "bodyText": "nit suggestion : testNoWarningHeaderWhenAuthenticationFailed", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535958632", "createdAt": "2020-12-04T09:30:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now + 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now - 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        long finalNewExpirationDate = newExpirationDate;\n+        String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n+            LicenseService.DATE_FORMATTER.formatMillis(finalNewExpirationDate));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(expiredMessage +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+    }\n+\n+    public void testWarningHeaderAuthenticationFailed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dc8b9c80857634bd34794740d64f0f4440b7074", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/8dc8b9c80857634bd34794740d64f0f4440b7074", "committedDate": "2020-12-04T10:45:45Z", "message": "Nit changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODUwMDQ2", "url": "https://github.com/elastic/elasticsearch/pull/64948#pullrequestreview-544850046", "createdAt": "2020-12-04T10:48:43Z", "commit": {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a939ae85a7ae6cac7fe20ae9e5653b0c689c6efd", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/a939ae85a7ae6cac7fe20ae9e5653b0c689c6efd", "committedDate": "2020-12-04T11:41:05Z", "message": "Merge branch 'master' into Warning_header"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1022, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}