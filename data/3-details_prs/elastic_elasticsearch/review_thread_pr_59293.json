{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODE1MTMw", "number": 59293, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMjoyMVrOEM73aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1NzozNFrOENpWVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk5MjA4OnYy", "diffSide": "RIGHT", "path": "gradle/formatting.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMjoyMVrOGvVTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMjoyMVrOGvVTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4NTI1Mg==", "bodyText": "Does this need to be removed?", "url": "https://github.com/elastic/elasticsearch/pull/59293#discussion_r452285252", "createdAt": "2020-07-09T15:02:21Z", "author": {"login": "dakrone"}, "path": "gradle/formatting.gradle", "diffHunk": "@@ -127,6 +127,8 @@ def projectPathsToExclude = [\n   ':x-pack:plugin:ccr',\n   ':x-pack:plugin:ccr:qa',\n   ':x-pack:plugin:core',\n+  // TODO: REMOVE BEFORE MAKING PR REVIEWABLE:\n+  ':x-pack:plugin:data-streams',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2a7e2867835e149d9a205ce4e61eb2633b93d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDAwNTg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowNTozOFrOGvVcXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowNTozOFrOGvVcXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4NzU4Mg==", "bodyText": "I think we should fail with a parsing error like \"[index_template] unknown field [data_stream]\" to make it clearer that the entire data stream configuration is unsupported, rather than just the @timestamp part", "url": "https://github.com/elastic/elasticsearch/pull/59293#discussion_r452287582", "createdAt": "2020-07-09T15:05:38Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -1136,7 +1137,15 @@ private static void validateCompositeTemplate(final ClusterState state,\n                         validateTimestampFieldMapping(tsFieldName, mapperService);\n                     }\n                 } catch (Exception e) {\n-                    throw new IllegalArgumentException(\"invalid composite mappings for [\" + templateName + \"]\", e);\n+                    final String expectedMessageIfDataStreamsIsUsedAndNotSupported =\n+                        \"Failed to parse mapping: Root mapping definition has unsupported parameters:  [_timestamp : {path=@timestamp}]\";\n+                    if (expectedMessageIfDataStreamsIsUsedAndNotSupported.equals(e.getMessage())) {\n+                        // Fail like a parsing expection, since we will be moving data_stream template out of server module and\n+                        // then we would fail with the same error message, like we do here.\n+                        throw new XContentParseException(\"[index_template] unknown field [@timestamp]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2a7e2867835e149d9a205ce4e61eb2633b93d4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDAzMzE0OnYy", "diffSide": "RIGHT", "path": "gradle/formatting.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxMTo0OFrOGvVttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxMTo0OFrOGvVttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MjAyMw==", "bodyText": "I will remove this before merging, this to make potential merge conflicts easier to resolve.", "url": "https://github.com/elastic/elasticsearch/pull/59293#discussion_r452292023", "createdAt": "2020-07-09T15:11:48Z", "author": {"login": "martijnvg"}, "path": "gradle/formatting.gradle", "diffHunk": "@@ -127,6 +127,8 @@ def projectPathsToExclude = [\n   ':x-pack:plugin:ccr',\n   ':x-pack:plugin:ccr:qa',\n   ':x-pack:plugin:core',\n+  // TODO: REMOVE BEFORE MAKING PR REVIEWABLE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2a7e2867835e149d9a205ce4e61eb2633b93d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA0MTA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/data-streams/qa/rest/src/test/resources/rest-api-spec/test/data-streams/20_unsupported_apis.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxMzozOVrOGvVysQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxMzozOVrOGvVysQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MzI5Nw==", "bodyText": "This is a supported API. Can move in a follow-up PR if easier.", "url": "https://github.com/elastic/elasticsearch/pull/59293#discussion_r452293297", "createdAt": "2020-07-09T15:13:39Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/data-streams/qa/rest/src/test/resources/rest-api-spec/test/data-streams/20_unsupported_apis.yml", "diffHunk": "@@ -0,0 +1,301 @@\n+---\n+\"Test apis that do not supported data streams\":\n+  - skip:\n+      version: \" - 7.8.99\"\n+      reason: \"data streams only supported in 7.9+\"\n+      features: allowed_warnings\n+\n+  - do:\n+      allowed_warnings:\n+        - \"index template [my-template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [my-template] will take precedence during new index creation\"\n+      indices.put_index_template:\n+        name: my-template\n+        body:\n+          index_patterns: [logs-*]\n+          template:\n+            mappings:\n+              properties:\n+                '@timestamp':\n+                  type: date\n+          data_stream:\n+            timestamp_field: '@timestamp'\n+\n+  - do:\n+      indices.create_data_stream:\n+        name: logs-foobar\n+  - is_true: acknowledged\n+\n+  - do:\n+      index:\n+        index:  logs-foobar\n+        refresh: true\n+        body:\n+          '@timestamp': '2020-12-12'\n+          foo: bar\n+  - match: {_index: .ds-logs-foobar-000001}\n+\n+  - do:\n+      search:\n+        index: logs-foobar\n+        body: { query: { match_all: {} } }\n+  - length:   { hits.hits: 1  }\n+  - match: { hits.hits.0._index: .ds-logs-foobar-000001 }\n+  - match: { hits.hits.0._source.foo: 'bar' }\n+\n+  - do:\n+      catch: missing\n+      indices.delete:\n+        index: logs-foobar\n+\n+  - do:\n+      indices.delete_data_stream:\n+        name: logs-foobar\n+  - is_true: acknowledged\n+\n+---\n+\"Prohibit clone on data stream's write index\":\n+  - skip:\n+      version: \" - 7.8.99\"\n+      reason: \"data streams only supported in 7.9+\"\n+      features: allowed_warnings\n+\n+  - do:\n+      allowed_warnings:\n+        - \"index template [my-template1] has index patterns [simple-data-stream1] matching patterns from existing older templates [global] with patterns (global => [*]); this template [my-template1] will take precedence during new index creation\"\n+      indices.put_index_template:\n+        name: my-template1\n+        body:\n+          index_patterns: [simple-data-stream1]\n+          template:\n+            mappings:\n+              properties:\n+                '@timestamp':\n+                  type: date\n+          data_stream:\n+            timestamp_field: '@timestamp'\n+\n+  - do:\n+      indices.create_data_stream:\n+        name: simple-data-stream1\n+  - is_true: acknowledged\n+\n+  - do:\n+      catch: bad_request\n+      indices.clone:\n+        index: \".ds-simple-data-stream1-000001\"\n+        target: \"target\"\n+        wait_for_active_shards: 1\n+        master_timeout: 10s\n+        body:\n+          settings:\n+            index.number_of_replicas: 0\n+            index.number_of_shards: 2\n+\n+  - do:\n+      indices.delete_data_stream:\n+        name: simple-data-stream1\n+  - is_true: acknowledged\n+\n+---\n+\"APIs temporarily muted\":\n+  - skip:\n+      version: \"all\"\n+      reason: \"restore to above test after data stream resolution PRs have been merged\"\n+\n+  - do:\n+      catch: bad_request\n+      indices.close:\n+        index: logs-*\n+\n+---\n+\"Prohibit shrink on data stream's write index\":\n+  - skip:\n+      version: \" - 7.8.99\"\n+      reason: \"data streams only supported in 7.9+\"\n+      features: allowed_warnings\n+\n+  - do:\n+      allowed_warnings:\n+        - \"index template [my-template1] has index patterns [simple-data-stream1] matching patterns from existing older templates [global] with patterns (global => [*]); this template [my-template1] will take precedence during new index creation\"\n+      indices.put_index_template:\n+        name: my-template1\n+        body:\n+          index_patterns: [simple-data-stream1]\n+          template:\n+            mappings:\n+              properties:\n+                '@timestamp':\n+                  type: date\n+          data_stream:\n+            timestamp_field: '@timestamp'\n+\n+  - do:\n+      indices.create_data_stream:\n+        name: simple-data-stream1\n+  - is_true: acknowledged\n+\n+  - do:\n+      catch: bad_request\n+      indices.shrink:\n+        index: \".ds-simple-data-stream1-000001\"\n+        target: \"target\"\n+        wait_for_active_shards: 1\n+        master_timeout: 10s\n+        body:\n+          settings:\n+            index.number_of_replicas: 0\n+\n+  - do:\n+      indices.delete_data_stream:\n+        name: simple-data-stream1\n+  - is_true: acknowledged\n+\n+---\n+\"Open write index for data stream opens all backing indices\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2a7e2867835e149d9a205ce4e61eb2633b93d4"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQwODQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzoxNDo0NFrOGwX0Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowODowMVrOGwfvQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NTA2Ng==", "bodyText": "Instead of relying on an exception with a specific message, what if we proactively checked if the timestamp mapper existed? We could do something like\nboolean timestampMapperExists = tempIndexService.mapperService().isMetadataField(\"_timestamp\");\n\nand then throw if there's a data_stream definition but no _timestamp metadata mapper.", "url": "https://github.com/elastic/elasticsearch/pull/59293#discussion_r453375066", "createdAt": "2020-07-12T23:14:44Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -1136,7 +1137,15 @@ private static void validateCompositeTemplate(final ClusterState state,\n                         validateTimestampFieldMapping(tsFieldName, mapperService);\n                     }\n                 } catch (Exception e) {\n-                    throw new IllegalArgumentException(\"invalid composite mappings for [\" + templateName + \"]\", e);\n+                    final String expectedMessageIfDataStreamsIsUsedAndNotSupported =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f037a391b6d641751b72826aa0cbcc2ce4a3773"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwNDgzMw==", "bodyText": "Thanks. This is less fragile than checking the exception message.", "url": "https://github.com/elastic/elasticsearch/pull/59293#discussion_r453504833", "createdAt": "2020-07-13T09:08:01Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -1136,7 +1137,15 @@ private static void validateCompositeTemplate(final ClusterState state,\n                         validateTimestampFieldMapping(tsFieldName, mapperService);\n                     }\n                 } catch (Exception e) {\n-                    throw new IllegalArgumentException(\"invalid composite mappings for [\" + templateName + \"]\", e);\n+                    final String expectedMessageIfDataStreamsIsUsedAndNotSupported =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NTA2Ng=="}, "originalCommit": {"oid": "9f037a391b6d641751b72826aa0cbcc2ce4a3773"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzQ0NDA1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/mapper/TimestampFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1NzozNFrOGwYF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMzo1NzozNFrOGwYF4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3OTU1Mg==", "bodyText": "Now that we're moving this to the data streams plugin, should we update the naming to be specific to data streams? Calling it something like _data_stream_timestamp could also avoid confusion with the _timestamp metadata mapper we used to provide.", "url": "https://github.com/elastic/elasticsearch/pull/59293#discussion_r453379552", "createdAt": "2020-07-12T23:57:34Z", "author": {"login": "jtibshirani"}, "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/mapper/TimestampFieldMapper.java", "diffHunk": "@@ -1,23 +1,10 @@\n /*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n  */\n \n-package org.elasticsearch.index.mapper;\n+package org.elasticsearch.xpack.datastreams.mapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f037a391b6d641751b72826aa0cbcc2ce4a3773"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1934, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}