{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTMwNjkx", "number": 54400, "title": "EQL: startsWith function implementation", "bodyText": "Addresses #53855", "createdAt": "2020-03-30T09:42:34Z", "url": "https://github.com/elastic/elasticsearch/pull/54400", "merged": true, "mergeCommit": {"oid": "666719fcfc40f6fc0535609577791369123320ab"}, "closed": true, "closedAt": "2020-03-31T12:43:35Z", "author": {"login": "astefan"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSfsPfAH2gAyMzk1NTMwNjkxOjQyODczMDRjNzllMDdlYmNmZTRhZjc0MDJkMDFkNThlNjRkZTRiYjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTBglEABqjMxODI4NzA4MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4287304c79e07ebcfe4af7402d01d58e64de4bb0", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/4287304c79e07ebcfe4af7402d01d58e64de4bb0", "committedDate": "2020-03-29T20:12:06Z", "message": "startsWith function implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/f582f8970bb3d04deac878ab86c7014eb6fd08e5", "committedDate": "2020-03-30T09:39:49Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODI2NzYz", "url": "https://github.com/elastic/elasticsearch/pull/54400#pullrequestreview-383826763", "createdAt": "2020-03-30T12:59:14Z", "commit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1OToxNFrOF9oedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzowMzoxNFrOF9oocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDYxMg==", "bodyText": "maybe open for discussion: return null only if he source is null and exception for the rest of params that should not be null?", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400170612", "createdAt": "2020-03-30T12:59:14Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MjAwMw==", "bodyText": "nit: just a suggestion maybe extract the function to avoid repetition, for example:\nhttps://github.com/elastic/elasticsearch/pull/54380/files#diff-5ad1821091fb7e7473cbdfdded44fbcbR52", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400172003", "createdAt": "2020-03-30T13:01:19Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MzE3MQ==", "bodyText": "should include the pattern in both equals and hashCode?", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400173171", "createdAt": "2020-03-30T13:03:14Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);\n+        }\n+\n+        return source.toString().toLowerCase(Locale.ROOT).startsWith(pattern.toString().toLowerCase(Locale.ROOT));\n+    }\n+    \n+    protected Processor source() {\n+        return source;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        \n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        \n+        return Objects.equals(source(), ((StartsWithFunctionProcessor) obj).source());\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a2dcf5258caee52d66b96afed149c60b720101", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0a2dcf5258caee52d66b96afed149c60b720101", "committedDate": "2020-03-30T16:30:50Z", "message": "Address reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "792a938886a79ce3cb2ad3e718710b796b4c3d3d", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/792a938886a79ce3cb2ad3e718710b796b4c3d3d", "committedDate": "2020-03-30T16:31:05Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDQ2Njc0", "url": "https://github.com/elastic/elasticsearch/pull/54400#pullrequestreview-384046674", "createdAt": "2020-03-30T16:51:44Z", "commit": {"oid": "792a938886a79ce3cb2ad3e718710b796b4c3d3d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjA1ODMy", "url": "https://github.com/elastic/elasticsearch/pull/54400#pullrequestreview-384605832", "createdAt": "2020-03-31T10:35:37Z", "commit": {"oid": "6c051f687cce03e3648b9442d67790b4bf221ed8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1b61c00a0717f7dca3f52bc446f262289c911d", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/5d1b61c00a0717f7dca3f52bc446f262289c911d", "committedDate": "2020-03-31T11:15:48Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "834d25dbb0fb3f40d40e2a63511e90bee9dcdd84", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/834d25dbb0fb3f40d40e2a63511e90bee9dcdd84", "committedDate": "2020-03-31T11:33:30Z", "message": "Added one more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7378290064f255ce82bd4c6720b044093b272be7", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/7378290064f255ce82bd4c6720b044093b272be7", "committedDate": "2020-03-31T11:35:22Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c051f687cce03e3648b9442d67790b4bf221ed8", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/6c051f687cce03e3648b9442d67790b4bf221ed8", "committedDate": "2020-03-30T19:57:16Z", "message": "Merge branch 'master' into 53855_impl"}, "afterCommit": {"oid": "7378290064f255ce82bd4c6720b044093b272be7", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/7378290064f255ce82bd4c6720b044093b272be7", "committedDate": "2020-03-31T11:35:22Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1492, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}