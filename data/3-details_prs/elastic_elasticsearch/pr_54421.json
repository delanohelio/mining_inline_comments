{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjU0MDUw", "number": 54421, "title": "[ML] add new inference_config field to trained model config", "bodyText": "A new field called inference_config is now added to the trained model config object. This new field allows for default inference settings from analytics or some external model builder.\nThe inference processor can still override whatever is set as the default in the trained model config.\nDocs preview:\n\nhttp://elasticsearch_54421.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/put-inference.html\nhttp://elasticsearch_54421.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/inference-processor.html\nhttp://elasticsearch_54421.docs-preview.app.elstc.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-x-pack-ml-put-trained-model.html", "createdAt": "2020-03-30T13:33:59Z", "url": "https://github.com/elastic/elasticsearch/pull/54421", "merged": true, "mergeCommit": {"oid": "4e1ff31c3c508a05438a4803be0b1fc14f3575dc"}, "closed": true, "closedAt": "2020-04-02T14:34:18Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSuivhAH2gAyMzk1NjU0MDUwOmE1YTY3NWI3ZGMwNjU0MjQzY2I2NTYzOTBlOWRiYmQwM2VkMjEzOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTsmZEAH2gAyMzk1NjU0MDUwOjZkM2EwMTFkMjgwNTdkMTA1ZjNmNTZmOTg1ZDUzNWU1NmM4NmYwMGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a5a675b7dc0654243cb656390e9dbbd03ed2139e", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/a5a675b7dc0654243cb656390e9dbbd03ed2139e", "committedDate": "2020-03-30T13:30:18Z", "message": "[ML] add inference config object to model config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e28be9d92ee82b61549fc2c3e0792be165002b8e", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/e28be9d92ee82b61549fc2c3e0792be165002b8e", "committedDate": "2020-03-30T13:51:48Z", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cb91b978efccd8872ef8a250a4a1588e8ad5edc", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/2cb91b978efccd8872ef8a250a4a1588e8ad5edc", "committedDate": "2020-03-30T13:59:51Z", "message": "fixing line length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e033c4e8925eb9e35f472261ab0e4802bde1671", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e033c4e8925eb9e35f472261ab0e4802bde1671", "committedDate": "2020-03-30T13:59:57Z", "message": "Merge branch 'feature/ml-inference-add-infer-config-to-model-config' of github.com:benwtrent/elasticsearch into feature/ml-inference-add-infer-config-to-model-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87aacf71b3f25b1b7c033bd0c008ba149f3597ff", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/87aacf71b3f25b1b7c033bd0c008ba149f3597ff", "committedDate": "2020-03-31T18:26:29Z", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11dfb2a6442d6df584b8d797307540f71c75aa0b", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/11dfb2a6442d6df584b8d797307540f71c75aa0b", "committedDate": "2020-03-31T19:11:59Z", "message": "fixing yaml ttests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/29b337a6a2c5286ae79d7c79932f3925cfc131f1", "committedDate": "2020-03-31T19:54:06Z", "message": "fixing test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDY2OTc3", "url": "https://github.com/elastic/elasticsearch/pull/54421#pullrequestreview-385066977", "createdAt": "2020-03-31T20:10:08Z", "commit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMDowOFrOF-mUjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMDowOFrOF-mUjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4Mzg4Nw==", "bodyText": "I think the new object needs to be added in the definitions section too (e.g. https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference.html#ml-put-inference-trained-model)", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401183887", "createdAt": "2020-03-31T20:10:08Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/high-level/ml/put-trained-model.asciidoc", "diffHunk": "@@ -39,6 +39,8 @@ include-tagged::{doc-tests-file}[{api}-config]\n <5> Optionally, a human-readable description\n <6> Optionally, an object map contain metadata about the model\n <7> Optionally, an array of tags to organize the model\n+<8> The default inference config to use with the model. Must match the underlying", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTk1ODcw", "url": "https://github.com/elastic/elasticsearch/pull/54421#pullrequestreview-385595870", "createdAt": "2020-04-01T13:41:15Z", "commit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0MToxNVrOF_BKdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjowNTowNFrOF_HwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMzY3MA==", "bodyText": "Is -1 valid for numTopClasses", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401623670", "createdAt": "2020-04-01T13:41:15Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/ml/inference/trainedmodel/ClassificationConfigTests.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.ml.inference.trainedmodel;\n+\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.test.AbstractXContentTestCase;\n+\n+import java.io.IOException;\n+\n+public class ClassificationConfigTests extends AbstractXContentTestCase<ClassificationConfig> {\n+\n+    public static ClassificationConfig randomClassificationConfig() {\n+        return new ClassificationConfig(randomBoolean() ? null : randomIntBetween(-1, 10),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5OTMyOQ==", "bodyText": "Flip the test around so you call equals on the one you've proved to be non-null.\nresultsField == null || resultsField.equals(originalConfig.getResultsField())\nI know getResultsField() can't return null as it has a default value but it seems sensible to reverse it anyway. Also topClassesResultsField below", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401699329", "createdAt": "2020-04-01T15:21:13Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/ClassificationConfigUpdate.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.NUM_TOP_CLASSES;\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.NUM_TOP_FEATURE_IMPORTANCE_VALUES;\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.RESULTS_FIELD;\n+import static org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig.TOP_CLASSES_RESULTS_FIELD;\n+\n+public class ClassificationConfigUpdate implements InferenceConfigUpdate<ClassificationConfig> {\n+\n+    public static final ParseField NAME = new ParseField(\"classification\");\n+\n+    public static ClassificationConfigUpdate EMPTY_PARAMS =\n+        new ClassificationConfigUpdate(null, null, null, null);\n+\n+    private final Integer numTopClasses;\n+    private final String topClassesResultsField;\n+    private final String resultsField;\n+    private final Integer numTopFeatureImportanceValues;\n+\n+    public static ClassificationConfigUpdate fromMap(Map<String, Object> map) {\n+        Map<String, Object> options = new HashMap<>(map);\n+        Integer numTopClasses = (Integer)options.remove(NUM_TOP_CLASSES.getPreferredName());\n+        String topClassesResultsField = (String)options.remove(TOP_CLASSES_RESULTS_FIELD.getPreferredName());\n+        String resultsField = (String)options.remove(RESULTS_FIELD.getPreferredName());\n+        Integer featureImportance = (Integer)options.remove(NUM_TOP_FEATURE_IMPORTANCE_VALUES.getPreferredName());\n+\n+        if (options.isEmpty() == false) {\n+            throw ExceptionsHelper.badRequestException(\"Unrecognized fields {}.\", options.keySet());\n+        }\n+        return new ClassificationConfigUpdate(numTopClasses, resultsField, topClassesResultsField, featureImportance);\n+    }\n+\n+    public static ClassificationConfigUpdate fromConfig(ClassificationConfig config) {\n+        return new ClassificationConfigUpdate(config.getNumTopClasses(),\n+            config.getResultsField(),\n+            config.getTopClassesResultsField(),\n+            config.getNumTopFeatureImportanceValues());\n+    }\n+\n+    private static final ObjectParser<ClassificationConfigUpdate.Builder, Void> STRICT_PARSER = createParser(false);\n+\n+    private static ObjectParser<ClassificationConfigUpdate.Builder, Void> createParser(boolean lenient) {\n+        ObjectParser<ClassificationConfigUpdate.Builder, Void> parser = new ObjectParser<>(\n+            NAME.getPreferredName(),\n+            lenient,\n+            ClassificationConfigUpdate.Builder::new);\n+        parser.declareInt(ClassificationConfigUpdate.Builder::setNumTopClasses, NUM_TOP_CLASSES);\n+        parser.declareString(ClassificationConfigUpdate.Builder::setResultsField, RESULTS_FIELD);\n+        parser.declareString(ClassificationConfigUpdate.Builder::setTopClassesResultsField, TOP_CLASSES_RESULTS_FIELD);\n+        parser.declareInt(ClassificationConfigUpdate.Builder::setNumTopFeatureImportanceValues, NUM_TOP_FEATURE_IMPORTANCE_VALUES);\n+        return parser;\n+    }\n+\n+    public static ClassificationConfigUpdate fromXContentStrict(XContentParser parser) {\n+        return STRICT_PARSER.apply(parser, null).build();\n+    }\n+\n+    public ClassificationConfigUpdate(Integer numTopClasses,\n+                                      String resultsField,\n+                                      String topClassesResultsField,\n+                                      Integer featureImportance) {\n+        this.numTopClasses = numTopClasses;\n+        this.topClassesResultsField = topClassesResultsField;\n+        this.resultsField = resultsField;\n+        if (featureImportance != null && featureImportance < 0) {\n+            throw new IllegalArgumentException(\"[\" + NUM_TOP_FEATURE_IMPORTANCE_VALUES.getPreferredName() +\n+                \"] must be greater than or equal to 0\");\n+        }\n+        this.numTopFeatureImportanceValues = featureImportance;\n+    }\n+\n+    public ClassificationConfigUpdate(StreamInput in) throws IOException {\n+        this.numTopClasses = in.readOptionalInt();\n+        this.topClassesResultsField = in.readOptionalString();\n+        this.resultsField = in.readOptionalString();\n+        this.numTopFeatureImportanceValues = in.readOptionalVInt();\n+    }\n+\n+    public Integer getNumTopClasses() {\n+        return numTopClasses;\n+    }\n+\n+    public String getTopClassesResultsField() {\n+        return topClassesResultsField;\n+    }\n+\n+    public String getResultsField() {\n+        return resultsField;\n+    }\n+\n+    public Integer getNumTopFeatureImportanceValues() {\n+        return numTopFeatureImportanceValues;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeOptionalInt(numTopClasses);\n+        out.writeOptionalString(topClassesResultsField);\n+        out.writeOptionalString(resultsField);\n+        out.writeOptionalVInt(numTopFeatureImportanceValues);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        ClassificationConfigUpdate that = (ClassificationConfigUpdate) o;\n+        return Objects.equals(numTopClasses, that.numTopClasses)\n+            && Objects.equals(topClassesResultsField, that.topClassesResultsField)\n+            && Objects.equals(resultsField, that.resultsField)\n+            && Objects.equals(numTopFeatureImportanceValues, that.numTopFeatureImportanceValues);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(numTopClasses, topClassesResultsField, resultsField, numTopFeatureImportanceValues);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        if (numTopClasses != null) {\n+            builder.field(NUM_TOP_CLASSES.getPreferredName(), numTopClasses);\n+        }\n+        if (topClassesResultsField != null) {\n+            builder.field(TOP_CLASSES_RESULTS_FIELD.getPreferredName(), topClassesResultsField);\n+        }\n+        if (resultsField != null) {\n+            builder.field(RESULTS_FIELD.getPreferredName(), resultsField);\n+        }\n+        if (numTopFeatureImportanceValues != null) {\n+            builder.field(NUM_TOP_FEATURE_IMPORTANCE_VALUES.getPreferredName(), numTopFeatureImportanceValues);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return NAME.getPreferredName();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME.getPreferredName();\n+    }\n+\n+    @Override\n+    public ClassificationConfig apply(ClassificationConfig originalConfig) {\n+        if (isNoop(originalConfig)) {\n+            return originalConfig;\n+        }\n+        ClassificationConfig.Builder builder = new ClassificationConfig.Builder(originalConfig);\n+        if (resultsField != null) {\n+            builder.setResultsField(resultsField);\n+        }\n+        if (numTopFeatureImportanceValues != null) {\n+            builder.setNumTopFeatureImportanceValues(numTopFeatureImportanceValues);\n+        }\n+        if (topClassesResultsField != null) {\n+            builder.setTopClassesResultsField(topClassesResultsField);\n+        }\n+        if (numTopClasses != null) {\n+            builder.setNumTopClasses(numTopClasses);\n+        }\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public InferenceConfig toConfig() {\n+        return apply(ClassificationConfig.EMPTY_PARAMS);\n+    }\n+\n+    @Override\n+    public boolean isSupported(InferenceConfig inferenceConfig) {\n+        return inferenceConfig instanceof ClassificationConfig;\n+    }\n+\n+    boolean isNoop(ClassificationConfig originalConfig) {\n+        return (resultsField == null || originalConfig.getResultsField().equals(resultsField))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMDk3MQ==", "bodyText": "Let RegressionConfig pick the default value (it does this in the constructor anyway)\nRegressionConfig(RegressionConfig.DEFAULT_RESULTS_FIELD,\n                    regression.getBoostedTreeParams().getNumTopFeatureImportanceValues())", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401730971", "createdAt": "2020-04-01T16:04:06Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java", "diffHunk": "@@ -231,9 +235,37 @@ private TrainedModelConfig createTrainedModelConfig(TrainedModelDefinition.Build\n             .setInput(new TrainedModelInput(fieldNamesWithoutDependentVariable))\n             .setLicenseLevel(License.OperationMode.PLATINUM.description())\n             .setDefaultFieldMap(defaultFieldMapping)\n+            .setInferenceConfig(buildInferenceConfig(definition.getTrainedModel().targetType()))\n             .build();\n     }\n \n+    private InferenceConfig buildInferenceConfig(TargetType targetType) {\n+        switch (targetType) {\n+            case CLASSIFICATION:\n+                assert analytics.getAnalysis() instanceof Classification;\n+                Classification classification = ((Classification)analytics.getAnalysis());\n+                return new ClassificationConfig(classification.getNumTopClasses(),\n+                    ClassificationConfig.DEFAULT_RESULTS_FIELD,\n+                    ClassificationConfig.DEFAULT_TOP_CLASSES_RESULTS_FIELD,\n+                    classification.getBoostedTreeParams().getNumTopFeatureImportanceValues() == null ?\n+                        0 :\n+                        classification.getBoostedTreeParams().getNumTopFeatureImportanceValues());\n+            case REGRESSION:\n+                assert analytics.getAnalysis() instanceof Regression;\n+                Regression regression = ((Regression)analytics.getAnalysis());\n+                return new RegressionConfig(RegressionConfig.DEFAULT_RESULTS_FIELD,\n+                    regression.getBoostedTreeParams().getNumTopFeatureImportanceValues() == null ?\n+                        0 :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMTY0Mg==", "bodyText": "Same with ClassificationConfig", "url": "https://github.com/elastic/elasticsearch/pull/54421#discussion_r401731642", "createdAt": "2020-04-01T16:05:04Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java", "diffHunk": "@@ -231,9 +235,37 @@ private TrainedModelConfig createTrainedModelConfig(TrainedModelDefinition.Build\n             .setInput(new TrainedModelInput(fieldNamesWithoutDependentVariable))\n             .setLicenseLevel(License.OperationMode.PLATINUM.description())\n             .setDefaultFieldMap(defaultFieldMapping)\n+            .setInferenceConfig(buildInferenceConfig(definition.getTrainedModel().targetType()))\n             .build();\n     }\n \n+    private InferenceConfig buildInferenceConfig(TargetType targetType) {\n+        switch (targetType) {\n+            case CLASSIFICATION:\n+                assert analytics.getAnalysis() instanceof Classification;\n+                Classification classification = ((Classification)analytics.getAnalysis());\n+                return new ClassificationConfig(classification.getNumTopClasses(),\n+                    ClassificationConfig.DEFAULT_RESULTS_FIELD,\n+                    ClassificationConfig.DEFAULT_TOP_CLASSES_RESULTS_FIELD,\n+                    classification.getBoostedTreeParams().getNumTopFeatureImportanceValues() == null ?\n+                        0 :\n+                        classification.getBoostedTreeParams().getNumTopFeatureImportanceValues());\n+            case REGRESSION:\n+                assert analytics.getAnalysis() instanceof Regression;\n+                Regression regression = ((Regression)analytics.getAnalysis());\n+                return new RegressionConfig(RegressionConfig.DEFAULT_RESULTS_FIELD,\n+                    regression.getBoostedTreeParams().getNumTopFeatureImportanceValues() == null ?\n+                        0 :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMDk3MQ=="}, "originalCommit": {"oid": "29b337a6a2c5286ae79d7c79932f3925cfc131f1"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d5df0c768e1fd4ea14e4cb5ff8eda4f91a7dda7", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/8d5df0c768e1fd4ea14e4cb5ff8eda4f91a7dda7", "committedDate": "2020-04-01T18:42:42Z", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a648217c086bac3abe6549d6c021f491c780817", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/5a648217c086bac3abe6549d6c021f491c780817", "committedDate": "2020-04-01T19:06:12Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28ceaa03509b6dcc64d4017bcfcd5c6313dada4", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/a28ceaa03509b6dcc64d4017bcfcd5c6313dada4", "committedDate": "2020-04-01T20:14:31Z", "message": "fixing potential npe in inference config builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bd9d71c3fb6496376184b2cfcd0b40683375363", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/0bd9d71c3fb6496376184b2cfcd0b40683375363", "committedDate": "2020-04-01T20:47:08Z", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446cbaeb1eff348da7d4562256ad16df55c52512", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/446cbaeb1eff348da7d4562256ad16df55c52512", "committedDate": "2020-04-01T23:06:48Z", "message": "[DOCS] Revamps shared inference_config sections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e872853f3782d4325cc783108981bc0c9532474", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/1e872853f3782d4325cc783108981bc0c9532474", "committedDate": "2020-04-01T23:19:41Z", "message": "[DOCS] Collapse sections in put trained model API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd7d6b1d1fdf469be81b096e756a60ba1e9befc1", "author": {"user": {"login": "lcawl", "name": "Lisa Cawley"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd7d6b1d1fdf469be81b096e756a60ba1e9befc1", "committedDate": "2020-04-01T23:23:36Z", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDQwNjM4", "url": "https://github.com/elastic/elasticsearch/pull/54421#pullrequestreview-386040638", "createdAt": "2020-04-02T00:40:25Z", "commit": {"oid": "fd7d6b1d1fdf469be81b096e756a60ba1e9befc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f949b5a13fc0fea8dc02febe0fc271810b6dd17e", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/f949b5a13fc0fea8dc02febe0fc271810b6dd17e", "committedDate": "2020-04-02T13:26:36Z", "message": "fixing docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3a011d28057d105f3f56f985d535e56c86f00a", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/6d3a011d28057d105f3f56f985d535e56c86f00a", "committedDate": "2020-04-02T13:48:24Z", "message": "Merge branch 'master' into feature/ml-inference-add-infer-config-to-model-config"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1507, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}