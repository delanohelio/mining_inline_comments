{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTMwNjM3", "number": 63325, "title": "Allow mixing set-based and regexp-based include and exclude", "bodyText": "This PR adds the feature discussed in #62246\nIt allows mixing set-based and regexp-based \"include\" and \"exclude\" parameters in Terms (and SignificantTerms, RareTerms) aggregations. Both ways are supported: a set include with a regexp exclude, or a regexp include with a set exclude.", "createdAt": "2020-10-06T13:05:03Z", "url": "https://github.com/elastic/elasticsearch/pull/63325", "merged": true, "mergeCommit": {"oid": "ff736f078b94ab0c6ce2dfe59693909fba17474f"}, "closed": true, "closedAt": "2020-10-21T14:26:43Z", "author": {"login": "hchargois"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP34P7gH2gAyNDk4NTMwNjM3OmMzN2MwYTVhNTAzNzA3M2Q1MzNlNWY1ZGQ0YzM2NzJmMzkzZDI5Njk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUaCPbAFqTUxMjgxMjEyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c37c0a5a5037073d533e5f5dd4c3672f393d2969", "author": {"user": {"login": "hchargois", "name": "Hugo Chargois"}}, "url": "https://github.com/elastic/elasticsearch/commit/c37c0a5a5037073d533e5f5dd4c3672f393d2969", "committedDate": "2020-10-06T12:52:19Z", "message": "Allow mixing set-based and regexp-based include and exclude"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTA0ODA5", "url": "https://github.com/elastic/elasticsearch/pull/63325#pullrequestreview-504104809", "createdAt": "2020-10-07T17:22:29Z", "commit": {"oid": "c37c0a5a5037073d533e5f5dd4c3672f393d2969"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzoyMjoyOVrOHd9zRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToyODo0MVrOHeCW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4MzMwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (valids != null && !valids.contains(value)) {\n          \n          \n            \n                        if (valids != null && (valids.contains(value) == false)) {\n          \n      \n    \n    \n  \n\nElastic coding standard prefers this form for readability", "url": "https://github.com/elastic/elasticsearch/pull/63325#discussion_r501183301", "createdAt": "2020-10-07T17:22:29Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/IncludeExclude.java", "diffHunk": "@@ -196,46 +188,39 @@ public boolean accept(BytesRef value) {\n         }\n     }\n \n-    static class AutomatonBackedStringFilter extends StringFilter {\n+    class SetAndRegexStringFilter extends StringFilter {\n \n         private final ByteRunAutomaton runAutomaton;\n-\n-        private AutomatonBackedStringFilter(Automaton automaton) {\n-            this.runAutomaton = new ByteRunAutomaton(automaton);\n-        }\n-\n-        /**\n-         * Returns whether the given value is accepted based on the {@code include} &amp; {@code exclude} patterns.\n-         */\n-        @Override\n-        public boolean accept(BytesRef value) {\n-            return runAutomaton.run(value.bytes, value.offset, value.length);\n-        }\n-    }\n-\n-    static class TermListBackedStringFilter extends StringFilter {\n-\n         private final Set<BytesRef> valids;\n         private final Set<BytesRef> invalids;\n \n-        TermListBackedStringFilter(Set<BytesRef> includeValues, Set<BytesRef> excludeValues) {\n-            this.valids = includeValues;\n-            this.invalids = excludeValues;\n+        private SetAndRegexStringFilter(DocValueFormat format) {\n+            Automaton automaton = toAutomaton();\n+            this.runAutomaton = automaton == null ?  null : new ByteRunAutomaton(automaton);\n+            this.valids = parseForDocValues(includeValues, format);\n+            this.invalids = parseForDocValues(excludeValues, format);\n         }\n \n         /**\n-         * Returns whether the given value is accepted based on the\n-         * {@code include} &amp; {@code exclude} sets.\n+         * Returns whether the given value is accepted based on the {@code includeValues} &amp; {@code excludeValues}\n+         * sets, as well as the {@code include} &amp; {@code exclude} patterns.\n          */\n         @Override\n         public boolean accept(BytesRef value) {\n-            return ((valids == null) || (valids.contains(value))) && ((invalids == null) || (!invalids.contains(value)));\n+            if (valids != null && !valids.contains(value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37c0a5a5037073d533e5f5dd4c3672f393d2969"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4NDE1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (runAutomaton != null && !runAutomaton.run(value.bytes, value.offset, value.length)) {\n          \n          \n            \n                        if (runAutomaton != null && (runAutomaton.run(value.bytes, value.offset, value.length) == false)) {", "url": "https://github.com/elastic/elasticsearch/pull/63325#discussion_r501184156", "createdAt": "2020-10-07T17:23:58Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/IncludeExclude.java", "diffHunk": "@@ -196,46 +188,39 @@ public boolean accept(BytesRef value) {\n         }\n     }\n \n-    static class AutomatonBackedStringFilter extends StringFilter {\n+    class SetAndRegexStringFilter extends StringFilter {\n \n         private final ByteRunAutomaton runAutomaton;\n-\n-        private AutomatonBackedStringFilter(Automaton automaton) {\n-            this.runAutomaton = new ByteRunAutomaton(automaton);\n-        }\n-\n-        /**\n-         * Returns whether the given value is accepted based on the {@code include} &amp; {@code exclude} patterns.\n-         */\n-        @Override\n-        public boolean accept(BytesRef value) {\n-            return runAutomaton.run(value.bytes, value.offset, value.length);\n-        }\n-    }\n-\n-    static class TermListBackedStringFilter extends StringFilter {\n-\n         private final Set<BytesRef> valids;\n         private final Set<BytesRef> invalids;\n \n-        TermListBackedStringFilter(Set<BytesRef> includeValues, Set<BytesRef> excludeValues) {\n-            this.valids = includeValues;\n-            this.invalids = excludeValues;\n+        private SetAndRegexStringFilter(DocValueFormat format) {\n+            Automaton automaton = toAutomaton();\n+            this.runAutomaton = automaton == null ?  null : new ByteRunAutomaton(automaton);\n+            this.valids = parseForDocValues(includeValues, format);\n+            this.invalids = parseForDocValues(excludeValues, format);\n         }\n \n         /**\n-         * Returns whether the given value is accepted based on the\n-         * {@code include} &amp; {@code exclude} sets.\n+         * Returns whether the given value is accepted based on the {@code includeValues} &amp; {@code excludeValues}\n+         * sets, as well as the {@code include} &amp; {@code exclude} patterns.\n          */\n         @Override\n         public boolean accept(BytesRef value) {\n-            return ((valids == null) || (valids.contains(value))) && ((invalids == null) || (!invalids.contains(value)));\n+            if (valids != null && !valids.contains(value)) {\n+                return false;\n+            }\n+\n+            if (runAutomaton != null && !runAutomaton.run(value.bytes, value.offset, value.length)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37c0a5a5037073d533e5f5dd4c3672f393d2969"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNjA3MQ==", "bodyText": "I think the intention here is that at most one of (include, includeValues) and at most one of (exclude, excludeValues) will be non-null.  In other words, while you can mix set-based includes and regex excludes (or vice versa), you can't have both set-based and regex-based includes.  That seems like a requirement of the precedence rules, among other things.\nI think we should enforce that rule here.  I know the parser doesn't currently allow for specifying both a regex and a set at the same time, but it's ultimately this class's contract that both not be set, and this class should check it.", "url": "https://github.com/elastic/elasticsearch/pull/63325#discussion_r501236071", "createdAt": "2020-10-07T18:48:26Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/IncludeExclude.java", "diffHunk": "@@ -332,17 +322,30 @@ public LongBitSet acceptedGlobalOrdinals(SortedSetDocValues globalOrdinals) thro\n      * @param exclude   The regular expression pattern for the terms to be excluded\n      */\n     public IncludeExclude(RegExp include, RegExp exclude) {\n-        if (include == null && exclude == null) {\n+        this(include, exclude, null, null);\n+    }\n+\n+    public IncludeExclude(RegExp include, RegExp exclude, SortedSet<BytesRef> includeValues, SortedSet<BytesRef> excludeValues) {\n+        if (include == null && exclude == null && includeValues == null && excludeValues == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37c0a5a5037073d533e5f5dd4c3672f393d2969"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0ODE2Ng==", "bodyText": "I appreciate that you added tests to make sure that the precedence is preserved with the new possible configurations, but I think we should test this on IncludeExcludeTests as well.", "url": "https://github.com/elastic/elasticsearch/pull/63325#discussion_r501248166", "createdAt": "2020-10-07T19:10:29Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorTests.java", "diffHunk": "@@ -455,6 +455,42 @@ public void testStringIncludeExclude() throws Exception {\n                     assertEquals(\"val010\", result.getBuckets().get(1).getKeyAsString());\n                     assertEquals(1L, result.getBuckets().get(1).getDocCount());\n                     assertTrue(AggregationInspectionHelper.hasValue((InternalTerms)result));\n+\n+                    aggregationBuilder = new TermsAggregationBuilder(\"_name\").userValueTypeHint(ValueType.STRING)\n+                        .executionHint(executionHint)\n+                        .includeExclude(new IncludeExclude(\"val00.+\", null, null,\n+                            new String[]{\"val001\", \"val002\", \"val003\", \"val004\", \"val005\", \"val006\", \"val007\", \"val008\"}))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37c0a5a5037073d533e5f5dd4c3672f393d2969"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1Nzk0MA==", "bodyText": "I think this version string is fine for now.  When we backport it, we'll update it accordingly.  There's a process for doing that, but it's on the person merging the backport to do it, so you shouldn't have to worry about it.", "url": "https://github.com/elastic/elasticsearch/pull/63325#discussion_r501257940", "createdAt": "2020-10-07T19:28:41Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/IncludeExclude.java", "diffHunk": "@@ -395,18 +390,21 @@ public IncludeExclude(int partition, int numPartitions) {\n      */\n     public IncludeExclude(StreamInput in) throws IOException {\n         if (in.readBoolean()) {\n-            includeValues = null;\n-            excludeValues = null;\n-            incZeroBasedPartition = 0;\n-            incNumPartitions = 0;\n             String includeString = in.readOptionalString();\n             include = includeString == null ? null : new RegExp(includeString);\n             String excludeString = in.readOptionalString();\n             exclude = excludeString == null ? null : new RegExp(excludeString);\n-            return;\n+            if (in.getVersion().before(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37c0a5a5037073d533e5f5dd4c3672f393d2969"}, "originalPosition": 270}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a2b7ab3f4a25f1968ce6f20046bf4bc17769590", "author": {"user": {"login": "hchargois", "name": "Hugo Chargois"}}, "url": "https://github.com/elastic/elasticsearch/commit/0a2b7ab3f4a25f1968ce6f20046bf4bc17769590", "committedDate": "2020-10-15T15:34:54Z", "message": "Coding style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0754ea71335da452c95b2b3aceea64e61a89e79e", "author": {"user": {"login": "hchargois", "name": "Hugo Chargois"}}, "url": "https://github.com/elastic/elasticsearch/commit/0754ea71335da452c95b2b3aceea64e61a89e79e", "committedDate": "2020-10-15T15:34:54Z", "message": "Disallow having both set and regexp include (resp. exclude)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e90b78906dc8e8e8b98409246fc07558d7e52e3", "author": {"user": {"login": "hchargois", "name": "Hugo Chargois"}}, "url": "https://github.com/elastic/elasticsearch/commit/3e90b78906dc8e8e8b98409246fc07558d7e52e3", "committedDate": "2020-10-15T15:34:54Z", "message": "Test correctness of every combination of include/exclude"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af13530778309ec30356142175d8b24645e3b23", "author": {"user": {"login": "hchargois", "name": "Hugo Chargois"}}, "url": "https://github.com/elastic/elasticsearch/commit/9af13530778309ec30356142175d8b24645e3b23", "committedDate": "2020-10-19T13:50:36Z", "message": "Merge branch 'master' into allow-mixing-set-and-regexp-include-exclude"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODEyMTIz", "url": "https://github.com/elastic/elasticsearch/pull/63325#pullrequestreview-512812123", "createdAt": "2020-10-20T14:55:42Z", "commit": {"oid": "9af13530778309ec30356142175d8b24645e3b23"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4320, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}