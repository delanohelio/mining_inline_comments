{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MTM3MzIy", "number": 55690, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowNjo0MVrOD1w-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNToxOTo1OVrOD2WA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzAzNDU3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataDeleteIndexService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowNjo0MVrOGLWyKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowNjo0MVrOGLWyKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MDgxMA==", "bodyText": "nit: { on the previous line?", "url": "https://github.com/elastic/elasticsearch/pull/55690#discussion_r414560810", "createdAt": "2020-04-24T13:06:41Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataDeleteIndexService.java", "diffHunk": "@@ -91,7 +92,22 @@ public ClusterState execute(final ClusterState currentState) {\n      */\n     public ClusterState deleteIndices(ClusterState currentState, Set<Index> indices) {\n         final Metadata meta = currentState.metadata();\n-        final Set<Index> indicesToDelete = indices.stream().map(i -> meta.getIndexSafe(i).getIndex()).collect(toSet());\n+        final Set<Index> indicesToDelete = new HashSet<>();\n+        final Map<Index, DataStream> backingIndices = new HashMap<>();\n+        for (Index index : indices) {\n+            IndexMetadata im = meta.getIndexSafe(index);\n+            IndexAbstraction.DataStream parent = meta.getIndicesLookup().get(im.getIndex().getName()).getParentDataStream();\n+            if (parent != null)\n+            {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b6196cbbe47942184d8170326ec803e68e3112"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzA0NjY1OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/test/indices.delete/20_backing_indices.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowOTozNlrOGLW5bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowOTozNlrOGLW5bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjY3MQ==", "bodyText": "maybe also verify that the data stream is updated by checking the get data streams api and verify that there is only one backing index?", "url": "https://github.com/elastic/elasticsearch/pull/55690#discussion_r414562671", "createdAt": "2020-04-24T13:09:36Z", "author": {"login": "martijnvg"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/indices.delete/20_backing_indices.yml", "diffHunk": "@@ -0,0 +1,90 @@\n+---\n+\"Delete backing index on data stream\":\n+  - skip:\n+      version: \" - 7.99.99\"\n+      reason:  \"enable in 7.8+ after backporting\"\n+\n+  - do:\n+      indices.create_data_stream:\n+        name: simple-data-stream\n+        body:\n+          timestamp_field: \"@timestamp\"\n+  - is_true: acknowledged\n+\n+  # rollover data stream to create new backing index\n+  - do:\n+      indices.rollover:\n+        alias: \"simple-data-stream\"\n+\n+  - match: { old_index: simple-data-stream-000001 }\n+  - match: { new_index: simple-data-stream-000002 }\n+  - match: { rolled_over: true }\n+  - match: { dry_run: false }\n+\n+  # ensure new index is created\n+  - do:\n+      indices.exists:\n+        index: simple-data-stream-000002\n+\n+  - is_true: ''\n+\n+  - do:\n+      indices.delete:\n+        index: simple-data-stream-000001\n+\n+  - do:\n+      indices.exists:\n+        index: simple-data-stream-000001\n+\n+  - is_false: ''\n+\n+  - do:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b6196cbbe47942184d8170326ec803e68e3112"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzA4NDIwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataDeleteIndexServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoxNzo0NFrOGLXPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoxNzo0NFrOGLXPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2ODIxMg==", "bodyText": "nit: use assertThat(...) with isNull() as matcher instead? I think in general that is the preferred way of writing test assertions.", "url": "https://github.com/elastic/elasticsearch/pull/55690#discussion_r414568212", "createdAt": "2020-04-24T13:17:44Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataDeleteIndexServiceTests.java", "diffHunk": "@@ -92,6 +110,38 @@ public void testDeleteUnassigned() {\n         verify(allocationService).reroute(any(ClusterState.class), any(String.class));\n     }\n \n+    public void testDeleteBackingIndexForDataStream() {\n+        int numBackingIndices = randomIntBetween(2, 5);\n+        String dataStreamName = randomAlphaOfLength(6).toLowerCase(Locale.ROOT);\n+        ClusterState before = DeleteDataStreamRequestTests.getClusterStateWithDataStreams(\n+            List.of(new Tuple<>(dataStreamName, numBackingIndices)), List.of());\n+\n+        int numIndexToDelete = randomIntBetween(1, numBackingIndices - 1);\n+\n+        Index indexToDelete = before.metadata().index(DataStream.getBackingIndexName(dataStreamName, numIndexToDelete)).getIndex();\n+        ClusterState after = service.deleteIndices(before, Set.of(indexToDelete));\n+\n+        assertNull(after.metadata().getIndices().get(indexToDelete.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b6196cbbe47942184d8170326ec803e68e3112"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzEwNDkwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/DataStreamTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyMjowNlrOGLXbRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyMjowNlrOGLXbRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MTMzMw==", "bodyText": "maybe also assert that the index that is supposed to be removed really is removed? I think we now just check that all other indices but the removed index exists. I think that for that, just checking that the number of backing indices is decremented by 1 should suffice.", "url": "https://github.com/elastic/elasticsearch/pull/55690#discussion_r414571333", "createdAt": "2020-04-24T13:22:06Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/DataStreamTests.java", "diffHunk": "@@ -78,4 +78,23 @@ public void testRollover() {\n         assertTrue(rolledDs.getIndices().containsAll(ds.getIndices()));\n         assertTrue(rolledDs.getIndices().contains(newWriteIndex));\n     }\n+\n+    public void testRemoveBackingIndex() {\n+        int numBackingIndices = randomIntBetween(2, 32);\n+        int indexToRemove = randomIntBetween(1, numBackingIndices - 1);\n+        String dataStreamName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+\n+        List<Index> indices = new ArrayList<>(numBackingIndices);\n+        for (int k = 1; k <= numBackingIndices; k++) {\n+            indices.add(new Index(DataStream.getBackingIndexName(dataStreamName, k), UUIDs.randomBase64UUID(random())));\n+        }\n+        DataStream original = new DataStream(dataStreamName, \"@timestamp\", indices);\n+        DataStream updated = original.removeBackingIndex(indices.get(indexToRemove - 1));\n+        assertThat(updated.getName(), equalTo(original.getName()));\n+        assertThat(updated.getGeneration(), equalTo(original.getGeneration()));\n+        assertThat(updated.getTimeStampField(), equalTo(original.getTimeStampField()));\n+        for (int k = 0; k < (numBackingIndices - 1); k++) {\n+            assertThat(updated.getIndices().get(k), equalTo(original.getIndices().get(k < (indexToRemove - 1) ? k : k + 1)));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b6196cbbe47942184d8170326ec803e68e3112"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzExNTk0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataDeleteIndexServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyNDozMlrOGLXhzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyNDozMlrOGLXhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3MzAwNA==", "bodyText": "I think that instead of looping here just checking that the index that is supposed to be removed is removed and checking that the number of indices is decremented by one is sufficient.", "url": "https://github.com/elastic/elasticsearch/pull/55690#discussion_r414573004", "createdAt": "2020-04-24T13:24:32Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataDeleteIndexServiceTests.java", "diffHunk": "@@ -92,6 +110,38 @@ public void testDeleteUnassigned() {\n         verify(allocationService).reroute(any(ClusterState.class), any(String.class));\n     }\n \n+    public void testDeleteBackingIndexForDataStream() {\n+        int numBackingIndices = randomIntBetween(2, 5);\n+        String dataStreamName = randomAlphaOfLength(6).toLowerCase(Locale.ROOT);\n+        ClusterState before = DeleteDataStreamRequestTests.getClusterStateWithDataStreams(\n+            List.of(new Tuple<>(dataStreamName, numBackingIndices)), List.of());\n+\n+        int numIndexToDelete = randomIntBetween(1, numBackingIndices - 1);\n+\n+        Index indexToDelete = before.metadata().index(DataStream.getBackingIndexName(dataStreamName, numIndexToDelete)).getIndex();\n+        ClusterState after = service.deleteIndices(before, Set.of(indexToDelete));\n+\n+        assertNull(after.metadata().getIndices().get(indexToDelete.getName()));\n+        for (int k = 1; k <= numBackingIndices; k++) {\n+            if (k != numIndexToDelete) {\n+                assertNotNull(after.metadata().getIndices().get(DataStream.getBackingIndexName(dataStreamName, k)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b6196cbbe47942184d8170326ec803e68e3112"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzEwMzkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNToxOTo1OVrOGMF81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjo0MDozMVrOGMhCMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMzU5MA==", "bodyText": "Would be good to assert that backingIndices.size() == indices.size() - 1?", "url": "https://github.com/elastic/elasticsearch/pull/55690#discussion_r415333590", "createdAt": "2020-04-26T15:19:59Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -84,6 +86,19 @@ public DataStream rollover(Index newWriteIndex) {\n         return new DataStream(name, timeStampField, backingIndices, generation + 1);\n     }\n \n+    /**\n+     * Removes the specified backing index and returns a new {@code DataStream} instance with\n+     * the remaining backing indices.\n+     *\n+     * @param index the backing index to remove\n+     * @return new {@code DataStream} instance with the remaining backing indices\n+     */\n+    public DataStream removeBackingIndex(Index index) {\n+        List<Index> backingIndices = new ArrayList<>(indices);\n+        backingIndices.remove(index);\n+        return new DataStream(name, timeStampField, backingIndices, generation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaca2f6f09e50f2eb1b2e734265b95542203cad4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NzMzMA==", "bodyText": "@henningandersen, I've added that assertion in #55802", "url": "https://github.com/elastic/elasticsearch/pull/55690#discussion_r415777330", "createdAt": "2020-04-27T12:40:31Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -84,6 +86,19 @@ public DataStream rollover(Index newWriteIndex) {\n         return new DataStream(name, timeStampField, backingIndices, generation + 1);\n     }\n \n+    /**\n+     * Removes the specified backing index and returns a new {@code DataStream} instance with\n+     * the remaining backing indices.\n+     *\n+     * @param index the backing index to remove\n+     * @return new {@code DataStream} instance with the remaining backing indices\n+     */\n+    public DataStream removeBackingIndex(Index index) {\n+        List<Index> backingIndices = new ArrayList<>(indices);\n+        backingIndices.remove(index);\n+        return new DataStream(name, timeStampField, backingIndices, generation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMzU5MA=="}, "originalCommit": {"oid": "eaca2f6f09e50f2eb1b2e734265b95542203cad4"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2705, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}