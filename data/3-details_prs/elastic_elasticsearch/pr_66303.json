{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5ODA5NzU1", "number": 66303, "title": "[client] Add client metadata header on RestClient requests", "bodyText": "Supersedes #66189 to target master. See there for previous review comments.\nAdds a X-Elastic-Client-Meta header to http requests sent by RestClient. This header contains information about the runtime environment that is meant to allow analyzing usage context by collecting this information on the receiving side of requests, like a proxy server in front of ES.\nThe information in this header has been specified by the clients team to be consistent across language clients. It contains the versions of the client, the language runtime (Java in this case) and its http library, and the use of the high level client. Additional JVM specific information is added about standard libraries for other JVM languages like Kotlin, Scala, Groovy and Clojure, so that we can extrapolate interest for dedicated clients for these languages.\nThis header is sent by default and can be disabled using RestClientBuilder.setMetadataHeaderEnabled(false).\nThis PR also sets the User-Agent header to elasticsearch-java/<version> (Java/<version>) to again be consistent with other language clients. Users are however free to override this value with application-specific agent information.", "createdAt": "2020-12-14T21:27:54Z", "url": "https://github.com/elastic/elasticsearch/pull/66303", "merged": true, "mergeCommit": {"oid": "1dcacfeabf7056623a2b66bfbf945b8864ce1bfe"}, "closed": true, "closedAt": "2021-02-02T10:09:52Z", "author": {"login": "swallez"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmMw-rgFqTU1MTkxMzQ5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd18Jb_AH2gAyNTM5ODA5NzU1OjgwYzExZjlmYWNjOTk1YmFhZjkzMzRhZTU0MWI3NzJiMjcxMzhjZjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTEzNDkw", "url": "https://github.com/elastic/elasticsearch/pull/66303#pullrequestreview-551913490", "createdAt": "2020-12-14T21:36:57Z", "commit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozNjo1N1rOIFrElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozODoxMVrOIFrJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxOTQ3Ng==", "bodyText": "Do any of these version functions need to handle pre-release information?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542819476", "createdAt": "2020-12-14T21:36:57Z", "author": {"login": "sethmlarson"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+class RuntimeInfo {\n+\n+    /**\n+     * Returns runtime info to append to the metadata header. Currently looks up classes identifying non-Java JVM\n+     * languages and appends their major/minor version patch.\n+     */\n+    public static String getRuntimeMetadata() {\n+        StringBuilder s = new StringBuilder();\n+        String version;\n+\n+        version = HlrcKind();\n+        if (version != null) {\n+            s.append(\",hl=\").append(version);\n+        }\n+\n+        version= kotlinVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxOTk3MQ==", "bodyText": "If patch numbers aren't long can we keep this info anyways?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542819971", "createdAt": "2020-12-14T21:37:27Z", "author": {"login": "sethmlarson"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RuntimeInfo.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+class RuntimeInfo {\n+\n+    /**\n+     * Returns runtime info to append to the metadata header. Currently looks up classes identifying non-Java JVM\n+     * languages and appends their major/minor version patch.\n+     */\n+    public static String getRuntimeMetadata() {\n+        StringBuilder s = new StringBuilder();\n+        String version;\n+\n+        version = HlrcKind();\n+        if (version != null) {\n+            s.append(\",hl=\").append(version);\n+        }\n+\n+        version= kotlinVersion();\n+        if (version != null) {\n+            s.append(\",kt=\").append(version);\n+        }\n+\n+        version = scalaVersion();\n+        if (version != null) {\n+            s.append(\",sc=\").append(version);\n+        }\n+\n+        version = clojureVersion();\n+        if (version != null) {\n+            s.append(\",clj=\").append(version);\n+        }\n+\n+        version = groovyVersion();\n+        if (version != null) {\n+            s.append(\",gy=\").append(version);\n+        }\n+\n+        return s.toString();\n+    }\n+\n+    public static String HlrcKind() {\n+        try {\n+            Class.forName(\"org.elasticsearch.client.RestHighLevelClient\");\n+        } catch (Exception t) {\n+            return null;\n+        }\n+        // 1 is the HLRC based on ES server request/response classes\n+        // 2 will be the HLRC based on code generation from API specs\n+        return \"1\";\n+    }\n+\n+    public static String kotlinVersion() {\n+        try {\n+            //KotlinVersion.CURRENT.toString()\n+            Class<?> clazz = Class.forName(\"kotlin.KotlinVersion\");\n+            Field field = clazz.getField(\"CURRENT\");\n+            String version = field.get(null).toString();\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String scalaVersion() {\n+        try {\n+            // scala.util.Properties.versionNumberString()\n+            Class<?> clazz = Class.forName(\"scala.util.Properties\");\n+            Method m = clazz.getMethod(\"versionNumberString\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String clojureVersion() {\n+        try {\n+            // (clojure-version) which translates to\n+            // clojure.core$clojure_version.invokeStatic()\n+            Class<?> clazz = Class.forName(\"clojure.core$clojure_version\");\n+            Method m = clazz.getMethod(\"invokeStatic\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    public static String groovyVersion() {\n+        try {\n+            // groovy.lang.GroovySystem.getVersion()\n+            // There's also getShortVersion(), but only since Groovy 3.0.1\n+            Class<?> clazz = Class.forName(\"groovy.lang.GroovySystem\");\n+            Method m = clazz.getMethod(\"getVersion\");\n+            String version = (String) m.invoke(null);\n+            return stripPatchRevision(version);\n+\n+        } catch (Exception t) {\n+            // ignore\n+        }\n+        return null;\n+    }\n+\n+    static String stripPatchRevision(String version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMDYyMA==", "bodyText": "metaHeaderEnabled to conform with the meta header noun", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542820620", "createdAt": "2020-12-14T21:38:11Z", "author": {"login": "sethmlarson"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -56,6 +68,39 @@\n     private NodeSelector nodeSelector = NodeSelector.ANY;\n     private boolean strictDeprecationMode = false;\n     private boolean compressionEnabled = false;\n+    private boolean metadataHeaderEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTIwMzgx", "url": "https://github.com/elastic/elasticsearch/pull/66303#pullrequestreview-551920381", "createdAt": "2020-12-14T21:47:16Z", "commit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0NzoxNlrOIFru8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0NzoxNlrOIFru8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDMyMA==", "bodyText": "While this is better, I still think we should not be silently allowing leniency in the computation. If the header is enabled, we should have a valid value, or throw an error. My original suggestion was to lazily set the cached header value (it could and should be outside this lambda, since as you say, the enabled flag is per client, we don't need to check it on every request). This way the method computing the header value does not need all of the try/catch for failures (with one exception: we still need to handle the various possible runtimes, but we should narrow those to ClassNotFoundException).", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r542830320", "createdAt": "2020-12-14T21:47:16Z", "author": {"login": "rjernst"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -220,11 +276,20 @@ private CloseableHttpAsyncClient createHttpClient() {\n                 //default settings for connection pooling may be too constraining\n                 .setMaxConnPerRoute(DEFAULT_MAX_CONN_PER_ROUTE).setMaxConnTotal(DEFAULT_MAX_CONN_TOTAL)\n                 .setSSLContext(SSLContext.getDefault())\n+                .setUserAgent(USER_AGENT_HEADER_VALUE)\n                 .setTargetAuthenticationStrategy(new PersistentCredentialsAuthenticationStrategy());\n             if (httpClientConfigCallback != null) {\n                 httpClientBuilder = httpClientConfigCallback.customizeHttpClient(httpClientBuilder);\n             }\n \n+            // Always add metadata header last so that it's not overwritten\n+            httpClientBuilder.addInterceptorLast((HttpRequest request, HttpContext context) -> {\n+                if (metadataHeaderEnabled) {\n+                    request.setHeader(METADATA_HEADER, METADATA_HEADER_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ad673536bfe2a5acec6d92065ecb52f94b2c2"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "799a727524918032a88fe887e08a55ec4fbeae9d", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/799a727524918032a88fe887e08a55ec4fbeae9d", "committedDate": "2020-12-14T23:03:59Z", "message": "Rename \"metadata header\" to \"meta header\""}, "afterCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83", "committedDate": "2021-01-25T17:38:14Z", "message": "Write version to a resource file, update language runtime lookup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3Mzc4Mjgx", "url": "https://github.com/elastic/elasticsearch/pull/66303#pullrequestreview-577378281", "createdAt": "2021-01-27T14:15:06Z", "commit": {"oid": "dc019fd5c6d9c25359717afdcd04dc02de545c84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NDc3ODY3", "url": "https://github.com/elastic/elasticsearch/pull/66303#pullrequestreview-577477867", "createdAt": "2021-01-27T15:45:14Z", "commit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNTo0NToxNFrOIbOQzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNTo1MDowOVrOIbOhRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQxNjE0Mw==", "bodyText": "Is the return null vs return \"\" difference purposeful? Isn't it the same \"can't get the version\" case?", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565416143", "createdAt": "2021-01-27T15:45:14Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/LanguageRuntimeVersions.java", "diffHunk": "@@ -57,79 +54,74 @@ public static String getRuntimeMetadata() {\n             s.append(\",gy=\").append(version);\n         }\n \n+        version = jRubyVersion();\n+        if (version != null) {\n+            s.append(\",jrb=\").append(version);\n+        }\n+\n         return s.toString();\n     }\n \n-    public static String HlrcKind() {\n-        try {\n-            Class.forName(\"org.elasticsearch.client.RestHighLevelClient\");\n-        } catch (Exception t) {\n-            return null;\n-        }\n-        // 1 is the HLRC based on ES server request/response classes\n-        // 2 will be the HLRC based on code generation from API specs\n-        return \"1\";\n+    public static String kotlinVersion() {\n+        //KotlinVersion.CURRENT.toString()\n+        return keepMajorMinor(getStaticField(\"kotlin.KotlinVersion\", \"CURRENT\"));\n     }\n \n-    public static String kotlinVersion() {\n+    public static String scalaVersion() {\n+        // scala.util.Properties.versionNumberString()\n+        return keepMajorMinor(callStaticMethod(\"scala.util.Properties\", \"versionNumberString\"));\n+    }\n+\n+    public static String clojureVersion() {\n+        // (clojure-version) which translates to\n+        // clojure.core$clojure_version.invokeStatic()\n+        return keepMajorMinor(callStaticMethod(\"clojure.core$clojure_version\", \"invokeStatic\"));\n+    }\n+\n+    public static String groovyVersion() {\n+        // groovy.lang.GroovySystem.getVersion()\n+        // There's also getShortVersion(), but only since Groovy 3.0.1\n+        return keepMajorMinor(callStaticMethod(\"groovy.lang.GroovySystem\", \"getVersion\"));\n+    }\n+\n+    public static String jRubyVersion() {\n+        // org.jruby.runtime.Constants.VERSION\n+        return keepMajorMinor(getStaticField(\"org.jruby.runtime.Constants\", \"VERSION\"));\n+    }\n+\n+    private static String getStaticField(String className, String fieldName) {\n+        Class<?> clazz;\n         try {\n-            //KotlinVersion.CURRENT.toString()\n-            Class<?> clazz = Class.forName(\"kotlin.KotlinVersion\");\n-            Field field = clazz.getField(\"CURRENT\");\n-            String version = field.get(null).toString();\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n         }\n-        return null;\n-    }\n \n-    public static String scalaVersion() {\n         try {\n-            // scala.util.Properties.versionNumberString()\n-            Class<?> clazz = Class.forName(\"scala.util.Properties\");\n-            Method m = clazz.getMethod(\"versionNumberString\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            Field field = clazz.getField(fieldName);\n+            return field.get(null).toString();\n+        } catch (Exception e) {\n+            return \"\"; // can't get version information\n         }\n-        return null;\n     }\n \n-    public static String clojureVersion() {\n+    private static String callStaticMethod(String className, String methodName) {\n+        Class<?> clazz;\n         try {\n-            // (clojure-version) which translates to\n-            // clojure.core$clojure_version.invokeStatic()\n-            Class<?> clazz = Class.forName(\"clojure.core$clojure_version\");\n-            Method m = clazz.getMethod(\"invokeStatic\");\n-            String version = (String) m.invoke(null);\n-            return stripPatchRevision(version);\n-\n-        } catch (Exception t) {\n-            // ignore\n+            clazz = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMDM1OQ==", "bodyText": "nit: if we initialise it here with \"\" as a default value, the below if (version == null)check is not needed anymore", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r565420359", "createdAt": "2021-01-27T15:50:09Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java", "diffHunk": "@@ -71,35 +71,38 @@\n     private boolean metaHeaderEnabled = true;\n \n     static {\n-        String version = \"\"; // unknown values are reported as empty strings in X-Elastic-Client-Meta\n-        final CodeSource codeSource = RestClientBuilder.class.getProtectionDomain().getCodeSource();\n-        if (codeSource != null) {\n-            URL url = codeSource.getLocation();\n-            if (url != null && url.toString().endsWith(\".jar\")) {\n-                try (JarInputStream jar = new JarInputStream(url.openStream())) {\n-                    Manifest manifest = jar.getManifest();\n-                    String esVersion = manifest.getMainAttributes().getValue(\"X-Compile-Elasticsearch-Version\");\n-                    if (esVersion != null) {\n-                        version = esVersion;\n-                    }\n-                } catch (Exception e) {\n-                    // Keep version unknown\n-                }\n+\n+        // Never fail on unknown version, even if an environment messed up their classpath enough that we can't find it.\n+        // Better have incomplete telemetry than crashing user applications.\n+        String version = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f5bdb9b39b18ee0a9a97ad5aa2c83236a5d1c83"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d0eefe00fb4418232f094f60df278fd7336554", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/13d0eefe00fb4418232f094f60df278fd7336554", "committedDate": "2021-02-01T14:30:16Z", "message": "[client] Add client metadata header on RestClient requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "712a9746aab410d29634a9860de92a80c6be94b4", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/712a9746aab410d29634a9860de92a80c6be94b4", "committedDate": "2021-02-01T14:30:16Z", "message": "Change Throwable to Exception, add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d1cd8adb30e2e3f46bc7bbde9362880b156b91d", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/7d1cd8adb30e2e3f46bc7bbde9362880b156b91d", "committedDate": "2021-02-01T14:30:16Z", "message": "Rename 'v' to 'version'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9179f54d740cd9d3e35be1f7f80b7d8b8a30904e", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/9179f54d740cd9d3e35be1f7f80b7d8b8a30904e", "committedDate": "2021-02-01T14:30:16Z", "message": "Read version from Manifest to avoid hardcoding the version in the client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219b8ea19593e5569427530247dd7bbfa8ed4223", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/219b8ea19593e5569427530247dd7bbfa8ed4223", "committedDate": "2021-02-01T14:30:16Z", "message": "Fix style issue & forbidden API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "777242a5bfef266d8fbfc8ff5740eb211c91df8d", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/777242a5bfef266d8fbfc8ff5740eb211c91df8d", "committedDate": "2021-02-01T14:30:16Z", "message": "Compute header values in static initializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "201039ca96d388ad2ef821414d809b13f9cbc5fe", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/201039ca96d388ad2ef821414d809b13f9cbc5fe", "committedDate": "2021-02-01T14:30:16Z", "message": "Fix combined runtime info calculation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f285e69fef89dda55ec5fc8a6bdcb1a90fa81954", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/f285e69fef89dda55ec5fc8a6bdcb1a90fa81954", "committedDate": "2021-02-01T14:30:17Z", "message": "Rename \"metadata header\" to \"meta header\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d17a8f96e965a6ebdf56ebb49e71f2f5147ca14", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/4d17a8f96e965a6ebdf56ebb49e71f2f5147ca14", "committedDate": "2021-02-01T14:30:17Z", "message": "Write version to a resource file, update language runtime lookup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8d7c5ad2d9a41a3f24f49bb4ecf93e0d0e8636a", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/a8d7c5ad2d9a41a3f24f49bb4ecf93e0d0e8636a", "committedDate": "2021-02-01T14:59:35Z", "message": "Get httpclient's version in a privileged context\n\nThis is needed because of the call to getClassLoader()\n\nFixes the failure of testThatHttpExporterAddsWatches that was caused by the test\nES serverto fail while instanciating a client to setup remote monitoring."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bb60d015b2aad93b0f1dbc7ed0d32d3e489a3e7", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/9bb60d015b2aad93b0f1dbc7ed0d32d3e489a3e7", "committedDate": "2021-02-01T10:16:51Z", "message": "Merge branch 'master' into client-meta-header/master"}, "afterCommit": {"oid": "a8d7c5ad2d9a41a3f24f49bb4ecf93e0d0e8636a", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/a8d7c5ad2d9a41a3f24f49bb4ecf93e0d0e8636a", "committedDate": "2021-02-01T14:59:35Z", "message": "Get httpclient's version in a privileged context\n\nThis is needed because of the call to getClassLoader()\n\nFixes the failure of testThatHttpExporterAddsWatches that was caused by the test\nES serverto fail while instanciating a client to setup remote monitoring."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6be9af3376e57972723fc960aae1cb563c23f5b7", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/6be9af3376e57972723fc960aae1cb563c23f5b7", "committedDate": "2021-02-01T15:36:55Z", "message": "Remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwNjE4MzY2", "url": "https://github.com/elastic/elasticsearch/pull/66303#pullrequestreview-580618366", "createdAt": "2021-02-01T17:56:52Z", "commit": {"oid": "6be9af3376e57972723fc960aae1cb563c23f5b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwNjI3Mzkz", "url": "https://github.com/elastic/elasticsearch/pull/66303#pullrequestreview-580627393", "createdAt": "2021-02-01T18:07:29Z", "commit": {"oid": "6be9af3376e57972723fc960aae1cb563c23f5b7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxODowNzoyOVrOIdt7YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxODowNzoyOVrOIdt7YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAzMjA5Nw==", "bodyText": "We could simplify all this by just putting a file under src/main/resources with contents like so:\nelasticsearch-client=${elasticsearchVersion}\n\nThen we can configure the processResources task to replace that value when copying the file to the resources output directory.\ntasks.named(\"processResources\").configure {\n  expand elasticsearchVersion: versions.elasticsearch\n}", "url": "https://github.com/elastic/elasticsearch/pull/66303#discussion_r568032097", "createdAt": "2021-02-01T18:07:29Z", "author": {"login": "mark-vieira"}, "path": "client/rest/build.gradle", "diffHunk": "@@ -43,6 +43,21 @@ dependencies {\n   testImplementation \"org.elasticsearch:mocksocket:${versions.mocksocket}\"\n }\n \n+def generateVersionResource = tasks.register(\"generateVersionResource\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be9af3376e57972723fc960aae1cb563c23f5b7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c11f9facc995baaf9334ae541b772b27138cf4", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/80c11f9facc995baaf9334ae541b772b27138cf4", "committedDate": "2021-02-01T19:19:50Z", "message": "Simplify properties file generation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4495, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}