{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjY0NTIz", "number": 53214, "title": "add tests for missing aggregation", "bodyText": "Test with unmapped fields and using the missing parameter, which isn't\nvery useful with this aggregation but does work as expected. Also\nincludes yaml tests\nFor #42949", "createdAt": "2020-03-06T06:58:28Z", "url": "https://github.com/elastic/elasticsearch/pull/53214", "merged": true, "mergeCommit": {"oid": "4095df443bfa7f2848abd1b2945a9030aba9cf7b"}, "closed": true, "closedAt": "2020-03-11T20:23:39Z", "author": {"login": "andyb-elastic"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK6cQegH2gAyMzg0NjY0NTIzOjQ3NGY0ZTU4ZTdiNzM3NzM3OTA1MDlhMWM3OTdkMmMyOTBhMDg0NDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMsqh5gFqTM3MzA4MTM5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "474f4e58e7b73773790509a1c797d2c290a08445", "author": {"user": {"login": "andyb-elastic", "name": "Andy Bristol"}}, "url": "https://github.com/elastic/elasticsearch/commit/474f4e58e7b73773790509a1c797d2c290a08445", "committedDate": "2020-03-06T06:50:41Z", "message": "add tests for missing aggregation\n\nTest with unmapped fields and using the missing parameter, which isn't\nvery useful with this aggregation but does work as expected. Also\nincludes yaml tests\n\nFor #42949"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTE3OTUz", "url": "https://github.com/elastic/elasticsearch/pull/53214#pullrequestreview-370117953", "createdAt": "2020-03-06T07:08:18Z", "commit": {"oid": "474f4e58e7b73773790509a1c797d2c290a08445"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzowODoxOFrOFyu9TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzowODoxOFrOFyu9TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0MjQ3Ng==", "bodyText": "Note: in some of the aggregator tests similar to this one (where there's a second field we expect to be absent sometimes), we don't pass a field type for the second field like above. If the test is missing the second field type, that field can't be read even if an aggregator was erroneously trying to collect it", "url": "https://github.com/elastic/elasticsearch/pull/53214#discussion_r388742476", "createdAt": "2020-03-06T07:08:18Z", "author": {"login": "andyb-elastic"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/missing/MissingAggregatorTests.java", "diffHunk": "@@ -28,81 +28,115 @@\n import org.apache.lucene.search.IndexSearcher;\n import org.apache.lucene.search.Query;\n import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.BytesRef;\n import org.elasticsearch.common.lucene.search.Queries;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;\n import org.elasticsearch.index.mapper.RangeFieldMapper;\n import org.elasticsearch.index.mapper.RangeType;\n import org.elasticsearch.search.aggregations.AggregatorTestCase;\n import org.elasticsearch.search.aggregations.support.AggregationInspectionHelper;\n \n import java.io.IOException;\n-import java.util.Collections;\n+import java.util.Collection;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n \n+import static java.util.Collections.singleton;\n+\n \n public class MissingAggregatorTests extends AggregatorTestCase {\n     public void testMatchNoDocs() throws IOException {\n         int numDocs = randomIntBetween(10, 200);\n+        final MappedFieldType fieldType = new NumberFieldMapper.Builder(\"_name\", NumberType.LONG).fieldType();\n+        fieldType.setName(\"field\");\n         testBothCases(numDocs,\n-            \"field\",\n+            fieldType.name(),\n             Queries.newMatchAllQuery(),\n-            doc -> doc.add(new SortedNumericDocValuesField(\"field\", randomLong())),\n+            builder -> {},\n+            (index, doc) -> doc.add(new SortedNumericDocValuesField(fieldType.name(), randomLong())),\n             internalMissing -> {\n                 assertEquals(internalMissing.getDocCount(), 0);\n                 assertFalse(AggregationInspectionHelper.hasValue(internalMissing));\n-            });\n+            },\n+            singleton(fieldType));\n     }\n \n     public void testMatchAllDocs() throws IOException {\n         int numDocs = randomIntBetween(10, 200);\n+\n+        final MappedFieldType fieldType = new NumberFieldMapper.Builder(\"_name\", NumberType.LONG).fieldType();\n+        fieldType.setName(\"field\");\n+        final MappedFieldType anotherFieldType = new NumberFieldMapper.Builder(\"_name\", NumberType.LONG).fieldType();\n+        anotherFieldType.setName(\"another_field\");\n+\n         testBothCases(numDocs,\n-            \"field\",\n+            fieldType.name(),\n             Queries.newMatchAllQuery(),\n-            doc -> doc.add(new SortedNumericDocValuesField(\"another_field\", randomLong())),\n+            builder -> {},\n+            (index, doc) -> doc.add(new SortedNumericDocValuesField(anotherFieldType.name(), randomLong())),\n             internalMissing -> {\n                 assertEquals(internalMissing.getDocCount(), numDocs);\n                 assertTrue(AggregationInspectionHelper.hasValue(internalMissing));\n-            });\n+            },\n+            List.of(fieldType, anotherFieldType));\n     }\n \n     public void testMatchSparse() throws IOException {\n         int numDocs = randomIntBetween(100, 200);\n         final AtomicInteger count = new AtomicInteger();\n+\n+        final MappedFieldType fieldType = new NumberFieldMapper.Builder(\"_name\", NumberType.LONG).fieldType();\n+        fieldType.setName(\"field\");\n+        final MappedFieldType anotherFieldType = new NumberFieldMapper.Builder(\"_name\", NumberType.LONG).fieldType();\n+        anotherFieldType.setName(\"another_field\");\n+\n         testBothCases(numDocs,\n-            \"field\",\n+            fieldType.name(),\n             Queries.newMatchAllQuery(),\n-            doc -> {\n+            builder -> {},\n+            (index, doc) -> {\n                 if (randomBoolean()) {\n-                    doc.add(new SortedNumericDocValuesField(\"another_field\", randomLong()));\n+                    doc.add(new SortedNumericDocValuesField(anotherFieldType.name(), randomLong()));\n                     count.incrementAndGet();\n                 } else {\n-                    doc.add(new SortedNumericDocValuesField(\"field\", randomLong()));\n+                    doc.add(new SortedNumericDocValuesField(fieldType.name(), randomLong()));\n                 }\n             },\n             internalMissing -> {\n                 assertEquals(internalMissing.getDocCount(), count.get());\n                 count.set(0);\n                 assertTrue(AggregationInspectionHelper.hasValue(internalMissing));\n-            });\n+            },\n+            List.of(fieldType, anotherFieldType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474f4e58e7b73773790509a1c797d2c290a08445"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDIxMDk2", "url": "https://github.com/elastic/elasticsearch/pull/53214#pullrequestreview-370421096", "createdAt": "2020-03-06T15:45:08Z", "commit": {"oid": "474f4e58e7b73773790509a1c797d2c290a08445"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a964952b9097a678c20d3e83db66092541c5b495", "author": {"user": {"login": "andyb-elastic", "name": "Andy Bristol"}}, "url": "https://github.com/elastic/elasticsearch/commit/a964952b9097a678c20d3e83db66092541c5b495", "committedDate": "2020-03-06T23:52:43Z", "message": "add supported valuessourcetype tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e222d93dc11675533050abafa1829a22651b6dd", "author": {"user": {"login": "andyb-elastic", "name": "Andy Bristol"}}, "url": "https://github.com/elastic/elasticsearch/commit/8e222d93dc11675533050abafa1829a22651b6dd", "committedDate": "2020-03-11T01:28:41Z", "message": "add script tests\n\nAlso change the test case pattern to be more flexible and more similar\nto how the other agg tests are written"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37dd0410786076372e4afbc298fb252af9f5eab9", "author": {"user": {"login": "andyb-elastic", "name": "Andy Bristol"}}, "url": "https://github.com/elastic/elasticsearch/commit/37dd0410786076372e4afbc298fb252af9f5eab9", "committedDate": "2020-03-11T01:31:29Z", "message": "Merge branch 'master' into feature-missing-agg-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDgxMzk1", "url": "https://github.com/elastic/elasticsearch/pull/53214#pullrequestreview-373081395", "createdAt": "2020-03-11T19:55:27Z", "commit": {"oid": "37dd0410786076372e4afbc298fb252af9f5eab9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1833, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}