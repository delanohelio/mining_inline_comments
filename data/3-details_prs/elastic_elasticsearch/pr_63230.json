{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Njk0OTUz", "number": 63230, "title": "[client] Add simple support for gzip compression", "bodyText": "Adds a RestClient.setCompressionEnabled() setting that will gzip-\ncompress request bodies and add a Accept-Encoding: gzip header so\nthat the ES server can send compressed responses.\nFixes #62044", "createdAt": "2020-10-05T08:46:18Z", "url": "https://github.com/elastic/elasticsearch/pull/63230", "merged": true, "mergeCommit": {"oid": "67be92c72386848ef52f029248b350ddaba0fd7e"}, "closed": true, "closedAt": "2020-10-06T21:19:36Z", "author": {"login": "swallez"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPg8N1ABqjM4Mzk2Mjk4NDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP3Mq3gFqTUwMjg2NjE5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0684c48139ab29ba28199ed18c565c601808d838", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/0684c48139ab29ba28199ed18c565c601808d838", "committedDate": "2020-10-05T09:40:48Z", "message": "Fix javadoc"}, "afterCommit": {"oid": "98203fbf8d889de1cf088944af30ad7ee50ff3a5", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/98203fbf8d889de1cf088944af30ad7ee50ff3a5", "committedDate": "2020-10-05T10:08:38Z", "message": "[client] Add simple support for gzip compression\n\nAdds a `RestClient.setCompressionEnabled()` setting that will gzip-\ncompress request bodies and add a `Accept-Encoding: gzip` header so\nthat the ES server can send compressed responses."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/7b4aeee4de1555e2a476981d01a69c8a7934ade1", "committedDate": "2020-10-05T13:29:49Z", "message": "[client] Add simple support for gzip compression\n\nAdds a `RestClient.setCompressionEnabled()` setting that will gzip-\ncompress request bodies and add a `Accept-Encoding: gzip` header so\nthat the ES server can send compressed responses."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98203fbf8d889de1cf088944af30ad7ee50ff3a5", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/98203fbf8d889de1cf088944af30ad7ee50ff3a5", "committedDate": "2020-10-05T10:08:38Z", "message": "[client] Add simple support for gzip compression\n\nAdds a `RestClient.setCompressionEnabled()` setting that will gzip-\ncompress request bodies and add a `Accept-Encoding: gzip` header so\nthat the ES server can send compressed responses."}, "afterCommit": {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/7b4aeee4de1555e2a476981d01a69c8a7934ade1", "committedDate": "2020-10-05T13:29:49Z", "message": "[client] Add simple support for gzip compression\n\nAdds a `RestClient.setCompressionEnabled()` setting that will gzip-\ncompress request bodies and add a `Accept-Encoding: gzip` header so\nthat the ES server can send compressed responses."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjM2MDU1", "url": "https://github.com/elastic/elasticsearch/pull/63230#pullrequestreview-502636055", "createdAt": "2020-10-06T07:02:05Z", "commit": {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzowMjowNVrOHc4foA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoyNjowMlrOHc5NqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0Nzc3Ng==", "bodyText": "I believe this can remain static", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500047776", "createdAt": "2020-10-06T07:02:05Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClient.java", "diffHunk": "@@ -543,7 +551,7 @@ private static void addSuppressedException(Exception suppressedException, Except\n         }\n     }\n \n-    private static HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity) {\n+    private HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODA0OA==", "bodyText": "This can remain static and receive the comporessionEnabled flag as parameter", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500048048", "createdAt": "2020-10-06T07:02:45Z", "author": {"login": "andreidan"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClient.java", "diffHunk": "@@ -568,9 +576,12 @@ private static HttpRequestBase createHttpRequest(String method, URI uri, HttpEnt\n         }\n     }\n \n-    private static HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity) {\n+    private HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1NjY0Nw==", "bodyText": "please use { }  (avoiding them is error-prone (see apple goto issue) and harder to read)", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500056647", "createdAt": "2020-10-06T07:20:33Z", "author": {"login": "andreidan"}, "path": "client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class RestClientGzipCompressionTests extends RestClientTestCase {\n+\n+    private static HttpServer httpServer;\n+\n+    @BeforeClass\n+    public static void startHttpServer() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.createContext(\"/\", new GzipResponseHandler());\n+        httpServer.start();\n+    }\n+\n+    @AfterClass\n+    public static void stopHttpServers() throws IOException {\n+        httpServer.stop(0);\n+        httpServer = null;\n+    }\n+\n+    /**\n+     * A response handler that accepts gzip-encoded data and replies request and response encoding values\n+     * followed by the request body. The response is compressed if \"Accept-Encoding\" is \"gzip\".\n+     */\n+    private static class GzipResponseHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+\n+            // Decode body (if any)\n+            String contentEncoding = exchange.getRequestHeaders().getFirst(\"Content-Encoding\");\n+            InputStream body = exchange.getRequestBody();\n+            if (\"gzip\".equals(contentEncoding)) {\n+                body = new GZIPInputStream(body);\n+            }\n+            byte[] bytes = readAll(body);\n+\n+            boolean compress = \"gzip\".equals(exchange.getRequestHeaders().getFirst(\"Accept-Encoding\"));\n+            if (compress) {\n+                exchange.getResponseHeaders().add(\"Content-Encoding\", \"gzip\");\n+            }\n+\n+            exchange.sendResponseHeaders(200, 0);\n+\n+            // Encode response if needed\n+            OutputStream out = exchange.getResponseBody();\n+            if (compress) {\n+                out = new GZIPOutputStream(out);\n+            }\n+\n+            // Outputs <request-encoding|null>#<response-encoding|null>#<request-body>\n+            out.write(String.valueOf(contentEncoding).getBytes(StandardCharsets.UTF_8));\n+            out.write('#');\n+            out.write((compress ? \"gzip\" : \"null\").getBytes(StandardCharsets.UTF_8));\n+            out.write('#');\n+            out.write(bytes);\n+            out.close();\n+\n+            exchange.close();\n+        }\n+    }\n+\n+    /** Read all bytes of an input stream and close it. */\n+    private static byte[] readAll(InputStream in) throws IOException {\n+        byte[] buffer = new byte[1024];\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        int len = 0;\n+        while ((len = in.read(buffer)) > 0) bos.write(buffer, 0, len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1OTU2MQ==", "bodyText": "Is this custom encoding needed given the response headers will have the Content-Encoding header to be verified in the tests?", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500059561", "createdAt": "2020-10-06T07:26:02Z", "author": {"login": "andreidan"}, "path": "client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class RestClientGzipCompressionTests extends RestClientTestCase {\n+\n+    private static HttpServer httpServer;\n+\n+    @BeforeClass\n+    public static void startHttpServer() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.createContext(\"/\", new GzipResponseHandler());\n+        httpServer.start();\n+    }\n+\n+    @AfterClass\n+    public static void stopHttpServers() throws IOException {\n+        httpServer.stop(0);\n+        httpServer = null;\n+    }\n+\n+    /**\n+     * A response handler that accepts gzip-encoded data and replies request and response encoding values\n+     * followed by the request body. The response is compressed if \"Accept-Encoding\" is \"gzip\".\n+     */\n+    private static class GzipResponseHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+\n+            // Decode body (if any)\n+            String contentEncoding = exchange.getRequestHeaders().getFirst(\"Content-Encoding\");\n+            InputStream body = exchange.getRequestBody();\n+            if (\"gzip\".equals(contentEncoding)) {\n+                body = new GZIPInputStream(body);\n+            }\n+            byte[] bytes = readAll(body);\n+\n+            boolean compress = \"gzip\".equals(exchange.getRequestHeaders().getFirst(\"Accept-Encoding\"));\n+            if (compress) {\n+                exchange.getResponseHeaders().add(\"Content-Encoding\", \"gzip\");\n+            }\n+\n+            exchange.sendResponseHeaders(200, 0);\n+\n+            // Encode response if needed\n+            OutputStream out = exchange.getResponseBody();\n+            if (compress) {\n+                out = new GZIPOutputStream(out);\n+            }\n+\n+            // Outputs <request-encoding|null>#<response-encoding|null>#<request-body>\n+            out.write(String.valueOf(contentEncoding).getBytes(StandardCharsets.UTF_8));\n+            out.write('#');\n+            out.write((compress ? \"gzip\" : \"null\").getBytes(StandardCharsets.UTF_8));\n+            out.write('#');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560b78d1ffd535cad2a307cc4e16ca80a72b8ab4", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/560b78d1ffd535cad2a307cc4e16ca80a72b8ab4", "committedDate": "2020-10-06T08:28:13Z", "message": "Avoid paren-less one liners"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe4b90f04ed6bf64271a089a25bd3dd016312b59", "author": {"user": {"login": "swallez", "name": "Sylvain Wallez"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe4b90f04ed6bf64271a089a25bd3dd016312b59", "committedDate": "2020-10-06T10:50:50Z", "message": "Keep request creation methods static"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODY2MTk5", "url": "https://github.com/elastic/elasticsearch/pull/63230#pullrequestreview-502866199", "createdAt": "2020-10-06T12:04:43Z", "commit": {"oid": "fe4b90f04ed6bf64271a089a25bd3dd016312b59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4398, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}