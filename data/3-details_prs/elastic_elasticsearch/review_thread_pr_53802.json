{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDM1OTE5", "number": 53802, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1MDo1M1rODpismg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1MTo1M1rODq58_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg2NjgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1MDo1M1rOF4yFDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1MDo1M1rOF4yFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NTA3MQ==", "bodyText": "These unclosed parentheses are tearing holes in my OCD soul. \ud83d\ude04", "url": "https://github.com/elastic/elasticsearch/pull/53802#discussion_r395085071", "createdAt": "2020-03-19T14:50:53Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+// QueryFolder test\n+// Simple format of the following blocks, separated by two new lines\n+// <name>\n+// <eql query>\n+// <expectation 1>\n+// <expectation 2>\n+// ...\n+// <expectation n>\n+\n+\n+basic\n+process where true\n+null\n+\n+\n+singleNumericFilterEquals\n+process where serial_event_id = 1\n+\"term\":{\"serial_event_id\":{\"value\":1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ffa9cf2eed43eaf309b3b3ea978411080f89f6c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE2Mjg3OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1MTo1M1rOF68UCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1MTo1M1rOF68UCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0OTg5OQ==", "bodyText": "This test was skipped during externalization. Discovered that during backporting - I'm working on fixing it in master and 7.x", "url": "https://github.com/elastic/elasticsearch/pull/53802#discussion_r397349899", "createdAt": "2020-03-24T17:51:53Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java", "diffHunk": "@@ -7,72 +7,19 @@\n package org.elasticsearch.xpack.eql.planner;\n \n import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n-\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.xpack.eql.plan.physical.EsQueryExec;\n import org.elasticsearch.xpack.eql.plan.physical.PhysicalPlan;\n \n-import java.util.Arrays;\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n \n import static org.elasticsearch.xpack.ql.type.DataTypes.KEYWORD;\n import static org.hamcrest.Matchers.containsString;\n \n public class QueryFolderOkTests extends AbstractQueryFolderTestCase {\n-    private static Object[][] specs = {\n-            {\"basic\", \"process where true\", null},\n-            {\"singleNumericFilterEquals\", \"process where serial_event_id = 1\", \"\\\"term\\\":{\\\"serial_event_id\\\":{\\\"value\\\":1\"},\n-            {\"singleNumericFilterLess\", \"process where serial_event_id < 4\",\n-                    \"\\\"range\\\":{\\\"serial_event_id\\\":{\\\"from\\\":null,\\\"to\\\":4,\\\"include_lower\\\":false,\\\"include_upper\\\":false\"\n-            },\n-            {\"singleNumericFilterLessSymmetry\", \"process where 4 > serial_event_id\",\n-                    \"\\\"range\\\":{\\\"serial_event_id\\\":{\\\"from\\\":null,\\\"to\\\":4,\\\"include_lower\\\":false,\\\"include_upper\\\":false\"\n-            },\n-            {\"singleNumericFilterLessEquals\", \"process where serial_event_id <= 4\",\n-                    \"\\\"range\\\":{\\\"serial_event_id\\\":{\\\"from\\\":null,\\\"to\\\":4,\\\"include_lower\\\":false,\\\"include_upper\\\":true\"\n-            },\n-            {\"singleNumericFilterGreater\", \"process where serial_event_id > 4\",\n-                    \"\\\"range\\\":{\\\"serial_event_id\\\":{\\\"from\\\":4,\\\"to\\\":null,\\\"include_lower\\\":false,\\\"include_upper\\\":false\"\n-            },\n-            {\"singleNumericFilterGreaterEquals\", \"process where serial_event_id >= 4\",\n-                    \"\\\"range\\\":{\\\"serial_event_id\\\":{\\\"from\\\":4,\\\"to\\\":null,\\\"include_lower\\\":true,\\\"include_upper\\\":false\"\n-            },\n-            {\"mixedTypeFilter\", \"process where process_name == \\\"notepad.exe\\\" or (serial_event_id < 4.5 and serial_event_id >= 3.1)\",\n-                    new Object[]{\n-                            \"\\\"term\\\":{\\\"process_name\\\":{\\\"value\\\":\\\"notepad.exe\\\"\",\n-                            \"\\\"range\\\":{\\\"serial_event_id\\\":{\\\"from\\\":3.1,\\\"to\\\":4.5,\\\"include_lower\\\":true,\\\"include_upper\\\":false\"\n-                    }\n-            },\n-            {\"notFilter\", \"process where not (exit_code > -1)\",\n-                    \"\\\"range\\\":{\\\"exit_code\\\":{\\\"from\\\":null,\\\"to\\\":-1,\\\"include_lower\\\":false,\\\"include_upper\\\":true\"\n-            },\n-            {\"inFilter\", \"process where process_name in (\\\"python.exe\\\", \\\"SMSS.exe\\\", \\\"explorer.exe\\\")\",\n-                    new Object[]{\n-                            \"\\\"term\\\":{\\\"process_name\\\":{\\\"value\\\":\\\"python.exe\\\"\",\n-                            \"\\\"term\\\":{\\\"process_name\\\":{\\\"value\\\":\\\"SMSS.exe\\\"\",\n-                            \"\\\"term\\\":{\\\"process_name\\\":{\\\"value\\\":\\\"explorer.exe\\\"\",\n-                    }\n-            },\n-            {\"equalsAndInFilter\", \"process where process_path == \\\"*\\\\\\\\red_ttp\\\\\\\\wininit.*\\\" and opcode in (0,1,2,3)\",\n-                    new Object[]{\n-                            \"\\\"wildcard\\\":{\\\"process_path\\\":{\\\"wildcard\\\":\\\"*\\\\\\\\\\\\\\\\red_ttp\\\\\\\\\\\\\\\\wininit.*\\\"\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":0\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":1\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":2\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":3\",\n-                    }\n-            },\n-            {\"substringFunction\", \"process where substring(file_name, -4) == '.exe'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed316d3558084ee0be06c80ba70cd386c133fd3"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4250, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}