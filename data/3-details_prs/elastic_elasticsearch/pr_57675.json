{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODY5OTc0", "number": 57675, "title": "Add support for snapshot and restore to data streams", "bodyText": "This change adds support for including data streams in snapshots.\nNames are provided in indices field (the same way as in other APIs), wildcards are supported.\nIf rename pattern is specified it renames both data streams and backing indices.\nCloses #57127\nRelates to #53100", "createdAt": "2020-06-04T14:16:13Z", "url": "https://github.com/elastic/elasticsearch/pull/57675", "merged": true, "mergeCommit": {"oid": "023b6bbcf16e1e7108ef6feb4918c3691addb051"}, "closed": true, "closedAt": "2020-06-19T07:19:26Z", "author": {"login": "probakowski"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn7X9jAH2gAyNDI3ODY5OTc0OjNmYjNhNWU4NWU5NTYwZTQ0NTkzNjkxZmQ5YjI3MjljMmFlMjc2ZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcstUzYAFqTQzMzgzOTU5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3fb3a5e85e9560e44593691fd9b2729c2ae276e4", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/3fb3a5e85e9560e44593691fd9b2729c2ae276e4", "committedDate": "2020-06-04T10:19:42Z", "message": "snapshot-restore working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac7a8e2e81c1a2882b2d9a8b15e2d9dafb254a09", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/ac7a8e2e81c1a2882b2d9a8b15e2d9dafb254a09", "committedDate": "2020-06-04T11:57:33Z", "message": "store data streams in SnapshotInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbff19cdb20505e9bd14192293af8b5cc391746c", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/cbff19cdb20505e9bd14192293af8b5cc391746c", "committedDate": "2020-06-04T12:00:19Z", "message": "Merge remote-tracking branch 'origin/master' into datastreams-snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5fdd80a9e763ddd62399886ff6897f7561efa48", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/f5fdd80a9e763ddd62399886ff6897f7561efa48", "committedDate": "2020-06-04T13:36:40Z", "message": "store data streams in SnapshotInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38672a25abc04692eeb5717272288793ac12a4e7", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/38672a25abc04692eeb5717272288793ac12a4e7", "committedDate": "2020-06-04T14:25:30Z", "message": "fix ccr repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e97739c5223aed3cc7a07ce27940f54f694fe84b", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/e97739c5223aed3cc7a07ce27940f54f694fe84b", "committedDate": "2020-06-04T14:34:38Z", "message": "fix SLM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "028d73129b63440bc4526850668a10c2a948f65c", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/028d73129b63440bc4526850668a10c2a948f65c", "committedDate": "2020-06-04T14:43:02Z", "message": "fix SLM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/7a75eb13de812f791e666d9152873cde262eb30d", "committedDate": "2020-06-04T15:01:48Z", "message": "fix tests and checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjEwNjAw", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-424610600", "createdAt": "2020-06-04T16:10:54Z", "commit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjoxMDo1NFrOGfNcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjoxNDo1M1rOGfNlwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3OTIzNw==", "bodyText": "I don't think we need the concrete instances of DataStream here? I think we should just track the IDs of data streams to snapshot here like we do for indices. Otherwise, we have to keep these in memory for the whole duration of the snapshot.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435379237", "createdAt": "2020-06-04T16:10:54Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -202,6 +208,10 @@ public long startTime() {\n             return startTime;\n         }\n \n+        public List<DataStream> dataStreams() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTY5Nw==", "bodyText": "I would rather not add the data streams to the SnapshotInfo blobs. Adding them here, means that these blobs can get quite large and we load them in parallel in many occasions (e.g. SLM figuring out what snapshots to delete). These blobs really are designed as a lightweight thing, not as something to store data in. If we add to it we up the resource (memory+transfer) usage of our get snapshots APIs which is already problematic in some cases.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435381697", "createdAt": "2020-06-04T16:14:53Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java", "diffHunk": "@@ -53,12 +54,15 @@\n  */\n public final class SnapshotInfo implements Comparable<SnapshotInfo>, ToXContent, Writeable {\n \n+    public static final Version DATA_STREAMS_IN_SNAPSHOT = Version.V_8_0_0;\n+\n     public static final String CONTEXT_MODE_PARAM = \"context_mode\";\n     public static final String CONTEXT_MODE_SNAPSHOT = \"SNAPSHOT\";\n     private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern(\"strictDateOptionalTime\");\n     private static final String SNAPSHOT = \"snapshot\";\n     private static final String UUID = \"uuid\";\n     private static final String INDICES = \"indices\";\n+    private static final String DATA_STREAMS = \"data_streams\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjM0NDY2", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-424634466", "createdAt": "2020-06-04T16:39:40Z", "commit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjozOTo0MFrOGfOjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjozOTo0MFrOGfOjGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzQwMw==", "bodyText": "You have to make sure not to allow any specific data stream snapshotting as long as there's master nodes older than DATA_STREAMS_IN_SNAPSHOT in the cluster. Otherwise, if you have a master failover to an old version master the information about the data stream snapshots is just lost because it won't deserialize that part.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435397403", "createdAt": "2020-06-04T16:39:40Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -224,7 +225,17 @@ public ClusterState execute(ClusterState currentState) {\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n                 List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                    request.indicesOptions(), request.indices()));\n+                    request.indicesOptions(), true, request.indices()));\n+\n+                Map<String, DataStream> allDataStreams = currentState.metadata().dataStreams();\n+                List<DataStream> dataStreams;\n+                if(request.includeGlobalState()){\n+                    dataStreams = new ArrayList<>(allDataStreams.values());\n+                } else {\n+                    dataStreams = indexNameExpressionResolver.dataStreamNames(currentState, request.indicesOptions(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a0f7ae440febc54c95e1bb185db51d2db58264f", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/6a0f7ae440febc54c95e1bb185db51d2db58264f", "committedDate": "2020-06-05T09:21:45Z", "message": "Revert \"fix SLM\"\n\nThis reverts commit 028d73129b63440bc4526850668a10c2a948f65c."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed053c27c6a20cc21046335f4fc2d79befe1665", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/3ed053c27c6a20cc21046335f4fc2d79befe1665", "committedDate": "2020-06-05T09:21:49Z", "message": "Revert \"fix SLM\"\n\nThis reverts commit e97739c5223aed3cc7a07ce27940f54f694fe84b."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad7a604e577d6dba60fa9a6220f6fdde8962379", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/8ad7a604e577d6dba60fa9a6220f6fdde8962379", "committedDate": "2020-06-05T09:21:53Z", "message": "Revert \"fix ccr repository\"\n\nThis reverts commit 38672a25abc04692eeb5717272288793ac12a4e7."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec931e78fdee7641aff56b47f24ecf307204d74", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/7ec931e78fdee7641aff56b47f24ecf307204d74", "committedDate": "2020-06-05T09:21:56Z", "message": "Revert \"store data streams in SnapshotInfo\"\n\nThis reverts commit f5fdd80a9e763ddd62399886ff6897f7561efa48."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef9702116f92e67d7d6ca843e6222f7bba9693c", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/9ef9702116f92e67d7d6ca843e6222f7bba9693c", "committedDate": "2020-06-05T09:38:41Z", "message": "Revert \"store data streams in SnapshotInfo\"\n\nThis reverts commit ac7a8e2e81c1a2882b2d9a8b15e2d9dafb254a09."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0dd528fbebf5ce0dcb91321797012a2efd41443", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0dd528fbebf5ce0dcb91321797012a2efd41443", "committedDate": "2020-06-05T09:57:48Z", "message": "tests fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41bfb409beffdfe344b179bdb60df311a061aac3", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/41bfb409beffdfe344b179bdb60df311a061aac3", "committedDate": "2020-06-05T10:15:57Z", "message": "checkstyle + all ds on global state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f8a105990c07f062c1b29ed7ff3dccc3395037e", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/0f8a105990c07f062c1b29ed7ff3dccc3395037e", "committedDate": "2020-06-05T10:44:06Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8acc602d20df15131900d31116ec370364e533f", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/d8acc602d20df15131900d31116ec370364e533f", "committedDate": "2020-06-09T08:56:50Z", "message": "tests fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69a393d596603543c06e73e59f4bb8b23d1d76eb", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/69a393d596603543c06e73e59f4bb8b23d1d76eb", "committedDate": "2020-06-09T08:57:52Z", "message": "Merge remote-tracking branch 'origin/master' into datastreams-snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "931fd31a04b46780939f81f7db6ca325fa628918", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/931fd31a04b46780939f81f7db6ca325fa628918", "committedDate": "2020-06-09T10:43:35Z", "message": "Rename adjusted to new naming requirements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/e51533f5ef320be6391ea790fe5eb15191a50f85", "committedDate": "2020-06-09T11:22:53Z", "message": "removed test after changing assumptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDgzNDQ3", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-427083447", "createdAt": "2020-06-09T12:20:36Z", "commit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyMDozN1rOGhGnQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjo1MTozNlrOGhIACg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NDU0Nw==", "bodyText": "iirc if actionGet() is invoked then the real exception is thrown instead of ExecutionException. So maybe do that instead of invoked get()?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437364547", "createdAt": "2020-06-09T12:20:37Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds\").get().getHits().getHits()[0].getSourceAsMap());\n+\n+        restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")\n+            .get();\n+\n+        ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds2\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds2-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds2\").get().getHits().getHits()[0].getSourceAsMap());\n+    }\n+\n+    public void testWildcards() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"d*\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"d*\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")\n+            .get();\n+\n+        assertEquals(RestStatus.OK, restoreSnapshotResponse.status());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds2\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds2-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+    }\n+\n+    public void testDataStreamNotStoredWhenIndexRequested() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\".ds-ds-000001\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+        expectThrows(Exception.class, () -> client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get());\n+    }\n+\n+    public void testDataStreamNotRestoredWhenIndexRequested() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\".ds-ds-*\")\n+            .get();\n+\n+        assertEquals(RestStatus.OK, restoreSnapshotResponse.status());\n+\n+        GetDataStreamAction.Request getRequest = new GetDataStreamAction.Request(\"ds\");\n+        Throwable e = expectThrows(ExecutionException.class, () -> client.admin().indices().getDataStreams(getRequest).get()).getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NTAyNg==", "bodyText": "Maybe also do a search on the restored data stream?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437365026", "createdAt": "2020-06-09T12:21:06Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2OTI4NQ==", "bodyText": "maybe test the rename functionality in a separate test method?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437369285", "createdAt": "2020-06-09T12:25:48Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds\").get().getHits().getHits()[0].getSourceAsMap());\n+\n+        restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3Mzg3NA==", "bodyText": "Maybe write a unit test for this method, which tests the renaming more thoroughly?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437373874", "createdAt": "2020-06-09T12:30:53Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -552,6 +586,17 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n         }\n     }\n \n+    private DataStream updateDataStream(DataStream dataStream, Metadata.Builder metadata, RestoreSnapshotRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NjA0OA==", "bodyText": "Maybe add a unit test for this method to IndexNameExpressionResolverTests?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437376048", "createdAt": "2020-06-09T12:33:23Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -117,6 +117,15 @@\n         return concreteIndexNames(context, indexExpressions);\n     }\n \n+    public List<String> dataStreamNames(ClusterState state, IndicesOptions options, String... indexExpressions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4MjI0NQ==", "bodyText": "Maybe keep this test and just removing the mentioned lines? Or assume that during a restore global state is loaded.\nSo that we ensure no global state is loaded when creating a snapshot or using get snapshot api and snapshot status api?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437382245", "createdAt": "2020-06-09T12:43:32Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/MetadataLoadingDuringSnapshotRestoreIT.java", "diffHunk": "@@ -1,217 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.snapshots;\n-\n-import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n-import org.elasticsearch.action.support.PlainActionFuture;\n-import org.elasticsearch.cluster.metadata.IndexMetadata;\n-import org.elasticsearch.cluster.metadata.Metadata;\n-import org.elasticsearch.cluster.metadata.RepositoryMetadata;\n-import org.elasticsearch.cluster.service.ClusterService;\n-import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n-import org.elasticsearch.env.Environment;\n-import org.elasticsearch.plugins.Plugin;\n-import org.elasticsearch.repositories.IndexId;\n-import org.elasticsearch.repositories.RepositoriesService;\n-import org.elasticsearch.repositories.Repository;\n-import org.elasticsearch.repositories.RepositoryData;\n-import org.elasticsearch.rest.RestStatus;\n-import org.elasticsearch.snapshots.mockstore.MockRepository;\n-\n-import java.io.IOException;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.hamcrest.Matchers.instanceOf;\n-import static org.hamcrest.Matchers.nullValue;\n-\n-/**\n- * This class tests whether global and index metadata are only loaded from the repository when needed.\n-*/\n-public class MetadataLoadingDuringSnapshotRestoreIT extends AbstractSnapshotIntegTestCase {\n-\n-    @Override\n-    protected Collection<Class<? extends Plugin>> nodePlugins() {\n-        /// This test uses a snapshot/restore plugin implementation that\n-        // counts the number of times metadata are loaded\n-        return Collections.singletonList(CountingMockRepositoryPlugin.class);\n-    }\n-\n-    public void testWhenMetadataAreLoaded() throws Exception {\n-        createIndex(\"docs\");\n-        indexRandom(true,\n-            client().prepareIndex(\"docs\").setId(\"1\").setSource(\"rank\", 1),\n-            client().prepareIndex(\"docs\").setId(\"2\").setSource(\"rank\", 2),\n-            client().prepareIndex(\"docs\").setId(\"3\").setSource(\"rank\", 3),\n-            client().prepareIndex(\"others\").setSource(\"rank\", 4),\n-            client().prepareIndex(\"others\").setSource(\"rank\", 5));\n-\n-        createRepository(\"repository\", CountingMockRepositoryPlugin.TYPE, randomRepoPath());\n-\n-        // Creating a snapshot does not load any metadata\n-        CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot(\"repository\", \"snap\")\n-                                                                                    .setIncludeGlobalState(true)\n-                                                                                    .setWaitForCompletion(true)\n-                                                                                    .get();\n-        assertThat(createSnapshotResponse.getSnapshotInfo().failedShards(), equalTo(0));\n-        assertThat(createSnapshotResponse.getSnapshotInfo().status(), equalTo(RestStatus.OK));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 0);\n-\n-        // Getting a snapshot does not load any metadata\n-        GetSnapshotsResponse getSnapshotsResponse =\n-            client().admin().cluster().prepareGetSnapshots(\"repository\").addSnapshots(\"snap\").setVerbose(randomBoolean()).get();\n-        assertThat(getSnapshotsResponse.getSnapshots(\"repository\"), hasSize(1));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 0);\n-\n-        // Getting the status of a snapshot loads indices metadata but not global metadata\n-        SnapshotsStatusResponse snapshotStatusResponse =\n-            client().admin().cluster().prepareSnapshotStatus(\"repository\").setSnapshots(\"snap\").get();\n-        assertThat(snapshotStatusResponse.getSnapshots(), hasSize(1));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 1);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 1);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\", \"others\"));\n-\n-        // Restoring a snapshot loads indices metadata but not the global state\n-        RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-                                                                                    .setWaitForCompletion(true)\n-                                                                                    .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 2);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 2);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\"));\n-\n-        // Restoring a snapshot with selective indices loads only required index metadata\n-        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-                                                            .setIndices(\"docs\")\n-                                                            .setWaitForCompletion(true)\n-                                                            .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 3);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 2);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\", \"others\"));\n-\n-        // Restoring a snapshot including the global state loads it with the index metadata\n-        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-            .setIndices(\"docs\", \"oth*\")\n-            .setRestoreGlobalState(true)\n-            .setWaitForCompletion(true)\n-            .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 1);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 4);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NzI3NA==", "bodyText": "Maybe adjust SnapshotsInProgressSerializationTests, so that a randomly generated instance also contains randomly a list of data stream names.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437387274", "createdAt": "2020-06-09T12:51:36Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -56,6 +56,7 @@\n public class SnapshotsInProgress extends AbstractNamedDiffable<Custom> implements Custom {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTI3Mjc1", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-427127275", "createdAt": "2020-06-09T13:11:00Z", "commit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMTowMVrOGhJDAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyNDo0NlrOGhJncw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNDQxNg==", "bodyText": "NIT: Maybe refactor this a little cleaner to:\nfinal  List<String> dataStreams;\nif (in.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)){\n                dataStreams = Arrays.asList(in.readStringArray());\n} else {\n  dataStreams = Collections.emptyList();\n}", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437404416", "createdAt": "2020-06-09T13:11:01Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -531,11 +540,16 @@ public SnapshotsInProgress(StreamInput in) throws IOException {\n                 // generations.\n                 version = in.readBoolean() ? SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION : SnapshotsService.OLD_SNAPSHOT_FORMAT;\n             }\n+            List<String> dataStreams = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTA3MA==", "bodyText": "You can just use writeStringCollection no need to go through the array round trip.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437405070", "createdAt": "2020-06-09T13:11:59Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -573,6 +587,9 @@ public void writeTo(StreamOutput out) throws IOException {\n             } else {\n                 out.writeBoolean(SnapshotsService.useShardGenerations(entry.version));\n             }\n+            if (out.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)) {\n+                out.writeStringArray(entry.dataStreams.toArray(new String[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTM2MA==", "bodyText": "use in.readStringList", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437405360", "createdAt": "2020-06-09T13:12:26Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -531,11 +540,16 @@ public SnapshotsInProgress(StreamInput in) throws IOException {\n                 // generations.\n                 version = in.readBoolean() ? SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION : SnapshotsService.OLD_SNAPSHOT_FORMAT;\n             }\n+            List<String> dataStreams = Collections.emptyList();\n+            if (in.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)){\n+                dataStreams = Arrays.asList(in.readStringArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNzI1Mw==", "bodyText": "This looks broken, we should always be able to read global metadata (we always write at least a dummy instance of it to the repository). If we fail here, then that means the snapshot is corrupted and we should throw right away and can simplify the below code accordingly.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437407253", "createdAt": "2020-06-09T13:15:16Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -201,12 +205,36 @@ public void restoreSnapshot(final RestoreSnapshotRequest request, final ActionLi\n                 // Make sure that we can restore from this snapshot\n                 validateSnapshotRestorable(repositoryName, snapshotInfo);\n \n+                SnapshotException snapshotException = null;\n+                Metadata globalMetadata = null;\n                 // Resolve the indices from the snapshot that need to be restored\n-                final List<String> indicesInSnapshot = filterIndices(snapshotInfo.indices(), request.indices(), request.indicesOptions());\n+                try {\n+                    globalMetadata = repository.getSnapshotGlobalMetadata(snapshotId);\n+                } catch (SnapshotException e) {\n+                    snapshotException = e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTg4Ng==", "bodyText": "This look potentially broken. can we remove a data stream while it is in the process of being snapshotted? (looks like it) If so, then we're failing without error if someone concurrently removes (while the data nodes are busy doing their work) and before we get here it?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437411886", "createdAt": "2020-06-09T13:22:06Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -355,6 +365,10 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            Map<String, DataStream> dataStreams = new HashMap<>(metadata.dataStreams());\n+            dataStreams.keySet().removeIf(ds -> snapshot.dataStreams().contains(ds) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMzc0Nw==", "bodyText": "We should assert that we don't have any data streams if we're writing to an older version and must make sure to not start snapshots that include data streams as long as there's old version nodes in the cluster that don't understand data stream snapshots.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437413747", "createdAt": "2020-06-09T13:24:46Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -573,6 +587,9 @@ public void writeTo(StreamOutput out) throws IOException {\n             } else {\n                 out.writeBoolean(SnapshotsService.useShardGenerations(entry.version));\n             }\n+            if (out.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTYwMTI0", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-427160124", "createdAt": "2020-06-09T13:39:57Z", "commit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozOTo1N1rOGhKSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0MDoxMlrOGhKS2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDY0OQ==", "bodyText": "Minor, but having gone through the exercise of changing the backing index naming scheme, it would be nice to use DataStream::getDefaultBackingIndexName here so any future changes are automatically picked up.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437424649", "createdAt": "2020-06-09T13:39:57Z", "author": {"login": "danhermann"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDg1Ng==", "bodyText": "same here and a couple other places below", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437424856", "createdAt": "2020-06-09T13:40:12Z", "author": {"login": "danhermann"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b21f6cb8821cdc81e4551da1b11d8defb7885673", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/b21f6cb8821cdc81e4551da1b11d8defb7885673", "committedDate": "2020-06-10T09:37:10Z", "message": "tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2a098532e0f9babf4d3a43cd50b7d5090905f5", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/4a2a098532e0f9babf4d3a43cd50b7d5090905f5", "committedDate": "2020-06-10T20:35:41Z", "message": "min snapshot version required"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9628d0e6620b3424e0d502024740f73e81ce4d98", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/9628d0e6620b3424e0d502024740f73e81ce4d98", "committedDate": "2020-06-12T11:43:04Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1cd151d92d289d1fc3c8fdf9aba85d8a6653eba", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/a1cd151d92d289d1fc3c8fdf9aba85d8a6653eba", "committedDate": "2020-06-12T12:14:49Z", "message": "Merge branch 'master' into datastreams-snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b11dfe63a6dd058466fd9e9ab7786fcf2e08eff", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/8b11dfe63a6dd058466fd9e9ab7786fcf2e08eff", "committedDate": "2020-06-12T12:26:45Z", "message": "Merge remote-tracking branch 'origin/master' into datastreams-snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fc7e0685129cb56148e0f772d475cc9738e962", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/57fc7e0685129cb56148e0f772d475cc9738e962", "committedDate": "2020-06-12T12:42:19Z", "message": "test change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b143137d19abb5af02fe547de3265f54065ebdd2", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/b143137d19abb5af02fe547de3265f54065ebdd2", "committedDate": "2020-06-12T20:06:46Z", "message": "store data streams in user metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4161e97a972dda4c8d2e9ec7369ae3b3b9ce52ee", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/4161e97a972dda4c8d2e9ec7369ae3b3b9ce52ee", "committedDate": "2020-06-12T20:08:00Z", "message": "Merge remote-tracking branch 'origin/master' into datastreams-snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f92d777aafbd24776740b550e12ff15802e8946", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/7f92d777aafbd24776740b550e12ff15802e8946", "committedDate": "2020-06-12T20:12:48Z", "message": "reverted unneeded changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6082bb7b385f3fe232337acd0100312a5b9e6161", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/6082bb7b385f3fe232337acd0100312a5b9e6161", "committedDate": "2020-06-12T20:13:55Z", "message": "reverted unneeded changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e07b3428dbc987844df657407296ab64bd6307e", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/1e07b3428dbc987844df657407296ab64bd6307e", "committedDate": "2020-06-13T05:38:05Z", "message": "Merge branch 'master' into datastreams-snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9225583d27657228ef2f6bfa2a7b18d35db4c66", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/e9225583d27657228ef2f6bfa2a7b18d35db4c66", "committedDate": "2020-06-13T20:25:27Z", "message": "handle null usermeta"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e9195ae6f9f63901e93bb1682a9b64b11a8ecfa", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/4e9195ae6f9f63901e93bb1682a9b64b11a8ecfa", "committedDate": "2020-06-13T20:45:27Z", "message": "checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f611d5beeecda9eb43057f1ce82eff5fe49da3ae", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/f611d5beeecda9eb43057f1ce82eff5fe49da3ae", "committedDate": "2020-06-14T13:31:44Z", "message": "Merge branch 'master' into datastreams-snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3955ee46c00db519ae3cefc039f0a609cc6daada", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/3955ee46c00db519ae3cefc039f0a609cc6daada", "committedDate": "2020-06-15T07:11:38Z", "message": "test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "858a6da67c176a54ed3822a6918f12160490678f", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/858a6da67c176a54ed3822a6918f12160490678f", "committedDate": "2020-06-15T07:11:38Z", "message": "don't set userMeta if not needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc7da85a463bd93f7c0f75c46b7ee86c324e8fd8", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/fc7da85a463bd93f7c0f75c46b7ee86c324e8fd8", "committedDate": "2020-06-15T07:27:00Z", "message": "fix npe in SnapshotService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/78ec5e7237e7b0fb8fc21917f8b95af7300696a4", "committedDate": "2020-06-15T08:09:22Z", "message": "test fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzYzNDI1", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-430763425", "createdAt": "2020-06-15T15:37:30Z", "commit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODA2Njgy", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-430806682", "createdAt": "2020-06-15T16:29:49Z", "commit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyOTo1MFrOGj5y3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyOTo1MFrOGj5y3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg==", "bodyText": "What code guarantees that we don't trip this assertion? It seems to me I can simply remove a data stream while a non-partial snapshot is running right now can't I?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440300252", "createdAt": "2020-06-15T16:29:50Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTkxOTA5", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-431191909", "createdAt": "2020-06-16T06:23:27Z", "commit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjoyMzoyOFrOGkM0cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjoyMzoyOFrOGkM0cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMTk1Mg==", "bodyText": "Another thing I just noticed, we will have to update the list of data streams that gets written to SnapshotInfo down the line in case of partial snapshots (if one was concurrently removed) won't we? Currently partial snapshots would list data streams in their SnapshotInfo that may not be part of the snapshot because they were concurrently deleted?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440611952", "createdAt": "2020-06-16T06:23:28Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0881bf7cf3c4b5aecd80787910ef561a99f3e909", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/0881bf7cf3c4b5aecd80787910ef561a99f3e909", "committedDate": "2020-06-16T11:20:35Z", "message": "Store data streams names in SnapshotInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97dc7f079be16879ab31316822074058a3bd8884", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/97dc7f079be16879ab31316822074058a3bd8884", "committedDate": "2020-06-16T21:10:08Z", "message": "fixed SnapshotInfo.equals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304e39a8158a625444edddca8f2757d005baf83d", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/304e39a8158a625444edddca8f2757d005baf83d", "committedDate": "2020-06-17T09:31:03Z", "message": "fix SnapshotService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc727e74792e1fdfd61039e40c15e40c6311596", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/bbc727e74792e1fdfd61039e40c15e40c6311596", "committedDate": "2020-06-17T12:01:20Z", "message": "Prevent delete snapshotting data stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d65b34219ffedf53c4209a1e36bb3c99392133e", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/0d65b34219ffedf53c4209a1e36bb3c99392133e", "committedDate": "2020-06-18T09:10:49Z", "message": "add SLM test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/569e848d2b92a3b1ec86113ec13b4d2d20374226", "committedDate": "2020-06-18T14:26:39Z", "message": "Merge branch 'master' into datastreams-snapshots"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDM1NjMy", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-433435632", "createdAt": "2020-06-18T16:07:54Z", "commit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjowNzo1NFrOGl2Tlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozNjoxN1rOGl3Y5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MDI0Ng==", "bodyText": "I think this would benefit from a real integration test like we have for indices with org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT#testCloseOrDeleteIndexDuringSnapshot. There's lots of things that can go wrong with changes to the snapshot code that this test won't catch. I think it's pretty easy to create an analogous test to org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT#testCloseOrDeleteIndexDuringSnapshot for data streams right?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442340246", "createdAt": "2020-06-18T16:07:54Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/DeleteDataStreamRequestTests.java", "diffHunk": "@@ -85,6 +90,31 @@ public void testDeleteDataStream() {\n         }\n     }\n \n+    public void testDeleteSnapshottingDataStream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NjczNw==", "bodyText": "This can be reverted again I think", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442356737", "createdAt": "2020-06-18T16:34:05Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -194,7 +195,8 @@ public void createSnapshot(final CreateSnapshotRequest request, final ActionList\n             return;\n         }\n         final Snapshot snapshot = new Snapshot(repositoryName, snapshotId);\n-        final Map<String, Object> userMeta = repository.adaptUserMetadata(request.userMetadata());\n+\n+        Map<String, Object> userMeta = repository.adaptUserMetadata(request.userMetadata());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Nzk4OQ==", "bodyText": "This comment does not apply?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442357989", "createdAt": "2020-06-18T16:36:17Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/slm/SnapshotLifecycleRestIT.java", "diffHunk": "@@ -461,6 +465,49 @@ public void testBasicTimeBasedRetention() throws Exception {\n         }\n     }\n \n+    public void testDataStreams() throws Exception {\n+        String dataStreamName = \"ds-test\";\n+        String repoId = \"ds-repo\";\n+        String policyName = \"ds-policy\";\n+\n+        String mapping = \"{\\n\" +\n+            \"      \\\"properties\\\": {\\n\" +\n+            \"        \\\"@timestamp\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"date\\\"\\n\" +\n+            \"        }\\n\" +\n+            \"      }\\n\" +\n+            \"    }\";\n+        Template template = new Template(null, new CompressedXContent(mapping), null);\n+        createComposableTemplate(client(), \"ds-template\", dataStreamName, template);\n+\n+        client().performRequest(new Request(\"PUT\", \"_data_stream/\" + dataStreamName));\n+\n+        // Create a snapshot repo\n+        initializeRepo(repoId);\n+\n+        // Create a policy with a retention period of 1 millisecond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6ca14932f2053719ba2a2f000cfc59a2f6e76ea", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/c6ca14932f2053719ba2a2f000cfc59a2f6e76ea", "committedDate": "2020-06-18T21:16:26Z", "message": "pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e560d7e40de3b092b8702837520300eb841b6c28", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/e560d7e40de3b092b8702837520300eb841b6c28", "committedDate": "2020-06-18T22:03:01Z", "message": "test fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODM5NTky", "url": "https://github.com/elastic/elasticsearch/pull/57675#pullrequestreview-433839592", "createdAt": "2020-06-19T06:47:12Z", "commit": {"oid": "e560d7e40de3b092b8702837520300eb841b6c28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3892, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}