{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MzU1MzE4", "number": 65489, "title": "Introduce dynamic runtime setting", "bodyText": "The dynamic:runtime setting is similar to dynamic:true in that it dynamically defines fields based on values parsed from incoming documents. Though instead of defining leaf fields under properties, it defines them as runtime fields under the runtime section. This is useful in scenarios where search speed can be traded for storage costs, given that runtime fields are loaded at runtime rather than indexed.", "createdAt": "2020-11-25T10:51:21Z", "url": "https://github.com/elastic/elasticsearch/pull/65489", "merged": true, "mergeCommit": {"oid": "e144471b3e607cc8b6b3c7a0e7f4706a4bdb9381"}, "closed": true, "closedAt": "2020-12-08T14:29:24Z", "author": {"login": "javanna"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf7r9TAH2gAyNTI3MzU1MzE4OjQ2MTYxNzNjNDEwNmVkZjVjNDE2YWJmYzZkNmFhNzY2YjQ2ZTkxYjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkJ1yIAH2gAyNTI3MzU1MzE4OjU0MGYzMzVmNGVmYmVkZTI5NTE3MDdkNDZmODBmMDBkZjlkYTIxMmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4616173c4106edf5c416abfc6d6aa766b46e91b0", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/4616173c4106edf5c416abfc6d6aa766b46e91b0", "committedDate": "2020-11-25T10:21:18Z", "message": "WIP: introduce new dynamic runtime setting\n\nThe dynamic:runtime setting is similar to dynamic:true in that it dynamically defines fields based on values parsed from incoming documents. Though instead of defining leaf fields under properties, it defines them as runtime fields under the runtime section. This is useful in scenarios where search speed can be traded for storage costs, given that runtime fields are loaded at runtime rather than indexed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f037e4fee151ace6f63605d7b55de6120c0e7b7", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/5f037e4fee151ace6f63605d7b55de6120c0e7b7", "committedDate": "2020-11-25T10:22:59Z", "message": "Merge branch 'master' into enhancement/dynamic_runtime_mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34ed3994b22f11fe94cadc72434f84014cea0e81", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/34ed3994b22f11fe94cadc72434f84014cea0e81", "committedDate": "2020-11-25T10:39:39Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b2bcaabf8101e523b4b0ef5d10d2967aff20f09", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/8b2bcaabf8101e523b4b0ef5d10d2967aff20f09", "committedDate": "2020-11-25T10:50:29Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/0841dc140129a1be836c133a965db0593bfd5d0b", "committedDate": "2020-11-25T11:05:13Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTU4MzY1", "url": "https://github.com/elastic/elasticsearch/pull/65489#pullrequestreview-541158365", "createdAt": "2020-11-30T17:59:30Z", "commit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1OTozMFrOH8HCPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODowODo0MVrOH8HYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTg2OA==", "bodyText": "I'm curious why you don't make it an interface.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r532791868", "createdAt": "2020-11-30T17:59:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DynamicFieldsBuilder.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.time.DateFormatter;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Encapsulates the logic for dynamically creating fields based on values parsed from incoming documents.\n+ */\n+abstract class DynamicFieldsBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MzU1MQ==", "bodyText": "Could we use DynamicFieldsBuilder instead? And let the runtime plugin delegate for binary fields? Should we throw an exception for binary fields instead? Or not create them at all? It fields weird that runtime:dynamic could make non-dynamic fields.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r532793551", "createdAt": "2020-11-30T18:02:02Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DynamicRuntimeFieldsBuilder.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.elasticsearch.common.time.DateFormatter;\n+import org.elasticsearch.plugins.MapperPlugin;\n+\n+/**\n+ * Defines how runtime fields are created dynamically. Used when objects are mapped with dynamic:runtime.\n+ * @see MapperPlugin#getDynamicRuntimeFieldsBuilder()\n+ */\n+public interface DynamicRuntimeFieldsBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5NTIxNA==", "bodyText": "Could we have this return the DynamicFieldsBuilder` or something like it? It kind of feels weird to have the way we handle dynamic fields controlled both by this enum and a pluggable behavior layer.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r532795214", "createdAt": "2020-11-30T18:04:49Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -540,10 +543,9 @@ private static void parseArray(ParseContext context, ObjectMapper parentMapper,\n             Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, parentMapper);\n             parentMapper = parentMapperTuple.v2();\n             ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);\n-            if (dynamic == ObjectMapper.Dynamic.STRICT) {\n-                throw new StrictDynamicMappingException(parentMapper.fullPath(), arrayFieldName);\n-            } else if (dynamic == ObjectMapper.Dynamic.TRUE) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, arrayFieldName, XContentFieldType.OBJECT);\n+            if (dynamic.canCreateDynamicFields()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5NTg0Mg==", "bodyText": "dynamicOrDefault has this:\n            if (parentMapper == null) {\n                // If parentMapper is ever null, it means the parent of the current mapper was dynamically created.\n                // But in order to be created dynamically, the dynamic setting of that parent was necessarily true\n                return ObjectMapper.Dynamic.TRUE;\n            }\n\nwhich worries me a bit. Should that depend on the configured dynamic value?", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r532795842", "createdAt": "2020-11-30T18:05:57Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -540,10 +543,9 @@ private static void parseArray(ParseContext context, ObjectMapper parentMapper,\n             Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, parentMapper);\n             parentMapper = parentMapperTuple.v2();\n             ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5NjU2Nw==", "bodyText": "Neat!", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r532796567", "createdAt": "2020-11-30T18:07:08Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -679,63 +669,29 @@ private static void parseNullValue(ParseContext context, ObjectMapper parentMapp\n                         // failure to parse this, continue\n                         continue;\n                     }\n-                    Mapper.Builder builder\n-                        = context.root().findTemplateBuilder(context, currentFieldName, dateTimeFormatter);\n-                    if (builder == null) {\n-                        boolean ignoreMalformed = IGNORE_MALFORMED_SETTING.get(context.indexSettings().getSettings());\n-                        builder = new DateFieldMapper.Builder(currentFieldName, DateFieldMapper.Resolution.MILLISECONDS,\n-                            dateTimeFormatter, ignoreMalformed, Version.indexCreated(context.indexSettings().getSettings()));\n-                    }\n-                    return builder;\n-\n+                    return dynamicFieldsBuilder.newDynamicDateField(context, currentFieldName, dateTimeFormatter);\n                 }\n             }\n-\n-            Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.STRING);\n-            if (builder == null) {\n-                builder = new TextFieldMapper.Builder(currentFieldName,\n-                    () -> context.indexAnalyzers().getDefaultIndexAnalyzer())\n-                        .addMultiField(new KeywordFieldMapper.Builder(\"keyword\").ignoreAbove(256));\n-            }\n-            return builder;\n+            return dynamicFieldsBuilder.newDynamicStringField(context, currentFieldName);\n         } else if (token == XContentParser.Token.VALUE_NUMBER) {\n             XContentParser.NumberType numberType = context.parser().numberType();\n             if (numberType == XContentParser.NumberType.INT\n                     || numberType == XContentParser.NumberType.LONG\n                     || numberType == XContentParser.NumberType.BIG_INTEGER) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.LONG);\n-                if (builder == null) {\n-                    builder = newLongBuilder(currentFieldName, context.indexSettings().getSettings());\n-                }\n-                return builder;\n+                return dynamicFieldsBuilder.newDynamicLongField(context, currentFieldName);\n             } else if (numberType == XContentParser.NumberType.FLOAT\n                     || numberType == XContentParser.NumberType.DOUBLE\n                     || numberType == XContentParser.NumberType.BIG_DECIMAL) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.DOUBLE);\n-                if (builder == null) {\n-                    // no templates are defined, we use float by default instead of double\n-                    // since this is much more space-efficient and should be enough most of\n-                    // the time\n-                    builder = newFloatBuilder(currentFieldName, context.indexSettings().getSettings());\n-                }\n-                return builder;\n+                return dynamicFieldsBuilder.newDynamicDoubleField(context, currentFieldName);\n             }\n         } else if (token == XContentParser.Token.VALUE_BOOLEAN) {\n-            Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.BOOLEAN);\n-            if (builder == null) {\n-                builder = new BooleanFieldMapper.Builder(currentFieldName);\n-            }\n-            return builder;\n+            return dynamicFieldsBuilder.newDynamicBooleanField(context, currentFieldName);\n         } else if (token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {\n-            Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.BINARY);\n-            if (builder == null) {\n-                builder = new BinaryFieldMapper.Builder(currentFieldName);\n-            }\n-            return builder;\n+            return dynamicFieldsBuilder.newDynamicBinaryField(context, currentFieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5NzMzMQ==", "bodyText": "Maybe the builders should call these methods on the context?", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r532797331", "createdAt": "2020-11-30T18:08:23Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -752,11 +708,15 @@ private static void parseDynamicValue(final ParseContext context, ObjectMapper p\n         if (dynamic == ObjectMapper.Dynamic.FALSE) {\n             return;\n         }\n-        final Mapper.Builder builder = createBuilderFromDynamicValue(context, token, currentFieldName);\n-        Mapper mapper = builder.build(context.path());\n-        context.addDynamicMapper(mapper);\n-\n-        parseObjectOrField(context, mapper);\n+        DynamicFieldsBuilder dynamicFieldsBuilder = DynamicFieldsBuilder.forDynamic(dynamic);\n+        DynamicField dynamicField = createDynamicFieldFromValue(context, token, currentFieldName, dynamicFieldsBuilder);\n+        if (dynamicField.isRuntimeField()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5NzUwMQ==", "bodyText": "It might not be a problem, but it is worth an extra comment explaining why not.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r532797501", "createdAt": "2020-11-30T18:08:41Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -540,10 +543,9 @@ private static void parseArray(ParseContext context, ObjectMapper parentMapper,\n             Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, parentMapper);\n             parentMapper = parentMapperTuple.v2();\n             ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5NTg0Mg=="}, "originalCommit": {"oid": "0841dc140129a1be836c133a965db0593bfd5d0b"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07de311615d63ce193b22d4ddac32b15e12992f6", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/07de311615d63ce193b22d4ddac32b15e12992f6", "committedDate": "2020-12-04T11:30:19Z", "message": "Merge branch 'master' into enhancement/dynamic_runtime_mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5587f7c0e412e14a6b04b75646c3e8566bebe9b", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/d5587f7c0e412e14a6b04b75646c3e8566bebe9b", "committedDate": "2020-12-04T12:01:08Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222321d4c7cfe37b55217a79b898173a039b709d", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/222321d4c7cfe37b55217a79b898173a039b709d", "committedDate": "2020-12-04T12:34:59Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e08844e005976e15708bf10b13d12e26a46bbc0a", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/e08844e005976e15708bf10b13d12e26a46bbc0a", "committedDate": "2020-12-04T17:05:35Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a559a0a06a6cef6b9b87ab3164da0989aa5bc5", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/26a559a0a06a6cef6b9b87ab3164da0989aa5bc5", "committedDate": "2020-12-04T17:22:58Z", "message": "Merge branch 'master' into enhancement/dynamic_runtime_mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f528d2651ee96fb6f37e2524e0004da13414f97c", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/f528d2651ee96fb6f37e2524e0004da13414f97c", "committedDate": "2020-12-04T17:51:07Z", "message": "fix date creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "776fb4e634711d5669b9aca01c435978e85be5d4", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/776fb4e634711d5669b9aca01c435978e85be5d4", "committedDate": "2020-12-04T17:51:32Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTc5MjQx", "url": "https://github.com/elastic/elasticsearch/pull/65489#pullrequestreview-545179241", "createdAt": "2020-12-04T17:59:27Z", "commit": {"oid": "776fb4e634711d5669b9aca01c435978e85be5d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo1OToyN1rOH_bz_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo1OToyN1rOH_bz_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3ODAxNQ==", "bodyText": "this is all moved to DynamicFieldsBuilder now. it simplifies things as we no longer need to return either a runtime field or a mapper builder. We can directly do what's necessary, meaning adding the field where appropriate to the context, and potentially going further with parsing for concrete fields.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r536278015", "createdAt": "2020-12-04T17:59:27Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -626,122 +623,6 @@ private static void parseNullValue(ParseContext context, ObjectMapper parentMapp\n         }\n     }\n \n-    private static Mapper.Builder newLongBuilder(String name, Settings settings) {\n-        return new NumberFieldMapper.Builder(name, NumberFieldMapper.NumberType.LONG, settings);\n-    }\n-\n-    private static Mapper.Builder newFloatBuilder(String name, Settings settings) {\n-        return new NumberFieldMapper.Builder(name, NumberFieldMapper.NumberType.FLOAT, settings);\n-    }\n-\n-    private static Mapper.Builder createBuilderFromDynamicValue(final ParseContext context,\n-                                                                     XContentParser.Token token,\n-                                                                     String currentFieldName) throws IOException {\n-        if (token == XContentParser.Token.VALUE_STRING) {\n-            String text = context.parser().text();\n-\n-            boolean parseableAsLong = false;\n-            try {\n-                Long.parseLong(text);\n-                parseableAsLong = true;\n-            } catch (NumberFormatException e) {\n-                // not a long number\n-            }\n-\n-            boolean parseableAsDouble = false;\n-            try {\n-                Double.parseDouble(text);\n-                parseableAsDouble = true;\n-            } catch (NumberFormatException e) {\n-                // not a double number\n-            }\n-\n-            if (parseableAsLong && context.root().numericDetection()) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.LONG);\n-                if (builder == null) {\n-                    builder = newLongBuilder(currentFieldName, context.indexSettings().getSettings());\n-                }\n-                return builder;\n-            } else if (parseableAsDouble && context.root().numericDetection()) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.DOUBLE);\n-                if (builder == null) {\n-                    builder = newFloatBuilder(currentFieldName, context.indexSettings().getSettings());\n-                }\n-                return builder;\n-            } else if (parseableAsLong == false && parseableAsDouble == false && context.root().dateDetection()) {\n-                // We refuse to match pure numbers, which are too likely to be\n-                // false positives with date formats that include eg.\n-                // `epoch_millis` or `YYYY`\n-                for (DateFormatter dateTimeFormatter : context.root().dynamicDateTimeFormatters()) {\n-                    try {\n-                        dateTimeFormatter.parse(text);\n-                    } catch (ElasticsearchParseException | DateTimeParseException | IllegalArgumentException e) {\n-                        // failure to parse this, continue\n-                        continue;\n-                    }\n-                    Mapper.Builder builder\n-                        = context.root().findTemplateBuilder(context, currentFieldName, dateTimeFormatter);\n-                    if (builder == null) {\n-                        boolean ignoreMalformed = IGNORE_MALFORMED_SETTING.get(context.indexSettings().getSettings());\n-                        builder = new DateFieldMapper.Builder(currentFieldName, DateFieldMapper.Resolution.MILLISECONDS,\n-                            dateTimeFormatter, ignoreMalformed, context.indexSettings().getIndexVersionCreated());\n-                    }\n-                    return builder;\n-\n-                }\n-            }\n-\n-            Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.STRING);\n-            if (builder == null) {\n-                builder = new TextFieldMapper.Builder(currentFieldName, context.indexAnalyzers())\n-                        .addMultiField(new KeywordFieldMapper.Builder(\"keyword\").ignoreAbove(256));\n-            }\n-            return builder;\n-        } else if (token == XContentParser.Token.VALUE_NUMBER) {\n-            XContentParser.NumberType numberType = context.parser().numberType();\n-            if (numberType == XContentParser.NumberType.INT\n-                    || numberType == XContentParser.NumberType.LONG\n-                    || numberType == XContentParser.NumberType.BIG_INTEGER) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.LONG);\n-                if (builder == null) {\n-                    builder = newLongBuilder(currentFieldName, context.indexSettings().getSettings());\n-                }\n-                return builder;\n-            } else if (numberType == XContentParser.NumberType.FLOAT\n-                    || numberType == XContentParser.NumberType.DOUBLE\n-                    || numberType == XContentParser.NumberType.BIG_DECIMAL) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.DOUBLE);\n-                if (builder == null) {\n-                    // no templates are defined, we use float by default instead of double\n-                    // since this is much more space-efficient and should be enough most of\n-                    // the time\n-                    builder = newFloatBuilder(currentFieldName, context.indexSettings().getSettings());\n-                }\n-                return builder;\n-            }\n-        } else if (token == XContentParser.Token.VALUE_BOOLEAN) {\n-            Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.BOOLEAN);\n-            if (builder == null) {\n-                builder = new BooleanFieldMapper.Builder(currentFieldName);\n-            }\n-            return builder;\n-        } else if (token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {\n-            Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.BINARY);\n-            if (builder == null) {\n-                builder = new BinaryFieldMapper.Builder(currentFieldName);\n-            }\n-            return builder;\n-        } else {\n-            Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, XContentFieldType.STRING);\n-            if (builder != null) {\n-                return builder;\n-            }\n-        }\n-        // TODO how do we identify dynamically that its a binary value?\n-        throw new IllegalStateException(\"Can't handle serializing a dynamic type with content token [\" + token + \"] and field name [\"\n-            + currentFieldName + \"]\");\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776fb4e634711d5669b9aca01c435978e85be5d4"}, "originalPosition": 281}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a9e625c4c0e38d4901cd7e556b974ec6325b549", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/3a9e625c4c0e38d4901cd7e556b974ec6325b549", "committedDate": "2020-12-04T18:09:07Z", "message": "docs and rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8952c53859bc163158c5d319e480127938acb74e", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/8952c53859bc163158c5d319e480127938acb74e", "committedDate": "2020-12-04T20:41:07Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edc6a29d20679e287dc6863bf2b0761ae6a1bbf2", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/edc6a29d20679e287dc6863bf2b0761ae6a1bbf2", "committedDate": "2020-12-07T09:28:54Z", "message": "Merge branch 'master' into enhancement/dynamic_runtime_mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e9797297bc517784ddb9604ad8d4e33fc0d2e3", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/c2e9797297bc517784ddb9604ad8d4e33fc0d2e3", "committedDate": "2020-12-07T16:46:22Z", "message": "iter and some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114b5f412aca7db5be18dcb890323b2b3d67fb26", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/114b5f412aca7db5be18dcb890323b2b3d67fb26", "committedDate": "2020-12-07T16:51:37Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzQyODkx", "url": "https://github.com/elastic/elasticsearch/pull/65489#pullrequestreview-546342891", "createdAt": "2020-12-07T16:55:28Z", "commit": {"oid": "114b5f412aca7db5be18dcb890323b2b3d67fb26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1NToyOFrOIAwdsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1NToyOFrOIAwdsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2NDk0NA==", "bodyText": "this is pretty horrible. I am not sure how to make it better yet. We are introducing one reason to update the root without having to add a mapper to it.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r537664944", "createdAt": "2020-12-07T16:55:28Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -206,18 +204,35 @@ private static MapperParsingException wrapInMapperParsingException(SourceToParse\n     }\n \n     /** Creates a Mapping containing any dynamically added fields, or returns null if there were no dynamic mappings. */\n-    static Mapping createDynamicUpdate(Mapping mapping, DocumentMapper docMapper, List<Mapper> dynamicMappers) {\n-        if (dynamicMappers.isEmpty()) {\n+    static Mapping createDynamicUpdate(Mapping mapping,\n+                                       DocumentMapper docMapper,\n+                                       List<Mapper> dynamicMappers,\n+                                       List<RuntimeFieldType> dynamicRuntimeFields) {\n+        if (dynamicMappers.isEmpty() && dynamicRuntimeFields.isEmpty()) {\n             return null;\n         }\n+        RootObjectMapper root;\n+        if (dynamicMappers.isEmpty() == false) {\n+            root = createDynamicUpdate(mapping.root, docMapper, dynamicMappers);\n+        } else {\n+            root = (RootObjectMapper)mapping.root.mappingUpdate(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114b5f412aca7db5be18dcb890323b2b3d67fb26"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzQ1OTM2", "url": "https://github.com/elastic/elasticsearch/pull/65489#pullrequestreview-546345936", "createdAt": "2020-12-07T16:58:34Z", "commit": {"oid": "114b5f412aca7db5be18dcb890323b2b3d67fb26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1ODozNFrOIAwngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1ODozNFrOIAwngg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2NzQ1OA==", "bodyText": "this is not particularly elegant, but it does the job. Ideas on how to make it nicer?", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r537667458", "createdAt": "2020-12-07T16:58:34Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParseContext.java", "diffHunk": "@@ -407,6 +432,9 @@ public void seqID(SeqNoFieldMapper.SequenceIDFields seqID) {\n \n         @Override\n         public void addDynamicMapper(Mapper mapper) {\n+            if (mapper instanceof ObjectMapper) {\n+                dynamicObjectMappers.put(mapper.name(), (ObjectMapper)mapper);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114b5f412aca7db5be18dcb890323b2b3d67fb26"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e6f13e7a4cf1c7ed3c335174bbfdbf119c89543", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/9e6f13e7a4cf1c7ed3c335174bbfdbf119c89543", "committedDate": "2020-12-07T20:51:28Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "613b88289da91d4d804e4ba16daa4b0fccc7f58d", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/613b88289da91d4d804e4ba16daa4b0fccc7f58d", "committedDate": "2020-12-07T21:07:16Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTQzOTIw", "url": "https://github.com/elastic/elasticsearch/pull/65489#pullrequestreview-546543920", "createdAt": "2020-12-07T21:17:52Z", "commit": {"oid": "613b88289da91d4d804e4ba16daa4b0fccc7f58d"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNzo1MlrOIA7Hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNDoyNVrOIA7WoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzOTQ4Ng==", "bodyText": "Passing null to make a copy is a bit sad, yeah. Maybe we could have a copy method?", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r537839486", "createdAt": "2020-12-07T21:17:52Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -206,18 +204,35 @@ private static MapperParsingException wrapInMapperParsingException(SourceToParse\n     }\n \n     /** Creates a Mapping containing any dynamically added fields, or returns null if there were no dynamic mappings. */\n-    static Mapping createDynamicUpdate(Mapping mapping, DocumentMapper docMapper, List<Mapper> dynamicMappers) {\n-        if (dynamicMappers.isEmpty()) {\n+    static Mapping createDynamicUpdate(Mapping mapping,\n+                                       DocumentMapper docMapper,\n+                                       List<Mapper> dynamicMappers,\n+                                       List<RuntimeFieldType> dynamicRuntimeFields) {\n+        if (dynamicMappers.isEmpty() && dynamicRuntimeFields.isEmpty()) {\n             return null;\n         }\n+        RootObjectMapper root;\n+        if (dynamicMappers.isEmpty() == false) {\n+            root = createDynamicUpdate(mapping.root, docMapper, dynamicMappers);\n+        } else {\n+            root = (RootObjectMapper)mapping.root.mappingUpdate(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2NDk0NA=="}, "originalCommit": {"oid": "114b5f412aca7db5be18dcb890323b2b3d67fb26"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzOTg4Ng==", "bodyText": "Leftover?", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r537839886", "createdAt": "2020-12-07T21:18:37Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -542,25 +552,24 @@ private static void parseArray(ParseContext context, ObjectMapper parentMapper,\n             ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);\n             if (dynamic == ObjectMapper.Dynamic.STRICT) {\n                 throw new StrictDynamicMappingException(parentMapper.fullPath(), arrayFieldName);\n-            } else if (dynamic == ObjectMapper.Dynamic.TRUE) {\n-                Mapper.Builder builder = context.root().findTemplateBuilder(context, arrayFieldName, XContentFieldType.OBJECT);\n-                if (builder == null) {\n+            } else if (dynamic == ObjectMapper.Dynamic.FALSE)  {\n+                // TODO: shouldn't this skip, not parse?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613b88289da91d4d804e4ba16daa4b0fccc7f58d"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MTk0NA==", "bodyText": "Not really.... We do a fair bit of `instanceof to dig up ObjectMapper and its friends like MetaDataFieldMapper. It ain't great but its what we do a fair bit.....", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r537841944", "createdAt": "2020-12-07T21:22:05Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParseContext.java", "diffHunk": "@@ -407,6 +432,9 @@ public void seqID(SeqNoFieldMapper.SequenceIDFields seqID) {\n \n         @Override\n         public void addDynamicMapper(Mapper mapper) {\n+            if (mapper instanceof ObjectMapper) {\n+                dynamicObjectMappers.put(mapper.name(), (ObjectMapper)mapper);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2NzQ1OA=="}, "originalCommit": {"oid": "114b5f412aca7db5be18dcb890323b2b3d67fb26"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MjM3OA==", "bodyText": "Probably should add javadoc for this.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r537842378", "createdAt": "2020-12-07T21:22:49Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/plugins/MapperPlugin.java", "diffHunk": "@@ -48,6 +49,10 @@\n         return Collections.emptyMap();\n     }\n \n+    default DynamicRuntimeFieldsBuilder getDynamicRuntimeFieldsBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613b88289da91d4d804e4ba16daa4b0fccc7f58d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MzM2MA==", "bodyText": "Probably worth javadoc on these if we have more than one.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r537843360", "createdAt": "2020-12-07T21:24:25Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DateScriptFieldType.java", "diffHunk": "@@ -100,6 +99,17 @@ private DateScriptFieldType(String name, DateFieldScript.Factory scriptFactory,\n         this.dateMathParser = dateTimeFormatter.toDateMathParser();\n     }\n \n+    DateScriptFieldType(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613b88289da91d4d804e4ba16daa4b0fccc7f58d"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5fc23fb384aa5cff9165b601105fc2c3253d3d9", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/f5fc23fb384aa5cff9165b601105fc2c3253d3d9", "committedDate": "2020-12-07T21:50:08Z", "message": "missing javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b05ca32bf118c70f112291fac2e9e5e821892e8", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b05ca32bf118c70f112291fac2e9e5e821892e8", "committedDate": "2020-12-07T22:41:26Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64ad64aef52706f8b6c70d7871d5801eb33f611", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/e64ad64aef52706f8b6c70d7871d5801eb33f611", "committedDate": "2020-12-07T22:41:43Z", "message": "Merge branch 'master' into enhancement/dynamic_runtime_mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1918f84d332973f5ace6e5420e00789d127509c", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/b1918f84d332973f5ace6e5420e00789d127509c", "committedDate": "2020-12-08T07:58:04Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2OTQ2ODUw", "url": "https://github.com/elastic/elasticsearch/pull/65489#pullrequestreview-546946850", "createdAt": "2020-12-08T09:33:18Z", "commit": {"oid": "b1918f84d332973f5ace6e5420e00789d127509c"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTozMzoxOFrOIBPz9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoxNTozNlrOIBRuEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3ODU0OA==", "bodyText": "I think we should rework this to use ObjectMapper.Builder so that we can make the actual mappings immutable, but let's do that in a followup.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r538178548", "createdAt": "2020-12-08T09:33:18Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -206,18 +204,35 @@ private static MapperParsingException wrapInMapperParsingException(SourceToParse\n     }\n \n     /** Creates a Mapping containing any dynamically added fields, or returns null if there were no dynamic mappings. */\n-    static Mapping createDynamicUpdate(Mapping mapping, DocumentMapper docMapper, List<Mapper> dynamicMappers) {\n-        if (dynamicMappers.isEmpty()) {\n+    static Mapping createDynamicUpdate(Mapping mapping,\n+                                       DocumentMapper docMapper,\n+                                       List<Mapper> dynamicMappers,\n+                                       List<RuntimeFieldType> dynamicRuntimeFields) {\n+        if (dynamicMappers.isEmpty() && dynamicRuntimeFields.isEmpty()) {\n             return null;\n         }\n+        RootObjectMapper root;\n+        if (dynamicMappers.isEmpty() == false) {\n+            root = createDynamicUpdate(mapping.root, docMapper, dynamicMappers);\n+        } else {\n+            root = mapping.root.copyAndReset();\n+        }\n+        root.addRuntimeFields(dynamicRuntimeFields);\n+        return mapping.mappingUpdate(root);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1918f84d332973f5ace6e5420e00789d127509c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwMzA2MA==", "bodyText": "Are we happy that this intermediate object with no concrete leaf fields gets added?  It feels a bit weird to me, but I can see how it ends up being necessary because of all the book-keeping we do while we create dynamic mappings during parsing.", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r538203060", "createdAt": "2020-12-08T10:06:05Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -378,6 +384,36 @@ public void testPropagateDynamicWithDynamicMapper() throws Exception {\n         assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n     }\n \n+    public void testPropagateDynamicRuntimeWithDynamicMapper() throws Exception {\n+        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n+            b.field(\"dynamic\", false);\n+            b.startObject(\"properties\");\n+            {\n+                b.startObject(\"foo\");\n+                {\n+                    b.field(\"type\", \"object\");\n+                    b.field(\"dynamic\", \"runtime\");\n+                    b.startObject(\"properties\").endObject();\n+                }\n+                b.endObject();\n+            }\n+            b.endObject();\n+        }));\n+        ParsedDocument doc = mapper.parse(source(b -> {\n+            b.startObject(\"foo\");\n+            {\n+                b.field(\"baz\", \"test\");\n+                b.startObject(\"bar\").field(\"baz\", \"something\").endObject();\n+            }\n+            b.endObject();\n+        }));\n+        assertNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n+        assertEquals(\"{\\\"_doc\\\":{\\\"dynamic\\\":\\\"false\\\",\" +\n+            \"\\\"runtime\\\":{\\\"foo.bar.baz\\\":{\\\"type\\\":\\\"string\\\"},\\\"foo.baz\\\":{\\\"type\\\":\\\"string\\\"}},\" +\n+            \"\\\"properties\\\":{\\\"foo\\\":{\\\"dynamic\\\":\\\"runtime\\\",\\\"properties\\\":{\\\"bar\\\":{\\\"type\\\":\\\"object\\\"}}}}}}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1918f84d332973f5ace6e5420e00789d127509c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwOTgxMQ==", "bodyText": "Shouldn't this take the date formatter into account?", "url": "https://github.com/elastic/elasticsearch/pull/65489#discussion_r538209811", "createdAt": "2020-12-08T10:15:36Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/DynamicRuntimeFieldsBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.elasticsearch.common.time.DateFormatter;\n+import org.elasticsearch.index.mapper.RuntimeFieldType;\n+\n+public final class DynamicRuntimeFieldsBuilder implements org.elasticsearch.index.mapper.DynamicRuntimeFieldsBuilder {\n+\n+    public static final DynamicRuntimeFieldsBuilder INSTANCE = new DynamicRuntimeFieldsBuilder();\n+\n+    private DynamicRuntimeFieldsBuilder() {}\n+\n+    @Override\n+    public RuntimeFieldType newDynamicStringField(String name) {\n+        return new KeywordScriptFieldType(name);\n+    }\n+\n+    @Override\n+    public RuntimeFieldType newDynamicLongField(String name) {\n+        return new LongScriptFieldType(name);\n+    }\n+\n+    @Override\n+    public RuntimeFieldType newDynamicDoubleField(String name) {\n+        return new DoubleScriptFieldType(name);\n+    }\n+\n+    @Override\n+    public RuntimeFieldType newDynamicBooleanField(String name) {\n+        return new BooleanScriptFieldType(name);\n+    }\n+\n+    @Override\n+    public RuntimeFieldType newDynamicDateField(String name, DateFormatter dateFormatter) {\n+        return new DateScriptFieldType(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1918f84d332973f5ace6e5420e00789d127509c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1920acdcd2ae4880e88ebecf7f5696cfdc3c4565", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/1920acdcd2ae4880e88ebecf7f5696cfdc3c4565", "committedDate": "2020-12-08T10:46:24Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a557db66fd3e7b6fedddba83f0d67f010e2304a", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/7a557db66fd3e7b6fedddba83f0d67f010e2304a", "committedDate": "2020-12-08T10:55:50Z", "message": "Merge branch 'master' into enhancement/dynamic_runtime_mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d10f0d52a9bdb5a14f2627d6da85d91d50e8454b", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/d10f0d52a9bdb5a14f2627d6da85d91d50e8454b", "committedDate": "2020-12-08T10:56:50Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd0f50361a03d5f81607f2e69fb04bc64f3ef05", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/bcd0f50361a03d5f81607f2e69fb04bc64f3ef05", "committedDate": "2020-12-08T11:50:12Z", "message": "fix date format and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c600c301a76e5a18457e5e10e90e1414123cf1e", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/7c600c301a76e5a18457e5e10e90e1414123cf1e", "committedDate": "2020-12-08T11:56:13Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "540f335f4efbede2951707d46f80f00df9da212a", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/540f335f4efbede2951707d46f80f00df9da212a", "committedDate": "2020-12-08T13:06:24Z", "message": "one more test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4254, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}