{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDI3MDI5", "number": 56316, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMzoyMFrOD6EluA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTo1MDo1MVrOEBOe9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjE5MTkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMzoyMFrOGRstJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyMTozOFrOGV9NHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ==", "bodyText": "This requires Kibana to know the _ID of the logout request crafted by ES and sent to the idP. The current SamlLogoutResponse does not give this information in a way that Kibana can easily access.\nWe could either change SamlLogoutResponse to include a separate field of _ID similar to what we do with SamlPrepareAuthenticationResponse. Or we could simply skip this check?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421211429", "createdAt": "2020-05-07T03:03:20Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTU2Mw==", "bodyText": "The spec (4.4.4.2) doesn't talk about validating the InResponseTo parameter, but I've seen other libraries / impementation do that. In all honesty SAML SLO is such a wild wild west, everyone does pretty much what they feel like :/\nGiven that it's not dictated by the specification and that our API has a binary response of \"The Logout Response is fine\" vs \"the Logout Response is not fine\" which cannot be abused somehow ( ie. open redirect etc) I think it would be fine to not validate but then again the implementation of doing it is already there so why not ? ( Kibana would need to make changes either way )", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421265563", "createdAt": "2020-05-07T06:23:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwNTUxMw==", "bodyText": "It's straightforward to add a new requestId field to the SamlLogoutResponse ES produces (via the /_security/saml/logout API). Given it is a change to an existing API, we may need to communicate to the Kibana team earlier on. @legrego Could you please comment on this? The requestId value is then required to be passed back to ES from Kibana to verify the LogoutResponse from the idP.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421305513", "createdAt": "2020-05-07T07:47:17Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0ODUzNA==", "bodyText": "Given it is a change to an existing API, we may need to communicate to the Kibana team earlier on\n\nIn general, adding additional fields to our responses is not considered to be a breaking change so I believe Kibana will be fine with it even if we don't sync merging support for this.\n\nThe requestId value is then required to be passed back to ES from Kibana to verify the LogoutResponse from the idP.\n\nKibana does that already for the request ID of the authentication response and send this back to ES in the _security/saml/authenticate API so I believe it would be fine to do here too.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421348534", "createdAt": "2020-05-07T08:58:02Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2ODkxOA==", "bodyText": "Thanks @jkakavas I'll make the change accordingly.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421368918", "createdAt": "2020-05-07T09:30:52Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNTEzMw==", "bodyText": "In general, adding additional fields to our responses is not considered to be a breaking change so I believe Kibana will be fine with it even if we don't sync merging support for this.\n\nThat's correct.\n\nKibana does that already for the request ID of the authentication response and send this back to ES in the _security/saml/authenticate API so I believe it would be fine to do here too.\n\nThe main difference here is that request ID returned from _security/saml/prepare is stored in the cookie. But during logout flow we used to clear cookie when user is redirected to IdP with LogoutRequest. Having said that, we can change that, we'll just need to carefully fix all the remaining places that still treat any cookie as a sign of authenticated user.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421515133", "createdAt": "2020-05-07T13:44:45Z", "author": {"login": "azasypkin"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3NjA2Mg==", "bodyText": "Since the specification doesn't explicitly call this out AND the outcome is in any case a no-op, I would be ok with not validating this. Especially since it sounds possible that the risk of introducing a bug on Kibana's side by changing this behavior is not minimal. On the other hand, treating \"any cookie as a sign of authenticated user.\" is something worth fixing regardless of that change so if this is an extra driver for that change, let's do it !", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425676062", "createdAt": "2020-05-15T09:21:38Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {\n+                validateSignature(logoutResponse.getSignature());\n+            }\n+            checkInResponseTo(logoutResponse, allowedSamlRequestIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTQyOQ=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjU2MzM1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjoyNjowMVrOGRwE7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowNDoxOFrOGSdMpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA==", "bodyText": "The response MUST be signed (4.4.4.2)  so we should fail if it is not signed.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421266670", "createdAt": "2020-05-07T06:26:01Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTA0OQ==", "bodyText": "The spec says \"Must authenticate itself either by signing or a binding specific mechansim\". While the HTTP-POST LogoutResponse is signed, the LogoutResponse from HTTP-Redirect binding is not. So I would prefer it to be optional.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421269049", "createdAt": "2020-05-07T06:32:17Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI5NDI5NA==", "bodyText": "or a binding specific mechanism\n\nthis alludes to the artifact binding that is not used/supported here\n\n. While the HTTP-POST LogoutResponse is signed, the LogoutResponse from HTTP-Redirect binding is not.\n\nWhy are you stating that as a fact ? It can very well be signed and according to the specification it MUST be.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421294294", "createdAt": "2020-05-07T07:27:15Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwMDMyMw==", "bodyText": "Why are you stating that as a fact ?\n\nIt's not an universal fact. I was trying to avoid explicitly mentioning a popular idP's name. Sorry about the confusion. If we mandate signature verification and Kibana starts to redirect the response to ES, the verification will fail since it does not have signature.\nIn addition, including signature in HTTP-Redirect request may risk hitting the (practical) limit of URL length. I guess this is probably the reason why it is not signed by the aforementioned idP.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421300323", "createdAt": "2020-05-07T07:38:03Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NjcxOA==", "bodyText": "If we mandate signature verification and Kibana starts to redirect the response to ES, the verification will fail since it does not have signature.\n\nIt all boils down to how permissive we want to be with things that go against the specification. If a popular IDP doesn't adhere to the specification, do we happily consume what they are sending us or do we not ? And if another popular IDP comes along and doesn't adhere to the standards in a different way, do we happily accept that too? Where do we draw the line? I believe that drawing the line at what the specification says is easier to argue about than drawing the line in an arbitrary leniency we deem acceptable at some point.\n\nIn addition, including signature in HTTP-Redirect request may risk hitting the (practical) limit of URL length. I guess this is probably the reason why it is not signed by the aforementioned idP\n\nI doubt that. SAML Logout Response messages are quite small ( comparable to authentication requests that also use the HTTP Redirect binding and are signed )", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421346718", "createdAt": "2020-05-07T08:55:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2NDEzNw==", "bodyText": "I believe that drawing the line at what the specification says is easier to argue about than drawing the line in an arbitrary leniency we deem acceptable at some point.\n\nThis I agree. But the whole story is not only just with a particular idP. The leniency was already implemented by us (by dropping the LogoutResponse at Kibana side). We could choose to tighten up the behaviour and accept the fact it might break user's existing setup. I am happy to conform the standard if we are certain that is the price we would like to pay.\n\nauthentication requests that also use the HTTP Redirect binding and are signed\n\nThe auth Response from idP is signed but uses HTTP-POST (in fact we only support HTTP-POST binding for this). Our SAML AuthRequest uses redirect and it is not signed. As far as I know, Apache server has 4096 (or is it 8192) limit on URL length, it is a thing when URL gets too long.\nI have to admit that I only just started to read the spec and have many knownlege gaps. For an example, the signature part is confusing to me. It mandates a LogoutResponse to be signed, but signature for authn Response is optional. Isn't the authn Response a more sensitive/valuable information compared to LogoutResponse?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421364137", "createdAt": "2020-05-07T09:23:11Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3MTA5OA==", "bodyText": "The leniency was already implemented by us (by dropping the LogoutResponse at Kibana side).\n\nThis was not leniency. This was part of the specification not handled. If we do handle it, let's do it correctly.\n\nThe auth Response from idP is signed but uses HTTP-POST (in fact we only support HTTP-POST binding for this)\n\nTrue, but I said\n\nauthentication requests that also use the HTTP Redirect binding and are signed\n\nand SAML Authentication Requests are not SAML Authentication Responses :)\n\nOur SAML AuthRequest uses redirect and it is not signed.\n\nIt is when it is configured to be https://www.elastic.co/guide/en/elasticsearch/reference/master/saml-guide-authentication.html#_configuring_elasticsearch_for_signing\n\nAs far as I know, Apache server has 4096 (or is it 8192) limit on URL length, it is a thing when URL gets too long.\n\nAnd SAML with authentication requests ( using the HTTP Redirect binding) being signed has been out there for 15 years now, this is heavily supported and used, I don't think we need to worry about this.\n\nbut signature for authn Response is optional\n\nI don't think this is true.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421371098", "createdAt": "2020-05-07T09:34:20Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NzUxMw==", "bodyText": "First of all, thanks for indulging me with the discussions. I really appreciate it. It helps me understanding the issue better \u2764\ufe0f\n\nIt is when it is configured to be\n\nThanks for pointing this out. I completely ignored this part when setting up saml locally. But isn't it actually an example that we do allow unsigned LogoutResponse (the difference being we are the sender in this case)?\n\nSAML with authentication requests ( using the HTTP Redirect binding) being signed has been out there for 15 years now, this is heavily supported and used\n\nThis is a good point as well. Given authn request can be signed and use HTTP Redirect, I agree there will be no issue for LogoutResponse.\n\nI don't think this is true.\n\nYou are right that it is not \"optional\". The word used in the spec 6.4.2 is \"SHOULD\". It is stronger than optional, but not MUST. Our implementation for this part treats it as optional:\n\n  \n    \n      elasticsearch/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticator.java\n    \n    \n        Lines 90 to 92\n      in\n      a443e13\n    \n    \n    \n    \n\n        \n          \n           if (response.isSigned()) { \n        \n\n        \n          \n               validateSignature(response.getSignature()); \n        \n\n        \n          \n               requireSignedAssertions = false;", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421387513", "createdAt": "2020-05-07T10:01:20Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5NzQwMw==", "bodyText": "But isn't it actually an example that we do allow unsigned LogoutResponse (the difference being we are the sender in this case)?\n\nI don't remember the discussions we had while implementing this , I can assume we made a decision that interoperability is more important than specification adherence at that time. We can revisit that decision too :)\n\nYou are right that it is not \"optional\". The word used in the spec 6.4.2 is \"SHOULD\".\n\nWe only support the web browser single sign on profile, so 4.1 in that spec, see 4.1.3.5\n\nOur implementation for this part treats it as optional:\n\nIt -hopefully- doesn't!!! A SAML response contains SAML assertions. What we do support is either the response or the assertion is signed :) There must be an integrity protection implemented, otherwise it would be trivial for attackers to bypass authentication", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421397403", "createdAt": "2020-05-07T10:18:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxMjA0Mw==", "bodyText": "We only support the web browser single sign on profile, so 4.1 in that spec, see 4.1.3.5\n\nYou are right. I read the wrong section \ud83e\udd26\n\nWhat we do support is either the response or the assertion is signed\n\nYes that's what I figured as well. There is no risk in this part.\nI think the only thing that bothers me is this \"popular idP\". The original issue #43264 is created with it as an example of why we consider to support HTTP-POST LogoutResponse. So it feels rather unsatifying if we fix one binding and breaks the other (the current working one).\nThe code change itself either way is trivial. The decision making part is more important. I feel we could talk about this over sync time.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421412043", "createdAt": "2020-05-07T10:46:52Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MTY4Ng==", "bodyText": "I think the only thing that bothers me is this \"popular idP\".\n\nI don't think we need to make changes that satisfy any \"popular IDP\", we should make changes that make sense for the users and are correct. What's more, I see no indication whatsoever that any IDP doesn't support signed Logout Responses so I'm not sure what we would be actually breaking with this.\nI think we should not be lenient here for no reason, but happy to discuss this more on the sync.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421451686", "createdAt": "2020-05-07T12:04:56Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNTkyNw==", "bodyText": "Sync update: we decided to conform to the spec and perform full validation. Caller of the API can decide what to do with validation errors if any. Thanks for the discussion.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r422005927", "createdAt": "2020-05-08T08:04:18Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(byte[] payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root = parseSamlMessage(payload);\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (logoutResponse.isSigned()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjY3MA=="}, "originalCommit": {"oid": "5b312653731a8e4d341bdd61dc570c7ece9aaaa4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQ3MDA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlLogoutResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTozNjo1OVrOGSV-5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTozNjo1OVrOGSV-5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NzcxOA==", "bodyText": "I don't think we need handle BWC here since this response never goes across nodes. The only consumer is Kibana (or other external system that integrates with ES).", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r421887718", "createdAt": "2020-05-08T01:36:59Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlLogoutResponse.java", "diffHunk": "@@ -16,24 +16,32 @@\n  */\n public final class SamlLogoutResponse extends ActionResponse {\n \n-    private String redirectUrl;\n+    private final String requestId;\n+    private final String redirectUrl;\n \n     public SamlLogoutResponse(StreamInput in) throws IOException {\n         super(in);\n+        requestId = in.readString();\n         redirectUrl = in.readString();\n     }\n \n-    public SamlLogoutResponse(String redirectUrl) {\n+    public SamlLogoutResponse(String requestId, String redirectUrl) {\n+        this.requestId = requestId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba8fd68acae93fb6132ca05b21bcf8171a3afa6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDc5NzI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyNzowOVrOGV9ZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzozMToxNVrOGWkV7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTIxNg==", "bodyText": "I think that complete_logout is a better name than verify_logout but I won't insist :)", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425679216", "createdAt": "2020-05-15T09:27:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutAction.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+/**\n+ * ActionType for verifying SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutAction extends ActionType<SamlVerifyLogoutResponse> {\n+\n+    public static final String NAME = \"cluster:admin/xpack/security/saml/verify_logout\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNzI5Mw==", "bodyText": "I was not particular happy about the name verify_logout either. Changed it to complete_logout and also for names of all relevant classes.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426317293", "createdAt": "2020-05-17T23:31:15Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutAction.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+/**\n+ * ActionType for verifying SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutAction extends ActionType<SamlVerifyLogoutResponse> {\n+\n+    public static final String NAME = \"cluster:admin/xpack/security/saml/verify_logout\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTIxNg=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDgwMDg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyODowOFrOGV9boQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMTozODozN1rOGWlTSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTc3Nw==", "bodyText": "I would prefer if we have different fields for this depending on the binding", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425679777", "createdAt": "2020-05-15T09:28:08Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyMTM1NQ==", "bodyText": "I was intentionally trying to make it the same to handle both bindings. The current approach is to have a single POST endpoint that Kibana can call for both HTTP-Redirect and HTTP-Post bindings from the idP, i.e. Kibana acts as a multiplexer here. So what ES receives is an uniform POST message. The handler (SamlLogoutResponseHandler) is able to tell whether the paylod (content) itself is signed and proceeds as HTTP-Redirect. If it is not, it proceeds as HTTP-POST and requires the XML to be signed, which is more or less similar to what SamlAuthenticator does.\nI can be convinced to have two separate endpoints, one for HTTP-Redirect and one for HTTP-POST. If we do that, we can even have two separate Request classes as well. But if we choose to have a single endpoint, I'd prefer to also not differentiate it at the Request object level.\nWhether we should have one or two end-points also depends on what Kibana can do (@azasypkin). My thinking is that Kibana will have to prepare the requset to ES anyhow, i.e. it has to add the realm and requestId information. So Kibana might as well just act as the multiplexer and prepare an uniform message.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426321355", "createdAt": "2020-05-18T00:11:36Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTc3Nw=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzMzAwMg==", "bodyText": "After reading your comment below. I am convinced to have separate fields at request level, queryString and content for HTTP-Redirect and HTTP-POST, respectively. The names are chosen to be consistent with RestSamlInvalidateSessionAction and RestSamlAuthenticateAction.\nThe SamlCompleteLogoutRequest will validate that the two fields cannot both be null nor both be set. It also has convenient methods, getPayload and isHttpRedirect, so the information is clear at handler level. Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426333002", "createdAt": "2020-05-18T01:38:37Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTc3Nw=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDgxMTAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTozMTowOFrOGV9iQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzo0Mzo1OVrOGWkatw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MTQ3Mg==", "bodyText": "I don't think we need the assertionConsumerServiceURL in this case. IIUC ( @azasypkin can keep me honest ) , kibana's current versions can be made to always send the realm name in the request which is enough for us to get the realm by name", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425681472", "createdAt": "2020-05-15T09:31:08Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+    @Nullable\n+    private String assertionConsumerServiceURL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxMDQyOQ==", "bodyText": "Correct, starting from 7.7 we store realm returned from the _security/saml/authenticate in the cookie/session and we'll keep it when store Logout Request ID there as well.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425710429", "createdAt": "2020-05-15T10:26:35Z", "author": {"login": "azasypkin"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+    @Nullable\n+    private String assertionConsumerServiceURL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MTQ3Mg=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxODUxOQ==", "bodyText": "Thanks. Good to know that. Removed.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426318519", "createdAt": "2020-05-17T23:43:59Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlVerifyLogoutRequest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Represents a request to verify SAML LogoutResponse\n+ */\n+public final class SamlVerifyLogoutRequest extends ActionRequest {\n+\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+    @Nullable\n+    private String assertionConsumerServiceURL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MTQ3Mg=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDg0MjkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo0MDozNVrOGV92Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMzozOToyMlrOGWkY3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NjU5MQ==", "bodyText": "Leave this in a method as it was and just name it differently ? WDYT ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425686591", "createdAt": "2020-05-15T09:40:35Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticator.java", "diffHunk": "@@ -333,7 +277,13 @@ private void checkSubject(Subject assertionSubject, XMLObject parent, Collection\n         }\n         checkRecipient(confirmationData.get(0));\n         checkLifetimeRestrictions(confirmationData.get(0));\n-        checkInResponseTo(confirmationData.get(0), allowedSamlRequestIds);\n+        SubjectConfirmationData subjectConfirmationData = confirmationData.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxODA0Nw==", "bodyText": "Sure, named it checkSubjectInResponseTo. Let me know if you have a better name.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426318047", "createdAt": "2020-05-17T23:39:22Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticator.java", "diffHunk": "@@ -333,7 +277,13 @@ private void checkSubject(Subject assertionSubject, XMLObject parent, Collection\n         }\n         checkRecipient(confirmationData.get(0));\n         checkLifetimeRestrictions(confirmationData.get(0));\n-        checkInResponseTo(confirmationData.get(0), allowedSamlRequestIds);\n+        SubjectConfirmationData subjectConfirmationData = confirmationData.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NjU5MQ=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDg4NDYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1Mzo0MlrOGV-QnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNDo0N1rOGWkvqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MzM0MQ==", "bodyText": "I think I don't see the value in splitting up SamlObjectHandler and SamlResponseHandler. Can you elaborate ? It also doesn't help that all the objects that are responses for SAML , are passed in a request to elasticsearch and that makes naming hard but I'm equally happy with SamlResponseHandler and SamlRequestHandler", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425693341", "createdAt": "2020-05-15T09:53:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.StatusDetail;\n+import org.opensaml.saml.saml2.core.StatusMessage;\n+import org.opensaml.saml.saml2.core.StatusResponseType;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlResponseHandler extends SamlObjectHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyMzg4Mw==", "bodyText": "This is mainly because we do have a real Request object from idP, i.e.SamlInvalidateSessionRequest. Its associated handler is SamlLogoutRequestHandler, which is a subclass of SamlObjectHandler. In another word, SamlObjectHandler is the base class for both Request and Response handlers. So I did not merge SamlResponseHandler into SamlObjectHandler.\nAlso I did a few refactoring which is likely made the changes hard to track, here is a summary:\n\nSamlObjectHandler was renamed from SamlRequestHandler (It seems to be a good idea to me since its the base for both Request and Response handlers. But I can revert it if it does not sound right to you).\nSamlResponseHandler is extracted from SamlAuthenticator since many code can be reused by the new SamlLogoutResponseHandler\n\nThe class hierarchy is as follows:\nSamlObjectHandler\n\u251c\u2500\u2500 SamlLogoutRequestHandler\n\u2514\u2500\u2500 SamlResponseHandler\n    \u251c\u2500\u2500 SamlAuthenticator\n    \u2514\u2500\u2500 SamlLogoutResponseHandler", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426323883", "createdAt": "2020-05-18T00:34:47Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.StatusDetail;\n+import org.opensaml.saml.saml2.core.StatusMessage;\n+import org.opensaml.saml.saml2.core.StatusResponseType;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlResponseHandler extends SamlObjectHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MzM0MQ=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDkwMTI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandlerTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTo1ODoyN1rOGV-avg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDozNjo1MFrOGWkwjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NTkzNA==", "bodyText": "I assume these are carried over as is from SamlAuthenticatorTests so I'm fine with these, let me know if you've made any significant changes somehow", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425695934", "createdAt": "2020-05-15T09:58:27Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandlerTests.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.encryption.XMLCipher;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.xpack.core.watcher.watch.ClockMock;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.opensaml.security.credential.Credential;\n+import org.opensaml.security.x509.X509Credential;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.security.KeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import javax.crypto.Cipher;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.Transform;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureFactory;\n+import javax.xml.crypto.dsig.dom.DOMSignContext;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfo;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;\n+import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;\n+import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static java.util.Collections.singletonList;\n+import static javax.xml.crypto.dsig.CanonicalizationMethod.EXCLUSIVE;\n+import static javax.xml.crypto.dsig.Transform.ENVELOPED;\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML20_NS;\n+\n+public class SamlResponseHandlerTests extends SamlTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDExMQ==", "bodyText": "You are right. They are split with the IDE refactoring tool. So nothing should be really different.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426324111", "createdAt": "2020-05-18T00:36:50Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlResponseHandlerTests.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.encryption.XMLCipher;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.xpack.core.watcher.watch.ClockMock;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.opensaml.security.credential.Credential;\n+import org.opensaml.security.x509.X509Credential;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.security.KeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import javax.crypto.Cipher;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.Transform;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureFactory;\n+import javax.xml.crypto.dsig.dom.DOMSignContext;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfo;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;\n+import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;\n+import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static java.util.Collections.singletonList;\n+import static javax.xml.crypto.dsig.CanonicalizationMethod.EXCLUSIVE;\n+import static javax.xml.crypto.dsig.Transform.ENVELOPED;\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML20_NS;\n+\n+public class SamlResponseHandlerTests extends SamlTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NTkzNA=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDkzMTA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDowNzo1OVrOGV-t3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMTozNTo1N1rOGWlRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMDgzMQ==", "bodyText": "related to the discussion above, this is a case where we don't want to fail to parse the SAML message because we will try to parse it as if it came from the HTTP POST binding. We want to fail this because it is an unsigned request that came via the HTTP-Redirect binding and we disallow that.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425700831", "createdAt": "2020-05-15T10:07:59Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillUseHttpPostBindingWhenUrlNotSigned() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), null);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"Failed to parse SAML message\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzMjU3Mg==", "bodyText": "I think I see your point here. I'll move away from auto-detect and have two separate fields at request level.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426332572", "createdAt": "2020-05-18T01:35:57Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillUseHttpPostBindingWhenUrlNotSigned() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), null);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"Failed to parse SAML message\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMDgzMQ=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDkzMjg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDowODozOVrOGV-vGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMTozNjowN1rOGWlRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMTE0Nw==", "bodyText": "I would very much prefer that we are explicit here and not try to deduce and imply checks. I think we need two parameters for the REST layer, one for the body of a response that comes via the HTTP-POST binding and a different one for the query string of a response that comes via the HTTP-Redirect binding. Then we can be very explicit here with regards to what we expect to have and what we need to process/check/validate", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425701147", "createdAt": "2020-05-15T10:08:39Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(String content, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(content, \"SAMLResponse\");\n+        final Element root;\n+        if (parsed.hasSignature) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzMjU4Nw==", "bodyText": "See above.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426332587", "createdAt": "2020-05-18T01:36:07Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(String content, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(content, \"SAMLResponse\");\n+        final Element root;\n+        if (parsed.hasSignature) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMTE0Nw=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDkzODM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlObjectHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoxMDoxOFrOGV-ykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo1ODoxOFrOGWk6_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMjAzNA==", "bodyText": "Again, assuming that you didn't change much when you copied this over ( apart from introducing samlMessageParameterName ) , please do flag if otherwise ! (  diffs are not that helpful in spotting this kind of things :) )", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r425702034", "createdAt": "2020-05-15T10:10:18Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlObjectHandler.java", "diffHunk": "@@ -322,4 +331,74 @@ protected void validateNotOnOrAfter(DateTime notOnOrAfter) {\n             throw samlException(\"Rejecting SAML assertion because [{}] is on/after [{}]\", pastNow, notOnOrAfter);\n         }\n     }\n+\n+    protected ParsedQueryString parseQueryStringAndValidateSignature(String queryString, String samlMessageParameterName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNjc4MQ==", "bodyText": "Good spot! Indeed this is the only significant change as part of the refactoring. Next time I'll compile the list of changes before hand to save you some time. Sorry about that. Here is a list for rest of the changes (they are all very minor):\n\nmethod visibility from private to protect due to superclass extraction.\n\nThis includes: SamlResponseHandler#isSuccess, SamlResponseHandler#getStatusCodeMessage, SamlObjectHandler#decodeBase64, SamlObjectHandler#inflate, and SamlObjectHandler#parseQueryStringAndValidateSignature.\n\n\nReverse the order of String equals compare in SamlResponseHandler#isSuccess.\n\nChanged from status.getStatusCode().getValue().equals(StatusCode.SUCCESS) to StatusCode.SUCCESS.equals(status.getStatusCode().getValue()).", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r426326781", "createdAt": "2020-05-18T00:58:18Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlObjectHandler.java", "diffHunk": "@@ -322,4 +331,74 @@ protected void validateNotOnOrAfter(DateTime notOnOrAfter) {\n             throw samlException(\"Rejecting SAML assertion because [{}] is on/after [{}]\", pastNow, notOnOrAfter);\n         }\n     }\n+\n+    protected ParsedQueryString parseQueryStringAndValidateSignature(String queryString, String samlMessageParameterName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMjAzNA=="}, "originalCommit": {"oid": "3bd04b32eacb1bf0ae41ad85150a2bb543a34d51"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTM4ODk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTozMDo0MlrOGaPHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0OToyN1rOGb7mgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2Mzg4OQ==", "bodyText": "It's not the URL that is signed, but rather the - encoded - SAML response.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430163889", "createdAt": "2020-05-26T05:30:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4OTI2OQ==", "bodyText": "You are right that it is not the entire URL that gets signed. But it is not just the encoded SAMLResponse either. It is rather a string taking the form of SAMLResponse=xxx&RelayState=xxx&SigAlg=xx. How about changing it to \"Query string is not signed, but is required for HTTP-Redirect binding\"?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430889269", "createdAt": "2020-05-27T06:40:46Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2Mzg4OQ=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0MTI1MA==", "bodyText": "The most important part here is for the user/administrator to realize what is wrong and why this failed. I think that \"The SAML logout response is not signed\" does that in a better way than \"the URL is not signed\" or \"The query string is not signed\" but I won't insist too much :)", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431941250", "createdAt": "2020-05-28T15:49:27Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2Mzg4OQ=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTM4OTU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTozMTowM1rOGaPIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTozMTowM1rOGaPIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2Mzk4MA==", "bodyText": "We can log these at DEBUG I think", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430163980", "createdAt": "2020-05-26T05:31:03Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTM5NDgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTozNDoxNFrOGaPLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjoxOTowMFrOGa65Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NDgzMw==", "bodyText": "It reads strange that we \"parse the query string\" when payload might very well be the body of HTTP POST", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430164833", "createdAt": "2020-05-26T05:34:14Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NjkwNQ==", "bodyText": "Reading through the tests below, it looks like there is an implicit assumption that even when HTTP POST is used, we will receive SAMLResponse=<Base64Endoded saml logout response here> from Kibana and thus we could \"parse\" this as if it was a query string. I think we should be explicit and\na) Declare that we expect kibana(or any caller) to pass the value of the SAMLResponse POST parameter\nb) Base64 decode this on the RestSamlLogoutAction\nc) Operate on the raw bytes after that\nsimilar to what we do for the SamlAuthenticateAction's parameter named content", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430176905", "createdAt": "2020-05-26T06:14:13Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NDgzMw=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MTA0Mw==", "bodyText": "The payload/data returned from a SAML idP with HTTP-Post binding uses application/x-www-form-urlencoded encoding, which takes the form of SAMLResponse=<base64>&RelayState=xxxx.  So it can indeed be processed as if it is a query string.\nBut I think it is good point that we should keep this consistent with how SAMLReseponse is handled by SamlAuthenticationAction, for which I think Kibana performs the action of extracting the value of SAMLResponse parameter and passes it to ES so that we do not have to parse it (as query parameter) again. I will make the change and add a note in the code to clarify the expectation for Kibana.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430881043", "createdAt": "2020-05-27T06:19:00Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NDgzMw=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQwMDk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTozNzo1OFrOGaPPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTozNzo1OFrOGaPPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NTgzMg==", "bodyText": "this should be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n          \n          \n            \n                        root = parseSamlMessage(decodeBase64(payload));", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430165832", "createdAt": "2020-05-26T05:37:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQxMjAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTo0NDozMlrOGaPWHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTo0NDozMlrOGaPWHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2NzU4Mw==", "bodyText": "Given that I had 4 comments in 10 lines ( Woke up picky today, apologies \ud83d\ude4f )  think we could do this is a simpler way, something like\nfinal Element root;\nif (httpRedirect) {\n    logger.debug(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n    final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n    if (parsed.hasSignature == false){\n        throw samlException(\"SAML LogoutResponse messages must be signed\");    \n    }\n    root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n} else {\n    logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n    root = parseSamlMessage(decodeBase64(payload));\n}", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430167583", "createdAt": "2020-05-26T05:44:32Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQxNTgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTo0Njo0M1rOGaPYaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1MDo1MlrOGcPmKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2ODE3MQ==", "bodyText": "buildXmlObject doesn't return null so I think we can remove this \"check and throw\"", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430168171", "createdAt": "2020-05-26T05:46:43Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMTc4Mg==", "bodyText": "Indeed buildXmlObject does not return null. I'll remove it. Just for discussion: Since Java does not have proper null safty, aggressively checking for null return value could be argued as defensive coding or invariant enforcing. I think this could be a reason that we have many assert xxx statement throughout the code base. The difference is that they do not run in production but helps to catch potential code change gaps in testing. What would be your take on this?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431521782", "createdAt": "2020-05-28T00:46:36Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2ODE3MQ=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwNzkwNg==", "bodyText": "We do have asserts throughout the code base and we do have places where we add extra null checks \"just to be safe\", but we have been inconsistent in doing so I think. I love defensive coding as the next person but I don't know where the line should be drawn so that we don't have a if (x == null) check every 5 lines. Thinking out loud, we should be able to trust the methods we write to not return null unless they explicitly document that and handle null checks in the method instead of everywhere we call that method\nTim had shared some thoughts on asserts here: #52936 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431607906", "createdAt": "2020-05-28T06:27:28Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2ODE3MQ=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2ODg0MA==", "bodyText": "Thanks. The difference is subtle but insightful.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r432268840", "createdAt": "2020-05-29T05:50:52Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2ODE3MQ=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQyNjQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTo1MjoyNlrOGaPe_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNTo1MjoyNlrOGaPe_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE2OTg1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (httpRedirect == false && logoutResponse.getSignature() == null) {\n          \n          \n            \n                        // For HTTP-Redirect, we validate the signature while parsing the object from the query string\n          \n          \n            \n                        if (httpRedirect == false && logoutResponse.getSignature() == null) {", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430169852", "createdAt": "2020-05-26T05:52:26Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+        if (httpRedirect && parsed.hasSignature == false) {\n+            throw samlException(\"URL is not signed, but is required for HTTP-Redirect binding\");\n+        } else if (httpRedirect == false && parsed.hasSignature) {\n+            throw samlException(\"URL is signed, but binding is HTTP-POST\");\n+        }\n+\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.info(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(parsed.samlMessage));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            if (logoutResponse == null) {\n+                throw samlException(\"Cannot convert element {} into LogoutResponse object\", root);\n+            }\n+            if (httpRedirect == false && logoutResponse.getSignature() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ0MzAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticatorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjowMDoyNFrOGaPo_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDo0NzozMlrOGbiBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3MjQxNQ==", "bodyText": "Apologies for the merge conflicts that the SamlAuthenticatorTests refactoring causes here", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430172415", "createdAt": "2020-05-26T06:00:24Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticatorTests.java", "diffHunk": "@@ -108,97 +85,20 @@\n import static org.opensaml.saml.saml2.core.SubjectConfirmation.METHOD_ATTRIB_NAME;\n import static org.opensaml.saml.saml2.core.SubjectConfirmation.METHOD_BEARER;\n \n-public class SamlAuthenticatorTests extends SamlTestCase {\n+public class SamlAuthenticatorTests extends SamlResponseHandlerTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMjA1NQ==", "bodyText": "No worries. Wasn't too bad.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431522055", "createdAt": "2020-05-28T00:47:32Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticatorTests.java", "diffHunk": "@@ -108,97 +85,20 @@\n import static org.opensaml.saml.saml2.core.SubjectConfirmation.METHOD_ATTRIB_NAME;\n import static org.opensaml.saml.saml2.core.SubjectConfirmation.METHOD_BEARER;\n \n-public class SamlAuthenticatorTests extends SamlTestCase {\n+public class SamlAuthenticatorTests extends SamlResponseHandlerTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3MjQxNQ=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ3OTgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxNzoyMlrOGaP-0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxNzoyMlrOGaP-0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODAwMA==", "bodyText": "use Strings.hasText() instead of null check ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430178000", "createdAt": "2020-05-26T06:17:22Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    private String queryString;\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (queryString == null && content == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ5OTM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNTozM1rOGaQKtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNTozM1rOGaQKtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTA0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testHandlerWillFailWhenUrlNotSigned() {\n          \n          \n            \n                public void testHandlerWillFailWhenLogoutResponseNotSigned() {", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430181044", "createdAt": "2020-05-26T06:25:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlNotSigned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTUwMTI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNjoxOFrOGaQLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDo0Njo1OVrOGbiAXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTMyMQ==", "bodyText": "I don't think we need this", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r430181321", "createdAt": "2020-05-26T06:26:18Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlNotSigned() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), null);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"URL is not signed, but is required for HTTP-Redirect binding\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlIsSignedButBindingIsHttpPost() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMTg4NA==", "bodyText": "Removed", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431521884", "createdAt": "2020-05-28T00:46:59Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandlerHttpRedirectTests.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.joda.time.DateTime;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Clock;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class SamlLogoutResponseHandlerHttpRedirectTests extends SamlTestCase {\n+\n+    private static final String IDP_ENTITY_ID = \"https://idp.test/\";\n+    private static final String LOGOUT_URL = \"https://sp.test/saml/logout\";\n+\n+    private Clock clock;\n+    private SamlLogoutResponseHandler samlLogoutResponseHandler;\n+\n+    private static X509Credential credential;\n+\n+    @BeforeClass\n+    public static void setupCredential() throws Exception {\n+        credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+    }\n+\n+    @AfterClass\n+    public static void clearCredential() {\n+        credential = null;\n+    }\n+\n+    @Before\n+    public void setupHandler() throws Exception {\n+        clock = Clock.systemUTC();\n+        final IdpConfiguration idp = new IdpConfiguration(IDP_ENTITY_ID, () -> Collections.singletonList(credential));\n+        final X509Credential spCredential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0);\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Collections.singleton(\"*\"), spCredential);\n+        final SpConfiguration sp = new SpConfiguration(\n+            \"https://sp.test/\",\n+            \"https://sp.test/saml/asc\",\n+            LOGOUT_URL,\n+            signingConfiguration,\n+            List.of(spCredential),\n+            Collections.emptyList());\n+        samlLogoutResponseHandler = new SamlLogoutResponseHandler(clock, idp, sp, TimeValue.timeValueSeconds(1));\n+    }\n+\n+    public void testHandlerWorks() throws URISyntaxException {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(StatusCode.SUCCESS));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId));\n+    }\n+\n+    public void testHandlerFailsIfStatusIsNotSuccess() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), credential);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"is not a 'success' response\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlNotSigned() {\n+        final String requestId = SamlUtils.generateSecureNCName(randomIntBetween(8, 30));\n+        final SigningConfiguration signingConfiguration = new SigningConfiguration(Sets.newHashSet(\"*\"), null);\n+        final LogoutResponse logoutResponse = SamlUtils.buildObject(LogoutResponse.class, LogoutResponse.DEFAULT_ELEMENT_NAME);\n+        logoutResponse.setDestination(LOGOUT_URL);\n+        logoutResponse.setIssueInstant(new DateTime(clock.millis()));\n+        logoutResponse.setID(SamlUtils.generateSecureNCName(randomIntBetween(8, 30)));\n+        logoutResponse.setInResponseTo(requestId);\n+        logoutResponse.setStatus(buildStatus(randomFrom(StatusCode.REQUESTER, StatusCode.RESPONDER)));\n+\n+        final Issuer issuer = SamlUtils.buildObject(Issuer.class, Issuer.DEFAULT_ELEMENT_NAME);\n+        issuer.setValue(IDP_ENTITY_ID);\n+        logoutResponse.setIssuer(issuer);\n+        final String url = new SamlRedirect(logoutResponse, signingConfiguration).getRedirectUrl();\n+        final ElasticsearchSecurityException e =\n+            expectSamlException(() -> samlLogoutResponseHandler.handle(true, new URI(url).getRawQuery(), List.of(requestId)));\n+        assertThat(e.getMessage(), containsString(\"URL is not signed, but is required for HTTP-Redirect binding\"));\n+    }\n+\n+    public void testHandlerWillFailWhenUrlIsSignedButBindingIsHttpPost() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTMyMQ=="}, "originalCommit": {"oid": "e6e45da939af6b4a9b36814ff1b007972c75bc41"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDIwMTIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyMDoyNVrOGb6U9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozMTo1OVrOGcPSrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDM3Mw==", "bodyText": "could we also validate that the realm is not an empty string here so that we fail explicitly here instead of in the Transport action's doExecute ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431920373", "createdAt": "2020-05-28T15:20:25Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    @Nullable\n+    private String queryString;\n+    @Nullable\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2Mzg1NQ==", "bodyText": "Added. Also removed the @Nullable annotation from the realm field.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r432263855", "createdAt": "2020-05-29T05:31:59Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    @Nullable\n+    private String queryString;\n+    @Nullable\n+    private String content;\n+    private List<String> validRequestIds;\n+    @Nullable\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDM3Mw=="}, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI0OTM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMToyMlrOGb60pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMToyMlrOGb60pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyODQ4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n          \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm with name [{}]\", request.getRealm()));", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431928485", "createdAt": "2020-05-28T15:31:22Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlLogoutResponseHandler;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for completing SAML LogoutResponse\n+ */\n+public final class TransportSamlCompleteLogoutAction extends HandledTransportAction<SamlCompleteLogoutRequest, SamlCompleteLogoutResponse> {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlCompleteLogoutAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlCompleteLogoutAction.NAME, transportService, actionFilters, SamlCompleteLogoutRequest::new);\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlCompleteLogoutRequest request, ActionListener<SamlCompleteLogoutResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealm(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI1OTQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMzozN1rOGb67Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMzozN1rOGb67Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMDE2Ng==", "bodyText": "Just a suggestion given that we search with a realm name only here. Traditionally we would search either with an ACS or a realm name that's why we had a more generic message here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));\n          \n          \n            \n                        listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] with name [{}]\", realms, request.getRealm()));", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431930166", "createdAt": "2020-05-28T15:33:37Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlLogoutResponseHandler;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for completing SAML LogoutResponse\n+ */\n+public final class TransportSamlCompleteLogoutAction extends HandledTransportAction<SamlCompleteLogoutRequest, SamlCompleteLogoutResponse> {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlCompleteLogoutAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlCompleteLogoutAction.NAME, transportService, actionFilters, SamlCompleteLogoutRequest::new);\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlCompleteLogoutRequest request, ActionListener<SamlCompleteLogoutResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealm(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI4MjkyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozODo1OVrOGb7KOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozODo1OVrOGb7KOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNDAwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (httpRedirect == false && logoutResponse.getSignature() == null) {\n          \n          \n            \n                            throw samlException(\"LogoutResponse is not signed, but a signature is required for HTTP-Post binding\");\n          \n          \n            \n                        } else if (httpRedirect == false) {\n          \n          \n            \n                            validateSignature(logoutResponse.getSignature());\n          \n          \n            \n                        }\n          \n          \n            \n                        if (httpRedirect == false) {\n          \n          \n            \n                            if (logoutResponse.getSignature() == null) {\n          \n          \n            \n                                throw samlException(\"LogoutResponse is not signed, but a signature is required for HTTP-Post binding\");\n          \n          \n            \n                            }    \n          \n          \n            \n                            validateSignature(logoutResponse.getSignature());\n          \n          \n            \n                        }", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r431934009", "createdAt": "2020-05-28T15:38:59Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutResponseHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.w3c.dom.Element;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlUtils.samlException;\n+\n+public class SamlLogoutResponseHandler extends SamlResponseHandler {\n+\n+    private static final String LOGOUT_RESPONSE_TAG_NAME = \"LogoutResponse\";\n+\n+    public SamlLogoutResponseHandler(\n+        Clock clock, IdpConfiguration idp, SpConfiguration sp, TimeValue maxSkew) {\n+        super(clock, idp, sp, maxSkew);\n+    }\n+\n+    public void handle(boolean httpRedirect, String payload, Collection<String> allowedSamlRequestIds) {\n+        final Element root;\n+        if (httpRedirect) {\n+            logger.debug(\"Process SAML LogoutResponse with HTTP-Redirect binding\");\n+            final ParsedQueryString parsed = parseQueryStringAndValidateSignature(payload, \"SAMLResponse\");\n+            if (parsed.hasSignature == false){\n+                throw samlException(\"Query string is not signed, but is required for HTTP-Redirect binding\");\n+            }\n+            root = parseSamlMessage(inflate(decodeBase64(parsed.samlMessage)));\n+        } else {\n+            logger.debug(\"Process SAML LogoutResponse with HTTP-POST binding\");\n+            root = parseSamlMessage(decodeBase64(payload));\n+        }\n+\n+        if (LOGOUT_RESPONSE_TAG_NAME.equals(root.getLocalName()) && SAML_NAMESPACE.equals(root.getNamespaceURI())) {\n+            final LogoutResponse logoutResponse = buildXmlObject(root, LogoutResponse.class);\n+            // For HTTP-Redirect, we validate the signature while parsing the object from the query string\n+            if (httpRedirect == false && logoutResponse.getSignature() == null) {\n+                throw samlException(\"LogoutResponse is not signed, but a signature is required for HTTP-Post binding\");\n+            } else if (httpRedirect == false) {\n+                validateSignature(logoutResponse.getSignature());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04abf77695250be9a29b4e1e5c57b17a77802ddc"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzE5OTc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTozNzozN1rOGc8zuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjozOToxOVrOGdJA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwOTU5NQ==", "bodyText": "What is our expectation for how a WebApp should behave if it gets a LogoutResponse over a HTTP-POST binding that also has URL parameters?\nI think the rule for Kibana is:\n\nIf the http method is GET send the queryString to Elasticsearch, and ignore (or reject) any body (which is very unlikely to exist)\nif the http method is POST ignore (or reject) the query parameters, and send the body to Elasticsearch.\n\nIs that our intent?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r433009595", "createdAt": "2020-06-01T01:37:37Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    @Nullable\n+    private String queryString;\n+    @Nullable\n+    private String content;\n+    private List<String> validRequestIds;\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (Strings.hasText(realm) == false) {\n+            validationException = addValidationError(\"realm may not be empty\", validationException);\n+        }\n+        if (Strings.hasText(queryString) == false && Strings.hasText(content) == false) {\n+            validationException = addValidationError(\"queryString and content may not both be empty\", validationException);\n+        }\n+        if (Strings.hasText(queryString) && Strings.hasText(content)) {\n+            validationException = addValidationError(\"queryString and content may not both present\", validationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwOTU3OQ==", "bodyText": "A good question. To be honest, I haven't really considered this thoroughly. I think your suggestion makes sense because the code proceeds as HTTP-POST, e.g. base64 encode, no deflate and XML signature, when content is present. This basically says content implies POST, which in turn means queryString implies GET.\nI would personally prefer to ignore the body for GET and query string for POST since the spec does not explicitly forbid them.", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r433209579", "createdAt": "2020-06-01T12:39:19Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlCompleteLogoutRequest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Represents a request to complete SAML LogoutResponse\n+ */\n+public final class SamlCompleteLogoutRequest extends ActionRequest {\n+\n+    @Nullable\n+    private String queryString;\n+    @Nullable\n+    private String content;\n+    private List<String> validRequestIds;\n+    private String realm;\n+\n+    public SamlCompleteLogoutRequest(StreamInput in) throws IOException {\n+        super(in);\n+    }\n+\n+    public SamlCompleteLogoutRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (Strings.hasText(realm) == false) {\n+            validationException = addValidationError(\"realm may not be empty\", validationException);\n+        }\n+        if (Strings.hasText(queryString) == false && Strings.hasText(content) == false) {\n+            validationException = addValidationError(\"queryString and content may not both be empty\", validationException);\n+        }\n+        if (Strings.hasText(queryString) && Strings.hasText(content)) {\n+            validationException = addValidationError(\"queryString and content may not both present\", validationException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwOTU5NQ=="}, "originalCommit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzIxMzMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlCompleteLogoutAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTo1MDo1MVrOGc874w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMDo1NlrOGdJniQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMTY4Mw==", "bodyText": "Why do we have another class here, rather than just using SamlCompleteLogoutRequest ?", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r433011683", "createdAt": "2020-06-01T01:50:51Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlCompleteLogoutAction.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutRequestBuilder;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+/**\n+ * This Rest endpoint handles SAML LogoutResponse sent from idP with either HTTP-Redirect or HTTP-Post binding.\n+ * For HTTP-Redirect binding, it expects {@link Input#queryString} be set to the query string of the redirect URI.\n+ * For HTTP-Post binding, it expects {@link Input#content} be set to the value of SAMLResponse form parameter, i.e.\n+ * caller of this API must do the work to extract the SAMLResponse value from body of the HTTP-Post request. The\n+ * value must also be URL decoded if necessary.\n+ */\n+public class RestSamlCompleteLogoutAction extends SamlBaseRestHandler{\n+\n+    private static final Logger logger = LogManager.getLogger(RestSamlCompleteLogoutAction.class);\n+\n+    static class Input {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTQ2NQ==", "bodyText": "Because of copy/paste ... removed it. thanks", "url": "https://github.com/elastic/elasticsearch/pull/56316#discussion_r433219465", "createdAt": "2020-06-01T13:00:56Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlCompleteLogoutAction.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutRequestBuilder;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlCompleteLogoutResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+/**\n+ * This Rest endpoint handles SAML LogoutResponse sent from idP with either HTTP-Redirect or HTTP-Post binding.\n+ * For HTTP-Redirect binding, it expects {@link Input#queryString} be set to the query string of the redirect URI.\n+ * For HTTP-Post binding, it expects {@link Input#content} be set to the value of SAMLResponse form parameter, i.e.\n+ * caller of this API must do the work to extract the SAMLResponse value from body of the HTTP-Post request. The\n+ * value must also be URL decoded if necessary.\n+ */\n+public class RestSamlCompleteLogoutAction extends SamlBaseRestHandler{\n+\n+    private static final Logger logger = LogManager.getLogger(RestSamlCompleteLogoutAction.class);\n+\n+    static class Input {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxMTY4Mw=="}, "originalCommit": {"oid": "c244cb6ec407a0151b97b7eece08d7a74c0e0e6a"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 584, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}