{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzU3NzEz", "number": 57041, "title": "Fix delete_expired_data/nightly maintenance when many model snapshots need deleting", "bodyText": "The queries performed by the expired data removers pull back entire documents where only a few fields are required. For ModelSnapshots in particular this is a problem as they contain quantiles which may be 100s of KB and the search size is set to 10,000.\nIf the user is suffering with many accumulated snapshots that were not cleaned up due to #47103 the size of this search response could be very large. This change makes the search more efficient by only requesting the fields needed to work out which expired data should be deleted.", "createdAt": "2020-05-21T13:39:26Z", "url": "https://github.com/elastic/elasticsearch/pull/57041", "merged": true, "mergeCommit": {"oid": "cde202610c58def76e5a923892776c0d7e00f88a"}, "closed": true, "closedAt": "2020-05-26T08:23:42Z", "author": {"login": "davidkyle"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjcGhlAH2gAyNDIxMzU3NzEzOmU1YmVjZjgxZmQ0ZTNkNjZiMmE1MzY4MGZkODE0NTU5NGIyMjBlYmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjf6BkAH2gAyNDIxMzU3NzEzOjYwOTM2YzBiMmJmOTIyNWUyMDdlMWUxNmViZDhiMGFkMDk5OWUwNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e5becf81fd4e3d66b2a53680fd8145594b220eba", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/e5becf81fd4e3d66b2a53680fd8145594b220eba", "committedDate": "2020-05-21T11:37:54Z", "message": "Extract time extractor method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTU3NjQz", "url": "https://github.com/elastic/elasticsearch/pull/57041#pullrequestreview-416157643", "createdAt": "2020-05-21T13:46:22Z", "commit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo0NjoyMlrOGYzZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1MjoyOFrOGYznHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MDk5OA==", "bodyText": "nit: indenting is out by 1 space by the look of it", "url": "https://github.com/elastic/elasticsearch/pull/57041#discussion_r428660998", "createdAt": "2020-05-21T13:46:22Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/extractor/TimeField.java", "diffHunk": "@@ -44,23 +45,7 @@ public Method getMethod() {\n             return value;\n         }\n         if (value[0] instanceof String) { // doc_value field with the epoch_millis format\n-            // Since nanosecond support was added epoch_millis timestamps may have a fractional component.\n-            // We discard this, taking just whole milliseconds.  Arguably it would be better to retain the\n-            // precision here and let the downstream component decide whether it wants the accuracy, but\n-            // that makes it hard to pass around the value as a number.  The double type doesn't have\n-            // enough digits of accuracy, and obviously long cannot store the fraction.  BigDecimal would\n-            // work, but that isn't supported by the JSON parser if the number gets round-tripped through\n-            // JSON.  So String is really the only format that could be used, but the ML consumers of time\n-            // are expecting a number.\n-            String strVal0 = (String) value[0];\n-            int dotPos = strVal0.indexOf('.');\n-            if (dotPos == -1) {\n-                value[0] = Long.parseLong(strVal0);\n-            } else if (dotPos > 0) {\n-                value[0] = Long.parseLong(strVal0.substring(0, dotPos));\n-            } else {\n-                value[0] = 0L;\n-            }\n+           value[0] = TimeUtils.parseToEpochMs((String)value[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MjAyMA==", "bodyText": "Would it be better to return long?  In the case where the caller wants Long it can be boxed just as efficiently on the caller's side.  And if the caller wants long then there's no boxing and unboxing.", "url": "https://github.com/elastic/elasticsearch/pull/57041#discussion_r428662020", "createdAt": "2020-05-21T13:48:11Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/time/TimeUtils.java", "diffHunk": "@@ -46,6 +46,37 @@ public static Instant parseTimeFieldToInstant(XContentParser parser, String fiel\n             \"unexpected token [\" + parser.currentToken() + \"] for [\" + fieldName + \"]\");\n     }\n \n+    /**\n+     * Safely parses a string epoch representation to a Long\n+     *\n+     * Commonly this function is used for parsing Date fields from doc values\n+     * requested with the format \"epoch_millis\".\n+     *\n+     * Since nanosecond support was added epoch_millis timestamps may have a fractional component.\n+     * We discard this, taking just whole milliseconds.  Arguably it would be better to retain the\n+     * precision here and let the downstream component decide whether it wants the accuracy, but\n+     * that makes it hard to pass around the value as a number.  The double type doesn't have\n+     * enough digits of accuracy, and obviously long cannot store the fraction.  BigDecimal would\n+     * work, but that isn't supported by the JSON parser if the number gets round-tripped through\n+     * JSON.  So String is really the only format that could be used, but the consumers of time\n+     * are expecting a number.\n+     *\n+     * @param epoch The\n+     * @return The epoch value.\n+     */\n+    public static Long parseToEpochMs(String epoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2NDEyMQ==", "bodyText": "Maybe we should log an error here, as I don't think this should never happen unless a document is corrupt.  So if it does happen it would be useful to know about when debugging why results haven't been deleted.", "url": "https://github.com/elastic/elasticsearch/pull/57041#discussion_r428664121", "createdAt": "2020-05-21T13:51:38Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java", "diffHunk": "@@ -175,19 +191,28 @@ protected void removeDataBefore(\n             public void onResponse(SearchResponse searchResponse) {\n                 long nextToKeepMs = deleteAllBeforeMs;\n                 try {\n-                    List<ModelSnapshot> modelSnapshots = new ArrayList<>();\n+                    List<JobSnapshotId> snapshotIds = new ArrayList<>();\n                     for (SearchHit hit : searchResponse.getHits()) {\n-                        ModelSnapshot modelSnapshot = ModelSnapshot.fromJson(hit.getSourceRef());\n-                        long timestampMs = modelSnapshot.getTimestamp().getTime();\n+                        String timestamp = stringFieldValueOrNull(hit, ModelSnapshot.TIMESTAMP.getPreferredName());\n+                        if (timestamp == null) {\n+                            continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2NDYwNg==", "bodyText": "Could use long instead of Long and avoid unboxing in the loop.", "url": "https://github.com/elastic/elasticsearch/pull/57041#discussion_r428664606", "createdAt": "2020-05-21T13:52:28Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java", "diffHunk": "@@ -175,19 +191,28 @@ protected void removeDataBefore(\n             public void onResponse(SearchResponse searchResponse) {\n                 long nextToKeepMs = deleteAllBeforeMs;\n                 try {\n-                    List<ModelSnapshot> modelSnapshots = new ArrayList<>();\n+                    List<JobSnapshotId> snapshotIds = new ArrayList<>();\n                     for (SearchHit hit : searchResponse.getHits()) {\n-                        ModelSnapshot modelSnapshot = ModelSnapshot.fromJson(hit.getSourceRef());\n-                        long timestampMs = modelSnapshot.getTimestamp().getTime();\n+                        String timestamp = stringFieldValueOrNull(hit, ModelSnapshot.TIMESTAMP.getPreferredName());\n+                        if (timestamp == null) {\n+                            continue;\n+                        }\n+                        Long timestampMs = TimeUtils.parseToEpochMs(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTY1NTAw", "url": "https://github.com/elastic/elasticsearch/pull/57041#pullrequestreview-416165500", "createdAt": "2020-05-21T13:56:02Z", "commit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1NjowMlrOGYzvxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1NzoxNFrOGYzylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2NjgyMg==", "bodyText": "Alternatively, you could get rid of epochMs and use return statement in each of 3 if branches.", "url": "https://github.com/elastic/elasticsearch/pull/57041#discussion_r428666822", "createdAt": "2020-05-21T13:56:02Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/time/TimeUtils.java", "diffHunk": "@@ -46,6 +46,37 @@ public static Instant parseTimeFieldToInstant(XContentParser parser, String fiel\n             \"unexpected token [\" + parser.currentToken() + \"] for [\" + fieldName + \"]\");\n     }\n \n+    /**\n+     * Safely parses a string epoch representation to a Long\n+     *\n+     * Commonly this function is used for parsing Date fields from doc values\n+     * requested with the format \"epoch_millis\".\n+     *\n+     * Since nanosecond support was added epoch_millis timestamps may have a fractional component.\n+     * We discard this, taking just whole milliseconds.  Arguably it would be better to retain the\n+     * precision here and let the downstream component decide whether it wants the accuracy, but\n+     * that makes it hard to pass around the value as a number.  The double type doesn't have\n+     * enough digits of accuracy, and obviously long cannot store the fraction.  BigDecimal would\n+     * work, but that isn't supported by the JSON parser if the number gets round-tripped through\n+     * JSON.  So String is really the only format that could be used, but the consumers of time\n+     * are expecting a number.\n+     *\n+     * @param epoch The\n+     * @return The epoch value.\n+     */\n+    public static Long parseToEpochMs(String epoch) {\n+        int dotPos = epoch.indexOf('.');\n+        long epochMs = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2NzU0MQ==", "bodyText": "Please write sth here.", "url": "https://github.com/elastic/elasticsearch/pull/57041#discussion_r428667541", "createdAt": "2020-05-21T13:57:14Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/time/TimeUtils.java", "diffHunk": "@@ -46,6 +46,37 @@ public static Instant parseTimeFieldToInstant(XContentParser parser, String fiel\n             \"unexpected token [\" + parser.currentToken() + \"] for [\" + fieldName + \"]\");\n     }\n \n+    /**\n+     * Safely parses a string epoch representation to a Long\n+     *\n+     * Commonly this function is used for parsing Date fields from doc values\n+     * requested with the format \"epoch_millis\".\n+     *\n+     * Since nanosecond support was added epoch_millis timestamps may have a fractional component.\n+     * We discard this, taking just whole milliseconds.  Arguably it would be better to retain the\n+     * precision here and let the downstream component decide whether it wants the accuracy, but\n+     * that makes it hard to pass around the value as a number.  The double type doesn't have\n+     * enough digits of accuracy, and obviously long cannot store the fraction.  BigDecimal would\n+     * work, but that isn't supported by the JSON parser if the number gets round-tripped through\n+     * JSON.  So String is really the only format that could be used, but the consumers of time\n+     * are expecting a number.\n+     *\n+     * @param epoch The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a69f90a74e3ccf042ac5a1a8eafe7dab8ec4e88a", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/a69f90a74e3ccf042ac5a1a8eafe7dab8ec4e88a", "committedDate": "2020-05-21T15:29:44Z", "message": "Don't get source"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a7366d39ac86746467cd167e1ba95ceba994202", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/8a7366d39ac86746467cd167e1ba95ceba994202", "committedDate": "2020-05-21T13:24:35Z", "message": "Don't get source"}, "afterCommit": {"oid": "a69f90a74e3ccf042ac5a1a8eafe7dab8ec4e88a", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/a69f90a74e3ccf042ac5a1a8eafe7dab8ec4e88a", "committedDate": "2020-05-21T15:29:44Z", "message": "Don't get source"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Mjc4ODg3", "url": "https://github.com/elastic/elasticsearch/pull/57041#pullrequestreview-416278887", "createdAt": "2020-05-21T15:58:30Z", "commit": {"oid": "a69f90a74e3ccf042ac5a1a8eafe7dab8ec4e88a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNTo1ODozMVrOGY407w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNTo1ODozMVrOGY407w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1MDA2Mw==", "bodyText": "Will removing this make:\n         if (hits.getTotalHits().value > MAX_FORECASTS) {\n             LOGGER.info(\"More than [{}] forecasts were found. This run will only delete [{}] of them\", MAX_FORECASTS, MAX_FORECASTS);\n         }\n\nless useful?  (Around line 141/145.)", "url": "https://github.com/elastic/elasticsearch/pull/57041#discussion_r428750063", "createdAt": "2020-05-21T15:58:31Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java", "diffHunk": "@@ -84,7 +78,11 @@ public void remove(float requestsPerSec, ActionListener<Boolean> listener, Suppl\n                 .filter(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), ForecastRequestStats.RESULT_TYPE_VALUE))\n                 .filter(QueryBuilders.existsQuery(ForecastRequestStats.EXPIRY_TIME.getPreferredName())));\n         source.size(MAX_FORECASTS);\n-        source.trackTotalHits(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69f90a74e3ccf042ac5a1a8eafe7dab8ec4e88a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60936c0b2bf9225e207e1e16ebd8b0ad0999e045", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/60936c0b2bf9225e207e1e16ebd8b0ad0999e045", "committedDate": "2020-05-21T16:03:52Z", "message": "Revert to tracking total hits"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}