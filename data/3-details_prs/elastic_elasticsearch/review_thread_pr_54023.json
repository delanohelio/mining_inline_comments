{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjMyNTE2", "number": 54023, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0MToyNlrODqkLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzoxNDozNlrODqlsgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTU5NTc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0MToyNlrOF6ZJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0MToyNlrOF6ZJzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3MzgzNw==", "bodyText": "Super minor nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(request.mappings!=null) {\n          \n          \n            \n                            if (request.mappings != null) {", "url": "https://github.com/elastic/elasticsearch/pull/54023#discussion_r396773837", "createdAt": "2020-03-23T21:41:26Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -274,7 +276,20 @@ public ClusterState execute(ClusterState currentState) throws Exception {\n                     throw new IllegalArgumentException(\"index_template [\" + request.name + \"] already exists\");\n                 }\n \n-                validateAndAddTemplate(request, templateBuilder, indicesService, xContentRegistry);\n+                templateBuilder.order(request.order);\n+                templateBuilder.version(request.version);\n+                templateBuilder.patterns(request.indexPatterns);\n+                templateBuilder.settings(request.settings);\n+\n+                if(request.mappings!=null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd97d6a0866f2eeab4b60f42503ef2dd2b47c4f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTYyMjY5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1MDo0NlrOF6Zamg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1MDo0NlrOF6Zamg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3ODEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate2));\n          \n          \n            \n                        () -> metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate2));", "url": "https://github.com/elastic/elasticsearch/pull/54023#discussion_r396778138", "createdAt": "2020-03-23T21:50:46Z", "author": {"login": "dakrone"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java", "diffHunk": "@@ -197,21 +200,41 @@ public void testPutGlobalTemplateWithIndexHiddenSetting() throws Exception {\n         assertThat(errors.get(0).getMessage(), containsString(\"global templates may not specify the setting index.hidden\"));\n     }\n \n-    public void testAddComponentTemplate() {\n+    public void testAddComponentTemplate() throws Exception{\n+        MetaDataIndexTemplateService metaDataIndexTemplateService = getMetaDataIndexTemplateService();\n         ClusterState state = ClusterState.EMPTY_STATE;\n-        ComponentTemplate template = ComponentTemplateTests.randomInstance();\n-        state = MetaDataIndexTemplateService.addComponentTemplate(state, false, \"foo\", template);\n+        Template template = new Template(Settings.builder().build(), null, ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate = new ComponentTemplate(template, 1L, new HashMap<>());\n+        state = metaDataIndexTemplateService.addComponentTemplate(state, false, \"foo\", componentTemplate);\n \n         assertNotNull(state.metaData().componentTemplates().get(\"foo\"));\n-        assertThat(state.metaData().componentTemplates().get(\"foo\"), equalTo(template));\n+        assertThat(state.metaData().componentTemplates().get(\"foo\"), equalTo(componentTemplate));\n \n         final ClusterState throwState = ClusterState.builder(state).build();\n         IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n-            () -> MetaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo\", template));\n+            () -> metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo\", componentTemplate));\n         assertThat(e.getMessage(), containsString(\"component template [foo] already exists\"));\n \n-        state = MetaDataIndexTemplateService.addComponentTemplate(state, randomBoolean(), \"bar\", template);\n+        state = metaDataIndexTemplateService.addComponentTemplate(state, randomBoolean(), \"bar\", componentTemplate);\n         assertNotNull(state.metaData().componentTemplates().get(\"bar\"));\n+\n+        template = new Template(Settings.builder().build(), new CompressedXContent(\"{\\\"invalid\\\"}\"),\n+            ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate2 = new ComponentTemplate(template, 1L, new HashMap<>());\n+        expectThrows(JsonParseException.class,\n+            ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd97d6a0866f2eeab4b60f42503ef2dd2b47c4f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTYyMjkyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1MDo1M1rOF6ZawA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1MDo1M1rOF6ZawA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3ODE3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate3));\n          \n          \n            \n                        () -> metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate3));", "url": "https://github.com/elastic/elasticsearch/pull/54023#discussion_r396778176", "createdAt": "2020-03-23T21:50:53Z", "author": {"login": "dakrone"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java", "diffHunk": "@@ -197,21 +200,41 @@ public void testPutGlobalTemplateWithIndexHiddenSetting() throws Exception {\n         assertThat(errors.get(0).getMessage(), containsString(\"global templates may not specify the setting index.hidden\"));\n     }\n \n-    public void testAddComponentTemplate() {\n+    public void testAddComponentTemplate() throws Exception{\n+        MetaDataIndexTemplateService metaDataIndexTemplateService = getMetaDataIndexTemplateService();\n         ClusterState state = ClusterState.EMPTY_STATE;\n-        ComponentTemplate template = ComponentTemplateTests.randomInstance();\n-        state = MetaDataIndexTemplateService.addComponentTemplate(state, false, \"foo\", template);\n+        Template template = new Template(Settings.builder().build(), null, ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate = new ComponentTemplate(template, 1L, new HashMap<>());\n+        state = metaDataIndexTemplateService.addComponentTemplate(state, false, \"foo\", componentTemplate);\n \n         assertNotNull(state.metaData().componentTemplates().get(\"foo\"));\n-        assertThat(state.metaData().componentTemplates().get(\"foo\"), equalTo(template));\n+        assertThat(state.metaData().componentTemplates().get(\"foo\"), equalTo(componentTemplate));\n \n         final ClusterState throwState = ClusterState.builder(state).build();\n         IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n-            () -> MetaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo\", template));\n+            () -> metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo\", componentTemplate));\n         assertThat(e.getMessage(), containsString(\"component template [foo] already exists\"));\n \n-        state = MetaDataIndexTemplateService.addComponentTemplate(state, randomBoolean(), \"bar\", template);\n+        state = metaDataIndexTemplateService.addComponentTemplate(state, randomBoolean(), \"bar\", componentTemplate);\n         assertNotNull(state.metaData().componentTemplates().get(\"bar\"));\n+\n+        template = new Template(Settings.builder().build(), new CompressedXContent(\"{\\\"invalid\\\"}\"),\n+            ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate2 = new ComponentTemplate(template, 1L, new HashMap<>());\n+        expectThrows(JsonParseException.class,\n+            ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate2));\n+\n+        template = new Template(Settings.builder().build(), new CompressedXContent(\"{\\\"invalid\\\":\\\"invalid\\\"}\"),\n+            ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate3 = new ComponentTemplate(template, 1L, new HashMap<>());\n+        expectThrows(MapperParsingException.class,\n+            ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd97d6a0866f2eeab4b60f42503ef2dd2b47c4f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTYyMzQ2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1MTowOFrOF6ZbIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo1MTowOFrOF6ZbIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3ODI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate4));\n          \n          \n            \n                        () -> metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate4));", "url": "https://github.com/elastic/elasticsearch/pull/54023#discussion_r396778274", "createdAt": "2020-03-23T21:51:08Z", "author": {"login": "dakrone"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java", "diffHunk": "@@ -197,21 +200,41 @@ public void testPutGlobalTemplateWithIndexHiddenSetting() throws Exception {\n         assertThat(errors.get(0).getMessage(), containsString(\"global templates may not specify the setting index.hidden\"));\n     }\n \n-    public void testAddComponentTemplate() {\n+    public void testAddComponentTemplate() throws Exception{\n+        MetaDataIndexTemplateService metaDataIndexTemplateService = getMetaDataIndexTemplateService();\n         ClusterState state = ClusterState.EMPTY_STATE;\n-        ComponentTemplate template = ComponentTemplateTests.randomInstance();\n-        state = MetaDataIndexTemplateService.addComponentTemplate(state, false, \"foo\", template);\n+        Template template = new Template(Settings.builder().build(), null, ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate = new ComponentTemplate(template, 1L, new HashMap<>());\n+        state = metaDataIndexTemplateService.addComponentTemplate(state, false, \"foo\", componentTemplate);\n \n         assertNotNull(state.metaData().componentTemplates().get(\"foo\"));\n-        assertThat(state.metaData().componentTemplates().get(\"foo\"), equalTo(template));\n+        assertThat(state.metaData().componentTemplates().get(\"foo\"), equalTo(componentTemplate));\n \n         final ClusterState throwState = ClusterState.builder(state).build();\n         IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n-            () -> MetaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo\", template));\n+            () -> metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo\", componentTemplate));\n         assertThat(e.getMessage(), containsString(\"component template [foo] already exists\"));\n \n-        state = MetaDataIndexTemplateService.addComponentTemplate(state, randomBoolean(), \"bar\", template);\n+        state = metaDataIndexTemplateService.addComponentTemplate(state, randomBoolean(), \"bar\", componentTemplate);\n         assertNotNull(state.metaData().componentTemplates().get(\"bar\"));\n+\n+        template = new Template(Settings.builder().build(), new CompressedXContent(\"{\\\"invalid\\\"}\"),\n+            ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate2 = new ComponentTemplate(template, 1L, new HashMap<>());\n+        expectThrows(JsonParseException.class,\n+            ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate2));\n+\n+        template = new Template(Settings.builder().build(), new CompressedXContent(\"{\\\"invalid\\\":\\\"invalid\\\"}\"),\n+            ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate3 = new ComponentTemplate(template, 1L, new HashMap<>());\n+        expectThrows(MapperParsingException.class,\n+            ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate3));\n+\n+        template = new Template(Settings.builder().put(\"invalid\", \"invalid\").build(), new CompressedXContent(\"{}\"),\n+            ComponentTemplateTests.randomAliases());\n+        ComponentTemplate componentTemplate4 = new ComponentTemplate(template, 1L, new HashMap<>());\n+        expectThrows(IllegalArgumentException.class,\n+            ()->metaDataIndexTemplateService.addComponentTemplate(throwState, true, \"foo2\", componentTemplate4));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd97d6a0866f2eeab4b60f42503ef2dd2b47c4f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTg0Mzg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzoxNDozNlrOF6bi1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzoxNDozNlrOF6bi1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMzAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            public ClusterState execute(ClusterState currentState) throws Exception{\n          \n          \n            \n                            public ClusterState execute(ClusterState currentState) throws Exception {", "url": "https://github.com/elastic/elasticsearch/pull/54023#discussion_r396813015", "createdAt": "2020-03-23T23:14:36Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -154,7 +155,7 @@ public void onFailure(String source, Exception e) {\n                 }\n \n                 @Override\n-                public ClusterState execute(ClusterState currentState) {\n+                public ClusterState execute(ClusterState currentState) throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd97d6a0866f2eeab4b60f42503ef2dd2b47c4f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4229, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}