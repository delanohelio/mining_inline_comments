{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDE4MjM5", "number": 64366, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODo1Mzo0MVrOEzb_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODo1Mzo0MVrOEzb_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzcxMzg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODo1Mzo0MVrOHqqHmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxNTowMFrOHqq5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MjMxMg==", "bodyText": "I know you just transcribed this from the old comment, but it might be nice to define \"best\" here.  Like what criteria it uses.", "url": "https://github.com/elastic/elasticsearch/pull/64366#discussion_r514492312", "createdAt": "2020-10-29T18:53:41Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java", "diffHunk": "@@ -52,28 +52,37 @@ protected void doPreCollection() throws IOException {\n         List<BucketCollector> deferredAggregations = null;\n         for (int i = 0; i < subAggregators.length; ++i) {\n             if (shouldDefer(subAggregators[i])) {\n-                if (recordingWrapper == null) {\n-                    recordingWrapper = getDeferringCollector();\n+                if (deferringCollector == null) {\n+                    deferringCollector = buildDeferringCollector();\n                     deferredAggregations = new ArrayList<>(subAggregators.length);\n                     deferredAggregationNames = new ArrayList<>(subAggregators.length);\n                 }\n                 deferredAggregations.add(subAggregators[i]);\n                 deferredAggregationNames.add(subAggregators[i].name());\n-                subAggregators[i] = recordingWrapper.wrap(subAggregators[i]);\n+                subAggregators[i] = deferringCollector.wrap(subAggregators[i]);\n             } else {\n                 collectors.add(subAggregators[i]);\n             }\n         }\n-        if (recordingWrapper != null) {\n-            recordingWrapper.setDeferredCollector(deferredAggregations);\n-            collectors.add(recordingWrapper);\n+        if (deferringCollector != null) {\n+            deferringCollector.setDeferredCollector(deferredAggregations);\n+            collectors.add(deferringCollector);\n         }\n         collectableSubAggregators = MultiBucketCollector.wrap(collectors);\n     }\n \n-    public DeferringBucketCollector getDeferringCollector() {\n-        // Default impl is a collector that selects the best buckets\n-        // but an alternative defer policy may be based on best docs.\n+    /**\n+     * Get the deferring collector.\n+     */\n+    protected DeferringBucketCollector deferringCollector() {\n+        return deferringCollector;\n+    }\n+\n+    /**\n+     * Build the {@link DeferringBucketCollector}. The default implementation\n+     * selects the best buckets but some aggs want to do something else.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa6612f46aa4632c4feb25ae0f3e5b38035dacc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNTA0MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/64366#discussion_r514505041", "createdAt": "2020-10-29T19:15:00Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java", "diffHunk": "@@ -52,28 +52,37 @@ protected void doPreCollection() throws IOException {\n         List<BucketCollector> deferredAggregations = null;\n         for (int i = 0; i < subAggregators.length; ++i) {\n             if (shouldDefer(subAggregators[i])) {\n-                if (recordingWrapper == null) {\n-                    recordingWrapper = getDeferringCollector();\n+                if (deferringCollector == null) {\n+                    deferringCollector = buildDeferringCollector();\n                     deferredAggregations = new ArrayList<>(subAggregators.length);\n                     deferredAggregationNames = new ArrayList<>(subAggregators.length);\n                 }\n                 deferredAggregations.add(subAggregators[i]);\n                 deferredAggregationNames.add(subAggregators[i].name());\n-                subAggregators[i] = recordingWrapper.wrap(subAggregators[i]);\n+                subAggregators[i] = deferringCollector.wrap(subAggregators[i]);\n             } else {\n                 collectors.add(subAggregators[i]);\n             }\n         }\n-        if (recordingWrapper != null) {\n-            recordingWrapper.setDeferredCollector(deferredAggregations);\n-            collectors.add(recordingWrapper);\n+        if (deferringCollector != null) {\n+            deferringCollector.setDeferredCollector(deferredAggregations);\n+            collectors.add(deferringCollector);\n         }\n         collectableSubAggregators = MultiBucketCollector.wrap(collectors);\n     }\n \n-    public DeferringBucketCollector getDeferringCollector() {\n-        // Default impl is a collector that selects the best buckets\n-        // but an alternative defer policy may be based on best docs.\n+    /**\n+     * Get the deferring collector.\n+     */\n+    protected DeferringBucketCollector deferringCollector() {\n+        return deferringCollector;\n+    }\n+\n+    /**\n+     * Build the {@link DeferringBucketCollector}. The default implementation\n+     * selects the best buckets but some aggs want to do something else.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MjMxMg=="}, "originalCommit": {"oid": "8aa6612f46aa4632c4feb25ae0f3e5b38035dacc"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4077, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}