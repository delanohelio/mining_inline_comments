{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTM3Mzk2", "number": 63694, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjowNTowNlrOEtro4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNjowMFrOEt27Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzM2MzU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjowNTowNlrOHhnGlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToyMDoxNlrOHiC-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTcxOA==", "bodyText": "Shouldn't this be enough? why do we need to check the top level separately?", "url": "https://github.com/elastic/elasticsearch/pull/63694#discussion_r505005718", "createdAt": "2020-10-14T22:05:06Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -99,7 +104,34 @@ public LogicalPlan optimize(LogicalPlan verified) {\n         Batch label = new Batch(\"Set as Optimized\", Limiter.ONCE,\n                 new SetAsOptimized());\n \n-        return Arrays.asList(substitutions, operators, constraints, operators, ordering, local, label);\n+        return asList(substitutions, syntactic, operators, constraints, operators, ordering, local, label);\n+    }\n+\n+    private static class AddMissingEquals extends OptimizerRule<Filter> {\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            // check the condition itself\n+            Expression condition = replaceRawBoolFieldWithEquals(filter.condition());\n+            // otherwise look for binary logic\n+            if (condition == filter.condition()) {\n+                condition = condition.transformUp(b ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab772b11b6e92341e31fd752dc637859244e94b1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIwNjIwNw==", "bodyText": "for cases such as where bool which have no other expression specified.", "url": "https://github.com/elastic/elasticsearch/pull/63694#discussion_r505206207", "createdAt": "2020-10-15T06:36:42Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -99,7 +104,34 @@ public LogicalPlan optimize(LogicalPlan verified) {\n         Batch label = new Batch(\"Set as Optimized\", Limiter.ONCE,\n                 new SetAsOptimized());\n \n-        return Arrays.asList(substitutions, operators, constraints, operators, ordering, local, label);\n+        return asList(substitutions, syntactic, operators, constraints, operators, ordering, local, label);\n+    }\n+\n+    private static class AddMissingEquals extends OptimizerRule<Filter> {\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            // check the condition itself\n+            Expression condition = replaceRawBoolFieldWithEquals(filter.condition());\n+            // otherwise look for binary logic\n+            if (condition == filter.condition()) {\n+                condition = condition.transformUp(b ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTcxOA=="}, "originalCommit": {"oid": "ab772b11b6e92341e31fd752dc637859244e94b1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4NTcyMQ==", "bodyText": "I meant, that the transformUp would also catch this case, no?", "url": "https://github.com/elastic/elasticsearch/pull/63694#discussion_r505285721", "createdAt": "2020-10-15T07:46:33Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -99,7 +104,34 @@ public LogicalPlan optimize(LogicalPlan verified) {\n         Batch label = new Batch(\"Set as Optimized\", Limiter.ONCE,\n                 new SetAsOptimized());\n \n-        return Arrays.asList(substitutions, operators, constraints, operators, ordering, local, label);\n+        return asList(substitutions, syntactic, operators, constraints, operators, ordering, local, label);\n+    }\n+\n+    private static class AddMissingEquals extends OptimizerRule<Filter> {\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            // check the condition itself\n+            Expression condition = replaceRawBoolFieldWithEquals(filter.condition());\n+            // otherwise look for binary logic\n+            if (condition == filter.condition()) {\n+                condition = condition.transformUp(b ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTcxOA=="}, "originalCommit": {"oid": "ab772b11b6e92341e31fd752dc637859244e94b1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MjQzOQ==", "bodyText": "No because it filters on BinaryLogic.", "url": "https://github.com/elastic/elasticsearch/pull/63694#discussion_r505462439", "createdAt": "2020-10-15T11:20:16Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -99,7 +104,34 @@ public LogicalPlan optimize(LogicalPlan verified) {\n         Batch label = new Batch(\"Set as Optimized\", Limiter.ONCE,\n                 new SetAsOptimized());\n \n-        return Arrays.asList(substitutions, operators, constraints, operators, ordering, local, label);\n+        return asList(substitutions, syntactic, operators, constraints, operators, ordering, local, label);\n+    }\n+\n+    private static class AddMissingEquals extends OptimizerRule<Filter> {\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            // check the condition itself\n+            Expression condition = replaceRawBoolFieldWithEquals(filter.condition());\n+            // otherwise look for binary logic\n+            if (condition == filter.condition()) {\n+                condition = condition.transformUp(b ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTcxOA=="}, "originalCommit": {"oid": "ab772b11b6e92341e31fd752dc637859244e94b1"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTIxMjk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNjowMFrOHh5qOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToyMjoyNFrOHiDC7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwOTc1Mw==", "bodyText": "Can you add more from the actual query DSL. The fact that there is a bool must and a term with true doesn't mean the actual query is entirely correct, more like how we do it with SQL (where the entire query is checked for correctness). For term at least, there is the new parameter that Mark H. added that makes it case insensitive or not.", "url": "https://github.com/elastic/elasticsearch/pull/63694#discussion_r505309753", "createdAt": "2020-10-15T08:06:00Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -145,6 +145,49 @@ process where endsWith(user_name, \"c\")\n {\"wildcard\":{\"user_name\":{\"wildcard\":\"*c\",\"boost\":1.0}}}],\"boost\":1.0}}\n ;\n \n+fieldNoEquals\n+process where bool\n+;\n+{\"bool\":{\"must\":[\n+{\"term\":{\"bool\":{\"value\":true,\n+;\n+\n+fieldNoEqualsInExpression\n+process where length(file_name) > 0 and bool\n+;\n+{\"bool\":{\"must\":[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab772b11b6e92341e31fd752dc637859244e94b1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MzUzNA==", "bodyText": "I'm not a fan of comprehensive query tests since any optimization or change breaks the test. For example the bool must is separate since the term comparison gets applied on process as well.\nThe aim of this test is to check that the bool field is compared not to what. So checking the parameter for case insensitivity (which btw, does appear only if it gets set) goes beyond the scope tested here.", "url": "https://github.com/elastic/elasticsearch/pull/63694#discussion_r505463534", "createdAt": "2020-10-15T11:22:24Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -145,6 +145,49 @@ process where endsWith(user_name, \"c\")\n {\"wildcard\":{\"user_name\":{\"wildcard\":\"*c\",\"boost\":1.0}}}],\"boost\":1.0}}\n ;\n \n+fieldNoEquals\n+process where bool\n+;\n+{\"bool\":{\"must\":[\n+{\"term\":{\"bool\":{\"value\":true,\n+;\n+\n+fieldNoEqualsInExpression\n+process where length(file_name) > 0 and bool\n+;\n+{\"bool\":{\"must\":[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwOTc1Mw=="}, "originalCommit": {"oid": "ab772b11b6e92341e31fd752dc637859244e94b1"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2871, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}