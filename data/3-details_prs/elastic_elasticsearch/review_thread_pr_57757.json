{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NjU0MjE3", "number": 57757, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MTo0N1rOEDD4hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMzo0MlrOEDbwTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQ0ODA2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MTo0N1rOGf5e5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MTo0N1rOGf5e5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMDgzOA==", "bodyText": "These actually reproduce the issue.", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436100838", "createdAt": "2020-06-05T18:41:47Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQ1MjA1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MzoxM1rOGf5hYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MzoxM1rOGf5hYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMTQ3NQ==", "bodyText": "I thought this would reproduce the issue but it doesn't. It still feels useful to add.", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436101475", "createdAt": "2020-06-05T18:43:13Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testAllDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\");\n+                    SignificantLongTerms result = search(searcher, new MatchAllDocsQuery(), request, longField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testSomeDocsWithoutStringFieldviaGlobalOrds() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQ1MjU4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MzoyNlrOGf5huQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MzoyNlrOGf5huQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMTU2MQ==", "bodyText": "These are coming in #57758 and I thought they might reproduce the issue so I added them as well. No dice. Either way, they are nice to have.", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436101561", "createdAt": "2020-06-05T18:43:26Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testAllDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\");\n+                    SignificantLongTerms result = search(searcher, new MatchAllDocsQuery(), request, longField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testSomeDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testSomeDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testSomeDocsWithoutStringFieldViaMap() throws IOException {\n+        testSomeDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testSomeDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(d);\n+                writer.flush();\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(2L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testSomeDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedNumericDocValuesField(\"f\", 1));\n+                writer.addDocument(d);\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\");\n+                    SignificantLongTerms result = search(searcher, new MatchAllDocsQuery(), request, longField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(2L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testThreeLayerStringViaGlobalOrds() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQ1MzI5OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0Mzo0MlrOGf5iMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0Mzo0MlrOGf5iMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMTY4Mg==", "bodyText": "0 bad!", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436101682", "createdAt": "2020-06-05T18:43:42Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java", "diffHunk": "@@ -49,12 +49,12 @@ protected StringTerms buildEmptyTermsAggregation() {\n                 metadata(), format, bucketCountThresholds.getShardSize(), showTermDocCountError, 0, emptyList(), 0);\n     }\n \n-    protected SignificantStringTerms buildEmptySignificantTermsAggregation(SignificanceHeuristic significanceHeuristic) {\n+    protected SignificantStringTerms buildEmptySignificantTermsAggregation(long subsetSize, SignificanceHeuristic significanceHeuristic) {\n         // We need to account for the significance of a miss in our global stats - provide corpus size as context\n         ContextIndexSearcher searcher = context.searcher();\n         IndexReader topReader = searcher.getIndexReader();\n         int supersetSize = topReader.numDocs();\n         return new SignificantStringTerms(name, bucketCountThresholds.getRequiredSize(), bucketCountThresholds.getMinDocCount(),\n-                metadata(), format, 0, supersetSize, significanceHeuristic, emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDMyMTI1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1NzoxOVrOGgcWUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1NzoxOVrOGgcWUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3MjA4MA==", "bodyText": "This test (or it's mapped/global wrappers, if you'd rather) needs javadoc.  It's not at all clear from the name what path this is intended to exercise.", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436672080", "createdAt": "2020-06-08T12:57:19Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDM1MTY3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMjoxNVrOGgcojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNzozM1rOGgc7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3Njc1MQ==", "bodyText": "Does d not get added to the index? Why are we even creating this document?", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436676751", "createdAt": "2020-06-08T13:02:15Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MTU0MA==", "bodyText": "That'd be a copy and paste error. Sorry!", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436681540", "createdAt": "2020-06-08T13:07:33Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3Njc1MQ=="}, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDM1OTE2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMzo0MlrOGgcthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMzo0MlrOGgcthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3ODAyMA==", "bodyText": "As above, why do we even need this document?", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436678020", "createdAt": "2020-06-08T13:03:42Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testAllDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3591, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}