{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzQyMDUz", "number": 61504, "title": "Convert double script to return array", "bodyText": "This replaces the value collection method in double valued runtime\nscript fields with simply returning a double[]. Painless has some\n\"convert\" features that allow us to define automatic conversions from\nthings like double and Collection into double[] so we use those.\nRelates to #59332", "createdAt": "2020-08-24T20:14:54Z", "url": "https://github.com/elastic/elasticsearch/pull/61504", "merged": true, "mergeCommit": {"oid": "6d8170c6a45d07b2658fe37659afd5fb8793fd5a"}, "closed": true, "closedAt": "2020-08-25T18:42:04Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCIcOMgH2gAyNDcyNzQyMDUzOjYyMDk0NmQ1ZTRmOWNiYmYwZDgwYjg0NmY4MTZkNjc5MjBmNzY2MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCaeE4AH2gAyNDcyNzQyMDUzOjNiYjY3MTBiNTg0Y2M2NGEyM2VkODQyYTFkNDA4NmY0ZWI5OWIyZTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/620946d5e4f9cbbf0d80b846f816d67920f76613", "committedDate": "2020-08-24T20:15:09Z", "message": "Convert double script to return array\n\nThis replaces the value collection method in `double` valued runtime\nscript fields with simply returning a `double[]`. Painless has some\n\"convert\" features that allow us to define automatic conversions from\nthings like `double` and `Collection` into `double[]` so we use those."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODIzOTA3", "url": "https://github.com/elastic/elasticsearch/pull/61504#pullrequestreview-473823907", "createdAt": "2020-08-24T20:15:29Z", "commit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNToyOVrOHF0rQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDoxNzoxMFrOHF0uow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2Nzk2OA==", "bodyText": "The if is temporary and it'll become all the time once it is done.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475867968", "createdAt": "2020-08-24T20:15:29Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/qa/rest/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/rest/CoreTestsWithRuntimeFieldsIT.java", "diffHunk": "@@ -166,6 +166,9 @@ private static String painlessToLoadFromSource(String name, String type) {\n             return null;\n         }\n         StringBuilder b = new StringBuilder();\n+        if (\"double\".equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2ODI3OQ==", "bodyText": "Because I'm only doing one of them I have to move the old execute method decalarations into the subclasses.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475868279", "createdAt": "2020-08-24T20:16:05Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractLongScriptFieldScript.java", "diffHunk": "@@ -23,6 +23,8 @@ public AbstractLongScriptFieldScript(Map<String, Object> params, SearchLookup se\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract void execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2ODgzNQ==", "bodyText": "We don't need the count any more because we use the whole array.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475868835", "createdAt": "2020-08-24T20:17:10Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractDoubleScriptFieldQuery.java", "diffHunk": "@@ -36,7 +36,7 @@\n     /**\n      * Does the value match this query?\n      */\n-    protected abstract boolean matches(double[] values, int count);\n+    protected abstract boolean matches(double[] values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDk5NzA2", "url": "https://github.com/elastic/elasticsearch/pull/61504#pullrequestreview-474499706", "createdAt": "2020-08-25T13:49:12Z", "commit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo0OToxMlrOHGY_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo1MToxN1rOHGZFng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA==", "bodyText": "oh boy I was hoping we would not need this sort of stuff, but I guess we do? I mean the instanceof as well as the cast to double array", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476462930", "createdAt": "2020-08-25T13:49:12Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg==", "bodyText": "I was hoping that this file would go away completely. can you remind what the remaining lines are for?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476464542", "createdAt": "2020-08-25T13:51:17Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34e57bf94a2185465ca36a99e0db2f31082ee10", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/a34e57bf94a2185465ca36a99e0db2f31082ee10", "committedDate": "2020-08-25T14:45:51Z", "message": "Unit tests for conversions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e885f0bc4ea131d05c44e0a99e550fac9da36db", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/0e885f0bc4ea131d05c44e0a99e550fac9da36db", "committedDate": "2020-08-25T14:52:41Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjMzOTM5", "url": "https://github.com/elastic/elasticsearch/pull/61504#pullrequestreview-474633939", "createdAt": "2020-08-25T16:07:15Z", "commit": {"oid": "0e885f0bc4ea131d05c44e0a99e550fac9da36db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNzoxNVrOHGfQjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNzoxNVrOHGfQjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY0Nw==", "bodyText": "@stu-elastic and @jdconrad do these look right? I borrowed them from FactoryTests.\nI see right now you force the converters to be static - would it be possible to make them non-static on the script?", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476565647", "createdAt": "2020-08-25T16:07:15Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,40 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e885f0bc4ea131d05c44e0a99e550fac9da36db"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjM3MTYz", "url": "https://github.com/elastic/elasticsearch/pull/61504#pullrequestreview-474637163", "createdAt": "2020-08-25T16:11:02Z", "commit": {"oid": "0e885f0bc4ea131d05c44e0a99e550fac9da36db"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxMTowMlrOHGfaMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxMjozNlrOHGfd9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2ODExNQ==", "bodyText": "Indy for this is really challenging. We are going to look into it, but allowing you to do def conversions this way ensures we have something for runtime fields now that doesn't use reflection invocation. I would recommend that this cover all numeric cases including byte through long as well. Check out something like DefMath.plus.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476568115", "createdAt": "2020-08-25T16:11:02Z", "author": {"login": "jdconrad"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2OTA3Nw==", "bodyText": "Painless has no way to load these classes w/o explicitly stating them as part of SPI.", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476569077", "createdAt": "2020-08-25T16:12:36Z", "author": {"login": "jdconrad"}, "path": "x-pack/plugin/runtime-fields/src/main/resources/org/elasticsearch/xpack/runtimefields/double_whitelist.txt", "diffHunk": "@@ -9,10 +9,6 @@\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript @no_import {\n }\n \n-static_import {\n-    void value(org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript, double) bound_to org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Value\n-}\n-\n-# This import is required to make painless happy and it isn't 100% clear why\n+# This whitelist is required to allow painless to build the factory\n class org.elasticsearch.xpack.runtimefields.DoubleScriptFieldScript$Factory @no_import {\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDU0Mg=="}, "originalCommit": {"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb6710b584cc64a23ed842a1d4086f4eb99b2e0", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3bb6710b584cc64a23ed842a1d4086f4eb99b2e0", "committedDate": "2020-08-25T17:15:28Z", "message": "Handle all numbers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4694, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}