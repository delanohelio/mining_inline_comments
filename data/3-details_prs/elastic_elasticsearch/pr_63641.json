{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzY5NjY5", "number": 63641, "title": "Dependency Graph gradle Task", "bodyText": "This change adds a gradle task that builds a simplified dependency graph\nof our runtime dependencies and pushes that to be monitored by a\nsoftware composition analysis service.", "createdAt": "2020-10-13T19:59:30Z", "url": "https://github.com/elastic/elasticsearch/pull/63641", "merged": true, "mergeCommit": {"oid": "6e5915dadbdb044956d26c037e9ee3c0cfc2c69e"}, "closed": true, "closedAt": "2020-11-16T09:23:05Z", "author": {"login": "jkakavas"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSJnE7AH2gAyNTAyNzY5NjY5Ojg5NzgzYzdiNDAxYmJkNjA0M2QxZDBiMzQyZjRlZmNiMzc1NDJkZTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb5RRtgH2gAyNTAyNzY5NjY5OmU5OWFhMzBkMjY4NjYzYjQ5NTZhYjk5MDA5ZjJlYWUxMTQyMDIyYjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "89783c7b401bbd6043d1d0b342f4efcb37542de6", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/89783c7b401bbd6043d1d0b342f4efcb37542de6", "committedDate": "2020-10-13T14:39:42Z", "message": "snyk-depgraph-poc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d2bd93df093575ca7b266e409034d5b31a86c5", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/c5d2bd93df093575ca7b266e409034d5b31a86c5", "committedDate": "2020-10-13T14:40:20Z", "message": "Merge remote-tracking branch 'origin/master' into snyk-api-task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09bdf2291d39423697857dccf783b02394db8091", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/09bdf2291d39423697857dccf783b02394db8091", "committedDate": "2020-10-13T18:58:59Z", "message": "Fix precommit checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTg2NjE1", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-508186615", "createdAt": "2020-10-14T09:59:27Z", "commit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1OToyN1rOHhLhjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxNDo1OVrOHhME9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1Mzg3MQ==", "bodyText": "this adds a implicit dependency to the JavaPlugin. we should shield this by putting this within a\nproject.getPlugins().withType(JavaPlugin.class, p -> {\n                        t.setRuntimeConfiguration(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));\n\n});\n        ```", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504553871", "createdAt": "2020-10-14T09:59:27Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.elasticsearch.gradle.dependencies.CompileOnlyResolvePlugin;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+public class DependenciesGraphPlugin implements Plugin<Project> {\n+\n+    public void apply(Project project) {\n+        project.getPlugins().apply(CompileOnlyResolvePlugin.class);\n+        TaskProvider<DependenciesGraphTask> depsGraph = project.getTasks().register(\"dependenciesGraph\", DependenciesGraphTask.class);\n+        depsGraph.configure(t -> {\n+            t.setRuntimeConfiguration(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTExOA==", "bodyText": "Just a general note, We keep adding more stuff here. In general we should avoid the pattern of adding logic and disabling it to certain projects. Instead we should have a notion of production project or sth similar to have a way to apply logic like this dependencyGraph plugin only on this production projects", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504559118", "createdAt": "2020-10-14T10:08:27Z", "author": {"login": "breskeby"}, "path": "build.gradle", "diffHunk": "@@ -407,6 +407,9 @@ gradle.projectsEvaluated {\n       maybeConfigure(project.tasks, 'dependenciesInfo') {\n         it.enabled = false\n       }\n+      maybeConfigure(project.tasks, 'dependenciesGraph') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTQ1Mg==", "bodyText": "with the change in the root build.gradle file this shouldn't be required should it?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504559452", "createdAt": "2020-10-14T10:09:03Z", "author": {"login": "breskeby"}, "path": "qa/os/build.gradle", "diffHunk": "@@ -54,6 +54,7 @@ testingConventions.enabled = false\n // this project doesn't get published\n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n tasks.dependenciesInfo.enabled = false\n+tasks.dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTQ2NA==", "bodyText": "please use the task avoidance api here: tasks.named(\"dependenciesGraph\").configure { it.enabled = false }", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504561464", "createdAt": "2020-10-14T10:12:22Z", "author": {"login": "breskeby"}, "path": "client/test/build.gradle", "diffHunk": "@@ -50,6 +50,7 @@ jarHell.enabled = false\n // TODO: should we have licenses for our test deps?\n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n dependenciesInfo.enabled = false\n+dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTkxMA==", "bodyText": "should not be required (see root build.gradle change)", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504561910", "createdAt": "2020-10-14T10:13:10Z", "author": {"login": "breskeby"}, "path": "qa/wildfly/build.gradle", "diffHunk": "@@ -87,6 +87,7 @@ test.enabled = false\n \n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n dependenciesInfo.enabled = false\n+dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MjA3NQ==", "bodyText": "please use the gradle task avoidance api", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504562075", "createdAt": "2020-10-14T10:13:27Z", "author": {"login": "breskeby"}, "path": "test/framework/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ tasks.named('forbiddenApisMain').configure {\n // TODO: should we have licenses for our test deps?\n tasks.named(\"dependencyLicenses\").configure { it.enabled = false }\n dependenciesInfo.enabled = false\n+dependenciesGraph.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MjkzNQ==", "bodyText": "This seem to duplicate the logic in the root build.gradle file we have for disabling the task", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504562935", "createdAt": "2020-10-14T10:14:59Z", "author": {"login": "breskeby"}, "path": "x-pack/plugin/transform/qa/build.gradle", "diffHunk": "@@ -10,5 +10,9 @@ gradle.projectsEvaluated {\n     if (dependenciesInfo) {\n       dependenciesInfo.enabled = false\n     }\n+    Task dependenciesGraph = project.tasks.findByName('dependenciesGraph')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bdf2291d39423697857dccf783b02394db8091"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93", "committedDate": "2020-10-14T19:49:39Z", "message": "Address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Njc4MzY4", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-508678368", "createdAt": "2020-10-14T19:52:07Z", "commit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo1MjowN1rOHhiryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo1MjowN1rOHhiryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMzMyMQ==", "bodyText": "Depending on how we can pass secrets from Jenkins to a gradle task, this can be changed/adapted. I'm up for suggestions on how to deal with this", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r504933321", "createdAt": "2020-10-14T19:52:07Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+    private String url;\n+    private String token;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @Option(option = \"url\", description = \"The API endpoint to call with the dependency graph\")\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input\n+    public String getUrl() {\n+        return this.url;\n+    }\n+\n+    @Option(option = \"token\", description = \"The API KEY used to authenticate to the API\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTQxMjQy", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-512141242", "createdAt": "2020-10-19T20:39:24Z", "commit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDozOToyNFrOHkgylg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo0NjoxM1rOHkhA6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0ODAyMg==", "bodyText": "Why are we including compile-only dependencies? These aren't bundled with Elasticsearch so I'm not sure we should be including them in our report. Security vulnerabilities, by definition, should only be applicable to runtime code.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r508048022", "createdAt": "2020-10-19T20:39:24Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MTY5MA==", "bodyText": "Since this task performs network operations, we should probably explicitly fail if a user attempts to run it in offline mode, similarly to what we do for the verifyVersions task.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r508051690", "createdAt": "2020-10-19T20:46:13Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.tasks.options.Option;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+    private String url;\n+    private String token;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @Option(option = \"url\", description = \"The API endpoint to call with the dependency graph\")\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input\n+    public String getUrl() {\n+        return this.url;\n+    }\n+\n+    @Option(option = \"token\", description = \"The API KEY used to authenticate to the API\")\n+    public void setToken(String token) {\n+        this.token = token;\n+    }\n+\n+    @Input\n+    public String getToken() {\n+        return this.token;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+        final DependencySet runtimeDependencies = runtimeConfiguration.getAllDependencies();\n+        final Set<String> packages = new HashSet<>();\n+        final Set<String> nodes = new HashSet<>();\n+        final Set<String> nodeIds = new HashSet<>();\n+        final Set<String> compileOnlyArtifacts = compileOnlyConfiguration.getResolvedConfiguration()\n+            .getResolvedArtifacts()\n+            .stream()\n+            .map(a -> {\n+                ModuleVersionIdentifier id = a.getModuleVersion().getId();\n+                return id.getGroup() + \":\" + id.getName() + \"@\" + id.getVersion();\n+            })\n+            .collect(Collectors.toSet());\n+        for (final Dependency dependency : runtimeDependencies) {\n+            final String id = dependency.getGroup() + \":\" + dependency.getName();\n+            final String versionedId = id + \"@\" + dependency.getVersion();\n+            final StringBuilder packageString = new StringBuilder();\n+            final StringBuilder nodeString = new StringBuilder();\n+            if (compileOnlyArtifacts.contains(versionedId)) {\n+                continue;\n+            }\n+            if (dependency instanceof ProjectDependency) {\n+                continue;\n+            }\n+            packageString.append(\"{\\\"id\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"info\\\": {\\\"name\\\": \\\"\")\n+                .append(id)\n+                .append(\"\\\",\\\"version\\\": \\\"\")\n+                .append(dependency.getVersion())\n+                .append(\"\\\"}}\");\n+            packages.add(packageString.toString());\n+            nodeString.append(\"{\\\"nodeId\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"pkgId\\\": \\\"\")\n+                .append(versionedId)\n+                .append(\"\\\",\\\"deps\\\": []}\");\n+            nodes.add(nodeString.toString());\n+            nodeIds.add(\"{\\\"nodeId\\\": \\\"\" + versionedId + \"\\\"}\");\n+        }\n+        // We add one package and one node for each dependency, it suffices to check packages.\n+        if (packages.size() > 0) {\n+            final String projectName = \"elastic/elasticsearch\" + getProject().getPath();\n+            final StringBuilder output = new StringBuilder();\n+            output.append(\"{\\\"depGraph\\\": {\\\"schemaVersion\\\": \\\"1.2.0\\\",\\\"pkgManager\\\": {\\\"name\\\": \\\"gradle\\\"},\\\"pkgs\\\": [\")\n+                .append(\"{\\\"id\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\", \\\"info\\\": {\\\"name\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"\\\", \\\"version\\\": \\\"0.0.0\\\"}},\")\n+                .append(String.join(\",\", packages))\n+                .append(\"],\\\"graph\\\": {\\\"rootNodeId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"nodes\\\": [\")\n+                .append(\"{\\\"nodeId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"pkgId\\\": \\\"\")\n+                .append(projectName)\n+                .append(\"@0.0.0\")\n+                .append(\"\\\",\\\"deps\\\": [\")\n+                .append(String.join(\",\", nodeIds))\n+                .append(\"]},\")\n+                .append(String.join(\",\", nodes))\n+                .append(\"]}}}\");\n+            getLogger().debug(\"Dependency Graph: \" + output.toString());\n+            try (CloseableHttpClient client = HttpClients.createDefault()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eed49eccf178dad94ea2ef99f3b35b8d8a8ee93"}, "originalPosition": 169}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dae9d6f4f6165f9c5f273c5a8a3fcdffda95b0c8", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/dae9d6f4f6165f9c5f273c5a8a3fcdffda95b0c8", "committedDate": "2020-10-29T21:38:27Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e76307bd6eee0e7fd170064b161864d6f95046f", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/1e76307bd6eee0e7fd170064b161864d6f95046f", "committedDate": "2020-10-29T21:38:31Z", "message": "Merge remote-tracking branch 'origin/master' into snyk-api-task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe11254bfcd995a77ef47a4cd153a1ffc720bd56", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe11254bfcd995a77ef47a4cd153a1ffc720bd56", "committedDate": "2020-10-29T21:50:42Z", "message": "add dependency ( how meta.. )"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTQzNDcx", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-520143471", "createdAt": "2020-10-29T22:51:11Z", "commit": {"oid": "fe11254bfcd995a77ef47a4cd153a1ffc720bd56"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo1MToxMlrOHqxa-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo1MToxMlrOHqxa-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMTk2MQ==", "bodyText": "This is just creating a \"dummy\" task on the root build proejct. This logic should in the DependenciesGraphPlugin or DependenciesGraphTask itself.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r514611961", "createdAt": "2020-10-29T22:51:12Z", "author": {"login": "mark-vieira"}, "path": "build.gradle", "diffHunk": "@@ -209,6 +209,14 @@ tasks.register(\"branchConsistency\") {\n   dependsOn \":verifyVersions\", \":verifyBwcTestsEnabled\"\n }\n \n+tasks.register(\"dependenciesGraph\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe11254bfcd995a77ef47a4cd153a1ffc720bd56"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeb78339b4ec45332bf95ca569772eadeeb88dcf", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/eeb78339b4ec45332bf95ca569772eadeeb88dcf", "committedDate": "2020-10-30T19:48:04Z", "message": "Move offline logic to the Task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/bf3a3a7fe12ac72133043698ce7f91955ea29432", "committedDate": "2020-10-30T19:48:41Z", "message": "Merge remote-tracking branch 'origin/master' into snyk-api-task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTE4NzY3", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-521918767", "createdAt": "2020-11-02T19:08:46Z", "commit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTowODo0N1rOHsSEaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMDowOFrOHsSHCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NTQzMg==", "bodyText": "Can we make these properties on the task, and then set them in the plugin?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516195432", "createdAt": "2020-11-02T19:08:47Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private Configuration compileOnlyConfiguration;\n+\n+    @InputFiles\n+    public Configuration getRuntimeConfiguration() {\n+        return runtimeConfiguration;\n+    }\n+\n+    @InputFiles\n+    public Configuration getCompileOnlyConfiguration() {\n+        return compileOnlyConfiguration;\n+    }\n+\n+    public void setRuntimeConfiguration(Configuration runtimeConfiguration) {\n+        this.runtimeConfiguration = runtimeConfiguration;\n+    }\n+\n+    public void setCompileOnlyConfiguration(Configuration compileOnlyConfiguration) {\n+        this.compileOnlyConfiguration = compileOnlyConfiguration;\n+    }\n+\n+    @TaskAction\n+    void generateDependenciesGraph() {\n+\n+        if (getProject().getGradle().getStartParameter().isOffline()) {\n+            throw new GradleException(\"Must run in online mode in order to submit the dependency graph to the SCA service\");\n+        }\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjEwNg==", "bodyText": "Where did we land on this? I thought we decided this could be removed?", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516196106", "createdAt": "2020-11-02T19:10:08Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.elasticsearch.gradle.dependencies.CompileOnlyResolvePlugin;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+public class DependenciesGraphPlugin implements Plugin<Project> {\n+\n+    public void apply(Project project) {\n+        project.getPlugins().apply(CompileOnlyResolvePlugin.class);\n+        TaskProvider<DependenciesGraphTask> depsGraph = project.getTasks().register(\"dependenciesGraph\", DependenciesGraphTask.class);\n+        depsGraph.configure(t -> {\n+            project.getPlugins().withType(JavaPlugin.class, p -> {\n+                t.setRuntimeConfiguration(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));\n+                t.setCompileOnlyConfiguration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf3a3a7fe12ac72133043698ce7f91955ea29432"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/16401875c990e49de1aca2a61bd7c8f1d1dd270a", "committedDate": "2020-11-03T09:08:10Z", "message": "additional feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjk5NDQw", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-522299440", "createdAt": "2020-11-03T09:10:42Z", "commit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMDo0MlrOHslnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMDo0MlrOHslnFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTYwNA==", "bodyText": "I don't see us throwing from other plugins so I'm not sure if this is a good practice or not. I prefer this as it throws a meaningful error instead of the Task failing with \"url is missing\" and \"token is missing\"", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516515604", "createdAt": "2020-11-03T09:10:42Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+public class DependenciesGraphPlugin implements Plugin<Project> {\n+\n+    public void apply(Project project) {\n+        final String url = System.getenv(\"SCA_URL\");\n+        final String token = System.getenv(\"SCA_TOKEN\");\n+        if (null == url || null == token) {\n+            throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c46bb0cd1261cca79a547ceb10de3ac1db3bb0e0", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/c46bb0cd1261cca79a547ceb10de3ac1db3bb0e0", "committedDate": "2020-11-03T09:11:56Z", "message": "Merge remote-tracking branch 'origin/master' into snyk-api-task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMzAxNzQ3", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-522301747", "createdAt": "2020-11-03T09:13:33Z", "commit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMzozNFrOHsltsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMzozNFrOHsltsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNzI5OQ==", "bodyText": "Can we make these properties on the task, and then set them in the plugin?\n\nNot entirely sure if this is what you had in mind. If not, please elaborate on what your suggestion is. I'm not clear on whether or not we should annotate those as Input", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516517299", "createdAt": "2020-11-03T09:13:34Z", "author": {"login": "jkakavas"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphTask.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.artifacts.DependencySet;\n+import org.gradle.api.artifacts.ProjectDependency;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A task to generate a dependency graph of our runtime dependencies and push that via\n+ * an API call to a given endpoint of a SCA tool/service.\n+ * The graph is built according to the specification in https://github.com/snyk/dep-graph#depgraphdata\n+ *\n+ * Due to the nature of our dependency resolution in gradle, we are abusing the aforementioned graph definition as\n+ * the graph we construct has a single root ( the subproject ) and all dependencies are children of that root,\n+ * irrespective of if they are direct dependencies or transitive ones ( that should be children of other children ).\n+ * Although we end up lacking some contextual information, this allows us to scan and monitor only the dependencies\n+ * that are bundled and used in runtime.\n+ */\n+public class DependenciesGraphTask extends DefaultTask {\n+\n+    private Configuration runtimeConfiguration;\n+    private String token;\n+    private String url;\n+\n+    @Input\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16401875c990e49de1aca2a61bd7c8f1d1dd270a"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c7d3c8ccbc579a130d93334ffd64490aed88ee", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/37c7d3c8ccbc579a130d93334ffd64490aed88ee", "committedDate": "2020-11-03T20:48:45Z", "message": "Throw only when task is to be run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e", "committedDate": "2020-11-03T20:49:04Z", "message": "Merge remote-tracking branch 'origin/master' into snyk-api-task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODg5OTM3", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-522889937", "createdAt": "2020-11-03T21:33:18Z", "commit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozMzoxOVrOHtBOdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozMzoxOVrOHtBOdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODA1NQ==", "bodyText": "Let's make the message \"The environment variables SCA_URL and SCA_TOKEN need to be set before task \" + t.getPath() +\" can run\" as it won't be clear to the user what we mean by \"this task\" w/o that context.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r516968055", "createdAt": "2020-11-03T21:33:19Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -41,5 +38,13 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+\n+        project.getGradle().getTaskGraph().whenReady(graph -> {\n+            if (graph.getAllTasks().stream().anyMatch(t -> t instanceof DependenciesGraphTask)) {\n+                if (url == null || token == null) {\n+                    throw new GradleException(\"The environment variables SCA_URL and SCA_TOKEN need to be set before this task is run\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfba293f1ba87be245a29ef1b2a98c8a2fa6dc5e"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279930900caf41b425d096127e5ea892baa60dde", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/279930900caf41b425d096127e5ea892baa60dde", "committedDate": "2020-11-04T09:15:45Z", "message": "Best effort at printing failing task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d1d5380110309bdc99da5c80a0896f2281fcbe", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/34d1d5380110309bdc99da5c80a0896f2281fcbe", "committedDate": "2020-11-04T09:22:13Z", "message": "line length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72299b078664c9263d5e50b333b2493294dba553", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/72299b078664c9263d5e50b333b2493294dba553", "committedDate": "2020-11-04T09:22:19Z", "message": "line length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "831fe0635aa67a08c1a1aa6ee56892767bef5278", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/831fe0635aa67a08c1a1aa6ee56892767bef5278", "committedDate": "2020-11-09T14:27:40Z", "message": "add a hook plugin and add that to the root project so that it gets evaluated only once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9badab13a99760f6331476fb495a8d32b842f463", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/9badab13a99760f6331476fb495a8d32b842f463", "committedDate": "2020-11-09T14:28:11Z", "message": "Merge remote-tracking branch 'origin/master' into snyk-api-task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a29e4d4a34aa862cf6676190de997f7f934f100e", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/a29e4d4a34aa862cf6676190de997f7f934f100e", "committedDate": "2020-11-09T14:32:36Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2Njk2NDc5", "url": "https://github.com/elastic/elasticsearch/pull/63641#pullrequestreview-526696479", "createdAt": "2020-11-09T22:11:50Z", "commit": {"oid": "a29e4d4a34aa862cf6676190de997f7f934f100e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjoxMTo1MFrOHwDpeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjoxMTo1MFrOHwDpeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MzQ2NA==", "bodyText": "nit: can we do this as the very first line in the apply() method? This is a somewhat unwritten convention.", "url": "https://github.com/elastic/elasticsearch/pull/63641#discussion_r520153464", "createdAt": "2020-11-09T22:11:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/DependenciesGraphPlugin.java", "diffHunk": "@@ -42,22 +42,37 @@ public void apply(Project project) {\n                 t.setUrl(url);\n             });\n         });\n+        project.getRootProject().getPluginManager().apply(DependenciesGraphHookPlugin.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29e4d4a34aa862cf6676190de997f7f934f100e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "156714cc051c541f57fef4bbbe71ce4e3ed3d9de", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/156714cc051c541f57fef4bbbe71ce4e3ed3d9de", "committedDate": "2020-11-12T21:04:52Z", "message": "move statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82601100223f06187417d9284239b34b8e49cebd", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/82601100223f06187417d9284239b34b8e49cebd", "committedDate": "2020-11-12T21:08:13Z", "message": "Merge remote-tracking branch 'origin/master' into snyk-api-task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e99aa30d268663b4956ab99009f2eae1142022b8", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e99aa30d268663b4956ab99009f2eae1142022b8", "committedDate": "2020-11-12T21:16:39Z", "message": "merges are hard"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4142, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}