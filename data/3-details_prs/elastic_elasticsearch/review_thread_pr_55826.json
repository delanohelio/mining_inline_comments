{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzI5NDUy", "number": 55826, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDozMzoxNVrOD24lVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxMDo0OFrOD25hJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODc2NzU4OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDozMzoxNVrOGM2d_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo0ODoxOVrOGNX3ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODUwOQ==", "bodyText": "This should do all the work for returning an empty aggregation. I am not 100% sure pre-pos-Collection is needed. Feedback is very welcome.", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416128509", "createdAt": "2020-04-27T20:33:15Z", "author": {"login": "csoulios"}, "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -499,7 +499,9 @@ protected ScriptService getMockScriptService() {\n             InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer);\n         }\n         if (aggs.isEmpty()) {\n-            return null;\n+            root.preCollection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDUzOA==", "bodyText": "What about just calling aggregator.buildEmptyAggregation? I think this one shouldn't need the pre and post stuff. Probably.", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416150538", "createdAt": "2020-04-27T21:09:26Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -499,7 +499,9 @@ protected ScriptService getMockScriptService() {\n             InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer);\n         }\n         if (aggs.isEmpty()) {\n-            return null;\n+            root.preCollection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODUwOQ=="}, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3NTY5MA==", "bodyText": "aggregator.buildEmptyAggregation() seems to be working fine. thanks!", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416675690", "createdAt": "2020-04-28T14:48:19Z", "author": {"login": "csoulios"}, "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -499,7 +499,9 @@ protected ScriptService getMockScriptService() {\n             InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer);\n         }\n         if (aggs.isEmpty()) {\n-            return null;\n+            root.preCollection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODUwOQ=="}, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODg5MjA1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTowMzo0NlrOGM3myA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTowMzo0NlrOGM3myA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzE0NA==", "bodyText": "Extra newline?", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416147144", "createdAt": "2020-04-27T21:03:46Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorTests.java", "diffHunk": "@@ -155,18 +155,18 @@ public void testMatchAllDocs() throws IOException {\n     public void testNoDocsDeprecatedInterval() throws IOException {\n         Query query = new MatchNoDocsQuery();\n         List<String> dates = Collections.emptyList();\n-        Consumer<DateHistogramAggregationBuilder> aggregation = agg ->\n-                agg.dateHistogramInterval(DateHistogramInterval.YEAR).field(DATE_FIELD);\n-\n-        testSearchCase(query, dates, aggregation,\n-                histogram -> {\n-                    assertEquals(0, histogram.getBuckets().size());\n-                    assertFalse(AggregationInspectionHelper.hasValue(histogram));\n-                }, false\n-        );\n-        testSearchAndReduceCase(query, dates, aggregation,\n-                histogram -> assertNull(histogram), false\n-        );\n+        Consumer<DateHistogramAggregationBuilder>\n+            aggregation =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODg5NjY3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTowNDo1OFrOGM3pew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToyMjo1M1rOGNZjlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ==", "bodyText": "Do we need the < bits?", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416147835", "createdAt": "2020-04-27T21:04:58Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "diffHunk": "@@ -228,31 +228,31 @@ public void testSummationAccuracy() throws IOException {\n \n     public void testUnmappedField() throws IOException {\n         AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"_name\").field(\"number\");\n-        testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {\n+        this.<AvgAggregationBuilder, InternalAvg>testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MzI4OA==", "bodyText": "The < bits are ugly but required, otherwise compile fails. Hence I suggested this:\n#55826 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416153288", "createdAt": "2020-04-27T21:14:06Z", "author": {"login": "csoulios"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "diffHunk": "@@ -228,31 +228,31 @@ public void testSummationAccuracy() throws IOException {\n \n     public void testUnmappedField() throws IOException {\n         AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"_name\").field(\"number\");\n-        testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {\n+        this.<AvgAggregationBuilder, InternalAvg>testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ=="}, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0OTUzMA==", "bodyText": "I see what is up. I wonder if it'd be cleaner to return V instead of take a Consumer<V>. You'd get the implicit cast from assigning it to the result type you wanted. I wonder if that could save us a little ceremony?", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416649530", "createdAt": "2020-04-28T14:16:15Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "diffHunk": "@@ -228,31 +228,31 @@ public void testSummationAccuracy() throws IOException {\n \n     public void testUnmappedField() throws IOException {\n         AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"_name\").field(\"number\");\n-        testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {\n+        this.<AvgAggregationBuilder, InternalAvg>testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ=="}, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwMzM4Mw==", "bodyText": "For every agg test I have created a local private method named testAggregation(). This method converts generic arguments to specific arguments and calls AggregateTestCase.testCase(). I think this is a lot cleaner and simpler.\nPlease check commit 23917bd and let me know what you think.", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416703383", "createdAt": "2020-04-28T15:22:53Z", "author": {"login": "csoulios"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "diffHunk": "@@ -228,31 +228,31 @@ public void testSummationAccuracy() throws IOException {\n \n     public void testUnmappedField() throws IOException {\n         AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"_name\").field(\"number\");\n-        testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {\n+        this.<AvgAggregationBuilder, InternalAvg>testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ=="}, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODkwNjkyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTowNzoxNFrOGM3vQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTowNzoxNFrOGM3vQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTMxNA==", "bodyText": "Maybe rename these so they don't \"hide\" the superclass method and require the casts?", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416149314", "createdAt": "2020-04-27T21:07:14Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java", "diffHunk": "@@ -181,25 +177,9 @@ private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOExceptio\n         testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n \n-    private void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n+    protected void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODkyMDcwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxMDo0OFrOGM33Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToxMDo0OFrOGM33Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MTMzMQ==", "bodyText": "Creating a method with specific (and not generic) arguments is a shortcut that saves us from writing\n   this.<CardinalityAggregationBuilder, InternalCardinality>testCase(.....)\n\nat every test case. This method simply passes the arguments to the generic AggregatorTestCase.testCase() method. I don't have a strong opinion about which option is best and I am happy go with any of the two methods.", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416151331", "createdAt": "2020-04-27T21:10:48Z", "author": {"login": "csoulios"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java", "diffHunk": "@@ -181,25 +177,9 @@ private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOExceptio\n         testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n \n-    private void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n+    protected void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n                           CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalCardinality> verify,\n                           MappedFieldType fieldType) throws IOException {\n-        Directory directory = newDirectory();\n-        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n-        buildIndex.accept(indexWriter);\n-        indexWriter.close();\n-\n-        IndexReader indexReader = DirectoryReader.open(directory);\n-        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n-\n-        CardinalityAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher,\n-            fieldType);\n-        aggregator.preCollection();\n-        indexSearcher.search(query, aggregator);\n-        aggregator.postCollection();\n-        verify.accept((InternalCardinality) aggregator.buildAggregation(0L));\n-\n-        indexReader.close();\n-        directory.close();\n+        super.testCase(aggregationBuilder, query, buildIndex, verify, fieldType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2629, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}