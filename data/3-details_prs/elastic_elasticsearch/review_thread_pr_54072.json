{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTQzMTM2", "number": 54072, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToxNDowOFrODrH2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNDowMVrODrIE3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQzOTE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/BaseSearchableSnapshotIndexInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToxNDowOFrOF7R6iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxNTo1MFrOF77dwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzgxNw==", "bodyText": "I think it'd be better to assert this (inline) in the constructor.", "url": "https://github.com/elastic/elasticsearch/pull/54072#discussion_r397703817", "createdAt": "2020-03-25T09:14:08Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/BaseSearchableSnapshotIndexInput.java", "diffHunk": "@@ -98,4 +85,10 @@ private void ensureValidPosition(long position) {\n             throw new IllegalArgumentException(\"Position [\" + position + \"] is invalid\");\n         }\n     }\n+\n+    boolean assertHashIsNotEqualToContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c2c51cc47e89e56e674127456508a241c0cc07"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NDU3OA==", "bodyText": "Good point", "url": "https://github.com/elastic/elasticsearch/pull/54072#discussion_r398384578", "createdAt": "2020-03-26T08:15:50Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/BaseSearchableSnapshotIndexInput.java", "diffHunk": "@@ -98,4 +85,10 @@ private void ensureValidPosition(long position) {\n             throw new IllegalArgumentException(\"Position [\" + position + \"] is invalid\");\n         }\n     }\n+\n+    boolean assertHashIsNotEqualToContent() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzgxNw=="}, "originalCommit": {"oid": "c3c2c51cc47e89e56e674127456508a241c0cc07"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ2MjE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyMDoxOVrOF7SI-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxODoxN1rOF77i3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNzUxNQ==", "bodyText": "It looks like fileInfo.metadata().hash() is not today a slice of the underlying byte array (i.e. it has zero offset and full length) but I don't think we guarantee that in future. I think we should  pass offset and length to the ByteArrayIndexInput constructor just to be sure.", "url": "https://github.com/elastic/elasticsearch/pull/54072#discussion_r397707515", "createdAt": "2020-03-25T09:20:19Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -221,7 +222,12 @@ public CacheFile getCacheFile(CacheKey cacheKey, long fileLength) throws Excepti\n     @Override\n     public IndexInput openInput(final String name, final IOContext context) throws IOException {\n         ensureOpen();\n+\n         final BlobStoreIndexShardSnapshot.FileInfo fileInfo = fileInfo(name);\n+        if (fileInfo.metadata().hashEqualsContents()) {\n+            return new ByteArrayIndexInput(\"ByteArrayIndexInput(\" + name + ')', fileInfo.metadata().hash().bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c2c51cc47e89e56e674127456508a241c0cc07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NTg4Ng==", "bodyText": "Sure", "url": "https://github.com/elastic/elasticsearch/pull/54072#discussion_r398385886", "createdAt": "2020-03-26T08:18:17Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -221,7 +222,12 @@ public CacheFile getCacheFile(CacheKey cacheKey, long fileLength) throws Excepti\n     @Override\n     public IndexInput openInput(final String name, final IOContext context) throws IOException {\n         ensureOpen();\n+\n         final BlobStoreIndexShardSnapshot.FileInfo fileInfo = fileInfo(name);\n+        if (fileInfo.metadata().hashEqualsContents()) {\n+            return new ByteArrayIndexInput(\"ByteArrayIndexInput(\" + name + ')', fileInfo.metadata().hash().bytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNzUxNQ=="}, "originalCommit": {"oid": "c3c2c51cc47e89e56e674127456508a241c0cc07"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ3Njc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNDowMVrOF7SR9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxNTo1N1rOF77eDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwOTgxMw==", "bodyText": "If we move the assertion to the constructor then this isn't necessary.", "url": "https://github.com/elastic/elasticsearch/pull/54072#discussion_r397709813", "createdAt": "2020-03-25T09:24:01Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -259,25 +257,8 @@ public String toString() {\n     }\n \n     private InputStream openBlobStream(int part, long pos, long length) throws IOException {\n-        final InputStream stream;\n-        if (fileInfo.metadata().hashEqualsContents() == false) {\n-            stream = blobContainer.readBlob(fileInfo.partName(part), pos, length);\n-        } else {\n-            // extract blob content from metadata hash\n-            final BytesRef data = fileInfo.metadata().hash();\n-            if (part > 0) {\n-                assert fileInfo.numberOfParts() >= part;\n-                for (int i = 0; i < part; i++) {\n-                    pos += fileInfo.partBytes(i);\n-                }\n-            }\n-            if ((pos < 0L) || (length < 0L) || (pos + length > data.bytes.length)) {\n-                throw new IllegalArgumentException(\"Invalid arguments (pos=\" + pos + \", length=\" + length\n-                    + \") for hash content (length=\" + data.bytes.length + ')');\n-            }\n-            stream = new ByteArrayInputStream(data.bytes, Math.toIntExact(pos), Math.toIntExact(length));\n-        }\n-        return stream;\n+        assert assertHashIsNotEqualToContent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c2c51cc47e89e56e674127456508a241c0cc07"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NDY1Mg==", "bodyText": "+1", "url": "https://github.com/elastic/elasticsearch/pull/54072#discussion_r398384652", "createdAt": "2020-03-26T08:15:57Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -259,25 +257,8 @@ public String toString() {\n     }\n \n     private InputStream openBlobStream(int part, long pos, long length) throws IOException {\n-        final InputStream stream;\n-        if (fileInfo.metadata().hashEqualsContents() == false) {\n-            stream = blobContainer.readBlob(fileInfo.partName(part), pos, length);\n-        } else {\n-            // extract blob content from metadata hash\n-            final BytesRef data = fileInfo.metadata().hash();\n-            if (part > 0) {\n-                assert fileInfo.numberOfParts() >= part;\n-                for (int i = 0; i < part; i++) {\n-                    pos += fileInfo.partBytes(i);\n-                }\n-            }\n-            if ((pos < 0L) || (length < 0L) || (pos + length > data.bytes.length)) {\n-                throw new IllegalArgumentException(\"Invalid arguments (pos=\" + pos + \", length=\" + length\n-                    + \") for hash content (length=\" + data.bytes.length + ')');\n-            }\n-            stream = new ByteArrayInputStream(data.bytes, Math.toIntExact(pos), Math.toIntExact(length));\n-        }\n-        return stream;\n+        assert assertHashIsNotEqualToContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwOTgxMw=="}, "originalCommit": {"oid": "c3c2c51cc47e89e56e674127456508a241c0cc07"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4161, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}