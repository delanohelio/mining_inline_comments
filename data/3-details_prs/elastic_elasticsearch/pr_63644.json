{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyOTU3MTY0", "number": 63644, "title": "EQL: [Tests] Add correctness integration tests", "bodyText": "Add a new gradle module under eql/qa which runs and validates a set of\nqueries  over a 4m event dataset (restored from a snapshot residing in a\ngcs bucket). The results are providing by running the exact set of queries\nwith Python EQL against the same dataset.", "createdAt": "2020-10-13T23:05:45Z", "url": "https://github.com/elastic/elasticsearch/pull/63644", "merged": true, "mergeCommit": {"oid": "1cf789e5fcfb0f364f665bfaac021e24a4c2f556"}, "closed": true, "closedAt": "2020-10-15T12:35:23Z", "author": {"login": "mark-vieira"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSZZwhAFqTUwODEzODI0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSweH0gH2gAyNTAyOTU3MTY0OmMwMzgxNzMxMzEwOTFjNGNmYjNlYjIyNTdlMjQ3ZmViY2Q5OTlmODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTM4MjQ1", "url": "https://github.com/elastic/elasticsearch/pull/63644#pullrequestreview-508138245", "createdAt": "2020-10-14T09:00:41Z", "commit": {"oid": "75a827feb13d29422d5e09a991a18e780892d8e8"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTowMDo0MlrOHhJRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTowMjoyM1rOHhJWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxNzA1Mg==", "bodyText": "These can be externalized into a properties file.\nThe \"matriv-gcs\" should be changed to something more generic.", "url": "https://github.com/elastic/elasticsearch/pull/63644#discussion_r504517052", "createdAt": "2020-10-14T09:00:42Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/correctness/src/javaRestTest/java/org/elasticsearch/xpack/eql/EsEQLCorrectnessIT.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql;\n+\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite;\n+import org.apache.http.HttpHost;\n+import org.apache.lucene.util.TimeUnits;\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.client.HttpAsyncResponseConsumerFactory;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.eql.EqlSearchRequest;\n+import org.elasticsearch.client.eql.EqlSearchResponse;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.ql.TestUtils.assertNoSearchContexts;\n+\n+@TimeoutSuite(millis = 60 * TimeUnits.MINUTE)\n+public class EsEQLCorrectnessIT extends ESRestTestCase {\n+\n+    private static final String PARAM_FORMATTING = \"%1$s\";\n+    private static final String QUERIES_FILENAME = \"queries.toml\";\n+    private static final String INDEX_NAME = \"mitre\";\n+    private static final int FETCH_SIZE = 10000;\n+    private static final String GCS_REPO_NAME = \"eql_correctness_gcs_repo\";\n+    private static final String SNAPSHOT_NAME = \"mitre-snapshot\";\n+    private static final String GCS_BUCKET_NAME = \"matriv-gcs\";\n+    private static final String GCS_BASE_PATH = \"mitre-data\";\n+    private static final String GCS_CLIENT_NAME = \"eql_test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75a827feb13d29422d5e09a991a18e780892d8e8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxNzkyNg==", "bodyText": "This should be moved into a separate method and be guarded by an if statement for a bool flag which can be turned on/off if needed.", "url": "https://github.com/elastic/elasticsearch/pull/63644#discussion_r504517926", "createdAt": "2020-10-14T09:02:01Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/correctness/src/javaRestTest/java/org/elasticsearch/xpack/eql/EsEQLCorrectnessIT.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql;\n+\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite;\n+import org.apache.http.HttpHost;\n+import org.apache.lucene.util.TimeUnits;\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.client.HttpAsyncResponseConsumerFactory;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.eql.EqlSearchRequest;\n+import org.elasticsearch.client.eql.EqlSearchResponse;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.ql.TestUtils.assertNoSearchContexts;\n+\n+@TimeoutSuite(millis = 60 * TimeUnits.MINUTE)\n+public class EsEQLCorrectnessIT extends ESRestTestCase {\n+\n+    private static final String PARAM_FORMATTING = \"%1$s\";\n+    private static final String QUERIES_FILENAME = \"queries.toml\";\n+    private static final String INDEX_NAME = \"mitre\";\n+    private static final int FETCH_SIZE = 10000;\n+    private static final String GCS_REPO_NAME = \"eql_correctness_gcs_repo\";\n+    private static final String SNAPSHOT_NAME = \"mitre-snapshot\";\n+    private static final String GCS_BUCKET_NAME = \"matriv-gcs\";\n+    private static final String GCS_BASE_PATH = \"mitre-data\";\n+    private static final String GCS_CLIENT_NAME = \"eql_test\";\n+    private static RestHighLevelClient highLevelClient;\n+    private static RequestOptions COMMON_REQUEST_OPTIONS;\n+\n+    @BeforeClass\n+    public static void init() {\n+        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+        builder.setHttpAsyncResponseConsumerFactory(\n+            new HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory(1000 * 1024 * 1024)\n+        );\n+        COMMON_REQUEST_OPTIONS = builder.build();\n+    }\n+\n+    @Before\n+    public void restoreDataFromGcsRepo() throws Exception {\n+        if (client().performRequest(new Request(\"HEAD\", \"/\" + INDEX_NAME)).getStatusLine().getStatusCode() == 404) {\n+            highLevelClient().snapshot()\n+                .createRepository(\n+                    new PutRepositoryRequest(GCS_REPO_NAME).type(\"gcs\")\n+                        .settings(\n+                            Settings.builder()\n+                                .put(\"bucket\", GCS_BUCKET_NAME)\n+                                .put(\"base_path\", GCS_BASE_PATH)\n+                                .put(\"client\", GCS_CLIENT_NAME)\n+                                .build()\n+                        ),\n+                    RequestOptions.DEFAULT\n+                );\n+            highLevelClient().snapshot()\n+                .restore(new RestoreSnapshotRequest(GCS_REPO_NAME, SNAPSHOT_NAME).waitForCompletion(true), RequestOptions.DEFAULT);\n+        }\n+    }\n+\n+    @After\n+    public void checkSearchContent() throws Exception {\n+        assertNoSearchContexts(client());\n+    }\n+\n+    @AfterClass\n+    public static void wipeTestData() throws IOException {\n+        try {\n+            adminClient().performRequest(new Request(\"DELETE\", \"/*\"));\n+        } catch (ResponseException e) {\n+            // 404 here just means we had no indexes\n+            if (e.getResponse().getStatusLine().getStatusCode() != 404) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterUponCompletion() {\n+        // Need to preserve data between parameterized tests runs\n+        return true;\n+    }\n+\n+    @Override\n+    protected RestClient buildClient(Settings settings, HttpHost[] hosts) throws IOException {\n+        RestClientBuilder builder = RestClient.builder(hosts);\n+        configureClient(builder, settings);\n+        builder.setRequestConfigCallback(\n+            requestConfigBuilder -> requestConfigBuilder.setConnectTimeout(30000000)\n+                .setConnectionRequestTimeout(30000000)\n+                .setSocketTimeout(30000000)\n+        );\n+        builder.setStrictDeprecationMode(true);\n+        return builder.build();\n+    }\n+\n+    private EqlSpec spec;\n+\n+    public EsEQLCorrectnessIT(EqlSpec spec) {\n+        this.spec = spec;\n+    }\n+\n+    private RestHighLevelClient highLevelClient() {\n+        if (highLevelClient == null) {\n+            highLevelClient = new RestHighLevelClient(client(), ignore -> {}, Collections.emptyList()) {\n+            };\n+        }\n+        return highLevelClient;\n+    }\n+\n+    @ParametersFactory(shuffle = false, argumentFormatting = PARAM_FORMATTING)\n+    public static Iterable<Object[]> parameters() throws Exception {\n+        Collection<EqlSpec> specs;\n+        try (InputStream is = EsEQLCorrectnessIT.class.getClassLoader().getResourceAsStream(QUERIES_FILENAME)) {\n+            specs = EqlSpecLoader.readFromStream(is);\n+        }\n+        assertFalse(\"Found 0 queries for testing\", specs.isEmpty());\n+\n+        List<Object[]> params = new ArrayList<>(specs.size());\n+        for (EqlSpec spec : specs) {\n+            params.add(new Object[] { spec });\n+        }\n+        return params;\n+    }\n+\n+    public void test() throws Exception {\n+        long totalTime = 0;\n+        int queryNo = spec.queryNo();\n+        /* For debugging\n+        for (int i = 0; i < spec.filters().length; i++) {\n+            String filterQuery = spec.filters()[i];\n+            EqlSearchRequest eqlSearchRequest = new EqlSearchRequest(INDEX_NAME, filterQuery);\n+            eqlSearchRequest.eventCategoryField(\"event_type\");\n+            eqlSearchRequest.size(100000);\n+            EqlSearchResponse response = client.eql().search(eqlSearchRequest, commonRequestOptions);\n+            assertEquals(\"Failed to match filter counts for query No: \" + queryNo + \" filterCount: \" + i,\n+                    spec.filterCounts()[i], response.hits().events().size());\n+        } */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75a827feb13d29422d5e09a991a18e780892d8e8"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxODE2OA==", "bodyText": "These should be extracted as well to constants to make it easy to tweak.", "url": "https://github.com/elastic/elasticsearch/pull/63644#discussion_r504518168", "createdAt": "2020-10-14T09:02:23Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/correctness/src/javaRestTest/java/org/elasticsearch/xpack/eql/EsEQLCorrectnessIT.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql;\n+\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite;\n+import org.apache.http.HttpHost;\n+import org.apache.lucene.util.TimeUnits;\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.client.HttpAsyncResponseConsumerFactory;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.eql.EqlSearchRequest;\n+import org.elasticsearch.client.eql.EqlSearchResponse;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.ql.TestUtils.assertNoSearchContexts;\n+\n+@TimeoutSuite(millis = 60 * TimeUnits.MINUTE)\n+public class EsEQLCorrectnessIT extends ESRestTestCase {\n+\n+    private static final String PARAM_FORMATTING = \"%1$s\";\n+    private static final String QUERIES_FILENAME = \"queries.toml\";\n+    private static final String INDEX_NAME = \"mitre\";\n+    private static final int FETCH_SIZE = 10000;\n+    private static final String GCS_REPO_NAME = \"eql_correctness_gcs_repo\";\n+    private static final String SNAPSHOT_NAME = \"mitre-snapshot\";\n+    private static final String GCS_BUCKET_NAME = \"matriv-gcs\";\n+    private static final String GCS_BASE_PATH = \"mitre-data\";\n+    private static final String GCS_CLIENT_NAME = \"eql_test\";\n+    private static RestHighLevelClient highLevelClient;\n+    private static RequestOptions COMMON_REQUEST_OPTIONS;\n+\n+    @BeforeClass\n+    public static void init() {\n+        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\n+        builder.setHttpAsyncResponseConsumerFactory(\n+            new HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory(1000 * 1024 * 1024)\n+        );\n+        COMMON_REQUEST_OPTIONS = builder.build();\n+    }\n+\n+    @Before\n+    public void restoreDataFromGcsRepo() throws Exception {\n+        if (client().performRequest(new Request(\"HEAD\", \"/\" + INDEX_NAME)).getStatusLine().getStatusCode() == 404) {\n+            highLevelClient().snapshot()\n+                .createRepository(\n+                    new PutRepositoryRequest(GCS_REPO_NAME).type(\"gcs\")\n+                        .settings(\n+                            Settings.builder()\n+                                .put(\"bucket\", GCS_BUCKET_NAME)\n+                                .put(\"base_path\", GCS_BASE_PATH)\n+                                .put(\"client\", GCS_CLIENT_NAME)\n+                                .build()\n+                        ),\n+                    RequestOptions.DEFAULT\n+                );\n+            highLevelClient().snapshot()\n+                .restore(new RestoreSnapshotRequest(GCS_REPO_NAME, SNAPSHOT_NAME).waitForCompletion(true), RequestOptions.DEFAULT);\n+        }\n+    }\n+\n+    @After\n+    public void checkSearchContent() throws Exception {\n+        assertNoSearchContexts(client());\n+    }\n+\n+    @AfterClass\n+    public static void wipeTestData() throws IOException {\n+        try {\n+            adminClient().performRequest(new Request(\"DELETE\", \"/*\"));\n+        } catch (ResponseException e) {\n+            // 404 here just means we had no indexes\n+            if (e.getResponse().getStatusLine().getStatusCode() != 404) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterUponCompletion() {\n+        // Need to preserve data between parameterized tests runs\n+        return true;\n+    }\n+\n+    @Override\n+    protected RestClient buildClient(Settings settings, HttpHost[] hosts) throws IOException {\n+        RestClientBuilder builder = RestClient.builder(hosts);\n+        configureClient(builder, settings);\n+        builder.setRequestConfigCallback(\n+            requestConfigBuilder -> requestConfigBuilder.setConnectTimeout(30000000)\n+                .setConnectionRequestTimeout(30000000)\n+                .setSocketTimeout(30000000)\n+        );\n+        builder.setStrictDeprecationMode(true);\n+        return builder.build();\n+    }\n+\n+    private EqlSpec spec;\n+\n+    public EsEQLCorrectnessIT(EqlSpec spec) {\n+        this.spec = spec;\n+    }\n+\n+    private RestHighLevelClient highLevelClient() {\n+        if (highLevelClient == null) {\n+            highLevelClient = new RestHighLevelClient(client(), ignore -> {}, Collections.emptyList()) {\n+            };\n+        }\n+        return highLevelClient;\n+    }\n+\n+    @ParametersFactory(shuffle = false, argumentFormatting = PARAM_FORMATTING)\n+    public static Iterable<Object[]> parameters() throws Exception {\n+        Collection<EqlSpec> specs;\n+        try (InputStream is = EsEQLCorrectnessIT.class.getClassLoader().getResourceAsStream(QUERIES_FILENAME)) {\n+            specs = EqlSpecLoader.readFromStream(is);\n+        }\n+        assertFalse(\"Found 0 queries for testing\", specs.isEmpty());\n+\n+        List<Object[]> params = new ArrayList<>(specs.size());\n+        for (EqlSpec spec : specs) {\n+            params.add(new Object[] { spec });\n+        }\n+        return params;\n+    }\n+\n+    public void test() throws Exception {\n+        long totalTime = 0;\n+        int queryNo = spec.queryNo();\n+        /* For debugging\n+        for (int i = 0; i < spec.filters().length; i++) {\n+            String filterQuery = spec.filters()[i];\n+            EqlSearchRequest eqlSearchRequest = new EqlSearchRequest(INDEX_NAME, filterQuery);\n+            eqlSearchRequest.eventCategoryField(\"event_type\");\n+            eqlSearchRequest.size(100000);\n+            EqlSearchResponse response = client.eql().search(eqlSearchRequest, commonRequestOptions);\n+            assertEquals(\"Failed to match filter counts for query No: \" + queryNo + \" filterCount: \" + i,\n+                    spec.filterCounts()[i], response.hits().events().size());\n+        } */\n+\n+        EqlSearchRequest eqlSearchRequest = new EqlSearchRequest(INDEX_NAME, spec.query());\n+        eqlSearchRequest.eventCategoryField(\"event_type\");\n+        eqlSearchRequest.tiebreakerField(\"serial_id\");\n+        eqlSearchRequest.size(2000);\n+        eqlSearchRequest.fetchSize(FETCH_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75a827feb13d29422d5e09a991a18e780892d8e8"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDQwNDUy", "url": "https://github.com/elastic/elasticsearch/pull/63644#pullrequestreview-508440452", "createdAt": "2020-10-14T14:58:44Z", "commit": {"oid": "e6c11337abf88314587fa04968b479c269757825"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e5e7f59f986c8a37b47969334ccc6732799cba", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e9e5e7f59f986c8a37b47969334ccc6732799cba", "committedDate": "2020-10-14T19:26:19Z", "message": "EQL: [Tests] Add correctness integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f96f16d946e746030b336ca14eaccca4a00353", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/18f96f16d946e746030b336ca14eaccca4a00353", "committedDate": "2020-10-14T19:26:19Z", "message": "various fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4675c74075a4653c2b58475b172a7435bd4f894a", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/4675c74075a4653c2b58475b172a7435bd4f894a", "committedDate": "2020-10-14T19:26:19Z", "message": "increase timeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c245d96c6b2a1b3fdd714bf377eba5bd57fb6de", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c245d96c6b2a1b3fdd714bf377eba5bd57fb6de", "committedDate": "2020-10-14T19:26:19Z", "message": "fix query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0dfef6fd99aa64168643d9d98a5bba71dc81a78", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/a0dfef6fd99aa64168643d9d98a5bba71dc81a78", "committedDate": "2020-10-14T19:26:19Z", "message": "Externalize credentials file location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e1d5662d741c92776d262c4ee064afdea23017", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/11e1d5662d741c92776d262c4ee064afdea23017", "committedDate": "2020-10-14T19:26:19Z", "message": "use properties file for configuration parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f37fd2b5f2c3cca29960aa7aa11a2e95c5dc9fd", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/6f37fd2b5f2c3cca29960aa7aa11a2e95c5dc9fd", "committedDate": "2020-10-14T19:26:19Z", "message": "enable debugging of subqueries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3172218dbde389142d495404f27f8885c9f3d60", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/f3172218dbde389142d495404f27f8885c9f3d60", "committedDate": "2020-10-14T19:26:19Z", "message": "Reduce required heap size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7f0ffbe77e0f678d096cf7b7bdac6b5e44eff0d", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/f7f0ffbe77e0f678d096cf7b7bdac6b5e44eff0d", "committedDate": "2020-10-14T19:26:19Z", "message": "Comment out failing test query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8908b1a03b0d59550d611cfb706fd2859a2234e", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/d8908b1a03b0d59550d611cfb706fd2859a2234e", "committedDate": "2020-10-14T18:36:39Z", "message": "Comment out failing test query"}, "afterCommit": {"oid": "f7f0ffbe77e0f678d096cf7b7bdac6b5e44eff0d", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/f7f0ffbe77e0f678d096cf7b7bdac6b5e44eff0d", "committedDate": "2020-10-14T19:26:19Z", "message": "Comment out failing test query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3e32ddb5ffa667c545c9c7de0b81460bb1fe0a3", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/d3e32ddb5ffa667c545c9c7de0b81460bb1fe0a3", "committedDate": "2020-10-15T09:21:09Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecbca65b809169d6f0f488b81a43175f17d22476", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/ecbca65b809169d6f0f488b81a43175f17d22476", "committedDate": "2020-10-15T09:21:25Z", "message": "Merge remote-tracking branch 'upstream/master' into eql-correctness-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c038173131091c4cfb3eb2257e247febcd999f80", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/c038173131091c4cfb3eb2257e247febcd999f80", "committedDate": "2020-10-15T11:56:13Z", "message": "fix docs and log of query execution time"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4151, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}