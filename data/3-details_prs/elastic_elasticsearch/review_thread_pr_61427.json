{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzA3Njc5", "number": 61427, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0ODo1MVrOEbrchg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1Nzo0OVrOEp3bKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU4ODIyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0ODo1MVrOHFv7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo1MDo1OFrOHGWhVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MDE1Mg==", "bodyText": "can you add a test for yaml too ?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r475790152", "createdAt": "2020-08-24T17:48:51Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,57 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMjQ4Nw==", "bodyText": "will do", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r476422487", "createdAt": "2020-08-25T12:50:58Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,57 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MDE1Mg=="}, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY4NjQwOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNDo1NVrOHGh3HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTowMToxN1rOHJ8eEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODI4NQ==", "bodyText": "Regex needs a few more escapes:\n\nEscape the . within vnd.elasticsearch+\nEscape the / between the type and subtype\n\n(application|text)\\\\/(vnd\\\\.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r476608285", "createdAt": "2020-08-25T17:14:55Z", "author": {"login": "sethmlarson"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4NTY2Mg==", "bodyText": "Something I am curious about is the (\\\\d+))? at the end. If possible, it would be nice to define this as part of our \"spec\". This would be something we could be strict (eschew leniency!) about, such as enforcing it to be in a specific format (and throwing an exception when someone specifies a pattern that is not correct. We can also put the format into the documentation.\nIf you agree with the sentiment, I would be curious what we expect the final number to be, for example, which of these do we intend to support (now and in the future):\n\ncompatible-with=7\ncompatible-with=7.11\ncompatible-with=7.x\ncompatible-with=7x\ncompatible-with=7.11.2\n\nThen I think we should make this strict so users find out early if they've send an illegal value", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r476785662", "createdAt": "2020-08-25T22:08:47Z", "author": {"login": "dakrone"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODI4NQ=="}, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMzQxOA==", "bodyText": "@sethmlarson Why does the forward slash needs escaping? It's not special in Java?\nI wondering if we should anchor the pattern with ^ at the start and $ at the end, to be on the safe side?\nIn ([^;]+)(\\\\s*;, the [^;]+ will also consume whitespace, so I believe you can remove the \\\\s*.\nCan we switch any of these capture groups to non-capturing if we don't actually need the contents, just the grouping? i.e (?:<pattern>)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r477423418", "createdAt": "2020-08-26T16:15:59Z", "author": {"login": "pugnascotia"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODI4NQ=="}, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMDMyNg==", "bodyText": "@pugnascotia You're right the / doesn't need an escape in Java", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r477430326", "createdAt": "2020-08-26T16:26:59Z", "author": {"login": "sethmlarson"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODI4NQ=="}, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4OTk2OQ==", "bodyText": "@sethmlarson fixed the \\\\.\n@dakrone Only major versions are supported, hence only digits are allowed - representing the major part of the version #51816 (no dots or any other character, preventing parsing minor version)\nGood point on validation - how much should be done, how precise the exception should be.. @jakelandis or @jaymode  any views on this?\n@pugnascotia good point on consuming a space. The subtype (json, yaml, etc) are not allowing spaces. Added the anchoring and skipped capturing when possible. I think all of the groups require capturing though (except maybe for the optional ; charset=UTF-8)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r480189969", "createdAt": "2020-08-31T15:01:17Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODI4NQ=="}, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTkyNDMyOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo0Nzo1MlrOHHe6Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjoxNDozM1rOHJ2Uuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwODQ3OA==", "bodyText": "(vnd.elasticsearch\\+)?\n\nAm I reading this correctly that the vnd.elasticsearch part is completely optional? I thought the intent was to only add compatible-with when vnd.elasticsearch is present?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r477608478", "createdAt": "2020-08-26T21:47:52Z", "author": {"login": "rjernst"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4OTI3NQ==", "bodyText": "you are right. This is possibly a bit oversimplified.\nDo you think we should aim to be more strict on the regex side or should we validate the values after the parsing with more relaxed regex?\nThe more strict could look like\nPattern.compile(\n        \"(application|text)/((vnd\\\\.elasticsearch\\\\+(json|smile|yaml|cbor)(\\\\s*;\\\\s*compatible-with=(\\\\d+)))\" +\n            \"|(json|smile|yaml|cbor))\");\n\nthere is a simplistic validation in parseVerion method, but it still allows to add compatible-with even when subtype vnd.elasticsearch is not present. The version won't be parsed though", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r480089275", "createdAt": "2020-08-31T12:14:33Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,19 @@ public XContent xContent() {\n         }\n     };\n \n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+        \"(application|text)/(vnd.elasticsearch\\\\+)?([^;]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+))?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwODQ3OA=="}, "originalCommit": {"oid": "7514d87cbc1269be095ebcf77e586fc20e67849e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDUxOTU5OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDozOTo1NlrOHLyaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxODoxMFrOHL0aGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMjMyNA==", "bodyText": "why do we allow */* to be JSON?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482122324", "createdAt": "2020-09-02T14:39:56Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -130,7 +154,7 @@ public static XContentType fromMediaTypeOrFormat(String mediaType) {\n             }\n         }\n         final String lowercaseMediaType = mediaType.toLowerCase(Locale.ROOT);\n-        if (lowercaseMediaType.startsWith(\"application/*\")) {\n+        if (lowercaseMediaType.startsWith(\"application/*\") || lowercaseMediaType.equals(\"*/*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1NTAzMw==", "bodyText": "I incorrectly read the SQL test, will remove", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482155033", "createdAt": "2020-09-02T15:18:10Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -130,7 +154,7 @@ public static XContentType fromMediaTypeOrFormat(String mediaType) {\n             }\n         }\n         final String lowercaseMediaType = mediaType.toLowerCase(Locale.ROOT);\n-        if (lowercaseMediaType.startsWith(\"application/*\")) {\n+        if (lowercaseMediaType.startsWith(\"application/*\") || lowercaseMediaType.equals(\"*/*\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMjMyNA=="}, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU0OTc4OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo0NjoxNFrOHLytYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyMDo1MFrOHL0h3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNzIwMg==", "bodyText": "I think the charset aspect should be handled separately since we haven't deprecated accepting other charsets yet, see #22769", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482127202", "createdAt": "2020-09-02T14:46:14Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+            //type\n+        \"^(application|text)/\" +\n+            // custom subtype and a version: vnd.elasticsearch+json;compatible-with=7\n+            \"((vnd\\\\.elasticsearch\\\\+([^;\\\\s]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+)))\" +\n+            \"|([^;\\\\s]+))\" + //subtype: json,yaml,etc some of these are defined in x-pack so can't be enumerated\n+            \"(?:\\\\s*;\\\\s*(charset=UTF-8)?)?$\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1NzAyMA==", "bodyText": "good point. What is more there could other parameters which we do not expect from server perspective.\nSQL for instance has header=absent parameter\nSo this should either be any text or a sequence of ; key=value", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482157020", "createdAt": "2020-09-02T15:20:50Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+            //type\n+        \"^(application|text)/\" +\n+            // custom subtype and a version: vnd.elasticsearch+json;compatible-with=7\n+            \"((vnd\\\\.elasticsearch\\\\+([^;\\\\s]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+)))\" +\n+            \"|([^;\\\\s]+))\" + //subtype: json,yaml,etc some of these are defined in x-pack so can't be enumerated\n+            \"(?:\\\\s*;\\\\s*(charset=UTF-8)?)?$\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNzIwMg=="}, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU3NzkzOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1MTo1OFrOHLy_ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyMTo1NVrOHL0lLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMTgxMg==", "bodyText": "since this hack is not in this PR can we make this pkg private for now?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482131812", "createdAt": "2020-09-02T14:51:58Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -157,6 +183,30 @@ public static XContentType fromMediaType(String mediaType) {\n         return null;\n     }\n \n+    //public scope needed for text formats hack", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1Nzg3MA==", "bodyText": "this possibly was a stale comment - removed and changed to package private", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482157870", "createdAt": "2020-09-02T15:21:55Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -157,6 +183,30 @@ public static XContentType fromMediaType(String mediaType) {\n         return null;\n     }\n \n+    //public scope needed for text formats hack", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMTgxMg=="}, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU4MTM3OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1Mjo0MVrOHLzBgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1Mjo0MVrOHLzBgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMjM1NA==", "bodyText": "let's remove this since it is now commented out", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482132354", "createdAt": "2020-09-02T14:52:41Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+    private static final Pattern COMPATIBLE_API_HEADER_PATTERN = Pattern.compile(\n+            //type\n+        \"^(application|text)/\" +\n+            // custom subtype and a version: vnd.elasticsearch+json;compatible-with=7\n+            \"((vnd\\\\.elasticsearch\\\\+([^;\\\\s]+)(\\\\s*;\\\\s*compatible-with=(\\\\d+)))\" +\n+            \"|([^;\\\\s]+))\" + //subtype: json,yaml,etc some of these are defined in x-pack so can't be enumerated\n+            \"(?:\\\\s*;\\\\s*(charset=UTF-8)?)?$\",\n+        Pattern.CASE_INSENSITIVE);\n+\n+\n+    /*Pattern.compile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433de741d264768174cd95a9475d77cc0d41f247"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTc3MDMwOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzoyMTo1N1rOHMmUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1MjoxN1rOHMnoOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3MjczMg==", "bodyText": "elasticserach broke my eyes", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482972732", "createdAt": "2020-09-03T13:21:57Z", "author": {"login": "tlrx"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51467e0ea1d8af04da4c4f5eac3449a3a40da9e6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NDIzMw==", "bodyText": "sorry for this :D fixed", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r482994233", "createdAt": "2020-09-03T13:52:17Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,13 +116,35 @@ public XContent xContent() {\n         }\n     };\n \n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticserach subtype and a compatible-with parameter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3MjczMg=="}, "originalCommit": {"oid": "51467e0ea1d8af04da4c4f5eac3449a3a40da9e6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTU0MjU0OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxNDo1MFrOHUIt-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowMjo1NVrOHVaUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA==", "bodyText": "for the discussion:\ndefining versioned media types up front, means that we won't throw an exception if someone specifies it with oss licence\nif he uses oss on v8 server for api that was removed and provides application/vnd.elasticsearch+json;compatible-with=7 he will get a 404\nis there an easy way to make XContentType plugin aware? or licence aware?\nor are we ok with allowing to use versioned media types with oss?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490876410", "createdAt": "2020-09-18T11:14:50Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3NTM4Mw==", "bodyText": "I think a 404 (or maybe 400) is the right thing to do here since the infrastructure for version support is in OSS and we do not have a compatible handler for V7.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490975383", "createdAt": "2020-09-18T14:09:01Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwMzc3NQ==", "bodyText": "but this also would affect plugins like SQL. In oss we don't know about MediaTypes which are defined over there\nif we throw an exception for a unknown type I am worried we might end up with a logic based on exceptions\ntry XContentType.parseMediaType\ntry XContentType.parseFormat\ntry TextFormat.parseMediaType\ntry TextFormat.parseFormat\n\n@bpintea any thoughts on this? I guess SQL had to face this in the past", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r491903775", "createdAt": "2020-09-21T09:28:58Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyMTg1Ng==", "bodyText": "Is there any way to register a custom parser ? or just add the SQL values to the core parser and specificy which rule set to use when parsing ?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492121856", "createdAt": "2020-09-21T15:01:57Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzQxMQ==", "bodyText": "that is an interesting idea.. We could have something like a SqlMediaTypeParser and it would either return TextFormat or XContentType. The parsing logic would remain the same in the MediaTypeParser. The idea of SqlMediaTypeParser woudl be just to abstract on the setup of the parser.\nThe same could be done for CompatibleApiMediaTypeParser and we could keep it in xpack plugin.\nthis does not solve the problem of trying to parse a format, then if failed to parse a media type. I think we should try to just check for presence of the format parameter and if present to used. Otherwise trying to use Accept Header.\nI think also that Content-Type should not be used for response formatting in SQL plugin. It looks like it is allowed in code, but I don't think it would work (it would fail when parsing that header in server)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492213411", "createdAt": "2020-09-21T17:02:55Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -112,10 +113,25 @@ public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n     };\n-\n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    /**\n+     * A regexp to allow parsing media types. It covers two use cases.\n+     * 1. Media type with a version - requires a custom vnd.elasticsearch subtype and a compatible-with parameter\n+     * i.e. application/vnd.elasticsearch+json;compatible-with\n+     * 2. Media type without a version - for users not using compatible API i.e. application/json\n+     */\n+     private static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/*\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/x-ndjson\", JSON, Map.of(\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+smile\", SMILE, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+yaml\", YAML, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+cbor\", CBOR, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+x-ndjson\", JSON, Map.of(\"compatible-with\", \"\\\\d+\",\"charset\", \"UTF-8\"))\n+        .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjQxMA=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjE1NTY2OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowMzowMlrOHUOhgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjowMzo0NVrOHZpxCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MTUyMQ==", "bodyText": "I suggest that we benchmark this with a JMH microbenchmark (separately) with a variety of different content types and parameters", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490971521", "createdAt": "2020-09-18T14:03:02Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -65,8 +51,10 @@ public T fromFormat(String format) {\n \n     /**\n      * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     *\n      * @param headerValue a header value from Accept or Content-Type\n      * @return a parsed media-type\n+     * //todo pg should this all be maybe based on a regex?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MDc0Ng==", "bodyText": "I wrote a benchmark and regex approach is slower. I does cover more (the exact characters allowed by rfc) but not sure we need this. See the implementation:\nhttps://github.com/pgomulka/elasticsearch/blob/compat/benchmark_regex_vs_splits/benchmarks/src/main/java/org/elasticsearch/benchmark/MediaTypeParsingBenchmark.java\nhttps://github.com/pgomulka/elasticsearch/blob/compat/benchmark_regex_vs_splits/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParserRegex.java\nBenchmark                                     Mode  Cnt  Score   Error  Units\nMediaTypeParsingBenchmark.parseIter           avgt   30  0.801 \u00b1 0.010  us/op\nMediaTypeParsingBenchmark.parseIterNoParams   avgt   30  0.200 \u00b1 0.002  us/op\nMediaTypeParsingBenchmark.parseRegex          avgt   30  1.639 \u00b1 0.012  us/op\nMediaTypeParsingBenchmark.parseRegexNoParams  avgt   30  0.504 \u00b1 0.011  us/op", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496660746", "createdAt": "2020-09-29T12:03:45Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -65,8 +51,10 @@ public T fromFormat(String format) {\n \n     /**\n      * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     *\n      * @param headerValue a header value from Accept or Content-Type\n      * @return a parsed media-type\n+     * //todo pg should this all be maybe based on a regex?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MTUyMQ=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjE1ODk0OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowMzo0NFrOHUOjXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowMzo0NFrOHUOjXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MTk5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(parametersMap.containsKey(typeWithSubtype)){\n          \n          \n            \n                    if (parametersMap.containsKey(typeWithSubtype)) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490971997", "createdAt": "2020-09-18T14:03:44Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -96,6 +91,17 @@ public ParsedMediaType parseMediaType(String headerValue) {\n         return null;\n     }\n \n+    private boolean isValidParameter(String typeWithSubtype, String parameterName, String parameterValue) {\n+        if(parametersMap.containsKey(typeWithSubtype)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjE1OTc0OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowMzo1NlrOHUOj1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowMzo1NlrOHUOj1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MjExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(parameters.containsKey(parameterName)){\n          \n          \n            \n                        if (parameters.containsKey(parameterName)) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490972116", "createdAt": "2020-09-18T14:03:56Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -96,6 +91,17 @@ public ParsedMediaType parseMediaType(String headerValue) {\n         return null;\n     }\n \n+    private boolean isValidParameter(String typeWithSubtype, String parameterName, String parameterValue) {\n+        if(parametersMap.containsKey(typeWithSubtype)){\n+            Map<String, String> parameters = parametersMap.get(typeWithSubtype);\n+            if(parameters.containsKey(parameterName)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjE2ODk5OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowNjoxMVrOHUOpjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNToxMDoxOFrOHURN8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MzU4Mw==", "bodyText": "We should compile the regex into a pattern to avoid doing it everytime", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490973583", "createdAt": "2020-09-18T14:06:11Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -96,6 +91,17 @@ public ParsedMediaType parseMediaType(String headerValue) {\n         return null;\n     }\n \n+    private boolean isValidParameter(String typeWithSubtype, String parameterName, String parameterValue) {\n+        if(parametersMap.containsKey(typeWithSubtype)){\n+            Map<String, String> parameters = parametersMap.get(typeWithSubtype);\n+            if(parameters.containsKey(parameterName)){\n+                String regex = parameters.get(parameterName);\n+                return parameterValue.matches(regex);//todo pg should we precompile regex?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNTY2Nw==", "bodyText": "will do", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r491015667", "createdAt": "2020-09-18T15:10:18Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -96,6 +91,17 @@ public ParsedMediaType parseMediaType(String headerValue) {\n         return null;\n     }\n \n+    private boolean isValidParameter(String typeWithSubtype, String parameterName, String parameterValue) {\n+        if(parametersMap.containsKey(typeWithSubtype)){\n+            Map<String, String> parameters = parametersMap.get(typeWithSubtype);\n+            if(parameters.containsKey(parameterName)){\n+                String regex = parameters.get(parameterName);\n+                return parameterValue.matches(regex);//todo pg should we precompile regex?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MzU4Mw=="}, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjE4MTM1OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowOToxOVrOHUOxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDowOToxOVrOHUOxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3NTU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(parsedMediaType != null) {\n          \n          \n            \n                    if (parsedMediaType != null) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490975562", "createdAt": "2020-09-18T14:09:19Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -137,13 +153,23 @@ public static XContentType fromMediaType(String mediaTypeHeaderValue) {\n         return mediaTypeParser.fromMediaType(mediaTypeHeaderValue);\n     }\n \n-\n     private int index;\n \n     XContentType(int index) {\n         this.index = index;\n     }\n \n+    public static Byte parseVersion(String mediaType) {\n+        MediaTypeParser<XContentType>.ParsedMediaType parsedMediaType = mediaTypeParser.parseMediaType(mediaType);\n+        if(parsedMediaType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjIwODQwOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNTo0NFrOHUPB7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNTo0NFrOHUPB7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3OTgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        XContentType.JSON,Map.of(\"compatible-with\",\"\\\\d+\",\n          \n          \n            \n                        \"charset\",\"UTF-8\"))\n          \n          \n            \n                        XContentType.JSON, Map.of(\"compatible-with\", \"\\\\d+\",\n          \n          \n            \n                        \"charset\", \"UTF-8\"))", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490979821", "createdAt": "2020-09-18T14:15:44Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java", "diffHunk": "@@ -29,37 +29,42 @@\n import static org.hamcrest.Matchers.nullValue;\n \n public class MediaTypeParserTests extends ESTestCase {\n-    MediaTypeParser<XContentType> mediaTypeParser = XContentType.mediaTypeParser;\n+\n+    MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/vnd.elasticsearch+json\",\n+            XContentType.JSON,Map.of(\"compatible-with\",\"\\\\d+\",\n+            \"charset\",\"UTF-8\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjIxMTgyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNjoyN1rOHUPD_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNjoyN1rOHUPD_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4MDM0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),\n          \n          \n            \n                    assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version + \".0\"),", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490980348", "createdAt": "2020-09-18T14:16:27Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n+\n+        assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjIxNzc4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNzo0MlrOHUPHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNzo0MlrOHUPHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4MTI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\".0\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\"_sth\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version+\"_sth\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version + \".0\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version + \"_sth\"), nullValue());\n          \n          \n            \n                    assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version + \"_sth\"), nullValue());", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490981271", "createdAt": "2020-09-18T14:17:42Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n+\n+        assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testUnrecognizedParameter() {\n+        assertThat(XContentType.parseVersion(\"application/json; sth=123\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testMediaTypeWithoutESSubtype() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version), nullValue());\n+    }\n+\n+    public void testAnchoring(){\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\".0\"), nullValue());\n+        assertThat(XContentType.fromMediaType(\"sth_application/json;compatible-with=\" + version+\"_sth\"), nullValue());\n+        assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version+\"_sth\"), nullValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjIxODczOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNzo1MlrOHUPIHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxNzo1MlrOHUPIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4MTQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testAnchoring(){\n          \n          \n            \n                public void testAnchoring() {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490981407", "createdAt": "2020-09-18T14:17:52Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n+\n+        assertThat(XContentType.parseVersion(\"application/json;compatible-with=\" + version+\".0\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testUnrecognizedParameter() {\n+        assertThat(XContentType.parseVersion(\"application/json; sth=123\"),\n+            is(nullValue()));\n+    }\n+\n+    public void testMediaTypeWithoutESSubtype() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/json;compatible-with=\" + version), nullValue());\n+    }\n+\n+    public void testAnchoring(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04af650551c1522c8300830be2c3c754dad1759"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjI0NDA1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyMzoxMVrOHUPXlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyMzoxMVrOHUPXlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NTM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte version = (byte)Math.abs(randomByte());\n          \n          \n            \n                    byte version = (byte) Math.abs(randomByte());", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490985364", "createdAt": "2020-09-18T14:23:11Z", "author": {"login": "jaymode"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,66 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(XContentType.CBOR));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(XContentType.SMILE));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+yaml;compatible-with=\" + version),\n+            equalTo(XContentType.YAML));\n+        assertThat(XContentType.fromMediaType(\"application/json\"),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+x-ndjson;compatible-with=\" + version),\n+            equalTo(XContentType.JSON));\n+\n+\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(XContentType.JSON));\n+        assertThat(XContentType.fromMediaType(\"APPLICATION/JSON\"),\n+            equalTo(XContentType.JSON));\n+    }\n+\n+    public void testVersionParsing() {\n+        byte version = (byte)Math.abs(randomByte());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjI1ODEwOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyNjoyN1rOHUPgYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyNjoyN1rOHUPgYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NzYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n          \n          \n            \n                                    if (isValidParameter(typeWithSubtype, parameterName, parameterValue) == false) {", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490987616", "createdAt": "2020-09-18T14:26:27Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjI2NTQ3OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyODoyNFrOHUPlHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTowODoxN1rOHaiTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA==", "bodyText": "should we throw an exception here? Maybe one that returns a 400 since the parameter is invalid", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490988828", "createdAt": "2020-09-18T14:28:24Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzNDgzNQ==", "bodyText": "but should it only be here? or should we throw exceptions in other places where we return null.\nI think we should throw an exception when a media type does not conform to rfc\nbut if we don't know about the requested media type I think it might cause problems in code at the moment (we rely on checking if parsing returned null and then try a different method. See https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java#L100", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r491934835", "createdAt": "2020-09-21T10:18:45Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwODUwOA==", "bodyText": "I think we should throw an exception here that results in a 400 (either due to non-conformance with RFC or our own definition of what is supported).  Since we are very explicit about what is supported (as of this PR), we should throw the exception as soon we discover something that is not supported. I don't think we should \"fallback\" to use format ... those cases should be handled explicitly.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492108508", "createdAt": "2020-09-21T14:49:32Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4MDMzNQ==", "bodyText": "as mentioned here this PR will not introduce throwing exceptions yet. I will follow up in another PR", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496080335", "createdAt": "2020-09-28T16:27:37Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzOTIwMg==", "bodyText": "Can you log an issue for this ?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r497539202", "createdAt": "2020-09-30T14:07:48Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4NzA3NA==", "bodyText": "done - #63080 will try to gather more details before starting work on it and possibly discussing with the team", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r497587074", "createdAt": "2020-09-30T15:08:17Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -86,7 +76,12 @@ public ParsedMediaType parseMediaType(String headerValue) {\n                         if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n                             return null;\n                         }\n-                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT);\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT);\n+                        if(isValidParameter(typeWithSubtype,parameterName,parameterValue) == false) {\n+                            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgyOA=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjI5MTIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDozNDo0OVrOHUP01w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxMDozN1rOHbzbOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Mjg1NQ==", "bodyText": "I am concerned that having charset with a regex of utf-8 could break someone using sql. This should be checked with the sql team", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490992855", "createdAt": "2020-09-18T14:34:49Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -294,7 +295,11 @@ public String subtype() {\n     private static final String PARAM_HEADER_ABSENT = \"absent\";\n     private static final String PARAM_HEADER_PRESENT = \"present\";\n \n-    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser<>(TextFormat.values());\n+    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser.Builder<TextFormat>()\n+        .withMediaTypeAndParams(PLAIN_TEXT.typeWithSubtype(), PLAIN_TEXT, Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzNTg5OA==", "bodyText": "this only means that a parameter is possible. if it won't be provided it won't fail any validation.\nI asked SQL team about this offline.\n@bpintea  can you confirm that we can expect any of these in SQL? Do you expect any other charsets?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r491935898", "createdAt": "2020-09-21T10:20:56Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -294,7 +295,11 @@ public String subtype() {\n     private static final String PARAM_HEADER_ABSENT = \"absent\";\n     private static final String PARAM_HEADER_PRESENT = \"present\";\n \n-    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser<>(TextFormat.values());\n+    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser.Builder<TextFormat>()\n+        .withMediaTypeAndParams(PLAIN_TEXT.typeWithSubtype(), PLAIN_TEXT, Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Mjg1NQ=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5MzU4OQ==", "bodyText": "Not speaking for SQL, but in general with a lot of clients on Windows, I have seen them send charset=ISO-8859-1 with the Content-Type header and would operate under the assumption that they may also send the charset with the Accept header; nothing in RFC 7231 would prevent that. Additionally, multiple accept headers are allowed so you can wind up with something like:\nAccept: text/plain;charset=\"utf-8\", text/plain;charset=\"ISO-8859-1\"\n\nThere is also the Accept-Charset header which technically should have precedence over the media type parameter in the Accept header. (It is kind of a mess)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492793589", "createdAt": "2020-09-22T14:44:32Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -294,7 +295,11 @@ public String subtype() {\n     private static final String PARAM_HEADER_ABSENT = \"absent\";\n     private static final String PARAM_HEADER_PRESENT = \"present\";\n \n-    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser<>(TextFormat.values());\n+    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser.Builder<TextFormat>()\n+        .withMediaTypeAndParams(PLAIN_TEXT.typeWithSubtype(), PLAIN_TEXT, Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Mjg1NQ=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY0OTUxMQ==", "bodyText": "I think having multiple headers would be beyond the scope of this change. We would also have to support the q factor to understand the preference of clients Accept type.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r493649511", "createdAt": "2020-09-23T14:41:29Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -294,7 +295,11 @@ public String subtype() {\n     private static final String PARAM_HEADER_ABSENT = \"absent\";\n     private static final String PARAM_HEADER_PRESENT = \"present\";\n \n-    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser<>(TextFormat.values());\n+    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser.Builder<TextFormat>()\n+        .withMediaTypeAndParams(PLAIN_TEXT.typeWithSubtype(), PLAIN_TEXT, Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Mjg1NQ=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjE1Mg==", "bodyText": "if it won't be provided it won't fail any validation.\n\nRight, I believe currently the TextFormater simply ignores an Accept-requested charset (that happens to be different than UTF-8). Hasn't been an issue so far, but it might make sense to do something about it at some point.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498916152", "createdAt": "2020-10-02T16:10:37Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -294,7 +295,11 @@ public String subtype() {\n     private static final String PARAM_HEADER_ABSENT = \"absent\";\n     private static final String PARAM_HEADER_PRESENT = \"present\";\n \n-    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser<>(TextFormat.values());\n+    private static final MediaTypeParser<TextFormat> parser = new MediaTypeParser.Builder<TextFormat>()\n+        .withMediaTypeAndParams(PLAIN_TEXT.typeWithSubtype(), PLAIN_TEXT, Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Mjg1NQ=="}, "originalCommit": {"oid": "474eb298470fdb651f9900f050949c738b2cca2c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTU2NDE1OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozNDoxMlrOHVTOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1MjoxMlrOHVZ8XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5NzA2Mw==", "bodyText": "nit: I would suggest to pass a Map<String, Pattern> so that the contract is a bit clearer (not obvious that the value can a regex expression)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492097063", "createdAt": "2020-09-21T14:34:12Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,36 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatMap = new HashMap<>();\n+        private final Map<String, T> typeMap = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeNoParams(String alternativeMediaType, T mediaType) {\n+            typeMap.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatMap.put(mediaType.format(), mediaType);\n+            return this;\n+        }\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, String> paramNameAndValueRegex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNzE5Ng==", "bodyText": "I will have to copy the pattern and create a new one to make sure  case insensitivity is used. I will give a go and see how it works", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492207196", "createdAt": "2020-09-21T16:52:12Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,36 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatMap = new HashMap<>();\n+        private final Map<String, T> typeMap = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeNoParams(String alternativeMediaType, T mediaType) {\n+            typeMap.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatMap.put(mediaType.format(), mediaType);\n+            return this;\n+        }\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, String> paramNameAndValueRegex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5NzA2Mw=="}, "originalCommit": {"oid": "5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTU3MTg3OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozNTo1MFrOHVTTDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozNTo1MFrOHVTTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5ODMxOQ==", "bodyText": "I think you can remove this method in favor of just consumers just passing Colections.emptyMap() (which is how it is currently used).", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r492098319", "createdAt": "2020-09-21T14:35:50Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,36 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatMap = new HashMap<>();\n+        private final Map<String, T> typeMap = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeNoParams(String alternativeMediaType, T mediaType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5853561bb30b1d61aaf3db6b74bd1aa7f43e6ea8"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjcxNTMxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1NzoyN1rOHXQosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyOToxMlrOHY9uqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1MTg1Nw==", "bodyText": "an exception is thrown when parsing so we would not need thisif", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494151857", "createdAt": "2020-09-24T08:57:27Z", "author": {"login": "pgomulka"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "diffHunk": "@@ -1900,9 +1900,9 @@ protected final ElasticsearchStatusException parseResponseException(ResponseExce\n             throw new IllegalStateException(\"Elasticsearch didn't return the [Content-Type] header, unable to parse response body\");\n         }\n         XContentType xContentType = XContentType.fromMediaType(entity.getContentType().getValue());\n-        if (xContentType == null) {\n-            throw new IllegalStateException(\"Unsupported Content-Type: \" + entity.getContentType().getValue());\n-        }\n+//        if (xContentType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzOTI0MQ==", "bodyText": "not throwin exception in this PR", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r495939241", "createdAt": "2020-09-28T13:29:12Z", "author": {"login": "pgomulka"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "diffHunk": "@@ -1900,9 +1900,9 @@ protected final ElasticsearchStatusException parseResponseException(ResponseExce\n             throw new IllegalStateException(\"Elasticsearch didn't return the [Content-Type] header, unable to parse response body\");\n         }\n         XContentType xContentType = XContentType.fromMediaType(entity.getContentType().getValue());\n-        if (xContentType == null) {\n-            throw new IllegalStateException(\"Unsupported Content-Type: \" + entity.getContentType().getValue());\n-        }\n+//        if (xContentType == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1MTg1Nw=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjc3MDMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxMToyNFrOHXRKrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyNzo1MFrOHY9q2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MDU1Ng==", "bodyText": "when parsing returns a supertype to TextFormat and XContentType - MediaType -  it makes it harder to implement these two branches.\ni think we should probably move the formatting behaviour out of TextFormat. It should only implement methods defined on MediaType (the original XContentType methods)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494160556", "createdAt": "2020-09-24T09:11:24Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -107,16 +61,16 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n                 RestResponse restResponse;\n \n                 // XContent branch\n-                if (xContentType != null) {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), xContentType, true);\n+                if (responseMediaType != null && responseMediaType instanceof XContentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzODI2NA==", "bodyText": "leaving this up for discussion. With this approach we can have a single parser that returns both XContentType and TextFormat under MediaType interface\nXContentType does not implement format method. But maybe these two should have a common createRestResponse method?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r495938264", "createdAt": "2020-09-28T13:27:50Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -107,16 +61,16 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n                 RestResponse restResponse;\n \n                 // XContent branch\n-                if (xContentType != null) {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), xContentType, true);\n+                if (responseMediaType != null && responseMediaType instanceof XContentType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MDU1Ng=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjc4NjkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxNTo0M1rOHXRVCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyOTozNVrOHbyD1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MzIwOQ==", "bodyText": "I made a comment to suggest we get rid of using Content-Type to set responseType. However I think most sql queries contain a body, so using a Content-Type to default responseType might be ok.\nIf however a request did not contain a body, then it would not make sense. I don't know we have any SQL api though.\nHowever, this obviously means that only json/cbor/smile/yml are allowed .", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494163209", "createdAt": "2020-09-24T09:15:43Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n+        }\n+        if (request.getHeaders().containsKey(\"Accept\")) {\n+            String accept = request.header(\"Accept\");\n+            // */* means \"I don't care\" which we should treat like not specifying the header\n+            if (\"*/*\".equals(accept) == false) {\n+                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n+            }\n+        }\n+\n+        //todo pg we should probably remove this possibility. it should only be accept or format.\n+        // also if you specify sql's textformat in content type it will fail with exception now\n+        String contentType = request.header(\"Content-Type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyMjQwMA==", "bodyText": "also not fixing this in current PR. might be worth discussing with @elastic/es-ql", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r495922400", "createdAt": "2020-09-28T13:04:55Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n+        }\n+        if (request.getHeaders().containsKey(\"Accept\")) {\n+            String accept = request.header(\"Accept\");\n+            // */* means \"I don't care\" which we should treat like not specifying the header\n+            if (\"*/*\".equals(accept) == false) {\n+                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n+            }\n+        }\n+\n+        //todo pg we should probably remove this possibility. it should only be accept or format.\n+        // also if you specify sql's textformat in content type it will fail with exception now\n+        String contentType = request.header(\"Content-Type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MzIwOQ=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5Mzc4Mg==", "bodyText": "I think most sql queries contain a body\n\nIndeed, all requests concerning this code always contain a body.\n(In the SQL API only one API lacks it, the one for stats inquiring, which won't hit this code tho.)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498893782", "createdAt": "2020-10-02T15:29:35Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", Pattern.compile(\"present|absent\"), \"charset\", Pattern.compile(\"utf-8\")))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n+        }\n+        if (request.getHeaders().containsKey(\"Accept\")) {\n+            String accept = request.header(\"Accept\");\n+            // */* means \"I don't care\" which we should treat like not specifying the header\n+            if (\"*/*\".equals(accept) == false) {\n+                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n+            }\n+        }\n+\n+        //todo pg we should probably remove this possibility. it should only be accept or format.\n+        // also if you specify sql's textformat in content type it will fail with exception now\n+        String contentType = request.header(\"Content-Type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MzIwOQ=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjc5MDgwOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxNjo0NVrOHXRXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzowNDoyMlrOHY8rXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2Mzg2NA==", "bodyText": "this client does not have access to SQL code, but has to support these formats too.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494163864", "createdAt": "2020-09-24T09:16:45Z", "author": {"login": "pgomulka"}, "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java", "diffHunk": "@@ -45,15 +45,21 @@\n \n     private final Response response;\n     private final byte[] body;\n-    private final XContentType bodyContentType;\n+    private XContentType bodyContentType;\n     private ObjectPath parsedResponse;\n     private String bodyAsString;\n \n     public ClientYamlTestResponse(Response response) throws IOException {\n         this.response = response;\n         if (response.getEntity() != null) {\n             String contentType = response.getHeader(\"Content-Type\");\n-            this.bodyContentType = XContentType.fromMediaType(contentType);\n+            // todo pg it feels like there is a lot of 'ifs' around text, csv etc being returned. shouldn't we treat text as the same json and others?\n+            // we are testing sql formats with this client, but don't have access to sql parsing code\n+            try{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyMjAxNQ==", "bodyText": "we are not throwing an exception when parsing in this PR", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r495922015", "createdAt": "2020-09-28T13:04:22Z", "author": {"login": "pgomulka"}, "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java", "diffHunk": "@@ -45,15 +45,21 @@\n \n     private final Response response;\n     private final byte[] body;\n-    private final XContentType bodyContentType;\n+    private XContentType bodyContentType;\n     private ObjectPath parsedResponse;\n     private String bodyAsString;\n \n     public ClientYamlTestResponse(Response response) throws IOException {\n         this.response = response;\n         if (response.getEntity() != null) {\n             String contentType = response.getHeader(\"Content-Type\");\n-            this.bodyContentType = XContentType.fromMediaType(contentType);\n+            // todo pg it feels like there is a lot of 'ifs' around text, csv etc being returned. shouldn't we treat text as the same json and others?\n+            // we are testing sql formats with this client, but don't have access to sql parsing code\n+            try{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2Mzg2NA=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjc5NjQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOToxODoyMFrOHXRbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzowMzo1MVrOHY8qEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2NDc2MQ==", "bodyText": "since parsing is strict and throws an exception when unkown type is used then it requires a lot of \"if guards\" to make sure it will not fail.\nOr it leads to flow being controlled by exceptions -which is bad I think.\nAlso looks to me that text/plain is commonly used as returnType for _cat api. We should probably add it to xcontentType?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494164761", "createdAt": "2020-09-24T09:18:20Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -98,10 +101,17 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n-            responseContentType = XContentType.fromFormat(format);\n-            if (responseContentType == null) {\n-                responseContentType = XContentType.fromMediaType(acceptHeader);\n+            if (Strings.hasText(format)) {\n+                responseContentType = XContentType.fromFormat(format);\n+            } else if (Strings.hasText(acceptHeader) && acceptHeader.equals(\"*/*\") == false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyMTY4MQ==", "bodyText": "not fixing this in current PR. will follow up", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r495921681", "createdAt": "2020-09-28T13:03:51Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -98,10 +101,17 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n-            responseContentType = XContentType.fromFormat(format);\n-            if (responseContentType == null) {\n-                responseContentType = XContentType.fromMediaType(acceptHeader);\n+            if (Strings.hasText(format)) {\n+                responseContentType = XContentType.fromFormat(format);\n+            } else if (Strings.hasText(acceptHeader) && acceptHeader.equals(\"*/*\") == false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2NDc2MQ=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjg2MzQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/BytesRestResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNTozOVrOHXSE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0OToyOVrOHY8E3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NTQ0NA==", "bodyText": "should this be renamed to acceptType?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494175444", "createdAt": "2020-09-24T09:35:39Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/BytesRestResponse.java", "diffHunk": "@@ -83,6 +83,7 @@ public BytesRestResponse(RestStatus status, String contentType, byte[] content)\n     /**\n      * Creates a binary response.\n      */\n+    //todo pg this should probably be acceptType? (2nd param)\n     public BytesRestResponse(RestStatus status, String contentType, BytesReference content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxMjE1OQ==", "bodyText": "renamed.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r495912159", "createdAt": "2020-09-28T12:49:29Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/BytesRestResponse.java", "diffHunk": "@@ -83,6 +83,7 @@ public BytesRestResponse(RestStatus status, String contentType, byte[] content)\n     /**\n      * Creates a binary response.\n      */\n+    //todo pg this should probably be acceptType? (2nd param)\n     public BytesRestResponse(RestStatus status, String contentType, BytesReference content) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NTQ0NA=="}, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjg3MDA1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/http/WaitForHttpResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNzoyNFrOHXSI_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNzoyNFrOHXSI_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NjUwOA==", "bodyText": "this prevents defaulting Accept header to text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 by sun.net.www.protocol.http.HttpURLConnection", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r494176508", "createdAt": "2020-09-24T09:37:24Z", "author": {"login": "pgomulka"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/http/WaitForHttpResource.java", "diffHunk": "@@ -145,6 +145,7 @@ HttpURLConnection buildConnection(SSLContext ssl) throws IOException {\n         configureSslContext(connection, ssl);\n         configureBasicAuth(connection);\n         connection.setRequestMethod(\"GET\");\n+        connection.setRequestProperty(\"Accept\", \"text/plain; charset=UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4b6c38a5869c22b8354e59bf0f7a7aeb1e69f2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTk2MTE4OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDo0OTo1OVrOHZxKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDo0OTo1OVrOHZxKBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc4MTgyOQ==", "bodyText": "remove todo", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496781829", "createdAt": "2020-09-29T14:49:59Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -65,8 +50,10 @@ public T fromFormat(String format) {\n \n     /**\n      * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     *\n      * @param headerValue a header value from Accept or Content-Type\n      * @return a parsed media-type\n+     * //todo pg write a benchmark and consider using a regex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDAyNjM5OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTowMjo0OFrOHZxyrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzowMDo0MVrOHacXtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5MjIzNw==", "bodyText": "I think this is technically non-passive (only supporting UTF-8 encoding) and should probably be mentioned in the breaking changes ... thus only targeting 8.0 and (outside of this PR) ensure that a 7.x server maps the compatible header to standard header ... i.e. (application/vnd.elasticsearch+yaml; compatible-with=7 == application/yaml)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496792237", "createdAt": "2020-09-29T15:02:48Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -113,9 +115,26 @@ public XContent xContent() {\n         }\n     };\n \n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"\\\\d+\");\n+    private static final String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n+     public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNzczNw==", "bodyText": "that's a good point. I think clients will have to upgrade to latest 7.x client to get compatible-with  sent on their request.\nWe should also support that in 7.x server. Will raise an issue/pr", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496917737", "createdAt": "2020-09-29T17:32:54Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -113,9 +115,26 @@ public XContent xContent() {\n         }\n     };\n \n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"\\\\d+\");\n+    private static final String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n+     public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5MjIzNw=="}, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4OTg0Nw==", "bodyText": "handling of versioned media types in a form application/vnd.elasticsearch+json;compatible-with=7 will be handled in this pr #63071", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r497489847", "createdAt": "2020-09-30T13:00:41Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -113,9 +115,26 @@ public XContent xContent() {\n         }\n     };\n \n-    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values(),\n-        Map.of(\"application/*\", JSON, \"application/x-ndjson\", JSON));\n-\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"\\\\d+\");\n+    private static final String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n+     public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser.Builder<XContentType>()\n+        .withMediaTypeAndParams(\"application/smile\", SMILE, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/cbor\", CBOR, Collections.emptyMap())\n+        .withMediaTypeAndParams(\"application/json\", JSON, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))\n+        .withMediaTypeAndParams(\"application/yaml\", YAML, Map.of(\"charset\", Pattern.compile(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5MjIzNw=="}, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDEyNzc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToyMjo0NFrOHZyx1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToyMjo0NFrOHZyx1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwODQwNA==", "bodyText": "Can you also add a small test for (lowercase charset=utf-8)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496808404", "createdAt": "2020-09-29T15:22:44Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -23,6 +23,7 @@\n import java.util.Locale;\n \n import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.nullValue;\n \n public class XContentTypeTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDE3NjAwOnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToyOTo0MlrOHZzOwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNjo0ODowMVrOHaPbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxNTgwOQ==", "bodyText": "can you remove the insensitive recompile here and and just use the pattern as-is (and move the insenstivie up to the declration)", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496815809", "createdAt": "2020-09-29T15:29:42Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,37 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatToMediaType = new HashMap<>();\n+        private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, Pattern> paramNameAndValueRegex) {\n+            typeWithSubtypeToMediaType.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+\n+            Map<String, Pattern> parametersForMediaType = new HashMap<>(paramNameAndValueRegex.size());\n+            for (Map.Entry<String, Pattern> params : paramNameAndValueRegex.entrySet()) {\n+                String parameterName = params.getKey().toLowerCase(Locale.ROOT);\n+                Pattern parameterRegex = params.getValue();\n+                Pattern pattern = Pattern.compile(parameterRegex.pattern(), Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMzA0Mg==", "bodyText": "It would result in a fairly big number of duplication. there are other textual parameters like header (present/absent), delimeter which would also had to declare case insensitivity.\nI wonder if we ever want to support case sensitivity for params values", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496913042", "createdAt": "2020-09-29T17:25:39Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,37 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatToMediaType = new HashMap<>();\n+        private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, Pattern> paramNameAndValueRegex) {\n+            typeWithSubtypeToMediaType.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+\n+            Map<String, Pattern> parametersForMediaType = new HashMap<>(paramNameAndValueRegex.size());\n+            for (Map.Entry<String, Pattern> params : paramNameAndValueRegex.entrySet()) {\n+                String parameterName = params.getKey().toLowerCase(Locale.ROOT);\n+                Pattern parameterRegex = params.getValue();\n+                Pattern pattern = Pattern.compile(parameterRegex.pattern(), Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxNTgwOQ=="}, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5MzUzNw==", "bodyText": "OK ... in that case, maybe go back to a Map<String, String> as the collection passed ?  It is a bit confusing to compile it, then re-compile it.  Sorry, when i first suggested to pass Map<String, Pattern> I had envisioned only compiling once.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r497093537", "createdAt": "2020-09-29T22:19:04Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,37 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatToMediaType = new HashMap<>();\n+        private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, Pattern> paramNameAndValueRegex) {\n+            typeWithSubtypeToMediaType.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+\n+            Map<String, Pattern> parametersForMediaType = new HashMap<>(paramNameAndValueRegex.size());\n+            for (Map.Entry<String, Pattern> params : paramNameAndValueRegex.entrySet()) {\n+                String parameterName = params.getKey().toLowerCase(Locale.ROOT);\n+                Pattern parameterRegex = params.getValue();\n+                Pattern pattern = Pattern.compile(parameterRegex.pattern(), Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxNTgwOQ=="}, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI3NzgwOA==", "bodyText": "agree, will refactor this back. Using the Pattern as a type was making it obvious what that parameter was, but then compiling multiple times is probably not clean.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r497277808", "createdAt": "2020-09-30T06:48:01Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -120,4 +125,37 @@ public T getMediaType() {\n             return parameters;\n         }\n     }\n+\n+    public static class Builder<T extends MediaType> {\n+        private final Map<String, T> formatToMediaType = new HashMap<>();\n+        private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+        private final Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+        public Builder<T> withMediaTypeAndParams(String alternativeMediaType, T mediaType, Map<String, Pattern> paramNameAndValueRegex) {\n+            typeWithSubtypeToMediaType.put(alternativeMediaType.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+\n+            Map<String, Pattern> parametersForMediaType = new HashMap<>(paramNameAndValueRegex.size());\n+            for (Map.Entry<String, Pattern> params : paramNameAndValueRegex.entrySet()) {\n+                String parameterName = params.getKey().toLowerCase(Locale.ROOT);\n+                Pattern parameterRegex = params.getValue();\n+                Pattern pattern = Pattern.compile(parameterRegex.pattern(), Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxNTgwOQ=="}, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDI4MzIxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTo0NTowOFrOHZ0P4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjoyMDo0N1rOHaEObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMjQ4MA==", "bodyText": "can you also add a test that has both compatible-with and charset ?", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496832480", "createdAt": "2020-09-29T15:45:08Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,65 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNjkxMA==", "bodyText": "this specific test is only meant to test versioning. I covered multiple parameters support in MediaTypeParserTests.testJsonWithParameters", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r496916910", "createdAt": "2020-09-29T17:31:28Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,65 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMjQ4MA=="}, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NDI1Mw==", "bodyText": "thanks... i missed that!", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r497094253", "createdAt": "2020-09-29T22:20:47Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -93,4 +94,65 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaType(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaType(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testVersionedMediaType() {\n+        String version = String.valueOf(Math.abs(randomByte()));\n+        assertThat(XContentType.fromMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMjQ4MA=="}, "originalCommit": {"oid": "08f1395ce1f1014d06cefaff9f2722945f761e75"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDAxNjk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMDoxOVrOHbR9fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMDoxOVrOHbR9fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Nzg2OA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                XContentType type = (XContentType)responseMediaType;\n          \n          \n            \n                                XContentType type = (XContentType) responseMediaType;", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498367868", "createdAt": "2020-10-01T16:20:19Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -107,16 +61,16 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n                 RestResponse restResponse;\n \n                 // XContent branch\n-                if (xContentType != null) {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), xContentType, true);\n+                if (responseMediaType != null && responseMediaType instanceof XContentType) {\n+                    XContentType type = (XContentType)responseMediaType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0316054c4a9559ddc5b115b9b5b72999c701649"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDAxOTEzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMDo1NFrOHbR-_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMDo1NFrOHbR-_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2ODI1Mw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } else {// TextFormat\n          \n          \n            \n                            } else { // TextFormat", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498368253", "createdAt": "2020-10-01T16:20:54Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -107,16 +61,16 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n                 RestResponse restResponse;\n \n                 // XContent branch\n-                if (xContentType != null) {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), xContentType, true);\n+                if (responseMediaType != null && responseMediaType instanceof XContentType) {\n+                    XContentType type = (XContentType)responseMediaType;\n+                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), type, true);\n                     response.toXContent(builder, request);\n                     restResponse = new BytesRestResponse(RestStatus.OK, builder);\n-                }\n-                // TextFormat\n-                else {\n-                    final String data = textFormat.format(request, response);\n+                } else {// TextFormat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0316054c4a9559ddc5b115b9b5b72999c701649"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE2MzYyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTowNDo0MFrOHbxKHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoyODoxMlrOHcavVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3OTAwNg==", "bodyText": "Is the delimiter regex derived from TextFormat.CSV#delimiter()? Because it specifies what characters are allowed, inline with what that method checks, on one hand, but allows a count of multiple character, out of line with a check there, on the other.\nThe exception messages in the method are explanatory and I'd ever so slightly prefer to return those (and maybe don't enforce a specific set here), but if you'd still like to enforce the param format in the parser definition, I'd suggest to maybe also limit the char count to one.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498879006", "createdAt": "2020-10-02T15:04:40Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1MTQ3Mg==", "bodyText": "good point, I misread that method. It should only be one character.\nThe exception messages are indeed explanatory in this method. With the parameter validation when parsing, we will loose them - that code will not be reachable as it will fail earlier when parsing", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r499451472", "createdAt": "2020-10-05T09:11:04Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3OTAwNg=="}, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2MDI3Nw==", "bodyText": "I changed this to expect the presence of a delimiter parameter, but the pattern will be .+ which will always pass, and the validation will be done in TextFormat.CSV#delimiter()", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r499560277", "createdAt": "2020-10-05T12:28:12Z", "author": {"login": "pgomulka"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3OTAwNg=="}, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE4NDUxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxMDowOVrOHbxXIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxMDowOVrOHbxXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MjMzNg==", "bodyText": "nit, spacing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (request.hasParam(URL_PARAM_FORMAT)){\n          \n          \n            \n                        return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n          \n          \n            \n                    } else if (request.hasParam(URL_PARAM_FORMAT)) {\n          \n          \n            \n                        return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat(request.param(URL_PARAM_FORMAT)));", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498882336", "createdAt": "2020-10-02T15:10:09Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzIyMDc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyMDoyMlrOHbxung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyMDoyMlrOHbxung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4ODM1MA==", "bodyText": "optional, could be made static.", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498888350", "createdAt": "2020-10-02T15:20:22Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.MediaTypeParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.proto.Protocol.URL_PARAM_FORMAT;\n+\n+public class SqlMediaTypeParser {\n+    private static final MediaTypeParser<? extends MediaType> parser = new MediaTypeParser.Builder<>()\n+        .copyFromMediaTypeParser(XContentType.mediaTypeParser)\n+        .withMediaTypeAndParams(TextFormat.PLAIN_TEXT.typeWithSubtype(), TextFormat.PLAIN_TEXT,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .withMediaTypeAndParams(TextFormat.CSV.typeWithSubtype(), TextFormat.CSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\",\n+                \"delimiter\", \"[^\\\"\\n\\r\\t]+\"))\n+        .withMediaTypeAndParams(TextFormat.TSV.typeWithSubtype(), TextFormat.TSV,\n+            Map.of(\"header\", \"present|absent\", \"charset\", \"utf-8\"))\n+        .build();\n+\n+    /*\n+     * Since we support {@link TextFormat} <strong>and</strong>\n+     * {@link XContent} outputs we can't use {@link RestToXContentListener}\n+     * like everything else. We want to stick as closely as possible to\n+     * Elasticsearch's defaults though, while still layering in ways to\n+     * control the output more easily.\n+     *\n+     * First we find the string that the user used to specify the response\n+     * format. If there is a {@code format} parameter we use that. If there\n+     * isn't but there is a {@code Accept} header then we use that. If there\n+     * isn't then we use the {@code Content-Type} header which is required.\n+     */\n+    public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n+\n+        if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n+            && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n+            // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n+            return XContentType.CBOR;\n+        } else if (request.hasParam(URL_PARAM_FORMAT)){\n+            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat( request.param(URL_PARAM_FORMAT)));\n+        }\n+        if (request.getHeaders().containsKey(\"Accept\")) {\n+            String accept = request.header(\"Accept\");\n+            // */* means \"I don't care\" which we should treat like not specifying the header\n+            if (\"*/*\".equals(accept) == false) {\n+                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n+            }\n+        }\n+\n+        String contentType = request.header(\"Content-Type\");\n+        assert contentType != null : \"The Content-Type header is required\";\n+        return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(contentType));\n+    }\n+\n+    private MediaType validateColumnarRequest(boolean requestIsColumnar, MediaType fromMediaType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM1MTQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParserTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1Nzo0OVrOHbzBdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1Nzo0OVrOHbzBdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwOTU1Ng==", "bodyText": "Since the methods only tests media type correct detection - i.e. the other parameters in the Accept aren't analysed by SqlMediaTypeParser, nor tested here, right? -, I would maybe propose to rename it (testMediaTypeDetection or similar?).\n(Slightly off-topic, the header parameter will need a rework or removal, as per #60271, but that's not the object of this PR).", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r498909556", "createdAt": "2020-10-02T15:57:49Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParserTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.sql.plugin;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.MediaType;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.xpack.sql.action.SqlQueryRequest;\n+import org.elasticsearch.xpack.sql.proto.Mode;\n+import org.elasticsearch.xpack.sql.proto.RequestInfo;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.sql.plugin.TextFormat.CSV;\n+import static org.elasticsearch.xpack.sql.plugin.TextFormat.PLAIN_TEXT;\n+import static org.elasticsearch.xpack.sql.plugin.TextFormat.TSV;\n+import static org.elasticsearch.xpack.sql.proto.RequestInfo.CLIENT_IDS;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+\n+public class SqlMediaTypeParserTests extends ESTestCase {\n+    SqlMediaTypeParser parser = new SqlMediaTypeParser();\n+\n+    public void testPlainTextDetection() {\n+        MediaType text = parser.getMediaType(reqWithAccept(\"text/plain\"), createTestInstance(false, Mode.PLAIN, false));\n+        assertThat(text, is(PLAIN_TEXT));\n+    }\n+\n+    public void testCsvDetection() {\n+        MediaType text = parser.getMediaType(reqWithAccept(\"text/csv\"), createTestInstance(false, Mode.PLAIN, false));\n+        assertThat(text, is(CSV));\n+    }\n+\n+    public void testTsvDetection() {\n+        MediaType text = parser.getMediaType(reqWithAccept(\"text/tab-separated-values\"), createTestInstance(false, Mode.PLAIN, false));\n+        assertThat(text, is(TSV));\n+    }\n+\n+    public void testParametersParsing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4134d92ef9ea93c205746bc2f5031ee40c1d579e"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 780, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}