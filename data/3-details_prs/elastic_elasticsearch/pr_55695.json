{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MTgyOTIz", "number": 55695, "title": "Add new circuitbreaker plugin and refactor CircuitBreakerService", "bodyText": "This commit lays the ground work for plugins supplying their own circuit breakers.\nIt adds a new interface: CircuitBreakerPlugin.\nThis interface provides methods for providing custom child CircuitBreaker objects. There are also facilities for allowing dynamic settings for the custom breakers.\nWith the refactor, circuit breakers are no longer replaced on setting changes. Instead, the two mutable settings themselves are volatile. Plugins that want to use their custom circuit breaker should keep a reference of their constructed breaker.", "createdAt": "2020-04-23T20:40:39Z", "url": "https://github.com/elastic/elasticsearch/pull/55695", "merged": true, "mergeCommit": {"oid": "f0e2086e69ae0a5d00da3080a6824b81c0f8219e"}, "closed": true, "closedAt": "2020-05-29T13:12:23Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcai_AHAH2gAyNDA4MTgyOTIzOjMwODVjMDgxMDI4ZTg3MjRjOWU3ZWM4MzM0MjhkMTA4MWVhNmU3MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmBZPqgH2gAyNDA4MTgyOTIzOjMwNTQ5ZTJlNmZhNGFhZGJiMGRjZGYwZGQ4NGI5ZTQyYzk5NWMxOTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3085c081028e8724c9e7ec833428d1081ea6e718", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/3085c081028e8724c9e7ec833428d1081ea6e718", "committedDate": "2020-04-23T20:33:42Z", "message": "Add new circuit breaker plugin type and pass CircuitBreakerService to Plugin::createComponents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDcwNjkx", "url": "https://github.com/elastic/elasticsearch/pull/55695#pullrequestreview-399470691", "createdAt": "2020-04-23T20:57:36Z", "commit": {"oid": "3085c081028e8724c9e7ec833428d1081ea6e718"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDo1NzozN1rOGK70Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDo1NzozN1rOGK70Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExODkzNQ==", "bodyText": "Drive-by comment -- would this be better named CircuitBreakerPlugin?", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r414118935", "createdAt": "2020-04-23T20:57:37Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.indices.breaker.BreakerSettings;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * An extension point for {@link Plugin} implementations to add custom circuit breakers\n+ */\n+public interface CircuitMemoryBreakerPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3085c081028e8724c9e7ec833428d1081ea6e718"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTM2MzQ1", "url": "https://github.com/elastic/elasticsearch/pull/55695#pullrequestreview-401136345", "createdAt": "2020-04-27T16:45:44Z", "commit": {"oid": "3085c081028e8724c9e7ec833428d1081ea6e718"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo0NTo0NFrOGMtKPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo0NTo0NFrOGMtKPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng==", "bodyText": "All of our plugin apis should be \"pull\" based, where we extract from the plugin what will be added to ES. This seems to do the opposite. It's unclear from my reading of this PR what this method actually does, since there are no example or test implementations, but based on the one use inside Node, it seems like this is used as a way to callback to actually add the breaker to the CircuitBreakerService. I think the root of the problem is CircuitBreakerService should not have a registerBreaker method. Instead, Node should collect all the breaker settings, and pass them to the service's ctor, as we don't need the ability to add these dynamically.\nAdditionally, the BreakerSettings concept seems like it needs a little work to make this all truly extendable. Currently it takes in all the values, but the plugin must read these values on its own, and the getCircuitBreakers() method above then relies on the plugin having Settings from its ctor, which cannot be relied on. Even if we passed the real Settings to getCircuitBreakers(), it seems opposite of what we want. IMO any new breakers that are added should be configurable in the same way our existing breakers are configured, ie through the same yaml settings with the new breaker name substituted.  This would mean replacing the hardcoded settings that exist for the builtin breakers with affix settings, so that they can be used with any breaker.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r415975996", "createdAt": "2020-04-27T16:45:44Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.indices.breaker.BreakerSettings;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * An extension point for {@link Plugin} implementations to add custom circuit breakers\n+ */\n+public interface CircuitMemoryBreakerPlugin {\n+\n+    /**\n+     * Returns additional circuit breaker settings added by this plugin.\n+     *\n+     * This each of the {@link BreakerSettings} are passed to the configured {@link CircuitBreakerService}.\n+     * The service will create a new breaker according to the provided settings and overall environment.\n+     *\n+     */\n+    default List<BreakerSettings> getCircuitBreakers() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * If the custom {@link BreakerSettings} have dynamic settings.\n+     * A settings update consumer can be added with this method.\n+     * Once the new settings are constructed, pass them to the updatedBreakerSettingsListener.\n+     */\n+    default void addDynamicBreakerUpdates(ClusterSettings settings, Consumer<BreakerSettings> updatedBreakerSettingsListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3085c081028e8724c9e7ec833428d1081ea6e718"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d157364bd1778e95a7ebe452a57dcf7488317a5a", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/d157364bd1778e95a7ebe452a57dcf7488317a5a", "committedDate": "2020-04-27T18:41:46Z", "message": "intermediate commit on affix settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd89d8960935f05259b16342ec0d651055bacb3", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/4cd89d8960935f05259b16342ec0d651055bacb3", "committedDate": "2020-04-27T19:19:04Z", "message": "intermediate commit on affix settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00f40a3b300a2cf7e421762cbbba6ff9b7b2c7d8", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/00f40a3b300a2cf7e421762cbbba6ff9b7b2c7d8", "committedDate": "2020-04-28T12:57:40Z", "message": "moving towards affix settings for breakers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5d9e487b64c39cf6309f97504bdc9551dab6c2e", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/f5d9e487b64c39cf6309f97504bdc9551dab6c2e", "committedDate": "2020-04-28T15:17:37Z", "message": "Merge branch 'master' into feature/add-circuit-breaker-plugin-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5cacdb6e37236397ca48f2af32d156cfd864c1", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/3e5cacdb6e37236397ca48f2af32d156cfd864c1", "committedDate": "2020-04-28T18:04:53Z", "message": "removing unnecessary code change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aac4d5f6c7993e9d487d1df1bf99f7725536b66d", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/aac4d5f6c7993e9d487d1df1bf99f7725536b66d", "committedDate": "2020-04-28T18:21:39Z", "message": "Merge branch 'master' into feature/add-circuit-breaker-plugin-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec6f9acf3592d3c0cd472914120ec3aaf4b17584", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/ec6f9acf3592d3c0cd472914120ec3aaf4b17584", "committedDate": "2020-05-05T14:20:56Z", "message": "moving to keeping single ref of breakers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680027c3ac157b77358f6d850e3b812dfa297f64", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/680027c3ac157b77358f6d850e3b812dfa297f64", "committedDate": "2020-05-05T14:31:52Z", "message": "Merge branch 'feature/add-circuit-breaker-plugin-support' of github.com:benwtrent/elasticsearch into feature/add-circuit-breaker-plugin-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b0a3dd48ba2b42a60f0a0eef04ade2991929af", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/65b0a3dd48ba2b42a60f0a0eef04ade2991929af", "committedDate": "2020-05-05T15:34:19Z", "message": "addressing some changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c74a21c051150bb1f0c6c3a07f34da11c6c5f21b", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/c74a21c051150bb1f0c6c3a07f34da11c6c5f21b", "committedDate": "2020-05-05T19:12:51Z", "message": "setting up benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7956a49f8d1ade8b9e99c1996043f8b1342dcd", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b7956a49f8d1ade8b9e99c1996043f8b1342dcd", "committedDate": "2020-05-05T20:38:44Z", "message": "changing to volatile for simplicity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTM0Nzg1", "url": "https://github.com/elastic/elasticsearch/pull/55695#pullrequestreview-406534785", "createdAt": "2020-05-06T11:48:54Z", "commit": {"oid": "2b7956a49f8d1ade8b9e99c1996043f8b1342dcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0ODo1NFrOGRPRkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0ODo1NFrOGRPRkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyOTIzMg==", "bodyText": "This can be deleted before merge. I am using it for micro-benchmarking the change as circuit breakers are hot spots in the code base.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420729232", "createdAt": "2020-05-06T11:48:54Z", "author": {"login": "benwtrent"}, "path": "benchmarks/src/main/java/org/elasticsearch/benchmark/indices/breaker/HierarchyCircuitBreakerBenchmark.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.benchmark.indices.breaker;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.breaker.CircuitBreakingException;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(3)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Benchmark)\n+@SuppressWarnings(\"unused\") // invoked by benchmarking framework\n+public class HierarchyCircuitBreakerBenchmark {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7956a49f8d1ade8b9e99c1996043f8b1342dcd"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fc7b43e7744aa6c968af2e01b79c42545f710cf", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/6fc7b43e7744aa6c968af2e01b79c42545f710cf", "committedDate": "2020-05-06T11:59:04Z", "message": "reverting passing in service to plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce4f73cb317cafbd925e29a3a648a6da361e956e", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/ce4f73cb317cafbd925e29a3a648a6da361e956e", "committedDate": "2020-05-06T16:30:58Z", "message": "addressing circuit breaker plugin needs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7538685788c51c759ccee2ceb05e9a598073035", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7538685788c51c759ccee2ceb05e9a598073035", "committedDate": "2020-05-06T17:53:18Z", "message": "adding tests for circuit breaker plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b1c0306548d2b417abd91315ec480b545fc33b", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/e6b1c0306548d2b417abd91315ec480b545fc33b", "committedDate": "2020-05-06T17:53:34Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/add-circuit-breaker-plugin-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0267956f5f711e2b3a9efd78355fa7e3f4445260", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/0267956f5f711e2b3a9efd78355fa7e3f4445260", "committedDate": "2020-05-06T18:09:54Z", "message": "minor adjustments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODU1NTc4", "url": "https://github.com/elastic/elasticsearch/pull/55695#pullrequestreview-406855578", "createdAt": "2020-05-06T17:57:24Z", "commit": {"oid": "e6b1c0306548d2b417abd91315ec480b545fc33b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1NzoyNFrOGRe0yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoxNDowMlrOGRfdBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDAwOQ==", "bodyText": "I am doing this so there is only ONE volatile read in this function.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420984009", "createdAt": "2020-05-06T17:57:24Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -108,6 +86,9 @@ public void circuitBreak(String fieldName, long bytesNeeded) {\n      */\n     @Override\n     public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n+        final LimitAndOverhead limitAndOverhead = this.limitAndOverhead;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b1c0306548d2b417abd91315ec480b545fc33b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDU0Mw==", "bodyText": "I am passing in the already read settings as we don't care about updates while we are checking the limit. This is effectively as it was before.\nAdditionally, it also prevents another unnecessary volatile read.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420984543", "createdAt": "2020-05-06T17:58:12Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -117,10 +98,10 @@ public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws Cir\n         // If there is no limit (-1), we can optimize a bit by using\n         // .addAndGet() instead of looping (because we don't have to check a\n         // limit), which makes the RamAccountingTermsEnum case faster.\n-        if (this.memoryBytesLimit == -1) {\n+        if (memoryBytesLimit == -1) {\n             newUsed = noLimit(bytes, label);\n         } else {\n-            newUsed = limit(bytes, label);\n+            newUsed = limit(bytes, label, overheadConstant, memoryBytesLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b1c0306548d2b417abd91315ec480b545fc33b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MzM5OA==", "bodyText": "ChildMemoryCircuitBreaker objects need a reference to the constructed HierarchyCircuitBreakerService. This complicates plugin access to their own created circuit breakers. To prevent muddying the API between the plugin and the node, I have split the breaker creation and the breaker registration.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420993398", "createdAt": "2020-05-06T18:12:33Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -331,56 +327,29 @@ public void checkParentLimit(long newBytesReserved, String label) throws Circuit\n                 message.append(\"]\");\n             }\n             message.append(\", usages [\");\n-            message.append(String.join(\", \",\n-                this.breakers.entrySet().stream().map(e -> {\n+            message.append(this.breakers.entrySet().stream().map(e -> {\n                     final CircuitBreaker breaker = e.getValue();\n                     final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead());\n                     return e.getKey() + \"=\" + breakerUsed + \"/\" + new ByteSizeValue(breakerUsed);\n-                })\n-                    .collect(Collectors.toList())));\n+                }).collect(Collectors.joining(\", \")));\n             message.append(\"]\");\n             // derive durability of a tripped parent breaker depending on whether the majority of memory tracked by\n             // child circuit breakers is categorized as transient or permanent.\n             CircuitBreaker.Durability durability = memoryUsed.transientChildUsage >= memoryUsed.permanentChildUsage ?\n                 CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT;\n-            logger.debug(\"{}\", message);\n+            logger.debug(() -> new ParameterizedMessage(\"{}\", message.toString()));\n             throw new CircuitBreakingException(message.toString(), memoryUsed.totalUsage, parentLimit, durability);\n         }\n     }\n \n-    /**\n-     * Allows to register a custom circuit breaker.\n-     * Warning: Will overwrite any existing custom breaker with the same name.\n-     */\n-    @Override\n-    public void registerBreaker(BreakerSettings breakerSettings) {\n+    public CircuitBreaker validateAndCreateBreaker(BreakerSettings breakerSettings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b1c0306548d2b417abd91315ec480b545fc33b"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NDMxMA==", "bodyText": "For plugins to create their own circuit breaker instances (so that they can maintain a reference to them without the service), we still need to register circuit breakers outside of the constructor.\nMain difference here is that registration no longer overwrites previous circuit breakers and will throw if one is already registered with the same name.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420994310", "createdAt": "2020-05-06T18:14:02Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -158,57 +151,60 @@ public HierarchyCircuitBreakerService(Settings settings, ClusterSettings cluster\n             this::setRequestBreakerLimit);\n         clusterSettings.addSettingsUpdateConsumer(ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING, ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n             this::setAccountingBreakerLimit);\n+        clusterSettings.addAffixUpdateConsumer(CIRCUIT_BREAKER_LIMIT_SETTING, CIRCUIT_BREAKER_OVERHEAD_SETTING,\n+            this::setCircuitBreakerLimit,\n+            (s, t) -> {});\n+    }\n+\n+    @Override\n+    public void registerNewCircuitBreakers(List<CircuitBreaker> circuitBreakers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b1c0306548d2b417abd91315ec480b545fc33b"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22313b3b1b9c4af5c9ae9f632fff35cbadc14ae8", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/22313b3b1b9c4af5c9ae9f632fff35cbadc14ae8", "committedDate": "2020-05-06T18:52:27Z", "message": "fixing plugin test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76c0fa371095316a1a2971004374a22e1f6f3f97", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/76c0fa371095316a1a2971004374a22e1f6f3f97", "committedDate": "2020-05-07T11:22:18Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/add-circuit-breaker-plugin-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2af9451bea949d19cb1ae70f917f91bced6640e", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/c2af9451bea949d19cb1ae70f917f91bced6640e", "committedDate": "2020-05-21T12:31:56Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/add-circuit-breaker-plugin-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401c43fccc0bc97707276f610ad2e714ce473e80", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/401c43fccc0bc97707276f610ad2e714ce473e80", "committedDate": "2020-05-21T13:58:34Z", "message": "updating plugin interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37ad601375e18ec107c3515766764207ed3d6e62", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/37ad601375e18ec107c3515766764207ed3d6e62", "committedDate": "2020-05-21T14:04:20Z", "message": "minor updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTczNTg1", "url": "https://github.com/elastic/elasticsearch/pull/55695#pullrequestreview-416173585", "createdAt": "2020-05-21T14:05:46Z", "commit": {"oid": "37ad601375e18ec107c3515766764207ed3d6e62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDowNTo0NlrOGY0HEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDowNTo0NlrOGY0HEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3Mjc4NQ==", "bodyText": "I opted to have this be singular + return a BreakerSettings object. A redirection through a factory does not really provide value, especially since the factory will almost be exactly like this method definition.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r428672785", "createdAt": "2020-05-21T14:05:46Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.common.breaker.CircuitBreaker;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.breaker.BreakerSettings;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+\n+\n+/**\n+ * An extension point for {@link Plugin} implementations to add custom circuit breakers\n+ */\n+public interface CircuitBreakerPlugin {\n+\n+    /**\n+     * Each of the factory functions are passed to the configured {@link CircuitBreakerService}.\n+     *\n+     * The service then constructs a {@link CircuitBreaker} given the resulting {@link BreakerSettings}.\n+     *\n+     * Custom circuit breakers settings can be found in {@link BreakerSettings}.\n+     * See:\n+     *  - limit (example: `breaker.foo.limit`) {@link BreakerSettings#CIRCUIT_BREAKER_LIMIT_SETTING}\n+     *  - overhead (example: `breaker.foo.overhead`) {@link BreakerSettings#CIRCUIT_BREAKER_OVERHEAD_SETTING}\n+     *  - type (example: `breaker.foo.type`) {@link BreakerSettings#CIRCUIT_BREAKER_TYPE}\n+     *\n+     * The `limit` and `overhead` settings will be dynamically updated in the circuit breaker service iff a {@link BreakerSettings}\n+     * object with the same name is provided at node startup.\n+     */\n+    BreakerSettings getCircuitBreaker(Settings settings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ad601375e18ec107c3515766764207ed3d6e62"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84478745649e6784c2c750f85429d179c2ef1e2d", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/84478745649e6784c2c750f85429d179c2ef1e2d", "committedDate": "2020-05-21T17:29:08Z", "message": "removing microbenchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NzE3MjU0", "url": "https://github.com/elastic/elasticsearch/pull/55695#pullrequestreview-419717254", "createdAt": "2020-05-28T01:27:24Z", "commit": {"oid": "84478745649e6784c2c750f85429d179c2ef1e2d"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMToyNzoyNFrOGbioXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNDo1MFrOGcJBrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzMjEyNA==", "bodyText": "when is durability being null ok?", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r431532124", "createdAt": "2020-05-28T01:27:24Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/indices/breaker/BreakerSettings.java", "diffHunk": "@@ -69,7 +129,7 @@ public double getOverhead() {\n     public String toString() {\n         return \"[\" + this.name +\n                 \",type=\" + this.type.toString() +\n-                \",durability=\" + this.durability.toString() +\n+                \",durability=\" + (this.durability == null ? \"null\" : this.durability.toString()) +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84478745649e6784c2c750f85429d179c2ef1e2d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzMjQ4NA==", "bodyText": "nit: space after for", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r431532484", "createdAt": "2020-05-28T01:28:48Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -95,120 +100,97 @@\n \n     private final boolean trackRealMemoryUsage;\n     private volatile BreakerSettings parentSettings;\n-    private volatile BreakerSettings fielddataSettings;\n-    private volatile BreakerSettings inFlightRequestsSettings;\n-    private volatile BreakerSettings requestSettings;\n-    private volatile BreakerSettings accountingSettings;\n \n     // Tripped count for when redistribution was attempted but wasn't successful\n     private final AtomicLong parentTripCount = new AtomicLong(0);\n \n     public HierarchyCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {\n+        this(settings, Collections.emptyList(), clusterSettings);\n+    }\n+\n+    public HierarchyCircuitBreakerService(Settings settings, List<BreakerSettings> customBreakers, ClusterSettings clusterSettings) {\n         super();\n-        this.fielddataSettings = new BreakerSettings(CircuitBreaker.FIELDDATA,\n+        HashMap<String, CircuitBreaker> childCircuitBreakers = new HashMap<>();\n+        childCircuitBreakers.put(CircuitBreaker.FIELDDATA, validateAndCreateBreaker(\n+            new BreakerSettings(CircuitBreaker.FIELDDATA,\n                 FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 FIELDDATA_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.PERMANENT\n-        );\n-\n-        this.inFlightRequestsSettings = new BreakerSettings(CircuitBreaker.IN_FLIGHT_REQUESTS,\n+        )));\n+        childCircuitBreakers.put(CircuitBreaker.IN_FLIGHT_REQUESTS, validateAndCreateBreaker(\n+            new BreakerSettings(CircuitBreaker.IN_FLIGHT_REQUESTS,\n                 IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.TRANSIENT\n-        );\n-\n-        this.requestSettings = new BreakerSettings(CircuitBreaker.REQUEST,\n+        )));\n+        childCircuitBreakers.put(CircuitBreaker.REQUEST, validateAndCreateBreaker(\n+            new BreakerSettings(CircuitBreaker.REQUEST,\n                 REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 REQUEST_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.TRANSIENT\n-        );\n-\n-        this.accountingSettings = new BreakerSettings(CircuitBreaker.ACCOUNTING,\n+        )));\n+        childCircuitBreakers.put(CircuitBreaker.ACCOUNTING, validateAndCreateBreaker(new BreakerSettings(CircuitBreaker.ACCOUNTING,\n                 ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 ACCOUNTING_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.PERMANENT\n-        );\n-\n+        )));\n+        for(BreakerSettings breakerSettings : customBreakers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84478745649e6784c2c750f85429d179c2ef1e2d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NDQ3OA==", "bodyText": "It looks like the one use of this is to grab stats for a breaker. Due to this and overhead being separate methods, this could theoretically result in a race condition where we get incorrect configuration in the stats. I realize this is already currently an issue, so this doesn't need to be solved right now, but could you please create a followup issue to solve this, maybe by getting rid of these methods and having a stats() method directly on the breaker.", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r432154478", "createdAt": "2020-05-28T22:15:51Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -208,15 +185,15 @@ public long getUsed() {\n      */\n     @Override\n     public long getLimit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84478745649e6784c2c750f85429d179c2ef1e2d"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MTE5OQ==", "bodyText": "Why do we need this alternate ctor? Can we convert the few tests calling tihs to pass an empty list?", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r432161199", "createdAt": "2020-05-28T22:34:50Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -95,120 +100,97 @@\n \n     private final boolean trackRealMemoryUsage;\n     private volatile BreakerSettings parentSettings;\n-    private volatile BreakerSettings fielddataSettings;\n-    private volatile BreakerSettings inFlightRequestsSettings;\n-    private volatile BreakerSettings requestSettings;\n-    private volatile BreakerSettings accountingSettings;\n \n     // Tripped count for when redistribution was attempted but wasn't successful\n     private final AtomicLong parentTripCount = new AtomicLong(0);\n \n     public HierarchyCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84478745649e6784c2c750f85429d179c2ef1e2d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f61820d646570d4b52e3bf768c176cc3961394", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/83f61820d646570d4b52e3bf768c176cc3961394", "committedDate": "2020-05-29T12:12:35Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30549e2e6fa4aadbb0dcdf0dd84b9e42c995c195", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/30549e2e6fa4aadbb0dcdf0dd84b9e42c995c195", "committedDate": "2020-05-29T12:12:41Z", "message": "Merge branch 'master' into feature/add-circuit-breaker-plugin-support"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 548, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}