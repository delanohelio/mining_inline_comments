{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTQ1MDY5", "number": 54470, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzozMjoyMlrODs-yEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjoxOFrODul-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDkyNTYwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToStringFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzozMjoyMlrOF-IwzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxODo1OVrOGAXh6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5OTU5Nw==", "bodyText": "Why not null the instance instead of \"null\" the string?", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r400699597", "createdAt": "2020-03-31T07:32:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToStringFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class ToStringFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstr\";\n+\n+    private final Processor source;\n+\n+    public ToStringFunctionProcessor(Processor source) {\n+        this.source = source;\n+    }\n+\n+    public ToStringFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input));\n+    }\n+\n+    public static Object doProcess(Object source) {\n+        return source == null ? \"null\" : source.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dd8d387124c7c112b73c41f0634f9f917ace51"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAwMDYzOA==", "bodyText": "per #54465 and https://github.com/endgameinc/eql/blob/master/eql/functions.py#L626 I was following a contract (we can change it, of course) that this function always returns a string. So I catch null directly, since I can't call a method on it. Here's the current behavior for how it folds string(null):\n>>> import eql\n>>> eql.parse_expression(\"string(null)\")\nString(value='None')", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r401000638", "createdAt": "2020-03-31T15:21:49Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToStringFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class ToStringFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstr\";\n+\n+    private final Processor source;\n+\n+    public ToStringFunctionProcessor(Processor source) {\n+        this.source = source;\n+    }\n+\n+    public ToStringFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input));\n+    }\n+\n+    public static Object doProcess(Object source) {\n+        return source == null ? \"null\" : source.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5OTU5Nw=="}, "originalCommit": {"oid": "17dd8d387124c7c112b73c41f0634f9f917ace51"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzODY5Ng==", "bodyText": "Since we're not using some concept of Optional, returning null instead of a string \"null\" is better since otherwise there's no way to differentiate between a string with \"null\" chars vs actual null since they would both be equivalent which is not what we want.", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r403038696", "createdAt": "2020-04-03T14:18:59Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToStringFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class ToStringFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstr\";\n+\n+    private final Processor source;\n+\n+    public ToStringFunctionProcessor(Processor source) {\n+        this.source = source;\n+    }\n+\n+    public ToStringFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input));\n+    }\n+\n+    public static Object doProcess(Object source) {\n+        return source == null ? \"null\" : source.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5OTU5Nw=="}, "originalCommit": {"oid": "17dd8d387124c7c112b73c41f0634f9f917ace51"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDkyODYxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzozMzoxMlrOF-IykA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzozMzoxMlrOF-IykA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwMDA0OA==", "bodyText": "Wrong copy-paste? I wonder why this hasn't broken the tests though.", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r400700048", "createdAt": "2020-03-31T07:33:12Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "diffHunk": "@@ -18,6 +19,10 @@\n \n     InternalEqlScriptUtils() {}\n \n+    public static String string(String s, Number start, Number end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dd8d387124c7c112b73c41f0634f9f917ace51"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDEyMTExOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToStringFunctionPipe.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0MjoxM1rOF-67Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0MjoxM1rOF-67Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMTQzMA==", "bodyText": "I think you can more easy write these as return Objects.equals(source, ((ToStringFunctionPipe) obj).source);", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r401521430", "createdAt": "2020-04-01T10:42:13Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToStringFunctionPipe.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToStringFunctionPipe extends Pipe {\n+\n+    private final Pipe source;\n+\n+    public ToStringFunctionPipe(Source source, Expression expression, Pipe src) {\n+        super(source, expression, Collections.singletonList(src));\n+        this.source = src;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 1) {\n+            throw new IllegalArgumentException(\"expected [1] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return new ToStringFunctionPipe(source(), expression(), newChildren.get(0));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        if (newSource == source) {\n+            return this;\n+        }\n+        return replaceChildren(Collections.singletonList(newSource));\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        return source.supportedByAggsOnlyQuery();\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        return source.resolved();\n+    }\n+\n+    @Override\n+    public final void collectFields(QlSourceBuilder sourceBuilder) {\n+        source.collectFields(sourceBuilder);\n+    }\n+\n+    @Override\n+    protected NodeInfo<ToStringFunctionPipe> info() {\n+        return NodeInfo.create(this, ToStringFunctionPipe::new, expression(), source);\n+    }\n+\n+    @Override\n+    public ToStringFunctionProcessor asProcessor() {\n+        return new ToStringFunctionProcessor(source.asProcessor());\n+    }\n+\n+    public Pipe src() {\n+        return source;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        ToStringFunctionPipe other = (ToStringFunctionPipe) obj;\n+        return Objects.equals(source, other.source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de21d443bd2b28a382bd6328aafc1cd56b62b638"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE2Mjc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/resources/org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NTowN1rOF-7Vjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NTowN1rOF-7Vjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyODIwNw==", "bodyText": "Move this one before substring, please.", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r401528207", "createdAt": "2020-04-01T10:55:07Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/resources/org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt", "diffHunk": "@@ -54,9 +54,10 @@ class org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalE\n \n #\n # ASCII Functions\n-# \n+#\n   Boolean endsWith(String, String)\n   Integer length(String)\n   Boolean startsWith(String, String)\n   String  substring(String, Number, Number)\n+  String  string(Object)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de21d443bd2b28a382bd6328aafc1cd56b62b638"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTgwMzAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToString.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyNDo1OFrOGAXxtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyNDo1OFrOGAXxtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0Mjc0MA==", "bodyText": "Please rename source to something else (delegate, target, value?) since it conflicts with Source source convention. While source was used in a couple of Processors, it was mainly to follow the function delegation and their official param names.\nThis applies to the whole PR.", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r403042740", "createdAt": "2020-04-03T14:24:58Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToString.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ToStringFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific string function that wraps object.toString.\n+ */\n+public class ToString extends ScalarFunction {\n+\n+    private final Expression source;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509ffd97eae134e829b39dc190a790aa0eb64319"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTgzMjgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries.toml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjoxOFrOGApqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjoxOFrOGApqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNTc2Mw==", "bodyText": "The original idea was to keep this file unchanged from the original eql implementation\nhttps://github.com/endgameinc/eql/blob/master/eql/etc/test_queries.toml\nso we can sync up easier with the reference repo/impl\nand add more queries into separate file(s), could be just one, could be individual files for specific extensions\nstarted doing something like this in my other PR\nhttps://github.com/elastic/elasticsearch/pull/54277/files/be0b67cdf5022f38ec3610a68bbb91af8b10b8b3#diff-00cfec987b028a9cc67295e57c02cf68R1", "url": "https://github.com/elastic/elasticsearch/pull/54470#discussion_r403335763", "createdAt": "2020-04-03T21:06:18Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries.toml", "diffHunk": "@@ -2,6 +2,15 @@\n query = 'process where serial_event_id = 1'\n expected_event_ids  = [1]\n \n+[[queries]]\n+query = 'process where string(serial_event_id) = \"1\"'\n+expected_event_ids  = [1]\n+\n+[[queries]]\n+note = \"check that string(null) returns 'null'\"\n+expected_event_ids  = [1, 2]\n+query = 'process where opcode == 3 and string(ppid) == \"null\"'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509ffd97eae134e829b39dc190a790aa0eb64319"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3999, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}