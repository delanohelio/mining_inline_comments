{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Mjc5NDc5", "number": 55780, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NToxOFrOD2hHEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMTozMlrOD2hQiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkyMTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NToxOFrOGMTkmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NToxOFrOGMTkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Njc2MA==", "bodyText": "I think this is unnecessary (although a DEBUG-level log would be ok here); it also doesn't consume the recoverAfterTime argument so it fails in the precommit build task.", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415556760", "createdAt": "2020-04-27T06:55:18Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -228,6 +228,7 @@ public void onFailure(final Exception e) {\n \n                     @Override\n                     protected void doRun() {\n+                        logger.info(\"performing state recovery...\", recoverAfterTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkzMDAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NzoyMlrOGMTpNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NzoyMlrOGMTpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Nzk0MA==", "bodyText": "I think we should check the existence of the state-not-recovered block in currentState, not whether the local node is elected as master.", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415557940", "createdAt": "2020-04-27T06:57:22Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -244,6 +245,11 @@ private void resetRecoveredFlags() {\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n+            if (currentState.nodes().isLocalNodeElectedMaster() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkzMDk0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1Nzo0MFrOGMTpxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1Nzo0MFrOGMTpxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODA4Nw==", "bodyText": "I think this is unnecessary (although a DEBUG-level log would be ok here).", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415558087", "createdAt": "2020-04-27T06:57:40Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -244,6 +245,11 @@ private void resetRecoveredFlags() {\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n+            if (currentState.nodes().isLocalNodeElectedMaster() == false) {\n+                logger.info(\"cluster is already recovered\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkzNDc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1ODozNlrOGMTryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1ODozNlrOGMTryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODYwMQ==", "bodyText": "This doesn't compile right now so I can't test this.\n> Task :server:compileTestJava\n/Users/davidturner/src/elasticsearch-master/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java:63: error: constructor GatewayService in class GatewayService cannot be applied to given types;\n        return new GatewayService(settings.build(),\n               ^\n  required: Settings,AllocationService,ClusterService,ThreadPool,Discovery,NodeClient\n  found:    Settings,AllocationService,ClusterService,<null>,<null>,<null>,<null>\n  reason: actual and formal argument lists differ in length", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415558601", "createdAt": "2020-04-27T06:58:36Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n+                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),\n+            EmptyClusterInfoService.INSTANCE);\n+        return new GatewayService(settings.build(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkzODc5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1OTozMVrOGMTuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1OTozMVrOGMTuAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE3MA==", "bodyText": "This line is longer than 140 characters so fails the precommit build task.", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415559170", "createdAt": "2020-04-27T06:59:31Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkzODk5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1OTozNFrOGMTuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1OTozNFrOGMTuHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE5OQ==", "bodyText": "This line is longer than 140 characters so fails the precommit build task.", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415559199", "createdAt": "2020-04-27T06:59:34Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n+                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk0NDk5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMToxNFrOGMTxfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMToxNFrOGMTxfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDA2MA==", "bodyText": "This assertion is vacuous, I think you mean this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n          \n          \n            \n                    assertThat(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), not(hasItem(STATE_NOT_RECOVERED_BLOCK)));", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415560060", "createdAt": "2020-04-27T07:01:14Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -69,4 +97,23 @@ public void testDeprecatedSettings() {\n         assertSettingDeprecationsAndWarnings(new Setting<?>[] {GatewayService.RECOVER_AFTER_MASTER_NODES_SETTING });\n     }\n \n+    public void testRecoverStateUpdateTask() throws Exception {\n+        GatewayService service = createService(Settings.builder());\n+        ClusterStateUpdateTask clusterStateUpdateTask = service.new RecoverStateUpdateTask();\n+        String nodeId = randomAlphaOfLength(10);\n+        DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT)\n+                .put(Node.NODE_MASTER_SETTING.getKey(), true).build(),\n+            new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId);\n+        ClusterState stateWithBlock = ClusterState.builder(ClusterName.DEFAULT)\n+            .nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).\n+                blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK).build()).build();\n+\n+        ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n+        assertNotEquals(recoveredState, stateWithBlock);\n+        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk0NjAwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMTozMlrOGMTyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzowMTozMlrOGMTyFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(recoveredState, clusterState);\n          \n          \n            \n                    assertSame(recoveredState, clusterState);", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415560215", "createdAt": "2020-04-27T07:01:32Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -69,4 +97,23 @@ public void testDeprecatedSettings() {\n         assertSettingDeprecationsAndWarnings(new Setting<?>[] {GatewayService.RECOVER_AFTER_MASTER_NODES_SETTING });\n     }\n \n+    public void testRecoverStateUpdateTask() throws Exception {\n+        GatewayService service = createService(Settings.builder());\n+        ClusterStateUpdateTask clusterStateUpdateTask = service.new RecoverStateUpdateTask();\n+        String nodeId = randomAlphaOfLength(10);\n+        DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT)\n+                .put(Node.NODE_MASTER_SETTING.getKey(), true).build(),\n+            new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId);\n+        ClusterState stateWithBlock = ClusterState.builder(ClusterName.DEFAULT)\n+            .nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).\n+                blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK).build()).build();\n+\n+        ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n+        assertNotEquals(recoveredState, stateWithBlock);\n+        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n+\n+        ClusterState clusterState = clusterStateUpdateTask.execute(recoveredState);\n+        assertEquals(recoveredState, clusterState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2599, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}