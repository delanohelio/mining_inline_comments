{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNjc4ODgz", "number": 66714, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozNDoxMFrOFILdNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo0OTozN1rOFInjuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTIwNjMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozNDoxMFrOIJ9NmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0NTo1MVrOIKDdtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxMTAwMQ==", "bodyText": "I am not sure delay is needed for the RollupAction. I think this is a left over from the v1 rollup job that would tail the source index using a delay. Rollup should not wait for any delayed data. Right?", "url": "https://github.com/elastic/elasticsearch/pull/66714#discussion_r547311001", "createdAt": "2020-12-22T14:34:10Z", "author": {"login": "csoulios"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.rollup;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.fieldcaps.FieldCapabilities;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+\n+import java.io.IOException;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.common.xcontent.ObjectParser.ValueType;\n+\n+/**\n+ * The configuration object for the histograms in the rollup config\n+ *\n+ * {\n+ *     \"groups\": [\n+ *        \"date_histogram\": {\n+ *            \"field\" : \"foo\",\n+ *            \"interval\" : \"1d\",\n+ *            \"delay\": \"30d\",\n+ *            \"time_zone\" : \"EST\"\n+ *        }\n+ *     ]\n+ * }\n+ */\n+public abstract class RollupActionDateHistogramGroupConfig implements Writeable, ToXContentObject {\n+\n+    static final String NAME = \"date_histogram\";\n+    public static final String FIXED_INTERVAL = \"fixed_interval\";\n+    public static final String CALENDAR_INTERVAL = \"calendar_interval\";\n+    public static final String TIME_ZONE = \"time_zone\";\n+    public static final String DELAY = \"delay\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "477f1b70ced88b0620835b9c12ab329b71de347a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMzQyOA==", "bodyText": "good catch! the usage of this was removed, but I seem to have missed removing this", "url": "https://github.com/elastic/elasticsearch/pull/66714#discussion_r547413428", "createdAt": "2020-12-22T17:45:51Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.rollup;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.fieldcaps.FieldCapabilities;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+\n+import java.io.IOException;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.common.xcontent.ObjectParser.ValueType;\n+\n+/**\n+ * The configuration object for the histograms in the rollup config\n+ *\n+ * {\n+ *     \"groups\": [\n+ *        \"date_histogram\": {\n+ *            \"field\" : \"foo\",\n+ *            \"interval\" : \"1d\",\n+ *            \"delay\": \"30d\",\n+ *            \"time_zone\" : \"EST\"\n+ *        }\n+ *     ]\n+ * }\n+ */\n+public abstract class RollupActionDateHistogramGroupConfig implements Writeable, ToXContentObject {\n+\n+    static final String NAME = \"date_histogram\";\n+    public static final String FIXED_INTERVAL = \"fixed_interval\";\n+    public static final String CALENDAR_INTERVAL = \"calendar_interval\";\n+    public static final String TIME_ZONE = \"time_zone\";\n+    public static final String DELAY = \"delay\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxMTAwMQ=="}, "originalCommit": {"oid": "477f1b70ced88b0620835b9c12ab329b71de347a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI1NDkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0NzoyM1rOIJ9qVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0ODoxOVrOIKDicQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxODM1OQ==", "bodyText": "nit: Since RollupTask is used only by the RollupAction class, maybe you could move it in the org.elasticsearch.xpack.core.rollup package and leave package visibility to the constructor.", "url": "https://github.com/elastic/elasticsearch/pull/66714#discussion_r547318359", "createdAt": "2020-12-22T14:47:23Z", "author": {"login": "csoulios"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupTask.java", "diffHunk": "@@ -21,7 +20,7 @@\n     private RollupActionConfig config;\n     private RollupJobStatus status;\n \n-    RollupTask(long id, String type, String action, TaskId parentTask, String rollupIndex, RollupActionConfig config,\n+    public RollupTask(long id, String type, String action, TaskId parentTask, String rollupIndex, RollupActionConfig config,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "477f1b70ced88b0620835b9c12ab329b71de347a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNDY0MQ==", "bodyText": "\ud83d\udc4d moved it into the same package as the RollupAction. The new rollup-implementation will remove these anyways :)", "url": "https://github.com/elastic/elasticsearch/pull/66714#discussion_r547414641", "createdAt": "2020-12-22T17:48:19Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupTask.java", "diffHunk": "@@ -21,7 +20,7 @@\n     private RollupActionConfig config;\n     private RollupJobStatus status;\n \n-    RollupTask(long id, String type, String action, TaskId parentTask, String rollupIndex, RollupActionConfig config,\n+    public RollupTask(long id, String type, String action, TaskId parentTask, String rollupIndex, RollupActionConfig config,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxODM1OQ=="}, "originalCommit": {"oid": "477f1b70ced88b0620835b9c12ab329b71de347a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTgwMjczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo0NzoxMFrOIKomag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODoxMzoxNVrOIL_A-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMTg2Ng==", "bodyText": "Nit: delay field leftover in the comments", "url": "https://github.com/elastic/elasticsearch/pull/66714#discussion_r548021866", "createdAt": "2020-12-23T15:47:10Z", "author": {"login": "csoulios"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.rollup;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.fieldcaps.FieldCapabilities;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+\n+import java.io.IOException;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.common.xcontent.ObjectParser.ValueType;\n+\n+/**\n+ * The configuration object for the histograms in the rollup config\n+ *\n+ * {\n+ *     \"groups\": [\n+ *        \"date_histogram\": {\n+ *            \"field\" : \"foo\",\n+ *            \"interval\" : \"1d\",\n+ *            \"delay\": \"30d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f197b2ccb0f433d1a94ef046b24da0f70f373943"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQzNzY5MQ==", "bodyText": "interval should be calendar_interval too.", "url": "https://github.com/elastic/elasticsearch/pull/66714#discussion_r549437691", "createdAt": "2020-12-28T18:13:15Z", "author": {"login": "jrodewig"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.rollup;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.fieldcaps.FieldCapabilities;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+\n+import java.io.IOException;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.common.xcontent.ObjectParser.ValueType;\n+\n+/**\n+ * The configuration object for the histograms in the rollup config\n+ *\n+ * {\n+ *     \"groups\": [\n+ *        \"date_histogram\": {\n+ *            \"field\" : \"foo\",\n+ *            \"interval\" : \"1d\",\n+ *            \"delay\": \"30d\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMTg2Ng=="}, "originalCommit": {"oid": "f197b2ccb0f433d1a94ef046b24da0f70f373943"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTgxMDQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo0OTozN1rOIKoq5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo0OTozN1rOIKoq5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMzAxMg==", "bodyText": "Nit: delay field leftover in the comments", "url": "https://github.com/elastic/elasticsearch/pull/66714#discussion_r548023012", "createdAt": "2020-12-23T15:49:37Z", "author": {"login": "csoulios"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupActionDateHistogramGroupConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.rollup;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.fieldcaps.FieldCapabilities;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+\n+import java.io.IOException;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.common.xcontent.ObjectParser.ValueType;\n+\n+/**\n+ * The configuration object for the histograms in the rollup config\n+ *\n+ * {\n+ *     \"groups\": [\n+ *        \"date_histogram\": {\n+ *            \"field\" : \"foo\",\n+ *            \"interval\" : \"1d\",\n+ *            \"delay\": \"30d\",\n+ *            \"time_zone\" : \"EST\"\n+ *        }\n+ *     ]\n+ * }\n+ */\n+public abstract class RollupActionDateHistogramGroupConfig implements Writeable, ToXContentObject {\n+\n+    static final String NAME = \"date_histogram\";\n+    public static final String FIXED_INTERVAL = \"fixed_interval\";\n+    public static final String CALENDAR_INTERVAL = \"calendar_interval\";\n+    public static final String TIME_ZONE = \"time_zone\";\n+\n+    private static final String DEFAULT_TIMEZONE = \"UTC\";\n+    public static final ZoneId DEFAULT_ZONEID_TIMEZONE = ZoneOffset.UTC;\n+    private static final String FIELD = \"field\";\n+\n+    private static final ConstructingObjectParser<RollupActionDateHistogramGroupConfig, Void> PARSER;\n+    static {\n+        PARSER = new ConstructingObjectParser<>(NAME, a -> {\n+            DateHistogramInterval calendarInterval = (DateHistogramInterval) a[1];\n+            DateHistogramInterval fixedInterval = (DateHistogramInterval) a[2];\n+\n+            if (calendarInterval != null && fixedInterval == null) {\n+                return new CalendarInterval((String) a[0], calendarInterval, (String) a[3]);\n+            } else if (calendarInterval == null && fixedInterval != null) {\n+                return new FixedInterval((String) a[0], fixedInterval, (String) a[3]);\n+            } else if (calendarInterval != null && fixedInterval != null) {\n+                throw new IllegalArgumentException(\"Cannot set both [fixed_interval] and [calendar_interval] at the same time\");\n+            } else {\n+                throw new IllegalArgumentException(\"An interval is required.  Use [fixed_interval] or [calendar_interval].\");\n+            }\n+        });\n+        PARSER.declareString(constructorArg(), new ParseField(FIELD));\n+        PARSER.declareField(optionalConstructorArg(), p -> new DateHistogramInterval(p.text()),\n+            new ParseField(CALENDAR_INTERVAL), ValueType.STRING);\n+        PARSER.declareField(optionalConstructorArg(), p -> new DateHistogramInterval(p.text()),\n+            new ParseField(FIXED_INTERVAL), ValueType.STRING);\n+        PARSER.declareString(optionalConstructorArg(), new ParseField(TIME_ZONE));\n+    }\n+\n+    private final String field;\n+    private final DateHistogramInterval interval;\n+    private final String timeZone;\n+\n+    /**\n+     * FixedInterval is a {@link RollupActionDateHistogramGroupConfig} that uses a fixed time interval for rolling up data.\n+     * The fixed time interval is one or multiples of SI units and has no calendar-awareness (e.g. doesn't account\n+     * for leap corrections, does not have variable length months, etc).\n+     *\n+     * For calendar-aware rollups, use {@link CalendarInterval}\n+     */\n+    public static class FixedInterval extends RollupActionDateHistogramGroupConfig {\n+        private static final String TYPE_NAME = \"fixed_interval\";\n+        public FixedInterval(String field, DateHistogramInterval interval) {\n+            this(field, interval, null);\n+        }\n+\n+        public FixedInterval(String field, DateHistogramInterval interval, String timeZone) {\n+            super(field, interval, timeZone);\n+            // validate fixed time\n+            TimeValue.parseTimeValue(interval.toString(), NAME + \".FixedInterval\");\n+        }\n+\n+        @Override\n+        public String getIntervalTypeName() {\n+            return TYPE_NAME;\n+        }\n+    }\n+\n+    /**\n+     * CalendarInterval is a {@link RollupActionDateHistogramGroupConfig} that uses calendar-aware intervals for rolling up data.\n+     * Calendar time intervals understand leap corrections and contextual differences in certain calendar units (e.g.\n+     * months are variable length depending on the month).  Calendar units are only available in singular quantities:\n+     * 1s, 1m, 1h, 1d, 1w, 1q, 1M, 1y\n+     *\n+     * For fixed time rollups, use {@link FixedInterval}\n+     */\n+    public static class CalendarInterval extends RollupActionDateHistogramGroupConfig {\n+        private static final String TYPE_NAME = \"calendar_interval\";\n+        public CalendarInterval(String field, DateHistogramInterval interval) {\n+            this(field, interval, null);\n+        }\n+\n+        public CalendarInterval(String field, DateHistogramInterval interval, String timeZone) {\n+            super(field, interval, timeZone);\n+            if (DateHistogramAggregationBuilder.DATE_FIELD_UNITS.get(interval.toString()) == null) {\n+                throw new IllegalArgumentException(\"The supplied interval [\" + interval +\"] could not be parsed \" +\n+                    \"as a calendar interval.\");\n+            }\n+        }\n+\n+        @Override\n+        public String getIntervalTypeName() {\n+            return TYPE_NAME;\n+        }\n+    }\n+\n+    /**\n+     * Create a new {@link RollupActionDateHistogramGroupConfig} using the given field and interval parameters.\n+     */\n+    protected RollupActionDateHistogramGroupConfig(final String field, final DateHistogramInterval interval) {\n+        this(field, interval, null);\n+    }\n+\n+    /**\n+     * Create a new {@link RollupActionDateHistogramGroupConfig} using the given configuration parameters.\n+     * <p>\n+     *     The {@code field} and {@code interval} are required to compute the date histogram for the rolled up documents.\n+     *     The {@code delay} is optional and can be set to {@code null}. It defines how long to wait before rolling up new documents.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f197b2ccb0f433d1a94ef046b24da0f70f373943"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4406, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}