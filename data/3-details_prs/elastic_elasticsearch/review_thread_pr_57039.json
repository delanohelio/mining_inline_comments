{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzUwMzAz", "number": 57039, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOTo1Nzo0MlrOD_L5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyMzowNFrOEB0p0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTgxODY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOTo1Nzo0MlrOGZt4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOTo1Nzo0MlrOGZt4eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxOTMyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    key -> Setting.intSetting(key, 80, Setting.Property.NodeScope));\n          \n          \n            \n                    key -> Setting.intSetting(key, 80, 1, 65535, Setting.Property.NodeScope), () -> HTTP_PROXY_HOST);", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429619320", "createdAt": "2020-05-24T09:57:42Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "diffHunk": "@@ -139,6 +139,15 @@ private OpenIdConnectRealmSettings() {\n     public static final Setting.AffixSetting<Integer> HTTP_MAX_ENDPOINT_CONNECTIONS\n         = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.max_endpoint_connections\",\n         key -> Setting.intSetting(key, 200, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n+        key -> Setting.simpleString(key, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<Integer> HTTP_PROXY_PORT\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.port\",\n+        key -> Setting.intSetting(key, 80, Setting.Property.NodeScope));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTk1MDY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzozNjo0NlrOGZu_3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNToxMTozOVrOGZvibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzU5Ng==", "bodyText": "The value validation for hostname is probably overkill in this form, it might be more pragmatic to use smth similar to TextUtils.containsBlanks(argument), but I prefer it like this because it doesn't require assuming anything about the validations that HttpHost may do internally.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n          \n          \n            \n                    key -> Setting.simpleString(key, Setting.Property.NodeScope));\n          \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n          \n          \n            \n                    key -> Setting.simpleString(key, \"\", new Setting.Validator<String>() {\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void validate(final String value) {\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void validate(final String value, final Map<Setting<?>, Object> settings) {\n          \n          \n            \n                            switch (value) {\n          \n          \n            \n                                case \"\":\n          \n          \n            \n                                    break;\n          \n          \n            \n                                default:\n          \n          \n            \n                                    final String namespace = HTTP_PROXY_HOST.getNamespace(HTTP_PROXY_HOST.getConcreteSetting(key));\n          \n          \n            \n                                    final Integer port = (Integer) settings.get(HTTP_PROXY_PORT.getConcreteSettingForNamespace(namespace));\n          \n          \n            \n                                    final String scheme = (String) settings.get(HTTP_PROXY_SCHEME.getConcreteSettingForNamespace(namespace));\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        new HttpHost(value, port, scheme);\n          \n          \n            \n                                    } catch (Exception e) {\n          \n          \n            \n                                        throw new SettingsException(\"host [\" + value + \"] for key [\" + key + \"] is invalid\", e);\n          \n          \n            \n                                    }\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public Iterator<Setting<?>> settings() {\n          \n          \n            \n                            final String namespace = HTTP_PROXY_HOST.getNamespace(HTTP_PROXY_HOST.getConcreteSetting(key));\n          \n          \n            \n                            final List<Setting<?>> settings = List.of(HTTP_PROXY_PORT.getConcreteSettingForNamespace(namespace),\n          \n          \n            \n                                    HTTP_PROXY_SCHEME.getConcreteSettingForNamespace(namespace));\n          \n          \n            \n                            return settings.iterator();\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                    }, Setting.Property.NodeScope));", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429637596", "createdAt": "2020-05-24T13:36:46Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "diffHunk": "@@ -139,6 +139,15 @@ private OpenIdConnectRealmSettings() {\n     public static final Setting.AffixSetting<Integer> HTTP_MAX_ENDPOINT_CONNECTIONS\n         = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.max_endpoint_connections\",\n         key -> Setting.intSetting(key, 200, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n+        key -> Setting.simpleString(key, Setting.Property.NodeScope));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NjQ0Ng==", "bodyText": "The value validation for hostname is probably overkill in this form\n\nNah, I like delegating the validation to the class that would actually do it in runtime too, +1", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429646446", "createdAt": "2020-05-24T15:11:39Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "diffHunk": "@@ -139,6 +139,15 @@ private OpenIdConnectRealmSettings() {\n     public static final Setting.AffixSetting<Integer> HTTP_MAX_ENDPOINT_CONNECTIONS\n         = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.max_endpoint_connections\",\n         key -> Setting.intSetting(key, 200, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n+        key -> Setting.simpleString(key, Setting.Property.NodeScope));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzU5Ng=="}, "originalCommit": {"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTk1MDc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzozNjo1M1rOGZu_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzozNjo1M1rOGZu_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzYxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_SCHEME\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.scheme\",\n          \n          \n            \n                    key -> Setting.simpleString(key, \"http\", Setting.Property.NodeScope));\n          \n          \n            \n                public static final Setting.AffixSetting<String> HTTP_PROXY_SCHEME\n          \n          \n            \n                    = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.scheme\",\n          \n          \n            \n                    key -> Setting.simpleString(key, \"http\", scheme -> {\n          \n          \n            \n                        String normalizedScheme = scheme.toLowerCase(Locale.ROOT);\n          \n          \n            \n                        if (false == (\"https\".equals(normalizedScheme) || \"http\".equals(normalizedScheme))) {\n          \n          \n            \n                            throw new SettingsException(\"scheme [\" + scheme + \"] for key [\" + key + \"] is invalid, not http or https\");\n          \n          \n            \n                        }\n          \n          \n            \n                    }, Setting.Property.NodeScope), () -> HTTP_PROXY_HOST);", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429637610", "createdAt": "2020-05-24T13:36:53Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/oidc/OpenIdConnectRealmSettings.java", "diffHunk": "@@ -139,6 +139,15 @@ private OpenIdConnectRealmSettings() {\n     public static final Setting.AffixSetting<Integer> HTTP_MAX_ENDPOINT_CONNECTIONS\n         = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.max_endpoint_connections\",\n         key -> Setting.intSetting(key, 200, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_HOST\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.host\",\n+        key -> Setting.simpleString(key, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<Integer> HTTP_PROXY_PORT\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.port\",\n+        key -> Setting.intSetting(key, 80, Setting.Property.NodeScope));\n+    public static final Setting.AffixSetting<String> HTTP_PROXY_SCHEME\n+        = Setting.affixKeySetting(RealmSettings.realmSettingPrefix(TYPE), \"http.proxy.scheme\",\n+        key -> Setting.simpleString(key, \"http\", Setting.Property.NodeScope));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTk1MjAzOnYy", "diffSide": "RIGHT", "path": "x-pack/qa/oidc-op-tests/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzozODoxOFrOGZvAhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo1MjoyOFrOGeM-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzc2Nw==", "bodyText": "typo ephmeralOpPort -> ephemeralOpPort", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r429637767", "createdAt": "2020-05-24T13:38:18Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/qa/oidc-op-tests/build.gradle", "diffHunk": "@@ -12,13 +12,15 @@ dependencies {\n }\n testFixtures.useFixture \":x-pack:test:idp-fixture\", \"oidc-provider\"\n \n-String ephemeralPort;\n+String ephmeralOpPort", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwOTQyNg==", "bodyText": "this nit is still standing", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r434009426", "createdAt": "2020-06-02T16:23:16Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/qa/oidc-op-tests/build.gradle", "diffHunk": "@@ -12,13 +12,15 @@ dependencies {\n }\n testFixtures.useFixture \":x-pack:test:idp-fixture\", \"oidc-provider\"\n \n-String ephemeralPort;\n+String ephmeralOpPort", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzc2Nw=="}, "originalCommit": {"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjk1NQ==", "bodyText": "\ud83e\udd26", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r434322955", "createdAt": "2020-06-03T05:52:28Z", "author": {"login": "jkakavas"}, "path": "x-pack/qa/oidc-op-tests/build.gradle", "diffHunk": "@@ -12,13 +12,15 @@ dependencies {\n }\n testFixtures.useFixture \":x-pack:test:idp-fixture\", \"oidc-provider\"\n \n-String ephemeralPort;\n+String ephmeralOpPort", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzc2Nw=="}, "originalCommit": {"oid": "11fbefdf6825e788226e543f2b1628ffe62a1212"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQ2NzA2OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/security-settings.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyMzowNFrOGd50yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyMzowNFrOGd50yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwOTI4OA==", "bodyText": "nit \"backchannel\" is a valid english word.", "url": "https://github.com/elastic/elasticsearch/pull/57039#discussion_r434009288", "createdAt": "2020-06-02T16:23:04Z", "author": {"login": "albertzaharovits"}, "path": "docs/reference/settings/security-settings.asciidoc", "diffHunk": "@@ -1347,6 +1347,24 @@ id tokens with regards to their creation and expiration times.\n Specifies whether to populate the {es} user's metadata with the values that are\n provided by the OpenID Connect claims. Defaults to `true`.\n \n+`http.proxy.host`::\n+Specifies the address of the proxy server that will be used by the internal\n+http client for all back-channel communication to the OpenID Connect Provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa5df032e9a66266c85b3ba97a446277f36b53dc"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 270, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}