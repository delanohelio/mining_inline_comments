{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTgwNzY0", "number": 62960, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozODo0NFrOEoHF_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo1MDowMFrOEogv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk0NzE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozODo0NFrOHZA0LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1OToyMlrOHZB-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4OTgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ImmutableOpenMap<String, MappingMetadata> mappings = indexResponse.mappings();\n          \n          \n            \n                            Map<String, Object> sourceAsMap = mappings.valuesIt().next().getSourceAsMap();\n          \n      \n    \n    \n  \n\nSeems unused?", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r495989804", "createdAt": "2020-09-28T14:38:44Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -304,6 +326,8 @@ private void reindexDataframeAndStartAnalysis(DataFrameAnalyticsTask task, DataF\n         // Create destination index if it does not exist\n         ActionListener<GetIndexResponse> destIndexListener = ActionListener.wrap(\n             indexResponse -> {\n+                ImmutableOpenMap<String, MappingMetadata> mappings = indexResponse.mappings();\n+                Map<String, Object> sourceAsMap = mappings.valuesIt().next().getSourceAsMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwODkyNA==", "bodyText": "Ah, leftover I forgot to delete. Thanks for catching!", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496008924", "createdAt": "2020-09-28T14:59:22Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -304,6 +326,8 @@ private void reindexDataframeAndStartAnalysis(DataFrameAnalyticsTask task, DataF\n         // Create destination index if it does not exist\n         ActionListener<GetIndexResponse> destIndexListener = ActionListener.wrap(\n             indexResponse -> {\n+                ImmutableOpenMap<String, MappingMetadata> mappings = indexResponse.mappings();\n+                Map<String, Object> sourceAsMap = mappings.valuesIt().next().getSourceAsMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4OTgwNA=="}, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk1MjEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozOTo0OFrOHZA3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozOTo0OFrOHZA3IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MDU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[{}] Destination index version [{}]\", jobId, destIndexVersion);\n          \n          \n            \n                        logger.debug(() -> new ParameterizedMessage(\"[{}] Destination index version [{}]\", jobId, destIndexVersion));", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r495990560", "createdAt": "2020-09-28T14:39:48Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -220,4 +233,24 @@ private static void checkResultsFieldIsNotPresentInProperties(DataFrameAnalytics\n                 DataFrameAnalyticsDest.RESULTS_FIELD.getPreferredName());\n         }\n     }\n+\n+    public static boolean isCompatible(String jobId, MappingMetadata mappingMetadata) {\n+        try {\n+            Version destIndexVersion = getVersion(mappingMetadata);\n+            logger.debug(\"[{}] Destination index version [{}]\", jobId, destIndexVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk5MzY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0ODozMlrOHZBQog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowMDozMFrOHZCEZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NzA5MA==", "bodyText": "In my opinion (loosely held) it would be good to say \"index was created in version X, but minimum supported version is version Y. Starting from scratch\" or something.", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r495997090", "createdAt": "2020-09-28T14:48:32Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -90,6 +93,25 @@ public void execute(DataFrameAnalyticsTask task, DataFrameAnalyticsState current\n         // With config in hand, determine action to take\n         ActionListener<DataFrameAnalyticsConfig> configListener = ActionListener.wrap(\n             config -> {\n+                // Check if existing destination index is incompatible.\n+                // If it is, we delete it and start from reindexing.\n+                IndexMetadata destIndex = clusterState.getMetadata().index(config.getDest().getIndex());\n+                if (destIndex != null) {\n+                    MappingMetadata destIndexMapping = clusterState.getMetadata().index(config.getDest().getIndex()).mapping();\n+                    if (DestinationIndex.isCompatible(config.getId(), destIndexMapping) == false) {\n+                        LOGGER.info(\"[{}] Destination index is out of date; will delete and reindex from scratch\", config.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxMDM0MA==", "bodyText": "Yeah, I agree. It just makes the code a bit uglier as I have to get the version separately. But it's probably worth it. I'll do that which means I can remove entirely the other debug message about the version.", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496010340", "createdAt": "2020-09-28T15:00:30Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -90,6 +93,25 @@ public void execute(DataFrameAnalyticsTask task, DataFrameAnalyticsState current\n         // With config in hand, determine action to take\n         ActionListener<DataFrameAnalyticsConfig> configListener = ActionListener.wrap(\n             config -> {\n+                // Check if existing destination index is incompatible.\n+                // If it is, we delete it and start from reindexing.\n+                IndexMetadata destIndex = clusterState.getMetadata().index(config.getDest().getIndex());\n+                if (destIndex != null) {\n+                    MappingMetadata destIndexMapping = clusterState.getMetadata().index(config.getDest().getIndex()).mapping();\n+                    if (DestinationIndex.isCompatible(config.getId(), destIndexMapping) == false) {\n+                        LOGGER.info(\"[{}] Destination index is out of date; will delete and reindex from scratch\", config.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NzA5MA=="}, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODYwNzUxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOToyMDozMFrOHZkHLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1MjoxMlrOHZuTHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2ODEwOA==", "bodyText": "As an aside, the created version is in index settings  (GET myindex/_settings) as far as I can tell that happens automatically.\n\n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java\n    \n    \n         Line 386\n      in\n      0ec40a0\n    \n    \n    \n    \n\n        \n          \n           private final Version indexCreatedVersion; \n        \n    \n  \n\n\nIs there a reason to prefer this usage?", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496568108", "createdAt": "2020-09-29T09:20:30Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -164,11 +176,12 @@ private static Integer findMaxSettingValue(GetSettingsResponse settingsResponse,\n         return properties;\n     }\n \n-    private static Map<String, Object> createMetadata(String analyticsId, Clock clock) {\n+    // Visible for testing\n+    static Map<String, Object> createMetadata(String analyticsId, Clock clock, Version version) {\n         Map<String, Object> metadata = new HashMap<>();\n         metadata.put(CREATION_DATE_MILLIS, clock.millis());\n         metadata.put(CREATED_BY, \"data-frame-analytics\");\n-        metadata.put(VERSION, Map.of(CREATED, Version.CURRENT));\n+        metadata.put(VERSION, Map.of(CREATED, version.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjgxOQ==", "bodyText": "I think it was originally added not realizing version was already available.\nThinking about it though, I wonder if there is a benefit reading the version from _meta. Unlike the index settings, we can overwrite _meta. That would leave an open option if in the feature we had to manually upgrade an index and tag it so by updating the version in _meta. Does that make sense or am I just sugar coating it? :-)", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496606819", "createdAt": "2020-09-29T10:22:29Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -164,11 +176,12 @@ private static Integer findMaxSettingValue(GetSettingsResponse settingsResponse,\n         return properties;\n     }\n \n-    private static Map<String, Object> createMetadata(String analyticsId, Clock clock) {\n+    // Visible for testing\n+    static Map<String, Object> createMetadata(String analyticsId, Clock clock, Version version) {\n         Map<String, Object> metadata = new HashMap<>();\n         metadata.put(CREATION_DATE_MILLIS, clock.millis());\n         metadata.put(CREATED_BY, \"data-frame-analytics\");\n-        metadata.put(VERSION, Map.of(CREATED, Version.CURRENT));\n+        metadata.put(VERSION, Map.of(CREATED, version.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2ODEwOA=="}, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNTg5OA==", "bodyText": "That would leave an open option if in the feature we had to manually upgrade an index and tag it so by updating the version in _meta.\n\nThis is what we do with most ML indices.  The version in _meta refers not to the version the index was created in, but to the version that the mappings were last updated in.  So there's definitely a benefit in us storing a version that's not constrained to be the same as the creation version.  But in this case the field that stores the version is called created.  It's really a schema version that we want.", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496615898", "createdAt": "2020-09-29T10:39:04Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -164,11 +176,12 @@ private static Integer findMaxSettingValue(GetSettingsResponse settingsResponse,\n         return properties;\n     }\n \n-    private static Map<String, Object> createMetadata(String analyticsId, Clock clock) {\n+    // Visible for testing\n+    static Map<String, Object> createMetadata(String analyticsId, Clock clock, Version version) {\n         Map<String, Object> metadata = new HashMap<>();\n         metadata.put(CREATION_DATE_MILLIS, clock.millis());\n         metadata.put(CREATED_BY, \"data-frame-analytics\");\n-        metadata.put(VERSION, Map.of(CREATED, Version.CURRENT));\n+        metadata.put(VERSION, Map.of(CREATED, version.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2ODEwOA=="}, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1NTQyMA==", "bodyText": "Right, agreed, the fact that the version is keys as created is not ideal. We could change this though it'll come with some BWC code.", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496655420", "createdAt": "2020-09-29T11:53:38Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -164,11 +176,12 @@ private static Integer findMaxSettingValue(GetSettingsResponse settingsResponse,\n         return properties;\n     }\n \n-    private static Map<String, Object> createMetadata(String analyticsId, Clock clock) {\n+    // Visible for testing\n+    static Map<String, Object> createMetadata(String analyticsId, Clock clock, Version version) {\n         Map<String, Object> metadata = new HashMap<>();\n         metadata.put(CREATION_DATE_MILLIS, clock.millis());\n         metadata.put(CREATED_BY, \"data-frame-analytics\");\n-        metadata.put(VERSION, Map.of(CREATED, Version.CURRENT));\n+        metadata.put(VERSION, Map.of(CREATED, version.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2ODEwOA=="}, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczNTAwNQ==", "bodyText": "It is consistent with the other ml indices we should stick to this pattern", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496735005", "createdAt": "2020-09-29T13:52:12Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -164,11 +176,12 @@ private static Integer findMaxSettingValue(GetSettingsResponse settingsResponse,\n         return properties;\n     }\n \n-    private static Map<String, Object> createMetadata(String analyticsId, Clock clock) {\n+    // Visible for testing\n+    static Map<String, Object> createMetadata(String analyticsId, Clock clock, Version version) {\n         Map<String, Object> metadata = new HashMap<>();\n         metadata.put(CREATION_DATE_MILLIS, clock.millis());\n         metadata.put(CREATED_BY, \"data-frame-analytics\");\n-        metadata.put(VERSION, Map.of(CREATED, Version.CURRENT));\n+        metadata.put(VERSION, Map.of(CREATED, version.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2ODEwOA=="}, "originalCommit": {"oid": "2cd58ab0f6d84f5070afee8e158ef712012da42c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTE0Mzk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo0ODowNlrOHZpRSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyNzo0N1rOHZtHVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MjYxNg==", "bodyText": "Isn't interface with subclasses an overkill here?\nHow about turning Metadata into a POJO class with 2 fields: boolean hasMetadata and Version version?", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496652616", "createdAt": "2020-09-29T11:48:06Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -220,4 +235,77 @@ private static void checkResultsFieldIsNotPresentInProperties(DataFrameAnalytics\n                 DataFrameAnalyticsDest.RESULTS_FIELD.getPreferredName());\n         }\n     }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Metadata readMetadata(String jobId, MappingMetadata mappingMetadata) {\n+        Map<String, Object> mappings = mappingMetadata.getSourceAsMap();\n+        Map<String, Object> meta = (Map<String, Object>) mappings.get(META);\n+        if (meta == null || DFA_CREATOR.equals(meta.get(CREATED_BY)) == false) {\n+            return new NoMetadata();\n+        }\n+        return new DestMetadata(getVersion(jobId, meta));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static Version getVersion(String jobId, Map<String, Object> meta) {\n+        try {\n+            Map<String, Object> version = (Map<String, Object>) meta.get(VERSION);\n+            String createdVersionString = (String) version.get(CREATED);\n+            return Version.fromString(createdVersionString);\n+        } catch (Exception e) {\n+            logger.error(new ParameterizedMessage(\"[{}] Could not retrieve destination index version\", jobId), e);\n+            return null;\n+        }\n+    }\n+\n+    public interface Metadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ab73f3834795c3133d67ef092a6bfe7ac32982"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNTYwNg==", "bodyText": "I've tried this out and we end up with a single Metadata class that looks like this:\n    private static class Metadata {\n\n        private final boolean hasMetadata;\n        private final Version version;\n\n        private Metadata(boolean hasMetadata, @Nullable Version version) {\n            this.hasMetadata = hasMetadata;\n            this.version = version;\n        }\n\n        public boolean hasMetadata() {\n            return hasMetadata;\n        }\n\n        public boolean isCompatible() {\n            if (hasMetadata) {\n                return version == null ? false : version.onOrAfter(MIN_COMPATIBLE_VERSION);\n            }\n            throw new UnsupportedOperationException();\n        }\n\n        public String getVersion() {\n            if (hasMetadata) {\n                return version == null ? \"unknown\" : version.toString();\n            }\n            throw new UnsupportedOperationException();\n        }\n    }\n\nWhile this results to fewer lines of code, I feel the interface approach results into easier to understand and follow code. The NoMetadata implementation is straightforward and it frees up the other one not to worry about those unsupported operation exceptions.", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496715606", "createdAt": "2020-09-29T13:27:47Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -220,4 +235,77 @@ private static void checkResultsFieldIsNotPresentInProperties(DataFrameAnalytics\n                 DataFrameAnalyticsDest.RESULTS_FIELD.getPreferredName());\n         }\n     }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Metadata readMetadata(String jobId, MappingMetadata mappingMetadata) {\n+        Map<String, Object> mappings = mappingMetadata.getSourceAsMap();\n+        Map<String, Object> meta = (Map<String, Object>) mappings.get(META);\n+        if (meta == null || DFA_CREATOR.equals(meta.get(CREATED_BY)) == false) {\n+            return new NoMetadata();\n+        }\n+        return new DestMetadata(getVersion(jobId, meta));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static Version getVersion(String jobId, Map<String, Object> meta) {\n+        try {\n+            Map<String, Object> version = (Map<String, Object>) meta.get(VERSION);\n+            String createdVersionString = (String) version.get(CREATED);\n+            return Version.fromString(createdVersionString);\n+        } catch (Exception e) {\n+            logger.error(new ParameterizedMessage(\"[{}] Could not retrieve destination index version\", jobId), e);\n+            return null;\n+        }\n+    }\n+\n+    public interface Metadata {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MjYxNg=="}, "originalCommit": {"oid": "d5ab73f3834795c3133d67ef092a6bfe7ac32982"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTE0NjEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo0ODo0NlrOHZpSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo0ODo0NlrOHZpSjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1Mjk0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (meta == null || DFA_CREATOR.equals(meta.get(CREATED_BY)) == false) {\n          \n          \n            \n                    if ((meta == null) || (DFA_CREATOR.equals(meta.get(CREATED_BY)) == false)) {", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496652943", "createdAt": "2020-09-29T11:48:46Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DestinationIndex.java", "diffHunk": "@@ -220,4 +235,77 @@ private static void checkResultsFieldIsNotPresentInProperties(DataFrameAnalytics\n                 DataFrameAnalyticsDest.RESULTS_FIELD.getPreferredName());\n         }\n     }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Metadata readMetadata(String jobId, MappingMetadata mappingMetadata) {\n+        Map<String, Object> mappings = mappingMetadata.getSourceAsMap();\n+        Map<String, Object> meta = (Map<String, Object>) mappings.get(META);\n+        if (meta == null || DFA_CREATOR.equals(meta.get(CREATED_BY)) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ab73f3834795c3133d67ef092a6bfe7ac32982"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTE1MDUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo1MDowMFrOHZpVJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo1MDowMFrOHZpVJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MzYwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (metadata.hasMetadata() && metadata.isCompatible() == false) {\n          \n          \n            \n                                if (metadata.hasMetadata() && (metadata.isCompatible() == false)) {", "url": "https://github.com/elastic/elasticsearch/pull/62960#discussion_r496653607", "createdAt": "2020-09-29T11:50:00Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -90,6 +92,28 @@ public void execute(DataFrameAnalyticsTask task, DataFrameAnalyticsState current\n         // With config in hand, determine action to take\n         ActionListener<DataFrameAnalyticsConfig> configListener = ActionListener.wrap(\n             config -> {\n+                // Check if existing destination index is incompatible.\n+                // If it is, we delete it and start from reindexing.\n+                IndexMetadata destIndex = clusterState.getMetadata().index(config.getDest().getIndex());\n+                if (destIndex != null) {\n+                    MappingMetadata destIndexMapping = clusterState.getMetadata().index(config.getDest().getIndex()).mapping();\n+                    DestinationIndex.Metadata metadata = DestinationIndex.readMetadata(config.getId(), destIndexMapping);\n+                    if (metadata.hasMetadata() && metadata.isCompatible() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ab73f3834795c3133d67ef092a6bfe7ac32982"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3378, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}