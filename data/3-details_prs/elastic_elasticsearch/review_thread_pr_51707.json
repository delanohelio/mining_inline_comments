{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzAwNTU3", "number": 51707, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTozMDo1NFrODcHOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTowMzo0OFrODcW3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODA1MTI0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTozMDo1NFrOFj_Mhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTozMDo1NFrOFj_Mhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3OTg3OA==", "bodyText": "I think it would be more readable with stderr and stdout moved to their own lines.", "url": "https://github.com/elastic/elasticsearch/pull/51707#discussion_r373279878", "createdAt": "2020-01-31T01:30:54Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "diffHunk": "@@ -208,14 +208,24 @@ private static Result runCommand(Project project, String... args) {\n         ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n         ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n \n-        final ExecResult execResult = project.exec(spec -> {\n-            // The redundant cast is to silence a compiler warning.\n-            spec.setCommandLine((Object[]) args);\n-            spec.setStandardOutput(stdout);\n-            spec.setErrorOutput(stderr);\n-        });\n-\n-        return new Result(execResult.getExitValue(), stdout.toString(), stderr.toString());\n+        try {\n+            final ExecResult execResult = project.exec(spec -> {\n+                // The redundant cast is to silence a compiler warning.\n+                spec.setCommandLine((Object[]) args);\n+                spec.setStandardOutput(stdout);\n+                spec.setErrorOutput(stderr);\n+            });\n+            return new Result(execResult.getExitValue(), stdout.toString(), stderr.toString());\n+        } catch (GradleException ex) {\n+            final String message = String.format(\n+                Locale.ROOT,\n+                \"Error occurred running command [%s] stderr: [%s] stdout: [%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ab73c37535b9c59b47e420123bf4d4e895b83e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTg5MDM2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjoyNjoxOFrOFkQudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjoyNjoxOFrOFkQudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2NzA5NQ==", "bodyText": "Rather than doing this via generic exception handling let's set spec.setIgnoreExitValue(true) and throw our own exception if the result is a non-zero exit value. That way if we blow up for some other reason (bad config, Gradle issue) we aren't returning a potentially misleading exception message.", "url": "https://github.com/elastic/elasticsearch/pull/51707#discussion_r373567095", "createdAt": "2020-01-31T16:26:18Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "diffHunk": "@@ -208,14 +208,26 @@ private static Result runCommand(Project project, String... args) {\n         ByteArrayOutputStream stdout = new ByteArrayOutputStream();\n         ByteArrayOutputStream stderr = new ByteArrayOutputStream();\n \n-        final ExecResult execResult = project.exec(spec -> {\n-            // The redundant cast is to silence a compiler warning.\n-            spec.setCommandLine((Object[]) args);\n-            spec.setStandardOutput(stdout);\n-            spec.setErrorOutput(stderr);\n-        });\n-\n-        return new Result(execResult.getExitValue(), stdout.toString(), stderr.toString());\n+        try {\n+            final ExecResult execResult = project.exec(spec -> {\n+                // The redundant cast is to silence a compiler warning.\n+                spec.setCommandLine((Object[]) args);\n+                spec.setStandardOutput(stdout);\n+                spec.setErrorOutput(stderr);\n+            });\n+            return new Result(execResult.getExitValue(), stdout.toString(), stderr.toString());\n+        } catch (GradleException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844d0f8c74987b00b90aa91faf1bb51247ba5577"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDYxMzA4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTowMzo0OFrOFkX4Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTozMTo1MlrOFkYhZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NDMxNA==", "bodyText": "This seems unnecessary to me. This final message is meant to be a catch-all anyway so I don't think there's much benefit in trying to be any more specific in the error message.", "url": "https://github.com/elastic/elasticsearch/pull/51707#discussion_r373684314", "createdAt": "2020-01-31T21:03:48Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "diffHunk": "@@ -165,11 +155,19 @@ public static void assertDockerIsAvailable(Project project, List<String> tasks)\n             throwDockerRequiredException(message);\n         }\n \n+        final String operation;\n+        if (availability.version == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f117cbb97bd1e29568dd8447c617ab0a8c00b74"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5MDkyMQ==", "bodyText": "It was helpful to me to figure out which command docker is failing on my machine, so I can run this command and see if it works or not. I am ok with removing it, since the error message was more helpful anyway.", "url": "https://github.com/elastic/elasticsearch/pull/51707#discussion_r373690921", "createdAt": "2020-01-31T21:21:22Z", "author": {"login": "imotov"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "diffHunk": "@@ -165,11 +155,19 @@ public static void assertDockerIsAvailable(Project project, List<String> tasks)\n             throwDockerRequiredException(message);\n         }\n \n+        final String operation;\n+        if (availability.version == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NDMxNA=="}, "originalCommit": {"oid": "5f117cbb97bd1e29568dd8447c617ab0a8c00b74"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5NDgyMg==", "bodyText": "If we consider this valuable I'd prefer we wire the actual command through Result and just display that in this error rather than a simple hard-coded description.", "url": "https://github.com/elastic/elasticsearch/pull/51707#discussion_r373694822", "createdAt": "2020-01-31T21:31:52Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/tool/DockerUtils.java", "diffHunk": "@@ -165,11 +155,19 @@ public static void assertDockerIsAvailable(Project project, List<String> tasks)\n             throwDockerRequiredException(message);\n         }\n \n+        final String operation;\n+        if (availability.version == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NDMxNA=="}, "originalCommit": {"oid": "5f117cbb97bd1e29568dd8447c617ab0a8c00b74"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 155, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}