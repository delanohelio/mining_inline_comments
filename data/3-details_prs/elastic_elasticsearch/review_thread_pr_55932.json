{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzAwNDI5", "number": 55932, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzowNjowM1rOD3nhDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTozMzowMVrOD391-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjQ1NzA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzowNjowM1rOGN94XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowMjozOFrOGODQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5ODUyNQ==", "bodyText": "I was wondering, is it just DelayedWriteable or DelayedReadWriteable ? Because it's not that you can choose to delay its reading, it's the only way that it works?", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417298525", "createdAt": "2020-04-29T13:06:03Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.\n+ * The node that produces the {@link Writeable} calls {@link #referencing(Writeable)}\n+ * to create a {@link DelayableWriteable} that serializes the inner object\n+ * first to a buffer and writes the content of the buffer to the {@link StreamOutput}.\n+ * The receiver node calls {@link #delayed(Reader, StreamInput)} to create a\n+ * {@link DelayableWriteable} that reads the buffer from the @link {@link StreamInput}\n+ * but delays creating the actual object by calling {@link #expand()} when needed.\n+ * Multiple {@link DelayableWriteable}s coming from different nodes may be buffered\n+ * on the receiver end, which may hold a mix of {@link DelayableWriteable}s that were\n+ * produced locally (hence expanded) as well as received form another node (hence subject\n+ * to delayed expansion). When such objects are buffered for some time it is desirable\n+ * to force their buffering in serialized format by calling\n+ * {@link #asSerialized(Reader, NamedWriteableRegistry)}.\n  */\n-public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {\n+public abstract class DelayableWriteable<T extends Writeable> implements Writeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwNTY0OQ==", "bodyText": "I guess so. I figured Writeable was the name for things that we threw across the wire and calling it Delayed was enough to imply that it delayed reading because that was sort of the only thing you could delay.\nAt this point, given how we use it, it might be more correct to call it PotentiallySerializedWriteable. But that is kind of mouthful. I think the whole \"Delayed\" bit of the name was perfect for the first PR that built it but it is less and less perfect now.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417305649", "createdAt": "2020-04-29T13:17:17Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.\n+ * The node that produces the {@link Writeable} calls {@link #referencing(Writeable)}\n+ * to create a {@link DelayableWriteable} that serializes the inner object\n+ * first to a buffer and writes the content of the buffer to the {@link StreamOutput}.\n+ * The receiver node calls {@link #delayed(Reader, StreamInput)} to create a\n+ * {@link DelayableWriteable} that reads the buffer from the @link {@link StreamInput}\n+ * but delays creating the actual object by calling {@link #expand()} when needed.\n+ * Multiple {@link DelayableWriteable}s coming from different nodes may be buffered\n+ * on the receiver end, which may hold a mix of {@link DelayableWriteable}s that were\n+ * produced locally (hence expanded) as well as received form another node (hence subject\n+ * to delayed expansion). When such objects are buffered for some time it is desirable\n+ * to force their buffering in serialized format by calling\n+ * {@link #asSerialized(Reader, NamedWriteableRegistry)}.\n  */\n-public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {\n+public abstract class DelayableWriteable<T extends Writeable> implements Writeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5ODUyNQ=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0MjY3MA==", "bodyText": "but why Delayed VS Delayable for instance?", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417342670", "createdAt": "2020-04-29T14:07:10Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.\n+ * The node that produces the {@link Writeable} calls {@link #referencing(Writeable)}\n+ * to create a {@link DelayableWriteable} that serializes the inner object\n+ * first to a buffer and writes the content of the buffer to the {@link StreamOutput}.\n+ * The receiver node calls {@link #delayed(Reader, StreamInput)} to create a\n+ * {@link DelayableWriteable} that reads the buffer from the @link {@link StreamInput}\n+ * but delays creating the actual object by calling {@link #expand()} when needed.\n+ * Multiple {@link DelayableWriteable}s coming from different nodes may be buffered\n+ * on the receiver end, which may hold a mix of {@link DelayableWriteable}s that were\n+ * produced locally (hence expanded) as well as received form another node (hence subject\n+ * to delayed expansion). When such objects are buffered for some time it is desirable\n+ * to force their buffering in serialized format by calling\n+ * {@link #asSerialized(Reader, NamedWriteableRegistry)}.\n  */\n-public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {\n+public abstract class DelayableWriteable<T extends Writeable> implements Writeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5ODUyNQ=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0Nzk1Ng==", "bodyText": "Because the referencing implementation isn't delayed.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417347956", "createdAt": "2020-04-29T14:13:58Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.\n+ * The node that produces the {@link Writeable} calls {@link #referencing(Writeable)}\n+ * to create a {@link DelayableWriteable} that serializes the inner object\n+ * first to a buffer and writes the content of the buffer to the {@link StreamOutput}.\n+ * The receiver node calls {@link #delayed(Reader, StreamInput)} to create a\n+ * {@link DelayableWriteable} that reads the buffer from the @link {@link StreamInput}\n+ * but delays creating the actual object by calling {@link #expand()} when needed.\n+ * Multiple {@link DelayableWriteable}s coming from different nodes may be buffered\n+ * on the receiver end, which may hold a mix of {@link DelayableWriteable}s that were\n+ * produced locally (hence expanded) as well as received form another node (hence subject\n+ * to delayed expansion). When such objects are buffered for some time it is desirable\n+ * to force their buffering in serialized format by calling\n+ * {@link #asSerialized(Reader, NamedWriteableRegistry)}.\n  */\n-public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {\n+public abstract class DelayableWriteable<T extends Writeable> implements Writeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5ODUyNQ=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MzIxMw==", "bodyText": "I find that that is a lie :) because writeTo will always do the two steps serialization that will allow for delaying the deserialization on the other side. The point is that referencing is only on the producer side hence you never read into referencing from the stream? Maybe a bit of a philosophical discussion.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417383213", "createdAt": "2020-04-29T14:58:08Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.\n+ * The node that produces the {@link Writeable} calls {@link #referencing(Writeable)}\n+ * to create a {@link DelayableWriteable} that serializes the inner object\n+ * first to a buffer and writes the content of the buffer to the {@link StreamOutput}.\n+ * The receiver node calls {@link #delayed(Reader, StreamInput)} to create a\n+ * {@link DelayableWriteable} that reads the buffer from the @link {@link StreamInput}\n+ * but delays creating the actual object by calling {@link #expand()} when needed.\n+ * Multiple {@link DelayableWriteable}s coming from different nodes may be buffered\n+ * on the receiver end, which may hold a mix of {@link DelayableWriteable}s that were\n+ * produced locally (hence expanded) as well as received form another node (hence subject\n+ * to delayed expansion). When such objects are buffered for some time it is desirable\n+ * to force their buffering in serialized format by calling\n+ * {@link #asSerialized(Reader, NamedWriteableRegistry)}.\n  */\n-public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {\n+public abstract class DelayableWriteable<T extends Writeable> implements Writeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5ODUyNQ=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4NjcwOA==", "bodyText": "I think we should rename it to something like SerializedReference or MaybeSerializedReference so maybe its not an issue then. I get where you are coming from though. The name is icky now.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417386708", "createdAt": "2020-04-29T15:02:38Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.\n+ * The node that produces the {@link Writeable} calls {@link #referencing(Writeable)}\n+ * to create a {@link DelayableWriteable} that serializes the inner object\n+ * first to a buffer and writes the content of the buffer to the {@link StreamOutput}.\n+ * The receiver node calls {@link #delayed(Reader, StreamInput)} to create a\n+ * {@link DelayableWriteable} that reads the buffer from the @link {@link StreamInput}\n+ * but delays creating the actual object by calling {@link #expand()} when needed.\n+ * Multiple {@link DelayableWriteable}s coming from different nodes may be buffered\n+ * on the receiver end, which may hold a mix of {@link DelayableWriteable}s that were\n+ * produced locally (hence expanded) as well as received form another node (hence subject\n+ * to delayed expansion). When such objects are buffered for some time it is desirable\n+ * to force their buffering in serialized format by calling\n+ * {@link #asSerialized(Reader, NamedWriteableRegistry)}.\n  */\n-public abstract class DelayableWriteable<T extends Writeable> implements Supplier<T>, Writeable {\n+public abstract class DelayableWriteable<T extends Writeable> implements Writeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5ODUyNQ=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjQ1OTcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzowNjo0MFrOGN956A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzowNjo0MFrOGN956A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5ODkyMA==", "bodyText": "should we rename this to readDelayedWriteable ? also depending on the rename proposed above...", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417298920", "createdAt": "2020-04-29T13:06:40Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -42,7 +55,7 @@\n     /**\n      * Build a {@linkplain DelayableWriteable} that copies a buffer from\n      * the provided {@linkplain StreamInput} and deserializes the buffer\n-     * when {@link Supplier#get()} is called.\n+     * when {@link #expand()} is called.\n      */\n     public static <T extends Writeable> DelayableWriteable<T> delayed(Writeable.Reader<T> reader, StreamInput in) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjQ3MDk0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzowOTozM1rOGN-Apw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDowNzo0NlrOGOAmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMDY0Nw==", "bodyText": "I was wondering, is it an option to keep a reference to the original stream input so that we do not need this if and we can avoid exposing the new namedWriteableRegistry getter in StreamInput?", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417300647", "createdAt": "2020-04-29T13:09:33Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -136,20 +156,20 @@ public void writeTo(StreamOutput out) throws IOException {\n                  * differences in the wire protocol. This ain't efficient but\n                  * it should be quite rare.\n                  */\n-                referencing(get()).writeTo(out);\n+                referencing(expand()).writeTo(out);\n             }\n         }\n \n         @Override\n-        public T get() {\n+        public T expand() {\n             try {\n                 try (StreamInput in = registry == null ?\n                         serialized.streamInput() : new NamedWriteableAwareStreamInput(serialized.streamInput(), registry)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwOTIzNw==", "bodyText": "I think we could keep a reference to the original StreamInput but we'd still need to read the serialized bytes from it.\nI wonder if keeping a reference to the StreamInput would keep a reference to its underlying storage. If it did then it'd probably be bad to keep the reference.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417309237", "createdAt": "2020-04-29T13:22:41Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -136,20 +156,20 @@ public void writeTo(StreamOutput out) throws IOException {\n                  * differences in the wire protocol. This ain't efficient but\n                  * it should be quite rare.\n                  */\n-                referencing(get()).writeTo(out);\n+                referencing(expand()).writeTo(out);\n             }\n         }\n \n         @Override\n-        public T get() {\n+        public T expand() {\n             try {\n                 try (StreamInput in = registry == null ?\n                         serialized.streamInput() : new NamedWriteableAwareStreamInput(serialized.streamInput(), registry)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMDY0Nw=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0MzExNg==", "bodyText": "yea it did sound risky to me as well, and what we do instead looks fine to me.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417343116", "createdAt": "2020-04-29T14:07:46Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -136,20 +156,20 @@ public void writeTo(StreamOutput out) throws IOException {\n                  * differences in the wire protocol. This ain't efficient but\n                  * it should be quite rare.\n                  */\n-                referencing(get()).writeTo(out);\n+                referencing(expand()).writeTo(out);\n             }\n         }\n \n         @Override\n-        public T get() {\n+        public T expand() {\n             try {\n                 try (StreamInput in = registry == null ?\n                         serialized.streamInput() : new NamedWriteableAwareStreamInput(serialized.streamInput(), registry)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMDY0Nw=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjUxMDQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoxOToxOFrOGN-ZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDowNjowMVrOGOAhUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwNjk5Mg==", "bodyText": "Its more that deserializing it is inefficient compared to leaving it serialized. \"Big\" objects are fine to deserialize if they are no bigger when you deserialize them.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417306992", "createdAt": "2020-04-29T13:19:18Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0MTc3Nw==", "bodyText": "good point, will rephrase.", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417341777", "createdAt": "2020-04-29T14:06:01Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwNjk5Mg=="}, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjUxMTA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoxOToyNVrOGN-Zvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoxOToyNVrOGN-Zvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwNzA3MA==", "bodyText": "s/is/may be/ ?", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417307070", "createdAt": "2020-04-29T13:19:25Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -28,10 +28,23 @@\n import java.util.function.Supplier;\n \n /**\n- * A holder for {@link Writeable}s that can delays reading the underlying\n- * {@linkplain Writeable} when it is read from a remote node.\n+ * A holder for {@link Writeable}s that delays reading the underlying object\n+ * on the receiving end. To be used for objects that use a lot of memory hence\n+ * it is desirable to keep them around only for a limited amount of time.\n+ * The node that produces the {@link Writeable} calls {@link #referencing(Writeable)}\n+ * to create a {@link DelayableWriteable} that serializes the inner object\n+ * first to a buffer and writes the content of the buffer to the {@link StreamOutput}.\n+ * The receiver node calls {@link #delayed(Reader, StreamInput)} to create a\n+ * {@link DelayableWriteable} that reads the buffer from the @link {@link StreamInput}\n+ * but delays creating the actual object by calling {@link #expand()} when needed.\n+ * Multiple {@link DelayableWriteable}s coming from different nodes may be buffered\n+ * on the receiver end, which may hold a mix of {@link DelayableWriteable}s that were\n+ * produced locally (hence expanded) as well as received form another node (hence subject\n+ * to delayed expansion). When such objects are buffered for some time it is desirable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjUxMzA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoxOTo1OFrOGN-bCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoxOTo1OFrOGN-bCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwNzQwMA==", "bodyText": "Thanks for this change!", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417307400", "createdAt": "2020-04-29T13:19:58Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/io/stream/DelayableWriteable.java", "diffHunk": "@@ -75,17 +93,19 @@ public void writeTo(StreamOutput out) throws IOException {\n         }\n \n         @Override\n-        public T get() {\n+        public T expand() {\n             return reference;\n         }\n \n         @Override\n         public Serialized<T> asSerialized(Reader<T> reader, NamedWriteableRegistry registry) {\n+            BytesStreamOutput buffer;\n             try {\n-                return new Serialized<T>(reader, Version.CURRENT, registry, writeToBuffer(Version.CURRENT).bytes());\n+                buffer = writeToBuffer(Version.CURRENT);\n             } catch (IOException e) {\n-                throw new RuntimeException(\"unexpected error expanding aggregations\", e);\n+                throw new RuntimeException(\"unexpected error writing writeable to buffer\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5138660e78593451392921cc9601f84e13eefe2c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDExNTEzOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTozMzowMVrOGOhZvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTozMzowMVrOGOhZvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg4MDUwOQ==", "bodyText": "FYI @nik9000 I removed the uncertainty around producing right-ish aggs. I find that if certain aggs don't work it's a bug that we should fix like we did with scripted metric. The approach here around partial aggs is the correct one hence we should not have doubts about it :)", "url": "https://github.com/elastic/elasticsearch/pull/55932#discussion_r417880509", "createdAt": "2020-04-30T09:33:01Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -379,18 +379,16 @@ public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                 reducedAggs = () -> null;\n             } else {\n                 /*\n-                 * Keep a reference to the serialiazed form of the partially\n+                 * Keep a reference to the serialized form of the partially\n                  * reduced aggs and reduce it on the fly when someone asks\n-                 * for it. This will produce right-ish aggs. Much more right\n-                 * than if you don't do the final reduce. Its important that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "022ae2908e01dfc6874d02a03d10c881ce9ba7fc"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2510, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}