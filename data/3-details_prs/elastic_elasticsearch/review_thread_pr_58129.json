{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Njk1NDM3", "number": 58129, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyMjozOFrOEGfF3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozNDozMVrOEGfUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM2MzE3OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptInjectionPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyMjozOFrOGlUHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1NTo1M1rOGlVLJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MDA4OQ==", "bodyText": "Let's chat about this.  Is it due to SDeclaration removal?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441780089", "createdAt": "2020-06-17T19:22:38Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptInjectionPhase.java", "diffHunk": "@@ -311,17 +311,11 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n \n             CatchNode catchNode = new CatchNode();\n             catchNode.setLocation(internalLocation);\n+            catchNode.setExceptionType(PainlessExplainError.class);\n+            catchNode.setSymbol(\"#painlessExplainError\");\n \n             tryNode.addCatchNode(catchNode);\n \n-            DeclarationNode declarationNode = new DeclarationNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NzQxNA==", "bodyText": "SDeclaration was embedded in the SCatch, SCatch can check the type itself.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441797414", "createdAt": "2020-06-17T19:55:53Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptInjectionPhase.java", "diffHunk": "@@ -311,17 +311,11 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n \n             CatchNode catchNode = new CatchNode();\n             catchNode.setLocation(internalLocation);\n+            catchNode.setExceptionType(PainlessExplainError.class);\n+            catchNode.setSymbol(\"#painlessExplainError\");\n \n             tryNode.addCatchNode(catchNode);\n \n-            DeclarationNode declarationNode = new DeclarationNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MDA4OQ=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM3MTkyOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNToyMVrOGlUM3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1NzozMVrOGlVOkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTQ2OA==", "bodyText": "What's happening here? (pinning for chat)", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441781468", "createdAt": "2020-06-17T19:25:21Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -257,7 +254,7 @@ public ANode visitSource(SourceContext ctx) {\n             name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n \n             statements.add(new SDeclaration(nextIdentifier(), location(ctx),\n-                    new DResolvedType(location(ctx), scriptClassInfo.getGetReturns().get(index), false), name, false, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5ODI4OA==", "bodyText": "Class<?> type moved into nodes that need it rather than adding nodes around the type.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441798288", "createdAt": "2020-06-17T19:57:31Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -257,7 +254,7 @@ public ANode visitSource(SourceContext ctx) {\n             name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n \n             statements.add(new SDeclaration(nextIdentifier(), location(ctx),\n-                    new DResolvedType(location(ctx), scriptClassInfo.getGetReturns().get(index), false), name, false, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTQ2OA=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM3MjMyOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNToyOVrOGlUNIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1Nzo1NVrOGlVPXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTUzOQ==", "bodyText": "What's happening here? (pinning for chat)", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441781539", "createdAt": "2020-06-17T19:25:29Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -512,9 +509,7 @@ public ANode visitDeclaration(DeclarationContext ctx) {\n         for (DeclvarContext declvar : ctx.declvar()) {\n             String name = declvar.ID().getText();\n             AExpression expression = declvar.expression() == null ? null : (AExpression)visit(declvar.expression());\n-            DUnresolvedType unresolvedType = new DUnresolvedType(location(declvar), type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5ODQ5Mw==", "bodyText": "Class<?> type moved as above.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441798493", "createdAt": "2020-06-17T19:57:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java", "diffHunk": "@@ -512,9 +509,7 @@ public ANode visitDeclaration(DeclarationContext ctx) {\n         for (DeclvarContext declvar : ctx.declvar()) {\n             String name = declvar.ID().getText();\n             AExpression expression = declvar.expression() == null ? null : (AExpression)visit(declvar.expression());\n-            DUnresolvedType unresolvedType = new DUnresolvedType(location(declvar), type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTUzOQ=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM3MzgxOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNjowMVrOGlUOLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1OTowN1rOGlVRiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTgwNg==", "bodyText": "Why the requiresDefault removal here?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441781806", "createdAt": "2020-06-17T19:26:01Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationNode.java", "diffHunk": "@@ -83,21 +74,19 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTa\n         Variable variable = scopeTable.defineVariable(declarationType, name);\n \n         if (expressionNode == null) {\n-            if (requiresDefault) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5OTA0OQ==", "bodyText": "SCatch doesn't depend on SDeclaration anymore.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441799049", "createdAt": "2020-06-17T19:59:07Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationNode.java", "diffHunk": "@@ -83,21 +74,19 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, ScopeTa\n         Variable variable = scopeTable.defineVariable(declarationType, name);\n \n         if (expressionNode == null) {\n-            if (requiresDefault) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTgwNg=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM3ODAyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNzoyMlrOGlUQ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNzoyMlrOGlUQ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MjUwMA==", "bodyText": "luv it.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441782500", "createdAt": "2020-06-17T19:27:22Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBrace.java", "diffHunk": "@@ -64,20 +63,20 @@ public AExpression getIndexNode() {\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+    Output analyze(ClassNode classNode, SemanticScope semanticScope, Input input) {\n         if (input.read == false && input.write == false) {\n             throw createError(new IllegalArgumentException(\"not a statement: result of brace operator not used\"));\n         }\n \n-        Output prefixOutput = analyze(prefixNode, classNode, scriptRoot, scope, new Input());\n+        Output prefixOutput = analyze(prefixNode, classNode, semanticScope, new Input());\n \n         ExpressionNode expressionNode;\n         Output output = new Output();\n \n         if (prefixOutput.actual.isArray()) {\n             Input indexInput = new Input();\n             indexInput.expected = int.class;\n-            Output indexOutput = analyze(indexNode, classNode, scriptRoot, scope, indexInput);\n+            Output indexOutput = analyze(indexNode, classNode, semanticScope, indexInput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM4OTc2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EExplicit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMToxM1rOGlUYjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowMToyM1rOGlVWHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NDQ2MA==", "bodyText": "Why is type lookup so late?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441784460", "createdAt": "2020-06-17T19:31:13Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EExplicit.java", "diffHunk": "@@ -65,13 +62,19 @@ Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input in\n                     \"not a statement: result not used from explicit cast with target type [\" + canonicalTypeName + \"]\"));\n         }\n \n+        Class<?> type = semanticScope.getScriptScope().getPainlessLookup().canonicalTypeNameToType(canonicalTypeName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMDIyMQ==", "bodyText": "Consistency, nodes do write then read then check type.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441800221", "createdAt": "2020-06-17T20:01:23Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EExplicit.java", "diffHunk": "@@ -65,13 +62,19 @@ Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input in\n                     \"not a statement: result not used from explicit cast with target type [\" + canonicalTypeName + \"]\"));\n         }\n \n+        Class<?> type = semanticScope.getScriptScope().getPainlessLookup().canonicalTypeNameToType(canonicalTypeName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NDQ2MA=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM5NDQ3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMjoyN1rOGlUbbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1NTozMFrOGlVKQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTE5Ng==", "bodyText": "Why the symbol addition?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441785196", "createdAt": "2020-06-17T19:32:27Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java", "diffHunk": "@@ -36,36 +35,52 @@\n public class SCatch extends AStatement {\n \n     private final Class<?> baseException;\n-    private final SDeclaration declarationNode;\n+    private final String canonicalTypeName;\n+    private final String symbol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NzE4Ng==", "bodyText": "Included from SDeclaration.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441797186", "createdAt": "2020-06-17T19:55:30Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java", "diffHunk": "@@ -36,36 +35,52 @@\n public class SCatch extends AStatement {\n \n     private final Class<?> baseException;\n-    private final SDeclaration declarationNode;\n+    private final String canonicalTypeName;\n+    private final String symbol;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTE5Ng=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM5NTYyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMjo0OFrOGlUcHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowMTo1N1rOGlVXHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTM3Mg==", "bodyText": "Why the late type lookup?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441785372", "createdAt": "2020-06-17T19:32:48Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java", "diffHunk": "@@ -36,36 +35,52 @@\n public class SCatch extends AStatement {\n \n     private final Class<?> baseException;\n-    private final SDeclaration declarationNode;\n+    private final String canonicalTypeName;\n+    private final String symbol;\n     private final SBlock blockNode;\n \n-    public SCatch(int identifier, Location location, Class<?> baseException, SDeclaration declarationNode, SBlock blockNode) {\n+    public SCatch(int identifier, Location location, Class<?> baseException, String canonicalTypeName, String symbol, SBlock blockNode) {\n         super(identifier, location);\n \n         this.baseException = Objects.requireNonNull(baseException);\n-        this.declarationNode = Objects.requireNonNull(declarationNode);\n+        this.canonicalTypeName = Objects.requireNonNull(canonicalTypeName);\n+        this.symbol = Objects.requireNonNull(symbol);\n         this.blockNode = blockNode;\n     }\n \n     public Class<?> getBaseException() {\n         return baseException;\n     }\n \n-    public SDeclaration getDeclarationNode() {\n-        return declarationNode;\n+    public String getCanonicalTypeName() {\n+        return canonicalTypeName;\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n     }\n \n     public SBlock getBlockNode() {\n         return blockNode;\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+    Output analyze(ClassNode classNode, SemanticScope semanticScope, Input input) {\n+        ScriptScope scriptScope = semanticScope.getScriptScope();\n+\n         Output output = new Output();\n \n-        Output declarationOutput = declarationNode.analyze(classNode, scriptRoot, scope, new Input());\n+        if (scriptScope.getPainlessLookup().isValidCanonicalClassName(symbol)) {\n+            throw createError(new IllegalArgumentException(\"invalid declaration: type [\" + symbol + \"] cannot be a name\"));\n+        }\n+\n+        Class<?> type = scriptScope.getPainlessLookup().canonicalTypeNameToType(canonicalTypeName);\n+\n+        if (type == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NzM0OQ==", "bodyText": "Also from SDeclaration.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441797349", "createdAt": "2020-06-17T19:55:47Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java", "diffHunk": "@@ -36,36 +35,52 @@\n public class SCatch extends AStatement {\n \n     private final Class<?> baseException;\n-    private final SDeclaration declarationNode;\n+    private final String canonicalTypeName;\n+    private final String symbol;\n     private final SBlock blockNode;\n \n-    public SCatch(int identifier, Location location, Class<?> baseException, SDeclaration declarationNode, SBlock blockNode) {\n+    public SCatch(int identifier, Location location, Class<?> baseException, String canonicalTypeName, String symbol, SBlock blockNode) {\n         super(identifier, location);\n \n         this.baseException = Objects.requireNonNull(baseException);\n-        this.declarationNode = Objects.requireNonNull(declarationNode);\n+        this.canonicalTypeName = Objects.requireNonNull(canonicalTypeName);\n+        this.symbol = Objects.requireNonNull(symbol);\n         this.blockNode = blockNode;\n     }\n \n     public Class<?> getBaseException() {\n         return baseException;\n     }\n \n-    public SDeclaration getDeclarationNode() {\n-        return declarationNode;\n+    public String getCanonicalTypeName() {\n+        return canonicalTypeName;\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n     }\n \n     public SBlock getBlockNode() {\n         return blockNode;\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+    Output analyze(ClassNode classNode, SemanticScope semanticScope, Input input) {\n+        ScriptScope scriptScope = semanticScope.getScriptScope();\n+\n         Output output = new Output();\n \n-        Output declarationOutput = declarationNode.analyze(classNode, scriptRoot, scope, new Input());\n+        if (scriptScope.getPainlessLookup().isValidCanonicalClassName(symbol)) {\n+            throw createError(new IllegalArgumentException(\"invalid declaration: type [\" + symbol + \"] cannot be a name\"));\n+        }\n+\n+        Class<?> type = scriptScope.getPainlessLookup().canonicalTypeNameToType(canonicalTypeName);\n+\n+        if (type == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTM3Mg=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMDQ3OQ==", "bodyText": "Same as above.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441800479", "createdAt": "2020-06-17T20:01:57Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java", "diffHunk": "@@ -36,36 +35,52 @@\n public class SCatch extends AStatement {\n \n     private final Class<?> baseException;\n-    private final SDeclaration declarationNode;\n+    private final String canonicalTypeName;\n+    private final String symbol;\n     private final SBlock blockNode;\n \n-    public SCatch(int identifier, Location location, Class<?> baseException, SDeclaration declarationNode, SBlock blockNode) {\n+    public SCatch(int identifier, Location location, Class<?> baseException, String canonicalTypeName, String symbol, SBlock blockNode) {\n         super(identifier, location);\n \n         this.baseException = Objects.requireNonNull(baseException);\n-        this.declarationNode = Objects.requireNonNull(declarationNode);\n+        this.canonicalTypeName = Objects.requireNonNull(canonicalTypeName);\n+        this.symbol = Objects.requireNonNull(symbol);\n         this.blockNode = blockNode;\n     }\n \n     public Class<?> getBaseException() {\n         return baseException;\n     }\n \n-    public SDeclaration getDeclarationNode() {\n-        return declarationNode;\n+    public String getCanonicalTypeName() {\n+        return canonicalTypeName;\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n     }\n \n     public SBlock getBlockNode() {\n         return blockNode;\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+    Output analyze(ClassNode classNode, SemanticScope semanticScope, Input input) {\n+        ScriptScope scriptScope = semanticScope.getScriptScope();\n+\n         Output output = new Output();\n \n-        Output declarationOutput = declarationNode.analyze(classNode, scriptRoot, scope, new Input());\n+        if (scriptScope.getPainlessLookup().isValidCanonicalClassName(symbol)) {\n+            throw createError(new IllegalArgumentException(\"invalid declaration: type [\" + symbol + \"] cannot be a name\"));\n+        }\n+\n+        Class<?> type = scriptScope.getPainlessLookup().canonicalTypeNameToType(canonicalTypeName);\n+\n+        if (type == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTM3Mg=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM5NjUxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SDeclaration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMzowOFrOGlUcwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowMjo1NVrOGlVZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTUzNg==", "bodyText": "Same re: type lookup?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441785536", "createdAt": "2020-06-17T19:33:08Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SDeclaration.java", "diffHunk": "@@ -34,64 +34,63 @@\n  */\n public class SDeclaration extends AStatement {\n \n-    private final DType type;\n+    private final String canonicalTypeName;\n     private final String symbol;\n-    private final boolean requiresDefault;\n     private final AExpression valueNode;\n \n-    public SDeclaration(int identifier, Location location, DType type, String symbol, boolean requiresDefault, AExpression valueNode) {\n+    public SDeclaration(int identifier, Location location, String canonicalTypeName, String symbol, AExpression valueNode) {\n         super(identifier, location);\n \n-        this.type = Objects.requireNonNull(type);\n+        this.canonicalTypeName = Objects.requireNonNull(canonicalTypeName);\n         this.symbol = Objects.requireNonNull(symbol);\n-        this.requiresDefault = requiresDefault;\n         this.valueNode = valueNode;\n     }\n \n-    public DType getType() {\n-        return type;\n+    public String getCanonicalTypeName() {\n+        return canonicalTypeName;\n     }\n \n     public String getSymbol() {\n         return symbol;\n     }\n \n-    public boolean requiresDefault() {\n-        return requiresDefault;\n-    }\n-\n     public AExpression getValueNode() {\n         return valueNode;\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n-        if (scriptRoot.getPainlessLookup().isValidCanonicalClassName(symbol)) {\n+    Output analyze(ClassNode classNode, SemanticScope semanticScope, Input input) {\n+        ScriptScope scriptScope = semanticScope.getScriptScope();\n+\n+        if (scriptScope.getPainlessLookup().isValidCanonicalClassName(symbol)) {\n             throw createError(new IllegalArgumentException(\"invalid declaration: type [\" + symbol + \"] cannot be a name\"));\n         }\n \n-        DResolvedType resolvedType = type.resolveType(scriptRoot.getPainlessLookup());\n+        Class<?> type = scriptScope.getPainlessLookup().canonicalTypeNameToType(canonicalTypeName);\n+\n+        if (type == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMDk5Mg==", "bodyText": "type.resolveType was doing the above.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441800992", "createdAt": "2020-06-17T20:02:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SDeclaration.java", "diffHunk": "@@ -34,64 +34,63 @@\n  */\n public class SDeclaration extends AStatement {\n \n-    private final DType type;\n+    private final String canonicalTypeName;\n     private final String symbol;\n-    private final boolean requiresDefault;\n     private final AExpression valueNode;\n \n-    public SDeclaration(int identifier, Location location, DType type, String symbol, boolean requiresDefault, AExpression valueNode) {\n+    public SDeclaration(int identifier, Location location, String canonicalTypeName, String symbol, AExpression valueNode) {\n         super(identifier, location);\n \n-        this.type = Objects.requireNonNull(type);\n+        this.canonicalTypeName = Objects.requireNonNull(canonicalTypeName);\n         this.symbol = Objects.requireNonNull(symbol);\n-        this.requiresDefault = requiresDefault;\n         this.valueNode = valueNode;\n     }\n \n-    public DType getType() {\n-        return type;\n+    public String getCanonicalTypeName() {\n+        return canonicalTypeName;\n     }\n \n     public String getSymbol() {\n         return symbol;\n     }\n \n-    public boolean requiresDefault() {\n-        return requiresDefault;\n-    }\n-\n     public AExpression getValueNode() {\n         return valueNode;\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n-        if (scriptRoot.getPainlessLookup().isValidCanonicalClassName(symbol)) {\n+    Output analyze(ClassNode classNode, SemanticScope semanticScope, Input input) {\n+        ScriptScope scriptScope = semanticScope.getScriptScope();\n+\n+        if (scriptScope.getPainlessLookup().isValidCanonicalClassName(symbol)) {\n             throw createError(new IllegalArgumentException(\"invalid declaration: type [\" + symbol + \"] cannot be a name\"));\n         }\n \n-        DResolvedType resolvedType = type.resolveType(scriptRoot.getPainlessLookup());\n+        Class<?> type = scriptScope.getPainlessLookup().canonicalTypeNameToType(canonicalTypeName);\n+\n+        if (type == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTUzNg=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM5ODkyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/SemanticScope.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMzo1NlrOGlUeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMTo1NlrOGlz9Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTk0MA==", "bodyText": "?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441785940", "createdAt": "2020-06-17T19:33:56Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/SemanticScope.java", "diffHunk": "@@ -7,7 +7,7 @@\n  * not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMTc5MA==", "bodyText": "Sigh. Intellij is misbehaving again. Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r442301790", "createdAt": "2020-06-18T15:11:56Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/SemanticScope.java", "diffHunk": "@@ -7,7 +7,7 @@\n  * not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTk0MA=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjQwMDYyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/SemanticScope.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozNDozMVrOGlUfgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMDoxM1rOGlz40w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NjI0Mg==", "bodyText": "Do we wanna change any jdoc?", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r441786242", "createdAt": "2020-06-17T19:34:31Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/SemanticScope.java", "diffHunk": "@@ -38,11 +39,11 @@\n  * its parent. As a scope is no longer necessary, it's dropped automatically\n  * since parent scopes contain no references to child scopes.\n  */\n-public abstract class Scope {\n+public abstract class SemanticScope {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMDYyNw==", "bodyText": "I re-read through the JavaDocs in this file, and I think adding semantic in front of scope in most cases just makes it wordier without adding more information. The semantic phase is described as what the scopes in this class are for already.", "url": "https://github.com/elastic/elasticsearch/pull/58129#discussion_r442300627", "createdAt": "2020-06-18T15:10:13Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/SemanticScope.java", "diffHunk": "@@ -38,11 +39,11 @@\n  * its parent. As a scope is no longer necessary, it's dropped automatically\n  * since parent scopes contain no references to child scopes.\n  */\n-public abstract class Scope {\n+public abstract class SemanticScope {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NjI0Mg=="}, "originalCommit": {"oid": "5207d228095d48c32cc47ccba3049d36d10dba55"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1641, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}