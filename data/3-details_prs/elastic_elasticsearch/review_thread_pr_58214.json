{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTk0ODMy", "number": 58214, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoyMzowM1rOEGNZog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoyMzowM1rOEGNZog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTQ2NDY2OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoyMzowM1rOGk3OVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0MDoxNFrOGk5hIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNjcxMA==", "bodyText": "Can we avoid the sleep here? For example by waiting for the data node to have applied the cluster state with the aborted snapshots, and showing that no outgoing message was sent to the master?", "url": "https://github.com/elastic/elasticsearch/pull/58214#discussion_r441306710", "createdAt": "2020-06-17T06:23:03Z", "author": {"login": "ywelsch"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -1415,6 +1415,36 @@ public void testRetentionLeasesClearedOnRestore() throws Exception {\n         assertFalse(restoredRetentionLeases.toString() + \" has no \" + leaseId, restoredRetentionLeases.contains(leaseId));\n     }\n \n+    public void testAbortWaitsOnDataNode() throws Exception {\n+        internalCluster().startMasterOnlyNode();\n+        final String dataNodeName = internalCluster().startDataOnlyNode();\n+        final String indexName = \"test-index\";\n+        createIndex(indexName);\n+        indexDoc(indexName, \"some_id\", \"foo\", \"bar\");\n+\n+        internalCluster().startDataOnlyNode();\n+\n+        final String repoName = \"test-repo\";\n+        createRepository(repoName, \"mock\", randomRepoPath());\n+        blockAllDataNodes(repoName);\n+        final String snapshotName = \"test-snap\";\n+        final ActionFuture<CreateSnapshotResponse> snapshotResponse =\n+                client().admin().cluster().prepareCreateSnapshot(repoName, snapshotName).setWaitForCompletion(true).execute();\n+        waitForBlock(dataNodeName, repoName, TimeValue.timeValueSeconds(30L));\n+\n+        logger.info(\"--> abort snapshot\");\n+        final ActionFuture<AcknowledgedResponse> deleteResponse =\n+                client().admin().cluster().prepareDeleteSnapshot(repoName, snapshotName).execute();\n+\n+        logger.info(\"--> wait for 5s to give data nodes some time to process the updated shard snapshot status\");\n+        TimeUnit.SECONDS.sleep(5L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9742065956bc2fcb42ea150fb449a2fd12a3432a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NDI4OQ==", "bodyText": "Sure thing, sorry for being lazy there => how about 192508c ?", "url": "https://github.com/elastic/elasticsearch/pull/58214#discussion_r441344289", "createdAt": "2020-06-17T07:40:14Z", "author": {"login": "original-brownbear"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java", "diffHunk": "@@ -1415,6 +1415,36 @@ public void testRetentionLeasesClearedOnRestore() throws Exception {\n         assertFalse(restoredRetentionLeases.toString() + \" has no \" + leaseId, restoredRetentionLeases.contains(leaseId));\n     }\n \n+    public void testAbortWaitsOnDataNode() throws Exception {\n+        internalCluster().startMasterOnlyNode();\n+        final String dataNodeName = internalCluster().startDataOnlyNode();\n+        final String indexName = \"test-index\";\n+        createIndex(indexName);\n+        indexDoc(indexName, \"some_id\", \"foo\", \"bar\");\n+\n+        internalCluster().startDataOnlyNode();\n+\n+        final String repoName = \"test-repo\";\n+        createRepository(repoName, \"mock\", randomRepoPath());\n+        blockAllDataNodes(repoName);\n+        final String snapshotName = \"test-snap\";\n+        final ActionFuture<CreateSnapshotResponse> snapshotResponse =\n+                client().admin().cluster().prepareCreateSnapshot(repoName, snapshotName).setWaitForCompletion(true).execute();\n+        waitForBlock(dataNodeName, repoName, TimeValue.timeValueSeconds(30L));\n+\n+        logger.info(\"--> abort snapshot\");\n+        final ActionFuture<AcknowledgedResponse> deleteResponse =\n+                client().admin().cluster().prepareDeleteSnapshot(repoName, snapshotName).execute();\n+\n+        logger.info(\"--> wait for 5s to give data nodes some time to process the updated shard snapshot status\");\n+        TimeUnit.SECONDS.sleep(5L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNjcxMA=="}, "originalCommit": {"oid": "9742065956bc2fcb42ea150fb449a2fd12a3432a"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1531, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}