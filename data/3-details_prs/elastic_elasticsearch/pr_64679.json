{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDEyNDgw", "number": 64679, "title": "Fix SetSingleNodeAllocateStep for data tier deployments", "bodyText": "When the shrink action in ILM chooses a random node to assign the shards to, it checks the\nFilterAllocationDecider to see whether the node can hold the shards (looping through all nodes\nuntil it can find one that can hold them). A previous implementation of data tier allocation used\nFilterAllocationDecider, but the current one uses a custom decider: DataTierAllocationDecider.\nThis decider needs to be used within the SetSingleNodeAllocateStep so that the shrink action\ndoesn't attempt to allocate an index with the \"data_warm\" preference to a node with the \"data_hot\"\nrole.\nThis commit adds this decider and a test to exhibit the behavior.", "createdAt": "2020-11-06T00:07:19Z", "url": "https://github.com/elastic/elasticsearch/pull/64679", "merged": true, "mergeCommit": {"oid": "d6e5349a8e5d54edf32c24cd21ac81cbd359fbab"}, "closed": true, "closedAt": "2020-11-06T15:16:28Z", "author": {"login": "dakrone"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZrbdPgH2gAyNTE2NDEyNDgwOmQ1ZDhhNDUxZjM1MjY1M2I5MmZmMGIyM2MzYWY4M2U5YzVhMDk1ZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ0DnIgFqTUyNTAwODM2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d5d8a451f352653b92ff0b23c3af83e9c5a095df", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/d5d8a451f352653b92ff0b23c3af83e9c5a095df", "committedDate": "2020-11-06T00:01:15Z", "message": "Fix SetSingleNodeAllocateStep for data tier deployments\n\nWhen the `shrink` action in ILM chooses a random node to assign the shards to, it checks the\n`FilterAllocationDecider` to see whether the node can hold the shards (looping through all nodes\nuntil it can find one that can hold them). A previous implementation of data tier allocation used\n`FilterAllocationDecider`, but the current one uses a custom decider: `DataTierAllocationDecider`.\nThis decider needs to be used within the `SetSingleNodeAllocateStep` so that the shrink action\ndoesn't attempt to allocate an index with the \"data_warm\" preference to a node with the \"data_hot\"\nrole.\n\nThis commit adds this decider and a test to exhibit the behavior."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03eb2d4d29e9fb7c750069a2880fd6372eee840", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/b03eb2d4d29e9fb7c750069a2880fd6372eee840", "committedDate": "2020-11-06T00:22:34Z", "message": "Merge branch 'master' into fix-shrink-on-tiers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MDA4MzY2", "url": "https://github.com/elastic/elasticsearch/pull/64679#pullrequestreview-525008366", "createdAt": "2020-11-06T09:58:53Z", "commit": {"oid": "b03eb2d4d29e9fb7c750069a2880fd6372eee840"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1ODo1M1rOHune5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowMzoxMFrOHunovA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MzQzMQ==", "bodyText": "Yes! thanks for configuring this \u2764\ufe0f", "url": "https://github.com/elastic/elasticsearch/pull/64679#discussion_r518643431", "createdAt": "2020-11-06T09:58:53Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleRequest;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleResponse;\n+import org.elasticsearch.xpack.core.ilm.IndexLifecycleExplainResponse;\n+import org.elasticsearch.xpack.core.ilm.LifecyclePolicy;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.Phase;\n+import org.elasticsearch.xpack.core.ilm.RolloverAction;\n+import org.elasticsearch.xpack.core.ilm.ShrinkAction;\n+import org.elasticsearch.xpack.core.ilm.action.ExplainLifecycleAction;\n+import org.elasticsearch.xpack.core.ilm.action.PutLifecycleAction;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.junit.After;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class ILMMultiNodeIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class, IndexLifecycle.class);\n+    }\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        return Settings.builder().put(super.nodeSettings(nodeOrdinal))\n+            .put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, \"1s\")\n+            // This just generates less churn and makes it easier to read the log file if needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03eb2d4d29e9fb7c750069a2880fd6372eee840"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NTk0OA==", "bodyText": "should we lift this into EsIntegTestCase.cleanUpCluster? Maybe in a follow-up PR?", "url": "https://github.com/elastic/elasticsearch/pull/64679#discussion_r518645948", "createdAt": "2020-11-06T10:03:10Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleRequest;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleResponse;\n+import org.elasticsearch.xpack.core.ilm.IndexLifecycleExplainResponse;\n+import org.elasticsearch.xpack.core.ilm.LifecyclePolicy;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.Phase;\n+import org.elasticsearch.xpack.core.ilm.RolloverAction;\n+import org.elasticsearch.xpack.core.ilm.ShrinkAction;\n+import org.elasticsearch.xpack.core.ilm.action.ExplainLifecycleAction;\n+import org.elasticsearch.xpack.core.ilm.action.PutLifecycleAction;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.junit.After;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class ILMMultiNodeIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class, IndexLifecycle.class);\n+    }\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        return Settings.builder().put(super.nodeSettings(nodeOrdinal))\n+            .put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, \"1s\")\n+            // This just generates less churn and makes it easier to read the log file if needed\n+            .put(LifecycleSettings.LIFECYCLE_HISTORY_INDEX_ENABLED, false)\n+            .build();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        try {\n+            client().execute(DeleteDataStreamAction.INSTANCE, new DeleteDataStreamAction.Request(new String[]{index})).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03eb2d4d29e9fb7c750069a2880fd6372eee840"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1335, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}