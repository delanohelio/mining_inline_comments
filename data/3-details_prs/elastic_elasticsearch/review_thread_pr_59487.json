{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTkxMzEx", "number": 59487, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTowOTowOVrOEOLAjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0Mzo1MVrOEOLxnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjk1ODg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTowOTowOVrOGxLExQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToxODo0MVrOGxYmIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNDg1Mw==", "bodyText": "It this necessary? ReroutePhase is an AbstractRunnable so should be fine", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454214853", "createdAt": "2020-07-14T09:09:09Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -179,7 +179,15 @@ protected TransportReplicationAction(Settings settings, String actionName, Trans\n     @Override\n     protected void doExecute(Task task, Request request, ActionListener<Response> listener) {\n         assert request.shardId() != null : \"request shardId must be set\";\n-        new ReroutePhase((ReplicationTask) task, request, listener).run();\n+        runReroutePhase(task, request, listener, true);\n+    }\n+\n+    private void runReroutePhase(Task task, Request request, ActionListener<Response> listener, boolean executedByClient) {\n+        try {\n+            new ReroutePhase((ReplicationTask) task, request, listener, executedByClient).run();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzNDMzNQ==", "bodyText": "Probably not? But we also do this with new AsyncPrimaryAction(request, listener, (ReplicationTask) task).run(); in handlePrimaryRequest. So I did it for consistency? I think Henning was concerned that a RuntimeException would leave unreleased bytes.", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454434335", "createdAt": "2020-07-14T15:15:47Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -179,7 +179,15 @@ protected TransportReplicationAction(Settings settings, String actionName, Trans\n     @Override\n     protected void doExecute(Task task, Request request, ActionListener<Response> listener) {\n         assert request.shardId() != null : \"request shardId must be set\";\n-        new ReroutePhase((ReplicationTask) task, request, listener).run();\n+        runReroutePhase(task, request, listener, true);\n+    }\n+\n+    private void runReroutePhase(Task task, Request request, ActionListener<Response> listener, boolean executedByClient) {\n+        try {\n+            new ReroutePhase((ReplicationTask) task, request, listener, executedByClient).run();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNDg1Mw=="}, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzNDU2Mg==", "bodyText": "I did change it to just RuntimeException.", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454434562", "createdAt": "2020-07-14T15:16:05Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -179,7 +179,15 @@ protected TransportReplicationAction(Settings settings, String actionName, Trans\n     @Override\n     protected void doExecute(Task task, Request request, ActionListener<Response> listener) {\n         assert request.shardId() != null : \"request shardId must be set\";\n-        new ReroutePhase((ReplicationTask) task, request, listener).run();\n+        runReroutePhase(task, request, listener, true);\n+    }\n+\n+    private void runReroutePhase(Task task, Request request, ActionListener<Response> listener, boolean executedByClient) {\n+        try {\n+            new ReroutePhase((ReplicationTask) task, request, listener, executedByClient).run();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNDg1Mw=="}, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzNjM4Ng==", "bodyText": "ok", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454436386", "createdAt": "2020-07-14T15:18:41Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -179,7 +179,15 @@ protected TransportReplicationAction(Settings settings, String actionName, Trans\n     @Override\n     protected void doExecute(Task task, Request request, ActionListener<Response> listener) {\n         assert request.shardId() != null : \"request shardId must be set\";\n-        new ReroutePhase((ReplicationTask) task, request, listener).run();\n+        runReroutePhase(task, request, listener, true);\n+    }\n+\n+    private void runReroutePhase(Task task, Request request, ActionListener<Response> listener, boolean executedByClient) {\n+        try {\n+            new ReroutePhase((ReplicationTask) task, request, listener, executedByClient).run();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNDg1Mw=="}, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjk2ODM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToxMTo0NVrOGxLKmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToxMTo0NVrOGxLKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNjM0Nw==", "bodyText": "add a comment here?", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454216347", "createdAt": "2020-07-14T09:11:45Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -1103,25 +1119,29 @@ public void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, l\n         private final R request;\n         // Indicates if this primary shard request originated by a reroute on this local node.\n         private final boolean sentFromLocalReroute;\n+        private final boolean localRerouteInitiatedByNodeClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA3MTk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0MDoyMlrOGxMK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0MDoyMlrOGxMK-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMjgyNw==", "bodyText": "I prefer the initiatedByNodeClient  naming here with a comment explaining why  we have  that boolean", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454232827", "createdAt": "2020-07-14T09:40:22Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -658,12 +667,18 @@ private IndexShard getIndexShard(final ShardId shardId) {\n     final class ReroutePhase extends AbstractRunnable {\n         private final ActionListener<Response> listener;\n         private final Request request;\n+        private final boolean executedByClient;\n         private final ReplicationTask task;\n         private final ClusterStateObserver observer;\n         private final AtomicBoolean finished = new AtomicBoolean();\n \n         ReroutePhase(ReplicationTask task, Request request, ActionListener<Response> listener) {\n+            this(task, request, listener, false);\n+        }\n+\n+        ReroutePhase(ReplicationTask task, Request request, ActionListener<Response> listener, boolean executedByClient) {\n             this.request = request;\n+            this.executedByClient = executedByClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA3OTgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0MjoyNlrOGxMPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0MjoyNlrOGxMPrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNDAyOA==", "bodyText": "can we also assert (similar  to sentFromLocalReroute) that localRerouteInitiatedByNodeClient is never false when being serialized in writeTo?", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454234028", "createdAt": "2020-07-14T09:42:26Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -1103,25 +1119,29 @@ public void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, l\n         private final R request;\n         // Indicates if this primary shard request originated by a reroute on this local node.\n         private final boolean sentFromLocalReroute;\n+        private final boolean localRerouteInitiatedByNodeClient;\n \n         public ConcreteShardRequest(Writeable.Reader<R> requestReader, StreamInput in) throws IOException {\n             targetAllocationID = in.readString();\n             primaryTerm  = in.readVLong();\n             sentFromLocalReroute = false;\n+            localRerouteInitiatedByNodeClient = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA4NDQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0Mzo1MVrOGxMSqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0Mzo1MVrOGxMSqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNDc5NA==", "bodyText": "maybe mention that this is the case during primary delegation, after the primary relocation handoff.", "url": "https://github.com/elastic/elasticsearch/pull/59487#discussion_r454234794", "createdAt": "2020-07-14T09:43:51Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java", "diffHunk": "@@ -80,17 +80,22 @@ protected TransportWriteAction(Settings settings, String actionName, TransportSe\n \n     @Override\n     protected Releasable checkOperationLimits(Request request) {\n-        return indexingPressure.markIndexingOperationStarted(primaryOperationSize(request), forceExecution);\n+        return indexingPressure.markPrimaryOperationStarted(primaryOperationSize(request), forceExecution);\n     }\n \n     @Override\n-    protected Releasable checkPrimaryLimits(Request request, boolean rerouteWasLocal) {\n-        // If this primary request was submitted by a reroute performed on this local node, we have already\n-        // accounted the bytes.\n+    protected Releasable checkPrimaryLimits(Request request, boolean rerouteWasLocal, boolean localRerouteInitiatedByNodeClient) {\n         if (rerouteWasLocal) {\n-            return () -> {};\n+            // If this primary request was received from a local reroute initiated by the node client, we\n+            // must mark a new primary operation local to the coordinating node.\n+            if (localRerouteInitiatedByNodeClient) {\n+                return indexingPressure.markPrimaryOperationLocalToCoordinatingNodeStarted(primaryOperationSize(request));\n+            } else {\n+                return () -> {};\n+            }\n         } else {\n-            return indexingPressure.markIndexingOperationStarted(primaryOperationSize(request), forceExecution);\n+            // If this primary request was received directly from the network, we must mark a new primary operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "543821c4ad3d4ed052eb1798f32f5da83fe3d292"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2380, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}