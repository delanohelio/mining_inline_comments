{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4Mjc5ODIz", "number": 62509, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1Njo0OVrOEkackQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxMzowMFrOEkjtjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjE3NDg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1Njo0OVrOHTV_TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo0NzoyNlrOHTjEiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTI2MQ==", "bodyText": "No need to clone, it's a thread-local instance already.", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490045261", "createdAt": "2020-09-17T07:56:49Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -114,7 +118,17 @@ public void execute(SearchContext context) {\n                 int readerIndex = ReaderUtil.subIndex(docId, context.searcher().getIndexReader().leaves());\n                 if (currentReaderIndex != readerIndex) {\n                     currentReaderContext = context.searcher().getIndexReader().leaves().get(readerIndex);\n+                    storedFieldsReader = context.searcher().getCodecReader(readerIndex).getFieldsReader();\n                     currentReaderIndex = readerIndex;\n+                    if (hasSequentialDocs && docs.length >= 10) {\n+                        // All the docs to fetch are adjacent but Lucene stored fields are optimized\n+                        // for random access and don't optimize for sequential access - except for merging.\n+                        // So we do a little hack here and pretend we're going to do merges in order to\n+                        // get better sequential access.\n+                        storedFieldsReader = storedFieldsReader.getMergeInstance();\n+                    } else {\n+                        storedFieldsReader = storedFieldsReader.clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3377e71c3aade39debdfc194125ddc067d2357e4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1OTU5Mw==", "bodyText": "got it, thanks", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490259593", "createdAt": "2020-09-17T13:47:26Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -114,7 +118,17 @@ public void execute(SearchContext context) {\n                 int readerIndex = ReaderUtil.subIndex(docId, context.searcher().getIndexReader().leaves());\n                 if (currentReaderIndex != readerIndex) {\n                     currentReaderContext = context.searcher().getIndexReader().leaves().get(readerIndex);\n+                    storedFieldsReader = context.searcher().getCodecReader(readerIndex).getFieldsReader();\n                     currentReaderIndex = readerIndex;\n+                    if (hasSequentialDocs && docs.length >= 10) {\n+                        // All the docs to fetch are adjacent but Lucene stored fields are optimized\n+                        // for random access and don't optimize for sequential access - except for merging.\n+                        // So we do a little hack here and pretend we're going to do merges in order to\n+                        // get better sequential access.\n+                        storedFieldsReader = storedFieldsReader.getMergeInstance();\n+                    } else {\n+                        storedFieldsReader = storedFieldsReader.clone();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTI2MQ=="}, "originalCommit": {"oid": "3377e71c3aade39debdfc194125ddc067d2357e4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzY1MTk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/lucene/index/SequentialStoredFieldsLeafReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowNTowOFrOHTj7qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTowNTo0N1rOHTnLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MzcwNQ==", "bodyText": "Can you add javadocs?", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490273705", "createdAt": "2020-09-17T14:05:08Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/index/SequentialStoredFieldsLeafReader.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.lucene.index;\n+\n+import org.apache.lucene.codecs.StoredFieldsReader;\n+import org.apache.lucene.index.CodecReader;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.LeafReader;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A {@link FilterLeafReader} that exposes a {@link StoredFieldsReader}\n+ * optimized for sequential access. This class should be used by custom\n+ * {@link FilterLeafReader} that are used at search time in order to\n+ * leverage sequential access when retrieving stored fields in queries,\n+ * aggregations or during the fetch phase.\n+ */\n+public abstract class SequentialStoredFieldsLeafReader extends FilterLeafReader {\n+    /**\n+     * <p>Construct a StoredFieldsFilterLeafReader based on the specified base reader.\n+     * <p>Note that base reader is closed if this FilterLeafReader is closed.</p>\n+     *\n+     * @param in specified base reader.\n+     */\n+    public SequentialStoredFieldsLeafReader(LeafReader in) {\n+        super(in);\n+    }\n+\n+    protected abstract StoredFieldsReader doGetSequentialStoredFieldsReader(StoredFieldsReader reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyNjg4Ng==", "bodyText": "I pushed 9d3f33f", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490326886", "createdAt": "2020-09-17T15:05:47Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/index/SequentialStoredFieldsLeafReader.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.lucene.index;\n+\n+import org.apache.lucene.codecs.StoredFieldsReader;\n+import org.apache.lucene.index.CodecReader;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.LeafReader;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A {@link FilterLeafReader} that exposes a {@link StoredFieldsReader}\n+ * optimized for sequential access. This class should be used by custom\n+ * {@link FilterLeafReader} that are used at search time in order to\n+ * leverage sequential access when retrieving stored fields in queries,\n+ * aggregations or during the fetch phase.\n+ */\n+public abstract class SequentialStoredFieldsLeafReader extends FilterLeafReader {\n+    /**\n+     * <p>Construct a StoredFieldsFilterLeafReader based on the specified base reader.\n+     * <p>Note that base reader is closed if this FilterLeafReader is closed.</p>\n+     *\n+     * @param in specified base reader.\n+     */\n+    public SequentialStoredFieldsLeafReader(LeafReader in) {\n+        super(in);\n+    }\n+\n+    protected abstract StoredFieldsReader doGetSequentialStoredFieldsReader(StoredFieldsReader reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MzcwNQ=="}, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzY2NjQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowODowM1rOHTkEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTowNzowNFrOHTnO1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NTk3Nw==", "bodyText": "nit: since doc ids are sorted, we should be able to do something like return docs.length > 0 && docs[docs.length-1].docId - docs[0].docId == docs.length - 1;", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490275977", "createdAt": "2020-09-17T14:08:03Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -524,4 +550,18 @@ private static void fillDocAndMetaFields(SearchContext context, FieldsVisitor fi\n             }\n         }\n     }\n+\n+    /**\n+     * Returns <code>true</code> if the provided <code>docs</code> are\n+     * stored sequentially (Dn = Dn-1 + 1).\n+     */\n+    static boolean hasSequentialDocs(DocIdToIndex[] docs) {\n+        for (int i = 1; i < docs.length; i++) {\n+            assert docs[i].docId >= docs[i-1].docId : \"doc ids out of order\";\n+            if (docs[i].docId - docs[i-1].docId > 1) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyNzc2Ng==", "bodyText": "++, I pushed 9d3f33f", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490327766", "createdAt": "2020-09-17T15:07:04Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -524,4 +550,18 @@ private static void fillDocAndMetaFields(SearchContext context, FieldsVisitor fi\n             }\n         }\n     }\n+\n+    /**\n+     * Returns <code>true</code> if the provided <code>docs</code> are\n+     * stored sequentially (Dn = Dn-1 + 1).\n+     */\n+    static boolean hasSequentialDocs(DocIdToIndex[] docs) {\n+        for (int i = 1; i < docs.length; i++) {\n+            assert docs[i].docId >= docs[i-1].docId : \"doc ids out of order\";\n+            if (docs[i].docId - docs[i-1].docId > 1) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NTk3Nw=="}, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzY2OTM0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowODozN1rOHTkGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTowNzoxM1rOHTnPPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NjQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Make sure that the engine produces a CodecReader.\n          \n          \n            \n                    // Make sure that the engine produces a SequentialStoredFieldsLeafReader.", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490276423", "createdAt": "2020-09-17T14:08:37Z", "author": {"login": "jpountz"}, "path": "server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java", "diffHunk": "@@ -5940,4 +5941,25 @@ public void testNotWarmUpSearcherInEngineCtor() throws Exception {\n             }\n         }\n     }\n+\n+    public void testProducesStoredFieldsReader() throws Exception {\n+        // Make sure that the engine produces a CodecReader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyNzg2OQ==", "bodyText": "9d3f33f", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490327869", "createdAt": "2020-09-17T15:07:13Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java", "diffHunk": "@@ -5940,4 +5941,25 @@ public void testNotWarmUpSearcherInEngineCtor() throws Exception {\n             }\n         }\n     }\n+\n+    public void testProducesStoredFieldsReader() throws Exception {\n+        // Make sure that the engine produces a CodecReader.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NjQyMw=="}, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzY5MjkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/DocumentSubsetReaderTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxMzowMFrOHTkUIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTowNzoyMVrOHTnPjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3OTk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testProducesCodecReader() throws Exception {\n          \n          \n            \n                public void testProducesSequentialStoredFieldsLeafReader() throws Exception {", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490279970", "createdAt": "2020-09-17T14:13:00Z", "author": {"login": "jpountz"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/DocumentSubsetReaderTests.java", "diffHunk": "@@ -215,6 +218,41 @@ public void testCoreCacheKey() throws Exception {\n         IOUtils.close(ir, ir2, iw, dir);\n     }\n \n+    public void testProducesCodecReader() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyNzk1MA==", "bodyText": "9d3f33f", "url": "https://github.com/elastic/elasticsearch/pull/62509#discussion_r490327950", "createdAt": "2020-09-17T15:07:21Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/DocumentSubsetReaderTests.java", "diffHunk": "@@ -215,6 +218,41 @@ public void testCoreCacheKey() throws Exception {\n         IOUtils.close(ir, ir2, iw, dir);\n     }\n \n+    public void testProducesCodecReader() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3OTk3MA=="}, "originalCommit": {"oid": "6ed45fae4d36290930cf56b76473433738ac84e9"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1508, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}