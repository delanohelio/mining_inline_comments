{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MzkxMDk4", "number": 62983, "title": "Make Rounding.nextRoundingValue consistent", "bodyText": "\"interval\" style roundings were implementing nextRoundingValue in a\nfairly inconsistent way - it'd produce a value, but sometimes that\nvalue would be the same as the previous rounding value. This makes it\nconsistently the next value that rounding would make.", "createdAt": "2020-09-28T20:43:39Z", "url": "https://github.com/elastic/elasticsearch/pull/62983", "merged": true, "mergeCommit": {"oid": "6ea7a855cabf97f9888e49e2fa95335b1a5f3585"}, "closed": true, "closedAt": "2020-10-05T13:35:45Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNZ08DABqjM4MTYzOTUyNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN__pDgH2gAyNDk0MzkxMDk4OjNkYzA0ODMzOGMxNTFhOTYwZTNmNmFjNTBjNTVlOWFlZDAzMTE3MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8ea758bf9c0e6e5488357dd4b25ee92d1f48036", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8ea758bf9c0e6e5488357dd4b25ee92d1f48036", "committedDate": "2020-09-28T20:44:10Z", "message": "Make Rounding.nextRoundingValue consistent\n\n\"interval\" style roundings were implementing `nextRoundingValue` in a\nfairly inconsistent way - it'd produce a value, but sometimes that\nvalue would be the same as the previous rounding value. This makes it\nconsistently the next value that `rounding` would make."}, "afterCommit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/def11bbbf9a8cdf81f9657d50d9eed5a56ce0785", "committedDate": "2020-09-28T20:44:30Z", "message": "Make Rounding.nextRoundingValue consistent\n\n\"interval\" style roundings were implementing `nextRoundingValue` in a\nfairly inconsistent way - it'd produce a value, but sometimes that\nvalue would be the same as the previous rounding value. This makes it\nconsistently the next value that `rounding` would make."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODgxNjQ3", "url": "https://github.com/elastic/elasticsearch/pull/62983#pullrequestreview-497881647", "createdAt": "2020-09-28T20:44:10Z", "commit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo0NDoxMVrOHZO7eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo0NDoxMVrOHZO7eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyMTA1MA==", "bodyText": "I'm not sure I need to keep these. They failed on some of my other attempts at implementing this method.", "url": "https://github.com/elastic/elasticsearch/pull/62983#discussion_r496221050", "createdAt": "2020-09-28T20:44:11Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -469,6 +469,20 @@ public void testRandomTimeIntervalRounding() {\n         }\n     }\n \n+    public void testFoo() {\n+        Rounding rounding = new Rounding.TimeIntervalRounding(960000, ZoneId.of(\"Europe/Minsk\"));\n+        long rounded = rounding.prepareForUnknown().round(877824908400L);\n+        long next = rounding.prepareForUnknown().nextRoundingValue(rounded);\n+        assertThat(next, greaterThan(rounded));\n+    }\n+\n+    public void testBar() {\n+        Rounding rounding = new Rounding.TimeIntervalRounding(480000, ZoneId.of(\"Portugal\"));\n+        long rounded = rounding.prepareJavaTime().round(972780720000L);\n+        long next = rounding.prepareJavaTime().nextRoundingValue(rounded);\n+        assertThat(next, greaterThan(rounded));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/def11bbbf9a8cdf81f9657d50d9eed5a56ce0785", "committedDate": "2020-09-28T20:44:30Z", "message": "Make Rounding.nextRoundingValue consistent\n\n\"interval\" style roundings were implementing `nextRoundingValue` in a\nfairly inconsistent way - it'd produce a value, but sometimes that\nvalue would be the same as the previous rounding value. This makes it\nconsistently the next value that `rounding` would make."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODg2OTg4", "url": "https://github.com/elastic/elasticsearch/pull/62983#pullrequestreview-497886988", "createdAt": "2020-09-28T20:52:36Z", "commit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo1MjozNlrOHZPMBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo1ODoyNlrOHZPX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNTI4Ng==", "bodyText": "I'd keep them in, personally.  Could just put a note that those specific values caused problems for some implementations, so we're keeping them around for regression testing, or something like that.", "url": "https://github.com/elastic/elasticsearch/pull/62983#discussion_r496225286", "createdAt": "2020-09-28T20:52:36Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -469,6 +469,20 @@ public void testRandomTimeIntervalRounding() {\n         }\n     }\n \n+    public void testFoo() {\n+        Rounding rounding = new Rounding.TimeIntervalRounding(960000, ZoneId.of(\"Europe/Minsk\"));\n+        long rounded = rounding.prepareForUnknown().round(877824908400L);\n+        long next = rounding.prepareForUnknown().nextRoundingValue(rounded);\n+        assertThat(next, greaterThan(rounded));\n+    }\n+\n+    public void testBar() {\n+        Rounding rounding = new Rounding.TimeIntervalRounding(480000, ZoneId.of(\"Portugal\"));\n+        long rounded = rounding.prepareJavaTime().round(972780720000L);\n+        long next = rounding.prepareJavaTime().nextRoundingValue(rounded);\n+        assertThat(next, greaterThan(rounded));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyMTA1MA=="}, "originalCommit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODM1MQ==", "bodyText": "So I'm just glancing at this, and haven't read the whole class, but, it looks like the old implementation was using interval as a number of seconds, and this is using it as a number of milliseconds?  Is that correct?  Or am I misunderstanding something here?", "url": "https://github.com/elastic/elasticsearch/pull/62983#discussion_r496228351", "createdAt": "2020-09-28T20:58:26Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -1119,12 +1118,16 @@ public long round(long utcMillis) {\n             }\n \n             @Override\n-            public long nextRoundingValue(long time) {\n-                int offsetSeconds = timeZone.getRules().getOffset(Instant.ofEpochMilli(time)).getTotalSeconds();\n-                long millis = time + interval + offsetSeconds * 1000;\n-                return ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), ZoneOffset.UTC)\n-                    .withZoneSameLocal(timeZone)\n-                    .toInstant().toEpochMilli();\n+            public long nextRoundingValue(long utcMillis) {\n+                long from = utcMillis + interval; // TODO this implementation makes me very upset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f107388be6d4caabf47cbf8be7d5fee0e4113c", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/70f107388be6d4caabf47cbf8be7d5fee0e4113c", "committedDate": "2020-09-29T15:08:43Z", "message": "binary search/newton's method thing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17cc7d38729f4dd4b728a967bbd1db1834cd7f5e", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/17cc7d38729f4dd4b728a967bbd1db1834cd7f5e", "committedDate": "2020-09-29T15:43:49Z", "message": "Logger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDg4MzYz", "url": "https://github.com/elastic/elasticsearch/pull/62983#pullrequestreview-499488363", "createdAt": "2020-09-30T14:24:40Z", "commit": {"oid": "17cc7d38729f4dd4b728a967bbd1db1834cd7f5e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyNDo0MVrOHagKrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMjo0MFrOHaglFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1MjA0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                assert highEnough && false == tooHigh;\n          \n          \n            \n                                assert highEnough && (false == tooHigh);\n          \n      \n    \n    \n  \n\nI know it's redundant, but I think it's more readable to add parenthesis than have to remember the precedence order.", "url": "https://github.com/elastic/elasticsearch/pull/62983#discussion_r497552047", "createdAt": "2020-09-30T14:24:41Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -1119,12 +1122,60 @@ public long round(long utcMillis) {\n             }\n \n             @Override\n-            public long nextRoundingValue(long time) {\n-                int offsetSeconds = timeZone.getRules().getOffset(Instant.ofEpochMilli(time)).getTotalSeconds();\n-                long millis = time + interval + offsetSeconds * 1000;\n-                return ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), ZoneOffset.UTC)\n-                    .withZoneSameLocal(timeZone)\n-                    .toInstant().toEpochMilli();\n+            public long nextRoundingValue(long utcMillis) {\n+                /*\n+                 * Ok. I'm not proud of this, but it gets the job done. So here is the deal:\n+                 * its super important that nextRoundingValue be *exactly* the next rounding\n+                 * value. And I can't come up with a nice way to use the java time API to figure\n+                 * it out. Thus, we treat \"round\" like a black box here and run a kind of whacky\n+                 * binary search, newton's method hybrid. We don't have a \"slope\" so we can't do\n+                 * a \"real\" newton's method, so we just sort of cut the diff in half. As janky\n+                 * as it looks, it tends to get the job done in under four iterations. Frankly,\n+                 * `round(round(utcMillis) + interval)` is usually a good guess so we mostly get\n+                 * it in a single iteration. But daylight savings time and other janky stuff can\n+                 * make it less likely.\n+                 */\n+                long prevRound = round(utcMillis);\n+                long increment = interval;\n+                long from = prevRound;\n+                int iterations = 0;\n+                while (++iterations < 100) {\n+                    from += increment;\n+                    long rounded = round(from);\n+                    boolean highEnough = rounded > prevRound;\n+                    if (false == highEnough) {\n+                        if (increment < 0) {\n+                            increment = -increment / 2;\n+                        }\n+                        continue;\n+                    }\n+                    long roundedRoundedDown = round(rounded - 1);\n+                    boolean tooHigh = roundedRoundedDown > prevRound;\n+                    if (tooHigh) {\n+                        if (increment > 0) {\n+                            increment = -increment / 2;\n+                        }\n+                        continue;\n+                    }\n+                    assert highEnough && false == tooHigh;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17cc7d38729f4dd4b728a967bbd1db1834cd7f5e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NTg5Ng==", "bodyText": "I think you're using assert false here so this throws in testing but not in production.  If that's the case, please just put a note for why we want the behavior to be different in prod, and maybe what will actually be returned in that case.  And if not, please throw an actual exception.", "url": "https://github.com/elastic/elasticsearch/pull/62983#discussion_r497555896", "createdAt": "2020-09-30T14:29:02Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -1119,12 +1122,60 @@ public long round(long utcMillis) {\n             }\n \n             @Override\n-            public long nextRoundingValue(long time) {\n-                int offsetSeconds = timeZone.getRules().getOffset(Instant.ofEpochMilli(time)).getTotalSeconds();\n-                long millis = time + interval + offsetSeconds * 1000;\n-                return ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), ZoneOffset.UTC)\n-                    .withZoneSameLocal(timeZone)\n-                    .toInstant().toEpochMilli();\n+            public long nextRoundingValue(long utcMillis) {\n+                /*\n+                 * Ok. I'm not proud of this, but it gets the job done. So here is the deal:\n+                 * its super important that nextRoundingValue be *exactly* the next rounding\n+                 * value. And I can't come up with a nice way to use the java time API to figure\n+                 * it out. Thus, we treat \"round\" like a black box here and run a kind of whacky\n+                 * binary search, newton's method hybrid. We don't have a \"slope\" so we can't do\n+                 * a \"real\" newton's method, so we just sort of cut the diff in half. As janky\n+                 * as it looks, it tends to get the job done in under four iterations. Frankly,\n+                 * `round(round(utcMillis) + interval)` is usually a good guess so we mostly get\n+                 * it in a single iteration. But daylight savings time and other janky stuff can\n+                 * make it less likely.\n+                 */\n+                long prevRound = round(utcMillis);\n+                long increment = interval;\n+                long from = prevRound;\n+                int iterations = 0;\n+                while (++iterations < 100) {\n+                    from += increment;\n+                    long rounded = round(from);\n+                    boolean highEnough = rounded > prevRound;\n+                    if (false == highEnough) {\n+                        if (increment < 0) {\n+                            increment = -increment / 2;\n+                        }\n+                        continue;\n+                    }\n+                    long roundedRoundedDown = round(rounded - 1);\n+                    boolean tooHigh = roundedRoundedDown > prevRound;\n+                    if (tooHigh) {\n+                        if (increment > 0) {\n+                            increment = -increment / 2;\n+                        }\n+                        continue;\n+                    }\n+                    assert highEnough && false == tooHigh;\n+                    assert roundedRoundedDown == prevRound;\n+                    if (iterations > 3 && logger.isDebugEnabled()) {\n+                        logger.debug(\"Iterated {} time for {} using {}\", iterations, utcMillis, TimeIntervalRounding.this.toString());\n+                    }\n+                    return rounded;\n+                }\n+                assert false : String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17cc7d38729f4dd4b728a967bbd1db1834cd7f5e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1ODgwNw==", "bodyText": "I know we don't use them much, but this would be an excellent candidate for junit parameterized testing.", "url": "https://github.com/elastic/elasticsearch/pull/62983#discussion_r497558807", "createdAt": "2020-09-30T14:32:40Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -469,6 +469,20 @@ public void testRandomTimeIntervalRounding() {\n         }\n     }\n \n+    public void testFoo() {\n+        Rounding rounding = new Rounding.TimeIntervalRounding(960000, ZoneId.of(\"Europe/Minsk\"));\n+        long rounded = rounding.prepareForUnknown().round(877824908400L);\n+        long next = rounding.prepareForUnknown().nextRoundingValue(rounded);\n+        assertThat(next, greaterThan(rounded));\n+    }\n+\n+    public void testBar() {\n+        Rounding rounding = new Rounding.TimeIntervalRounding(480000, ZoneId.of(\"Portugal\"));\n+        long rounded = rounding.prepareJavaTime().round(972780720000L);\n+        long next = rounding.prepareJavaTime().nextRoundingValue(rounded);\n+        assertThat(next, greaterThan(rounded));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyMTA1MA=="}, "originalCommit": {"oid": "def11bbbf9a8cdf81f9657d50d9eed5a56ce0785"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7fc015858e89d3963ce240cec7d3f80c4bdc71", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3a7fc015858e89d3963ce240cec7d3f80c4bdc71", "committedDate": "2020-09-30T14:35:08Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Mark Tozzi <mark.tozzi@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dc048338c151a960e3f6ac50c55e9aed0311707", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3dc048338c151a960e3f6ac50c55e9aed0311707", "committedDate": "2020-09-30T17:11:47Z", "message": "Explain"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4503, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}