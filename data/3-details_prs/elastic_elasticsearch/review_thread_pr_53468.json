{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTY2NjMz", "number": 53468, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0MjowN1rODnae-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0MjowN1rODnae-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjU0OTcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0MjowN1rOF1ZYEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTozNzowOVrOF2UASw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDYxMQ==", "bodyText": "It seems our circle interface does not really support cartesian circles.", "url": "https://github.com/elastic/elasticsearch/pull/53468#discussion_r391534611", "createdAt": "2020-03-12T10:42:07Z", "author": {"login": "iverase"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.spatial.index.mapper;\n+\n+import org.elasticsearch.geometry.Circle;\n+import org.elasticsearch.geometry.Line;\n+import org.elasticsearch.geometry.Point;\n+import org.elasticsearch.geometry.Polygon;\n+import org.elasticsearch.geometry.Rectangle;\n+\n+\n+/**\n+ * Utility class that transforms Elasticsearch geometry objects to the Lucene representation\n+ */\n+public class ShapeUtils {\n+\n+    public static org.apache.lucene.geo.XYPolygon toLuceneXYPolygon(Polygon polygon) {\n+        org.apache.lucene.geo.XYPolygon[] holes = new org.apache.lucene.geo.XYPolygon[polygon.getNumberOfHoles()];\n+        for(int i = 0; i<holes.length; i++) {\n+            holes[i] = new org.apache.lucene.geo.XYPolygon(\n+                doubleArrayToFloatArray(polygon.getHole(i).getX()),\n+                doubleArrayToFloatArray(polygon.getHole(i).getY()));\n+        }\n+        return new org.apache.lucene.geo.XYPolygon(\n+            doubleArrayToFloatArray(polygon.getPolygon().getX()),\n+            doubleArrayToFloatArray(polygon.getPolygon().getY()), holes);\n+    }\n+\n+    public static org.apache.lucene.geo.XYPolygon toLuceneXYPolygon(Rectangle r) {\n+        return new org.apache.lucene.geo.XYPolygon(\n+            new float[]{(float) r.getMinX(), (float) r.getMaxX(), (float) r.getMaxX(), (float) r.getMinX(), (float) r.getMinX()},\n+            new float[]{(float) r.getMinY(), (float) r.getMinY(), (float) r.getMaxY(), (float) r.getMaxY(), (float) r.getMinY()});\n+    }\n+\n+    public static org.apache.lucene.geo.XYRectangle toLuceneXYRectangle(Rectangle r) {\n+        return new org.apache.lucene.geo.XYRectangle((float) r.getMinX(), (float) r.getMaxX(),\n+                                                     (float) r.getMinY(), (float) r.getMaxY());\n+    }\n+\n+    public static org.apache.lucene.geo.XYPoint toLuceneXYPoint(Point point) {\n+        return new org.apache.lucene.geo.XYPoint((float) point.getX(), (float) point.getY());\n+    }\n+\n+    public static org.apache.lucene.geo.XYLine toLuceneXYLine(Line line) {\n+        return new org.apache.lucene.geo.XYLine(\n+            doubleArrayToFloatArray(line.getX()),\n+            doubleArrayToFloatArray(line.getY()));\n+    }\n+\n+    public static org.apache.lucene.geo.XYCircle toLuceneXYCircle(Circle circle) {\n+        return new org.apache.lucene.geo.XYCircle((float) circle.getX(), (float) circle.getY(), (float) circle.getRadiusMeters());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "605f69b0e2f84a17a740a083147edf7ce01f70d5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2OTg4MQ==", "bodyText": "Yeah, it is a bit misleading to have the Geometry API specify the circle radius as getRadiusMeters. Probably worth a clean up in another PR. /cc @imotov", "url": "https://github.com/elastic/elasticsearch/pull/53468#discussion_r392469881", "createdAt": "2020-03-13T20:53:44Z", "author": {"login": "nknize"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.spatial.index.mapper;\n+\n+import org.elasticsearch.geometry.Circle;\n+import org.elasticsearch.geometry.Line;\n+import org.elasticsearch.geometry.Point;\n+import org.elasticsearch.geometry.Polygon;\n+import org.elasticsearch.geometry.Rectangle;\n+\n+\n+/**\n+ * Utility class that transforms Elasticsearch geometry objects to the Lucene representation\n+ */\n+public class ShapeUtils {\n+\n+    public static org.apache.lucene.geo.XYPolygon toLuceneXYPolygon(Polygon polygon) {\n+        org.apache.lucene.geo.XYPolygon[] holes = new org.apache.lucene.geo.XYPolygon[polygon.getNumberOfHoles()];\n+        for(int i = 0; i<holes.length; i++) {\n+            holes[i] = new org.apache.lucene.geo.XYPolygon(\n+                doubleArrayToFloatArray(polygon.getHole(i).getX()),\n+                doubleArrayToFloatArray(polygon.getHole(i).getY()));\n+        }\n+        return new org.apache.lucene.geo.XYPolygon(\n+            doubleArrayToFloatArray(polygon.getPolygon().getX()),\n+            doubleArrayToFloatArray(polygon.getPolygon().getY()), holes);\n+    }\n+\n+    public static org.apache.lucene.geo.XYPolygon toLuceneXYPolygon(Rectangle r) {\n+        return new org.apache.lucene.geo.XYPolygon(\n+            new float[]{(float) r.getMinX(), (float) r.getMaxX(), (float) r.getMaxX(), (float) r.getMinX(), (float) r.getMinX()},\n+            new float[]{(float) r.getMinY(), (float) r.getMinY(), (float) r.getMaxY(), (float) r.getMaxY(), (float) r.getMinY()});\n+    }\n+\n+    public static org.apache.lucene.geo.XYRectangle toLuceneXYRectangle(Rectangle r) {\n+        return new org.apache.lucene.geo.XYRectangle((float) r.getMinX(), (float) r.getMaxX(),\n+                                                     (float) r.getMinY(), (float) r.getMaxY());\n+    }\n+\n+    public static org.apache.lucene.geo.XYPoint toLuceneXYPoint(Point point) {\n+        return new org.apache.lucene.geo.XYPoint((float) point.getX(), (float) point.getY());\n+    }\n+\n+    public static org.apache.lucene.geo.XYLine toLuceneXYLine(Line line) {\n+        return new org.apache.lucene.geo.XYLine(\n+            doubleArrayToFloatArray(line.getX()),\n+            doubleArrayToFloatArray(line.getY()));\n+    }\n+\n+    public static org.apache.lucene.geo.XYCircle toLuceneXYCircle(Circle circle) {\n+        return new org.apache.lucene.geo.XYCircle((float) circle.getX(), (float) circle.getY(), (float) circle.getRadiusMeters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDYxMQ=="}, "originalCommit": {"oid": "605f69b0e2f84a17a740a083147edf7ce01f70d5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NTE3OQ==", "bodyText": "Yeah, I am not particularly happy with my decision to go with meters here. I think it was a mistake. I agree we need to clean this up, but it probably deserves some brainstorming and definitely a separate PR since it affects SQL as well.", "url": "https://github.com/elastic/elasticsearch/pull/53468#discussion_r392495179", "createdAt": "2020-03-13T21:37:09Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.spatial.index.mapper;\n+\n+import org.elasticsearch.geometry.Circle;\n+import org.elasticsearch.geometry.Line;\n+import org.elasticsearch.geometry.Point;\n+import org.elasticsearch.geometry.Polygon;\n+import org.elasticsearch.geometry.Rectangle;\n+\n+\n+/**\n+ * Utility class that transforms Elasticsearch geometry objects to the Lucene representation\n+ */\n+public class ShapeUtils {\n+\n+    public static org.apache.lucene.geo.XYPolygon toLuceneXYPolygon(Polygon polygon) {\n+        org.apache.lucene.geo.XYPolygon[] holes = new org.apache.lucene.geo.XYPolygon[polygon.getNumberOfHoles()];\n+        for(int i = 0; i<holes.length; i++) {\n+            holes[i] = new org.apache.lucene.geo.XYPolygon(\n+                doubleArrayToFloatArray(polygon.getHole(i).getX()),\n+                doubleArrayToFloatArray(polygon.getHole(i).getY()));\n+        }\n+        return new org.apache.lucene.geo.XYPolygon(\n+            doubleArrayToFloatArray(polygon.getPolygon().getX()),\n+            doubleArrayToFloatArray(polygon.getPolygon().getY()), holes);\n+    }\n+\n+    public static org.apache.lucene.geo.XYPolygon toLuceneXYPolygon(Rectangle r) {\n+        return new org.apache.lucene.geo.XYPolygon(\n+            new float[]{(float) r.getMinX(), (float) r.getMaxX(), (float) r.getMaxX(), (float) r.getMinX(), (float) r.getMinX()},\n+            new float[]{(float) r.getMinY(), (float) r.getMinY(), (float) r.getMaxY(), (float) r.getMaxY(), (float) r.getMinY()});\n+    }\n+\n+    public static org.apache.lucene.geo.XYRectangle toLuceneXYRectangle(Rectangle r) {\n+        return new org.apache.lucene.geo.XYRectangle((float) r.getMinX(), (float) r.getMaxX(),\n+                                                     (float) r.getMinY(), (float) r.getMaxY());\n+    }\n+\n+    public static org.apache.lucene.geo.XYPoint toLuceneXYPoint(Point point) {\n+        return new org.apache.lucene.geo.XYPoint((float) point.getX(), (float) point.getY());\n+    }\n+\n+    public static org.apache.lucene.geo.XYLine toLuceneXYLine(Line line) {\n+        return new org.apache.lucene.geo.XYLine(\n+            doubleArrayToFloatArray(line.getX()),\n+            doubleArrayToFloatArray(line.getY()));\n+    }\n+\n+    public static org.apache.lucene.geo.XYCircle toLuceneXYCircle(Circle circle) {\n+        return new org.apache.lucene.geo.XYCircle((float) circle.getX(), (float) circle.getY(), (float) circle.getRadiusMeters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDYxMQ=="}, "originalCommit": {"oid": "605f69b0e2f84a17a740a083147edf7ce01f70d5"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3324, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}