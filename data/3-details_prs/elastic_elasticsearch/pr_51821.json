{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNDI0MjYy", "number": 51821, "title": "[DOCS] Add EQL syntax page", "bodyText": "Adds documentation for basic EQL syntax.\nJoins, sequences, and other syntax to be added as its supported in future development.\nPreview\nhttp://elasticsearch_51821.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/eql-syntax.html", "createdAt": "2020-02-03T17:04:20Z", "url": "https://github.com/elastic/elasticsearch/pull/51821", "merged": true, "mergeCommit": {"oid": "99c1ee88e8264129ea1c5262f7d8f9f2409151ab"}, "closed": true, "closedAt": "2020-02-05T13:12:10Z", "author": {"login": "jrodewig"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAv8msgH2gAyMzcwNDI0MjYyOjhkYmIyNTM5ZDgwZWFlNzU5MDE5MGFmMmFlY2RkNWU0NTIwZTQ2Y2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBGGMSAFqTM1MzIxMzg3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/8dbb2539d80eae7590190af2aecdd5e4520e46ca", "committedDate": "2020-02-03T16:57:49Z", "message": "[DOCS] Add EQL syntax page"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDg3NjA1", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-352487605", "createdAt": "2020-02-03T19:02:24Z", "commit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowMjoyNFrOFk8XKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowMjoyNFrOFk8XKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4MjAyNg==", "bodyText": "not sure if this was intentional for the sake of simplicity, but if we do want to make these examples more ECS-compliant:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            process where name == \"svchost.exe\"\n          \n          \n            \n            process where process.name == \"svchost.exe\"", "url": "https://github.com/elastic/elasticsearch/pull/51821#discussion_r374282026", "createdAt": "2020-02-03T19:02:24Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/syntax.asciidoc", "diffHunk": "@@ -0,0 +1,224 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-syntax]]\n+== EQL syntax reference\n+\n+experimental::[]\n+\n+[IMPORTANT]\n+====\n+{es} supports a subset of EQL syntax.\n+====\n+\n+[discrete]\n+[[eql-basic-syntax]]\n+=== Basic syntax\n+\n+EQL queries require an event type and a matching condition. The `where` keyword connects them.\n+\n+[source,eql]\n+----\n+event_type where condition\n+----\n+\n+For example, the following EQL query matches `process` events with a `name`\n+field value of `svchost.exe`:\n+\n+[source,eql]\n+----\n+process where name == \"svchost.exe\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDg4NTI1", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-352488525", "createdAt": "2020-02-03T19:03:54Z", "commit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowMzo1NVrOFk8Z9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowMzo1NVrOFk8Z9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4Mjc0MA==", "bodyText": "I don't know how the documents render and if this matters, but there's an extra space\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Divides the value to the left of the operator by the value to the right. Returns  only the remainder.\n          \n          \n            \n            Divides the value to the left of the operator by the value to the right. Returns only the remainder.", "url": "https://github.com/elastic/elasticsearch/pull/51821#discussion_r374282740", "createdAt": "2020-02-03T19:03:55Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/syntax.asciidoc", "diffHunk": "@@ -0,0 +1,224 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-syntax]]\n+== EQL syntax reference\n+\n+experimental::[]\n+\n+[IMPORTANT]\n+====\n+{es} supports a subset of EQL syntax.\n+====\n+\n+[discrete]\n+[[eql-basic-syntax]]\n+=== Basic syntax\n+\n+EQL queries require an event type and a matching condition. The `where` keyword connects them.\n+\n+[source,eql]\n+----\n+event_type where condition\n+----\n+\n+For example, the following EQL query matches `process` events with a `name`\n+field value of `svchost.exe`:\n+\n+[source,eql]\n+----\n+process where name == \"svchost.exe\"\n+----\n+\n+[discrete]\n+[[eql-syntax-conditions]]\n+==== Conditions\n+\n+A condition consists of one or more criteria an event must match.\n+You can specify and combine these criteria using the following operators:\n+\n+[discrete]\n+[[eql-syntax-comparison-operators]]\n+===== Comparison operators\n+\n+[source,eql]\n+----\n+<   <=   ==   !=   >=   >\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`<` (less than)::\n+Returns `true` if the value to the left of the operator is less than the value\n+to the right. Otherwise returns `false`.\n+\n+`<=` (less than or equal) ::\n+Returns `true` if the value to the left of the operator is less than or equal to\n+the value to the right. Otherwise returns `false`.\n+\n+`==` (equal)::\n+Returns `true` if the values to the left and right of the operator are equal.\n+Otherwise returns `false`.\n+\n+`!=` (not equal)::\n+Returns `true` if the values to the left and right of the operator are not\n+equal. Otherwise returns `false`.\n+\n+`>=` (greater than or equal) ::\n+Returns `true` if the value to the left of the operator is greater than or equal\n+to the value to the right. Otherwise returns `false`.\n+\n+`>` (greater than)::\n+Returns `true` if the value to the left of the operator is greater than the\n+value to the right. Otherwise returns `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-logical-operators]]\n+===== Logical operators\n+\n+[source,eql]\n+----\n+and  or  not\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`and`::\n+Returns `true` only if the condition to the left and right _both_ return `true`.\n+Otherwise returns `false.\n+\n+`or`::\n+Returns `true` if one of the conditions to the left or right `true`.\n+Otherwise returns `false.\n+\n+`not`::\n+Returns `true` if the condition to the right is `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-lookup-operators]]\n+===== Lookup operators\n+\n+[source,eql]\n+----\n+user.name in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+user.name not in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`in`::\n+Returns `true` if the value is contained in the provided list.\n+\n+`not in`::\n+Returns `true` if the value is not contained in the provided list.\n+====\n+\n+[discrete]\n+[[eql-syntax-math-operators]]\n+===== Math operators\n+\n+[source,eql]\n+----\n++  -  *  /  %\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`+` (add)::\n+Adds the values to the left and right of the operator.\n+\n+`-` (Subtract)::\n+Subtracts the value to the right of the operator from the value to the left.\n+\n+`*` (Subtract)::\n+Multiplies the values to the left and right of the operator.\n+\n+`/` (Divide)::\n+Divides the value to the left of the operator by the value to the right.\n+\n+`%` (modulo)::\n+Divides the value to the left of the operator by the value to the right. Returns  only the remainder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDkwNzI5", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-352490729", "createdAt": "2020-02-03T19:07:31Z", "commit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowNzozMVrOFk8g0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowNzozMVrOFk8g0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4NDQ5OQ==", "bodyText": "This isn't currently escaped. I think these make sense, but we may have to come back later to add it.", "url": "https://github.com/elastic/elasticsearch/pull/51821#discussion_r374284499", "createdAt": "2020-02-03T19:07:31Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/syntax.asciidoc", "diffHunk": "@@ -0,0 +1,224 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-syntax]]\n+== EQL syntax reference\n+\n+experimental::[]\n+\n+[IMPORTANT]\n+====\n+{es} supports a subset of EQL syntax.\n+====\n+\n+[discrete]\n+[[eql-basic-syntax]]\n+=== Basic syntax\n+\n+EQL queries require an event type and a matching condition. The `where` keyword connects them.\n+\n+[source,eql]\n+----\n+event_type where condition\n+----\n+\n+For example, the following EQL query matches `process` events with a `name`\n+field value of `svchost.exe`:\n+\n+[source,eql]\n+----\n+process where name == \"svchost.exe\"\n+----\n+\n+[discrete]\n+[[eql-syntax-conditions]]\n+==== Conditions\n+\n+A condition consists of one or more criteria an event must match.\n+You can specify and combine these criteria using the following operators:\n+\n+[discrete]\n+[[eql-syntax-comparison-operators]]\n+===== Comparison operators\n+\n+[source,eql]\n+----\n+<   <=   ==   !=   >=   >\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`<` (less than)::\n+Returns `true` if the value to the left of the operator is less than the value\n+to the right. Otherwise returns `false`.\n+\n+`<=` (less than or equal) ::\n+Returns `true` if the value to the left of the operator is less than or equal to\n+the value to the right. Otherwise returns `false`.\n+\n+`==` (equal)::\n+Returns `true` if the values to the left and right of the operator are equal.\n+Otherwise returns `false`.\n+\n+`!=` (not equal)::\n+Returns `true` if the values to the left and right of the operator are not\n+equal. Otherwise returns `false`.\n+\n+`>=` (greater than or equal) ::\n+Returns `true` if the value to the left of the operator is greater than or equal\n+to the value to the right. Otherwise returns `false`.\n+\n+`>` (greater than)::\n+Returns `true` if the value to the left of the operator is greater than the\n+value to the right. Otherwise returns `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-logical-operators]]\n+===== Logical operators\n+\n+[source,eql]\n+----\n+and  or  not\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`and`::\n+Returns `true` only if the condition to the left and right _both_ return `true`.\n+Otherwise returns `false.\n+\n+`or`::\n+Returns `true` if one of the conditions to the left or right `true`.\n+Otherwise returns `false.\n+\n+`not`::\n+Returns `true` if the condition to the right is `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-lookup-operators]]\n+===== Lookup operators\n+\n+[source,eql]\n+----\n+user.name in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+user.name not in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`in`::\n+Returns `true` if the value is contained in the provided list.\n+\n+`not in`::\n+Returns `true` if the value is not contained in the provided list.\n+====\n+\n+[discrete]\n+[[eql-syntax-math-operators]]\n+===== Math operators\n+\n+[source,eql]\n+----\n++  -  *  /  %\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`+` (add)::\n+Adds the values to the left and right of the operator.\n+\n+`-` (Subtract)::\n+Subtracts the value to the right of the operator from the value to the left.\n+\n+`*` (Subtract)::\n+Multiplies the values to the left and right of the operator.\n+\n+`/` (Divide)::\n+Divides the value to the left of the operator by the value to the right.\n+\n+`%` (modulo)::\n+Divides the value to the left of the operator by the value to the right. Returns  only the remainder.\n+====\n+\n+[discrete]\n+[[eql-syntax-strings]]\n+==== Strings\n+\n+Strings are enclosed with double quotes (`\"`) or single quotes (`'`).\n+\n+[source,eql]\n+----\n+\"hello world\"\n+\"hello world with 'substring'\"\n+----\n+\n+[discrete]\n+[[eql-syntax-wildcards]]\n+===== Wildcards \n+\n+You can use the wildcard operator (`*`) within a string to match specific\n+patterns.\n+\n+The following example string matches any value that ends with `.txt`.\n+\n+[source,eql]\n+----\n+\"*.txt\"\n+----\n+\n+[discrete]\n+[[eql-syntax-escaped-characters]]\n+===== Escaped characters \n+\n+When used within a string, special characters, such as a carriage return or\n+double quote (`\"`), must be escaped with a preceding `\\`.\n+\n+[source,eql]\n+----\n+\"example \\t of \\n escaped \\r characters\"\n+----\n+\n+.*Escape sequences*\n+[%collapsible]\n+====\n+[options=\"header\"]\n+|====\n+| Escape sequence | Literal character\n+|`\\n`             | A newline (linefeed) character\n+|`\\r`             | A carriage return character\n+|`\\t`             | A tab character\n+|`\\\\`             | A backslash (`\\`) character\n+|`\\\"`             | A double quote (`\"`) character\n+|`\\'`             | A single quote (`'`) character\n+|`\\*`             | A wildcard (`*`) character", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDkyMjAz", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-352492203", "createdAt": "2020-02-03T19:09:57Z", "commit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowOTo1OFrOFk8liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTowOTo1OFrOFk8liw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4NTcwNw==", "bodyText": "Nothing is actually escaped for raw strings, so this is basically identical behavior to https://www.journaldev.com/23598/python-raw-string, but with ? instead of r.\n\nPython raw string is created by prefixing a string literal with \u2018r\u2019 or \u2018R\u2019. Python raw string treats backslash () as a literal character. This is useful when we want to have a string that contains backslash and don\u2019t want it to be treated as an escape character.\n...\nWhen a backslash is followed by a quote in a raw string, it\u2019s escaped. However, the backslash also remains in the result. Because of this feature, we can\u2019t create a raw string of single backslash. Also, a raw string can\u2019t have an odd number of backslashes at the end.", "url": "https://github.com/elastic/elasticsearch/pull/51821#discussion_r374285707", "createdAt": "2020-02-03T19:09:58Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/syntax.asciidoc", "diffHunk": "@@ -0,0 +1,224 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-syntax]]\n+== EQL syntax reference\n+\n+experimental::[]\n+\n+[IMPORTANT]\n+====\n+{es} supports a subset of EQL syntax.\n+====\n+\n+[discrete]\n+[[eql-basic-syntax]]\n+=== Basic syntax\n+\n+EQL queries require an event type and a matching condition. The `where` keyword connects them.\n+\n+[source,eql]\n+----\n+event_type where condition\n+----\n+\n+For example, the following EQL query matches `process` events with a `name`\n+field value of `svchost.exe`:\n+\n+[source,eql]\n+----\n+process where name == \"svchost.exe\"\n+----\n+\n+[discrete]\n+[[eql-syntax-conditions]]\n+==== Conditions\n+\n+A condition consists of one or more criteria an event must match.\n+You can specify and combine these criteria using the following operators:\n+\n+[discrete]\n+[[eql-syntax-comparison-operators]]\n+===== Comparison operators\n+\n+[source,eql]\n+----\n+<   <=   ==   !=   >=   >\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`<` (less than)::\n+Returns `true` if the value to the left of the operator is less than the value\n+to the right. Otherwise returns `false`.\n+\n+`<=` (less than or equal) ::\n+Returns `true` if the value to the left of the operator is less than or equal to\n+the value to the right. Otherwise returns `false`.\n+\n+`==` (equal)::\n+Returns `true` if the values to the left and right of the operator are equal.\n+Otherwise returns `false`.\n+\n+`!=` (not equal)::\n+Returns `true` if the values to the left and right of the operator are not\n+equal. Otherwise returns `false`.\n+\n+`>=` (greater than or equal) ::\n+Returns `true` if the value to the left of the operator is greater than or equal\n+to the value to the right. Otherwise returns `false`.\n+\n+`>` (greater than)::\n+Returns `true` if the value to the left of the operator is greater than the\n+value to the right. Otherwise returns `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-logical-operators]]\n+===== Logical operators\n+\n+[source,eql]\n+----\n+and  or  not\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`and`::\n+Returns `true` only if the condition to the left and right _both_ return `true`.\n+Otherwise returns `false.\n+\n+`or`::\n+Returns `true` if one of the conditions to the left or right `true`.\n+Otherwise returns `false.\n+\n+`not`::\n+Returns `true` if the condition to the right is `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-lookup-operators]]\n+===== Lookup operators\n+\n+[source,eql]\n+----\n+user.name in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+user.name not in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`in`::\n+Returns `true` if the value is contained in the provided list.\n+\n+`not in`::\n+Returns `true` if the value is not contained in the provided list.\n+====\n+\n+[discrete]\n+[[eql-syntax-math-operators]]\n+===== Math operators\n+\n+[source,eql]\n+----\n++  -  *  /  %\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`+` (add)::\n+Adds the values to the left and right of the operator.\n+\n+`-` (Subtract)::\n+Subtracts the value to the right of the operator from the value to the left.\n+\n+`*` (Subtract)::\n+Multiplies the values to the left and right of the operator.\n+\n+`/` (Divide)::\n+Divides the value to the left of the operator by the value to the right.\n+\n+`%` (modulo)::\n+Divides the value to the left of the operator by the value to the right. Returns  only the remainder.\n+====\n+\n+[discrete]\n+[[eql-syntax-strings]]\n+==== Strings\n+\n+Strings are enclosed with double quotes (`\"`) or single quotes (`'`).\n+\n+[source,eql]\n+----\n+\"hello world\"\n+\"hello world with 'substring'\"\n+----\n+\n+[discrete]\n+[[eql-syntax-wildcards]]\n+===== Wildcards \n+\n+You can use the wildcard operator (`*`) within a string to match specific\n+patterns.\n+\n+The following example string matches any value that ends with `.txt`.\n+\n+[source,eql]\n+----\n+\"*.txt\"\n+----\n+\n+[discrete]\n+[[eql-syntax-escaped-characters]]\n+===== Escaped characters \n+\n+When used within a string, special characters, such as a carriage return or\n+double quote (`\"`), must be escaped with a preceding `\\`.\n+\n+[source,eql]\n+----\n+\"example \\t of \\n escaped \\r characters\"\n+----\n+\n+.*Escape sequences*\n+[%collapsible]\n+====\n+[options=\"header\"]\n+|====\n+| Escape sequence | Literal character\n+|`\\n`             | A newline (linefeed) character\n+|`\\r`             | A carriage return character\n+|`\\t`             | A tab character\n+|`\\\\`             | A backslash (`\\`) character\n+|`\\\"`             | A double quote (`\"`) character\n+|`\\'`             | A single quote (`'`) character\n+|`\\*`             | A wildcard (`*`) character\n+|====\n+====\n+\n+[discrete]\n+[[eql-syntax-raw-strings]]\n+===== Raw strings\n+\n+Raw strings are preceded by a question mark (`?`), which escapes all special", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDkzNTgz", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-352493583", "createdAt": "2020-02-03T19:12:10Z", "commit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOToxMjoxMVrOFk8psg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOToxMjoxMVrOFk8psg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4Njc3MA==", "bodyText": "You don't need backticks to do nested fields, but if you start doing special/non-alphanumeric + underscore characters. Feel free to choose your own examples, but here's what I mean:\n`start-time`\n`field.start-time`\n`field with space in it`", "url": "https://github.com/elastic/elasticsearch/pull/51821#discussion_r374286770", "createdAt": "2020-02-03T19:12:11Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/syntax.asciidoc", "diffHunk": "@@ -0,0 +1,224 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-syntax]]\n+== EQL syntax reference\n+\n+experimental::[]\n+\n+[IMPORTANT]\n+====\n+{es} supports a subset of EQL syntax.\n+====\n+\n+[discrete]\n+[[eql-basic-syntax]]\n+=== Basic syntax\n+\n+EQL queries require an event type and a matching condition. The `where` keyword connects them.\n+\n+[source,eql]\n+----\n+event_type where condition\n+----\n+\n+For example, the following EQL query matches `process` events with a `name`\n+field value of `svchost.exe`:\n+\n+[source,eql]\n+----\n+process where name == \"svchost.exe\"\n+----\n+\n+[discrete]\n+[[eql-syntax-conditions]]\n+==== Conditions\n+\n+A condition consists of one or more criteria an event must match.\n+You can specify and combine these criteria using the following operators:\n+\n+[discrete]\n+[[eql-syntax-comparison-operators]]\n+===== Comparison operators\n+\n+[source,eql]\n+----\n+<   <=   ==   !=   >=   >\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`<` (less than)::\n+Returns `true` if the value to the left of the operator is less than the value\n+to the right. Otherwise returns `false`.\n+\n+`<=` (less than or equal) ::\n+Returns `true` if the value to the left of the operator is less than or equal to\n+the value to the right. Otherwise returns `false`.\n+\n+`==` (equal)::\n+Returns `true` if the values to the left and right of the operator are equal.\n+Otherwise returns `false`.\n+\n+`!=` (not equal)::\n+Returns `true` if the values to the left and right of the operator are not\n+equal. Otherwise returns `false`.\n+\n+`>=` (greater than or equal) ::\n+Returns `true` if the value to the left of the operator is greater than or equal\n+to the value to the right. Otherwise returns `false`.\n+\n+`>` (greater than)::\n+Returns `true` if the value to the left of the operator is greater than the\n+value to the right. Otherwise returns `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-logical-operators]]\n+===== Logical operators\n+\n+[source,eql]\n+----\n+and  or  not\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`and`::\n+Returns `true` only if the condition to the left and right _both_ return `true`.\n+Otherwise returns `false.\n+\n+`or`::\n+Returns `true` if one of the conditions to the left or right `true`.\n+Otherwise returns `false.\n+\n+`not`::\n+Returns `true` if the condition to the right is `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-lookup-operators]]\n+===== Lookup operators\n+\n+[source,eql]\n+----\n+user.name in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+user.name not in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`in`::\n+Returns `true` if the value is contained in the provided list.\n+\n+`not in`::\n+Returns `true` if the value is not contained in the provided list.\n+====\n+\n+[discrete]\n+[[eql-syntax-math-operators]]\n+===== Math operators\n+\n+[source,eql]\n+----\n++  -  *  /  %\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`+` (add)::\n+Adds the values to the left and right of the operator.\n+\n+`-` (Subtract)::\n+Subtracts the value to the right of the operator from the value to the left.\n+\n+`*` (Subtract)::\n+Multiplies the values to the left and right of the operator.\n+\n+`/` (Divide)::\n+Divides the value to the left of the operator by the value to the right.\n+\n+`%` (modulo)::\n+Divides the value to the left of the operator by the value to the right. Returns  only the remainder.\n+====\n+\n+[discrete]\n+[[eql-syntax-strings]]\n+==== Strings\n+\n+Strings are enclosed with double quotes (`\"`) or single quotes (`'`).\n+\n+[source,eql]\n+----\n+\"hello world\"\n+\"hello world with 'substring'\"\n+----\n+\n+[discrete]\n+[[eql-syntax-wildcards]]\n+===== Wildcards \n+\n+You can use the wildcard operator (`*`) within a string to match specific\n+patterns.\n+\n+The following example string matches any value that ends with `.txt`.\n+\n+[source,eql]\n+----\n+\"*.txt\"\n+----\n+\n+[discrete]\n+[[eql-syntax-escaped-characters]]\n+===== Escaped characters \n+\n+When used within a string, special characters, such as a carriage return or\n+double quote (`\"`), must be escaped with a preceding `\\`.\n+\n+[source,eql]\n+----\n+\"example \\t of \\n escaped \\r characters\"\n+----\n+\n+.*Escape sequences*\n+[%collapsible]\n+====\n+[options=\"header\"]\n+|====\n+| Escape sequence | Literal character\n+|`\\n`             | A newline (linefeed) character\n+|`\\r`             | A carriage return character\n+|`\\t`             | A tab character\n+|`\\\\`             | A backslash (`\\`) character\n+|`\\\"`             | A double quote (`\"`) character\n+|`\\'`             | A single quote (`'`) character\n+|`\\*`             | A wildcard (`*`) character\n+|====\n+====\n+\n+[discrete]\n+[[eql-syntax-raw-strings]]\n+===== Raw strings\n+\n+Raw strings are preceded by a question mark (`?`), which escapes all special\n+characters in the string except single quote (`'`) and double quote (`\"`).\n+\n+[source,eql]\n+----\n+?\"String with literal 'slash' \\ characters included\"\n+----\n+\n+[discrete]\n+[[eql-syntax-nested-fields]]\n+==== Nested fields\n+\n+When using dot notation to specify nested object fields, the field name and path\n+are escaped using backticks (+++`+++).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbb2539d80eae7590190af2aecdd5e4520e46ca"}, "originalPosition": 219}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eae9c10cc5de12e0822ab837af08bcad2cd50fda", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/eae9c10cc5de12e0822ab837af08bcad2cd50fda", "committedDate": "2020-02-03T19:46:17Z", "message": "Update docs/reference/eql/syntax.asciidoc\n\nCo-Authored-By: Ross Wolf <31489089+rw-access@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ddab1982836201384477c1ca091086d7f701e5", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/93ddab1982836201384477c1ca091086d7f701e5", "committedDate": "2020-02-03T19:46:42Z", "message": "Update docs/reference/eql/syntax.asciidoc\n\nCo-Authored-By: Ross Wolf <31489089+rw-access@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2827c20aed32602c0182b49cdb32c5fc91aa8862", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/2827c20aed32602c0182b49cdb32c5fc91aa8862", "committedDate": "2020-02-03T19:49:19Z", "message": "Remove escaped wildcard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76900ea8e9ab736b1821786424d891efd6ff1cf", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/e76900ea8e9ab736b1821786424d891efd6ff1cf", "committedDate": "2020-02-03T19:55:35Z", "message": "Field name correction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c529f73ff08d43c1a07b1361072b5de4c41944dc", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/c529f73ff08d43c1a07b1361072b5de4c41944dc", "committedDate": "2020-02-03T20:26:03Z", "message": "Correct raw string section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8097b414be6f45b54b35191ef799d380037581ce", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/8097b414be6f45b54b35191ef799d380037581ce", "committedDate": "2020-02-03T20:39:17Z", "message": "fix anchor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTg2MjIy", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-352586222", "createdAt": "2020-02-03T21:47:11Z", "commit": {"oid": "8097b414be6f45b54b35191ef799d380037581ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NzoxMVrOFlBGKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NzoxMVrOFlBGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTU5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, the following EQL query matches `process` events with a `name`\n          \n          \n            \n            For example, the following EQL query matches `process` events with a `process.name`", "url": "https://github.com/elastic/elasticsearch/pull/51821#discussion_r374359593", "createdAt": "2020-02-03T21:47:11Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/syntax.asciidoc", "diffHunk": "@@ -0,0 +1,240 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-syntax]]\n+== EQL syntax reference\n+\n+experimental::[]\n+\n+[IMPORTANT]\n+====\n+{es} supports a subset of EQL syntax.\n+====\n+\n+[discrete]\n+[[eql-basic-syntax]]\n+=== Basic syntax\n+\n+EQL queries require an event type and a matching condition. The `where` keyword connects them.\n+\n+[source,eql]\n+----\n+event_type where condition\n+----\n+\n+For example, the following EQL query matches `process` events with a `name`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8097b414be6f45b54b35191ef799d380037581ce"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a1021c6a3198384a19bedcf0f11e50d1c3d1ec7", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/3a1021c6a3198384a19bedcf0f11e50d1c3d1ec7", "committedDate": "2020-02-03T21:47:48Z", "message": "Update docs/reference/eql/syntax.asciidoc\n\nCo-Authored-By: Ross Wolf <31489089+rw-access@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTg5NTMz", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-352589533", "createdAt": "2020-02-03T21:53:06Z", "commit": {"oid": "3a1021c6a3198384a19bedcf0f11e50d1c3d1ec7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1MzowNlrOFlBQaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1MzowNlrOFlBQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MjIxNw==", "bodyText": "I think this could use an example of how it's used. Wildcards are interpreted if they are used with== or !=:\nfield == \"example*wildcard\"\nfield != \"example*wildcard\"", "url": "https://github.com/elastic/elasticsearch/pull/51821#discussion_r374362217", "createdAt": "2020-02-03T21:53:06Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/syntax.asciidoc", "diffHunk": "@@ -0,0 +1,240 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[eql-syntax]]\n+== EQL syntax reference\n+\n+experimental::[]\n+\n+[IMPORTANT]\n+====\n+{es} supports a subset of EQL syntax.\n+====\n+\n+[discrete]\n+[[eql-basic-syntax]]\n+=== Basic syntax\n+\n+EQL queries require an event type and a matching condition. The `where` keyword connects them.\n+\n+[source,eql]\n+----\n+event_type where condition\n+----\n+\n+For example, the following EQL query matches `process` events with a `process.name`\n+field value of `svchost.exe`:\n+\n+[source,eql]\n+----\n+process where process.name == \"svchost.exe\"\n+----\n+\n+[discrete]\n+[[eql-syntax-conditions]]\n+==== Conditions\n+\n+A condition consists of one or more criteria an event must match.\n+You can specify and combine these criteria using the following operators:\n+\n+[discrete]\n+[[eql-syntax-comparison-operators]]\n+===== Comparison operators\n+\n+[source,eql]\n+----\n+<   <=   ==   !=   >=   >\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`<` (less than)::\n+Returns `true` if the value to the left of the operator is less than the value\n+to the right. Otherwise returns `false`.\n+\n+`<=` (less than or equal) ::\n+Returns `true` if the value to the left of the operator is less than or equal to\n+the value to the right. Otherwise returns `false`.\n+\n+`==` (equal)::\n+Returns `true` if the values to the left and right of the operator are equal.\n+Otherwise returns `false`.\n+\n+`!=` (not equal)::\n+Returns `true` if the values to the left and right of the operator are not\n+equal. Otherwise returns `false`.\n+\n+`>=` (greater than or equal) ::\n+Returns `true` if the value to the left of the operator is greater than or equal\n+to the value to the right. Otherwise returns `false`.\n+\n+`>` (greater than)::\n+Returns `true` if the value to the left of the operator is greater than the\n+value to the right. Otherwise returns `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-logical-operators]]\n+===== Logical operators\n+\n+[source,eql]\n+----\n+and  or  not\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`and`::\n+Returns `true` only if the condition to the left and right _both_ return `true`.\n+Otherwise returns `false.\n+\n+`or`::\n+Returns `true` if one of the conditions to the left or right `true`.\n+Otherwise returns `false.\n+\n+`not`::\n+Returns `true` if the condition to the right is `false`.\n+====\n+\n+[discrete]\n+[[eql-syntax-lookup-operators]]\n+===== Lookup operators\n+\n+[source,eql]\n+----\n+user.name in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+user.name not in (\"Administrator\", \"SYSTEM\", \"NETWORK SERVICE\")\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`in`::\n+Returns `true` if the value is contained in the provided list.\n+\n+`not in`::\n+Returns `true` if the value is not contained in the provided list.\n+====\n+\n+[discrete]\n+[[eql-syntax-math-operators]]\n+===== Math operators\n+\n+[source,eql]\n+----\n++  -  *  /  %\n+----\n+\n+.*Definitions*\n+[%collapsible]\n+====\n+`+` (add)::\n+Adds the values to the left and right of the operator.\n+\n+`-` (Subtract)::\n+Subtracts the value to the right of the operator from the value to the left.\n+\n+`*` (Subtract)::\n+Multiplies the values to the left and right of the operator.\n+\n+`/` (Divide)::\n+Divides the value to the left of the operator by the value to the right.\n+\n+`%` (modulo)::\n+Divides the value to the left of the operator by the value to the right. Returns only the remainder.\n+====\n+\n+[discrete]\n+[[eql-syntax-strings]]\n+==== Strings\n+\n+Strings are enclosed with double quotes (`\"`) or single quotes (`'`).\n+\n+[source,eql]\n+----\n+\"hello world\"\n+\"hello world with 'substring'\"\n+----\n+\n+[discrete]\n+[[eql-syntax-wildcards]]\n+===== Wildcards \n+\n+You can use the wildcard operator (`*`) within a string to match specific", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1021c6a3198384a19bedcf0f11e50d1c3d1ec7"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4db068dbd8a8750fd79af1b0adaa10904576415", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/a4db068dbd8a8750fd79af1b0adaa10904576415", "committedDate": "2020-02-03T21:57:29Z", "message": "change wildcard example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27986af49ac2ab8f81e6237773c7e322123017cf", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/27986af49ac2ab8f81e6237773c7e322123017cf", "committedDate": "2020-02-04T16:03:47Z", "message": "reword"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjEzODc1", "url": "https://github.com/elastic/elasticsearch/pull/51821#pullrequestreview-353213875", "createdAt": "2020-02-04T18:46:12Z", "commit": {"oid": "27986af49ac2ab8f81e6237773c7e322123017cf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2979, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}