{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTMzODY3", "number": 50862, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyODoyM1rODXrXRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTozODoxNFrODX5BSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU0MzEwOnYy", "diffSide": "RIGHT", "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/EdgeNGramTokenizerTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyODoyM1rOFdGt-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyODoyM1rOFdGt-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MzA5OQ==", "bodyText": "instead of Version.CURRENT should we put a specific version to make sure the test doesn't fail after v 8.0?", "url": "https://github.com/elastic/elasticsearch/pull/50862#discussion_r366063099", "createdAt": "2020-01-13T22:28:23Z", "author": {"login": "mayya-sharipova"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/EdgeNGramTokenizerTests.java", "diffHunk": "@@ -86,9 +86,11 @@ public void testPreConfiguredTokenizer() throws IOException {\n             }\n         }\n \n-        // Check deprecated name as well\n+        // Check deprecated name as well, needs version before 8.0 because throws IAE after that\n         {\n-            try (IndexAnalyzers indexAnalyzers = buildAnalyzers(Version.CURRENT, \"edgeNGram\")) {\n+            try (IndexAnalyzers indexAnalyzers = buildAnalyzers(\n+                    VersionUtils.randomVersionBetween(random(), Version.V_7_3_0, VersionUtils.getPreviousVersion(Version.CURRENT)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a1240dd21535d60c2ec055472e85aa75052240"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzc4MDU5OnYy", "diffSide": "RIGHT", "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/CommonAnalysisPluginTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTozODoxNFrOFdb3Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTo0NToyN1rOFdcIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwOTUxMQ==", "bodyText": "You shouldn't need to pull a factory and call create to get warnings anymore, they will be emitted when createTestAnalysis is called.", "url": "https://github.com/elastic/elasticsearch/pull/50862#discussion_r366409511", "createdAt": "2020-01-14T15:38:14Z", "author": {"login": "romseygeek"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/CommonAnalysisPluginTests.java", "diffHunk": "@@ -102,4 +105,82 @@ public void testEdgeNGramFilterInCustomAnalyzerDeprecationError() throws IOExcep\n                     + \"Please change the filter name to [edge_ngram] instead.\");\n         }\n     }\n+\n+    /**\n+     * Check that we log a deprecation warning for \"nGram\" and \"edgeNGram\" tokenizer names with 7.6 and\n+     * disallow usages for indices created after 8.0\n+     */\n+    public void testNGramTokenizerDeprecation() throws IOException {\n+        // tests for prebuilt tokenizer\n+        doTestPrebuiltTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestPrebuiltTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestPrebuiltTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))),\n+                true);\n+        doTestPrebuiltTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))), true);\n+        expectThrows(IllegalArgumentException.class, () -> doTestPrebuiltTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+        expectThrows(IllegalArgumentException.class, () -> doTestPrebuiltTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+\n+        // same batch of tests for custom tokenizer definition in the settings\n+        doTestCustomTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestCustomTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestCustomTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))),\n+                true);\n+        doTestCustomTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))), true);\n+        expectThrows(IllegalArgumentException.class, () -> doTestCustomTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+        expectThrows(IllegalArgumentException.class, () -> doTestCustomTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+    }\n+\n+    public void doTestPrebuiltTokenizerDeprecation(String deprecatedName, String replacement, Version version, boolean expectWarning)\n+            throws IOException {\n+        final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir())\n+            .put(IndexMetaData.SETTING_VERSION_CREATED, version).build();\n+\n+        try (CommonAnalysisPlugin commonAnalysisPlugin = new CommonAnalysisPlugin()) {\n+            Map<String, TokenizerFactory> tokenizers = createTestAnalysis(\n+                    IndexSettingsModule.newIndexSettings(\"index\", settings), settings, commonAnalysisPlugin).tokenizer;\n+            TokenizerFactory tokenizerFactory = tokenizers.get(deprecatedName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1369e17cfe333fffb2db935549a9aa7455e69a7b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQxMzg3Mw==", "bodyText": "This tests prebuild tokenizer directly though, e.g. when they are used via \u201c_analyze\u201d endpoint directly they wouldn\u2019t appear in analyzers. createTestAnalysis  doesn\u2019t trigger the warning in that case if nothing refers to them from analysis settings.", "url": "https://github.com/elastic/elasticsearch/pull/50862#discussion_r366413873", "createdAt": "2020-01-14T15:45:27Z", "author": {"login": "cbuescher"}, "path": "modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/CommonAnalysisPluginTests.java", "diffHunk": "@@ -102,4 +105,82 @@ public void testEdgeNGramFilterInCustomAnalyzerDeprecationError() throws IOExcep\n                     + \"Please change the filter name to [edge_ngram] instead.\");\n         }\n     }\n+\n+    /**\n+     * Check that we log a deprecation warning for \"nGram\" and \"edgeNGram\" tokenizer names with 7.6 and\n+     * disallow usages for indices created after 8.0\n+     */\n+    public void testNGramTokenizerDeprecation() throws IOException {\n+        // tests for prebuilt tokenizer\n+        doTestPrebuiltTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestPrebuiltTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestPrebuiltTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))),\n+                true);\n+        doTestPrebuiltTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))), true);\n+        expectThrows(IllegalArgumentException.class, () -> doTestPrebuiltTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+        expectThrows(IllegalArgumentException.class, () -> doTestPrebuiltTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+\n+        // same batch of tests for custom tokenizer definition in the settings\n+        doTestCustomTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestCustomTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.V_7_5_2), false);\n+        doTestCustomTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))),\n+                true);\n+        doTestCustomTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_7_6_0,\n+                        Version.max(Version.V_7_6_0, VersionUtils.getPreviousVersion(Version.V_8_0_0))), true);\n+        expectThrows(IllegalArgumentException.class, () -> doTestCustomTokenizerDeprecation(\"nGram\", \"ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+        expectThrows(IllegalArgumentException.class, () -> doTestCustomTokenizerDeprecation(\"edgeNGram\", \"edge_ngram\",\n+                VersionUtils.randomVersionBetween(random(), Version.V_8_0_0, Version.CURRENT), true));\n+    }\n+\n+    public void doTestPrebuiltTokenizerDeprecation(String deprecatedName, String replacement, Version version, boolean expectWarning)\n+            throws IOException {\n+        final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir())\n+            .put(IndexMetaData.SETTING_VERSION_CREATED, version).build();\n+\n+        try (CommonAnalysisPlugin commonAnalysisPlugin = new CommonAnalysisPlugin()) {\n+            Map<String, TokenizerFactory> tokenizers = createTestAnalysis(\n+                    IndexSettingsModule.newIndexSettings(\"index\", settings), settings, commonAnalysisPlugin).tokenizer;\n+            TokenizerFactory tokenizerFactory = tokenizers.get(deprecatedName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwOTUxMQ=="}, "originalCommit": {"oid": "1369e17cfe333fffb2db935549a9aa7455e69a7b"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4836, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}