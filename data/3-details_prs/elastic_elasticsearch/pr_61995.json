{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NzE3MzEz", "number": 61995, "title": "Implement fields fetch for runtime fields", "bodyText": "This implements the fields API in _search for runtime fields using\ndoc values. Most of that implementation is stolen from the\ndocvalue_fields fetch sub-phase, just moved into the same API that the\nfields API uses. At this point the docvalue_fields fetch phase looks\nlike a special case of the fields API.\nWhile I was at it I moved the \"which doc values sub-implementation\nshould I use for fetching?\" question from a bunch of instanceofs to a\nmethod on LeafFieldData so we can be much more flexible with what is\nreturned and we're not forced to extend certain classes just to make the\nfetch phase happy.\nRelates to #59332", "createdAt": "2020-09-04T14:05:04Z", "url": "https://github.com/elastic/elasticsearch/pull/61995", "merged": true, "mergeCommit": {"oid": "9a127adb4b1dd8e69ac5b6c08cc7251383562e9c"}, "closed": true, "closedAt": "2020-09-15T19:57:27Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFlsvogH2gAyNDc5NzE3MzEzOjE3ZjQ2YTYzYzkxN2ViMzVlNzA0ZThjNTUzNDViOWFjZDNkNmNmMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJL5KogH2gAyNDc5NzE3MzEzOmQ2NjZmM2ZiOGY3ZDk5ZTg1YTdhMjE4NjNlNzI1NThkYTRhZjU1ZjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "17f46a63c917eb35e704e8c55345b9acd3d6cf30", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/17f46a63c917eb35e704e8c55345b9acd3d6cf30", "committedDate": "2020-09-04T14:02:13Z", "message": "Implement fields fetch for runtime fields\n\nThis implements the `fields` API in `_search` for runtime fields using\ndoc values. Most of that implementation is stolen from the\n`docvalue_fields` fetch sub-phase, just moved into the same API that the\n`fields` API uses. At this point the `docvalue_fields` fetch phase looks\nlike a special case of the `fields` API.\n\nWhile I was at it I moved the \"which doc values sub-implementation\nshould I use for fetching?\" question from a bunch of `instanceof`s to a\nmethod on `LeafFieldData` so we can be much more flexible with what is\nreturned and we're not forced to extend certain classes just to make the\nfetch phase happy.\n\nRelates to #59332"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be09d7cbadb2fcdb049b43db2675ec3c2315745", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/9be09d7cbadb2fcdb049b43db2675ec3c2315745", "committedDate": "2020-09-04T14:07:11Z", "message": "Doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjgyNzI3", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-482682727", "createdAt": "2020-09-04T14:08:12Z", "commit": {"oid": "17f46a63c917eb35e704e8c55345b9acd3d6cf30"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDowODoxMlrOHNO98w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoxMzoxNVrOHNPI9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzODc3MQ==", "bodyText": "I think this is the most controversial part of this change. Previously we were building the SourceLookup in the fetch phase and letting things that needed doc values at fetch time use the standard search lookup. This starts us down a road to removing that. I think we like this because we don't want things like the explain sub-phase to modify the rest of the fetch phases.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483638771", "createdAt": "2020-09-04T14:08:12Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -299,6 +299,18 @@ public SearchLookup lookup() {\n         return this.lookup;\n     }\n \n+    private SearchLookup fetchLookup = null;\n+\n+    public SearchLookup fetchLookup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f46a63c917eb35e704e8c55345b9acd3d6cf30"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzOTY3MA==", "bodyText": "Now that all of the phases get a SearchLookup when they are built we could remove this and rely on them closing over what they need at construction time. That is pretty much what the doc values fetcher does, but not all of them do it. I think it is a bit confusing that some do and some don't, but I don't think now is the right time to make that change.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483639670", "createdAt": "2020-09-04T14:09:46Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -252,7 +252,14 @@ private HitContext prepareNonNestedHitContext(SearchContext context,\n         int subDocId = docId - subReaderContext.docBase;\n         if (fieldsVisitor == null) {\n             SearchHit hit = new SearchHit(docId, null, null, null);\n-            return new HitContext(hit, subReaderContext, subDocId, context.searcher(), sharedCache);\n+            return new HitContext(\n+                hit,\n+                subReaderContext,\n+                subDocId,\n+                context.searcher(),\n+                context.getQueryShardContext().fetchLookup().source(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f46a63c917eb35e704e8c55345b9acd3d6cf30"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MDE1Mg==", "bodyText": "All of the \"brains\" of this stuff has moved into the LeafFieldData implementations.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483640152", "createdAt": "2020-09-04T14:10:41Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchDocValuesPhase.java", "diffHunk": "@@ -90,149 +84,19 @@ public void process(HitContext hit) throws IOException {\n                         // docValues fields will still be document fields, and put under \"fields\" section of a hit.\n                         hit.hit().setDocumentField(f.field, hitField);\n                     }\n-                    f.setValues(hit.docId(), hitField);\n+                    hitField.getValues().addAll(f.fetcher.fetchValues(hit.sourceLookup()));\n                 }\n             }\n         };\n     }\n \n-    private abstract static class DocValueField {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f46a63c917eb35e704e8c55345b9acd3d6cf30"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MTU5MQ==", "bodyText": "Given that everything else is in the LeafFieldData implemenations, this is all we need in runtime fields!", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483641591", "createdAt": "2020-09-04T14:13:15Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/RuntimeScriptFieldMapper.java", "diffHunk": "@@ -75,8 +77,8 @@ protected void parseCreateField(ParseContext context) {\n     }\n \n     @Override\n-    public ValueFetcher valueFetcher(MapperService mapperService, String format) {\n-        throw new UnsupportedOperationException();\n+    public ValueFetcher valueFetcher(MapperService mapperService, SearchLookup lookup, String format) {\n+        return new DocValueFetcher(fieldType().docValueFormat(format, null), () -> lookup.doc().getForField(fieldType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f46a63c917eb35e704e8c55345b9acd3d6cf30"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "186a9118a163bc165bfc31f10d62717309892a01", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/186a9118a163bc165bfc31f10d62717309892a01", "committedDate": "2020-09-04T14:24:05Z", "message": "Merge branch 'master' into runtime_fields_fetch_fields_take_two"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b4b3441c22d4cf16dd473fad9a9cc3866837035", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/9b4b3441c22d4cf16dd473fad9a9cc3866837035", "committedDate": "2020-09-04T14:43:21Z", "message": "Use clean nested context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9565d7dcf745bf436e2cec0b5b1582d91073c638", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/9565d7dcf745bf436e2cec0b5b1582d91073c638", "committedDate": "2020-09-04T16:03:50Z", "message": "Date nanos!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef3b2a4197d3fe649a06cfb9787e9b730ffe93fa", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/ef3b2a4197d3fe649a06cfb9787e9b730ffe93fa", "committedDate": "2020-09-04T16:17:52Z", "message": "Update test now that we force the right resolution in the formatter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODQwNjc0", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-482840674", "createdAt": "2020-09-04T17:40:40Z", "commit": {"oid": "ef3b2a4197d3fe649a06cfb9787e9b730ffe93fa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzo0MDo0MFrOHNWuAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxODo1ODo1M1rOHNYsNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc2NTc2Mw==", "bodyText": "I don't have a strong opinion, but it feels simpler to to use a LinkedHashMap and remove this class DocValueField.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483765763", "createdAt": "2020-09-04T17:40:40Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchDocValuesPhase.java", "diffHunk": "@@ -90,149 +84,19 @@ public void process(HitContext hit) throws IOException {\n                         // docValues fields will still be document fields, and put under \"fields\" section of a hit.\n                         hit.hit().setDocumentField(f.field, hitField);\n                     }\n-                    f.setValues(hit.docId(), hitField);\n+                    hitField.getValues().addAll(f.fetcher.fetchValues(hit.sourceLookup()));\n                 }\n             }\n         };\n     }\n \n-    private abstract static class DocValueField {\n-\n-        final String field;\n-        final DocValueFormat format;\n+    private class DocValueField {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3b2a4197d3fe649a06cfb9787e9b730ffe93fa"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc4MzAzNA==", "bodyText": "Am I understanding correctly that we lazily initialize here because the value fetchers are potentially created early, when constructing FieldValueRetriever inside FetchFieldsContext?\nIt feels natural to move the construction of FieldValueRetriever to FetchFieldsPhase#getProcessor, since fetch phases can now maintain state (after @romseygeek's nice refactor) ?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483783034", "createdAt": "2020-09-04T18:21:37Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocValueFetcher.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.lookup.SourceLookup;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Value fetcher that loads from doc values.\n+ */\n+public final class DocValueFetcher implements ValueFetcher {\n+    private final DocValueFormat format;\n+    private final Supplier<IndexFieldData<?>> ifdSource;\n+    /**\n+     * Field data implementation to load the values. Lazily initialized\n+     * because it is expensive.\n+     */\n+    private IndexFieldData<?> ifd;\n+    private Leaf leaf;\n+\n+    /**\n+     * Build the fetcher.\n+     * @param format the format to use\n+     * @param ifdSource a supplier that will build the field data when we need it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3b2a4197d3fe649a06cfb9787e9b730ffe93fa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5ODA2OA==", "bodyText": "This is pretty complex, and although MapperTestCase is a unit test, it feels closer to an integration test. Are you primarily trying to add coverage docvalue_fields on dates? It could be natural to just add some cases to SearchFieldsIT.\nIt feels like a bigger change (perhaps for a follow-up?) to figure out how to test docvalue_fields effectively. As we discussed, there's not great test coverage for it, especially not in terms of unit tests.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483798068", "createdAt": "2020-09-04T18:58:53Z", "author": {"login": "jtibshirani"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperTestCase.java", "diffHunk": "@@ -122,19 +143,78 @@ public final void testMeta() throws IOException {\n         );\n     }\n \n-    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue) {\n+    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue) throws IOException {\n         return fetchSourceValue(mapper, sourceValue, null);\n     }\n \n-    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue, String format) {\n+    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue, String format) throws IOException {\n         String field = mapper.name();\n \n         MapperService mapperService = mock(MapperService.class);\n         when(mapperService.sourcePath(field)).thenReturn(Set.of(field));\n \n-        ValueFetcher fetcher = mapper.valueFetcher(mapperService, format);\n+        ValueFetcher fetcher = mapper.valueFetcher(mapperService, null, format);\n         SourceLookup lookup = new SourceLookup();\n         lookup.setSource(Collections.singletonMap(field, sourceValue));\n         return fetcher.fetchValues(lookup);\n     }\n+\n+    /**\n+     * Use a {@linkplain FieldMapper} to extract values from doc values.\n+     */\n+    protected final List<?> fetchFromDocValues(FieldMapper mapper, DocValueFormat format, Object sourceValue) throws IOException {\n+        MapperService mapperService = mock(MapperService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3b2a4197d3fe649a06cfb9787e9b730ffe93fa"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af9da0675a98ef5c0001dab82287cd95b8a48b33", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/af9da0675a98ef5c0001dab82287cd95b8a48b33", "committedDate": "2020-09-04T19:49:28Z", "message": "Delay building all fetchers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTE2MDU2", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-482916056", "createdAt": "2020-09-04T20:10:43Z", "commit": {"oid": "af9da0675a98ef5c0001dab82287cd95b8a48b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDoxMDo0M1rOHNaWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDoxMDo0M1rOHNaWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgyNTI3Mg==", "bodyText": "Could we just store and expose fields on this context? It feels confusing to me to store a FieldValueRetriever supplier instead. Then we could take a simple approach where FetchFieldsPhase just constructs the FieldValueRetriever directly.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483825272", "createdAt": "2020-09-04T20:10:43Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchFieldsContext.java", "diffHunk": "@@ -36,21 +37,21 @@ public static FetchFieldsContext create(\n     ) {\n         DocumentMapper documentMapper = mapperService.documentMapper();\n         if (documentMapper.sourceMapper().enabled() == false) {\n-            throw new IllegalArgumentException(\"Unable to retrieve the requested [fields] since _source is \" +\n-                \"disabled in the mappings for index [\" + indexName + \"]\");\n+            throw new IllegalArgumentException(\n+                \"Unable to retrieve the requested [fields] since _source is \" + \"disabled in the mappings for index [\" + indexName + \"]\"\n+            );\n         }\n \n-        FieldValueRetriever fieldValueRetriever = FieldValueRetriever.create(mapperService, searchLookup, fields);\n-        return new FetchFieldsContext(fieldValueRetriever);\n+        return new FetchFieldsContext((m, s) -> FieldValueRetriever.create(m, s, fields));\n     }\n \n-    private final FieldValueRetriever fieldValueRetriever;\n+    private final BiFunction<MapperService, SearchLookup, FieldValueRetriever> fieldValueRetriever;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9da0675a98ef5c0001dab82287cd95b8a48b33"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56405f5cf5c673fbcfcac405423e82ab8ad93402", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/56405f5cf5c673fbcfcac405423e82ab8ad93402", "committedDate": "2020-09-04T20:53:31Z", "message": "Fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4944126afac3c8900411baaca58a028c62e1d05", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/e4944126afac3c8900411baaca58a028c62e1d05", "committedDate": "2020-09-04T20:59:37Z", "message": "Map"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTM3MzU3", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-482937357", "createdAt": "2020-09-04T21:01:54Z", "commit": {"oid": "e4944126afac3c8900411baaca58a028c62e1d05"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTowMTo1NFrOHNbZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1Mzo0NFrOHOp8IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MjQ3MQ==", "bodyText": "Small comment, it feels more natural to do this in FetchFieldsContext rather than this factory method ?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r483842471", "createdAt": "2020-09-04T21:01:54Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/FetchFieldsContext.java", "diffHunk": "@@ -18,36 +18,27 @@\n  */\n package org.elasticsearch.search.fetch.subphase;\n \n-import org.elasticsearch.index.mapper.DocumentMapper;\n import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.search.lookup.SearchLookup;\n \n import java.util.List;\n \n /**\n  * The context needed to retrieve fields.\n  */\n public class FetchFieldsContext {\n+    private final List<FieldAndFormat> fields;\n \n-    private FieldValueRetriever fieldValueRetriever;\n-\n-    public static FetchFieldsContext create(String indexName,\n-                                            MapperService mapperService,\n-                                            List<FieldAndFormat> fields) {\n-        DocumentMapper documentMapper = mapperService.documentMapper();\n-        if (documentMapper.sourceMapper().enabled() == false) {\n-            throw new IllegalArgumentException(\"Unable to retrieve the requested [fields] since _source is \" +\n-                \"disabled in the mappings for index [\" + indexName + \"]\");\n-        }\n-\n-        FieldValueRetriever fieldValueRetriever = FieldValueRetriever.create(mapperService, fields);\n-        return new FetchFieldsContext(fieldValueRetriever);\n+    public FetchFieldsContext(List<FieldAndFormat> fields) {\n+        this.fields = fields;\n     }\n \n-    private FetchFieldsContext(FieldValueRetriever fieldValueRetriever) {\n-        this.fieldValueRetriever = fieldValueRetriever;\n-    }\n-\n-    public FieldValueRetriever fieldValueRetriever() {\n-        return fieldValueRetriever;\n+    public FieldValueRetriever fieldValueRetriever(String indexName, MapperService mapperService, SearchLookup searchLookup) {\n+        if (mapperService.documentMapper().sourceMapper().enabled() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4944126afac3c8900411baaca58a028c62e1d05"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjU1OA==", "bodyText": "Could we just access the leaf reader directly? This is pretty common when you're just testing a single document:\nLeafReaderContext context = searcher.getIndexReader().leaves().get(0);", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485116558", "createdAt": "2020-09-08T18:29:55Z", "author": {"login": "jtibshirani"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperTestCase.java", "diffHunk": "@@ -122,19 +137,60 @@ public final void testMeta() throws IOException {\n         );\n     }\n \n-    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue) {\n+    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue) throws IOException {\n         return fetchSourceValue(mapper, sourceValue, null);\n     }\n \n-    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue, String format) {\n+    public static List<?> fetchSourceValue(FieldMapper mapper, Object sourceValue, String format) throws IOException {\n         String field = mapper.name();\n \n         MapperService mapperService = mock(MapperService.class);\n         when(mapperService.sourcePath(field)).thenReturn(Set.of(field));\n \n-        ValueFetcher fetcher = mapper.valueFetcher(mapperService, format);\n+        ValueFetcher fetcher = mapper.valueFetcher(mapperService, null, format);\n         SourceLookup lookup = new SourceLookup();\n         lookup.setSource(Collections.singletonMap(field, sourceValue));\n         return fetcher.fetchValues(lookup);\n     }\n+\n+    /**\n+     * Use a {@linkplain FieldMapper} to extract values from doc values.\n+     */\n+    protected final List<?> fetchFromDocValues(MapperService mapperService, MappedFieldType ft, DocValueFormat format, Object sourceValue)\n+        throws IOException {\n+\n+        BiFunction<MappedFieldType, Supplier<SearchLookup>, IndexFieldData<?>> fieldDataLookup = (mft, lookupSource) -> mft\n+            .fielddataBuilder(\"test\", () -> { throw new UnsupportedOperationException(); })\n+            .build(new IndexFieldDataCache.None(), new NoneCircuitBreakerService(), mapperService);\n+        SetOnce<List<?>> result = new SetOnce<>();\n+        withLuceneIndex(mapperService, iw -> {\n+            iw.addDocument(mapperService.documentMapper().parse(source(b -> b.field(ft.name(), sourceValue))).rootDoc());\n+        }, iw -> {\n+            IndexSearcher indexSearcher = newSearcher(iw);\n+            SearchLookup lookup = new SearchLookup(mapperService, fieldDataLookup);\n+            ValueFetcher valueFetcher = new DocValueFetcher(format, lookup.doc().getForField(ft));\n+            indexSearcher.search(new MatchAllDocsQuery(), new Collector() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4944126afac3c8900411baaca58a028c62e1d05"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjg0Nw==", "bodyText": "Could we just create a SearchLookup within FetchPhase? I think we could store it on HitContext instead of storing SourceLookup directly. That would make its scope and lifetime clearer. It also feels weird to me to put this on QueryShardContext, since it's not meant to be used during the query phase.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485122847", "createdAt": "2020-09-08T18:41:57Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -299,6 +299,18 @@ public SearchLookup lookup() {\n         return this.lookup;\n     }\n \n+    private SearchLookup fetchLookup = null;\n+\n+    public SearchLookup fetchLookup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzODc3MQ=="}, "originalCommit": {"oid": "17f46a63c917eb35e704e8c55345b9acd3d6cf30"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTI0OQ==", "bodyText": "I'm not sure about this idea, but it feels natural to only pass the doc ID here:\nList<Object> fetchValues(SourceLookup lookup) throws IOException;\n\nThen SourceValueFetcher could hang onto the SearchLookup and use that to access SourceLookup ?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485129249", "createdAt": "2020-09-08T18:53:44Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ValueFetcher.java", "diffHunk": "@@ -42,5 +44,10 @@\n      * @param lookup a lookup structure over the document's source.\n      * @return a list a standardized field values.\n      */\n-    List<Object> fetchValues(SourceLookup lookup);\n+    List<Object> fetchValues(SourceLookup lookup) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4944126afac3c8900411baaca58a028c62e1d05"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70991985d3064c35f988038eb97cbc8a889f1bfd", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/70991985d3064c35f988038eb97cbc8a889f1bfd", "committedDate": "2020-09-08T21:27:39Z", "message": "Merge branch 'master' into runtime_fields_fetch_fields_take_two"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6313a124cdb4cb0ef3fe14ead61471cbae90fd69", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/6313a124cdb4cb0ef3fe14ead61471cbae90fd69", "committedDate": "2020-09-08T21:41:53Z", "message": "Pass lookup when building"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a6584b771e13381caf4251e82dac55e3360953d", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/6a6584b771e13381caf4251e82dac55e3360953d", "committedDate": "2020-09-08T21:59:43Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/4e5bd650efd9972b1496a73849320c1e296a2cb4", "committedDate": "2020-09-08T22:24:43Z", "message": "Close over lookup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "345eb54f8f45246188ac1d9ef7305f03357c97c7", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/345eb54f8f45246188ac1d9ef7305f03357c97c7", "committedDate": "2020-09-08T22:20:02Z", "message": "Close over lookup"}, "afterCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/4e5bd650efd9972b1496a73849320c1e296a2cb4", "committedDate": "2020-09-08T22:24:43Z", "message": "Close over lookup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODA5MDM1", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-484809035", "createdAt": "2020-09-09T09:06:25Z", "commit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTowNjoyNVrOHO9-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyMDoyMFrOHPAvgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1NzU4MQ==", "bodyText": "if you use Collections.emptyList() don't you save yourself some trouble when backporting? :)", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485457581", "createdAt": "2020-09-09T09:06:25Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocValueFetcher.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.search.DocValueFormat;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Value fetcher that loads from doc values.\n+ */\n+public final class DocValueFetcher implements ValueFetcher {\n+    private final DocValueFormat format;\n+    private final IndexFieldData<?> ifd;\n+    private Leaf leaf;\n+\n+    public DocValueFetcher(DocValueFormat format, IndexFieldData<?> ifd) {\n+        this.format = format;\n+        this.ifd = ifd;\n+    }\n+\n+    public void setNextReader(LeafReaderContext context) {\n+        leaf = ifd.load(context).getLeafValueFetcher(format);\n+    }\n+\n+    @Override\n+    public List<Object> fetchValues(int docId) throws IOException {\n+        if (false == leaf.advanceExact(docId)) {\n+            return List.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MDU5OA==", "bodyText": "removing one method from SearchContext, that is great!!!", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485490598", "createdAt": "2020-09-09T09:58:43Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/internal/SearchContext.java", "diffHunk": "@@ -230,8 +229,6 @@ public final void assignRescoreDocIds(RescoreDocIds rescoreDocIds) {\n \n     public abstract BitsetFilterCache bitsetFilterCache();\n \n-    public abstract <IFD extends IndexFieldData<?>> IFD getForField(MappedFieldType fieldType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MzA3Nw==", "bodyText": "why does it need to be clean rather than the one coming from the query shard context?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485493077", "createdAt": "2020-09-09T10:03:01Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -337,7 +369,14 @@ private HitContext prepareNestedHitContext(SearchContext context,\n                 getInternalNestedIdentity(context, nestedDocId, subReaderContext, context.mapperService(), nestedObjectMapper);\n \n         SearchHit hit = new SearchHit(nestedTopDocId, rootId, nestedIdentity, docFields, metaFields);\n-        HitContext hitContext = new HitContext(hit, subReaderContext, nestedDocId, context.searcher(), sharedCache);\n+        HitContext hitContext = new HitContext(\n+            hit,\n+            subReaderContext,\n+            nestedDocId,\n+            context.searcher(),\n+            new SourceLookup(),  // Use a clean, fresh SourceLookup for the nested context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5NTA5Mw==", "bodyText": "why can't we re-use the search lookup from the query shard context?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485495093", "createdAt": "2020-09-09T10:06:17Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -102,9 +103,10 @@ public void execute(SearchContext context) {\n             SearchHit[] hits = new SearchHit[context.docIdsToLoadSize()];\n             Map<String, Object> sharedCache = new HashMap<>();\n \n+            SearchLookup lookup = context.getQueryShardContext().newSearchLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMDk1OQ==", "bodyText": "Interesting, so we were using a different SourceLookup instance for each hit? what does that mean in practice?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485500959", "createdAt": "2020-09-09T10:16:43Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchSubPhase.java", "diffHunk": "@@ -39,15 +40,22 @@\n         private final IndexSearcher searcher;\n         private final LeafReaderContext readerContext;\n         private final int docId;\n-        private final SourceLookup sourceLookup = new SourceLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMjUyNw==", "bodyText": "this looks much better, thank you!", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485502527", "createdAt": "2020-09-09T10:19:44Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/fielddata/LeafFieldData.java", "diffHunk": "@@ -37,4 +41,26 @@\n      */\n     SortedBinaryDocValues getBytesValues();\n \n+    /**\n+     * Return a value fetcher for this leaf implementation.\n+     */\n+    default DocValueFetcher.Leaf getLeafValueFetcher(DocValueFormat format) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMjg0OQ==", "bodyText": "I wonder if in all places where we carry around the search lookup, we should not rather make it a supplier like we did in fielddataBuilder.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485502849", "createdAt": "2020-09-09T10:20:20Z", "author": {"login": "javanna"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java", "diffHunk": "@@ -114,7 +115,7 @@ public void testPlugin() throws Exception {\n         private static final String NAME = \"term_vectors_fetch\";\n \n         @Override\n-        public FetchSubPhaseProcessor getProcessor(SearchContext searchContext) {\n+        public FetchSubPhaseProcessor getProcessor(SearchContext searchContext, SearchLookup lookup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTMxODQy", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-484931842", "createdAt": "2020-09-09T11:57:01Z", "commit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1NzowMVrOHPDyNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1NzowMVrOHPDyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MjY5NQ==", "bodyText": "thinking out loud, would it make any sense to call fieldType().fieldDataBuilder directly instead of calling getForField against the lookup? Any substantial difference between the two?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485552695", "createdAt": "2020-09-09T11:57:01Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/RuntimeFieldMapper.java", "diffHunk": "@@ -75,8 +77,8 @@ protected void parseCreateField(ParseContext context) {\n     }\n \n     @Override\n-    public ValueFetcher valueFetcher(MapperService mapperService, String format) {\n-        throw new UnsupportedOperationException();\n+    public ValueFetcher valueFetcher(MapperService mapperService, SearchLookup lookup, String format) {\n+        return new DocValueFetcher(fieldType().docValueFormat(format, null), lookup.doc().getForField(fieldType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTU2ODAy", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-484956802", "createdAt": "2020-09-09T12:30:12Z", "commit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMDoxMlrOHPE-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMDoxMlrOHPE-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MjEwNA==", "bodyText": "I was about to ask if we are good considering this the default impl, but I double checked the old logic from FetchDocValuesPhase and it seems to match the index field data class hierarchy, so +1. One concern I have, and I have been wondering for a while, why don't we have a base class for all the Sorted*DocValues given that all of the advanceExact and docValueCount impl are exactly the same? nextValue also is very similar besides its return type.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485572104", "createdAt": "2020-09-09T12:30:12Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/fielddata/LeafFieldData.java", "diffHunk": "@@ -37,4 +41,26 @@\n      */\n     SortedBinaryDocValues getBytesValues();\n \n+    /**\n+     * Return a value fetcher for this leaf implementation.\n+     */\n+    default DocValueFetcher.Leaf getLeafValueFetcher(DocValueFormat format) {\n+        SortedBinaryDocValues values = getBytesValues();\n+        return new DocValueFetcher.Leaf() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTY4NTIy", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-484968522", "createdAt": "2020-09-09T12:45:10Z", "commit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo0NToxMFrOHPFh_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo0NToxMFrOHPFh_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4MTMxMA==", "bodyText": "These methods look suspiciously similar (the same?) to those exposed by all of our Sorted*DocValues implementations. I have been thinking about why we need this new interface, given that conceptually, what we are doing when fetching values from doc_values is exactly the same as usual (reading!) plus some reformatting on what nextValue returns.\nI think that we have a chance to make the integration with the existing doc values classes easier to follow. I am under the impression that we need this new interface mostly because all of our SortedDocValues classes don't share a base class, is that the case? Would it be possible / make sense to have LeafFieldData instead return an enhanced version of SortedDocValues that does the formatting, rather than introducing a new interface for that that has the same methods as the existing classes?\nThis may become a bigger change, I haven't thought all of this through, but maybe it makes sense to discuss as we may have a chance to reduce the boilerplate we need to add here.", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r485581310", "createdAt": "2020-09-09T12:45:10Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocValueFetcher.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.search.DocValueFormat;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Value fetcher that loads from doc values.\n+ */\n+public final class DocValueFetcher implements ValueFetcher {\n+    private final DocValueFormat format;\n+    private final IndexFieldData<?> ifd;\n+    private Leaf leaf;\n+\n+    public DocValueFetcher(DocValueFormat format, IndexFieldData<?> ifd) {\n+        this.format = format;\n+        this.ifd = ifd;\n+    }\n+\n+    public void setNextReader(LeafReaderContext context) {\n+        leaf = ifd.load(context).getLeafValueFetcher(format);\n+    }\n+\n+    @Override\n+    public List<Object> fetchValues(int docId) throws IOException {\n+        if (false == leaf.advanceExact(docId)) {\n+            return List.of();\n+        }\n+        List<Object> result = new ArrayList<Object>(leaf.docValueCount());\n+        for (int i = 0, count = leaf.docValueCount(); i < count; ++i) {\n+            result.add(leaf.nextValue());\n+        }\n+        return result;\n+    }\n+\n+    public interface Leaf {\n+        /**\n+         * Advance the doc values reader to the provided doc.\n+         * @return false if there are no values for this document, true otherwise\n+         */\n+        boolean advanceExact(int docId) throws IOException;\n+\n+        /**\n+         * A count of the number of values at this document.\n+         */\n+        int docValueCount() throws IOException;\n+\n+        /**\n+         * Load and format the next value.\n+         */\n+        Object nextValue() throws IOException;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c668838691029e851e4fe98d40476f07bd07a860", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/c668838691029e851e4fe98d40476f07bd07a860", "committedDate": "2020-09-09T13:10:32Z", "message": "Remove oops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103df6a2e35fba27dcb7b2232dac3ae97beaeaa9", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/103df6a2e35fba27dcb7b2232dac3ae97beaeaa9", "committedDate": "2020-09-09T13:18:19Z", "message": "Something is up with dates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c63a8864aed7d1f29f8cf6773e95f4fa4d9d19b9", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/c63a8864aed7d1f29f8cf6773e95f4fa4d9d19b9", "committedDate": "2020-09-09T13:21:48Z", "message": "Revert \"Map\"\n\nThis reverts commit e4944126afac3c8900411baaca58a028c62e1d05."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7315fe913b525878d7a9502516954a2e625009c", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/d7315fe913b525878d7a9502516954a2e625009c", "committedDate": "2020-09-10T18:32:42Z", "message": "Merge branch 'master' into runtime_fields_fetch_fields_take_two"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92f8a5a3675947620e69c3e8a0160e5194f9fe7", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f92f8a5a3675947620e69c3e8a0160e5194f9fe7", "committedDate": "2020-09-10T19:11:05Z", "message": "Revert \"Close over lookup\"\n\nThis reverts commit 4e5bd650efd9972b1496a73849320c1e296a2cb4."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "122663caeb73943b547149da6c9d053b1f3dbccf", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/122663caeb73943b547149da6c9d053b1f3dbccf", "committedDate": "2020-09-10T19:13:07Z", "message": "Fetch lookup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f130ca655fc8e473e4a983ec22394096265e50", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/77f130ca655fc8e473e4a983ec22394096265e50", "committedDate": "2020-09-10T19:13:57Z", "message": "Rename k plz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe6b3d3613cc8be1c9dfa8f5904e9c852449527", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/0fe6b3d3613cc8be1c9dfa8f5904e9c852449527", "committedDate": "2020-09-10T20:09:44Z", "message": "Merge branch 'master' into runtime_fields_fetch_fields_take_two"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3790f5e48dabc86ae045f9d20cecca51a18d2ece", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3790f5e48dabc86ae045f9d20cecca51a18d2ece", "committedDate": "2020-09-10T20:10:56Z", "message": "Compile plz"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDIxODQ4", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-488021848", "createdAt": "2020-09-14T18:08:34Z", "commit": {"oid": "3790f5e48dabc86ae045f9d20cecca51a18d2ece"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTA1MDQz", "url": "https://github.com/elastic/elasticsearch/pull/61995#pullrequestreview-488505043", "createdAt": "2020-09-15T09:39:25Z", "commit": {"oid": "3790f5e48dabc86ae045f9d20cecca51a18d2ece"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOTozOToyNVrOHR5ZUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOTo0MDozN1rOHR5cpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyODIwOQ==", "bodyText": "ping?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r488528209", "createdAt": "2020-09-15T09:39:25Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DocValueFetcher.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.search.DocValueFormat;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Value fetcher that loads from doc values.\n+ */\n+public final class DocValueFetcher implements ValueFetcher {\n+    private final DocValueFormat format;\n+    private final IndexFieldData<?> ifd;\n+    private Leaf leaf;\n+\n+    public DocValueFetcher(DocValueFormat format, IndexFieldData<?> ifd) {\n+        this.format = format;\n+        this.ifd = ifd;\n+    }\n+\n+    public void setNextReader(LeafReaderContext context) {\n+        leaf = ifd.load(context).getLeafValueFetcher(format);\n+    }\n+\n+    @Override\n+    public List<Object> fetchValues(int docId) throws IOException {\n+        if (false == leaf.advanceExact(docId)) {\n+            return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1NzU4MQ=="}, "originalCommit": {"oid": "4e5bd650efd9972b1496a73849320c1e296a2cb4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyOTA2Mg==", "bodyText": "shall we open an issue to track finding an alternative for this?", "url": "https://github.com/elastic/elasticsearch/pull/61995#discussion_r488529062", "createdAt": "2020-09-15T09:40:37Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -290,15 +290,33 @@ MappedFieldType failIfFieldMappingNotFound(String name, MappedFieldType fieldMap\n \n     private SearchLookup lookup = null;\n \n+    /**\n+     * Get the lookup to use during the search.\n+     */\n     public SearchLookup lookup() {\n         if (this.lookup == null) {\n             this.lookup = new SearchLookup(\n                 getMapperService(),\n-                (fieldType, searchLookup) -> indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName(), searchLookup));\n+                (fieldType, searchLookup) -> indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName(), searchLookup)\n+            );\n         }\n         return this.lookup;\n     }\n \n+    /**\n+     * Build a lookup customized for the fetch phase. Use {@link #lookup()}\n+     * in other phases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3790f5e48dabc86ae045f9d20cecca51a18d2ece"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459808fb49b797deace427bc5a91da64983f10ac", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/459808fb49b797deace427bc5a91da64983f10ac", "committedDate": "2020-09-15T16:23:03Z", "message": "Merge branch 'master' into runtime_fields_fetch_fields_take_two"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2055c325016009e8a46b9f73cf149f00f8a23842", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/2055c325016009e8a46b9f73cf149f00f8a23842", "committedDate": "2020-09-15T16:39:16Z", "message": "Compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e62094ac0ad369f0016dacd44c23fd8711b6e5", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/d9e62094ac0ad369f0016dacd44c23fd8711b6e5", "committedDate": "2020-09-15T16:39:55Z", "message": "Iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "137ac902a2dab45c25021cae4a0add7e9cf4c3d5", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/137ac902a2dab45c25021cae4a0add7e9cf4c3d5", "committedDate": "2020-09-15T18:13:25Z", "message": "oops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d666f3fb8f7d99e85a7a21863e72558da4af55f6", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/d666f3fb8f7d99e85a7a21863e72558da4af55f6", "committedDate": "2020-09-15T18:13:57Z", "message": "Merge branch 'master' into runtime_fields_fetch_fields_take_two"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4891, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}