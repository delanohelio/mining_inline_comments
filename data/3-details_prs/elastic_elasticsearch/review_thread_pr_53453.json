{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDk3MjU2", "number": 53453, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoyNjo1N1rODnXvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo1MToxNVrODrHV1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjEwMDY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoyNjo1N1rOF1VAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNjo0MVrOF3122A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ==", "bodyText": "The tricky bits of this work are:\n\nXContent serialization is managed inside Authentication\nInformation about anonymous user is not available in Authentication.\n\nOne approach is to add an new anonymousRoles field to User class and populate it during authentication. But this has wide spread impact as the User object is serialised and sent everywhere. Also the anonymous access is by default off, so it does not seem to justify the wide spread change.\nSo the new logic is added here in RestAuthenticationAction, which can create the anonymous user object and inject its roles into the XContent object.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r391463115", "createdAt": "2020-03-12T08:26:57Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTUxNw==", "bodyText": "One approach is to add an new anonymousRoles field to User class and populate it during authentication.\n\nI think the best way forward is to actually do this ( no need to add a field to User), but evaluate the anonymous roles during authentication (i.e. right after the realms return the User in AuthenticationService#consumeToken ) instead of during authorization.\nIf we don't want to do this now, but defer it to a later point ( or as part of the effort to refactor the logic around AuthenticationTokens ), I think this fits better in the Transport Action than in the Rest one.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r392149517", "createdAt": "2020-03-13T10:37:01Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ=="}, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NTExNg==", "bodyText": "I think this will only work if we move away from adding the new anonymous_role field in the response, am I right?\nOtherwise, there is no place to save these role information. We could use User#metadata but it feels hacky.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r392155116", "createdAt": "2020-03-13T10:49:11Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ=="}, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NjIyNA==", "bodyText": "Yes this implies we follow my other comment and anonymous roles are part of roles", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r392156224", "createdAt": "2020-03-13T10:51:28Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ=="}, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MDk2NA==", "bodyText": "Great. Thanks for the clarification.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r392160964", "createdAt": "2020-03-13T11:00:51Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ=="}, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjczMTc1Nw==", "bodyText": "@jkakavas There are some issues for adding the anonymous roles into User#roles\n\nAuthenticationService#consumeToken does not cover runAs user, which is handled in lookupRunAsUser.\nBoth above methods end in finishAuthentication , so this could be a better candidate.\nBut doing above changes the existing logic. It's adding the anonymous roles to all users. Currently, some system users do not inherit anonymous roles. The code even asserts that XPackUser can only have a single role. There could be other situations where adding anonymous roles are not desired?\nThe final role resolving is handled in CompositeRolesStore#getRoles. Result of this method is the source of truth as it is what gets used in execution.\n\nIn summary, adding roles to all authenticated user has wider impact and it does not feel ideal. I think that the Authorization process may still be a better place for this, because \"granting more roles\" to user sounds more like \"authorization\" instead of \"authentication\". In fact, CompositeRolesStore#getRoles (part of authorization) is where this happens.\nThe challenge of using result of CompositeRolesStore#getRoles is that it is not easily accessible:\n\nThe resulted AuthorizationInfo object does get saved in threadContext as a Transient value. But this does not seem to be accessible once cross the wire.\nIt is also not possible (or ideal) to alter the User object in authorization process for saving these resolved roles.\nAdding a new key in threadContext for saving these roles seem to be overkill and inconsistent.\n\nSo I'd like to propose the following approach:\n\nAdd a new field for the resolved roles in  org.elasticsearch.xpack.core.security.action.user.AuthenticateResponse.\nIn TransportAuthenticateAction, grab the resolved roles from threadContext and set it to the AuthenticateResponse object. It may be possible to access the transient value here because the transport action runs in the same machine as the \"authorization\" process, i.e. not cross wire.\nRestAuthenticateAction has access to AuthenticateResponse from which the final response can be built.\n\nPlease let me know your thoughts. Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r392731757", "createdAt": "2020-03-16T00:27:21Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ=="}, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNDc4Ng==", "bodyText": "There could be other situations where adding anonymous roles are not desired?\n\nI can think of reserved and internal users. I don't think we need to care about internal users here ( _system, _xpack etc ) as we wouldn't be handling requests from the REST layer as these users. But reserved users ( i.e. kibana ) would be problematic.\n\nI think that the Authorization process may still be a better place for this, because \"granting more roles\" to user sounds more like \"authorization\" instead of \"authentication\". In fact, CompositeRolesStore#getRoles (part of authorization) is where this happens.\n\nBut we do resolve and populate the user roles in authentication too which makes it hard to have this mental distinction. I would argue that role resolving based on user attributes ( i.e. role mapping ) is part of authentication. Granting access based on the definition of these roles is authorization.\nI still feel that this fits better in AuthenticationService but did not have the cycles to think it through. I think this would benefit from a short live discussion, care to put it on the agenda for our weekly meeting tomorrow? We can reach a consensus there and come back here with that and see this through to completion", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r393824786", "createdAt": "2020-03-17T16:51:15Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ=="}, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODM5Mg==", "bodyText": "I added it under Forward agenda. Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r394098392", "createdAt": "2020-03-18T04:16:41Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());\n+                    builder.endObject();\n+                } else {\n+                    authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MzExNQ=="}, "originalCommit": {"oid": "98a319d4c32b92faa66ab2af6480cd28b5317512"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE5NDcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxMjoyN1rOF18XHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDo1NTowMlrOF1_bOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzgwNQ==", "bodyText": "I think I had a change of heart since #47195 (comment). I think that the fact that these are roles inherited by the anonymous user configuration is more important to the administrator and/or for troubleshooting than it is for the user themselves. As such, if I know/should know that anonymous access is enabled, I can make sense of the response ( as to why more roles are returned ) and if I don't, I probably just care about what roles I have more than why I have them.\nSimilar to why we don't return \"native_roles\": {xxx}, \"roles_from_role_mapping_based_on_groups\": {},  \"roles_from_role_mapping_based_on_username\": {},  \"roles_from_role_mapping_based_on_metadata\": {} , I believe we shouldn't be adding anonymous_roles here. The purpose of the API is to tell us which roles the user has, but not why they have them.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r392107805", "createdAt": "2020-03-13T09:12:27Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149c6f8a80b4ebb50d09a895e103f09f371b7f3d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1ODAwOQ==", "bodyText": "You have a point here plus it makes the whole thing easier. I have no objection.\nJust some thought process: I am ok with adding a new field. But the name \"anonymous_roles\" feels too specific for me to like. This does raise the question why we don't have things like native_roles etc. I wanted name it inherited_roles so it can at least to re-used. But if we treat anonymous roles just like another role providers, it should then just be part of the existing roles field. So yes, I'll remove the new field.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r392158009", "createdAt": "2020-03-13T10:55:02Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/RestAuthenticateAction.java", "diffHunk": "@@ -65,7 +70,16 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 new RestBuilderListener<AuthenticateResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(AuthenticateResponse authenticateResponse, XContentBuilder builder) throws Exception {\n-                authenticateResponse.authentication().toXContent(builder, ToXContent.EMPTY_PARAMS);\n+                if (anonymousEnabled\n+                    && false == anonymousUser.equals(authenticateResponse.authentication().getUser())\n+                    && anonymousUser.roles().length != 0) {\n+                    builder.startObject();\n+                    authenticateResponse.authentication().toXContentFragment(builder);\n+                    builder.array(User.Fields.ANONYMOUS_ROLES.getPreferredName(), anonymousUser.roles());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzgwNQ=="}, "originalCommit": {"oid": "149c6f8a80b4ebb50d09a895e103f09f371b7f3d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDc4MTQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/qa/basic-enable-security/src/test/java/org/elasticsearch/xpack/security/EnableSecurityOnBasicLicenseIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODowMDoxNlrOF6kjow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1MDoyMFrOF6mKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDY3NQ==", "bodyText": "Do we guarantee order ? if not maybe containsInAnyOrder() is better here ?", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r396960675", "createdAt": "2020-03-24T08:00:16Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/qa/basic-enable-security/src/test/java/org/elasticsearch/xpack/security/EnableSecurityOnBasicLicenseIT.java", "diffHunk": "@@ -126,7 +126,7 @@ private void checkAuthentication() throws IOException {\n         final Map<String, Object> auth = getAsMap(\"/_security/_authenticate\");\n         // From file realm, configured in build.gradle\n         assertThat(ObjectPath.evaluate(auth, \"username\"), equalTo(\"security_test_user\"));\n-        assertThat(ObjectPath.evaluate(auth, \"roles\"), contains(\"security_test_role\"));\n+        assertThat(ObjectPath.evaluate(auth, \"roles\"), contains(\"security_test_role\", \"anonymous\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4Njk0NA==", "bodyText": "Updated. The order is preserved. But I don't think we need guarantee it.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r396986944", "createdAt": "2020-03-24T08:50:20Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/qa/basic-enable-security/src/test/java/org/elasticsearch/xpack/security/EnableSecurityOnBasicLicenseIT.java", "diffHunk": "@@ -126,7 +126,7 @@ private void checkAuthentication() throws IOException {\n         final Map<String, Object> auth = getAsMap(\"/_security/_authenticate\");\n         // From file realm, configured in build.gradle\n         assertThat(ObjectPath.evaluate(auth, \"username\"), equalTo(\"security_test_user\"));\n-        assertThat(ObjectPath.evaluate(auth, \"roles\"), contains(\"security_test_role\"));\n+        assertThat(ObjectPath.evaluate(auth, \"roles\"), contains(\"security_test_role\", \"anonymous\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDY3NQ=="}, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDgwMTI2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODowNjo0OVrOF6kwAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1MTowNFrOF6mMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2Mzg0MA==", "bodyText": "nit: this implies that we have some special handling when merging the anonymous roles, while we just merge the two String arrays. I get that this is cleaner than doing it twice above but maybe a more generic mergeRoles where you pass both existingRoles and anonymoysUser.roles? Just a suggestion though", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r396963840", "createdAt": "2020-03-24T08:06:49Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = new User(\n+                    user.principal(),\n+                    mergeAnonymousRoles(user.roles()),\n+                    user.fullName(),\n+                    user.email(),\n+                    user.metadata(),\n+                    user.enabled()\n+                );\n+                if (user.isRunAs()) {\n+                    final User authenticatedUserWithMergedRoles = new User(\n+                        user.authenticatedUser().principal(),\n+                        mergeAnonymousRoles(user.authenticatedUser().roles()),\n+                        user.authenticatedUser().fullName(),\n+                        user.authenticatedUser().email(),\n+                        user.authenticatedUser().metadata(),\n+                        user.authenticatedUser().enabled()\n+                    );\n+                    userWithMergedRoles = new User(userWithMergedRoles, authenticatedUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return user;\n+            }\n+        }\n+\n+        private String[] mergeAnonymousRoles(String[] existingRoles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQwOQ==", "bodyText": "This is a good suggestion. It is cleaner that way. I updated.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r396987409", "createdAt": "2020-03-24T08:51:04Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = new User(\n+                    user.principal(),\n+                    mergeAnonymousRoles(user.roles()),\n+                    user.fullName(),\n+                    user.email(),\n+                    user.metadata(),\n+                    user.enabled()\n+                );\n+                if (user.isRunAs()) {\n+                    final User authenticatedUserWithMergedRoles = new User(\n+                        user.authenticatedUser().principal(),\n+                        mergeAnonymousRoles(user.authenticatedUser().roles()),\n+                        user.authenticatedUser().fullName(),\n+                        user.authenticatedUser().email(),\n+                        user.authenticatedUser().metadata(),\n+                        user.authenticatedUser().enabled()\n+                    );\n+                    userWithMergedRoles = new User(userWithMergedRoles, authenticatedUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return user;\n+            }\n+        }\n+\n+        private String[] mergeAnonymousRoles(String[] existingRoles) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2Mzg0MA=="}, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDgyNzg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODoxNTo0M1rOF6lAyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyMzowMVrOF6twMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2ODEzNg==", "bodyText": "Shouldn't we create a Set here and Collections.addAll so that we don't end up with duplicate roles in case the anonymous roles contains a role the user already has ?", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r396968136", "createdAt": "2020-03-24T08:15:43Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = new User(\n+                    user.principal(),\n+                    mergeAnonymousRoles(user.roles()),\n+                    user.fullName(),\n+                    user.email(),\n+                    user.metadata(),\n+                    user.enabled()\n+                );\n+                if (user.isRunAs()) {\n+                    final User authenticatedUserWithMergedRoles = new User(\n+                        user.authenticatedUser().principal(),\n+                        mergeAnonymousRoles(user.authenticatedUser().roles()),\n+                        user.authenticatedUser().fullName(),\n+                        user.authenticatedUser().email(),\n+                        user.authenticatedUser().metadata(),\n+                        user.authenticatedUser().enabled()\n+                    );\n+                    userWithMergedRoles = new User(userWithMergedRoles, authenticatedUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return user;\n+            }\n+        }\n+\n+        private String[] mergeAnonymousRoles(String[] existingRoles) {\n+            String[] mergedRoles = new String[existingRoles.length + anonymousUser.roles().length];\n+            System.arraycopy(existingRoles, 0, mergedRoles, 0, existingRoles.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MTQ4NQ==", "bodyText": "I intentially didn't do deduplication here. Deduplication, filtering out un-resolvable roles, preempting the superuser role are all done in CompositeRolesStore#getRoles, which comes after authentication.\nEven without the anonymous roles, it is still possible to create an user with duplicated roles, e.g.\n{\"roles\":[\"x\",\"x\",\"x\"],\"password\":...} and these roles will all show up in the authentication response. So I decided to retain the existing behaviour.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r396991485", "createdAt": "2020-03-24T08:57:46Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = new User(\n+                    user.principal(),\n+                    mergeAnonymousRoles(user.roles()),\n+                    user.fullName(),\n+                    user.email(),\n+                    user.metadata(),\n+                    user.enabled()\n+                );\n+                if (user.isRunAs()) {\n+                    final User authenticatedUserWithMergedRoles = new User(\n+                        user.authenticatedUser().principal(),\n+                        mergeAnonymousRoles(user.authenticatedUser().roles()),\n+                        user.authenticatedUser().fullName(),\n+                        user.authenticatedUser().email(),\n+                        user.authenticatedUser().metadata(),\n+                        user.authenticatedUser().enabled()\n+                    );\n+                    userWithMergedRoles = new User(userWithMergedRoles, authenticatedUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return user;\n+            }\n+        }\n+\n+        private String[] mergeAnonymousRoles(String[] existingRoles) {\n+            String[] mergedRoles = new String[existingRoles.length + anonymousUser.roles().length];\n+            System.arraycopy(existingRoles, 0, mergedRoles, 0, existingRoles.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2ODEzNg=="}, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NDc0Mg==", "bodyText": "I don't think we should entertain this existing behavior for no reason, and since we go in the trouble of merging the roles we should do de-duplication here . We could tackle this in a follow up where we for instance should not allow a user to be created with \"roles\" :[\"x\",\"x\",\"x\"] in the first place as this leniency makes no sense and I would argue that if someone created a user with  \"roles\" :[\"x\",\"x\"] , they probably meant  \"roles\" :[\"x\",\"y\"] and mistyped , so it's better to tell them up front/", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397044742", "createdAt": "2020-03-24T10:23:27Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = new User(\n+                    user.principal(),\n+                    mergeAnonymousRoles(user.roles()),\n+                    user.fullName(),\n+                    user.email(),\n+                    user.metadata(),\n+                    user.enabled()\n+                );\n+                if (user.isRunAs()) {\n+                    final User authenticatedUserWithMergedRoles = new User(\n+                        user.authenticatedUser().principal(),\n+                        mergeAnonymousRoles(user.authenticatedUser().roles()),\n+                        user.authenticatedUser().fullName(),\n+                        user.authenticatedUser().email(),\n+                        user.authenticatedUser().metadata(),\n+                        user.authenticatedUser().enabled()\n+                    );\n+                    userWithMergedRoles = new User(userWithMergedRoles, authenticatedUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return user;\n+            }\n+        }\n+\n+        private String[] mergeAnonymousRoles(String[] existingRoles) {\n+            String[] mergedRoles = new String[existingRoles.length + anonymousUser.roles().length];\n+            System.arraycopy(existingRoles, 0, mergedRoles, 0, existingRoles.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2ODEzNg=="}, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMTM0NA==", "bodyText": "Merging only happens when anonymous access is enabled. If we de-duplicate here, it must also be applied when anonymous access is not enabled. So I re-arranged the code.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397111344", "createdAt": "2020-03-24T12:23:01Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = new User(\n+                    user.principal(),\n+                    mergeAnonymousRoles(user.roles()),\n+                    user.fullName(),\n+                    user.email(),\n+                    user.metadata(),\n+                    user.enabled()\n+                );\n+                if (user.isRunAs()) {\n+                    final User authenticatedUserWithMergedRoles = new User(\n+                        user.authenticatedUser().principal(),\n+                        mergeAnonymousRoles(user.authenticatedUser().roles()),\n+                        user.authenticatedUser().fullName(),\n+                        user.authenticatedUser().email(),\n+                        user.authenticatedUser().metadata(),\n+                        user.authenticatedUser().enabled()\n+                    );\n+                    userWithMergedRoles = new User(userWithMergedRoles, authenticatedUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return user;\n+            }\n+        }\n+\n+        private String[] mergeAnonymousRoles(String[] existingRoles) {\n+            String[] mergedRoles = new String[existingRoles.length + anonymousUser.roles().length];\n+            System.arraycopy(existingRoles, 0, mergedRoles, 0, existingRoles.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2ODEzNg=="}, "originalCommit": {"oid": "903b805760bc0335b06de7d8b13afe8222f89506"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTMzMDY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMToyOVrOF6p_oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyODo0MFrOF6t8gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0OTc2MQ==", "bodyText": "I'm also a bit worried about duplicating the check here. Should we make \n  \n    \n      elasticsearch/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java\n    \n    \n         Line 418\n      in\n      9467dbf\n    \n    \n    \n    \n\n        \n          \n           private boolean isInternalUser(User user) { \n        \n    \n  \n\n public, update it to take AsyncSearchUSer into consideration ( which was missed when we introduced AsyncSearchUser - point in case )  and use that as a single source of truth for the check here ?", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397049761", "createdAt": "2020-03-24T10:31:29Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1deaa58b5b18984be64588c5d45fca4236d24c42"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2ODQyMQ==", "bodyText": "Yes makes sense. Long logical expression is never good as an if condition and should be wrapped inside a method.\nBut maybe we could find a better home for this method. How about User#isInternal(User user)?\nThe AsyncSearchUser is also missed in InternalUserSerializationHelper. The new Use#isInternal method can be leveraged in here as well. It won't be able to access AuthorizationService#isInternalUser due to circular dependency.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397068421", "createdAt": "2020-03-24T11:03:57Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0OTc2MQ=="}, "originalCommit": {"oid": "1deaa58b5b18984be64588c5d45fca4236d24c42"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MTA3OQ==", "bodyText": "Sure thing!", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397071079", "createdAt": "2020-03-24T11:08:54Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0OTc2MQ=="}, "originalCommit": {"oid": "1deaa58b5b18984be64588c5d45fca4236d24c42"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNDQ5Ng==", "bodyText": "I did the refactoring. But decided to leave InternalUserSerializationHelper out for now. Changing it breaks backwards compatibility, which I think deseves its own issue.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397114496", "createdAt": "2020-03-24T12:28:40Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,45 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeMergeAnonymousRolesForUser(User user) {\n+            if (SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0OTc2MQ=="}, "originalCommit": {"oid": "1deaa58b5b18984be64588c5d45fca4236d24c42"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTI5NDkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozMzozOVrOF7Qh6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozMzozOVrOF7Qh6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MTEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private User dedupUserRoles(User user) {\n          \n          \n            \n                    private User deduplicateUserRoles(User user) {", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397681131", "createdAt": "2020-03-25T08:33:39Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,51 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeConsolidateRolesForUser(User user) {\n+            if (User.isInternal(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = user.withRoles(mergeRoles(user.roles(), anonymousUser.roles()));\n+                if (user.isRunAs()) {\n+                    final User authUserWithMergedRoles = user.authenticatedUser().withRoles(\n+                        mergeRoles(user.authenticatedUser().roles(), anonymousUser.roles()));\n+                    userWithMergedRoles = new User(userWithMergedRoles, authUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return dedupUserRoles(user);\n+            }\n+        }\n+\n+        private String[] mergeRoles(String[] existingRoles, String[] otherRoles) {\n+            Set<String> roles = new LinkedHashSet<>(Arrays.asList(existingRoles));\n+            if (otherRoles != null) {\n+                Collections.addAll(roles, otherRoles);\n+            }\n+            return roles.toArray(new String[0]);\n+        }\n+\n+        private User dedupUserRoles(User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa0471a560cb9d8768ef66187876475878bc212"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTM0ODQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo0OTowOFrOF7RClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0NDowMFrOF7ziCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4OTQ5NA==", "bodyText": "Do we have to do the length check ? Can't this always be user.withRoles(Set.of(user.roles()).toArray(new String[0]));", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397689494", "createdAt": "2020-03-25T08:49:08Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,51 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeConsolidateRolesForUser(User user) {\n+            if (User.isInternal(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = user.withRoles(mergeRoles(user.roles(), anonymousUser.roles()));\n+                if (user.isRunAs()) {\n+                    final User authUserWithMergedRoles = user.authenticatedUser().withRoles(\n+                        mergeRoles(user.authenticatedUser().roles(), anonymousUser.roles()));\n+                    userWithMergedRoles = new User(userWithMergedRoles, authUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return dedupUserRoles(user);\n+            }\n+        }\n+\n+        private String[] mergeRoles(String[] existingRoles, String[] otherRoles) {\n+            Set<String> roles = new LinkedHashSet<>(Arrays.asList(existingRoles));\n+            if (otherRoles != null) {\n+                Collections.addAll(roles, otherRoles);\n+            }\n+            return roles.toArray(new String[0]);\n+        }\n+\n+        private User dedupUserRoles(User user) {\n+            final Set<String> userRoles = new LinkedHashSet<>(Arrays.asList(user.roles()));\n+            User userWithDedupRoles = userRoles.size() == user.roles().length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa0471a560cb9d8768ef66187876475878bc212"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NDYwMg==", "bodyText": "The length checks are to avoid creation of new User objects when it is not necessary. I think most of the times it is indeed not necessary, i.e. roles are already distinct. I did this mostly for: 1) retain existing behavior; 2) potential optimization.\nI added a comment to make this intention clear.", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r398254602", "createdAt": "2020-03-26T00:44:00Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,51 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeConsolidateRolesForUser(User user) {\n+            if (User.isInternal(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = user.withRoles(mergeRoles(user.roles(), anonymousUser.roles()));\n+                if (user.isRunAs()) {\n+                    final User authUserWithMergedRoles = user.authenticatedUser().withRoles(\n+                        mergeRoles(user.authenticatedUser().roles(), anonymousUser.roles()));\n+                    userWithMergedRoles = new User(userWithMergedRoles, authUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return dedupUserRoles(user);\n+            }\n+        }\n+\n+        private String[] mergeRoles(String[] existingRoles, String[] otherRoles) {\n+            Set<String> roles = new LinkedHashSet<>(Arrays.asList(existingRoles));\n+            if (otherRoles != null) {\n+                Collections.addAll(roles, otherRoles);\n+            }\n+            return roles.toArray(new String[0]);\n+        }\n+\n+        private User dedupUserRoles(User user) {\n+            final Set<String> userRoles = new LinkedHashSet<>(Arrays.asList(user.roles()));\n+            User userWithDedupRoles = userRoles.size() == user.roles().length", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4OTQ5NA=="}, "originalCommit": {"oid": "faa0471a560cb9d8768ef66187876475878bc212"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTM1NjM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo1MToxNVrOF7RHWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo1MToxNVrOF7RHWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY5MDcxMg==", "bodyText": "same as above", "url": "https://github.com/elastic/elasticsearch/pull/53453#discussion_r397690712", "createdAt": "2020-03-25T08:51:15Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -690,6 +694,51 @@ void writeAuthToContext(Authentication authentication) {\n         private void authenticateToken(AuthenticationToken token) {\n             this.consumeToken(token);\n         }\n+\n+        private User maybeConsolidateRolesForUser(User user) {\n+            if (User.isInternal(user)) {\n+                return user;\n+            } else if (isAnonymousUserEnabled && anonymousUser.equals(user) == false) {\n+                if (anonymousUser.roles().length == 0) {\n+                    throw new IllegalStateException(\"anonymous is only enabled when the anonymous user has roles\");\n+                }\n+                User userWithMergedRoles = user.withRoles(mergeRoles(user.roles(), anonymousUser.roles()));\n+                if (user.isRunAs()) {\n+                    final User authUserWithMergedRoles = user.authenticatedUser().withRoles(\n+                        mergeRoles(user.authenticatedUser().roles(), anonymousUser.roles()));\n+                    userWithMergedRoles = new User(userWithMergedRoles, authUserWithMergedRoles);\n+                }\n+                return userWithMergedRoles;\n+            } else {\n+                return dedupUserRoles(user);\n+            }\n+        }\n+\n+        private String[] mergeRoles(String[] existingRoles, String[] otherRoles) {\n+            Set<String> roles = new LinkedHashSet<>(Arrays.asList(existingRoles));\n+            if (otherRoles != null) {\n+                Collections.addAll(roles, otherRoles);\n+            }\n+            return roles.toArray(new String[0]);\n+        }\n+\n+        private User dedupUserRoles(User user) {\n+            final Set<String> userRoles = new LinkedHashSet<>(Arrays.asList(user.roles()));\n+            User userWithDedupRoles = userRoles.size() == user.roles().length\n+                ? user\n+                : user.withRoles(userRoles.toArray(new String[0]));\n+\n+            if (user.isRunAs()) {\n+                final Set <String> authUserRoles = new LinkedHashSet<>(Arrays.asList(user.authenticatedUser().roles()));\n+                User authUserWithDedupRoles = authUserRoles.size() == user.authenticatedUser().roles().length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa0471a560cb9d8768ef66187876475878bc212"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3313, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}