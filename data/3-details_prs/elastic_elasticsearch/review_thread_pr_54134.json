{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjc5MTk5", "number": 54134, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMjoxMlrODq_X0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMzowM1rODq_Y0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA1MDc0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMjoxMlrOF7FDZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxODozN1rOF7FOXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzA5NQ==", "bodyText": "When would this not be present? Shouldn't that be an error?", "url": "https://github.com/elastic/elasticsearch/pull/54134#discussion_r397493095", "createdAt": "2020-03-24T22:12:12Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -108,10 +109,18 @@ public void apply(Project project) {\n         TaskProvider<Copy> copyUpgradeTask = configureCopyUpgradeTask(project, upgradeVersion, upgradeDir);\n         TaskProvider<Copy> copyPluginsTask = configureCopyPluginsTask(project, pluginsDir);\n \n+        // Create lifecycle tasks so we can run all tests of a given type\n+        Map<ElasticsearchDistribution.Type, TaskProvider<?>> lifecyleTasks = new HashMap<>();\n+        lifecyleTasks.put(Type.DOCKER, project.getTasks().register(\"destructiveDistroTest#docker\"));\n+        lifecyleTasks.put(Type.ARCHIVE, project.getTasks().register(\"destructiveDistroTest#archives\"));\n+        lifecyleTasks.put(Type.DEB, project.getTasks().register(\"destructiveDistroTest#packages\"));\n+        lifecyleTasks.put(Type.RPM, lifecyleTasks.get(Type.DEB));\n+\n         TaskProvider<Task> destructiveDistroTest = project.getTasks().register(\"destructiveDistroTest\");\n         for (ElasticsearchDistribution distribution : distributions) {\n             TaskProvider<?> destructiveTask = configureDistroTest(project, distribution, dockerSupport);\n             destructiveDistroTest.configure(t -> t.dependsOn(destructiveTask));\n+            Optional.ofNullable(lifecyleTasks.get(distribution.getType())).ifPresent(p -> p.configure(t -> t.dependsOn(destructiveTask)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7bd2645b87de675d0f2e57e24ccd5e3370a41"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTkwMw==", "bodyText": "Yeah, you're right. I had initially anticipated something like the integ test zip type, but we aren't testing that here. And if we do add a type we would probably want this to explode rather than silently ignore. I've removed the optional wrapper here.", "url": "https://github.com/elastic/elasticsearch/pull/54134#discussion_r397495903", "createdAt": "2020-03-24T22:18:37Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -108,10 +109,18 @@ public void apply(Project project) {\n         TaskProvider<Copy> copyUpgradeTask = configureCopyUpgradeTask(project, upgradeVersion, upgradeDir);\n         TaskProvider<Copy> copyPluginsTask = configureCopyPluginsTask(project, pluginsDir);\n \n+        // Create lifecycle tasks so we can run all tests of a given type\n+        Map<ElasticsearchDistribution.Type, TaskProvider<?>> lifecyleTasks = new HashMap<>();\n+        lifecyleTasks.put(Type.DOCKER, project.getTasks().register(\"destructiveDistroTest#docker\"));\n+        lifecyleTasks.put(Type.ARCHIVE, project.getTasks().register(\"destructiveDistroTest#archives\"));\n+        lifecyleTasks.put(Type.DEB, project.getTasks().register(\"destructiveDistroTest#packages\"));\n+        lifecyleTasks.put(Type.RPM, lifecyleTasks.get(Type.DEB));\n+\n         TaskProvider<Task> destructiveDistroTest = project.getTasks().register(\"destructiveDistroTest\");\n         for (ElasticsearchDistribution distribution : distributions) {\n             TaskProvider<?> destructiveTask = configureDistroTest(project, distribution, dockerSupport);\n             destructiveDistroTest.configure(t -> t.dependsOn(destructiveTask));\n+            Optional.ofNullable(lifecyleTasks.get(distribution.getType())).ifPresent(p -> p.configure(t -> t.dependsOn(destructiveTask)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzA5NQ=="}, "originalCommit": {"oid": "f8c7bd2645b87de675d0f2e57e24ccd5e3370a41"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA1MzI4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMzowM1rOF7FE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxODo1MlrOF7FOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzQ3NA==", "bodyText": "We've used . as the separator in the rest of the tasks in this plugin. Can we reuse that here? It is easier when typing out the task name to not need to add quotes as # requires.", "url": "https://github.com/elastic/elasticsearch/pull/54134#discussion_r397493474", "createdAt": "2020-03-24T22:13:03Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -108,10 +109,18 @@ public void apply(Project project) {\n         TaskProvider<Copy> copyUpgradeTask = configureCopyUpgradeTask(project, upgradeVersion, upgradeDir);\n         TaskProvider<Copy> copyPluginsTask = configureCopyPluginsTask(project, pluginsDir);\n \n+        // Create lifecycle tasks so we can run all tests of a given type\n+        Map<ElasticsearchDistribution.Type, TaskProvider<?>> lifecyleTasks = new HashMap<>();\n+        lifecyleTasks.put(Type.DOCKER, project.getTasks().register(\"destructiveDistroTest#docker\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7bd2645b87de675d0f2e57e24ccd5e3370a41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NjAxNQ==", "bodyText": "Replaced # with ..", "url": "https://github.com/elastic/elasticsearch/pull/54134#discussion_r397496015", "createdAt": "2020-03-24T22:18:52Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -108,10 +109,18 @@ public void apply(Project project) {\n         TaskProvider<Copy> copyUpgradeTask = configureCopyUpgradeTask(project, upgradeVersion, upgradeDir);\n         TaskProvider<Copy> copyPluginsTask = configureCopyPluginsTask(project, pluginsDir);\n \n+        // Create lifecycle tasks so we can run all tests of a given type\n+        Map<ElasticsearchDistribution.Type, TaskProvider<?>> lifecyleTasks = new HashMap<>();\n+        lifecyleTasks.put(Type.DOCKER, project.getTasks().register(\"destructiveDistroTest#docker\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzQ3NA=="}, "originalCommit": {"oid": "f8c7bd2645b87de675d0f2e57e24ccd5e3370a41"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4181, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}