{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTk2Mjgx", "number": 54086, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMzozMlrODvSN2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowNTozN1rODvSQaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA4MTIwOnYy", "diffSide": "RIGHT", "path": "docs/reference/eql/functions.asciidoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMzozM1rOGBn0QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMjo0NzoxNVrOGCB1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NDExMw==", "bodyText": "This behavior isn't consistent with other string functions, like startsWith: https://www.elastic.co/guide/en/elasticsearch/reference/master/eql-function-ref.html#eql-fn-startswith\nI wonder if it would be more consistent to just pass a null value?", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r404354113", "createdAt": "2020-04-06T20:03:33Z", "author": {"login": "jrodewig"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5NTE3Ng==", "bodyText": "With wildcard all parameters after the first must be static strings, so these will get verification failures. With startswith and the other string functions, the second string argument isn't required to be static.", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r404495176", "createdAt": "2020-04-07T02:10:38Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NDExMw=="}, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDMyNA==", "bodyText": "Makes sense.", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r404780324", "createdAt": "2020-04-07T12:47:15Z", "author": {"login": "jrodewig"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NDExMw=="}, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA4MjIzOnYy", "diffSide": "RIGHT", "path": "docs/reference/eql/functions.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMzo1NFrOGBn0-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMzo1NFrOGBn0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NDI5Nw==", "bodyText": "If null, the function returns a 500 error.\n\nSee https://github.com/elastic/elasticsearch/pull/54086/files#r404354113", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r404354297", "createdAt": "2020-04-06T20:03:54Z", "author": {"login": "jrodewig"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error\n+wildcard(\"\", \"\")                                         // returns true\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+wildcard(<source>, <wildcard_exp>[, ...])\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n++\n+--\n+(Required, string)\n+Source string.\n+\n+If using a field as the argument, this parameter only supports the following\n+field datatypes:\n+\n+* <<keyword,`keyword`>>\n+* <<constant-keyword,`constant_keyword`>>\n+* <<text,`text`>> field with a <<keyword,`keyword`>> or\n+  <<constant-keyword,`constant_keyword`>> sub-field\n+\n+Fields containing <<array,array values>> use the last array item only.\n+--\n+\n+`<wildcard_exp>`::\n++\n+--\n+(Required{multi-arg}, string)\n+Wildcard expression used to match the source string. Fields are not supported as\n+arguments. If `null`, the function returns a 500 error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA4Nzc2OnYy", "diffSide": "RIGHT", "path": "docs/reference/eql/functions.asciidoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowNTozN1rOGBn4eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzowMjoyMlrOGDXsMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTE5Mw==", "bodyText": "Fields containing <<array,array values>> use the last array item only.\n\nThis behavior seemed a little odd to me, but it's not consistent across functions. endsWith and startsWith only use the first array item. length doesn't support arrays at all.", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r404355193", "createdAt": "2020-04-06T20:05:37Z", "author": {"login": "jrodewig"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error\n+wildcard(\"\", \"\")                                         // returns true\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+wildcard(<source>, <wildcard_exp>[, ...])\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n++\n+--\n+(Required, string)\n+Source string.\n+\n+If using a field as the argument, this parameter only supports the following\n+field datatypes:\n+\n+* <<keyword,`keyword`>>\n+* <<constant-keyword,`constant_keyword`>>\n+* <<text,`text`>> field with a <<keyword,`keyword`>> or\n+  <<constant-keyword,`constant_keyword`>> sub-field\n+\n+Fields containing <<array,array values>> use the last array item only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5NTk1OA==", "bodyText": "I don't know enough about arrays in ES to speak for this. But under the hood, wildcard gets converted to LIKE. This array behavior will be consistent with SQL LIKE.", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r404495958", "createdAt": "2020-04-07T02:13:42Z", "author": {"login": "rw-access"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error\n+wildcard(\"\", \"\")                                         // returns true\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+wildcard(<source>, <wildcard_exp>[, ...])\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n++\n+--\n+(Required, string)\n+Source string.\n+\n+If using a field as the argument, this parameter only supports the following\n+field datatypes:\n+\n+* <<keyword,`keyword`>>\n+* <<constant-keyword,`constant_keyword`>>\n+* <<text,`text`>> field with a <<keyword,`keyword`>> or\n+  <<constant-keyword,`constant_keyword`>> sub-field\n+\n+Fields containing <<array,array values>> use the last array item only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTE5Mw=="}, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwMDYyMg==", "bodyText": "@astefan @costin Would one of you mind verifying this statement?\n\nFields containing <<array,array values>> use the last array item only.\n\nI want to ensure this lines up with the behavior of SQL LIKE.\nI've tested the wildcard function using arrays of varying length. It seems to reliably use the last array item.", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r404800622", "createdAt": "2020-04-07T13:17:46Z", "author": {"login": "jrodewig"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error\n+wildcard(\"\", \"\")                                         // returns true\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+wildcard(<source>, <wildcard_exp>[, ...])\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n++\n+--\n+(Required, string)\n+Source string.\n+\n+If using a field as the argument, this parameter only supports the following\n+field datatypes:\n+\n+* <<keyword,`keyword`>>\n+* <<constant-keyword,`constant_keyword`>>\n+* <<text,`text`>> field with a <<keyword,`keyword`>> or\n+  <<constant-keyword,`constant_keyword`>> sub-field\n+\n+Fields containing <<array,array values>> use the last array item only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTE5Mw=="}, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4MjkxMA==", "bodyText": "@jrodewig @rw-access  I don't think I understand the array argument... wildcard gets converted to value LIKE array_value1 OR value LIKE array_value2 OR value LIKE array_value3......\nWith array values in ES, SQL is at the mercy of Lucene. Whatever \"first\" value Elasticsearch gives us, that's the one we return.\nIn SQL documentation we say about field_multi_value_leniency parameter: Throw an exception when encountering multiple values for a field (default) or be lenient and return the **first value from the list (without any guarantees of what that will be - typically the first in natural ascending order)**. So \"first\"/\"last\" has loose meanings in this context. And Elasticsearch itself doesn't offer any guarantees of the ordering of values in a potential array of values for a certain field, because ES doesn't care too much about the ordering. It's typically ascending order, but it's not guaranteed to be like this always and for every field/values.", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r406182910", "createdAt": "2020-04-09T12:55:08Z", "author": {"login": "astefan"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error\n+wildcard(\"\", \"\")                                         // returns true\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+wildcard(<source>, <wildcard_exp>[, ...])\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n++\n+--\n+(Required, string)\n+Source string.\n+\n+If using a field as the argument, this parameter only supports the following\n+field datatypes:\n+\n+* <<keyword,`keyword`>>\n+* <<constant-keyword,`constant_keyword`>>\n+* <<text,`text`>> field with a <<keyword,`keyword`>> or\n+  <<constant-keyword,`constant_keyword`>> sub-field\n+\n+Fields containing <<array,array values>> use the last array item only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTE5Mw=="}, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4NzA1OA==", "bodyText": "Thanks for the explanation @astefan.\nIn my opinion, it seems like documenting a limitation similar to the SQL one makes sense. Generally, we should discourage users from using array values with EQL and explain the perils.\nI raised #54970 as a discuss issue to get consensus before moving forward. If we decide to document the limitation, I'll remove the array value references from the wildcard function docs.", "url": "https://github.com/elastic/elasticsearch/pull/54086#discussion_r406187058", "createdAt": "2020-04-09T13:02:22Z", "author": {"login": "jrodewig"}, "path": "docs/reference/eql/functions.asciidoc", "diffHunk": "@@ -276,4 +277,82 @@ function returns the remaining string.\n Positions are zero-indexed. Negative offsets are supported.\n \n *Returns:* string\n+====\n+\n+[discrete]\n+[[eql-fn-wildcard]]\n+=== `wildcard`\n+Returns `true` if a source string matches one or more provided wildcard\n+expressions. Matching is case sensitive.\n+\n+[%collapsible]\n+====\n+*Example*\n+[source,eql]\n+----\n+// The two following expressions are equivalent.\n+process.command_line == \"*start*\" or process.command_line == \"*config*\"\n+wildcard(process.command_line, \"*start*\", \"*config*\")\n+\n+// process.command_line = \"start explorer.exe\"\n+wildcard(process.command_line, \"*start*\")                // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")    // returns true\n+wildcard(process.command_line, \"*config*\")               // returns false\n+wildcard(process.command_line, \"*config*\", \"*create*\")   // returns false\n+\n+// process.command_line = [ \"start explorer.exe\", \"create regsvr32.exe\" ]\n+wildcard(process.command_line, \"*create*\")              // returns true\n+wildcard(process.command_line, \"*create*\", \"*config*\")  // returns true\n+wildcard(process.command_line, \"*start*\")               // returns false\n+wildcard(process.command_line, \"*start*\", \"*create*\")   // returns true\n+wildcard(process.command_line, \"*start*\", \"*config*\")   // returns false\n+\n+// case sensitive matching\n+wildcard(\"start explorer.exe\", \"*start*\")                // returns true\n+wildcard(\"start explorer.exe\", \"*Start*\")                // returns false\n+\n+// null handling\n+wildcard(null, \"*start*\")                                // returns false\n+wildcard(null, null)                                     // returns 500 error\n+wildcard(\"start explorer.exe\", null)                     // returns 500 error\n+wildcard(\"start explorer.exe\", null, \"*start*\")          // returns 500 error\n+wildcard(\"\", null)                                       // returns 500 error\n+wildcard(\"\", \"\")                                         // returns true\n+----\n+\n+*Syntax*\n+\n+[source,txt]\n+----\n+wildcard(<source>, <wildcard_exp>[, ...])\n+----\n+\n+*Parameters*\n+\n+`<source>`::\n++\n+--\n+(Required, string)\n+Source string.\n+\n+If using a field as the argument, this parameter only supports the following\n+field datatypes:\n+\n+* <<keyword,`keyword`>>\n+* <<constant-keyword,`constant_keyword`>>\n+* <<text,`text`>> field with a <<keyword,`keyword`>> or\n+  <<constant-keyword,`constant_keyword`>> sub-field\n+\n+Fields containing <<array,array values>> use the last array item only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTE5Mw=="}, "originalCommit": {"oid": "d9116060341f8c736ca03ce5ed6eee96837e85a1"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4167, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}