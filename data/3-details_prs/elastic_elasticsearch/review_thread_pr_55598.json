{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MzU0NjE5", "number": 55598, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozMDowNlrOD07deg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo1NjozMVrOD08Tzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODI2NzQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozMDowNlrOGKHaig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozMDowNlrOGKHaig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2MDQyNg==", "bodyText": "will expire? Can you add javadocs at the class level too?", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413260426", "createdAt": "2020-04-22T19:30:06Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncResponse.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.async;\n+\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+public interface AsyncResponse extends Writeable {\n+    /**\n+     * When this response will expired as a timestamp in milliseconds since epoch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODI4NzAyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozMzo1MFrOGKHm-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozMzo1MFrOGKHm-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2MzYwOA==", "bodyText": "given that it's not part of the interface, maybe storing results should not be mentioned?", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413263608", "createdAt": "2020-04-22T19:33:50Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTask.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.async;\n+\n+import java.util.Map;\n+\n+/**\n+ * A task that supports asynchronous execution and safe temporary storage of results", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODMxMzkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskMaintenanceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozODoyNFrOGKH3rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDowNjoyNFrOGKp3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2Nzg4NA==", "bodyText": "does this need to be abstract and do we really need two implementers for it? Could we rather make it final and have two different instances of this same class, with a different underlying index service?", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413267884", "createdAt": "2020-04-22T19:38:24Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskMaintenanceService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.async;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.cluster.ClusterChangedEvent;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateListener;\n+import org.elasticsearch.cluster.routing.IndexRoutingTable;\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n+import org.elasticsearch.gateway.GatewayService;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.index.reindex.DeleteByQueryAction;\n+import org.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.elasticsearch.threadpool.Scheduler;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.elasticsearch.xpack.core.async.AsyncTaskIndexService.EXPIRATION_TIME_FIELD;\n+\n+/**\n+ * A service that runs a periodic cleanup over the async execution index.\n+ */\n+public abstract class AsyncTaskMaintenanceService implements Releasable, ClusterStateListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyNDg0NA==", "bodyText": "Good catch. The reason I had to make it abstract is we inject objects of this class into Transports. So, we need to way to distinguish between EQL service and async search service. I could have used @ Named annotation, but we don't support that anymore in createComponents. I will leave a clarifying comment on this class.", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413824844", "createdAt": "2020-04-23T14:06:24Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskMaintenanceService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.async;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.cluster.ClusterChangedEvent;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateListener;\n+import org.elasticsearch.cluster.routing.IndexRoutingTable;\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n+import org.elasticsearch.gateway.GatewayService;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.index.reindex.DeleteByQueryAction;\n+import org.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.elasticsearch.threadpool.Scheduler;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.elasticsearch.xpack.core.async.AsyncTaskIndexService.EXPIRATION_TIME_FIELD;\n+\n+/**\n+ * A service that runs a periodic cleanup over the async execution index.\n+ */\n+public abstract class AsyncTaskMaintenanceService implements Releasable, ClusterStateListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2Nzg4NA=="}, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODM0NTQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NjoxOVrOGKIK1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NjoxOVrOGKIK1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3Mjc4OA==", "bodyText": "shall we make this final?", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413272788", "createdAt": "2020-04-22T19:46:19Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "diffHunk": "@@ -50,16 +51,13 @@\n \n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;\n-import static org.elasticsearch.xpack.core.ClientHelper.ASYNC_SEARCH_ORIGIN;\n import static org.elasticsearch.xpack.core.security.authc.AuthenticationField.AUTHENTICATION_KEY;\n \n /**\n- * A service that exposes the CRUD operations for the async-search index.\n+ * A service that exposes the CRUD operations for the async task-specific index.\n  */\n-class AsyncSearchIndexService {\n-    private static final Logger logger = LogManager.getLogger(AsyncSearchIndexService.class);\n-\n-    public static final String INDEX = \".async-search\";\n+public class AsyncTaskIndexService<R extends AsyncResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODM0NzEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncExecutionId.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NjozNlrOGKILrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NjozNlrOGKILrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3MzAwNw==", "bodyText": "make it final?", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413273007", "createdAt": "2020-04-22T19:46:36Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncExecutionId.java", "diffHunk": "@@ -17,14 +17,14 @@\n import java.util.Objects;\n \n /**\n- * A class that contains all information related to a submitted async search.\n+ * A class that contains all information related to a submitted async execution.\n  */\n-class AsyncSearchId {\n+public class AsyncExecutionId {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODM2OTM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskMaintenanceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo1MDozOVrOGKIaQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo1MDozOVrOGKIaQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3NjczNw==", "bodyText": "should it be the index service that provides that index name rather than having to provide it to both?", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413276737", "createdAt": "2020-04-22T19:50:39Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskMaintenanceService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.async;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.cluster.ClusterChangedEvent;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateListener;\n+import org.elasticsearch.cluster.routing.IndexRoutingTable;\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;\n+import org.elasticsearch.gateway.GatewayService;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.index.reindex.DeleteByQueryAction;\n+import org.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.elasticsearch.threadpool.Scheduler;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.elasticsearch.xpack.core.async.AsyncTaskIndexService.EXPIRATION_TIME_FIELD;\n+\n+/**\n+ * A service that runs a periodic cleanup over the async execution index.\n+ */\n+public abstract class AsyncTaskMaintenanceService implements Releasable, ClusterStateListener {\n+    private static final Logger logger = LogManager.getLogger(AsyncTaskMaintenanceService.class);\n+\n+    private final String index;\n+    private final String localNodeId;\n+    private final ThreadPool threadPool;\n+    private final AsyncTaskIndexService<?> indexService;\n+    private final TimeValue delay;\n+\n+    private boolean isCleanupRunning;\n+    private final AtomicBoolean isClosed = new AtomicBoolean(false);\n+    private volatile Scheduler.Cancellable cancellable;\n+\n+    public AsyncTaskMaintenanceService(String index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODQwNjU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo1NjozMVrOGKIyWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxMzoyOFrOGLL9oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI4MjkwNQ==", "bodyText": "funny that this is what Jim had in his original PR and I made him change the constructor to accept an additional expiration time.", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413282905", "createdAt": "2020-04-22T19:56:31Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "diffHunk": "@@ -273,7 +279,8 @@ void getResponse(AsyncSearchId searchId,\n \n                 long expirationTime = (long) get.getSource().get(EXPIRATION_TIME_FIELD);\n                 String encoded = (String) get.getSource().get(RESULT_FIELD);\n-                AsyncSearchResponse response = decodeResponse(encoded, expirationTime);\n+                R response = decodeResponse(encoded);\n+                response.setExpirationTime(expirationTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyNDk2Mw==", "bodyText": "It makes sense now. I was wondering why expirationTime was made not-final. I think I have a cleaner way of dealing with it. I also fixed a bug here that sneaked in during last update.", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r413824963", "createdAt": "2020-04-23T14:06:33Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "diffHunk": "@@ -273,7 +279,8 @@ void getResponse(AsyncSearchId searchId,\n \n                 long expirationTime = (long) get.getSource().get(EXPIRATION_TIME_FIELD);\n                 String encoded = (String) get.getSource().get(RESULT_FIELD);\n-                AsyncSearchResponse response = decodeResponse(encoded, expirationTime);\n+                R response = decodeResponse(encoded);\n+                response.setExpirationTime(expirationTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI4MjkwNQ=="}, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4MzUyMA==", "bodyText": "For the record, I personally find the argument constructor cleaner, but because we need to provide a Reader when we pass around the response, it does become cleaner to make the field non-final and set it after creation. What bug do you mean, I may have missed it but you mean it sneaked in as part of this PR?", "url": "https://github.com/elastic/elasticsearch/pull/55598#discussion_r414383520", "createdAt": "2020-04-24T08:13:28Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "diffHunk": "@@ -273,7 +279,8 @@ void getResponse(AsyncSearchId searchId,\n \n                 long expirationTime = (long) get.getSource().get(EXPIRATION_TIME_FIELD);\n                 String encoded = (String) get.getSource().get(RESULT_FIELD);\n-                AsyncSearchResponse response = decodeResponse(encoded, expirationTime);\n+                R response = decodeResponse(encoded);\n+                response.setExpirationTime(expirationTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI4MjkwNQ=="}, "originalCommit": {"oid": "deaeae1a5a0aef218a019f956ee4682c7de955b9"}, "originalPosition": 247}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2812, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}