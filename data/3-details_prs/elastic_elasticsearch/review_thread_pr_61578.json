{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODY5MDMw", "number": 61578, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODo1NTo0M1rOEf5GXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozODoyMFrOEf6NjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODc2ODI5OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/preprocessing/NGram.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODo1NTo0M1rOHMc3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1ODoyOFrOHMjP7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxNzkxMQ==", "bodyText": "I can't see this field being used in the client.", "url": "https://github.com/elastic/elasticsearch/pull/61578#discussion_r482817911", "createdAt": "2020-09-03T08:55:43Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/preprocessing/NGram.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.inference.preprocessing;\n+\n+import org.apache.lucene.util.RamUsageEstimator;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+/**\n+ * PreProcessor for n-gram encoding a string\n+ */\n+public class NGram implements PreProcessor {\n+\n+    public static final long SHALLOW_SIZE = RamUsageEstimator.shallowSizeOfInstance(NGram.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0618709d9bc8bffabc68f8a46ce332ea10a06678"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMjQ3Ng==", "bodyText": "Yep, should be deleted.", "url": "https://github.com/elastic/elasticsearch/pull/61578#discussion_r482922476", "createdAt": "2020-09-03T11:58:28Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/inference/preprocessing/NGram.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.inference.preprocessing;\n+\n+import org.apache.lucene.util.RamUsageEstimator;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+/**\n+ * PreProcessor for n-gram encoding a string\n+ */\n+public class NGram implements PreProcessor {\n+\n+    public static final long SHALLOW_SIZE = RamUsageEstimator.shallowSizeOfInstance(NGram.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxNzkxMQ=="}, "originalCommit": {"oid": "0618709d9bc8bffabc68f8a46ce332ea10a06678"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODc4OTk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/preprocessing/NGram.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowMTowM1rOHMdFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowMTowM1rOHMdFCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyMTM4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Arrays.stream(this.nGrams).anyMatch(i -> i < 1)) {\n          \n          \n            \n                    if (Arrays.stream(this.nGrams).anyMatch(i -> (i < MIN_GRAM) || (i > MAX_GRAM))) {", "url": "https://github.com/elastic/elasticsearch/pull/61578#discussion_r482821386", "createdAt": "2020-09-03T09:01:03Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/preprocessing/NGram.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.preprocessing;\n+\n+import org.apache.lucene.util.RamUsageEstimator;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.mapper.TextFieldMapper;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.lucene.util.RamUsageEstimator.sizeOf;\n+\n+/**\n+ * PreProcessor for n-gram encoding a string\n+ */\n+public class NGram implements LenientlyParsedPreProcessor, StrictlyParsedPreProcessor {\n+\n+    private static final int DEFAULT_START = 0;\n+    private static final int DEFAULT_LENGTH = 50;\n+    private static final int MAX_LENGTH = 100;\n+    private static final int MIN_GRAM = 1;\n+    private static final int MAX_GRAM = 5;\n+\n+    private static String defaultPrefix(Integer start, Integer length) {\n+        return \"ngram_\"\n+            + (start == null ? DEFAULT_START : start)\n+            + \"_\"\n+            + (length == null ? DEFAULT_LENGTH : length);\n+    }\n+\n+    public static final long SHALLOW_SIZE = RamUsageEstimator.shallowSizeOfInstance(NGram.class);\n+    public static final ParseField NAME = new ParseField(\"n_gram_encoding\");\n+    public static final ParseField FIELD = new ParseField(\"field\");\n+    public static final ParseField FEATURE_PREFIX = new ParseField(\"feature_prefix\");\n+    public static final ParseField NGRAMS = new ParseField(\"n_grams\");\n+    public static final ParseField START = new ParseField(\"start\");\n+    public static final ParseField LENGTH = new ParseField(\"length\");\n+    public static final ParseField CUSTOM = new ParseField(\"custom\");\n+\n+    private static final ConstructingObjectParser<NGram, PreProcessorParseContext> STRICT_PARSER = createParser(false);\n+    private static final ConstructingObjectParser<NGram, PreProcessorParseContext> LENIENT_PARSER = createParser(true);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<NGram, PreProcessorParseContext> createParser(boolean lenient) {\n+        ConstructingObjectParser<NGram, PreProcessorParseContext> parser = new ConstructingObjectParser<>(\n+            NAME.getPreferredName(),\n+            lenient,\n+            (a, c) -> new NGram((String)a[0],\n+                (List<Integer>)a[1],\n+                (Integer)a[2],\n+                (Integer)a[3],\n+                a[4] == null ? c.isCustomByDefault() : (Boolean)a[4],\n+                (String)a[5]));\n+        parser.declareString(ConstructingObjectParser.constructorArg(), FIELD);\n+        parser.declareIntArray(ConstructingObjectParser.constructorArg(), NGRAMS);\n+        parser.declareInt(ConstructingObjectParser.optionalConstructorArg(), START);\n+        parser.declareInt(ConstructingObjectParser.optionalConstructorArg(), LENGTH);\n+        parser.declareBoolean(ConstructingObjectParser.optionalConstructorArg(), CUSTOM);\n+        parser.declareString(ConstructingObjectParser.optionalConstructorArg(), FEATURE_PREFIX);\n+        return parser;\n+    }\n+\n+    public static NGram fromXContentStrict(XContentParser parser, PreProcessorParseContext context) {\n+        return STRICT_PARSER.apply(parser, context == null ?  PreProcessorParseContext.DEFAULT : context);\n+    }\n+\n+    public static NGram fromXContentLenient(XContentParser parser, PreProcessorParseContext context) {\n+        return LENIENT_PARSER.apply(parser, context == null ?  PreProcessorParseContext.DEFAULT : context);\n+    }\n+\n+    private final String field;\n+    private final String featurePrefix;\n+    private final int[] nGrams;\n+    private final int start;\n+    private final int length;\n+    private final boolean custom;\n+\n+    NGram(String field,\n+          List<Integer> nGrams,\n+          Integer start,\n+          Integer length,\n+          Boolean custom,\n+          String featurePrefix) {\n+        this(field,\n+            featurePrefix == null ? defaultPrefix(start, length) : featurePrefix,\n+            Sets.newHashSet(nGrams).stream().mapToInt(Integer::intValue).toArray(),\n+            start == null ? DEFAULT_START : start,\n+            length == null ? DEFAULT_LENGTH : length,\n+            custom != null && custom);\n+    }\n+\n+    public NGram(String field, String featurePrefix, int[] nGrams, int start, int length, boolean custom) {\n+        this.field = ExceptionsHelper.requireNonNull(field, FIELD);\n+        this.featurePrefix = ExceptionsHelper.requireNonNull(featurePrefix, FEATURE_PREFIX);\n+        this.nGrams = ExceptionsHelper.requireNonNull(nGrams, NGRAMS);\n+        if (Arrays.stream(this.nGrams).anyMatch(i -> i < 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0618709d9bc8bffabc68f8a46ce332ea10a06678"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODgyMjUxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/preprocessing/NGram.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowOToyOFrOHMdZpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowOToyOFrOHMdZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNjY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (startPos + i + nGram - 1 >= len) {\n          \n          \n            \n                            if (startPos + i + nGram > len) {", "url": "https://github.com/elastic/elasticsearch/pull/61578#discussion_r482826662", "createdAt": "2020-09-03T09:09:28Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/preprocessing/NGram.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.preprocessing;\n+\n+import org.apache.lucene.util.RamUsageEstimator;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.util.set.Sets;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.mapper.TextFieldMapper;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.lucene.util.RamUsageEstimator.sizeOf;\n+\n+/**\n+ * PreProcessor for n-gram encoding a string\n+ */\n+public class NGram implements LenientlyParsedPreProcessor, StrictlyParsedPreProcessor {\n+\n+    private static final int DEFAULT_START = 0;\n+    private static final int DEFAULT_LENGTH = 50;\n+    private static final int MAX_LENGTH = 100;\n+    private static final int MIN_GRAM = 1;\n+    private static final int MAX_GRAM = 5;\n+\n+    private static String defaultPrefix(Integer start, Integer length) {\n+        return \"ngram_\"\n+            + (start == null ? DEFAULT_START : start)\n+            + \"_\"\n+            + (length == null ? DEFAULT_LENGTH : length);\n+    }\n+\n+    public static final long SHALLOW_SIZE = RamUsageEstimator.shallowSizeOfInstance(NGram.class);\n+    public static final ParseField NAME = new ParseField(\"n_gram_encoding\");\n+    public static final ParseField FIELD = new ParseField(\"field\");\n+    public static final ParseField FEATURE_PREFIX = new ParseField(\"feature_prefix\");\n+    public static final ParseField NGRAMS = new ParseField(\"n_grams\");\n+    public static final ParseField START = new ParseField(\"start\");\n+    public static final ParseField LENGTH = new ParseField(\"length\");\n+    public static final ParseField CUSTOM = new ParseField(\"custom\");\n+\n+    private static final ConstructingObjectParser<NGram, PreProcessorParseContext> STRICT_PARSER = createParser(false);\n+    private static final ConstructingObjectParser<NGram, PreProcessorParseContext> LENIENT_PARSER = createParser(true);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<NGram, PreProcessorParseContext> createParser(boolean lenient) {\n+        ConstructingObjectParser<NGram, PreProcessorParseContext> parser = new ConstructingObjectParser<>(\n+            NAME.getPreferredName(),\n+            lenient,\n+            (a, c) -> new NGram((String)a[0],\n+                (List<Integer>)a[1],\n+                (Integer)a[2],\n+                (Integer)a[3],\n+                a[4] == null ? c.isCustomByDefault() : (Boolean)a[4],\n+                (String)a[5]));\n+        parser.declareString(ConstructingObjectParser.constructorArg(), FIELD);\n+        parser.declareIntArray(ConstructingObjectParser.constructorArg(), NGRAMS);\n+        parser.declareInt(ConstructingObjectParser.optionalConstructorArg(), START);\n+        parser.declareInt(ConstructingObjectParser.optionalConstructorArg(), LENGTH);\n+        parser.declareBoolean(ConstructingObjectParser.optionalConstructorArg(), CUSTOM);\n+        parser.declareString(ConstructingObjectParser.optionalConstructorArg(), FEATURE_PREFIX);\n+        return parser;\n+    }\n+\n+    public static NGram fromXContentStrict(XContentParser parser, PreProcessorParseContext context) {\n+        return STRICT_PARSER.apply(parser, context == null ?  PreProcessorParseContext.DEFAULT : context);\n+    }\n+\n+    public static NGram fromXContentLenient(XContentParser parser, PreProcessorParseContext context) {\n+        return LENIENT_PARSER.apply(parser, context == null ?  PreProcessorParseContext.DEFAULT : context);\n+    }\n+\n+    private final String field;\n+    private final String featurePrefix;\n+    private final int[] nGrams;\n+    private final int start;\n+    private final int length;\n+    private final boolean custom;\n+\n+    NGram(String field,\n+          List<Integer> nGrams,\n+          Integer start,\n+          Integer length,\n+          Boolean custom,\n+          String featurePrefix) {\n+        this(field,\n+            featurePrefix == null ? defaultPrefix(start, length) : featurePrefix,\n+            Sets.newHashSet(nGrams).stream().mapToInt(Integer::intValue).toArray(),\n+            start == null ? DEFAULT_START : start,\n+            length == null ? DEFAULT_LENGTH : length,\n+            custom != null && custom);\n+    }\n+\n+    public NGram(String field, String featurePrefix, int[] nGrams, int start, int length, boolean custom) {\n+        this.field = ExceptionsHelper.requireNonNull(field, FIELD);\n+        this.featurePrefix = ExceptionsHelper.requireNonNull(featurePrefix, FEATURE_PREFIX);\n+        this.nGrams = ExceptionsHelper.requireNonNull(nGrams, NGRAMS);\n+        if (Arrays.stream(this.nGrams).anyMatch(i -> i < 1)) {\n+            throw ExceptionsHelper.badRequestException(\n+                \"[{}] is invalid [{}]; minimum supported value is [{}]; maximum supported value is [{}]\",\n+                NGRAMS.getPreferredName(),\n+                Arrays.stream(nGrams).mapToObj(String::valueOf).collect(Collectors.joining(\", \")),\n+                MIN_GRAM,\n+                MAX_GRAM);\n+        }\n+        this.start = start;\n+        if (start < 0 && length + start > 0) {\n+            throw ExceptionsHelper.badRequestException(\n+                \"if [start] is negative, [length] + [start] must be less than 0\");\n+        }\n+        this.length = length;\n+        if (length <= 0) {\n+            throw ExceptionsHelper.badRequestException(\"[{}] must be a positive integer\", LENGTH.getPreferredName());\n+        }\n+        if (length > MAX_LENGTH) {\n+            throw ExceptionsHelper.badRequestException(\"[{}] must be not be greater than [{}]\", LENGTH.getPreferredName(), MAX_LENGTH);\n+        }\n+        this.custom = custom;\n+    }\n+\n+    public NGram(StreamInput in) throws IOException {\n+        this.field = in.readString();\n+        this.featurePrefix = in.readString();\n+        this.nGrams = in.readIntArray();\n+        this.start = in.readInt();\n+        this.length = in.readVInt();\n+        this.custom = in.readBoolean();\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(field);\n+        out.writeString(featurePrefix);\n+        out.writeIntArray(nGrams);\n+        out.writeInt(start);\n+        out.writeVInt(length);\n+        out.writeBoolean(custom);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Strings.toString(this);\n+    }\n+\n+    @Override\n+    public List<String> inputFields() {\n+        return Collections.singletonList(field);\n+    }\n+\n+    @Override\n+    public List<String> outputFields() {\n+        return allPossibleNGramOutputFeatureNames();\n+    }\n+\n+    @Override\n+    public void process(Map<String, Object> fields) {\n+        Object value = fields.get(field);\n+        if (value == null) {\n+            return;\n+        }\n+        final String stringValue = value.toString();\n+        // String is too small for the starting point\n+        if (start > stringValue.length() || stringValue.length() + start < 0) {\n+            return;\n+        }\n+        final int startPos = start < 0 ? (stringValue.length() + start) : start;\n+        final int len = Math.min(startPos + length, stringValue.length());\n+        for (int i = 0; i < len; i++) {\n+            for (int nGram : nGrams) {\n+                if (startPos + i + nGram - 1 >= len) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0618709d9bc8bffabc68f8a46ce332ea10a06678"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODk1MDUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DataFrameAnalysisCustomFeatureIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTozODoyMFrOHMelsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjowMToyOVrOHMjWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0NjEzMQ==", "bodyText": "I found this confusing at first because I thought the analyzed fields should include the ngram f.x fields and exclude the TEXT_FIELD. setAnalyzedFields is now poorly named it is more like setFetchedFields.\nIs there a way of specifying which ngrams fields should be modelled or indeed for the output of any pre-processor which fields are used?", "url": "https://github.com/elastic/elasticsearch/pull/61578#discussion_r482846131", "createdAt": "2020-09-03T09:38:20Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DataFrameAnalysisCustomFeatureIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchModule;\n+import org.elasticsearch.search.fetch.subphase.FetchSourceContext;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsDest;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsSource;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.BoostedTreeParams;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.MlDataFrameAnalysisNamedXContentProvider;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.Regression;\n+import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n+import org.elasticsearch.xpack.core.ml.inference.preprocessing.NGram;\n+import org.elasticsearch.xpack.core.ml.utils.QueryProvider;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class DataFrameAnalysisCustomFeatureIT extends MlNativeDataFrameAnalyticsIntegTestCase {\n+\n+    private static final String BOOLEAN_FIELD = \"boolean-field\";\n+    private static final String NUMERICAL_FIELD = \"numerical-field\";\n+    private static final String DISCRETE_NUMERICAL_FIELD = \"discrete-numerical-field\";\n+    private static final String TEXT_FIELD = \"text-field\";\n+    private static final String KEYWORD_FIELD = \"keyword-field\";\n+    private static final String NESTED_FIELD = \"outer-field.inner-field\";\n+    private static final String ALIAS_TO_KEYWORD_FIELD = \"alias-to-keyword-field\";\n+    private static final String ALIAS_TO_NESTED_FIELD = \"alias-to-nested-field\";\n+    private static final List<Boolean> BOOLEAN_FIELD_VALUES = List.of(false, true);\n+    private static final List<Double> NUMERICAL_FIELD_VALUES = List.of(1.0, 2.0);\n+    private static final List<Integer> DISCRETE_NUMERICAL_FIELD_VALUES = List.of(10, 20);\n+    private static final List<String> KEYWORD_FIELD_VALUES = List.of(\"cat\", \"dog\");\n+\n+    private String jobId;\n+    private String sourceIndex;\n+    private String destIndex;\n+\n+    @Before\n+    public void setupLogging() {\n+        client().admin().cluster()\n+            .prepareUpdateSettings()\n+            .setTransientSettings(Settings.builder()\n+                .put(\"logger.org.elasticsearch.xpack.ml.dataframe\", \"DEBUG\")\n+                .put(\"logger.org.elasticsearch.xpack.core.ml.inference\", \"DEBUG\"))\n+            .get();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanUp();\n+        client().admin().cluster()\n+            .prepareUpdateSettings()\n+            .setTransientSettings(Settings.builder()\n+                .putNull(\"logger.org.elasticsearch.xpack.ml.dataframe\")\n+                .putNull(\"logger.org.elasticsearch.xpack.core.ml.inference\"))\n+            .get();\n+    }\n+\n+    @Override\n+    protected NamedXContentRegistry xContentRegistry() {\n+        SearchModule searchModule = new SearchModule(Settings.EMPTY, Collections.emptyList());\n+        List<NamedXContentRegistry.Entry> entries = new ArrayList<>(searchModule.getNamedXContents());\n+        entries.addAll(new MlInferenceNamedXContentProvider().getNamedXContentParsers());\n+        entries.addAll(new MlDataFrameAnalysisNamedXContentProvider().getNamedXContentParsers());\n+        return new NamedXContentRegistry(entries);\n+    }\n+\n+    public void testNGramCustomFeature() throws Exception {\n+        initialize(\"test_ngram_feature_processor\");\n+        String predictedClassField = NUMERICAL_FIELD + \"_prediction\";\n+        indexData(sourceIndex, 300, 50, NUMERICAL_FIELD);\n+\n+        DataFrameAnalyticsConfig config = new DataFrameAnalyticsConfig.Builder()\n+            .setId(jobId)\n+            .setSource(new DataFrameAnalyticsSource(new String[] { sourceIndex },\n+                QueryProvider.fromParsedQuery(QueryBuilders.matchAllQuery()), null))\n+            .setDest(new DataFrameAnalyticsDest(destIndex, null))\n+            .setAnalysis(new Regression(NUMERICAL_FIELD,\n+                BoostedTreeParams.builder().setNumTopFeatureImportanceValues(6).build(),\n+                null,\n+                null,\n+                42L,\n+                null,\n+                null,\n+                Collections.singletonList(new NGram(TEXT_FIELD, \"f\", new int[]{1, 2}, 0, 2, true))))\n+            .setAnalyzedFields(new FetchSourceContext(true, new String[]{TEXT_FIELD, NUMERICAL_FIELD}, new String[]{}))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0618709d9bc8bffabc68f8a46ce332ea10a06678"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyNDE0OA==", "bodyText": "analyzed_fields = All fields grabbed from docs. These fields are chosen for FULL analysis (including being processed)\nThere is no way of specifying feature inclusion for processed features. They are always included. This is for API simplicity.\nMaybe renaming analyzed_fields to fetched_fields is proper.\n@dimitris-athanasiou ^ what do you think?", "url": "https://github.com/elastic/elasticsearch/pull/61578#discussion_r482924148", "createdAt": "2020-09-03T12:01:29Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DataFrameAnalysisCustomFeatureIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchModule;\n+import org.elasticsearch.search.fetch.subphase.FetchSourceContext;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsDest;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsSource;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.BoostedTreeParams;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.MlDataFrameAnalysisNamedXContentProvider;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.Regression;\n+import org.elasticsearch.xpack.core.ml.inference.MlInferenceNamedXContentProvider;\n+import org.elasticsearch.xpack.core.ml.inference.preprocessing.NGram;\n+import org.elasticsearch.xpack.core.ml.utils.QueryProvider;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class DataFrameAnalysisCustomFeatureIT extends MlNativeDataFrameAnalyticsIntegTestCase {\n+\n+    private static final String BOOLEAN_FIELD = \"boolean-field\";\n+    private static final String NUMERICAL_FIELD = \"numerical-field\";\n+    private static final String DISCRETE_NUMERICAL_FIELD = \"discrete-numerical-field\";\n+    private static final String TEXT_FIELD = \"text-field\";\n+    private static final String KEYWORD_FIELD = \"keyword-field\";\n+    private static final String NESTED_FIELD = \"outer-field.inner-field\";\n+    private static final String ALIAS_TO_KEYWORD_FIELD = \"alias-to-keyword-field\";\n+    private static final String ALIAS_TO_NESTED_FIELD = \"alias-to-nested-field\";\n+    private static final List<Boolean> BOOLEAN_FIELD_VALUES = List.of(false, true);\n+    private static final List<Double> NUMERICAL_FIELD_VALUES = List.of(1.0, 2.0);\n+    private static final List<Integer> DISCRETE_NUMERICAL_FIELD_VALUES = List.of(10, 20);\n+    private static final List<String> KEYWORD_FIELD_VALUES = List.of(\"cat\", \"dog\");\n+\n+    private String jobId;\n+    private String sourceIndex;\n+    private String destIndex;\n+\n+    @Before\n+    public void setupLogging() {\n+        client().admin().cluster()\n+            .prepareUpdateSettings()\n+            .setTransientSettings(Settings.builder()\n+                .put(\"logger.org.elasticsearch.xpack.ml.dataframe\", \"DEBUG\")\n+                .put(\"logger.org.elasticsearch.xpack.core.ml.inference\", \"DEBUG\"))\n+            .get();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanUp();\n+        client().admin().cluster()\n+            .prepareUpdateSettings()\n+            .setTransientSettings(Settings.builder()\n+                .putNull(\"logger.org.elasticsearch.xpack.ml.dataframe\")\n+                .putNull(\"logger.org.elasticsearch.xpack.core.ml.inference\"))\n+            .get();\n+    }\n+\n+    @Override\n+    protected NamedXContentRegistry xContentRegistry() {\n+        SearchModule searchModule = new SearchModule(Settings.EMPTY, Collections.emptyList());\n+        List<NamedXContentRegistry.Entry> entries = new ArrayList<>(searchModule.getNamedXContents());\n+        entries.addAll(new MlInferenceNamedXContentProvider().getNamedXContentParsers());\n+        entries.addAll(new MlDataFrameAnalysisNamedXContentProvider().getNamedXContentParsers());\n+        return new NamedXContentRegistry(entries);\n+    }\n+\n+    public void testNGramCustomFeature() throws Exception {\n+        initialize(\"test_ngram_feature_processor\");\n+        String predictedClassField = NUMERICAL_FIELD + \"_prediction\";\n+        indexData(sourceIndex, 300, 50, NUMERICAL_FIELD);\n+\n+        DataFrameAnalyticsConfig config = new DataFrameAnalyticsConfig.Builder()\n+            .setId(jobId)\n+            .setSource(new DataFrameAnalyticsSource(new String[] { sourceIndex },\n+                QueryProvider.fromParsedQuery(QueryBuilders.matchAllQuery()), null))\n+            .setDest(new DataFrameAnalyticsDest(destIndex, null))\n+            .setAnalysis(new Regression(NUMERICAL_FIELD,\n+                BoostedTreeParams.builder().setNumTopFeatureImportanceValues(6).build(),\n+                null,\n+                null,\n+                42L,\n+                null,\n+                null,\n+                Collections.singletonList(new NGram(TEXT_FIELD, \"f\", new int[]{1, 2}, 0, 2, true))))\n+            .setAnalyzedFields(new FetchSourceContext(true, new String[]{TEXT_FIELD, NUMERICAL_FIELD}, new String[]{}))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0NjEzMQ=="}, "originalCommit": {"oid": "0618709d9bc8bffabc68f8a46ce332ea10a06678"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 713, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}