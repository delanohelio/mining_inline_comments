{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNTA3MzYx", "number": 59888, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTowMVrOEQOxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NzoyMFrOEQO29Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDU0NzMyOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/snapshots/BlobStoreFormatTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTowMVrOG0RVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTowMVrOG0RVPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MzEwMQ==", "bodyText": "This test and the other removed test were both fairly pointless to begin with. We never did any kind of streaming write in ChecksumBlobStoreFormat, so blocking in toXContent doesn't really test anything about atomic writes and the same tests would pass for non-atomic writes just the same.\nI simplified the code in the write path of ChecksumBlobStoreFormat a bit to make it clearer that we always serialize first, then physically write.", "url": "https://github.com/elastic/elasticsearch/pull/59888#discussion_r457463101", "createdAt": "2020-07-20T14:55:01Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/snapshots/BlobStoreFormatTests.java", "diffHunk": "@@ -163,79 +148,6 @@ public void testBlobCorruption() throws IOException {\n         }\n     }\n \n-    public void testAtomicWrite() throws Exception {\n-        final BlobStore blobStore = createTestBlobStore();\n-        final BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath());\n-        String testString = randomAlphaOfLength(randomInt(10000));\n-        final CountDownLatch block = new CountDownLatch(1);\n-        final CountDownLatch unblock = new CountDownLatch(1);\n-        final BlobObj blobObj = new BlobObj(testString) {\n-            @Override\n-            public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n-                super.toXContent(builder, params);\n-                // Block before finishing writing\n-                try {\n-                    block.countDown();\n-                    unblock.await(5, TimeUnit.SECONDS);\n-                } catch (InterruptedException ex) {\n-                    Thread.currentThread().interrupt();\n-                }\n-                return builder;\n-            }\n-        };\n-        final ChecksumBlobStoreFormat<BlobObj> checksumFormat = new ChecksumBlobStoreFormat<>(BLOB_CODEC, \"%s\", BlobObj::fromXContent,\n-            xContentRegistry(), randomBoolean());\n-        ExecutorService threadPool = Executors.newFixedThreadPool(1);\n-        try {\n-            Future<Void> future = threadPool.submit(new Callable<Void>() {\n-                @Override\n-                public Void call() throws Exception {\n-                    checksumFormat.writeAtomic(blobObj, blobContainer, \"test-blob\");\n-                    return null;\n-                }\n-            });\n-            // signalling\n-            block.await(5, TimeUnit.SECONDS);\n-            assertFalse(blobContainer.blobExists(\"test-blob\"));\n-            unblock.countDown();\n-            future.get();\n-            assertTrue(blobContainer.blobExists(\"test-blob\"));\n-        } finally {\n-            threadPool.shutdown();\n-        }\n-    }\n-\n-    public void testAtomicWriteFailures() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9e6ff16d218514cfbbe22576187cdde096ce7ac"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDU2MTE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/ChecksumBlobStoreFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NzoyMFrOG0RdVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NzoyMFrOG0RdVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NTE3Mw==", "bodyText": "Exposing this here for the mock repo tests for now but this is needed for the repair logic as well.", "url": "https://github.com/elastic/elasticsearch/pull/59888#discussion_r457465173", "createdAt": "2020-07-20T14:57:20Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/ChecksumBlobStoreFormat.java", "diffHunk": "@@ -112,23 +101,16 @@ public ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunct\n      * @param name          name to be translated into\n      * @return parsed blob object\n      */\n-    public T read(BlobContainer blobContainer, String name) throws IOException {\n+    public T read(BlobContainer blobContainer, String name, NamedXContentRegistry namedXContentRegistry) throws IOException {\n         String blobName = blobName(name);\n-        return readBlob(blobContainer, blobName);\n+        return deserialize(blobName, namedXContentRegistry, Streams.readFully(blobContainer.readBlob(blobName)));\n     }\n \n     public String blobName(String name) {\n         return String.format(Locale.ROOT, blobNameFormat, name);\n     }\n \n-    /**\n-     * Reads blob with specified name without resolving the blobName using using {@link #blobName} method.\n-     *\n-     * @param blobContainer blob container\n-     * @param blobName blob name\n-     */\n-    public T readBlob(BlobContainer blobContainer, String blobName) throws IOException {\n-        final BytesReference bytes = Streams.readFully(blobContainer.readBlob(blobName));\n+    public T deserialize(String blobName, NamedXContentRegistry namedXContentRegistry, BytesReference bytes) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9e6ff16d218514cfbbe22576187cdde096ce7ac"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2235, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}