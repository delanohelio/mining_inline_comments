{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzA3NTEw", "number": 57159, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDozNzoxNlrOD_1tRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMjozNFrOD_-AGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjY2ODIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDozNzoxNlrOGavdZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDozNzoxNlrOGavdZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MzczNQ==", "bodyText": "...is guarded by evaluation to...?", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r430693735", "createdAt": "2020-05-26T20:37:16Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "diffHunk": "@@ -161,14 +161,24 @@ public ScriptTemplate asScript() {\n         }\n         templates.add(asScript(elseResult));\n \n-        StringJoiner template = new StringJoiner(\",\", \"{sql}.caseFunction([\", \"])\");\n+        // Use painless if-else expressions to prevent evaluation of return expression\n+        // if the condition is guarded by evaluates to false (e.g. division by 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276d7572aa63bee1c6f74921023abb24a763ce54"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAyNzE1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMjozNFrOGa828Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyNDoyN1rOGbE5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2NQ==", "bodyText": "Why is nullSafeFilter added at this level  - we already add it (or should do so) on the top-level (ScriptQuery), why does this has to happen inside Case?", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r430913265", "createdAt": "2020-05-27T07:32:34Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "diffHunk": "@@ -161,14 +161,24 @@ public ScriptTemplate asScript() {\n         }\n         templates.add(asScript(elseResult));\n \n-        StringJoiner template = new StringJoiner(\",\", \"{sql}.caseFunction([\", \"])\");\n+        // Use painless if-else expressions to prevent evaluation of return expression\n+        // if the condition is guarded by evaluates to false (e.g. division by 0)\n+        StringBuilder sb = new StringBuilder();\n         ParamsBuilder params = paramsBuilder();\n-\n-        for (ScriptTemplate scriptTemplate : templates) {\n-            template.add(scriptTemplate.template());\n+        for (int i = 0; i < templates.size(); i++) {\n+            ScriptTemplate scriptTemplate = templates.get(i);\n+            if (i < templates.size() - 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276d7572aa63bee1c6f74921023abb24a763ce54"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNzY2OQ==", "bodyText": "Because the painless ? : operator complains when receives a Boolean object instead of primitive boolean.", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r430927669", "createdAt": "2020-05-27T07:58:33Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "diffHunk": "@@ -161,14 +161,24 @@ public ScriptTemplate asScript() {\n         }\n         templates.add(asScript(elseResult));\n \n-        StringJoiner template = new StringJoiner(\",\", \"{sql}.caseFunction([\", \"])\");\n+        // Use painless if-else expressions to prevent evaluation of return expression\n+        // if the condition is guarded by evaluates to false (e.g. division by 0)\n+        StringBuilder sb = new StringBuilder();\n         ParamsBuilder params = paramsBuilder();\n-\n-        for (ScriptTemplate scriptTemplate : templates) {\n-            template.add(scriptTemplate.template());\n+        for (int i = 0; i < templates.size(); i++) {\n+            ScriptTemplate scriptTemplate = templates.get(i);\n+            if (i < templates.size() - 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2NQ=="}, "originalCommit": {"oid": "276d7572aa63bee1c6f74921023abb24a763ce54"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDkzMw==", "bodyText": "I see - the nullSafe then is a good wrapper. Please add a comment since this Painless behavior is not obvious looking at the assembly.", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r431044933", "createdAt": "2020-05-27T11:24:27Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "diffHunk": "@@ -161,14 +161,24 @@ public ScriptTemplate asScript() {\n         }\n         templates.add(asScript(elseResult));\n \n-        StringJoiner template = new StringJoiner(\",\", \"{sql}.caseFunction([\", \"])\");\n+        // Use painless if-else expressions to prevent evaluation of return expression\n+        // if the condition is guarded by evaluates to false (e.g. division by 0)\n+        StringBuilder sb = new StringBuilder();\n         ParamsBuilder params = paramsBuilder();\n-\n-        for (ScriptTemplate scriptTemplate : templates) {\n-            template.add(scriptTemplate.template());\n+        for (int i = 0; i < templates.size(); i++) {\n+            ScriptTemplate scriptTemplate = templates.get(i);\n+            if (i < templates.size() - 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2NQ=="}, "originalCommit": {"oid": "276d7572aa63bee1c6f74921023abb24a763ce54"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3904, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}