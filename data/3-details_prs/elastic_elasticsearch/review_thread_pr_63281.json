{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDY5NjUw", "number": 63281, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTo1NDowN1rOEqk0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0ODo0MFrOEqsJ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDc4OTE2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTo1NDowN1rOHc23pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOToxNTozNVrOHc9UJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTE1OQ==", "bodyText": "What does \"always\" mean in this context? We're in the conditional branch, that's why I'm asking.", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500021159", "createdAt": "2020-10-06T05:54:07Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {\n+                // Use secondary auth headers for the request always", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyNjc1OA==", "bodyText": "I think it means in preference to headers that might already be stored on the data frame analytics config, if it came from the config index rather than being supplied in the explain request.  The comment should say something like this.\nSo this means that if Alice tries to explain a pre-existing data frame analytics job created by Bob then that explanation will use Alice's credentials to access the source indices instead of Bob's.  Before this change it would have used Bob's, which is superficially analogous to what what would have happened if Alice had started the job that Bob created.  However, in the case of Alice starting Bob's job the outputs would go to the destination indices, which presumably Bob owns.  If Bob has chosen not to give access to Alice then Alice cannot see the results.  In the case of explain, Alice gets to see the results directly in the JSON response, so it makes more sense to use her credentials to access the source indices.", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500126758", "createdAt": "2020-10-06T09:15:35Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {\n+                // Use secondary auth headers for the request always", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTE1OQ=="}, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDc4OTUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTo1NDoyMFrOHc237A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0Njo0MVrOHdCang==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTIyOA==", "bodyText": "this. is reduntant here AFAICT", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500021228", "createdAt": "2020-10-06T05:54:20Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxMDMzNA==", "bodyText": "I like using this. It prevents the cognitive load of worrying about if the this is a member or a new variable.", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500210334", "createdAt": "2020-10-06T11:46:41Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTIyOA=="}, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDc5NDgzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTo1Njo1MVrOHc27LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTo1Njo1MVrOHc27LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMjA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500022060", "createdAt": "2020-10-06T05:56:51Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+public class ExplainDataFrameAnalyticsRestIT extends ESRestTestCase {\n+\n+    private static String basicAuth(String user) {\n+        return UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n+    }\n+    private static final String SUPER_USER = \"x_pack_rest_user\";\n+    private static final String ML_ADMIN = \"ml_admin\";\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER = basicAuth(SUPER_USER);\n+    private static final String AUTH_KEY = \"Authorization\";\n+    private static final String SECONDARY_AUTH_KEY = \"es-secondary-authorization\";\n+\n+    private static RequestOptions.Builder addAuthHeader(RequestOptions.Builder builder, String user) {\n+        builder.addHeader(AUTH_KEY, basicAuth(user));\n+        return builder;\n+    }\n+\n+    private static RequestOptions.Builder addSecondaryAuthHeader(RequestOptions.Builder builder, String user) {\n+        builder.addHeader(SECONDARY_AUTH_KEY, basicAuth(user));\n+        return builder;\n+    }\n+\n+    @Override\n+    protected Settings restClientSettings() {\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", BASIC_AUTH_VALUE_SUPER_USER).build();\n+    }\n+\n+    private void setupUser(String user, List<String> roles) throws IOException {\n+        String password = new String(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING.getChars());\n+\n+        Request request = new Request(\"PUT\", \"/_security/user/\" + user);\n+        request.setJsonEntity(\"{\"\n+                + \"  \\\"password\\\" : \\\"\" + password + \"\\\",\"\n+                + \"  \\\"roles\\\" : [ \" + roles.stream().map(unquoted -> \"\\\"\" + unquoted + \"\\\"\").collect(Collectors.joining(\", \")) + \" ]\"\n+                + \"}\");\n+        client().performRequest(request);\n+    }\n+\n+    @Before\n+    public void setUpData() throws Exception {\n+        // This user has admin rights on machine learning, but (importantly for the tests) no rights\n+        // on any of the data indexes\n+        setupUser(ML_ADMIN, Collections.singletonList(\"machine_learning_admin\"));\n+        addAirlineData();\n+    }\n+\n+    private void addAirlineData() throws IOException {\n+        StringBuilder bulk = new StringBuilder();\n+\n+        // Create index with source = enabled, doc_values = enabled, stored = false + multi-field\n+        Request createAirlineDataRequest = new Request(\"PUT\", \"/airline-data\");\n+        createAirlineDataRequest.setJsonEntity(\"{\"\n+                + \"  \\\"mappings\\\": {\"\n+                + \"    \\\"properties\\\": {\"\n+                + \"      \\\"time stamp\\\": { \\\"type\\\":\\\"date\\\"},\" // space in 'time stamp' is intentional\n+                + \"      \\\"airline\\\": {\"\n+                + \"        \\\"type\\\":\\\"keyword\\\"\"\n+                + \"       },\"\n+                + \"      \\\"responsetime\\\": { \\\"type\\\":\\\"float\\\"}\"\n+            + \"    }\"\n+                + \"  }\"\n+                + \"}\");\n+        client().performRequest(createAirlineDataRequest);\n+\n+        bulk.append(\"{\\\"index\\\": {\\\"_index\\\": \\\"airline-data\\\", \\\"_id\\\": 1}}\\n\");\n+        bulk.append(\"{\\\"time stamp\\\":\\\"2016-06-01T00:00:00Z\\\",\\\"airline\\\":\\\"AAA\\\",\\\"responsetime\\\":135.22}\\n\");\n+        bulk.append(\"{\\\"index\\\": {\\\"_index\\\": \\\"airline-data\\\", \\\"_id\\\": 2}}\\n\");\n+        bulk.append(\"{\\\"time stamp\\\":\\\"2016-06-01T01:59:00Z\\\",\\\"airline\\\":\\\"AAA\\\",\\\"responsetime\\\":541.76}\\n\");\n+\n+        bulkIndex(bulk.toString());\n+    }\n+\n+    public void testExplain_GivenSecondaryHeadersAndConfig() throws IOException {\n+        String config = \"{\\n\" +\n+            \"  \\\"source\\\": {\\n\" +\n+            \"    \\\"index\\\": \\\"airline-data\\\"\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"analysis\\\": {\\n\" +\n+            \"    \\\"regression\\\": {\\n\" +\n+            \"      \\\"dependent_variable\\\": \\\"responsetime\\\"\\n\" +\n+            \"    }\\n\" +\n+            \"  }\\n\" +\n+            \"}\";\n+\n+\n+        { // Request with secondary headers without perms\n+            Request explain = explainRequestViaConfig(config);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, SUPER_USER);\n+            addSecondaryAuthHeader(options, ML_ADMIN);\n+            explain.setOptions(options);\n+            // Should throw\n+            ResponseException ex = expectThrows(ResponseException.class, () -> client().performRequest(explain));\n+            assertThat(ex.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        }\n+        { // request with secondary headers with perms\n+            Request explain = explainRequestViaConfig(config);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, ML_ADMIN);\n+            addSecondaryAuthHeader(options, SUPER_USER);\n+            explain.setOptions(options);\n+            // Should not throw\n+            client().performRequest(explain);\n+        }\n+    }\n+\n+    public void testExplain_GivenSecondaryHeadersAndPreviouslyStoredConfig() throws IOException {\n+        String config = \"{\\n\" +\n+            \"  \\\"source\\\": {\\n\" +\n+            \"    \\\"index\\\": \\\"airline-data\\\"\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"dest\\\": {\\n\" +\n+            \"    \\\"index\\\": \\\"response_prediction\\\"\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"analysis\\\":\\n\" +\n+            \"    {\\n\" +\n+            \"      \\\"regression\\\": {\\n\" +\n+            \"        \\\"dependent_variable\\\": \\\"responsetime\\\"\\n\" +\n+            \"      }\\n\" +\n+            \"    }\\n\" +\n+            \"}\";\n+\n+        String configId = \"explain_test\";\n+\n+        Request storeConfig = new Request(\"PUT\", \"_ml/data_frame/analytics/\" + configId);\n+        storeConfig.setJsonEntity(config);\n+        client().performRequest(storeConfig);\n+\n+        { // Request with secondary headers without perms\n+            Request explain = explainRequestConfigId(configId);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, SUPER_USER);\n+            addSecondaryAuthHeader(options, ML_ADMIN);\n+            explain.setOptions(options);\n+            // Should throw\n+            ResponseException ex = expectThrows(ResponseException.class, () -> client().performRequest(explain));\n+            assertThat(ex.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        }\n+        { // request with secondary headers with perms\n+            Request explain = explainRequestConfigId(configId);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, ML_ADMIN);\n+            addSecondaryAuthHeader(options, SUPER_USER);\n+            explain.setOptions(options);\n+            // Should not throw\n+            client().performRequest(explain);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk5MDgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxMjoxOFrOHc4x-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxMjoxOFrOHc4x-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MjQ3Mg==", "bodyText": "nit: new line after end of method", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500052472", "createdAt": "2020-10-06T07:12:18Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+public class ExplainDataFrameAnalyticsRestIT extends ESRestTestCase {\n+\n+    private static String basicAuth(String user) {\n+        return UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTk4MDgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0NTozMFrOHdCYUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0NTozMFrOHdCYUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwOTc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500209747", "createdAt": "2020-10-06T11:45:30Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+public class ExplainDataFrameAnalyticsRestIT extends ESRestTestCase {\n+\n+    private static String basicAuth(String user) {\n+        return UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTk5MDkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0ODo0MFrOHdCepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0ODo0MFrOHdCepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxMTM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Use secondary auth headers for the request always\n          \n          \n            \n                            // Set the auth headers (preferring the secondary headers) to the caller's. \n          \n          \n            \n                            // Regardless if the config was previously stored or not.", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500211364", "createdAt": "2020-10-06T11:48:40Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {\n+                // Use secondary auth headers for the request always", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3208, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}