{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjM5ODAz", "number": 54025, "title": "Remove netty BytesReference implementations", "bodyText": "Elasticsearch has a number of different BytesReference implementations.\nThese implementations can all implement the interface in different ways\nwith subtly different behavior and performance characteristics. On the\nother-hand, the JVM only represents bytes as an array or a direct byte\nbuffer. This commit deletes the specialized Netty implementations and\nmoves to using a generic ByteBuffer reference type. This will allow us\nto focus on standardizing performance and behave around a smaller number\nof implementations that can be used by all components in Elasticsearch.", "createdAt": "2020-03-23T21:07:47Z", "url": "https://github.com/elastic/elasticsearch/pull/54025", "merged": true, "mergeCommit": {"oid": "519c8c4a33be99c1ad0181d7f1acfec71137d984"}, "closed": true, "closedAt": "2020-03-25T22:00:42Z", "author": {"login": "tbrooks8"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQk0lEgH2gAyMzkyNjM5ODAzOmRkZDhjZDAzMDY0YWNjMTUyYjgyYjA2NmEyNWNhMzhjNTY5MmFiOWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQxosYAFqTM4MDIzOTc1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddd8cd03064acc152b82b066a25ca38c5692ab9c", "author": {"user": {"login": "tbrooks8", "name": "Tim Brooks"}}, "url": "https://github.com/elastic/elasticsearch/commit/ddd8cd03064acc152b82b066a25ca38c5692ab9c", "committedDate": "2020-03-23T21:02:53Z", "message": "Remove netty BytesReference implementations\n\nElasticsearch has a number of different BytesReference implementations.\nThese implementations can all implement the interface in different ways\nwith subtly different behavior and performance characteristics. On the\nother-hand, the JVM only represents bytes as an array or a direct byte\nbuffer. This commit deletes the specialized Netty implementations and\nmoves to using a generic ByteBuffer reference type. This will allow us\nto focus on standardizing performance and behave around a smaller number\nof implementations that can be used by all components in Elasticsearch."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODMwMzUz", "url": "https://github.com/elastic/elasticsearch/pull/54025#pullrequestreview-379830353", "createdAt": "2020-03-23T21:18:55Z", "commit": {"oid": "ddd8cd03064acc152b82b066a25ca38c5692ab9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxODo1NVrOF6Yfsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxODo1NVrOF6Yfsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzA1OQ==", "bodyText": "I'm not sure removing this optimisation in particular is a good idea. This saved quite a bit of CPU for finding the EOLs in bulk requests. I think the composite byte buffer will behave a lot worse here? (especially now that bulk requests aren't copied to a single byte[] any more and we parse them straight from the ByteBuf we get from the HTTP layer.", "url": "https://github.com/elastic/elasticsearch/pull/54025#discussion_r396763059", "createdAt": "2020-03-23T21:18:55Z", "author": {"login": "original-brownbear"}, "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java", "diffHunk": "@@ -1,104 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.elasticsearch.transport.netty4;\n-\n-import io.netty.buffer.ByteBuf;\n-import org.apache.lucene.util.BytesRef;\n-import org.elasticsearch.common.bytes.AbstractBytesReference;\n-import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.io.stream.StreamInput;\n-\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.charset.StandardCharsets;\n-\n-final class ByteBufBytesReference extends AbstractBytesReference {\n-\n-    private final ByteBuf buffer;\n-    private final int length;\n-    private final int offset;\n-\n-    ByteBufBytesReference(ByteBuf buffer, int length) {\n-        this.buffer = buffer;\n-        this.length = length;\n-        this.offset = buffer.readerIndex();\n-        assert length <= buffer.readableBytes() : \"length[\" + length +\"] > \" + buffer.readableBytes();\n-    }\n-\n-    @Override\n-    public byte get(int index) {\n-        return buffer.getByte(offset + index);\n-    }\n-\n-    @Override\n-    public int getInt(int index) {\n-        return buffer.getInt(offset + index);\n-    }\n-\n-    @Override\n-    public int indexOf(byte marker, int from) {\n-        final int start = offset + from;\n-        return buffer.forEachByte(start, length - start, value -> value != marker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd8cd03064acc152b82b066a25ca38c5692ab9c"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9231c3686522862c764da25e77ba14ebd62f976", "author": {"user": {"login": "tbrooks8", "name": "Tim Brooks"}}, "url": "https://github.com/elastic/elasticsearch/commit/e9231c3686522862c764da25e77ba14ebd62f976", "committedDate": "2020-03-23T21:56:06Z", "message": "Change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjM5NzUw", "url": "https://github.com/elastic/elasticsearch/pull/54025#pullrequestreview-380239750", "createdAt": "2020-03-24T11:58:41Z", "commit": {"oid": "e9231c3686522862c764da25e77ba14ebd62f976"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}