{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzI5MTMw", "number": 50885, "title": "Add Get Source API to the HLRC", "bodyText": "Add Get Source API to the HLRC\nrelates: #47678", "createdAt": "2020-01-11T13:17:06Z", "url": "https://github.com/elastic/elasticsearch/pull/50885", "merged": true, "mergeCommit": {"oid": "c01923043de8d29e6b232d90f0f15afb63c0a909"}, "closed": true, "closedAt": "2020-01-23T08:32:30Z", "author": {"login": "timoninmaxim"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5mXvQABqjI5NDExODgyOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8dX5YABqjI5NjUzNjA2MTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a6fe9a43c64644792148dac54264deb9fbcd5e5", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/8a6fe9a43c64644792148dac54264deb9fbcd5e5", "committedDate": "2020-01-11T12:44:07Z", "message": "Add Get Source API to the HLRC\n\nrelates: #47678"}, "afterCommit": {"oid": "c79ed70cc3fba4b9502063ea8c9a7b17ee3e0d53", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/c79ed70cc3fba4b9502063ea8c9a7b17ee3e0d53", "committedDate": "2020-01-12T11:49:18Z", "message": "Add Get Source API to the HLRC\n\nrelates: #47678"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxODg5NDc2", "url": "https://github.com/elastic/elasticsearch/pull/50885#pullrequestreview-341889476", "createdAt": "2020-01-13T14:39:26Z", "commit": {"oid": "c79ed70cc3fba4b9502063ea8c9a7b17ee3e0d53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozOToyNlrOFc5A4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozOToyNlrOFc5A4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg==", "bodyText": "I think this api needs to use its own Request and Response class.\nAlthough the get source api support almost all request parameters that the get api support, the get source api doesn't support stored_fields, version and version_type. The latter two may be supported in the future, but I don't see stored_fields ever be supported (that retrieves something that isn't part of the _source). Also I see that the get api may support doc_value_fields option to and this is unrelated to the _source like stored_fields is. Therefor I think that this api should have its own high level client side request class.\nI also think that this api should have a dedicated response class, that just includes a Map<String, Object> field for the source instead of the generic RestResponse class.", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r365838562", "createdAt": "2020-01-13T14:39:26Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "diffHunk": "@@ -860,6 +863,32 @@ public final Cancellable existsSourceAsync(GetRequest getRequest, RequestOptions\n             RestHighLevelClient::convertExistsResponse, listener, emptySet());\n     }\n \n+    /**\n+     * Retrieves the source field only of a document using GetSource API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#_source\">Get Source API\n+     * on elastic.co</a>\n+     * @param getRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return the response\n+     */\n+    public RestResponse getSource(GetRequest getRequest, RequestOptions options) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c79ed70cc3fba4b9502063ea8c9a7b17ee3e0d53"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNTY1ODE0", "url": "https://github.com/elastic/elasticsearch/pull/50885#pullrequestreview-342565814", "createdAt": "2020-01-14T14:20:54Z", "commit": {"oid": "b795421c243281531e7fc2ec6ca9b3d7d8597013"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDoyMDo1NFrOFdZFig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDoyMjoyMFrOFdZI5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NDA0Mg==", "bodyText": "Maybe add a test for this in RequestConvertersTests?", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366364042", "createdAt": "2020-01-14T14:20:54Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java", "diffHunk": "@@ -275,14 +276,30 @@ private static Request getStyleRequest(String method, GetRequest getRequest) {\n     }\n \n     static Request sourceExists(GetRequest getRequest) {\n-        String endpoint = endpoint(getRequest.index(), \"_source\", getRequest.id());\n-        Request request = new Request(HttpHead.METHOD_NAME, endpoint);\n         Params parameters = new Params();\n         parameters.withPreference(getRequest.preference());\n         parameters.withRouting(getRequest.routing());\n         parameters.withRefresh(getRequest.refresh());\n         parameters.withRealtime(getRequest.realtime());\n-        // Version params are not currently supported by the source exists API so are not passed\n+        parameters.withFetchSourceContext(getRequest.fetchSourceContext());\n+        // Version params are not currently supported by the _source API so are not passed\n+\n+        String endpoint = endpoint(getRequest.index(), \"_source\", getRequest.id());\n+        Request request = new Request(HttpHead.METHOD_NAME, endpoint);\n+        request.addParameters(parameters.asMap());\n+        return request;\n+    }\n+\n+    static Request getSource(GetSourceRequest getSourceRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b795421c243281531e7fc2ec6ca9b3d7d8597013"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NDkwMg==", "bodyText": "There isn't much here, but maybe also add a test for this? You can extend from AbstractResponseTestCase, this should be straight forward.", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366364902", "createdAt": "2020-01-14T14:22:20Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/core/GetSourceResponse.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public final class GetSourceResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b795421c243281531e7fc2ec6ca9b3d7d8597013"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1689b36d0005a29d865780290cf3173636755258", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/1689b36d0005a29d865780290cf3173636755258", "committedDate": "2020-01-20T09:39:36Z", "message": "Add Get Source API to the HLRC\n\nrelates: #47678"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3ed1e627433ca45a488d1261aed4c91e5b64a1", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/3c3ed1e627433ca45a488d1261aed4c91e5b64a1", "committedDate": "2020-01-20T09:39:36Z", "message": "Use GetSourceRequest, GetSourceResponse for GetSource API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b795421c243281531e7fc2ec6ca9b3d7d8597013", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/b795421c243281531e7fc2ec6ca9b3d7d8597013", "committedDate": "2020-01-14T13:29:00Z", "message": "Use GetSourceRequest, GetSourceResponse for GetSource API"}, "afterCommit": {"oid": "eb81a82dd1f1aa5a3136be211606afe15b890385", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/eb81a82dd1f1aa5a3136be211606afe15b890385", "committedDate": "2020-01-20T09:39:36Z", "message": "Add tests for GetSourceRequest, GetSourceResponse"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MjExNDE1", "url": "https://github.com/elastic/elasticsearch/pull/50885#pullrequestreview-345211415", "createdAt": "2020-01-20T10:28:27Z", "commit": {"oid": "eb81a82dd1f1aa5a3136be211606afe15b890385"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/7e7341ce5bd9cb5143e28570b027d457f79e8c62", "committedDate": "2020-01-20T13:32:44Z", "message": "Add tests for GetSourceRequest, GetSourceResponse"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb81a82dd1f1aa5a3136be211606afe15b890385", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/eb81a82dd1f1aa5a3136be211606afe15b890385", "committedDate": "2020-01-20T09:39:36Z", "message": "Add tests for GetSourceRequest, GetSourceResponse"}, "afterCommit": {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/7e7341ce5bd9cb5143e28570b027d457f79e8c62", "committedDate": "2020-01-20T13:32:44Z", "message": "Add tests for GetSourceRequest, GetSourceResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ccf870164ffaab733be5b540b67095274f86f8d", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/4ccf870164ffaab733be5b540b67095274f86f8d", "committedDate": "2020-01-20T16:35:00Z", "message": "Explicit list of imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzEzMDU3", "url": "https://github.com/elastic/elasticsearch/pull/50885#pullrequestreview-345713057", "createdAt": "2020-01-21T08:53:42Z", "commit": {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODo1Mzo0MlrOFfySNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODo1Nzo0NFrOFfyZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NDAzOA==", "bodyText": "This should be replaced by:\ntry (XContentBuilder sourceBuilder = XContentBuilder.builder(xContentType.xContent())) {\n            sourceBuilder.startObject();\n            sourceBuilder.field(\"field\", \"value\");\n            sourceBuilder.endObject();\n            return new SourceOnlyResponse(BytesReference.bytes(sourceBuilder));\n        } catch (IOException ioe) {\n            throw new UncheckedIOException(ioe);\n        }\n\nSometimes the test framework uses a different xcontent type, for example yaml or cbor and this is now hardcoded to json.", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368874038", "createdAt": "2020-01-21T08:53:42Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.client.AbstractResponseTestCase;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public final class GetSourceResponseTests extends\n+    AbstractResponseTestCase<GetSourceResponseTests.SourceOnlyResponse, GetSourceResponse> {\n+\n+    static class SourceOnlyResponse implements ToXContent {\n+\n+        private final BytesReference source;\n+\n+        SourceOnlyResponse(BytesReference source) {\n+            this.source = source;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            // this implementation copied from RestGetSourceAction.RestGetSourceResponseListener::buildResponse\n+            try (InputStream stream = source.streamInput()) {\n+                builder.rawValue(stream, XContentHelper.xContentType(source));\n+            }\n+            return builder;\n+        }\n+    }\n+\n+    @Override\n+    protected SourceOnlyResponse createServerTestInstance(XContentType xContentType) {\n+        BytesReference source = new BytesArray(\"{\\\"field\\\":\\\"value\\\"}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NTQ2NQ==", "bodyText": "You need to overwrite isFragment() method here and let it return false or implement ToXContentObject instead.\nOtherwise the test base class tries to always add a json object, which is already added in this test.", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368875465", "createdAt": "2020-01-21T08:56:45Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.client.AbstractResponseTestCase;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public final class GetSourceResponseTests extends\n+    AbstractResponseTestCase<GetSourceResponseTests.SourceOnlyResponse, GetSourceResponse> {\n+\n+    static class SourceOnlyResponse implements ToXContent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NTkxNA==", "bodyText": "The body of this method can be replaced with: assertThat(clientInstance.getSource(), equalTo(Map.of(\"field\", \"value\")));. Just checking for the expected map is sufficient here.", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368875914", "createdAt": "2020-01-21T08:57:44Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.client.AbstractResponseTestCase;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public final class GetSourceResponseTests extends\n+    AbstractResponseTestCase<GetSourceResponseTests.SourceOnlyResponse, GetSourceResponse> {\n+\n+    static class SourceOnlyResponse implements ToXContent {\n+\n+        private final BytesReference source;\n+\n+        SourceOnlyResponse(BytesReference source) {\n+            this.source = source;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            // this implementation copied from RestGetSourceAction.RestGetSourceResponseListener::buildResponse\n+            try (InputStream stream = source.streamInput()) {\n+                builder.rawValue(stream, XContentHelper.xContentType(source));\n+            }\n+            return builder;\n+        }\n+    }\n+\n+    @Override\n+    protected SourceOnlyResponse createServerTestInstance(XContentType xContentType) {\n+        BytesReference source = new BytesArray(\"{\\\"field\\\":\\\"value\\\"}\");\n+        return new SourceOnlyResponse(source);\n+    }\n+\n+    @Override\n+    protected GetSourceResponse doParseToClientInstance(XContentParser parser) throws IOException {\n+        return GetSourceResponse.fromXContent(parser);\n+    }\n+\n+    @Override\n+    protected void assertInstances(SourceOnlyResponse serverTestInstance, GetSourceResponse clientInstance) {\n+        Map<String, Object> expected = new HashMap<>();\n+        expected.put(\"field\", \"value\");\n+\n+        assertThat(clientInstance.getSource(), equalTo(serverTestInstance.source));\n+        assertThat(clientInstance.getSource(), equalTo(expected));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "committedDate": "2020-01-21T09:03:26Z", "message": "fix tests: Use ToXContentObject for mock server response"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a578ac55668261fdae20f01db06bed7f0e34f75", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/1a578ac55668261fdae20f01db06bed7f0e34f75", "committedDate": "2020-01-21T09:00:09Z", "message": "fix tests: Use ToXContentObject for mock server response"}, "afterCommit": {"oid": "bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/elastic/elasticsearch/commit/bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "committedDate": "2020-01-21T09:03:26Z", "message": "fix tests: Use ToXContentObject for mock server response"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3149, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}