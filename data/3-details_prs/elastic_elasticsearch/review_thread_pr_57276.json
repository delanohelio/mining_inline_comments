{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDM5MjQ2", "number": 57276, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoxNjoxOFrOEAyAEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxMTo1OVrOEBitgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjU0Njc1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoxNjoxOFrOGcRYwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoxNjoxOFrOGcRYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5ODE3Ng==", "bodyText": "PUT? shouldn't it be a POST?", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432298176", "createdAt": "2020-05-29T07:16:18Z", "author": {"login": "jpountz"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java", "diffHunk": "@@ -521,13 +521,17 @@ static Request explain(ExplainRequest explainRequest) throws IOException {\n         return request;\n     }\n \n-    static Request fieldCaps(FieldCapabilitiesRequest fieldCapabilitiesRequest) {\n-        Request request = new Request(HttpGet.METHOD_NAME, endpoint(fieldCapabilitiesRequest.indices(), \"_field_caps\"));\n+    static Request fieldCaps(FieldCapabilitiesRequest fieldCapabilitiesRequest) throws IOException {\n+        String methodName = fieldCapabilitiesRequest.indexFilter() != null ? HttpPut.METHOD_NAME  : HttpGet.METHOD_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjYyMTc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/FieldCapabilitiesIndexRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzo0MjoxMVrOGcSHpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1Mjo1NVrOGcWVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxMDE4MQ==", "bodyText": "It's a pre-existing issue but I'd rather like that we use readOptionalWriteable for symmetry with writeTo, which uses writeOptionalWriteable. Or change the write logic to write booleans.", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432310181", "createdAt": "2020-05-29T07:42:11Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/FieldCapabilitiesIndexRequest.java", "diffHunk": "@@ -19,36 +19,58 @@\n \n package org.elasticsearch.action.fieldcaps;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionRequest;\n import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n import org.elasticsearch.action.OriginalIndices;\n import org.elasticsearch.action.support.IndicesOptions;\n-import org.elasticsearch.action.support.single.shard.SingleShardRequest;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.shard.ShardId;\n \n import java.io.IOException;\n+import java.util.Objects;\n \n-public class FieldCapabilitiesIndexRequest extends SingleShardRequest<FieldCapabilitiesIndexRequest> {\n+public class FieldCapabilitiesIndexRequest extends ActionRequest implements IndicesRequest {\n \n+    public static final IndicesOptions INDICES_OPTIONS = IndicesOptions.strictSingleIndexNoExpandForbidClosed();\n+\n+    private final String index;\n     private final String[] fields;\n     private final OriginalIndices originalIndices;\n+    private final QueryBuilder indexFilter;\n+    private final long nowInMillis;\n+\n+    private ShardId shardId;\n \n     // For serialization\n     FieldCapabilitiesIndexRequest(StreamInput in) throws IOException {\n         super(in);\n+        if (in.readBoolean()) {\n+            shardId = new ShardId(in);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3OTE5MA==", "bodyText": "++, I pushed fb3007c", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432379190", "createdAt": "2020-05-29T09:52:55Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/FieldCapabilitiesIndexRequest.java", "diffHunk": "@@ -19,36 +19,58 @@\n \n package org.elasticsearch.action.fieldcaps;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionRequest;\n import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n import org.elasticsearch.action.OriginalIndices;\n import org.elasticsearch.action.support.IndicesOptions;\n-import org.elasticsearch.action.support.single.shard.SingleShardRequest;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.shard.ShardId;\n \n import java.io.IOException;\n+import java.util.Objects;\n \n-public class FieldCapabilitiesIndexRequest extends SingleShardRequest<FieldCapabilitiesIndexRequest> {\n+public class FieldCapabilitiesIndexRequest extends ActionRequest implements IndicesRequest {\n \n+    public static final IndicesOptions INDICES_OPTIONS = IndicesOptions.strictSingleIndexNoExpandForbidClosed();\n+\n+    private final String index;\n     private final String[] fields;\n     private final OriginalIndices originalIndices;\n+    private final QueryBuilder indexFilter;\n+    private final long nowInMillis;\n+\n+    private ShardId shardId;\n \n     // For serialization\n     FieldCapabilitiesIndexRequest(StreamInput in) throws IOException {\n         super(in);\n+        if (in.readBoolean()) {\n+            shardId = new ShardId(in);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxMDE4MQ=="}, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjY1MjY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzo1MTo0NFrOGcSafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MjoyNVrOGcWT_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxNTAwNg==", "bodyText": "question: in what cases would the current timestamp already be set?", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432315006", "createdAt": "2020-05-29T07:51:44Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java", "diffHunk": "@@ -67,6 +67,7 @@ public TransportFieldCapabilitiesAction(TransportService transportService, Clust\n \n     @Override\n     protected void doExecute(Task task, FieldCapabilitiesRequest request, final ActionListener<FieldCapabilitiesResponse> listener) {\n+        long nowInMillis = request.nowInMillis() == null ? System.currentTimeMillis() : request.nowInMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3ODg3OA==", "bodyText": "If the action is executed by a cross cluster search. See https://github.com/elastic/elasticsearch/pull/57276/files?file-filters%5B%5D=.java#diff-7bbfa44263f4c8fc5d8620e78cfe088bR130.\nI added a comment in fb3007c", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432378878", "createdAt": "2020-05-29T09:52:25Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java", "diffHunk": "@@ -67,6 +67,7 @@ public TransportFieldCapabilitiesAction(TransportService transportService, Clust\n \n     @Override\n     protected void doExecute(Task task, FieldCapabilitiesRequest request, final ActionListener<FieldCapabilitiesResponse> listener) {\n+        long nowInMillis = request.nowInMillis() == null ? System.currentTimeMillis() : request.nowInMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxNTAwNg=="}, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjg0OTgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesIndexAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo1MjoyOVrOGcUW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MjozNFrOGcWUVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NjgzMg==", "bodyText": "Saying \"replica\" confused me because it made me think that we might check multiple copies of the same shard in some cases, while the below logic suggests that we just check one copy for every shard until we find one that matches. Should this comment say \"shard\" instead of \"replica\" in this comment?", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432346832", "createdAt": "2020-05-29T08:52:29Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesIndexAction.java", "diffHunk": "@@ -117,16 +151,160 @@ protected FieldCapabilitiesIndexResponse shardOperation(final FieldCapabilitiesI\n                 }\n             }\n         }\n-        return new FieldCapabilitiesIndexResponse(shardId.getIndexName(), responseMap);\n+        return new FieldCapabilitiesIndexResponse(request.index(), responseMap, true);\n     }\n \n-    @Override\n-    protected Writeable.Reader<FieldCapabilitiesIndexResponse> getResponseReader() {\n-        return FieldCapabilitiesIndexResponse::new;\n+    private boolean canMatchShard(FieldCapabilitiesIndexRequest req) throws IOException {\n+        if (req.indexFilter() == null || req.indexFilter() instanceof MatchAllQueryBuilder) {\n+            return true;\n+        }\n+        assert req.nowInMillis() != 0L;\n+        ShardSearchRequest searchRequest = new ShardSearchRequest(req.shardId(), req.nowInMillis(), AliasFilter.EMPTY);\n+        searchRequest.source(new SearchSourceBuilder().query(req.indexFilter()));\n+        return searchService.canMatch(searchRequest).canMatch();\n     }\n \n-    @Override\n-    protected ClusterBlockException checkRequestBlock(ClusterState state, InternalRequest request) {\n-        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_READ, request.concreteIndex());\n+    private ClusterBlockException checkGlobalBlock(ClusterState state) {\n+        return state.blocks().globalBlockedException(ClusterBlockLevel.READ);\n+    }\n+\n+    private ClusterBlockException checkRequestBlock(ClusterState state, String concreteIndex) {\n+        return state.blocks().indexBlockedException(ClusterBlockLevel.READ, concreteIndex);\n+    }\n+\n+    /**\n+     * An action that executes on each shard until it finds a replica that can match the provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3ODk2Ng==", "bodyText": "++, I pushed fb3007c", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432378966", "createdAt": "2020-05-29T09:52:34Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesIndexAction.java", "diffHunk": "@@ -117,16 +151,160 @@ protected FieldCapabilitiesIndexResponse shardOperation(final FieldCapabilitiesI\n                 }\n             }\n         }\n-        return new FieldCapabilitiesIndexResponse(shardId.getIndexName(), responseMap);\n+        return new FieldCapabilitiesIndexResponse(request.index(), responseMap, true);\n     }\n \n-    @Override\n-    protected Writeable.Reader<FieldCapabilitiesIndexResponse> getResponseReader() {\n-        return FieldCapabilitiesIndexResponse::new;\n+    private boolean canMatchShard(FieldCapabilitiesIndexRequest req) throws IOException {\n+        if (req.indexFilter() == null || req.indexFilter() instanceof MatchAllQueryBuilder) {\n+            return true;\n+        }\n+        assert req.nowInMillis() != 0L;\n+        ShardSearchRequest searchRequest = new ShardSearchRequest(req.shardId(), req.nowInMillis(), AliasFilter.EMPTY);\n+        searchRequest.source(new SearchSourceBuilder().query(req.indexFilter()));\n+        return searchService.canMatch(searchRequest).canMatch();\n     }\n \n-    @Override\n-    protected ClusterBlockException checkRequestBlock(ClusterState state, InternalRequest request) {\n-        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_READ, request.concreteIndex());\n+    private ClusterBlockException checkGlobalBlock(ClusterState state) {\n+        return state.blocks().globalBlockedException(ClusterBlockLevel.READ);\n+    }\n+\n+    private ClusterBlockException checkRequestBlock(ClusterState state, String concreteIndex) {\n+        return state.blocks().indexBlockedException(ClusterBlockLevel.READ, concreteIndex);\n+    }\n+\n+    /**\n+     * An action that executes on each shard until it finds a replica that can match the provided", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NjgzMg=="}, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjg1NzQ1OnYy", "diffSide": "RIGHT", "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/remote_cluster/10_basic.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo1NDo0NVrOGcUbpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1Mjo0M1rOGcWUyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0ODA3MA==", "bodyText": "maybe we could even set a routing value on one of these two indices to force all documents to be in the same shard, which should exercise more the logic about iterating shards until one can match?", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432348070", "createdAt": "2020-05-29T08:54:45Z", "author": {"login": "jpountz"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/remote_cluster/10_basic.yml", "diffHunk": "@@ -103,6 +105,19 @@\n            - '{\"index\": {\"_index\": \"test_index\"}}'\n            - '{\"f1\": \"remote_cluster\", \"animal\": \"chicken\", \"filter_field\": 0}'\n \n+  - do:\n+      bulk:\n+        refresh: true\n+        body:\n+          - '{\"index\": {\"_index\": \"field_caps_index_1\"}}'\n+          - '{\"created_at\": \"2018-01-05\"}'\n+          - '{\"index\": {\"_index\": \"field_caps_index_1\"}}'\n+          - '{\"created_at\": \"2017-12-01\"}'\n+          - '{\"index\": {\"_index\": \"field_caps_index_3\"}}'\n+          - '{\"created_at\": \"2019-10-01\"}'\n+          - '{\"index\": {\"_index\": \"field_caps_index_3\"}}'\n+          - '{\"created_at\": \"2020-01-01\"}'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3OTA4MQ==", "bodyText": "++, I pushed fb3007c", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r432379081", "createdAt": "2020-05-29T09:52:43Z", "author": {"login": "jimczi"}, "path": "qa/multi-cluster-search/src/test/resources/rest-api-spec/test/remote_cluster/10_basic.yml", "diffHunk": "@@ -103,6 +105,19 @@\n            - '{\"index\": {\"_index\": \"test_index\"}}'\n            - '{\"f1\": \"remote_cluster\", \"animal\": \"chicken\", \"filter_field\": 0}'\n \n+  - do:\n+      bulk:\n+        refresh: true\n+        body:\n+          - '{\"index\": {\"_index\": \"field_caps_index_1\"}}'\n+          - '{\"created_at\": \"2018-01-05\"}'\n+          - '{\"index\": {\"_index\": \"field_caps_index_1\"}}'\n+          - '{\"created_at\": \"2017-12-01\"}'\n+          - '{\"index\": {\"_index\": \"field_caps_index_3\"}}'\n+          - '{\"created_at\": \"2019-10-01\"}'\n+          - '{\"index\": {\"_index\": \"field_caps_index_3\"}}'\n+          - '{\"created_at\": \"2020-01-01\"}'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0ODA3MA=="}, "originalCommit": {"oid": "f15106e246be8e3b201ea39082c8c56f75ceea30"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDUyNzM5OnYy", "diffSide": "RIGHT", "path": "docs/reference/search/field-caps.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxMTo1OVrOGdc-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxMTo1OVrOGdc-PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjU3Mg==", "bodyText": "Looks like we've duplicated this whole note, maybe we could just keep the one below?", "url": "https://github.com/elastic/elasticsearch/pull/57276#discussion_r433536572", "createdAt": "2020-06-01T23:11:59Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/search/field-caps.asciidoc", "diffHunk": "@@ -53,13 +53,33 @@ include::{docdir}/rest-api/common-parms.asciidoc[tag=fields]\n include::{docdir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n \n `include_unmapped`::\n-  (Optional, boolean) If `true`, unmapped fields are included in the response. \n+  (Optional, boolean) If `true`, unmapped fields are included in the response.\n   Defaults to `false`.\n \n+[[search-field-caps-api-request-body]]\n+==== {api-request-body-title}\n+\n+`index_filter`::\n+(Optional,  <<query-dsl,query object>> Allows to filter indices if the provided\n+query rewrites to `match_none` on every shard.\n++\n+--\n+[IMPORTANT]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c123ea95ccfb074e6fcbeb68050f82fed7a9699"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3840, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}