{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDc3ODg0", "number": 57699, "title": "[DOCS] Reformat `pattern_replace` token filter", "bodyText": "Changes:\n\nRewrites description and adds Lucene link\nAdds analyze example\nAdds parameter definitions\nAdds custom analyzer example", "createdAt": "2020-06-04T20:44:04Z", "url": "https://github.com/elastic/elasticsearch/pull/57699", "merged": true, "mergeCommit": {"oid": "bb66d594d123894eef8530c22b2687029a5c0643"}, "closed": true, "closedAt": "2020-06-11T16:04:23Z", "author": {"login": "jrodewig"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoEP0UgH2gAyNDI4MDc3ODg0OmZjYjExOTczMmFlMjc0ODk1YjBkYmE3M2Y0MTU3YjM5NWEyZGNhMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqP-kQgFqTQyOTAyODkyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fcb119732ae274895b0dba73f4157b395a2dca17", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/fcb119732ae274895b0dba73f4157b395a2dca17", "committedDate": "2020-06-04T20:39:57Z", "message": "[DOCS] Reformat `pattern_replace` tokenfilter\n\nChanges:\n\n* Rewrites description and adds Lucene link\n* Adds analyze example\n* Adds parameter definitions\n* Adds custom analyzer example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad2255136a5a3a02fa3458bd25eacad41142428", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/9ad2255136a5a3a02fa3458bd25eacad41142428", "committedDate": "2020-06-04T20:47:05Z", "message": "reword"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce749ba65f4398999cd8e3034f5481aebb4bf0d", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/fce749ba65f4398999cd8e3034f5481aebb4bf0d", "committedDate": "2020-06-04T20:47:38Z", "message": "reword"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69d6e166267cb0dbe8d3984c5dd21645b5092c66", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/69d6e166267cb0dbe8d3984c5dd21645b5092c66", "committedDate": "2020-06-04T20:51:12Z", "message": "fix snippet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MDQ2NjMz", "url": "https://github.com/elastic/elasticsearch/pull/57699#pullrequestreview-426046633", "createdAt": "2020-06-08T09:12:09Z", "commit": {"oid": "69d6e166267cb0dbe8d3984c5dd21645b5092c66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToxMjoxMFrOGgVZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToxMjoxMFrOGgVZpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1ODI0Nw==", "bodyText": "I did not know \\\\p{Sc} was a thing so thanks for educating me :)\nWhile these more esoteric functions work in token filters they are not supported in RegExp query syntax.\nI wonder if it's worth doing one of two things here:\nA) Add a footnote to the effect of \"* note this particular expression wouldn't work with RegExp queries which use a different regex parser\" or\nB) Use a different example that works in both \"pattern_replace\" token filters and RegExp queries.", "url": "https://github.com/elastic/elasticsearch/pull/57699#discussion_r436558247", "createdAt": "2020-06-08T09:12:10Z", "author": {"login": "markharwood"}, "path": "docs/reference/analysis/tokenfilters/pattern_replace-tokenfilter.asciidoc", "diffHunk": "@@ -4,23 +4,157 @@\n <titleabbrev>Pattern replace</titleabbrev>\n ++++\n \n-The `pattern_replace` token filter allows to easily handle string\n-replacements based on a regular expression. The regular expression is\n-defined using the `pattern` parameter, and the replacement string can be\n-provided using the `replacement` parameter (supporting referencing the\n-original text, as explained\n-http://docs.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuffer,%20java.lang.String)[here]).\n+Uses a regular expression to match and replace token substrings.\n+\n+The `pattern_replace` filter uses\n+http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java's\n+regular expression syntax]. By default, the filter replaces matching\n+substrings with an empty substring (`\"\"`).\n+\n+Regular expressions cannot be anchored to the\n+beginning or end of a token. Replacement substrings can use Java's\n+https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement-java.lang.StringBuffer-java.lang.String-[`$g` syntax] to reference capture groups\n+from the original token text.\n \n [WARNING]\n-.Beware of Pathological Regular Expressions\n-========================================\n+====\n+A poorly-written regular expression may run slowly or return a\n+StackOverflowError, causing the node running the expression to exit suddenly.\n+\n+Read more about\n+http://www.regular-expressions.info/catastrophic.html[pathological regular\n+expressions and how to avoid them].\n+====\n+\n+This filter uses Lucene's\n+{lucene-analysis-docs}/pattern/PatternReplaceFilter.html[PatternReplaceFilter].\n+\n+[[analysis-pattern-replace-tokenfilter-analyze-ex]]\n+==== Example\n+\n+The following <<indices-analyze,analyze API>> request uses the `pattern_replace`\n+filter to prepend `watch` to the substring `dog` in `foxes jump lazy dogs`.\n+\n+[source,console]\n+----\n+GET /_analyze\n+{\n+  \"tokenizer\": \"whitespace\",\n+  \"filter\": [\n+    {\n+      \"type\": \"pattern_replace\",\n+      \"pattern\": \"(dog)\",\n+      \"replacement\": \"watch$1\"\n+    }\n+  ],\n+  \"text\": \"foxes jump lazy dogs\"\n+}\n+----\n+\n+The filter produces the following tokens.\n+\n+[source,text]\n+----\n+[ foxes, jump, lazy, watchdogs ]\n+----\n+\n+////\n+[source,console-result]\n+----\n+{\n+  \"tokens\": [\n+    {\n+      \"token\": \"foxes\",\n+      \"start_offset\": 0,\n+      \"end_offset\": 5,\n+      \"type\": \"word\",\n+      \"position\": 0\n+    },\n+    {\n+      \"token\": \"jump\",\n+      \"start_offset\": 6,\n+      \"end_offset\": 10,\n+      \"type\": \"word\",\n+      \"position\": 1\n+    },\n+    {\n+      \"token\": \"lazy\",\n+      \"start_offset\": 11,\n+      \"end_offset\": 15,\n+      \"type\": \"word\",\n+      \"position\": 2\n+    },\n+    {\n+      \"token\": \"watchdogs\",\n+      \"start_offset\": 16,\n+      \"end_offset\": 20,\n+      \"type\": \"word\",\n+      \"position\": 3\n+    }\n+  ]\n+}\n+----\n+////\n+\n+[[analysis-pattern-replace-tokenfilter-configure-parms]]\n+==== Configurable parameters\n+\n+`all`::\n+(Optional, boolean)\n+If `true`, all substrings matching the `pattern` parameter's regular expression\n+are replaced. If `false`, the filter replaces only the first matching substring\n+in each token. Defaults to `true`.\n+\n+`pattern`::\n+(Required, string)\n+Regular expression, written in\n+http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java's\n+regular expression syntax]. The filter replaces token substrings matching this\n+pattern with the substring in the `replacement` parameter.\n+\n+`replacement`::\n+(Optional, string)\n+Replacement substring. Defaults to an empty substring (`\"\"`).\n+\n+[[analysis-pattern-replace-tokenfilter-customize]]\n+==== Customize and add to an analyzer\n \n-The pattern replace token filter uses\n-http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java Regular Expressions].\n+To customize the `pattern_replace` filter, duplicate it to create the basis\n+for a new custom token filter. You can modify the filter using its configurable\n+parameters.\n \n-A badly written regular expression could run very slowly or even throw a\n-StackOverflowError and cause the node it is running on to exit suddenly.\n+The following <<indices-create-index,create index API>> request\n+configures a new <<analysis-custom-analyzer,custom analyzer>> using a custom\n+`pattern_replace` filter, `my_pattern_replace_filter`.\n \n-Read more about http://www.regular-expressions.info/catastrophic.html[pathological regular expressions and how to avoid them].\n+The `my_pattern_replace_filter` filter uses the regular expression `\\\\p{Sc}` to\n+match and remove currency symbols, such as `\u00a3`, `\u20ac`, or `$`. The filter's `all`\n+parameter is `false`, meaning only the first matching symbol in each token is\n+removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d6e166267cb0dbe8d3984c5dd21645b5092c66"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "992ab1cd8e45811044b176d58a6cf4e1910ae4a7", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/992ab1cd8e45811044b176d58a6cf4e1910ae4a7", "committedDate": "2020-06-08T13:11:49Z", "message": "update custom analyzer ex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDI4OTI1", "url": "https://github.com/elastic/elasticsearch/pull/57699#pullrequestreview-429028925", "createdAt": "2020-06-11T15:27:49Z", "commit": {"oid": "992ab1cd8e45811044b176d58a6cf4e1910ae4a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3909, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}