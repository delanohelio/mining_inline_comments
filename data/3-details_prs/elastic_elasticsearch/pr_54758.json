{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzkwMjUx", "number": 54758, "title": "Reduce memory for big aggs run against many shards", "bodyText": "NOTE: See this comment for a clarification of the PR. What follows isn't 100% correct.\nThis changes the behavior of aggregations when search is performed\nagainst enough shards to enable \"batch reduce\" mode. In this case we\nforce always store aggregations in serialized form rather than a\ntraditional java reference. This should shrink the memory usage of large\naggregations at the cost of slightly slowing down aggregations where the\ncoordinating node is also a data node. Because we're only doing this\nwhen there are many shards this is likely to be fairly rare.\nAs a side effect this lets us add logs for the memory usage of the aggs\nbuffer:\n[2020-04-03T17:03:57,052][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1320->448] max [1320]\n[2020-04-03T17:03:57,089][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,102][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,103][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,105][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [888] max [1328]\n\nThese are useful, but you need to keep some things in mind before\ntrusting them:\n\nThe buffers are oversized ala Lucene's ArrayUtils. This means that we\nare using more space than we need, but probably not much more.\nBefore they are merged the aggregations are inflated into their\ntraditional Java objects which probably take up a lot more space\nthan the serialized form. That is, after all, the reason why we store\nthem in serialized form in the first place.\n\nAnd, just because I can, here is another example of the log:\n[2020-04-03T17:06:18,731][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,750][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,809][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,827][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,829][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [98352] max [147528]\n\nI got that last one by building a ten shard index with a million docs in\nit and running a sum in three layers of terms aggregations, all on\nlong fields, and with a batched_reduce_size of 3.", "createdAt": "2020-04-03T21:16:06Z", "url": "https://github.com/elastic/elasticsearch/pull/54758", "merged": true, "mergeCommit": {"oid": "b5c5002c75d6b2653b63ed955e716cc7e17333b4"}, "closed": true, "closedAt": "2020-04-09T15:55:09Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUHkgvgH2gAyMzk4MzkwMjUxOjZiNmRlYmY4MWM0MWQwMWYyNmMyMjhhZWMwYzU1ZmJlYjc3MGIzNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVomwzAFqTM5MDAxODMyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6b6debf81c41d01f26c228aec0c55fbeb770b354", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/6b6debf81c41d01f26c228aec0c55fbeb770b354", "committedDate": "2020-04-03T21:13:47Z", "message": "Reduce memory for big aggs run against many shards\n\nThis changes the behavior of aggregations when search is performed\nagainst enough shards to enable \"batch reduce\" mode. In this case we\nforce always store aggregations in serialized form rather than a\ntraditional java reference. This should shrink the memory usage of large\naggregations at the cost of slightly slowing down aggregations where the\ncoordinating node is also a data node. Because we're only doing this\nwhen there are many shards this is likely to be fairly rare.\n\nAs a side effect this lets us add logs for the memory usage of the aggs\nbuffer:\n```\n[2020-04-03T17:03:57,052][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1320->448] max [1320]\n[2020-04-03T17:03:57,089][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,102][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,103][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,105][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [888] max [1328]\n```\n\nThese are useful, but you need to keep some things in mind before\ntrusting them:\n1. The buffers are oversized ala Lucene's ArrayUtils. This means that we\n   are using more space than we need, but probably not much more.\n2. Before they are merged the aggregations are inflated into their\n   traditional Java objects which *probably* take up a lot more space\n   than the serialized form. That is, after all, the reason why we store\n   them in serialized form in the first place.\n\nAnd, just because I can, here is another example of the log:\n```\n[2020-04-03T17:06:18,731][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,750][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,809][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,827][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,829][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [98352] max [147528]\n```\n\nI got that last one by building a ten shard index with a million docs in\nit and running a `sum` in three layers of `terms` aggregations, all on\n`long` fields, and with a `batched_reduce_size` of `3`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbd62a096272821009c09fa2b43087807b0af321", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/fbd62a096272821009c09fa2b43087807b0af321", "committedDate": "2020-04-03T21:48:17Z", "message": "Merge branch 'master' into agg_memory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjM3OTY4", "url": "https://github.com/elastic/elasticsearch/pull/54758#pullrequestreview-387637968", "createdAt": "2020-04-03T23:51:47Z", "commit": {"oid": "4e2a0bf49e3faf98727c9cb6b92793d3a679321e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1MTo0OFrOGAs1Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1MTo0OFrOGAs1Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4Nzc0Mw==", "bodyText": "I think I should add the task id to the output. That'd help a bit with debugging because setting the task manager to trace logging logs the query. Not that it is a good choice on a busy system, but it could be useful.\nI did look into returning this data in other ways but I couldn't come up with the \"right\" way. And it is super useful to be able to see the partial reduction memory usage. I mean, it'd probably be useful in production. But I think it'll be super useful for me when I'm just hacking on things.", "url": "https://github.com/elastic/elasticsearch/pull/54758#discussion_r403387743", "createdAt": "2020-04-03T23:51:48Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java", "diffHunk": "@@ -684,15 +697,21 @@ public void consumeResult(SearchPhaseResult result) {\n         private synchronized void consumeInternal(QuerySearchResult querySearchResult) {\n             if (querySearchResult.isNull() == false) {\n                 if (index == bufferSize) {\n+                    InternalAggregations reducedAggs = null;\n                     if (hasAggs) {\n                         List<InternalAggregations> aggs = new ArrayList<>(aggsBuffer.length);\n                         for (int i = 0; i < aggsBuffer.length; i++) {\n                             aggs.add(aggsBuffer[i].get());\n                             aggsBuffer[i] = null; // null the buffer so it can be GCed now.\n                         }\n-                        InternalAggregations reducedAggs = InternalAggregations.topLevelReduce(\n-                                aggs, aggReduceContextBuilder.forPartialReduction());\n-                        aggsBuffer[0] = () -> reducedAggs;\n+                        reducedAggs = InternalAggregations.topLevelReduce(aggs, aggReduceContextBuilder.forPartialReduction());\n+                        aggsBuffer[0] = DelayableWriteable.referencing(reducedAggs)\n+                                .asSerialized(InternalAggregations::new, namedWriteableRegistry);\n+                        long previousBufferSize = aggsCurrentBufferSize;\n+                        aggsMaxBufferSize = Math.max(aggsMaxBufferSize, aggsCurrentBufferSize);\n+                        aggsCurrentBufferSize = aggsBuffer[0].ramBytesUsed();\n+                        logger.trace(\"aggs partial reduction [{}->{}] max [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2a0bf49e3faf98727c9cb6b92793d3a679321e"}, "originalPosition": 148}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e2a0bf49e3faf98727c9cb6b92793d3a679321e", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/4e2a0bf49e3faf98727c9cb6b92793d3a679321e", "committedDate": "2020-04-03T21:10:57Z", "message": "Reduce memory for big aggs run against many shards\n\nThis changes the behavior of aggregations when search is performed\nagainst enough shards to enable \"batch reduce\" mode. In this case we\nforce always store aggregations in serialized form rather than a\ntraditional java reference. This should shrink the memory usage of large\naggregations at the cost of slightly slowing down aggregations where the\ncoordinating node is also a data node. Because we're only doing this\nwhen there are many shards this is likely to be fairly rare.\n\nAs a side effect this lets us add logs for the memory usage of the aggs\nbuffer:\n```\n[2020-04-03T17:03:57,052][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1320->448] max [1320]\n[2020-04-03T17:03:57,089][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,102][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,103][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57,105][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [888] max [1328]\n```\n\nThese are useful, but you need to keep some things in mind before\ntrusting them:\n1. The buffers are oversized ala Lucene's ArrayUtils. This means that we\n   are using more space than we need, but probably not much more.\n2. Before they are merged the aggregations are inflated into their\n   traditional Java objects which *probably* take up a lot more space\n   than the serialized form. That is, after all, the reason why we store\n   them in serialized form in the first place.\n\nAnd, just because I can, here is another example of the log:\n```\n[2020-04-03T17:06:18,731][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,750][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,809][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,827][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18,829][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [98352] max [147528]\n```\n\nI got that last one by building a ten shard index with a million docs in\nit and running a `sum` in three layers of `terms` aggregations, all on\n`long` fields, and with a `batched_reduce_size` of `3`."}, "afterCommit": {"oid": "fbd62a096272821009c09fa2b43087807b0af321", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/fbd62a096272821009c09fa2b43087807b0af321", "committedDate": "2020-04-03T21:48:17Z", "message": "Merge branch 'master' into agg_memory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4118c6ccb0694cc6bd6260606853d52d1bb23981", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/4118c6ccb0694cc6bd6260606853d52d1bb23981", "committedDate": "2020-04-04T22:15:21Z", "message": "Merge branch 'master' into agg_memory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "155bb49f20464372b94b30c75154789ccf44adae", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/155bb49f20464372b94b30c75154789ccf44adae", "committedDate": "2020-04-08T13:07:57Z", "message": "Merge branch 'master' into agg_memory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTU5NTMy", "url": "https://github.com/elastic/elasticsearch/pull/54758#pullrequestreview-389959532", "createdAt": "2020-04-08T13:12:28Z", "commit": {"oid": "fbd62a096272821009c09fa2b43087807b0af321"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzoxMjozOFrOGCukfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzoxMjozOFrOGCukfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxMzM0MQ==", "bodyText": "I talked to @jimczi and @javanna and this line is a release blocker. We're pretty ok merging it, but not releasing it. Because async_search keeps a hard reference to the aggs passed to it. Actually async search has all kinds of trouble with aggs because it doesn't perform the final reduction until sync search would. But it does return aggs without the final reduction applied if you get the \"progress\" of the search. These aggs are going to be \"funny\". They'll be missing pipeline aggs, for instant. And scripted_metric will be borked in some way. As will a lot of other things. But you'll mostly get something.", "url": "https://github.com/elastic/elasticsearch/pull/54758#discussion_r405513341", "createdAt": "2020-04-08T13:12:38Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java", "diffHunk": "@@ -705,12 +724,13 @@ private synchronized void consumeInternal(QuerySearchResult querySearchResult) {\n                     index = 1;\n                     if (hasAggs || hasTopDocs) {\n                         progressListener.notifyPartialReduce(SearchProgressListener.buildSearchShards(processedShards),\n-                            topDocsStats.getTotalHits(), hasAggs ? aggsBuffer[0].get() : null, numReducePhases);\n+                            topDocsStats.getTotalHits(), reducedAggs, numReducePhases);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155bb49f20464372b94b30c75154789ccf44adae"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDE4MzI2", "url": "https://github.com/elastic/elasticsearch/pull/54758#pullrequestreview-390018326", "createdAt": "2020-04-08T14:17:02Z", "commit": {"oid": "155bb49f20464372b94b30c75154789ccf44adae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3827, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}