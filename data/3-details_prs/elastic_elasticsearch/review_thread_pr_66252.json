{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NDUyNzE0", "number": 66252, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyNToyOVrOFFEbGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1Mjo0MVrOFFf0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODU5NjcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/analyzer/AnalyzerRules.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyNTozMFrOIFYwvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozMTo1NVrOIFZFOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxOTQ4Ng==", "bodyText": "The rule could check whether the Filter is resolved before applying the equality.", "url": "https://github.com/elastic/elasticsearch/pull/66252#discussion_r542519486", "createdAt": "2020-12-14T16:25:30Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/analyzer/AnalyzerRules.java", "diffHunk": "@@ -39,7 +40,7 @@ protected LogicalPlan rule(Filter filter) {\n         }\n \n         private Expression replaceRawBoolFieldWithEquals(Expression e) {\n-            if (e instanceof FieldAttribute) {\n+            if (e instanceof FieldAttribute && e.dataType() == BOOLEAN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b39016fd9e10f3926f7a963dc9c3ea5980897b9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNDczMQ==", "bodyText": "Ah, right. Thanks, fixed.", "url": "https://github.com/elastic/elasticsearch/pull/66252#discussion_r542524731", "createdAt": "2020-12-14T16:31:55Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/analyzer/AnalyzerRules.java", "diffHunk": "@@ -39,7 +40,7 @@ protected LogicalPlan rule(Filter filter) {\n         }\n \n         private Expression replaceRawBoolFieldWithEquals(Expression e) {\n-            if (e instanceof FieldAttribute) {\n+            if (e instanceof FieldAttribute && e.dataType() == BOOLEAN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxOTQ4Ng=="}, "originalCommit": {"oid": "b39016fd9e10f3926f7a963dc9c3ea5980897b9a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzA4NDg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1Mjo0MVrOIGCQIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo1MzowNlrOIGL8-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5OTI2Ng==", "bodyText": "Maybe I'm missing some context, but what happens to nested expressions like: WHERE a > 1 and (bool or b < 2) or (c = 3 and bool), could we have a test for that as well?", "url": "https://github.com/elastic/elasticsearch/pull/66252#discussion_r543199266", "createdAt": "2020-12-15T09:52:41Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2459,4 +2461,33 @@ public void testReplaceSumWithStats() {\n             assertThat(eqe.queryContainer().toString().replaceAll(\"\\\\s+\", \"\"), containsString(\"{\\\"stats\\\":{\\\"field\\\":\\\"int\\\"}}\"));\n         }\n     }\n+\n+    public void testAddMissingEqualsToBoolField() {\n+        LogicalPlan p = plan(\"SELECT bool FROM test WHERE bool\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd726b93228a9a15f141b12268c3f9e56e8fac8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMTkwOA==", "bodyText": "They'd be eval'd to a BOOLEAN type, so nothing would happen: the AddMissingEqualsToBoolField() wouldn't change the expression (since its root node type wouldn't be a FieldAttribute) and the verifier check would let it pass (since it's a bool type). Basically most of the tests we have look to these two newly added checks similar to your example, but I could still add one if you think it'd help.", "url": "https://github.com/elastic/elasticsearch/pull/66252#discussion_r543211908", "createdAt": "2020-12-15T10:09:51Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2459,4 +2461,33 @@ public void testReplaceSumWithStats() {\n             assertThat(eqe.queryContainer().toString().replaceAll(\"\\\\s+\", \"\"), containsString(\"{\\\"stats\\\":{\\\"field\\\":\\\"int\\\"}}\"));\n         }\n     }\n+\n+    public void testAddMissingEqualsToBoolField() {\n+        LogicalPlan p = plan(\"SELECT bool FROM test WHERE bool\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5OTI2Ng=="}, "originalCommit": {"oid": "fcd726b93228a9a15f141b12268c3f9e56e8fac8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1ODIwMw==", "bodyText": "@matriv, I've added a slightly extended version of your test (and updated my first eval of the case above).", "url": "https://github.com/elastic/elasticsearch/pull/66252#discussion_r543358203", "createdAt": "2020-12-15T13:53:06Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java", "diffHunk": "@@ -2459,4 +2461,33 @@ public void testReplaceSumWithStats() {\n             assertThat(eqe.queryContainer().toString().replaceAll(\"\\\\s+\", \"\"), containsString(\"{\\\"stats\\\":{\\\"field\\\":\\\"int\\\"}}\"));\n         }\n     }\n+\n+    public void testAddMissingEqualsToBoolField() {\n+        LogicalPlan p = plan(\"SELECT bool FROM test WHERE bool\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5OTI2Ng=="}, "originalCommit": {"oid": "fcd726b93228a9a15f141b12268c3f9e56e8fac8"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4663, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}