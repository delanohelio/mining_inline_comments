{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjIyNzYx", "number": 53348, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzowNToyOFrODmxeQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzowODowN1rODmxipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTgzMDQzOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzowNToyOFrOF0Yd_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDowNDo1NFrOF2QxGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MTE2Ng==", "bodyText": "Can you ref issues in TODO's like this? eg TODO: ..., see #12345.", "url": "https://github.com/elastic/elasticsearch/pull/53348#discussion_r390471166", "createdAt": "2020-03-10T17:05:28Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AStatement.java", "diffHunk": "@@ -30,66 +30,76 @@\n  */\n public abstract class AStatement extends ANode {\n \n-    /**\n-     * Set to true when the final statement in an {@link SClass} is reached.\n-     * Used to determine whether or not an auto-return is necessary.\n-     */\n-    boolean lastSource = false;\n-\n-    /**\n-     * Set to true when a loop begins.  Used by {@link SBlock} to help determine\n-     * when the final statement of a loop is reached.\n-     */\n-    boolean beginLoop = false;\n-\n-    /**\n-     * Set to true when inside a loop.  Used by {@link SBreak} and {@link SContinue}\n-     * to determine if a break/continue statement is legal.\n-     */\n-    boolean inLoop = false;\n-\n-    /**\n-     * Set to true when on the last statement of a loop.  Used by {@link SContinue}\n-     * to prevent extraneous continue statements.\n-     */\n-    boolean lastLoop = false;\n-\n-    /**\n-     * Set to true if a statement would cause the method to exit.  Used to\n-     * determine whether or not an auto-return is necessary.\n-     */\n-    boolean methodEscape = false;\n-\n-    /**\n-     * Set to true if a statement would cause a loop to exit.  Used to\n-     * prevent unreachable statements.\n-     */\n-    boolean loopEscape = false;\n-\n-    /**\n-     * Set to true if all current paths escape from the current {@link SBlock}.\n-     * Used during the analysis phase to prevent unreachable statements and\n-     * the writing phase to prevent extraneous bytecode gotos from being written.\n-     */\n-    boolean allEscape = false;\n-\n-    /**\n-     * Set to true if any continue statement occurs in a loop.  Used to prevent\n-     * unnecessary infinite loops.\n-     */\n-    boolean anyContinue = false;\n+    public static class Input {\n+\n+        /**\n+         * Set to true when the final statement in an {@link SClass} is reached.\n+         * Used to determine whether or not an auto-return is necessary.\n+         */\n+        boolean lastSource = false;\n+\n+        /**\n+         * Set to true when a loop begins.  Used by {@link SBlock} to help determine\n+         * when the final statement of a loop is reached.\n+         */\n+        boolean beginLoop = false;\n+\n+        /**\n+         * Set to true when inside a loop.  Used by {@link SBreak} and {@link SContinue}\n+         * to determine if a break/continue statement is legal.\n+         */\n+        boolean inLoop = false;\n+\n+        /**\n+         * Set to true when on the last statement of a loop.  Used by {@link SContinue}\n+         * to prevent extraneous continue statements.\n+         */\n+        boolean lastLoop = false;\n+    }\n \n-    /**\n-     * Set to true if any break statement occurs in a loop.  Used to prevent\n-     * extraneous loops.\n-     */\n-    boolean anyBreak = false;\n+    public static class Output {\n+\n+        /**\n+         * Set to true if a statement would cause the method to exit.  Used to\n+         * determine whether or not an auto-return is necessary.\n+         */\n+        boolean methodEscape = false;\n+\n+        /**\n+         * Set to true if a statement would cause a loop to exit.  Used to\n+         * prevent unreachable statements.\n+         */\n+        boolean loopEscape = false;\n+\n+        /**\n+         * Set to true if all current paths escape from the current {@link SBlock}.\n+         * Used during the analysis phase to prevent unreachable statements and\n+         * the writing phase to prevent extraneous bytecode gotos from being written.\n+         */\n+        boolean allEscape = false;\n+\n+        /**\n+         * Set to true if any continue statement occurs in a loop.  Used to prevent\n+         * unnecessary infinite loops.\n+         */\n+        boolean anyContinue = false;\n+\n+        /**\n+         * Set to true if any break statement occurs in a loop.  Used to prevent\n+         * extraneous loops.\n+         */\n+        boolean anyBreak = false;\n+\n+        /**\n+         * Set to the approximate number of statements in a loop block to prevent\n+         * infinite loops during runtime.\n+         */\n+        int statementCount = 0;\n+    }\n \n-    /**\n-     * Set to the approximate number of statements in a loop block to prevent\n-     * infinite loops during runtime.\n-     */\n-    int statementCount = 0;\n+    // TODO: remove placeholders once analysis and write are combined into build", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92f642274a0784be6c0ee44f983c0a97969e3d9"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MjEzNg==", "bodyText": "#53561", "url": "https://github.com/elastic/elasticsearch/pull/53348#discussion_r392442136", "createdAt": "2020-03-13T20:04:54Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AStatement.java", "diffHunk": "@@ -30,66 +30,76 @@\n  */\n public abstract class AStatement extends ANode {\n \n-    /**\n-     * Set to true when the final statement in an {@link SClass} is reached.\n-     * Used to determine whether or not an auto-return is necessary.\n-     */\n-    boolean lastSource = false;\n-\n-    /**\n-     * Set to true when a loop begins.  Used by {@link SBlock} to help determine\n-     * when the final statement of a loop is reached.\n-     */\n-    boolean beginLoop = false;\n-\n-    /**\n-     * Set to true when inside a loop.  Used by {@link SBreak} and {@link SContinue}\n-     * to determine if a break/continue statement is legal.\n-     */\n-    boolean inLoop = false;\n-\n-    /**\n-     * Set to true when on the last statement of a loop.  Used by {@link SContinue}\n-     * to prevent extraneous continue statements.\n-     */\n-    boolean lastLoop = false;\n-\n-    /**\n-     * Set to true if a statement would cause the method to exit.  Used to\n-     * determine whether or not an auto-return is necessary.\n-     */\n-    boolean methodEscape = false;\n-\n-    /**\n-     * Set to true if a statement would cause a loop to exit.  Used to\n-     * prevent unreachable statements.\n-     */\n-    boolean loopEscape = false;\n-\n-    /**\n-     * Set to true if all current paths escape from the current {@link SBlock}.\n-     * Used during the analysis phase to prevent unreachable statements and\n-     * the writing phase to prevent extraneous bytecode gotos from being written.\n-     */\n-    boolean allEscape = false;\n-\n-    /**\n-     * Set to true if any continue statement occurs in a loop.  Used to prevent\n-     * unnecessary infinite loops.\n-     */\n-    boolean anyContinue = false;\n+    public static class Input {\n+\n+        /**\n+         * Set to true when the final statement in an {@link SClass} is reached.\n+         * Used to determine whether or not an auto-return is necessary.\n+         */\n+        boolean lastSource = false;\n+\n+        /**\n+         * Set to true when a loop begins.  Used by {@link SBlock} to help determine\n+         * when the final statement of a loop is reached.\n+         */\n+        boolean beginLoop = false;\n+\n+        /**\n+         * Set to true when inside a loop.  Used by {@link SBreak} and {@link SContinue}\n+         * to determine if a break/continue statement is legal.\n+         */\n+        boolean inLoop = false;\n+\n+        /**\n+         * Set to true when on the last statement of a loop.  Used by {@link SContinue}\n+         * to prevent extraneous continue statements.\n+         */\n+        boolean lastLoop = false;\n+    }\n \n-    /**\n-     * Set to true if any break statement occurs in a loop.  Used to prevent\n-     * extraneous loops.\n-     */\n-    boolean anyBreak = false;\n+    public static class Output {\n+\n+        /**\n+         * Set to true if a statement would cause the method to exit.  Used to\n+         * determine whether or not an auto-return is necessary.\n+         */\n+        boolean methodEscape = false;\n+\n+        /**\n+         * Set to true if a statement would cause a loop to exit.  Used to\n+         * prevent unreachable statements.\n+         */\n+        boolean loopEscape = false;\n+\n+        /**\n+         * Set to true if all current paths escape from the current {@link SBlock}.\n+         * Used during the analysis phase to prevent unreachable statements and\n+         * the writing phase to prevent extraneous bytecode gotos from being written.\n+         */\n+        boolean allEscape = false;\n+\n+        /**\n+         * Set to true if any continue statement occurs in a loop.  Used to prevent\n+         * unnecessary infinite loops.\n+         */\n+        boolean anyContinue = false;\n+\n+        /**\n+         * Set to true if any break statement occurs in a loop.  Used to prevent\n+         * extraneous loops.\n+         */\n+        boolean anyBreak = false;\n+\n+        /**\n+         * Set to the approximate number of statements in a loop block to prevent\n+         * infinite loops during runtime.\n+         */\n+        int statementCount = 0;\n+    }\n \n-    /**\n-     * Set to the approximate number of statements in a loop block to prevent\n-     * infinite loops during runtime.\n-     */\n-    int statementCount = 0;\n+    // TODO: remove placeholders once analysis and write are combined into build", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MTE2Ng=="}, "originalCommit": {"oid": "a92f642274a0784be6c0ee44f983c0a97969e3d9"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTgzODgwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SExpression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzowNzoyM1rOF0YjMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDowNzo0N1rOF2Q1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MjQ5OA==", "bodyText": "Consider creating output close to it's first use, at line 68.", "url": "https://github.com/elastic/elasticsearch/pull/53348#discussion_r390472498", "createdAt": "2020-03-10T17:07:23Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SExpression.java", "diffHunk": "@@ -44,36 +44,40 @@ public SExpression(Location location, AExpression expression) {\n     }\n \n     @Override\n-    void analyze(ScriptRoot scriptRoot, Scope scope) {\n+    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n+        this.input = input;\n+        output = new Output();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92f642274a0784be6c0ee44f983c0a97969e3d9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MzE5NQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53348#discussion_r392443195", "createdAt": "2020-03-13T20:07:47Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SExpression.java", "diffHunk": "@@ -44,36 +44,40 @@ public SExpression(Location location, AExpression expression) {\n     }\n \n     @Override\n-    void analyze(ScriptRoot scriptRoot, Scope scope) {\n+    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n+        this.input = input;\n+        output = new Output();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MjQ5OA=="}, "originalCommit": {"oid": "a92f642274a0784be6c0ee44f983c0a97969e3d9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTg0MTY1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzowODowN1rOF0YlDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDowNzo1MVrOF2Q1WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Mjk3Mw==", "bodyText": "Same as above, consider changing where this creation occurs.  It's about ~50 lines away from actual use.", "url": "https://github.com/elastic/elasticsearch/pull/53348#discussion_r390472973", "createdAt": "2020-03-10T17:08:07Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFor.java", "diffHunk": "@@ -52,12 +52,15 @@ public SFor(Location location, ANode initializer, AExpression condition, AExpres\n     }\n \n     @Override\n-    void analyze(ScriptRoot scriptRoot, Scope scope) {\n+    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n+        this.input = input;\n+        output = new Output();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92f642274a0784be6c0ee44f983c0a97969e3d9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MzIyNA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53348#discussion_r392443224", "createdAt": "2020-03-13T20:07:51Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFor.java", "diffHunk": "@@ -52,12 +52,15 @@ public SFor(Location location, ANode initializer, AExpression condition, AExpres\n     }\n \n     @Override\n-    void analyze(ScriptRoot scriptRoot, Scope scope) {\n+    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n+        this.input = input;\n+        output = new Output();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Mjk3Mw=="}, "originalCommit": {"oid": "a92f642274a0784be6c0ee44f983c0a97969e3d9"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3390, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}