{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTU0Mzkz", "number": 52855, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTozMzozOVrODjlZ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMToxNTozNFrODm2-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjM5NjE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTozMzozOVrOFvedwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyMzo0MVrOF0T-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNjUzMA==", "bodyText": "After looking through the code more carefully, we can't do this because settings is never actually updated for dynamic settings. This would only determine if this setting exists at start-up. So if a user were to dynamically update this setting we would be using old information.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385326530", "createdAt": "2020-02-27T19:33:39Z", "author": {"login": "jdconrad"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {\n+                    if (generalCache == null) {\n+                        // This validator is run on every settings update.\n+                        // Here we try to detect if it's a spurious update to the default.\n+                        // This _will_ allow through bad updates to the default.\n+                        if (SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.getDefault(Settings.EMPTY).equals(s) &&\n+                            SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.exists(settings) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyOTk5MA==", "bodyText": "What do you think about changing this to:\nSCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.getDefault(Settings.EMPTY).equals(s)\nThat will detect non-changes.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385329990", "createdAt": "2020-02-27T19:40:11Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {\n+                    if (generalCache == null) {\n+                        // This validator is run on every settings update.\n+                        // Here we try to detect if it's a spurious update to the default.\n+                        // This _will_ allow through bad updates to the default.\n+                        if (SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.getDefault(Settings.EMPTY).equals(s) &&\n+                            SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.exists(settings) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNjUzMA=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMTk4Mw==", "bodyText": "That would only detect if the value was different than the default. The user could explicitly set the default through a dynamic update?", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385331983", "createdAt": "2020-02-27T19:44:08Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {\n+                    if (generalCache == null) {\n+                        // This validator is run on every settings update.\n+                        // Here we try to detect if it's a spurious update to the default.\n+                        // This _will_ allow through bad updates to the default.\n+                        if (SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.getDefault(Settings.EMPTY).equals(s) &&\n+                            SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.exists(settings) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNjUzMA=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNjY2NQ==", "bodyText": "Yes, the user can set that and we will not reject it.  I address this in the comment on line 397:\n// This validator is run on every settings update.\n// Here we try to detect if it's a spurious update to the default.\n// This _will_ allow through bad updates to the default.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385336665", "createdAt": "2020-02-27T19:53:06Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {\n+                    if (generalCache == null) {\n+                        // This validator is run on every settings update.\n+                        // Here we try to detect if it's a spurious update to the default.\n+                        // This _will_ allow through bad updates to the default.\n+                        if (SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.getDefault(Settings.EMPTY).equals(s) &&\n+                            SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.exists(settings) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNjUzMA=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MDE4Mw==", "bodyText": "@stu-elastic Thanks for walking me through this. I believe you are correct that if we remove the exists check, this will behave as expected.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385340183", "createdAt": "2020-02-27T20:00:06Z", "author": {"login": "jdconrad"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {\n+                    if (generalCache == null) {\n+                        // This validator is run on every settings update.\n+                        // Here we try to detect if it's a spurious update to the default.\n+                        // This _will_ allow through bad updates to the default.\n+                        if (SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.getDefault(Settings.EMPTY).equals(s) &&\n+                            SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.exists(settings) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNjUzMA=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5NzU2MA==", "bodyText": "Now we have a special use-context value.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390397560", "createdAt": "2020-03-10T15:23:41Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {\n+                    if (generalCache == null) {\n+                        // This validator is run on every settings update.\n+                        // Here we try to detect if it's a spurious update to the default.\n+                        // This _will_ allow through bad updates to the default.\n+                        if (SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.getDefault(Settings.EMPTY).equals(s) &&\n+                            SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.exists(settings) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNjUzMA=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQzNzMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo0NjozNVrOFve4Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyNDoyNVrOF0UAsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMzMxOQ==", "bodyText": "I don't think we've used this naming pattern of suffixing with _DEPRECATED before. If we are going to change the object name, perhaps instead we could refer to this as the \"general\" version since that is the terminology you used elsewhere? eg SCRIPT_GENERAL_CACHE_SIZE_SETTING. We also need the Property.Deprecated on these.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385333319", "createdAt": "2020-02-27T19:46:35Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,15 +94,52 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING_DEPRECATED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzODg3OQ==", "bodyText": "We also need the Property.Deprecated on these.\n\nThat will be added in a future change, see step 5", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385338879", "createdAt": "2020-02-27T19:57:28Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,15 +94,52 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING_DEPRECATED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMzMxOQ=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MjQ3MQ==", "bodyText": "Changed to SCRIPT_GENERAL_, leaving the deprecated property addition to a future change.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385352471", "createdAt": "2020-02-27T20:25:37Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,15 +94,52 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING_DEPRECATED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMzMxOQ=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5ODEzMQ==", "bodyText": "As mentioned, deprecation will happen in a future change.  There's a bunch of tests, etc that need to change in tandem with that.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390398131", "createdAt": "2020-03-10T15:24:25Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,15 +94,52 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING_DEPRECATED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMzMxOQ=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQ0MDQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo0NzozNVrOFve6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoyNDo1NlrOFvgB3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMzgzMA==", "bodyText": "call caps case?", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385333830", "createdAt": "2020-02-27T19:47:35Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,15 +94,52 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING_DEPRECATED =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED =\n             new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n \n+    // Per-context settings\n+    static final String contextPrefix = \"script.context.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MjE1Nw==", "bodyText": "Changed.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385352157", "createdAt": "2020-02-27T20:24:56Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,15 +94,52 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING_DEPRECATED =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED =\n             new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n \n+    // Per-context settings\n+    static final String contextPrefix = \"script.context.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMzgzMA=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQ0ODA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo0OTo0NlrOFve-wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoyNTo1N1rOFvgDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDk3Ng==", "bodyText": "Why are we not just using the exists method?", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385334976", "createdAt": "2020-02-27T19:49:46Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -201,13 +240,138 @@ public ScriptService(Settings settings, Map<String, ScriptEngine> engines, Map<S\n         }\n \n         this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));\n-        compiler = new ScriptCache(\n-                    SCRIPT_CACHE_SIZE_SETTING.get(settings),\n-                    SCRIPT_CACHE_EXPIRE_SETTING.get(settings),\n+        generalCache = initCache(settings, contextCache, contexts.keySet());\n+    }\n+\n+    /**\n+     * initialize contextCache with per context settings or return a general script cache\n+     */\n+    ScriptCache initCache(Settings settings, Map<String, ScriptCache> contextCache, Set<String> contextNames) {\n+        if (useGeneralCacheSettings(settings)) {\n+            return new ScriptCache(\n+                SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.get(settings),\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.get(settings),\n+                compilationLimitsEnabled() ?\n+                    SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.get(settings):\n+                    new Tuple<>(0, TimeValue.ZERO)\n+            );\n+        }\n+\n+        Map<String, Integer> sizePerContext = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+        Map<String, TimeValue> expirePerContext = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+        Map<String, Tuple<Integer, TimeValue>> ratePerContext = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+        List<String> badContexts = invalidContextSettings(contextNames, sizePerContext.keySet(), expirePerContext.keySet(),\n+                                    ratePerContext.keySet());\n+        if (badContexts.size() > 0) {\n+            throw new IllegalArgumentException(\"Invalid contexts for script cache settings [\" + String.join(\", \", badContexts) + \"]\");\n+        }\n+\n+        for (String contextName: contexts.keySet()) {\n+            contextCache.put(contextName,\n+                new ScriptCache(\n+                    sizePerContext.getOrDefault(contextName, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                    expirePerContext.getOrDefault(contextName, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n                     compilationLimitsEnabled() ?\n-                        SCRIPT_MAX_COMPILATIONS_RATE.get(settings):\n+                        ratePerContext.getOrDefault(contextName, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n                         new Tuple<>(0, TimeValue.ZERO)\n-                    );\n+                )\n+            );\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Return all setting values that do not correspond to the set of contexts.  Visible for testing.\n+     */\n+    static List<String> invalidContextSettings(Set<String> contextNames, Set<String> size, Set<String> expire, Set<String> rate) {\n+        Set<String> badSize = new HashSet<>(size);\n+        Set<String> badExpire = new HashSet<>(expire);\n+        Set<String> badRate = new HashSet<>(rate);\n+        for (String context: contextNames) {\n+            badSize.remove(context);\n+            badExpire.remove(context);\n+            badRate.remove(context);\n+        }\n+\n+        List<String> badSettings = new ArrayList<>();\n+        for (String sizeContext: badSize) {\n+            badSettings.add(SCRIPT_CACHE_SIZE_SETTING.getConcreteSettingForNamespace(sizeContext).getKey());\n+        }\n+        for (String expireContext: badExpire) {\n+            badSettings.add(SCRIPT_CACHE_EXPIRE_SETTING.getConcreteSettingForNamespace(expireContext).getKey());\n+        }\n+        for (String rateContext: badRate) {\n+            badSettings.add(SCRIPT_MAX_COMPILATIONS_RATE.getConcreteSettingForNamespace(rateContext).getKey());\n+        }\n+\n+        Collections.sort(badSettings);\n+        return badSettings;\n+    }\n+\n+    /**\n+     * Ensure that either the general cache settings are given or the per context settings are given.  If neither are set, the default is to\n+     * using general cache settings.\n+     * Visible for testing\n+     * TODO(stu): change default to per context when context defaults exist\n+     */\n+    static boolean useGeneralCacheSettings(Settings settings) {\n+        Set<String> generalKeys = new HashSet<>();\n+        Set<String> contextKeys = new HashSet<>();\n+        for (String key: settings.keySet()) {\n+            if (SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.match(key) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0Mjg2MQ==", "bodyText": "I can pull these out.  I figured I'd just keep the same shape since it doesn't work for Affix settings.\nScriptService.SCRIPT_CACHE_EXPIRE_SETTING.exists(\n            Settings.builder()\n                .put(\"script.context.baz.cache_expire\", TimeValue.timeValueMillis(1000))\n                .build()\n        )\nis false.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385342861", "createdAt": "2020-02-27T20:05:24Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -201,13 +240,138 @@ public ScriptService(Settings settings, Map<String, ScriptEngine> engines, Map<S\n         }\n \n         this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));\n-        compiler = new ScriptCache(\n-                    SCRIPT_CACHE_SIZE_SETTING.get(settings),\n-                    SCRIPT_CACHE_EXPIRE_SETTING.get(settings),\n+        generalCache = initCache(settings, contextCache, contexts.keySet());\n+    }\n+\n+    /**\n+     * initialize contextCache with per context settings or return a general script cache\n+     */\n+    ScriptCache initCache(Settings settings, Map<String, ScriptCache> contextCache, Set<String> contextNames) {\n+        if (useGeneralCacheSettings(settings)) {\n+            return new ScriptCache(\n+                SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.get(settings),\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.get(settings),\n+                compilationLimitsEnabled() ?\n+                    SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.get(settings):\n+                    new Tuple<>(0, TimeValue.ZERO)\n+            );\n+        }\n+\n+        Map<String, Integer> sizePerContext = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+        Map<String, TimeValue> expirePerContext = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+        Map<String, Tuple<Integer, TimeValue>> ratePerContext = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+        List<String> badContexts = invalidContextSettings(contextNames, sizePerContext.keySet(), expirePerContext.keySet(),\n+                                    ratePerContext.keySet());\n+        if (badContexts.size() > 0) {\n+            throw new IllegalArgumentException(\"Invalid contexts for script cache settings [\" + String.join(\", \", badContexts) + \"]\");\n+        }\n+\n+        for (String contextName: contexts.keySet()) {\n+            contextCache.put(contextName,\n+                new ScriptCache(\n+                    sizePerContext.getOrDefault(contextName, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                    expirePerContext.getOrDefault(contextName, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n                     compilationLimitsEnabled() ?\n-                        SCRIPT_MAX_COMPILATIONS_RATE.get(settings):\n+                        ratePerContext.getOrDefault(contextName, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n                         new Tuple<>(0, TimeValue.ZERO)\n-                    );\n+                )\n+            );\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Return all setting values that do not correspond to the set of contexts.  Visible for testing.\n+     */\n+    static List<String> invalidContextSettings(Set<String> contextNames, Set<String> size, Set<String> expire, Set<String> rate) {\n+        Set<String> badSize = new HashSet<>(size);\n+        Set<String> badExpire = new HashSet<>(expire);\n+        Set<String> badRate = new HashSet<>(rate);\n+        for (String context: contextNames) {\n+            badSize.remove(context);\n+            badExpire.remove(context);\n+            badRate.remove(context);\n+        }\n+\n+        List<String> badSettings = new ArrayList<>();\n+        for (String sizeContext: badSize) {\n+            badSettings.add(SCRIPT_CACHE_SIZE_SETTING.getConcreteSettingForNamespace(sizeContext).getKey());\n+        }\n+        for (String expireContext: badExpire) {\n+            badSettings.add(SCRIPT_CACHE_EXPIRE_SETTING.getConcreteSettingForNamespace(expireContext).getKey());\n+        }\n+        for (String rateContext: badRate) {\n+            badSettings.add(SCRIPT_MAX_COMPILATIONS_RATE.getConcreteSettingForNamespace(rateContext).getKey());\n+        }\n+\n+        Collections.sort(badSettings);\n+        return badSettings;\n+    }\n+\n+    /**\n+     * Ensure that either the general cache settings are given or the per context settings are given.  If neither are set, the default is to\n+     * using general cache settings.\n+     * Visible for testing\n+     * TODO(stu): change default to per context when context defaults exist\n+     */\n+    static boolean useGeneralCacheSettings(Settings settings) {\n+        Set<String> generalKeys = new HashSet<>();\n+        Set<String> contextKeys = new HashSet<>();\n+        for (String key: settings.keySet()) {\n+            if (SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.match(key) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDk3Ng=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MjYyMA==", "bodyText": "Using exists now.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385352620", "createdAt": "2020-02-27T20:25:57Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -201,13 +240,138 @@ public ScriptService(Settings settings, Map<String, ScriptEngine> engines, Map<S\n         }\n \n         this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));\n-        compiler = new ScriptCache(\n-                    SCRIPT_CACHE_SIZE_SETTING.get(settings),\n-                    SCRIPT_CACHE_EXPIRE_SETTING.get(settings),\n+        generalCache = initCache(settings, contextCache, contexts.keySet());\n+    }\n+\n+    /**\n+     * initialize contextCache with per context settings or return a general script cache\n+     */\n+    ScriptCache initCache(Settings settings, Map<String, ScriptCache> contextCache, Set<String> contextNames) {\n+        if (useGeneralCacheSettings(settings)) {\n+            return new ScriptCache(\n+                SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.get(settings),\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.get(settings),\n+                compilationLimitsEnabled() ?\n+                    SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.get(settings):\n+                    new Tuple<>(0, TimeValue.ZERO)\n+            );\n+        }\n+\n+        Map<String, Integer> sizePerContext = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+        Map<String, TimeValue> expirePerContext = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+        Map<String, Tuple<Integer, TimeValue>> ratePerContext = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+        List<String> badContexts = invalidContextSettings(contextNames, sizePerContext.keySet(), expirePerContext.keySet(),\n+                                    ratePerContext.keySet());\n+        if (badContexts.size() > 0) {\n+            throw new IllegalArgumentException(\"Invalid contexts for script cache settings [\" + String.join(\", \", badContexts) + \"]\");\n+        }\n+\n+        for (String contextName: contexts.keySet()) {\n+            contextCache.put(contextName,\n+                new ScriptCache(\n+                    sizePerContext.getOrDefault(contextName, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                    expirePerContext.getOrDefault(contextName, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n                     compilationLimitsEnabled() ?\n-                        SCRIPT_MAX_COMPILATIONS_RATE.get(settings):\n+                        ratePerContext.getOrDefault(contextName, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n                         new Tuple<>(0, TimeValue.ZERO)\n-                    );\n+                )\n+            );\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Return all setting values that do not correspond to the set of contexts.  Visible for testing.\n+     */\n+    static List<String> invalidContextSettings(Set<String> contextNames, Set<String> size, Set<String> expire, Set<String> rate) {\n+        Set<String> badSize = new HashSet<>(size);\n+        Set<String> badExpire = new HashSet<>(expire);\n+        Set<String> badRate = new HashSet<>(rate);\n+        for (String context: contextNames) {\n+            badSize.remove(context);\n+            badExpire.remove(context);\n+            badRate.remove(context);\n+        }\n+\n+        List<String> badSettings = new ArrayList<>();\n+        for (String sizeContext: badSize) {\n+            badSettings.add(SCRIPT_CACHE_SIZE_SETTING.getConcreteSettingForNamespace(sizeContext).getKey());\n+        }\n+        for (String expireContext: badExpire) {\n+            badSettings.add(SCRIPT_CACHE_EXPIRE_SETTING.getConcreteSettingForNamespace(expireContext).getKey());\n+        }\n+        for (String rateContext: badRate) {\n+            badSettings.add(SCRIPT_MAX_COMPILATIONS_RATE.getConcreteSettingForNamespace(rateContext).getKey());\n+        }\n+\n+        Collections.sort(badSettings);\n+        return badSettings;\n+    }\n+\n+    /**\n+     * Ensure that either the general cache settings are given or the per context settings are given.  If neither are set, the default is to\n+     * using general cache settings.\n+     * Visible for testing\n+     * TODO(stu): change default to per context when context defaults exist\n+     */\n+    static boolean useGeneralCacheSettings(Settings settings) {\n+        Set<String> generalKeys = new HashSet<>();\n+        Set<String> contextKeys = new HashSet<>();\n+        for (String key: settings.keySet()) {\n+            if (SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.match(key) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDk3Ng=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQ1MzY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo1MToyOFrOFvfCHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyNTo0NFrOF0UE-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNTgzNg==", "bodyText": "This looks like the case for cross setting validation. Whether the general cache should be created should strictly be based on any general cache settings existing. Validating both sets of settings don't exist at the same time is a separate issue, and can be done by the settings validators themselves.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385335836", "createdAt": "2020-02-27T19:51:28Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -201,13 +240,138 @@ public ScriptService(Settings settings, Map<String, ScriptEngine> engines, Map<S\n         }\n \n         this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));\n-        compiler = new ScriptCache(\n-                    SCRIPT_CACHE_SIZE_SETTING.get(settings),\n-                    SCRIPT_CACHE_EXPIRE_SETTING.get(settings),\n+        generalCache = initCache(settings, contextCache, contexts.keySet());\n+    }\n+\n+    /**\n+     * initialize contextCache with per context settings or return a general script cache\n+     */\n+    ScriptCache initCache(Settings settings, Map<String, ScriptCache> contextCache, Set<String> contextNames) {\n+        if (useGeneralCacheSettings(settings)) {\n+            return new ScriptCache(\n+                SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.get(settings),\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.get(settings),\n+                compilationLimitsEnabled() ?\n+                    SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.get(settings):\n+                    new Tuple<>(0, TimeValue.ZERO)\n+            );\n+        }\n+\n+        Map<String, Integer> sizePerContext = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+        Map<String, TimeValue> expirePerContext = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+        Map<String, Tuple<Integer, TimeValue>> ratePerContext = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+        List<String> badContexts = invalidContextSettings(contextNames, sizePerContext.keySet(), expirePerContext.keySet(),\n+                                    ratePerContext.keySet());\n+        if (badContexts.size() > 0) {\n+            throw new IllegalArgumentException(\"Invalid contexts for script cache settings [\" + String.join(\", \", badContexts) + \"]\");\n+        }\n+\n+        for (String contextName: contexts.keySet()) {\n+            contextCache.put(contextName,\n+                new ScriptCache(\n+                    sizePerContext.getOrDefault(contextName, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                    expirePerContext.getOrDefault(contextName, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n                     compilationLimitsEnabled() ?\n-                        SCRIPT_MAX_COMPILATIONS_RATE.get(settings):\n+                        ratePerContext.getOrDefault(contextName, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n                         new Tuple<>(0, TimeValue.ZERO)\n-                    );\n+                )\n+            );\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Return all setting values that do not correspond to the set of contexts.  Visible for testing.\n+     */\n+    static List<String> invalidContextSettings(Set<String> contextNames, Set<String> size, Set<String> expire, Set<String> rate) {\n+        Set<String> badSize = new HashSet<>(size);\n+        Set<String> badExpire = new HashSet<>(expire);\n+        Set<String> badRate = new HashSet<>(rate);\n+        for (String context: contextNames) {\n+            badSize.remove(context);\n+            badExpire.remove(context);\n+            badRate.remove(context);\n+        }\n+\n+        List<String> badSettings = new ArrayList<>();\n+        for (String sizeContext: badSize) {\n+            badSettings.add(SCRIPT_CACHE_SIZE_SETTING.getConcreteSettingForNamespace(sizeContext).getKey());\n+        }\n+        for (String expireContext: badExpire) {\n+            badSettings.add(SCRIPT_CACHE_EXPIRE_SETTING.getConcreteSettingForNamespace(expireContext).getKey());\n+        }\n+        for (String rateContext: badRate) {\n+            badSettings.add(SCRIPT_MAX_COMPILATIONS_RATE.getConcreteSettingForNamespace(rateContext).getKey());\n+        }\n+\n+        Collections.sort(badSettings);\n+        return badSettings;\n+    }\n+\n+    /**\n+     * Ensure that either the general cache settings are given or the per context settings are given.  If neither are set, the default is to\n+     * using general cache settings.\n+     * Visible for testing\n+     * TODO(stu): change default to per context when context defaults exist\n+     */\n+    static boolean useGeneralCacheSettings(Settings settings) {\n+        Set<String> generalKeys = new HashSet<>();\n+        Set<String> contextKeys = new HashSet<>();\n+        for (String key: settings.keySet()) {\n+            if (SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.match(key) ||\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.match(key) ||\n+                SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.match(key)) {\n+\n+                generalKeys.add(key);\n+\n+            } else if (\n+                SCRIPT_CACHE_SIZE_SETTING.getRawKey().match(key) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MzE5NA==", "bodyText": "Validating both sets of settings don't exist at the same time is a separate issue, and can be done by the settings validators themselves.\n\nLet's discuss how this can be done.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385343194", "createdAt": "2020-02-27T20:06:05Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -201,13 +240,138 @@ public ScriptService(Settings settings, Map<String, ScriptEngine> engines, Map<S\n         }\n \n         this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));\n-        compiler = new ScriptCache(\n-                    SCRIPT_CACHE_SIZE_SETTING.get(settings),\n-                    SCRIPT_CACHE_EXPIRE_SETTING.get(settings),\n+        generalCache = initCache(settings, contextCache, contexts.keySet());\n+    }\n+\n+    /**\n+     * initialize contextCache with per context settings or return a general script cache\n+     */\n+    ScriptCache initCache(Settings settings, Map<String, ScriptCache> contextCache, Set<String> contextNames) {\n+        if (useGeneralCacheSettings(settings)) {\n+            return new ScriptCache(\n+                SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.get(settings),\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.get(settings),\n+                compilationLimitsEnabled() ?\n+                    SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.get(settings):\n+                    new Tuple<>(0, TimeValue.ZERO)\n+            );\n+        }\n+\n+        Map<String, Integer> sizePerContext = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+        Map<String, TimeValue> expirePerContext = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+        Map<String, Tuple<Integer, TimeValue>> ratePerContext = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+        List<String> badContexts = invalidContextSettings(contextNames, sizePerContext.keySet(), expirePerContext.keySet(),\n+                                    ratePerContext.keySet());\n+        if (badContexts.size() > 0) {\n+            throw new IllegalArgumentException(\"Invalid contexts for script cache settings [\" + String.join(\", \", badContexts) + \"]\");\n+        }\n+\n+        for (String contextName: contexts.keySet()) {\n+            contextCache.put(contextName,\n+                new ScriptCache(\n+                    sizePerContext.getOrDefault(contextName, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                    expirePerContext.getOrDefault(contextName, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n                     compilationLimitsEnabled() ?\n-                        SCRIPT_MAX_COMPILATIONS_RATE.get(settings):\n+                        ratePerContext.getOrDefault(contextName, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n                         new Tuple<>(0, TimeValue.ZERO)\n-                    );\n+                )\n+            );\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Return all setting values that do not correspond to the set of contexts.  Visible for testing.\n+     */\n+    static List<String> invalidContextSettings(Set<String> contextNames, Set<String> size, Set<String> expire, Set<String> rate) {\n+        Set<String> badSize = new HashSet<>(size);\n+        Set<String> badExpire = new HashSet<>(expire);\n+        Set<String> badRate = new HashSet<>(rate);\n+        for (String context: contextNames) {\n+            badSize.remove(context);\n+            badExpire.remove(context);\n+            badRate.remove(context);\n+        }\n+\n+        List<String> badSettings = new ArrayList<>();\n+        for (String sizeContext: badSize) {\n+            badSettings.add(SCRIPT_CACHE_SIZE_SETTING.getConcreteSettingForNamespace(sizeContext).getKey());\n+        }\n+        for (String expireContext: badExpire) {\n+            badSettings.add(SCRIPT_CACHE_EXPIRE_SETTING.getConcreteSettingForNamespace(expireContext).getKey());\n+        }\n+        for (String rateContext: badRate) {\n+            badSettings.add(SCRIPT_MAX_COMPILATIONS_RATE.getConcreteSettingForNamespace(rateContext).getKey());\n+        }\n+\n+        Collections.sort(badSettings);\n+        return badSettings;\n+    }\n+\n+    /**\n+     * Ensure that either the general cache settings are given or the per context settings are given.  If neither are set, the default is to\n+     * using general cache settings.\n+     * Visible for testing\n+     * TODO(stu): change default to per context when context defaults exist\n+     */\n+    static boolean useGeneralCacheSettings(Settings settings) {\n+        Set<String> generalKeys = new HashSet<>();\n+        Set<String> contextKeys = new HashSet<>();\n+        for (String key: settings.keySet()) {\n+            if (SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.match(key) ||\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.match(key) ||\n+                SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.match(key)) {\n+\n+                generalKeys.add(key);\n+\n+            } else if (\n+                SCRIPT_CACHE_SIZE_SETTING.getRawKey().match(key) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNTgzNg=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5OTIyNQ==", "bodyText": "We're no longer worrying about cross validation.  Now we allow any combo of settings to be set and flip between context and general caches using script.max_compilations_rate=use-context.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390399225", "createdAt": "2020-03-10T15:25:44Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -201,13 +240,138 @@ public ScriptService(Settings settings, Map<String, ScriptEngine> engines, Map<S\n         }\n \n         this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));\n-        compiler = new ScriptCache(\n-                    SCRIPT_CACHE_SIZE_SETTING.get(settings),\n-                    SCRIPT_CACHE_EXPIRE_SETTING.get(settings),\n+        generalCache = initCache(settings, contextCache, contexts.keySet());\n+    }\n+\n+    /**\n+     * initialize contextCache with per context settings or return a general script cache\n+     */\n+    ScriptCache initCache(Settings settings, Map<String, ScriptCache> contextCache, Set<String> contextNames) {\n+        if (useGeneralCacheSettings(settings)) {\n+            return new ScriptCache(\n+                SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.get(settings),\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.get(settings),\n+                compilationLimitsEnabled() ?\n+                    SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.get(settings):\n+                    new Tuple<>(0, TimeValue.ZERO)\n+            );\n+        }\n+\n+        Map<String, Integer> sizePerContext = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+        Map<String, TimeValue> expirePerContext = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+        Map<String, Tuple<Integer, TimeValue>> ratePerContext = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+        List<String> badContexts = invalidContextSettings(contextNames, sizePerContext.keySet(), expirePerContext.keySet(),\n+                                    ratePerContext.keySet());\n+        if (badContexts.size() > 0) {\n+            throw new IllegalArgumentException(\"Invalid contexts for script cache settings [\" + String.join(\", \", badContexts) + \"]\");\n+        }\n+\n+        for (String contextName: contexts.keySet()) {\n+            contextCache.put(contextName,\n+                new ScriptCache(\n+                    sizePerContext.getOrDefault(contextName, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                    expirePerContext.getOrDefault(contextName, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n                     compilationLimitsEnabled() ?\n-                        SCRIPT_MAX_COMPILATIONS_RATE.get(settings):\n+                        ratePerContext.getOrDefault(contextName, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n                         new Tuple<>(0, TimeValue.ZERO)\n-                    );\n+                )\n+            );\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Return all setting values that do not correspond to the set of contexts.  Visible for testing.\n+     */\n+    static List<String> invalidContextSettings(Set<String> contextNames, Set<String> size, Set<String> expire, Set<String> rate) {\n+        Set<String> badSize = new HashSet<>(size);\n+        Set<String> badExpire = new HashSet<>(expire);\n+        Set<String> badRate = new HashSet<>(rate);\n+        for (String context: contextNames) {\n+            badSize.remove(context);\n+            badExpire.remove(context);\n+            badRate.remove(context);\n+        }\n+\n+        List<String> badSettings = new ArrayList<>();\n+        for (String sizeContext: badSize) {\n+            badSettings.add(SCRIPT_CACHE_SIZE_SETTING.getConcreteSettingForNamespace(sizeContext).getKey());\n+        }\n+        for (String expireContext: badExpire) {\n+            badSettings.add(SCRIPT_CACHE_EXPIRE_SETTING.getConcreteSettingForNamespace(expireContext).getKey());\n+        }\n+        for (String rateContext: badRate) {\n+            badSettings.add(SCRIPT_MAX_COMPILATIONS_RATE.getConcreteSettingForNamespace(rateContext).getKey());\n+        }\n+\n+        Collections.sort(badSettings);\n+        return badSettings;\n+    }\n+\n+    /**\n+     * Ensure that either the general cache settings are given or the per context settings are given.  If neither are set, the default is to\n+     * using general cache settings.\n+     * Visible for testing\n+     * TODO(stu): change default to per context when context defaults exist\n+     */\n+    static boolean useGeneralCacheSettings(Settings settings) {\n+        Set<String> generalKeys = new HashSet<>();\n+        Set<String> contextKeys = new HashSet<>();\n+        for (String key: settings.keySet()) {\n+            if (SCRIPT_CACHE_SIZE_SETTING_DEPRECATED.match(key) ||\n+                SCRIPT_CACHE_EXPIRE_SETTING_DEPRECATED.match(key) ||\n+                SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED.match(key)) {\n+\n+                generalKeys.add(key);\n+\n+            } else if (\n+                SCRIPT_CACHE_SIZE_SETTING.getRawKey().match(key) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNTgzNg=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQ2MzI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo1NDoyN1rOFvfIOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyNjo0M1rOF0UIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNzQwMA==", "bodyText": "I think we need to consider changing the signature here to allow the old value to be passed through. We have it in the update consumer within Setting. Also, using the cross setting validation should allow simpler validation here I think. See the other validate methods that can be implemented on Setting.Validator.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r385337400", "createdAt": "2020-02-27T19:54:27Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwMDAxNg==", "bodyText": "We've taken a step back and are changing the semantics here as mentioned above.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390400016", "createdAt": "2020-03-10T15:26:43Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +383,29 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE_DEPRECATED,\n+                // Don't deref potentially null generalCache\n+                r -> {\n+                    if (generalCache != null) {\n+                        generalCache.setMaxCompilationRate(r);\n+                    }\n+                },\n+                s -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNzQwMA=="}, "originalCommit": {"oid": "6cc359cb0d3ebd4db50869a27995f0c4206f5d0e"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjk0NjAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzozNjoxOFrOFz81Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyMzoxMFrOF0T8pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxODMzOA==", "bodyText": "ZERO is pretty vague as a name here, but I see it matches TimeValue. Maybe this could be SCRIPT_COMPILATION_RATE_ZERO or something like that to match SCRIPT_COMPILATION_RATE.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390018338", "createdAt": "2020-03-09T23:36:18Z", "author": {"login": "jdconrad"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,259 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> ZERO = new Tuple<>(0, TimeValue.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6310977482d2839734a872d2c3193fc0a08de11c"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5NzA5NA==", "bodyText": "Changed.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390397094", "createdAt": "2020-03-10T15:23:10Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,259 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> ZERO = new Tuple<>(0, TimeValue.ZERO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxODMzOA=="}, "originalCommit": {"oid": "6310977482d2839734a872d2c3193fc0a08de11c"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTQyNTUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTozNDowM1rOF0Ud2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMTozOFrOF1BDHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwNTU5Mw==", "bodyText": "Since we are renaming this variable anyways, can we make it consistent with the rest here ending in _SETTING?", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390405593", "createdAt": "2020-03-10T15:34:03Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNjAzMA==", "bodyText": "Appended.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391136030", "createdAt": "2020-03-11T17:21:38Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwNTU5Mw=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTQyOTE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTozNDo1MVrOF0UgPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMTo0N1rOF1BDeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwNjIwNA==", "bodyText": "ditto on ending with _SETTING", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390406204", "createdAt": "2020-03-10T15:34:51Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_max_size\",\n+            key -> Setting.intSetting(key, 100, 0, Property.NodeScope, Property.Dynamic));\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_expire\",\n+            key -> Setting.positiveTimeSetting(key, TimeValue.timeValueMillis(0), Property.NodeScope, Property.Dynamic));\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNjEyMg==", "bodyText": "Mimeographed.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391136122", "createdAt": "2020-03-11T17:21:47Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_max_size\",\n+            key -> Setting.intSetting(key, 100, 0, Property.NodeScope, Property.Dynamic));\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_expire\",\n+            key -> Setting.positiveTimeSetting(key, TimeValue.timeValueMillis(0), Property.NodeScope, Property.Dynamic));\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwNjIwNA=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTQ0Njc1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTozODo0MFrOF0Urew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozNDowOVrOF1Blug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwOTA4Mw==", "bodyText": "Can we move this into a lambda for the general setting, wrapping around this function? That way we don't need extra validation for the per context setting.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390409083", "createdAt": "2020-03-10T15:38:40Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -61,10 +62,18 @@\n \n     static final String DISABLE_DYNAMIC_SCRIPTING_SETTING = \"script.disable_dynamic\";\n \n+    // Special setting value for SCRIPT_GENERAL_MAX_COMPILATIONS_RATE to indicate the script service should use context\n+    // specific caches\n+    static final Tuple<Integer, TimeValue> USE_CONTEXT_RATE_VALUE = new Tuple<>(-1, TimeValue.MINUS_ONE);\n+    static final String USE_CONTEXT_RATE_KEY = \"use-context\";\n+\n     // a parsing function that requires a non negative int and a timevalue as arguments split by a slash\n     // this allows you to easily define rates\n     static final Function<String, Tuple<Integer, TimeValue>> MAX_COMPILATION_RATE_FUNCTION =\n             (String value) -> {\n+                if (value.equals(USE_CONTEXT_RATE_KEY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NDg5MA==", "bodyText": "Moved.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391144890", "createdAt": "2020-03-11T17:34:09Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -61,10 +62,18 @@\n \n     static final String DISABLE_DYNAMIC_SCRIPTING_SETTING = \"script.disable_dynamic\";\n \n+    // Special setting value for SCRIPT_GENERAL_MAX_COMPILATIONS_RATE to indicate the script service should use context\n+    // specific caches\n+    static final Tuple<Integer, TimeValue> USE_CONTEXT_RATE_VALUE = new Tuple<>(-1, TimeValue.MINUS_ONE);\n+    static final String USE_CONTEXT_RATE_KEY = \"use-context\";\n+\n     // a parsing function that requires a non negative int and a timevalue as arguments split by a slash\n     // this allows you to easily define rates\n     static final Function<String, Tuple<Integer, TimeValue>> MAX_COMPILATION_RATE_FUNCTION =\n             (String value) -> {\n+                if (value.equals(USE_CONTEXT_RATE_KEY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwOTA4Mw=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTUwMjUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1MDo0MFrOF0VO1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowMzo0MFrOF07C7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxODEzMg==", "bodyText": "What is this sentinel value? I don't see it described here anywhere.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390418132", "createdAt": "2020-03-10T15:50:40Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNzY3Nw==", "bodyText": "Future looking comment based on implementation.  Will remove.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391037677", "createdAt": "2020-03-11T15:03:40Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxODEzMg=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTUxOTg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1NDoyMlrOF0VZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMjowNlrOF1BEQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMDkxMA==", "bodyText": "Shouldn't this be an illegal state? Can this be an assertion?", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390420910", "createdAt": "2020-03-10T15:54:22Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -304,7 +346,12 @@ void setMaxSizeInBytes(int newMaxSizeInBytes) {\n             logger.trace(\"compiling lang: [{}] type: [{}] script: {}\", lang, type, idOrCode);\n         }\n \n-        return compiler.compile(context, scriptEngine, id, idOrCode, type, options);\n+        ScriptCache scriptCache = this.cache.get().contextCache.get(context.name);\n+        if (scriptCache == null) {\n+            throw new IllegalArgumentException(\"script context [\" + context.name + \"] has no script cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNjMyMw==", "bodyText": "Asserted.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391136323", "createdAt": "2020-03-11T17:22:06Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -304,7 +346,12 @@ void setMaxSizeInBytes(int newMaxSizeInBytes) {\n             logger.trace(\"compiling lang: [{}] type: [{}] script: {}\", lang, type, idOrCode);\n         }\n \n-        return compiler.compile(context, scriptEngine, id, idOrCode, type, options);\n+        ScriptCache scriptCache = this.cache.get().contextCache.get(context.name);\n+        if (scriptCache == null) {\n+            throw new IllegalArgumentException(\"script context [\" + context.name + \"] has no script cache\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMDkxMA=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTUyNDE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1NToyNFrOF0Vchw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMjoyOVrOF1BFZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMTYzOQ==", "bodyText": "Why aren't the general expire and size settings here as well?", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390421639", "createdAt": "2020-03-10T15:55:24Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +252,16 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE, cacheUpdater::setMaxCompilationRate);\n+        clusterSettings.addAffixUpdateConsumer(SCRIPT_CACHE_SIZE_SETTING,\n+                                               cacheUpdater::setScriptCacheSize,\n+                                               cacheUpdater::contextExists);\n+        clusterSettings.addAffixUpdateConsumer(SCRIPT_CACHE_EXPIRE_SETTING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzODMzMA==", "bodyText": "They were never dynamically updatable before, why add them for deprecated settings?", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391038330", "createdAt": "2020-03-11T15:04:33Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +252,16 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE, cacheUpdater::setMaxCompilationRate);\n+        clusterSettings.addAffixUpdateConsumer(SCRIPT_CACHE_SIZE_SETTING,\n+                                               cacheUpdater::setScriptCacheSize,\n+                                               cacheUpdater::contextExists);\n+        clusterSettings.addAffixUpdateConsumer(SCRIPT_CACHE_EXPIRE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMTYzOQ=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNjYxMg==", "bodyText": "From direct convo, not necessary to add.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391136612", "createdAt": "2020-03-11T17:22:29Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +252,16 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE, cacheUpdater::setMaxCompilationRate);\n+        clusterSettings.addAffixUpdateConsumer(SCRIPT_CACHE_SIZE_SETTING,\n+                                               cacheUpdater::setScriptCacheSize,\n+                                               cacheUpdater::contextExists);\n+        clusterSettings.addAffixUpdateConsumer(SCRIPT_CACHE_EXPIRE_SETTING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMTYzOQ=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDYyMTk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0Mzo0OFrOF0gRMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0MToyNlrOF1B44w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5ODk2Mw==", "bodyText": "This should have a fallback of the general expire setting.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390598963", "createdAt": "2020-03-10T20:43:48Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_max_size\",\n+            key -> Setting.intSetting(key, 100, 0, Property.NodeScope, Property.Dynamic));\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_expire\",\n+            key -> Setting.positiveTimeSetting(key, TimeValue.timeValueMillis(0), Property.NodeScope, Property.Dynamic));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0OTc5NQ==", "bodyText": "Added fallback.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391149795", "createdAt": "2020-03-11T17:41:26Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_max_size\",\n+            key -> Setting.intSetting(key, 100, 0, Property.NodeScope, Property.Dynamic));\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_expire\",\n+            key -> Setting.positiveTimeSetting(key, TimeValue.timeValueMillis(0), Property.NodeScope, Property.Dynamic));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5ODk2Mw=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDYyMzgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NDoxOFrOF0gSbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0MjowOFrOF1B6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5OTI3OQ==", "bodyText": "This should have a fallback of the general size setting.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390599279", "createdAt": "2020-03-10T20:44:18Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_max_size\",\n+            key -> Setting.intSetting(key, 100, 0, Property.NodeScope, Property.Dynamic));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MDI1Mg==", "bodyText": "Added fallback.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391150252", "createdAt": "2020-03-11T17:42:08Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -93,14 +102,45 @@\n                 }\n             };\n \n-    public static final Setting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+    public static final Setting<Integer> SCRIPT_GENERAL_CACHE_SIZE_SETTING =\n         Setting.intSetting(\"script.cache.max_size\", 100, 0, Property.NodeScope);\n-    public static final Setting<TimeValue> SCRIPT_CACHE_EXPIRE_SETTING =\n+    public static final Setting<TimeValue> SCRIPT_GENERAL_CACHE_EXPIRE_SETTING =\n         Setting.positiveTimeSetting(\"script.cache.expire\", TimeValue.timeValueMillis(0), Property.NodeScope);\n     public static final Setting<Integer> SCRIPT_MAX_SIZE_IN_BYTES =\n         Setting.intSetting(\"script.max_size_in_bytes\", 65535, 0, Property.Dynamic, Property.NodeScope);\n-    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_MAX_COMPILATIONS_RATE =\n-            new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION, Property.Dynamic, Property.NodeScope);\n+    public static final Setting<Tuple<Integer, TimeValue>> SCRIPT_GENERAL_MAX_COMPILATIONS_RATE =\n+        new Setting<>(\"script.max_compilations_rate\", \"75/5m\", MAX_COMPILATION_RATE_FUNCTION,\n+            Property.Dynamic, Property.NodeScope);\n+\n+    // Per-context settings\n+    static final String CONTEXT_PREFIX = \"script.context.\";\n+\n+    // script.context.<context-name>.{cache_max_size, cache_expire, max_compilations_rate}\n+\n+    // TODO(stu): set to sentinel value when we start using per-context defaults\n+    public static final Setting.AffixSetting<Integer> SCRIPT_CACHE_SIZE_SETTING =\n+        Setting.affixKeySetting(CONTEXT_PREFIX,\n+            \"cache_max_size\",\n+            key -> Setting.intSetting(key, 100, 0, Property.NodeScope, Property.Dynamic));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5OTI3OQ=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDYyODkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NTo1NVrOF0gVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo1MzowMVrOF2Sb0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDEyMA==", "bodyText": "Why are we testing for the setting existing? We should be using fallback settings and never need to look at this setting directly except when constructing the general cache.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390600120", "createdAt": "2020-03-10T20:45:55Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,260 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> SCRIPT_COMPILATION_RATE_ZERO = new Tuple<>(0, TimeValue.ZERO);\n+\n+        final boolean generalSizeSet;\n+        final Set<String> contextSizeSet;\n+        final Integer sizeDefault = SCRIPT_CACHE_SIZE_SETTING.getDefault(Settings.EMPTY);\n+\n+        final boolean generalExpireSet;\n+        final Set<String> contextExpireSet;\n+        final TimeValue expireDefault = SCRIPT_CACHE_EXPIRE_SETTING.getDefault(Settings.EMPTY);\n+\n+        private final CacheSettings generalSettings;\n+        private final Map<String, CacheSettings> contextSettings;\n+\n+        private AtomicReference<ScriptService.Cache> cacheRef;\n+\n+        CacheUpdater(\n+            Settings settings,\n+            Map<String, ScriptContext<?>> contexts,\n+            boolean compilationLimitsEnabled,\n+            AtomicReference<ScriptService.Cache> cacheRef\n+        ) {\n+            this.cacheRef = cacheRef;\n+\n+            generalSizeSet = SCRIPT_GENERAL_CACHE_SIZE_SETTING.exists(settings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2OTQ1Nw==", "bodyText": "Using fallback settings.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r392469457", "createdAt": "2020-03-13T20:53:01Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,260 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> SCRIPT_COMPILATION_RATE_ZERO = new Tuple<>(0, TimeValue.ZERO);\n+\n+        final boolean generalSizeSet;\n+        final Set<String> contextSizeSet;\n+        final Integer sizeDefault = SCRIPT_CACHE_SIZE_SETTING.getDefault(Settings.EMPTY);\n+\n+        final boolean generalExpireSet;\n+        final Set<String> contextExpireSet;\n+        final TimeValue expireDefault = SCRIPT_CACHE_EXPIRE_SETTING.getDefault(Settings.EMPTY);\n+\n+        private final CacheSettings generalSettings;\n+        private final Map<String, CacheSettings> contextSettings;\n+\n+        private AtomicReference<ScriptService.Cache> cacheRef;\n+\n+        CacheUpdater(\n+            Settings settings,\n+            Map<String, ScriptContext<?>> contexts,\n+            boolean compilationLimitsEnabled,\n+            AtomicReference<ScriptService.Cache> cacheRef\n+        ) {\n+            this.cacheRef = cacheRef;\n+\n+            generalSizeSet = SCRIPT_GENERAL_CACHE_SIZE_SETTING.exists(settings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDEyMA=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDYzNjM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0ODoyMVrOF0gakA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMjo0MVrOF1BF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMTM2MA==", "bodyText": "We have the contexts on the ScriptService, could we instead have this method there? Which contexts exist has little to do with how the caches are updated.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390601360", "createdAt": "2020-03-10T20:48:21Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,260 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> SCRIPT_COMPILATION_RATE_ZERO = new Tuple<>(0, TimeValue.ZERO);\n+\n+        final boolean generalSizeSet;\n+        final Set<String> contextSizeSet;\n+        final Integer sizeDefault = SCRIPT_CACHE_SIZE_SETTING.getDefault(Settings.EMPTY);\n+\n+        final boolean generalExpireSet;\n+        final Set<String> contextExpireSet;\n+        final TimeValue expireDefault = SCRIPT_CACHE_EXPIRE_SETTING.getDefault(Settings.EMPTY);\n+\n+        private final CacheSettings generalSettings;\n+        private final Map<String, CacheSettings> contextSettings;\n+\n+        private AtomicReference<ScriptService.Cache> cacheRef;\n+\n+        CacheUpdater(\n+            Settings settings,\n+            Map<String, ScriptContext<?>> contexts,\n+            boolean compilationLimitsEnabled,\n+            AtomicReference<ScriptService.Cache> cacheRef\n+        ) {\n+            this.cacheRef = cacheRef;\n+\n+            generalSizeSet = SCRIPT_GENERAL_CACHE_SIZE_SETTING.exists(settings);\n+            generalExpireSet = SCRIPT_GENERAL_CACHE_EXPIRE_SETTING.exists(settings);\n+\n+            generalSettings = new CacheSettings(\n+                SCRIPT_GENERAL_CACHE_SIZE_SETTING.get(settings),\n+                SCRIPT_GENERAL_CACHE_EXPIRE_SETTING.get(settings),\n+                compilationLimitsEnabled ? SCRIPT_GENERAL_MAX_COMPILATIONS_RATE.get(settings) : SCRIPT_COMPILATION_RATE_ZERO\n+            );\n+\n+            Map<String, Integer> cacheSize = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+            Map<String, TimeValue> cacheExpire = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+            Map<String, Tuple<Integer, TimeValue>> compileRate = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+            Map<String, CacheSettings> contextSettings = new HashMap<>(contexts.size());\n+\n+            for (String context: contexts.keySet()) {\n+                contextSettings.put(context,\n+                    new CacheSettings(\n+                        cacheSize.getOrDefault(context, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                        cacheExpire.getOrDefault(context, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n+                        compilationLimitsEnabled ?\n+                            compileRate.getOrDefault(context, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n+                            SCRIPT_COMPILATION_RATE_ZERO\n+                    )\n+                );\n+            }\n+\n+            this.contextSettings = Collections.unmodifiableMap(contextSettings);\n+            this.contextSizeSet = new HashSet<>(cacheSize.keySet());\n+            this.contextExpireSet = new HashSet<>(cacheExpire.keySet());\n+\n+            if (isContextCacheEnabled()) {\n+                buildContextCache();\n+            } else {\n+                buildGeneralCache();\n+            }\n+        }\n+\n+        boolean isContextCacheEnabled() {\n+            return generalSettings.compileRate.equals(USE_CONTEXT_RATE_VALUE);\n+        }\n+\n+        void contextExists(String context, Object o) {\n+            if (contextSettings.containsKey(context) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNjc2MQ==", "bodyText": "Moved.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r391136761", "createdAt": "2020-03-11T17:22:41Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,260 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> SCRIPT_COMPILATION_RATE_ZERO = new Tuple<>(0, TimeValue.ZERO);\n+\n+        final boolean generalSizeSet;\n+        final Set<String> contextSizeSet;\n+        final Integer sizeDefault = SCRIPT_CACHE_SIZE_SETTING.getDefault(Settings.EMPTY);\n+\n+        final boolean generalExpireSet;\n+        final Set<String> contextExpireSet;\n+        final TimeValue expireDefault = SCRIPT_CACHE_EXPIRE_SETTING.getDefault(Settings.EMPTY);\n+\n+        private final CacheSettings generalSettings;\n+        private final Map<String, CacheSettings> contextSettings;\n+\n+        private AtomicReference<ScriptService.Cache> cacheRef;\n+\n+        CacheUpdater(\n+            Settings settings,\n+            Map<String, ScriptContext<?>> contexts,\n+            boolean compilationLimitsEnabled,\n+            AtomicReference<ScriptService.Cache> cacheRef\n+        ) {\n+            this.cacheRef = cacheRef;\n+\n+            generalSizeSet = SCRIPT_GENERAL_CACHE_SIZE_SETTING.exists(settings);\n+            generalExpireSet = SCRIPT_GENERAL_CACHE_EXPIRE_SETTING.exists(settings);\n+\n+            generalSettings = new CacheSettings(\n+                SCRIPT_GENERAL_CACHE_SIZE_SETTING.get(settings),\n+                SCRIPT_GENERAL_CACHE_EXPIRE_SETTING.get(settings),\n+                compilationLimitsEnabled ? SCRIPT_GENERAL_MAX_COMPILATIONS_RATE.get(settings) : SCRIPT_COMPILATION_RATE_ZERO\n+            );\n+\n+            Map<String, Integer> cacheSize = SCRIPT_CACHE_SIZE_SETTING.getAsMap(settings);\n+            Map<String, TimeValue> cacheExpire = SCRIPT_CACHE_EXPIRE_SETTING.getAsMap(settings);\n+            Map<String, Tuple<Integer, TimeValue>> compileRate = SCRIPT_MAX_COMPILATIONS_RATE.getAsMap(settings);\n+\n+            Map<String, CacheSettings> contextSettings = new HashMap<>(contexts.size());\n+\n+            for (String context: contexts.keySet()) {\n+                contextSettings.put(context,\n+                    new CacheSettings(\n+                        cacheSize.getOrDefault(context, SCRIPT_CACHE_SIZE_SETTING.getDefault(settings)),\n+                        cacheExpire.getOrDefault(context, SCRIPT_CACHE_EXPIRE_SETTING.getDefault(settings)),\n+                        compilationLimitsEnabled ?\n+                            compileRate.getOrDefault(context, SCRIPT_MAX_COMPILATIONS_RATE.getDefault(settings)) :\n+                            SCRIPT_COMPILATION_RATE_ZERO\n+                    )\n+                );\n+            }\n+\n+            this.contextSettings = Collections.unmodifiableMap(contextSettings);\n+            this.contextSizeSet = new HashSet<>(cacheSize.keySet());\n+            this.contextExpireSet = new HashSet<>(cacheExpire.keySet());\n+\n+            if (isContextCacheEnabled()) {\n+                buildContextCache();\n+            } else {\n+                buildGeneralCache();\n+            }\n+        }\n+\n+        boolean isContextCacheEnabled() {\n+            return generalSettings.compileRate.equals(USE_CONTEXT_RATE_VALUE);\n+        }\n+\n+        void contextExists(String context, Object o) {\n+            if (contextSettings.containsKey(context) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMTM2MA=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDY1ODUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo1NTowMlrOF0gooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo1Mjo1MVrOF2SbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNDk2MQ==", "bodyText": "We shouldn't need to extract the default. Fallback settings exist so we can chain them together. We just do a get on the setting we care about (eg context expire setting), and if it doesn't exist, it will lookup the fallback (this general setting), and if that doesn't exist, it will use the default.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390604961", "createdAt": "2020-03-10T20:55:02Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,260 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> SCRIPT_COMPILATION_RATE_ZERO = new Tuple<>(0, TimeValue.ZERO);\n+\n+        final boolean generalSizeSet;\n+        final Set<String> contextSizeSet;\n+        final Integer sizeDefault = SCRIPT_CACHE_SIZE_SETTING.getDefault(Settings.EMPTY);\n+\n+        final boolean generalExpireSet;\n+        final Set<String> contextExpireSet;\n+        final TimeValue expireDefault = SCRIPT_CACHE_EXPIRE_SETTING.getDefault(Settings.EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2OTM1Mg==", "bodyText": "Using fallback settings, thanks for pointing it out.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r392469352", "createdAt": "2020-03-13T20:52:51Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -468,11 +515,260 @@ public ScriptLanguagesInfo getScriptLanguages() {\n     }\n \n     public ScriptStats stats() {\n-        return compiler.stats();\n+        return cache.get().stats();\n     }\n \n     @Override\n     public void applyClusterState(ClusterChangedEvent event) {\n         clusterState = event.state();\n     }\n+\n+    /**\n+     * CacheUpdater updates the script cache based on dynamic settings updates.  It keeps track of which context and general\n+     * settings are set to determine how to fall back on settings.\n+     *\n+     * If the context specific {size, expiration} are set then they are used.  Otherwise, if the general {size, expiration} are\n+     * set to the non-default, then we fall back to those.  Finally, if neither are set we use the context default.\n+     *\n+     * If the general compilation rate is set to the special value {@code ScriptService.USE_CONTEXT_RATE_KEY}, {@code \"use-context\"},\n+     * then context caches are used.  If the general compilation rate is set to a valid value, eg 50/1m, then the general\n+     * cache is used.\n+     */\n+    static class CacheUpdater {\n+        private final Object lock = new Object();\n+        private static final Tuple<Integer, TimeValue> SCRIPT_COMPILATION_RATE_ZERO = new Tuple<>(0, TimeValue.ZERO);\n+\n+        final boolean generalSizeSet;\n+        final Set<String> contextSizeSet;\n+        final Integer sizeDefault = SCRIPT_CACHE_SIZE_SETTING.getDefault(Settings.EMPTY);\n+\n+        final boolean generalExpireSet;\n+        final Set<String> contextExpireSet;\n+        final TimeValue expireDefault = SCRIPT_CACHE_EXPIRE_SETTING.getDefault(Settings.EMPTY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNDk2MQ=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDczMTYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMToxNTozNFrOF0hUig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo1MjozNFrOF2SarA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYxNjIwMg==", "bodyText": "One problem that seems to make this more complicated is having individual update consumers. There is an existing method we can use that takes a list of settings, and passes all the values when any are updated. I think using this pattern will make the code simpler (less locking and special cases). The pattern I'm imagining is something like an update consumer for the following scenarios:\n\ngeneral settings -> this changes the general cache, and handles flipping between general and per context\nper context + general settings -> the general settings along with concrete settings for each context. if the general cache is used, this would result in an error if any of the per context settings exist. otherwise the ScriptCache for that context would be looked up. All 3 setting values should then be passed into a single update method on ScriptCache, so it can be rebuilt once whether one or all 3 settings change (or the fallbacks for size/expire changed).", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r390616202", "createdAt": "2020-03-10T21:15:34Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +252,16 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE, cacheUpdater::setMaxCompilationRate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2OTE2NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/52855#discussion_r392469164", "createdAt": "2020-03-13T20:52:34Z", "author": {"login": "stu-elastic"}, "path": "server/src/main/java/org/elasticsearch/script/ScriptService.java", "diffHunk": "@@ -219,7 +252,16 @@ boolean compilationLimitsEnabled() {\n \n     void registerClusterSettingsListeners(ClusterSettings clusterSettings) {\n         clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);\n-        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_RATE, compiler::setMaxCompilationRate);\n+        clusterSettings.addSettingsUpdateConsumer(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE, cacheUpdater::setMaxCompilationRate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYxNjIwMg=="}, "originalCommit": {"oid": "893f18732d8d3d12329c144afdb29640132ccd0d"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3668, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}