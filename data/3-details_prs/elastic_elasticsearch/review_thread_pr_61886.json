{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjY2NDA0", "number": 61886, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMTo1MVrOEgJLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozOToyNVrOEgJfkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQwMjE2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMTo1MVrOHM2NrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMTo1MVrOHM2NrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzMzE5Nw==", "bodyText": "Building on what Jake has been doing, I think we should make this project.testClusters.all { }, such that regardless of what kind of test plugin is applied (yaml rest, java rest, etc) we auto wire this up for folks, rather than relying on the loose convention of integTest.\nAdditionally, I think he has some stuff in flight that removes this task entirely and makes all this stuff explicit.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483233197", "createdAt": "2020-09-03T20:21:51Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy", "diffHunk": "@@ -79,10 +75,7 @@ class PluginBuildPlugin implements Plugin<Project> {\n             project.extensions.getByType(PluginPropertiesExtension).extendedPlugins.each { pluginName ->\n                 // Auto add dependent modules to the test cluster\n                 if (project.findProject(\":modules:${pluginName}\") != null) {\n-                    project.integTest.dependsOn(project.project(\":modules:${pluginName}\").tasks.bundlePlugin)\n-                    project.testClusters.integTest.module(\n-                            project.project(\":modules:${pluginName}\").tasks.bundlePlugin.archiveFile\n-                    )\n+                    project.testClusters.integTest.module(\":modules:${pluginName}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQxNjMwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersAware.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNjoxOFrOHM2WOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNjoxOFrOHM2WOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNTM4Ng==", "bodyText": "I'm wondering if we should wrap node.getPluginAndModuleConfigurations() in a Callable to limit any odd configuration ordering stuff. That would allow folks to define a plugin/module dependency after creating the test task and everything would still wire up properly.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483235386", "createdAt": "2020-09-03T20:26:18Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersAware.java", "diffHunk": "@@ -34,6 +34,7 @@ default void useCluster(ElasticsearchCluster cluster) {\n         }\n \n         cluster.getNodes().stream().flatMap(node -> node.getDistributions().stream()).forEach(distro -> dependsOn(distro.getExtracted()));\n+        cluster.getNodes().forEach(node -> dependsOn(node.getPluginAndModuleConfigurations()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQyNDYwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyOTowMlrOHM2bbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoxOTozMlrOHM5Txg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjcxNw==", "bodyText": "Should we use something more unique here? Any chance of collisions by just using the project name?", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483236717", "createdAt": "2020-09-03T20:29:02Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzODE1MA==", "bodyText": "Perhaps this is a good use case for using a detached configuration for a few reasons:\n\nWe don't want folks to fiddle with this configuration in any way\nWe dont' want it accidentally attempted to resolve externally, such as via resolveAllDependencies task\nThe only thing that needs a reference to it is this ElasticsearchNode itself, so there's no benefit to it being accessible via the projects DependencyHandler\nWe avoid the name conflict issue I mention above.\n\nIf the concern is the same dependency being added twice we could track the list of project paths added as a separate Set.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483238150", "createdAt": "2020-09-03T20:32:06Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjcxNw=="}, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4MzkxMA==", "bodyText": "The detached configuration actually makes this a lot cleaner. Done.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483283910", "createdAt": "2020-09-03T22:19:32Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjcxNw=="}, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQ0NDQ0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozNTo1NlrOHM2n4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo0NDoyM1rOHM64VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzOTkwNQ==", "bodyText": "I don't think this extra wrapping step is necessary. The result of findFirst() should return a RegularFile although we'd have to cast it as such. If what we get isn't a RegularFIle we should error, as that indicates something went wrong.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483239905", "createdAt": "2020-09-03T20:35:56Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());\n+        if (configuration == null) {\n+            configuration = project.getConfigurations().create(depProject.getName());\n+            DependencyHandler deps = project.getDependencies();\n+            deps.add(depProject.getName(), deps.project(Map.of(\"path\", path, \"configuration\", \"zip\")));\n         }\n-        this.plugins.add(plugin);\n+        pluginAndModuleConfigurations.add(configuration);\n+        Provider<File> fileProvider = configuration.getElements().map(s -> s.stream().findFirst().get().getAsFile());\n+        return project.getLayout().file(fileProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NDc5Ng==", "bodyText": "The collection is of File, not RegularFile. The map method lambda gets a Set, and since Set in java has no way to get the \"first\", we must stream it and grab the first.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483284796", "createdAt": "2020-09-03T22:22:00Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());\n+        if (configuration == null) {\n+            configuration = project.getConfigurations().create(depProject.getName());\n+            DependencyHandler deps = project.getDependencies();\n+            deps.add(depProject.getName(), deps.project(Map.of(\"path\", path, \"configuration\", \"zip\")));\n         }\n-        this.plugins.add(plugin);\n+        pluginAndModuleConfigurations.add(configuration);\n+        Provider<File> fileProvider = configuration.getElements().map(s -> s.stream().findFirst().get().getAsFile());\n+        return project.getLayout().file(fileProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzOTkwNQ=="}, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTY1Mg==", "bodyText": "It's actually a Set of FileSystemLocation, which you them map to a File via getAsFile(). You then have to wrap the File again to get a RegularFile back. What I'm saying is that the FileSystemLocation implementation type actually is RegularFile already, you just have to cast it, rather than to to a File then back to a RegularFile.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483309652", "createdAt": "2020-09-03T23:44:23Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());\n+        if (configuration == null) {\n+            configuration = project.getConfigurations().create(depProject.getName());\n+            DependencyHandler deps = project.getDependencies();\n+            deps.add(depProject.getName(), deps.project(Map.of(\"path\", path, \"configuration\", \"zip\")));\n         }\n-        this.plugins.add(plugin);\n+        pluginAndModuleConfigurations.add(configuration);\n+        Provider<File> fileProvider = configuration.getElements().map(s -> s.stream().findFirst().get().getAsFile());\n+        return project.getLayout().file(fileProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzOTkwNQ=="}, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQ0ODQ5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozNzoyMVrOHM2qVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozNzoyMVrOHM2qVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0MDUzNQ==", "bodyText": "Let's use orElseThrow() instead of get() and throw an exception with a useful message rather than the default NoSuchElementException that would result here if something went wrong.", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483240535", "createdAt": "2020-09-03T20:37:21Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -262,45 +262,47 @@ private void setDistributionType(ElasticsearchDistribution distribution, TestDis\n         }\n     }\n \n-    @Override\n-    public void plugin(RegularFileProperty plugin) {\n-        this.plugins.add(plugin.map(p -> p.getAsFile().toURI()));\n+    // package protected so only TestClustersAware can access\n+    @Internal\n+    List<Configuration> getPluginAndModuleConfigurations() {\n+        return pluginAndModuleConfigurations;\n     }\n \n-    @Override\n-    public void plugin(Provider<URI> plugin) {\n-        requireNonNull(plugin, \"Plugin name can't be null\");\n-        checkFrozen();\n-        if (plugins.contains(plugin)) {\n-            throw new TestClustersException(\"Plugin already configured for installation \" + plugin);\n+    // creates a configuration to depend on the given plugin project, then wraps that configuration\n+    // to grab the zip as a file provider\n+    private Provider<RegularFile> maybeCreatePluginOrModuleDependency(String path) {\n+        Project depProject = project.project(path);\n+        Configuration configuration = project.getConfigurations().findByName(depProject.getName());\n+        if (configuration == null) {\n+            configuration = project.getConfigurations().create(depProject.getName());\n+            DependencyHandler deps = project.getDependencies();\n+            deps.add(depProject.getName(), deps.project(Map.of(\"path\", path, \"configuration\", \"zip\")));\n         }\n-        this.plugins.add(plugin);\n+        pluginAndModuleConfigurations.add(configuration);\n+        Provider<File> fileProvider = configuration.getElements().map(s -> s.stream().findFirst().get().getAsFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTQ1NDI3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozOToyNVrOHM2t7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozOToyNVrOHM2t7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0MTQ1Mw==", "bodyText": "I think this can be completely removed as we no longer allow installing remote plugins via URI. These files will otherwise be tracked via getInstalledFiles().", "url": "https://github.com/elastic/elasticsearch/pull/61886#discussion_r483241453", "createdAt": "2020-09-03T20:39:25Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1256,12 +1255,8 @@ private Path getExtractedDistributionDir() {\n     }\n \n     @Input\n-    public Set<URI> getRemotePlugins() {\n-        Set<URI> file = plugins.stream()\n-            .map(Provider::get)\n-            .filter(uri -> uri.getScheme().equalsIgnoreCase(\"file\") == false)\n-            .collect(Collectors.toSet());\n-        return file;\n+    public Set<File> getRemotePlugins() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d8fa7ddd795e2077e897bf93597c002c07f60b"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1862, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}