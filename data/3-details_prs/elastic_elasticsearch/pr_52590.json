{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTM5MDU1", "number": 52590, "title": "ValuesSource refactoring: Wire up SigTerms aggregation", "bodyText": "Pretty similar to Terms agg, albeit simpler because SigTerms has fewer options.\nI opted to not try and refactor the \"singleton factory\" functionality, it proved more complicated than I wanted to deal with in this PR.  Just left a TODO so we can work on it unrelated to VS stuff in the future.", "createdAt": "2020-02-20T19:42:26Z", "url": "https://github.com/elastic/elasticsearch/pull/52590", "merged": true, "mergeCommit": {"oid": "9df4ee6d2616c39655d5ad6beb4100a9a105a9ed"}, "closed": true, "closedAt": "2020-02-25T16:42:10Z", "author": {"login": "polyfractal"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGQbp_gH2gAyMzc3OTM5MDU1OjM0YmJmNTE4MTVjODU5MDJmMWIwNzJhMTc2YmUxMmVhMjU0ZjE3NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIFU23gFqTM2NDgzNTIzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "34bbf51815c85902f1b072a176be12ea254f1775", "author": {"user": {"login": "polyfractal", "name": "Zachary Tong"}}, "url": "https://github.com/elastic/elasticsearch/commit/34bbf51815c85902f1b072a176be12ea254f1775", "committedDate": "2020-02-20T19:38:19Z", "message": "ValuesSource refactoring: Wire up SigTerms aggregation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161ba7c92a5a2e0161d6eaac0b870b6d4cd64186", "author": {"user": {"login": "polyfractal", "name": "Zachary Tong"}}, "url": "https://github.com/elastic/elasticsearch/commit/161ba7c92a5a2e0161d6eaac0b870b6d4cd64186", "committedDate": "2020-02-20T20:30:34Z", "message": "Fix yaml test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzcyNDkx", "url": "https://github.com/elastic/elasticsearch/pull/52590#pullrequestreview-362372491", "createdAt": "2020-02-21T02:56:15Z", "commit": {"oid": "161ba7c92a5a2e0161d6eaac0b870b6d4cd64186"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjo1NjoxNVrOFsqNEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjo1NjoxNVrOFsqNEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3MzEzOQ==", "bodyText": "Just noticed I forgot to change this, should be IllegalArgException, will fix in the morning :)", "url": "https://github.com/elastic/elasticsearch/pull/52590#discussion_r382373139", "createdAt": "2020-02-21T02:56:15Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java", "diffHunk": "@@ -75,17 +78,116 @@\n     private final TermsAggregator.BucketCountThresholds bucketCountThresholds;\n     private final SignificanceHeuristic significanceHeuristic;\n \n-    public SignificantTermsAggregatorFactory(String name,\n-                                             ValuesSourceConfig config,\n-                                             IncludeExclude includeExclude,\n-                                             String executionHint,\n-                                             QueryBuilder filterBuilder,\n-                                             TermsAggregator.BucketCountThresholds bucketCountThresholds,\n-                                             SignificanceHeuristic significanceHeuristic,\n-                                             QueryShardContext queryShardContext,\n-                                             AggregatorFactory parent,\n-                                             AggregatorFactories.Builder subFactoriesBuilder,\n-                                             Map<String, Object> metaData) throws IOException {\n+    static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(SignificantTermsAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.BYTES, CoreValuesSourceType.IP),\n+            SignificantTermsAggregatorFactory.bytesSupplier());\n+\n+        valuesSourceRegistry.register(SignificantTermsAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.DATE, CoreValuesSourceType.BOOLEAN, CoreValuesSourceType.NUMERIC),\n+            SignificantTermsAggregatorFactory.numericSupplier());\n+    }\n+\n+    /**\n+     * This supplier is used for all the field types that should be aggregated as bytes/strings,\n+     * including those that need global ordinals\n+     */\n+    private static SignificantTermsAggregatorSupplier bytesSupplier() {\n+        return new SignificantTermsAggregatorSupplier() {\n+            @Override\n+            public Aggregator build(String name,\n+                                    AggregatorFactories factories,\n+                                    ValuesSource valuesSource,\n+                                    DocValueFormat format,\n+                                    TermsAggregator.BucketCountThresholds bucketCountThresholds,\n+                                    IncludeExclude includeExclude,\n+                                    String executionHint,\n+                                    SearchContext context,\n+                                    Aggregator parent,\n+                                    SignificanceHeuristic significanceHeuristic,\n+                                    SignificantTermsAggregatorFactory sigTermsFactory,\n+                                    List<PipelineAggregator> pipelineAggregators,\n+                                    Map<String, Object> metaData) throws IOException {\n+\n+                ExecutionMode execution = null;\n+                if (executionHint != null) {\n+                    execution = ExecutionMode.fromString(executionHint, deprecationLogger);\n+                }\n+                if (valuesSource instanceof ValuesSource.Bytes.WithOrdinals == false) {\n+                    execution = ExecutionMode.MAP;\n+                }\n+                if (execution == null) {\n+                    execution = ExecutionMode.GLOBAL_ORDINALS;\n+                }\n+\n+                if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {\n+                    throw new IllegalArgumentException(\"Aggregation [\" + name + \"] cannot support regular expression style \"\n+                        + \"include/exclude settings as they can only be applied to string fields. Use an array of values for \"\n+                        + \"include/exclude clauses\");\n+                }\n+\n+                return execution.create(name, factories, valuesSource, format, bucketCountThresholds, includeExclude, context, parent,\n+                    significanceHeuristic, sigTermsFactory, pipelineAggregators, metaData);\n+\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This supplier is used for all fields that expect to be aggregated as a numeric value.\n+     * This includes floating points, and formatted types that use numerics internally for storage (date, boolean, etc)\n+     */\n+    private static SignificantTermsAggregatorSupplier numericSupplier() {\n+        return new SignificantTermsAggregatorSupplier() {\n+            @Override\n+            public Aggregator build(String name,\n+                                    AggregatorFactories factories,\n+                                    ValuesSource valuesSource,\n+                                    DocValueFormat format,\n+                                    TermsAggregator.BucketCountThresholds bucketCountThresholds,\n+                                    IncludeExclude includeExclude,\n+                                    String executionHint,\n+                                    SearchContext context,\n+                                    Aggregator parent,\n+                                    SignificanceHeuristic significanceHeuristic,\n+                                    SignificantTermsAggregatorFactory sigTermsFactory,\n+                                    List<PipelineAggregator> pipelineAggregators,\n+                                    Map<String, Object> metaData) throws IOException {\n+\n+                if ((includeExclude != null) && (includeExclude.isRegexBased())) {\n+                    throw new AggregationExecutionException(\"Aggregation [\" + name + \"] cannot support regular expression style include/exclude \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161ba7c92a5a2e0161d6eaac0b870b6d4cd64186"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf37c60f39c6932500151180a06126fe6969f6ca", "author": {"user": {"login": "polyfractal", "name": "Zachary Tong"}}, "url": "https://github.com/elastic/elasticsearch/commit/cf37c60f39c6932500151180a06126fe6969f6ca", "committedDate": "2020-02-24T16:23:13Z", "message": "Tweak exception type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3174f19d52867e46477751c1c0982b0320ce80c5", "author": {"user": {"login": "polyfractal", "name": "Zachary Tong"}}, "url": "https://github.com/elastic/elasticsearch/commit/3174f19d52867e46477751c1c0982b0320ce80c5", "committedDate": "2020-02-24T16:52:01Z", "message": "Merge branch 'feature/extensible-values-source' into vs_sigterms"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTc5MTA3", "url": "https://github.com/elastic/elasticsearch/pull/52590#pullrequestreview-363579107", "createdAt": "2020-02-24T17:46:41Z", "commit": {"oid": "3174f19d52867e46477751c1c0982b0320ce80c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e74e6bf5e9fa5e8267c549b645430dc3c329fb6", "author": {"user": {"login": "polyfractal", "name": "Zachary Tong"}}, "url": "https://github.com/elastic/elasticsearch/commit/6e74e6bf5e9fa5e8267c549b645430dc3c329fb6", "committedDate": "2020-02-24T21:26:53Z", "message": "Checkstyle because I'm bad"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODM1MjMy", "url": "https://github.com/elastic/elasticsearch/pull/52590#pullrequestreview-364835232", "createdAt": "2020-02-26T11:49:47Z", "commit": {"oid": "6e74e6bf5e9fa5e8267c549b645430dc3c329fb6"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2249, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}