{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODA1ODY2", "number": 61507, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NzowNlrOEb99fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowMzoyOFrOEb-a7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYyMTc0OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NzowNlrOHGOBSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NzowNlrOHGOBSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4MzIwOA==", "bodyText": "A useful byproduct of this exercise is finding all the mappers that we've forgotten to implement meta on!", "url": "https://github.com/elastic/elasticsearch/pull/61507#discussion_r476283208", "createdAt": "2020-08-25T08:47:06Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/RankFeaturesFieldMapperTests.java", "diffHunk": "@@ -22,59 +22,43 @@\n import org.apache.lucene.document.FeatureField;\n import org.apache.lucene.index.IndexableField;\n import org.elasticsearch.common.Strings;\n-import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.compress.CompressedXContent;\n-import org.elasticsearch.common.xcontent.XContentFactory;\n-import org.elasticsearch.common.xcontent.XContentType;\n-import org.elasticsearch.index.IndexService;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.plugins.Plugin;\n import org.hamcrest.Matchers;\n-import org.junit.Before;\n \n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.List;\n import java.util.Set;\n \n-public class RankFeaturesFieldMapperTests extends FieldMapperTestCase<RankFeaturesFieldMapper.Builder> {\n+public class RankFeaturesFieldMapperTests extends FieldMapperTestCase2<RankFeaturesFieldMapper.Builder> {\n \n     @Override\n     protected Set<String> unsupportedProperties() {\n         return Set.of(\"analyzer\", \"similarity\", \"store\", \"doc_values\", \"index\");\n     }\n \n-    IndexService indexService;\n-    DocumentMapperParser parser;\n+    @Override\n+    protected Collection<? extends Plugin> getPlugins() {\n+        return List.of(new MapperExtrasPlugin());\n+    }\n \n-    @Before\n-    public void setup() {\n-        indexService = createIndex(\"test\");\n-        parser = indexService.mapperService().documentMapperParser();\n+    @Override\n+    protected void minimalMapping(XContentBuilder b) throws IOException {\n+        b.field(\"type\", \"rank_features\");\n     }\n \n     @Override\n-    protected Collection<Class<? extends Plugin>> getPlugins() {\n-        return pluginList(MapperExtrasPlugin.class);\n+    protected boolean supportsMeta() {\n+        return false;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e26a86d69fd7598a4b3c057f42e67e52eccfd361"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYzMDIxOnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0OToxMVrOHGOGiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjozMDoxNVrOHGVxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDU1NQ==", "bodyText": "This comment looks truncated?", "url": "https://github.com/elastic/elasticsearch/pull/61507#discussion_r476284555", "createdAt": "2020-08-25T08:49:11Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java", "diffHunk": "@@ -115,371 +110,218 @@ public void addModifiers() {\n             .searchQuoteAnalyzer(new NamedAnalyzer(\"standard\", AnalyzerScope.INDEX, new StandardAnalyzer()));\n     }\n \n+    @Override\n+    protected IndexAnalyzers createIndexAnalyzers(IndexSettings indexSettings) {\n+        NamedAnalyzer dflt = new NamedAnalyzer(\n+            \"default\",\n+            AnalyzerScope.INDEX,\n+            new StandardAnalyzer(),\n+            TextFieldMapper.Defaults.POSITION_INCREMENT_GAP\n+        );\n+        NamedAnalyzer standard = new NamedAnalyzer(\"standard\", AnalyzerScope.INDEX, new StandardAnalyzer());\n+        NamedAnalyzer keyword = new NamedAnalyzer(\"keyword\", AnalyzerScope.INDEX, new KeywordAnalyzer());\n+        NamedAnalyzer simple = new NamedAnalyzer(\"simple\", AnalyzerScope.INDEX, new SimpleAnalyzer());\n+        NamedAnalyzer whitespace = new NamedAnalyzer(\"whitespace\", AnalyzerScope.INDEX, new WhitespaceAnalyzer());\n+        return new IndexAnalyzers(\n+            Map.of(\"default\", dflt, \"standard\", standard, \"keyword\", keyword, \"simple\", simple, \"whitespace\", whitespace),\n+            Map.of(),\n+            Map.of()\n+        );\n+    }\n+\n+    @Override\n+    protected void minimalMapping(XContentBuilder b) throws IOException {\n+        b.field(\"type\", \"search_as_you_type\");\n+    }\n+\n+    @Override\n+    protected void metaMapping(XContentBuilder b) throws IOException {\n+        // We serialize extra fields on top of the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e26a86d69fd7598a4b3c057f42e67e52eccfd361"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxMDI5OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/61507#discussion_r476410299", "createdAt": "2020-08-25T12:30:15Z", "author": {"login": "nik9000"}, "path": "modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java", "diffHunk": "@@ -115,371 +110,218 @@ public void addModifiers() {\n             .searchQuoteAnalyzer(new NamedAnalyzer(\"standard\", AnalyzerScope.INDEX, new StandardAnalyzer()));\n     }\n \n+    @Override\n+    protected IndexAnalyzers createIndexAnalyzers(IndexSettings indexSettings) {\n+        NamedAnalyzer dflt = new NamedAnalyzer(\n+            \"default\",\n+            AnalyzerScope.INDEX,\n+            new StandardAnalyzer(),\n+            TextFieldMapper.Defaults.POSITION_INCREMENT_GAP\n+        );\n+        NamedAnalyzer standard = new NamedAnalyzer(\"standard\", AnalyzerScope.INDEX, new StandardAnalyzer());\n+        NamedAnalyzer keyword = new NamedAnalyzer(\"keyword\", AnalyzerScope.INDEX, new KeywordAnalyzer());\n+        NamedAnalyzer simple = new NamedAnalyzer(\"simple\", AnalyzerScope.INDEX, new SimpleAnalyzer());\n+        NamedAnalyzer whitespace = new NamedAnalyzer(\"whitespace\", AnalyzerScope.INDEX, new WhitespaceAnalyzer());\n+        return new IndexAnalyzers(\n+            Map.of(\"default\", dflt, \"standard\", standard, \"keyword\", keyword, \"simple\", simple, \"whitespace\", whitespace),\n+            Map.of(),\n+            Map.of()\n+        );\n+    }\n+\n+    @Override\n+    protected void minimalMapping(XContentBuilder b) throws IOException {\n+        b.field(\"type\", \"search_as_you_type\");\n+    }\n+\n+    @Override\n+    protected void metaMapping(XContentBuilder b) throws IOException {\n+        // We serialize extra fields on top of the ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDU1NQ=="}, "originalCommit": {"oid": "e26a86d69fd7598a4b3c057f42e67e52eccfd361"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYzNDU0OnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1MDoxM1rOHGOJOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1MDoxM1rOHGOJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NTI0Mg==", "bodyText": "\u2764\ufe0f so much nicer", "url": "https://github.com/elastic/elasticsearch/pull/61507#discussion_r476285242", "createdAt": "2020-08-25T08:50:13Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java", "diffHunk": "@@ -115,371 +110,218 @@ public void addModifiers() {\n             .searchQuoteAnalyzer(new NamedAnalyzer(\"standard\", AnalyzerScope.INDEX, new StandardAnalyzer()));\n     }\n \n+    @Override\n+    protected IndexAnalyzers createIndexAnalyzers(IndexSettings indexSettings) {\n+        NamedAnalyzer dflt = new NamedAnalyzer(\n+            \"default\",\n+            AnalyzerScope.INDEX,\n+            new StandardAnalyzer(),\n+            TextFieldMapper.Defaults.POSITION_INCREMENT_GAP\n+        );\n+        NamedAnalyzer standard = new NamedAnalyzer(\"standard\", AnalyzerScope.INDEX, new StandardAnalyzer());\n+        NamedAnalyzer keyword = new NamedAnalyzer(\"keyword\", AnalyzerScope.INDEX, new KeywordAnalyzer());\n+        NamedAnalyzer simple = new NamedAnalyzer(\"simple\", AnalyzerScope.INDEX, new SimpleAnalyzer());\n+        NamedAnalyzer whitespace = new NamedAnalyzer(\"whitespace\", AnalyzerScope.INDEX, new WhitespaceAnalyzer());\n+        return new IndexAnalyzers(\n+            Map.of(\"default\", dflt, \"standard\", standard, \"keyword\", keyword, \"simple\", simple, \"whitespace\", whitespace),\n+            Map.of(),\n+            Map.of()\n+        );\n+    }\n+\n+    @Override\n+    protected void minimalMapping(XContentBuilder b) throws IOException {\n+        b.field(\"type\", \"search_as_you_type\");\n+    }\n+\n+    @Override\n+    protected void metaMapping(XContentBuilder b) throws IOException {\n+        // We serialize extra fields on top of the \n+        b.field(\"type\", \"search_as_you_type\").field(\"max_shingle_size\", 3).field(\"doc_values\", false);\n+    }\n+\n     public void testIndexing() throws IOException {\n-        final String mapping = Strings.toString(XContentFactory.jsonBuilder()\n-            .startObject()\n-            .startObject(\"_doc\")\n-                .startObject(\"properties\")\n-                    .startObject(\"a_field\")\n-                        .field(\"type\", \"search_as_you_type\")\n-                    .endObject()\n-                .endObject()\n-            .endObject()\n-            .endObject());\n-\n-        final DocumentMapper mapper = createIndex(\"test\")\n-            .mapperService()\n-            .documentMapperParser()\n-            .parse(\"_doc\", new CompressedXContent(mapping));\n-        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n-            .bytes(XContentFactory.jsonBuilder()\n-                .startObject()\n-                .field(\"a_field\", \"new york city\")\n-                .endObject()),\n-            XContentType.JSON));\n-\n-        for (String field : new String[] { \"a_field\", \"a_field._index_prefix\", \"a_field._2gram\", \"a_field._3gram\"}) {\n+        DocumentMapper mapper = createDocumentMapper(fieldMapping(this::minimalMapping));\n+        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"new york city\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e26a86d69fd7598a4b3c057f42e67e52eccfd361"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzY3MzE5OnYy", "diffSide": "LEFT", "path": "plugins/mapper-murmur3/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1OTozMVrOHGOhFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1OTozMVrOHGOhFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5MTM0OQ==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/elastic/elasticsearch/pull/61507#discussion_r476291349", "createdAt": "2020-08-25T08:59:31Z", "author": {"login": "romseygeek"}, "path": "plugins/mapper-murmur3/build.gradle", "diffHunk": "@@ -17,7 +17,6 @@\n  * under the License.\n  */\n apply plugin: 'elasticsearch.yaml-rest-test'\n-apply plugin: 'elasticsearch.internal-cluster-test'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e26a86d69fd7598a4b3c057f42e67e52eccfd361"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzY5NzExOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowMzoyOFrOHGOvDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowMzoyOFrOHGOvDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5NDkyNg==", "bodyText": "This is a pain, and the really annoying thing is that it's hard to fix these inconsistencies because of BWC.  I need to think some more about it.", "url": "https://github.com/elastic/elasticsearch/pull/61507#discussion_r476294926", "createdAt": "2020-08-25T09:03:28Z", "author": {"login": "romseygeek"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperTestCase.java", "diffHunk": "@@ -205,35 +222,39 @@ protected boolean supportsMeta() {\n         return true;\n     }\n \n+    protected void metaMapping(XContentBuilder b) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e26a86d69fd7598a4b3c057f42e67e52eccfd361"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 820, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}