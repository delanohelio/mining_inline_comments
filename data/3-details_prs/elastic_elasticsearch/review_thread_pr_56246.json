{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzUyMzAy", "number": 56246, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToxNDozOVrOD5lN4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoxMDo1NlrOD8OFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA1MTg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToxNDozOVrOGQ70mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDozODowNlrOGRkfhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMDUyMQ==", "bodyText": "I believe this exists and would be more succinct.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Expression address : addresses) {\n          \n          \n            \n                        if (address.foldable() == false) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return Expressions.foldable(addresses);\n          \n      \n    \n    \n  \n\nI think we could also do Expressions.foldable(children()) in more places.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420410521", "createdAt": "2020-05-05T21:14:39Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDcxOQ==", "bodyText": "Thanks! Didn't notice this one. Will update.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420444719", "createdAt": "2020-05-05T22:29:49Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMDUyMQ=="}, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3Njg3MA==", "bodyText": "Addressed", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421076870", "createdAt": "2020-05-06T20:38:06Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMDUyMQ=="}, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA1NjcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToxNjoxM1rOGQ73pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDozODozNVrOGRkgig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTMwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object o = field.fold();\n          \n          \n            \n                    ArrayList<Object> arr = new ArrayList<>(addresses.size());\n          \n          \n            \n                    for (Expression address : addresses) {\n          \n          \n            \n                        final Equals eq = new Equals(source(), field, address);\n          \n          \n            \n                        func = (func == null) ? eq : new Or(source(), func, eq);\n          \n          \n            \n                        arr.add(address.fold());\n          \n          \n            \n                    }\n          \n          \n            \n                    return doProcess(o, arr);\n          \n          \n            \n                    return doProcess(field.fold(), Expressions.fold(addresses));", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420411301", "createdAt": "2020-05-05T21:16:13Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n \n+    @Override\n+    public Object fold() {\n+        Object o = field.fold();\n+        ArrayList<Object> arr = new ArrayList<>(addresses.size());\n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n-            func = (func == null) ? eq : new Or(source(), func, eq);\n+            arr.add(address.fold());\n+        }\n+        return doProcess(o, arr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NzEzMA==", "bodyText": "Updated", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421077130", "createdAt": "2020-05-06T20:38:35Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n \n+    @Override\n+    public Object fold() {\n+        Object o = field.fold();\n+        ArrayList<Object> arr = new ArrayList<>(addresses.size());\n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n-            func = (func == null) ? eq : new Or(source(), func, eq);\n+            arr.add(address.fold());\n+        }\n+        return doProcess(o, arr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTMwMQ=="}, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA2MTMyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToxNzozMFrOGQ76Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDozNzozN1rOGRkeew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTk3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Object> values = new ArrayList<>(new LinkedHashSet<>(foldListOfValues(addresses, field.dataType())));\n          \n          \n            \n                    List<Object> values = Expressions.fold(addresses)", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420411974", "createdAt": "2020-05-05T21:17:30Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n \n+    @Override\n+    public Object fold() {\n+        Object o = field.fold();\n+        ArrayList<Object> arr = new ArrayList<>(addresses.size());\n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n-            func = (func == null) ? eq : new Or(source(), func, eq);\n+            arr.add(address.fold());\n+        }\n+        return doProcess(o, arr);\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, CIDRMatch::new, field, addresses);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate leftScript = asScript(field);\n+\n+        List<Object> values = new ArrayList<>(new LinkedHashSet<>(foldListOfValues(addresses, field.dataType())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NjYwMw==", "bodyText": "this will not eliminate duplicated values as far as I see", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421076603", "createdAt": "2020-05-06T20:37:37Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n \n+    @Override\n+    public Object fold() {\n+        Object o = field.fold();\n+        ArrayList<Object> arr = new ArrayList<>(addresses.size());\n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n-            func = (func == null) ? eq : new Or(source(), func, eq);\n+            arr.add(address.fold());\n+        }\n+        return doProcess(o, arr);\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, CIDRMatch::new, field, addresses);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate leftScript = asScript(field);\n+\n+        List<Object> values = new ArrayList<>(new LinkedHashSet<>(foldListOfValues(addresses, field.dataType())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTk3NA=="}, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA3NTQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToyMjoxMlrOGQ8Daw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjozNDozOFrOGQ-B5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNDMxNQ==", "bodyText": "Should we add an optimizer rule to handle this so that we don't lose the more performant term query?", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420414315", "createdAt": "2020-05-05T21:22:12Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -156,22 +156,29 @@ InternalEqlScriptUtils.concat([InternalQlScriptUtils.docValue(doc,params.v0),par\n cidrMatchFunctionOne\n process where cidrMatch(source_address, \"10.0.0.0/8\")\n ;\n-\"term\":{\"source_address\":{\"value\":\"10.0.0.0/8\"\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalEqlScriptUtils.cidrMatch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NjY5NQ==", "bodyText": "Will probably have to do another pass for that after @astefan merges his PR that also will affect the query planning optimization for simple equals. Can adjust this PR if that change merges sooner, sometimes this week.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420446695", "createdAt": "2020-05-05T22:34:38Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -156,22 +156,29 @@ InternalEqlScriptUtils.concat([InternalQlScriptUtils.docValue(doc,params.v0),par\n cidrMatchFunctionOne\n process where cidrMatch(source_address, \"10.0.0.0/8\")\n ;\n-\"term\":{\"source_address\":{\"value\":\"10.0.0.0/8\"\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalEqlScriptUtils.cidrMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNDMxNQ=="}, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA3Nzc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToyMjo1OFrOGQ8Eyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDozODoyMlrOGRkgGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNDY2Nw==", "bodyText": "I believe this exists and would be more succinct.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Expression address : addresses) {\n          \n          \n            \n                        if (address.foldable() == false) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return Expressions.foldable(addresses);\n          \n      \n    \n    \n  \n\nI think we could also do Expressions.foldable(children()) in more places.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420414667", "createdAt": "2020-05-05T21:22:58Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NzAxOA==", "bodyText": "Updated", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421077018", "createdAt": "2020-05-06T20:38:22Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNDY2Nw=="}, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA4NzQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToyNjowM1rOGQ8Kwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoyOToxM1rOGQ95BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjE5NA==", "bodyText": "how close does org.elasticsearch.common.network.Cidrs get us?", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420416194", "createdAt": "2020-05-05T21:26:03Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.network.InetAddresses;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+\n+public class CIDRUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDQyMQ==", "bodyText": "No ipv6 support, same problem with apache commons SubnetUtils", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420444421", "createdAt": "2020-05-05T22:29:13Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.network.InetAddresses;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+\n+public class CIDRUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjE5NA=="}, "originalCommit": {"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDc1OTM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowODoxOVrOGUatMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxMjowNVrOGUazdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjI1OA==", "bodyText": "Is this worthwhile to  add as a method? It's also called within CidrMatch.asScript", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424062258", "createdAt": "2020-05-12T22:08:19Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.CIDRMatch;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Or;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslators;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.and;\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.or;\n+\n+final class QueryTranslator {\n+\n+    public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n+            new ExpressionTranslators.BinaryComparisons(),\n+            new ExpressionTranslators.Ranges(),\n+            new BinaryLogic(),\n+            new ExpressionTranslators.Nots(),\n+            new ExpressionTranslators.Likes(),\n+            new ExpressionTranslators.InComparisons(),\n+            new ExpressionTranslators.StringQueries(),\n+            new ExpressionTranslators.Matches(),\n+            new ExpressionTranslators.MultiMatches(),\n+            new Scalars()\n+    );\n+\n+    public static Query toQuery(Expression e) {\n+        return toQuery(e, new EqlTranslatorHandler());\n+    }\n+\n+    public static Query toQuery(Expression e, TranslatorHandler handler) {\n+        Query translation = null;\n+        for (ExpressionTranslator<?> translator : QUERY_TRANSLATORS) {\n+            translation = translator.translate(e, handler);\n+            if (translation != null) {\n+                return translation;\n+            }\n+        }\n+\n+        throw new QlIllegalArgumentException(\"Don't know how to translate {} {}\", e.nodeName(), e);\n+    }\n+\n+    public static class BinaryLogic extends ExpressionTranslator<org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogic> {\n+\n+        @Override\n+        protected Query asQuery(org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogic e, TranslatorHandler handler) {\n+            if (e instanceof And) {\n+                return and(e.source(), toQuery(e.left(), handler), toQuery(e.right(), handler));\n+            }\n+            if (e instanceof Or) {\n+                return or(e.source(), toQuery(e.left(), handler), toQuery(e.right(), handler));\n+            }\n+\n+            return null;\n+        }\n+    }\n+\n+    public static Object valueOf(Expression e) {\n+        if (e.foldable()) {\n+            return e.fold();\n+        }\n+        throw new QlIllegalArgumentException(\"Cannot determine value for {}\", e);\n+    }\n+\n+    public static class Scalars extends ExpressionTranslator<ScalarFunction> {\n+\n+        @Override\n+        protected Query asQuery(ScalarFunction f, TranslatorHandler handler) {\n+            return doTranslate(f, handler);\n+        }\n+\n+        public static Query doTranslate(ScalarFunction f, TranslatorHandler handler) {\n+            if (f instanceof CIDRMatch) {\n+                CIDRMatch cm = (CIDRMatch) f;\n+                if (cm.field() instanceof FieldAttribute && Expressions.foldable(cm.addresses())) {\n+                    String targetFieldName = handler.nameOf(((FieldAttribute) cm.field()).exactAttribute());\n+\n+                    Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(cm.addresses().size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Mzg2MQ==", "bodyText": "Not exactly, needed Set here for TermsQuery constructor and List for the scripting func", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424063861", "createdAt": "2020-05-12T22:12:05Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.CIDRMatch;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Or;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslators;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.and;\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.or;\n+\n+final class QueryTranslator {\n+\n+    public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n+            new ExpressionTranslators.BinaryComparisons(),\n+            new ExpressionTranslators.Ranges(),\n+            new BinaryLogic(),\n+            new ExpressionTranslators.Nots(),\n+            new ExpressionTranslators.Likes(),\n+            new ExpressionTranslators.InComparisons(),\n+            new ExpressionTranslators.StringQueries(),\n+            new ExpressionTranslators.Matches(),\n+            new ExpressionTranslators.MultiMatches(),\n+            new Scalars()\n+    );\n+\n+    public static Query toQuery(Expression e) {\n+        return toQuery(e, new EqlTranslatorHandler());\n+    }\n+\n+    public static Query toQuery(Expression e, TranslatorHandler handler) {\n+        Query translation = null;\n+        for (ExpressionTranslator<?> translator : QUERY_TRANSLATORS) {\n+            translation = translator.translate(e, handler);\n+            if (translation != null) {\n+                return translation;\n+            }\n+        }\n+\n+        throw new QlIllegalArgumentException(\"Don't know how to translate {} {}\", e.nodeName(), e);\n+    }\n+\n+    public static class BinaryLogic extends ExpressionTranslator<org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogic> {\n+\n+        @Override\n+        protected Query asQuery(org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogic e, TranslatorHandler handler) {\n+            if (e instanceof And) {\n+                return and(e.source(), toQuery(e.left(), handler), toQuery(e.right(), handler));\n+            }\n+            if (e instanceof Or) {\n+                return or(e.source(), toQuery(e.left(), handler), toQuery(e.right(), handler));\n+            }\n+\n+            return null;\n+        }\n+    }\n+\n+    public static Object valueOf(Expression e) {\n+        if (e.foldable()) {\n+            return e.fold();\n+        }\n+        throw new QlIllegalArgumentException(\"Cannot determine value for {}\", e);\n+    }\n+\n+    public static class Scalars extends ExpressionTranslator<ScalarFunction> {\n+\n+        @Override\n+        protected Query asQuery(ScalarFunction f, TranslatorHandler handler) {\n+            return doTranslate(f, handler);\n+        }\n+\n+        public static Query doTranslate(ScalarFunction f, TranslatorHandler handler) {\n+            if (f instanceof CIDRMatch) {\n+                CIDRMatch cm = (CIDRMatch) f;\n+                if (cm.field() instanceof FieldAttribute && Expressions.foldable(cm.addresses())) {\n+                    String targetFieldName = handler.nameOf(((FieldAttribute) cm.field()).exactAttribute());\n+\n+                    Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(cm.addresses().size()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjI1OA=="}, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDc2MDQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowODo0NFrOGUat3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMzozN1rOGU4zXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjQzMQ==", "bodyText": "preferred without static importing everything here, more visible QL translators vs EQL.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424062431", "createdAt": "2020-05-12T22:08:44Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.CIDRMatch;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Or;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslators;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.and;\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.or;\n+\n+final class QueryTranslator {\n+\n+    public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n+            new ExpressionTranslators.BinaryComparisons(),\n+            new ExpressionTranslators.Ranges(),\n+            new BinaryLogic(),\n+            new ExpressionTranslators.Nots(),\n+            new ExpressionTranslators.Likes(),\n+            new ExpressionTranslators.InComparisons(),\n+            new ExpressionTranslators.StringQueries(),\n+            new ExpressionTranslators.Matches(),\n+            new ExpressionTranslators.MultiMatches(),\n+            new Scalars()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236a1d6c28f417b17f5b06c2bcebd26c5d85df0e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyOTQ0Nw==", "bodyText": "A relevant aspect here: you might want to update your branch from master, to incorporate the StartsWith changes from #56404. In that PR, the Scalars from QL was updated to have startsWith use a PrefixQuery whenever possible. And for EQL and its QueryTranslator that you added, it will probably need the Scalars from QL, as well.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424229447", "createdAt": "2020-05-13T07:32:07Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.CIDRMatch;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Or;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslators;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.and;\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.or;\n+\n+final class QueryTranslator {\n+\n+    public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n+            new ExpressionTranslators.BinaryComparisons(),\n+            new ExpressionTranslators.Ranges(),\n+            new BinaryLogic(),\n+            new ExpressionTranslators.Nots(),\n+            new ExpressionTranslators.Likes(),\n+            new ExpressionTranslators.InComparisons(),\n+            new ExpressionTranslators.StringQueries(),\n+            new ExpressionTranslators.Matches(),\n+            new ExpressionTranslators.MultiMatches(),\n+            new Scalars()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjQzMQ=="}, "originalCommit": {"oid": "236a1d6c28f417b17f5b06c2bcebd26c5d85df0e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NTM1OQ==", "bodyText": "Updated, and adjusted Scalar translation in EQ to be able to reuse it for startsWith function", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424555359", "createdAt": "2020-05-13T16:03:37Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.CIDRMatch;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Or;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslators;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.and;\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.or;\n+\n+final class QueryTranslator {\n+\n+    public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n+            new ExpressionTranslators.BinaryComparisons(),\n+            new ExpressionTranslators.Ranges(),\n+            new BinaryLogic(),\n+            new ExpressionTranslators.Nots(),\n+            new ExpressionTranslators.Likes(),\n+            new ExpressionTranslators.InComparisons(),\n+            new ExpressionTranslators.StringQueries(),\n+            new ExpressionTranslators.Matches(),\n+            new ExpressionTranslators.MultiMatches(),\n+            new Scalars()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjQzMQ=="}, "originalCommit": {"oid": "236a1d6c28f417b17f5b06c2bcebd26c5d85df0e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTcxNzE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo1OTo0MFrOGUj6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMjoyNFrOGU4v_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMzEzMQ==", "bodyText": "Since this code is in EQL, maybe we should handle the IllegalArgumentException here and wrap it in EqlIllegalArgumentException?", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424213131", "createdAt": "2020-05-13T06:59:40Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.network.InetAddresses;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+\n+public class CIDRUtils {\n+    // Borrowed from Lucene, rfc4291 prefix\n+    static final byte[] IPV4_PREFIX = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1};\n+\n+    private CIDRUtils() {\n+    }\n+\n+    public static boolean isInRange(String address, String... cidrAddresses) {\n+        // Check if address is parsable first\n+        byte[] addr = InetAddresses.forString(address).getAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NDQ5NQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424554495", "createdAt": "2020-05-13T16:02:24Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.network.InetAddresses;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+\n+public class CIDRUtils {\n+    // Borrowed from Lucene, rfc4291 prefix\n+    static final byte[] IPV4_PREFIX = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1};\n+\n+    private CIDRUtils() {\n+    }\n+\n+    public static boolean isInRange(String address, String... cidrAddresses) {\n+        // Check if address is parsable first\n+        byte[] addr = InetAddresses.forString(address).getAddress();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMzEzMQ=="}, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTg0MjQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/EqlTranslatorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzozOToxOVrOGUlJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowNToxMFrOGU43rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMzQzNA==", "bodyText": "This class is the same as QlTranslatorHandler except asQuery method. Maybe you could reuse most of the code from QlTranslatorHandler and only change the relevant bit in EqlTranslatorHandler. For example, why not extending QlTranslatorHandler and override asQuery only?", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424233434", "createdAt": "2020-05-13T07:39:19Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/EqlTranslatorHandler.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.NamedExpression;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypeConverter;\n+\n+public class EqlTranslatorHandler implements TranslatorHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NjQ2MA==", "bodyText": "Updated.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424556460", "createdAt": "2020-05-13T16:05:10Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/EqlTranslatorHandler.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.NamedExpression;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypeConverter;\n+\n+public class EqlTranslatorHandler implements TranslatorHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMzQzNA=="}, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTg3MjM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo0NzoyNFrOGUlcYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozOToyNVrOGU6QGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzODE3OA==", "bodyText": "Please, add one more test where there are two cidrMatch function calls in the same query: where cidrMatch(whatever) or cidrMatch(another_whatever).", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424238178", "createdAt": "2020-05-13T07:47:24Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -206,22 +206,37 @@ InternalEqlScriptUtils.concat([InternalQlScriptUtils.docValue(doc,params.v0),par\n cidrMatchFunctionOne\n process where cidrMatch(source_address, \"10.0.0.0/8\")\n ;\n-\"term\":{\"source_address\":{\"value\":\"10.0.0.0/8\"\n+{\"bool\":{\"must\":[{\"term\":{\"event.category\":{\"value\":\"process\"\n+{\"terms\":{\"source_address\":[\"10.0.0.0/8\"]\n+;\n+\n+cidrMatchFunctionOneBool\n+process where cidrMatch(source_address, \"10.0.0.0/8\") == true\n+;\n+{\"bool\":{\"must\":[{\"term\":{\"event.category\":{\"value\":\"process\"\n+{\"terms\":{\"source_address\":[\"10.0.0.0/8\"]\n ;\n \n cidrMatchFunctionTwo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3OTA5Nw==", "bodyText": "Added.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424579097", "createdAt": "2020-05-13T16:39:25Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -206,22 +206,37 @@ InternalEqlScriptUtils.concat([InternalQlScriptUtils.docValue(doc,params.v0),par\n cidrMatchFunctionOne\n process where cidrMatch(source_address, \"10.0.0.0/8\")\n ;\n-\"term\":{\"source_address\":{\"value\":\"10.0.0.0/8\"\n+{\"bool\":{\"must\":[{\"term\":{\"event.category\":{\"value\":\"process\"\n+{\"terms\":{\"source_address\":[\"10.0.0.0/8\"]\n+;\n+\n+cidrMatchFunctionOneBool\n+process where cidrMatch(source_address, \"10.0.0.0/8\") == true\n+;\n+{\"bool\":{\"must\":[{\"term\":{\"event.category\":{\"value\":\"process\"\n+{\"terms\":{\"source_address\":[\"10.0.0.0/8\"]\n ;\n \n cidrMatchFunctionTwo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzODE3OA=="}, "originalCommit": {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDcxODcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoxMDo1NlrOGVByAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyNTo1OFrOGVCRUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMjQ2NQ==", "bodyText": "Indeed, it is relevant to have both terms queries in there and the must for event.category, but there has to be a bool should as well.\nThe query should translate as a bool with two must statements:\n\none is term on event.category\nthe other is a bool with two should statements where terms on the source_address is used.", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424702465", "createdAt": "2020-05-13T20:10:56Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -239,6 +239,13 @@ process where cidrMatch(source_address, \"10.0.0.0/8\", \"192.168.0.0/16\")\n {\"terms\":{\"source_address\":[\"10.0.0.0/8\",\"192.168.0.0/16\"]\n ;\n \n+cidrMatchFunctionTwoWithOr\n+process where cidrMatch(source_address, \"10.0.0.0/8\") or cidrMatch(source_address, \"192.168.0.0/16\")\n+;\n+{\"bool\":{\"must\":[{\"term\":{\"event.category\":{\"value\":\"process\"\n+{\"terms\":{\"source_address\":[\"10.0.0.0/8\"],\"boost\":1.0}},{\"terms\":{\"source_address\":[\"192.168.0.0/16\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84485b9104d3a6eecc58d73d4e1381e98db010b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDQ4Mw==", "bodyText": "Updated", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424710483", "createdAt": "2020-05-13T20:25:58Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -239,6 +239,13 @@ process where cidrMatch(source_address, \"10.0.0.0/8\", \"192.168.0.0/16\")\n {\"terms\":{\"source_address\":[\"10.0.0.0/8\",\"192.168.0.0/16\"]\n ;\n \n+cidrMatchFunctionTwoWithOr\n+process where cidrMatch(source_address, \"10.0.0.0/8\") or cidrMatch(source_address, \"192.168.0.0/16\")\n+;\n+{\"bool\":{\"must\":[{\"term\":{\"event.category\":{\"value\":\"process\"\n+{\"terms\":{\"source_address\":[\"10.0.0.0/8\"],\"boost\":1.0}},{\"terms\":{\"source_address\":[\"192.168.0.0/16\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMjQ2NQ=="}, "originalCommit": {"oid": "c84485b9104d3a6eecc58d73d4e1381e98db010b"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2402, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}