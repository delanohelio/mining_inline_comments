{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODMwMjM3", "number": 64017, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoxNToyNFrOEwdjng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzo0NzoxMFrOEwo6Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjUxMzU4OnYy", "diffSide": "RIGHT", "path": "modules/lang-expression/src/test/java/org/elasticsearch/script/expression/ExpressionTermsSetQueryTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoxNToyNFrOHmC3GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzowMToxOFrOHmgk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1NDgwOA==", "bodyText": "I wonder what these were testing before. You change doesn't make it worse though!\nI wonder if this change in general could make field aliases simpler. Like, in a follow up.", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509654808", "createdAt": "2020-10-21T20:15:24Z", "author": {"login": "nik9000"}, "path": "modules/lang-expression/src/test/java/org/elasticsearch/script/expression/ExpressionTermsSetQueryTests.java", "diffHunk": "@@ -64,7 +60,8 @@ public void setUp() throws Exception {\n         when(fieldData.load(anyObject())).thenReturn(atomicFieldData);\n \n         service = new ExpressionScriptEngine();\n-        lookup = new SearchLookup(mapperService, (ignored, lookup) -> fieldData);\n+        lookup = new SearchLookup(field -> field.equals(\"field\") || field.equals(\"alias\") ? fieldType : null,\n+            (ignored, lookup) -> fieldData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxMjI2Ng==", "bodyText": "I wondered the same, especially why expression tests need to specifically test field aliases, that should not be necessary?", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509912266", "createdAt": "2020-10-22T06:36:36Z", "author": {"login": "javanna"}, "path": "modules/lang-expression/src/test/java/org/elasticsearch/script/expression/ExpressionTermsSetQueryTests.java", "diffHunk": "@@ -64,7 +60,8 @@ public void setUp() throws Exception {\n         when(fieldData.load(anyObject())).thenReturn(atomicFieldData);\n \n         service = new ExpressionScriptEngine();\n-        lookup = new SearchLookup(mapperService, (ignored, lookup) -> fieldData);\n+        lookup = new SearchLookup(field -> field.equals(\"field\") || field.equals(\"alias\") ? fieldType : null,\n+            (ignored, lookup) -> fieldData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1NDgwOA=="}, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MTY3OQ==", "bodyText": "I'm guessing that aliases at some point were different beasts and the test tested something. Or maybe we ended up copy and pasting stuff?", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r510141679", "createdAt": "2020-10-22T13:01:18Z", "author": {"login": "nik9000"}, "path": "modules/lang-expression/src/test/java/org/elasticsearch/script/expression/ExpressionTermsSetQueryTests.java", "diffHunk": "@@ -64,7 +60,8 @@ public void setUp() throws Exception {\n         when(fieldData.load(anyObject())).thenReturn(atomicFieldData);\n \n         service = new ExpressionScriptEngine();\n-        lookup = new SearchLookup(mapperService, (ignored, lookup) -> fieldData);\n+        lookup = new SearchLookup(field -> field.equals(\"field\") || field.equals(\"alias\") ? fieldType : null,\n+            (ignored, lookup) -> fieldData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1NDgwOA=="}, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDE3MzI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo0OTozNVrOHmS7Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo0OTozNVrOHmS7Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxODAwMg==", "bodyText": "this means the lookup does a tiny bit more than before: handling unmapped fields. I wonder if that is good or bad, but tests seem to be happy either way. If we want to preserve the previous behaviour, we can easily do so.", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509918002", "createdAt": "2020-10-22T06:49:35Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -307,7 +307,7 @@ MappedFieldType failIfFieldMappingNotFound(String name, MappedFieldType fieldMap\n     public SearchLookup lookup() {\n         if (this.lookup == null) {\n             this.lookup = new SearchLookup(\n-                mapperService,\n+                this::getFieldType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDE3Njg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/lookup/LeafFieldsLookup.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1MDozNFrOHmS9KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo0Mjo1NlrOHmW_QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxODUwNQ==", "bodyText": "this is not fantastic, yet it does the job... do we have better options? I like that this way we still only need the lookup function as argument.", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509918505", "createdAt": "2020-10-22T06:50:34Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/lookup/LeafFieldsLookup.java", "diffHunk": "@@ -129,31 +127,28 @@ public boolean containsValue(Object value) {\n     private FieldLookup loadFieldData(String name) {\n         FieldLookup data = cachedFieldData.get(name);\n         if (data == null) {\n-            MappedFieldType fieldType = mapperService.fieldType(name);\n+            MappedFieldType fieldType = fieldTypeLookup.apply(name);\n             if (fieldType == null) {\n                 throw new IllegalArgumentException(\"No field found for [\" + name + \"] in mapping\");\n             }\n             data = new FieldLookup(fieldType);\n             cachedFieldData.put(name, data);\n         }\n         if (data.fields() == null) {\n+            MappedFieldType fieldType = data.fieldType();\n             List<Object> values;\n-            if (TypeFieldType.NAME.equals(data.fieldType().name())) {\n-                values = new ArrayList<>(1);\n-                final DocumentMapper mapper = mapperService.documentMapper();\n-                if (mapper != null) {\n-                    values.add(mapper.type());\n-                }\n+            if (TypeFieldType.NAME.equals(fieldType.name())) {\n+                values = Collections.singletonList(((TypeFieldType)fieldType).getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1MDAxNA==", "bodyText": "So I think we can actually remove this in master, as using the _type field in scripts is deprecated in 7.x.  But you might want to keep it for the backport, and then remove it later.", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509950014", "createdAt": "2020-10-22T07:49:10Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/lookup/LeafFieldsLookup.java", "diffHunk": "@@ -129,31 +127,28 @@ public boolean containsValue(Object value) {\n     private FieldLookup loadFieldData(String name) {\n         FieldLookup data = cachedFieldData.get(name);\n         if (data == null) {\n-            MappedFieldType fieldType = mapperService.fieldType(name);\n+            MappedFieldType fieldType = fieldTypeLookup.apply(name);\n             if (fieldType == null) {\n                 throw new IllegalArgumentException(\"No field found for [\" + name + \"] in mapping\");\n             }\n             data = new FieldLookup(fieldType);\n             cachedFieldData.put(name, data);\n         }\n         if (data.fields() == null) {\n+            MappedFieldType fieldType = data.fieldType();\n             List<Object> values;\n-            if (TypeFieldType.NAME.equals(data.fieldType().name())) {\n-                values = new ArrayList<>(1);\n-                final DocumentMapper mapper = mapperService.documentMapper();\n-                if (mapper != null) {\n-                    values.add(mapper.type());\n-                }\n+            if (TypeFieldType.NAME.equals(fieldType.name())) {\n+                values = Collections.singletonList(((TypeFieldType)fieldType).getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxODUwNQ=="}, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NDU3Ng==", "bodyText": "I opened #64041", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509984576", "createdAt": "2020-10-22T08:42:56Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/lookup/LeafFieldsLookup.java", "diffHunk": "@@ -129,31 +127,28 @@ public boolean containsValue(Object value) {\n     private FieldLookup loadFieldData(String name) {\n         FieldLookup data = cachedFieldData.get(name);\n         if (data == null) {\n-            MappedFieldType fieldType = mapperService.fieldType(name);\n+            MappedFieldType fieldType = fieldTypeLookup.apply(name);\n             if (fieldType == null) {\n                 throw new IllegalArgumentException(\"No field found for [\" + name + \"] in mapping\");\n             }\n             data = new FieldLookup(fieldType);\n             cachedFieldData.put(name, data);\n         }\n         if (data.fields() == null) {\n+            MappedFieldType fieldType = data.fieldType();\n             List<Object> values;\n-            if (TypeFieldType.NAME.equals(data.fieldType().name())) {\n-                values = new ArrayList<>(1);\n-                final DocumentMapper mapper = mapperService.documentMapper();\n-                if (mapper != null) {\n-                    values.add(mapper.type());\n-                }\n+            if (TypeFieldType.NAME.equals(fieldType.name())) {\n+                values = Collections.singletonList(((TypeFieldType)fieldType).getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxODUwNQ=="}, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDM3MzcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/lookup/DocLookup.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzo0NzoxMFrOHmUzog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODozNTo1OVrOHmWtJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0ODgzNA==", "bodyText": "I wonder if we could go even further in a follow up, and just have one String->IndexFieldData lookup?", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509948834", "createdAt": "2020-10-22T07:47:10Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/search/lookup/DocLookup.java", "diffHunk": "@@ -21,29 +21,28 @@\n import org.apache.lucene.index.LeafReaderContext;\n import org.elasticsearch.index.fielddata.IndexFieldData;\n import org.elasticsearch.index.mapper.MappedFieldType;\n-import org.elasticsearch.index.mapper.MapperService;\n \n import java.util.function.Function;\n \n-public class DocLookup {\n+public final class DocLookup {\n \n-    private final MapperService mapperService;\n+    private final Function<String, MappedFieldType> fieldTypeLookup;\n     private final Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup;\n \n-    DocLookup(MapperService mapperService, Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup) {\n-        this.mapperService = mapperService;\n+    DocLookup(Function<String, MappedFieldType> fieldTypeLookup, Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjU2NQ==", "bodyText": "interesting idea, and this could be applied to other places too, where all we do is look up the type by name and then look up fielddata by field type. I will look into this.", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509972565", "createdAt": "2020-10-22T08:24:47Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/lookup/DocLookup.java", "diffHunk": "@@ -21,29 +21,28 @@\n import org.apache.lucene.index.LeafReaderContext;\n import org.elasticsearch.index.fielddata.IndexFieldData;\n import org.elasticsearch.index.mapper.MappedFieldType;\n-import org.elasticsearch.index.mapper.MapperService;\n \n import java.util.function.Function;\n \n-public class DocLookup {\n+public final class DocLookup {\n \n-    private final MapperService mapperService;\n+    private final Function<String, MappedFieldType> fieldTypeLookup;\n     private final Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup;\n \n-    DocLookup(MapperService mapperService, Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup) {\n-        this.mapperService = mapperService;\n+    DocLookup(Function<String, MappedFieldType> fieldTypeLookup, Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0ODgzNA=="}, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3OTk0MA==", "bodyText": "I looked into this and I found logic around the field type in the callers, so I will leave this for another time :)", "url": "https://github.com/elastic/elasticsearch/pull/64017#discussion_r509979940", "createdAt": "2020-10-22T08:35:59Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/lookup/DocLookup.java", "diffHunk": "@@ -21,29 +21,28 @@\n import org.apache.lucene.index.LeafReaderContext;\n import org.elasticsearch.index.fielddata.IndexFieldData;\n import org.elasticsearch.index.mapper.MappedFieldType;\n-import org.elasticsearch.index.mapper.MapperService;\n \n import java.util.function.Function;\n \n-public class DocLookup {\n+public final class DocLookup {\n \n-    private final MapperService mapperService;\n+    private final Function<String, MappedFieldType> fieldTypeLookup;\n     private final Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup;\n \n-    DocLookup(MapperService mapperService, Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup) {\n-        this.mapperService = mapperService;\n+    DocLookup(Function<String, MappedFieldType> fieldTypeLookup, Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0ODgzNA=="}, "originalCommit": {"oid": "39bb64be853a63e1e5f6f4383d2075fd527eda7b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4254, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}