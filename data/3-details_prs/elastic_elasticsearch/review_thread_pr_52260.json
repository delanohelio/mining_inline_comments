{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjY0NTY3", "number": 52260, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNzo1MFrODfJ_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNzo1MFrODfJ_KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTk2MDczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNzo1MFrOFoscxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODozNDoyMFrOFpK4aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ==", "bodyText": "This should probably default to true, especially since the expansion coverage is already checked in the get configs request. There might be a race condition between getting the configs and the stats.", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378215621", "createdAt": "2020-02-12T12:17:50Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction.Response.Stats;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.utils.PhaseProgress;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestCatDataFrameAnalyticsAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return unmodifiableList(asList(\n+            new Route(GET, \"_cat/ml/data_frame/analytics/{\" + DataFrameAnalyticsConfig.ID.getPreferredName() + \"}\"),\n+            new Route(GET, \"_cat/ml/data_frame/analytics\")));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_data_frame_analytics_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String dataFrameAnalyticsId = restRequest.param(DataFrameAnalyticsConfig.ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(dataFrameAnalyticsId)) {\n+            dataFrameAnalyticsId = MetaData.ALL;\n+        }\n+\n+        GetDataFrameAnalyticsAction.Request getRequest = new GetDataFrameAnalyticsAction.Request(dataFrameAnalyticsId);\n+        getRequest.setAllowNoResources(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getRequest.isAllowNoResources()));\n+\n+        GetDataFrameAnalyticsStatsAction.Request getStatsRequest = new GetDataFrameAnalyticsStatsAction.Request(dataFrameAnalyticsId);\n+        getStatsRequest.setAllowNoMatch(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsStatsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getStatsRequest.isAllowNoMatch()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4987a482f77c4d3bb8ade3df143419ab9f1a7d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNTY1OA==", "bodyText": "The initial value of the field underlying getStatsRequest.isAllowNoMatch() is already true.\nDo you think I should make the default value an explicit true literal here?", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378225658", "createdAt": "2020-02-12T12:40:17Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction.Response.Stats;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.utils.PhaseProgress;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestCatDataFrameAnalyticsAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return unmodifiableList(asList(\n+            new Route(GET, \"_cat/ml/data_frame/analytics/{\" + DataFrameAnalyticsConfig.ID.getPreferredName() + \"}\"),\n+            new Route(GET, \"_cat/ml/data_frame/analytics\")));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_data_frame_analytics_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String dataFrameAnalyticsId = restRequest.param(DataFrameAnalyticsConfig.ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(dataFrameAnalyticsId)) {\n+            dataFrameAnalyticsId = MetaData.ALL;\n+        }\n+\n+        GetDataFrameAnalyticsAction.Request getRequest = new GetDataFrameAnalyticsAction.Request(dataFrameAnalyticsId);\n+        getRequest.setAllowNoResources(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getRequest.isAllowNoResources()));\n+\n+        GetDataFrameAnalyticsStatsAction.Request getStatsRequest = new GetDataFrameAnalyticsStatsAction.Request(dataFrameAnalyticsId);\n+        getStatsRequest.setAllowNoMatch(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsStatsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getStatsRequest.isAllowNoMatch()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ=="}, "originalCommit": {"oid": "6c4987a482f77c4d3bb8ade3df143419ab9f1a7d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2OTQ0OA==", "bodyText": "yes, if the rest request has allow_no_match=false, I think we should only take that into account for the config get.", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378269448", "createdAt": "2020-02-12T14:04:44Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction.Response.Stats;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.utils.PhaseProgress;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestCatDataFrameAnalyticsAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return unmodifiableList(asList(\n+            new Route(GET, \"_cat/ml/data_frame/analytics/{\" + DataFrameAnalyticsConfig.ID.getPreferredName() + \"}\"),\n+            new Route(GET, \"_cat/ml/data_frame/analytics\")));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_data_frame_analytics_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String dataFrameAnalyticsId = restRequest.param(DataFrameAnalyticsConfig.ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(dataFrameAnalyticsId)) {\n+            dataFrameAnalyticsId = MetaData.ALL;\n+        }\n+\n+        GetDataFrameAnalyticsAction.Request getRequest = new GetDataFrameAnalyticsAction.Request(dataFrameAnalyticsId);\n+        getRequest.setAllowNoResources(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getRequest.isAllowNoResources()));\n+\n+        GetDataFrameAnalyticsStatsAction.Request getStatsRequest = new GetDataFrameAnalyticsStatsAction.Request(dataFrameAnalyticsId);\n+        getStatsRequest.setAllowNoMatch(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsStatsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getStatsRequest.isAllowNoMatch()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ=="}, "originalCommit": {"oid": "6c4987a482f77c4d3bb8ade3df143419ab9f1a7d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxNDIxNg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378714216", "createdAt": "2020-02-13T08:34:20Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction.Response.Stats;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.utils.PhaseProgress;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestCatDataFrameAnalyticsAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return unmodifiableList(asList(\n+            new Route(GET, \"_cat/ml/data_frame/analytics/{\" + DataFrameAnalyticsConfig.ID.getPreferredName() + \"}\"),\n+            new Route(GET, \"_cat/ml/data_frame/analytics\")));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_data_frame_analytics_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String dataFrameAnalyticsId = restRequest.param(DataFrameAnalyticsConfig.ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(dataFrameAnalyticsId)) {\n+            dataFrameAnalyticsId = MetaData.ALL;\n+        }\n+\n+        GetDataFrameAnalyticsAction.Request getRequest = new GetDataFrameAnalyticsAction.Request(dataFrameAnalyticsId);\n+        getRequest.setAllowNoResources(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getRequest.isAllowNoResources()));\n+\n+        GetDataFrameAnalyticsStatsAction.Request getStatsRequest = new GetDataFrameAnalyticsStatsAction.Request(dataFrameAnalyticsId);\n+        getStatsRequest.setAllowNoMatch(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsStatsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getStatsRequest.isAllowNoMatch()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ=="}, "originalCommit": {"oid": "6c4987a482f77c4d3bb8ade3df143419ab9f1a7d"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4790, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}