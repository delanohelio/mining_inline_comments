{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NDQ4MDY2", "number": 52280, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODoxMDowN1rODfR9EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODoxMDowN1rODfR9EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTI2NjA4OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODoxMDowN1rOFo5JpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDoxNjo0MlrOFpOJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMzcxNg==", "bodyText": "These stats are still used for adaptive replica selection. This is what I meant when we discussed this about the QueueResizingEsThreadPoolExecutor working for both the little's law part (the part we wanted to remove) as well as for adaptive replica selection.", "url": "https://github.com/elastic/elasticsearch/pull/52280#discussion_r378423716", "createdAt": "2020-02-12T18:10:07Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "diffHunk": "@@ -300,12 +297,6 @@ static boolean executeInternal(SearchContext searchContext) throws QueryPhaseExe\n                 restoreTopFieldDocs(queryResult, sortAndFormatsForRewrittenNumericSort);\n             }\n \n-            ExecutorService executor = searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH);\n-            if (executor instanceof QueueResizingEsThreadPoolExecutor) {\n-                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor;\n-                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize());\n-                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA());\n-            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9055f1337144983a7be5bdf2ef17db29cdf7d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyNTc0NQ==", "bodyText": "You're absolutely right. I was too eager to delete code here. Will be interesting to see if any test catches this. Will rework this PR tomorrow.", "url": "https://github.com/elastic/elasticsearch/pull/52280#discussion_r378425745", "createdAt": "2020-02-12T18:14:07Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "diffHunk": "@@ -300,12 +297,6 @@ static boolean executeInternal(SearchContext searchContext) throws QueryPhaseExe\n                 restoreTopFieldDocs(queryResult, sortAndFormatsForRewrittenNumericSort);\n             }\n \n-            ExecutorService executor = searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH);\n-            if (executor instanceof QueueResizingEsThreadPoolExecutor) {\n-                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor;\n-                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize());\n-                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA());\n-            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMzcxNg=="}, "originalCommit": {"oid": "5f9055f1337144983a7be5bdf2ef17db29cdf7d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2NzY0NA==", "bodyText": "I've addressed this now in 382d40b", "url": "https://github.com/elastic/elasticsearch/pull/52280#discussion_r378767644", "createdAt": "2020-02-13T10:16:42Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/search/query/QueryPhase.java", "diffHunk": "@@ -300,12 +297,6 @@ static boolean executeInternal(SearchContext searchContext) throws QueryPhaseExe\n                 restoreTopFieldDocs(queryResult, sortAndFormatsForRewrittenNumericSort);\n             }\n \n-            ExecutorService executor = searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH);\n-            if (executor instanceof QueueResizingEsThreadPoolExecutor) {\n-                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor;\n-                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize());\n-                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA());\n-            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMzcxNg=="}, "originalCommit": {"oid": "5f9055f1337144983a7be5bdf2ef17db29cdf7d1"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4799, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}