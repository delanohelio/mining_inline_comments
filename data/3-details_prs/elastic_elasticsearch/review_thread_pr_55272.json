{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDI1NzE4", "number": 55272, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MDo1MFrODyRaCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowMDo1OFrODyRi-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQwNTg1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MDo1MFrOGGOWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MDo1MFrOGGOWCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3OTY1Ng==", "bodyText": "FWIW, doing withType here is going to eagerly create those generate pom tasks. But we are in a bit of a pickle becuase using configureEach is going to barf here as you can't register a task in a lazy task config block.\nPerhaps we can key this off of the publications themselves instead of the generate pom task. We know for each publication there's going to be a generate pom task, maybe do that instead? So something like publishing.publications.all { // create validate task }?\nI realize this is being a bit pedantic about not doing eager task creation but this seems like a challenge you're up to \ud83d\ude09", "url": "https://github.com/elastic/elasticsearch/pull/55272#discussion_r409179656", "createdAt": "2020-04-15T22:50:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationPlugin.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.publish.maven.tasks.GenerateMavenPom;\n+import org.gradle.api.tasks.TaskProvider;\n+\n+/**\n+ * Adds pom validation to every pom generation task.\n+ */\n+public class PomValidationPlugin implements Plugin<Project> {\n+\n+    @Override\n+    public void apply(Project project) {\n+        project.getTasks().withType(GenerateMavenPom.class, generateMavenPom -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c9bc4e2a30bec998c0b90039872bf4cf90afbcb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQxMTU1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MzoyMFrOGGOZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MzoyMFrOGGOZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4MDU0MQ==", "bodyText": "Should we make this extend PrecommitTask so it creates a marker file and thus could be UP-TO-DATE when the pom doesn't change? Right now this task will always run because it produces no output.", "url": "https://github.com/elastic/elasticsearch/pull/55272#discussion_r409180541", "createdAt": "2020-04-15T22:53:20Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationTask.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.apache.maven.model.Model;\n+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.RegularFileProperty;\n+import org.gradle.api.tasks.InputFile;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.io.FileReader;\n+import java.util.Collection;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+public class PomValidationTask extends DefaultTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c9bc4e2a30bec998c0b90039872bf4cf90afbcb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQxNDIzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1NDoyMFrOGGObBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1NDoyMFrOGGObBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4MDkzMw==", "bodyText": "We should probably put this in a try-with-resources block.", "url": "https://github.com/elastic/elasticsearch/pull/55272#discussion_r409180933", "createdAt": "2020-04-15T22:54:20Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationTask.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.apache.maven.model.Model;\n+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.RegularFileProperty;\n+import org.gradle.api.tasks.InputFile;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.io.FileReader;\n+import java.util.Collection;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+public class PomValidationTask extends DefaultTask {\n+\n+    private final RegularFileProperty pomFile = getProject().getObjects().fileProperty();\n+\n+    private boolean foundError;\n+\n+    @InputFile\n+    public RegularFileProperty getPomFile() {\n+        return pomFile;\n+    }\n+\n+    @TaskAction\n+    public void checkPom() throws Exception {\n+        MavenXpp3Reader reader = new MavenXpp3Reader();\n+        Model model = reader.read(new FileReader(pomFile.getAsFile().get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c9bc4e2a30bec998c0b90039872bf4cf90afbcb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQyODc0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowMDo1OFrOGGOj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowNDowMFrOGGOn8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4MzIwMw==", "bodyText": "Maybe add a message like \"see console log for details\".", "url": "https://github.com/elastic/elasticsearch/pull/55272#discussion_r409183203", "createdAt": "2020-04-15T23:00:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationTask.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.apache.maven.model.Model;\n+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.RegularFileProperty;\n+import org.gradle.api.tasks.InputFile;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.io.FileReader;\n+import java.util.Collection;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+public class PomValidationTask extends DefaultTask {\n+\n+    private final RegularFileProperty pomFile = getProject().getObjects().fileProperty();\n+\n+    private boolean foundError;\n+\n+    @InputFile\n+    public RegularFileProperty getPomFile() {\n+        return pomFile;\n+    }\n+\n+    @TaskAction\n+    public void checkPom() throws Exception {\n+        MavenXpp3Reader reader = new MavenXpp3Reader();\n+        Model model = reader.read(new FileReader(pomFile.getAsFile().get()));\n+\n+        validateString(\"groupId\", model.getGroupId());\n+        validateString(\"artifactId\", model.getArtifactId());\n+        validateString(\"version\", model.getVersion());\n+        validateString(\"name\", model.getName());\n+        validateString(\"description\", model.getDescription());\n+        validateString(\"url\", model.getUrl());\n+\n+        validateCollection(\"licenses\", model.getLicenses(), v -> {\n+            validateString(\"licenses.name\", v.getName());\n+            validateString(\"licenses.url\", v.getUrl());\n+        });\n+\n+        validateCollection(\"developers\", model.getDevelopers(), v -> {\n+            validateString(\"developers.name\", v.getName());\n+            validateString(\"developers.url\", v.getUrl());\n+        });\n+\n+        validateNonNull(\"scm\", model.getScm(), () -> validateString(\"scm.url\", model.getScm().getUrl()));\n+\n+        if (foundError) {\n+            throw new GradleException(\"Pom file [\" + pomFile.getAsFile().get() + \"] failed validation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31448f44e196d781d6ec783b8bde880f0a2af834"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NDI0MQ==", "bodyText": "Also, let's use one of these verification failure prefixes so that when we search for failures in Gradle Enterprise, this kinds of failures show up as a \"verification\" failure, which is what it is.", "url": "https://github.com/elastic/elasticsearch/pull/55272#discussion_r409184241", "createdAt": "2020-04-15T23:04:00Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/PomValidationTask.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.apache.maven.model.Model;\n+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.RegularFileProperty;\n+import org.gradle.api.tasks.InputFile;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import java.io.FileReader;\n+import java.util.Collection;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+public class PomValidationTask extends DefaultTask {\n+\n+    private final RegularFileProperty pomFile = getProject().getObjects().fileProperty();\n+\n+    private boolean foundError;\n+\n+    @InputFile\n+    public RegularFileProperty getPomFile() {\n+        return pomFile;\n+    }\n+\n+    @TaskAction\n+    public void checkPom() throws Exception {\n+        MavenXpp3Reader reader = new MavenXpp3Reader();\n+        Model model = reader.read(new FileReader(pomFile.getAsFile().get()));\n+\n+        validateString(\"groupId\", model.getGroupId());\n+        validateString(\"artifactId\", model.getArtifactId());\n+        validateString(\"version\", model.getVersion());\n+        validateString(\"name\", model.getName());\n+        validateString(\"description\", model.getDescription());\n+        validateString(\"url\", model.getUrl());\n+\n+        validateCollection(\"licenses\", model.getLicenses(), v -> {\n+            validateString(\"licenses.name\", v.getName());\n+            validateString(\"licenses.url\", v.getUrl());\n+        });\n+\n+        validateCollection(\"developers\", model.getDevelopers(), v -> {\n+            validateString(\"developers.name\", v.getName());\n+            validateString(\"developers.url\", v.getUrl());\n+        });\n+\n+        validateNonNull(\"scm\", model.getScm(), () -> validateString(\"scm.url\", model.getScm().getUrl()));\n+\n+        if (foundError) {\n+            throw new GradleException(\"Pom file [\" + pomFile.getAsFile().get() + \"] failed validation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4MzIwMw=="}, "originalCommit": {"oid": "31448f44e196d781d6ec783b8bde880f0a2af834"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1073, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}