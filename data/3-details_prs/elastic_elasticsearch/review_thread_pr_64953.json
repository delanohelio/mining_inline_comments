{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MzMwNjA4", "number": 64953, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOToyNzo1N1rOE6Lq0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo1OTowMFrOE6O5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDQ0MDQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOToyNzo1N1rOH1Frjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjoxMDoxOFrOH6FZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyOTY0Nw==", "bodyText": "Does changing the exception type here preserve the HTTP status code if we hit this error?  If not, that might be a breaking change.  I think I saw a couple of other exception type changes, same question applies.", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r525429647", "createdAt": "2020-11-17T19:27:57Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java", "diffHunk": "@@ -95,45 +90,46 @@ public Aggregator createInternal(SearchContext searchContext,\n             combineScript,\n             combineScriptParams,\n             reduceScript,\n-            searchContext,\n+            context,\n             parent,\n             metadata\n         );\n     }\n \n-    private static Script deepCopyScript(Script script, SearchShardTarget shardTarget, Map<String, Object> aggParams) {\n+    private static Script deepCopyScript(Script script, Map<String, Object> aggParams) {\n         if (script != null) {\n-            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams(), shardTarget));\n+            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams()));\n             return new Script(script.getType(), script.getLang(), script.getIdOrCode(), params);\n         } else {\n             return null;\n         }\n     }\n \n     @SuppressWarnings({ \"unchecked\" })\n-    static <T> T deepCopyParams(T original, SearchShardTarget shardTarget) {\n+    static <T> T deepCopyParams(T original) {\n         T clone;\n         if (original instanceof Map) {\n             Map<?, ?> originalMap = (Map<?, ?>) original;\n             Map<Object, Object> clonedMap = new HashMap<>();\n             for (Map.Entry<?, ?> e : originalMap.entrySet()) {\n-                clonedMap.put(deepCopyParams(e.getKey(), shardTarget), deepCopyParams(e.getValue(), shardTarget));\n+                clonedMap.put(deepCopyParams(e.getKey()), deepCopyParams(e.getValue()));\n             }\n             clone = (T) clonedMap;\n         } else if (original instanceof List) {\n             List<?> originalList = (List<?>) original;\n             List<Object> clonedList = new ArrayList<>();\n             for (Object o : originalList) {\n-                clonedList.add(deepCopyParams(o, shardTarget));\n+                clonedList.add(deepCopyParams(o));\n             }\n             clone = (T) clonedList;\n         } else if (original instanceof String || original instanceof Integer || original instanceof Long || original instanceof Short\n             || original instanceof Byte || original instanceof Float || original instanceof Double || original instanceof Character\n             || original instanceof Boolean) {\n             clone = original;\n         } else {\n-            throw new SearchParseException(shardTarget,\n-                \"Can only clone primitives, String, ArrayList, and HashMap. Found: \" + original.getClass().getCanonicalName(), null);\n+            throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced2dbf272d85fa5c862b27c99651f9f2028baee"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NzgxOQ==", "bodyText": "IllegalArgumentException is a 400. SearchParseException is also.", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r530667819", "createdAt": "2020-11-25T22:10:18Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java", "diffHunk": "@@ -95,45 +90,46 @@ public Aggregator createInternal(SearchContext searchContext,\n             combineScript,\n             combineScriptParams,\n             reduceScript,\n-            searchContext,\n+            context,\n             parent,\n             metadata\n         );\n     }\n \n-    private static Script deepCopyScript(Script script, SearchShardTarget shardTarget, Map<String, Object> aggParams) {\n+    private static Script deepCopyScript(Script script, Map<String, Object> aggParams) {\n         if (script != null) {\n-            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams(), shardTarget));\n+            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams()));\n             return new Script(script.getType(), script.getLang(), script.getIdOrCode(), params);\n         } else {\n             return null;\n         }\n     }\n \n     @SuppressWarnings({ \"unchecked\" })\n-    static <T> T deepCopyParams(T original, SearchShardTarget shardTarget) {\n+    static <T> T deepCopyParams(T original) {\n         T clone;\n         if (original instanceof Map) {\n             Map<?, ?> originalMap = (Map<?, ?>) original;\n             Map<Object, Object> clonedMap = new HashMap<>();\n             for (Map.Entry<?, ?> e : originalMap.entrySet()) {\n-                clonedMap.put(deepCopyParams(e.getKey(), shardTarget), deepCopyParams(e.getValue(), shardTarget));\n+                clonedMap.put(deepCopyParams(e.getKey()), deepCopyParams(e.getValue()));\n             }\n             clone = (T) clonedMap;\n         } else if (original instanceof List) {\n             List<?> originalList = (List<?>) original;\n             List<Object> clonedList = new ArrayList<>();\n             for (Object o : originalList) {\n-                clonedList.add(deepCopyParams(o, shardTarget));\n+                clonedList.add(deepCopyParams(o));\n             }\n             clone = (T) clonedList;\n         } else if (original instanceof String || original instanceof Integer || original instanceof Long || original instanceof Short\n             || original instanceof Byte || original instanceof Float || original instanceof Double || original instanceof Character\n             || original instanceof Boolean) {\n             clone = original;\n         } else {\n-            throw new SearchParseException(shardTarget,\n-                \"Can only clone primitives, String, ArrayList, and HashMap. Found: \" + original.getClass().getCanonicalName(), null);\n+            throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyOTY0Nw=="}, "originalCommit": {"oid": "ced2dbf272d85fa5c862b27c99651f9f2028baee"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDgxNjg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDoyNDo1N1rOH1JruQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDoyNDo1N1rOH1JruQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ5NTIyNQ==", "bodyText": "This is nitpicky even for me, but I don't think this javadoc is adding any knowledge.", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r525495225", "createdAt": "2020-11-17T20:24:57Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -151,24 +171,121 @@ public final AggregationUsageService getUsageService() {\n      */\n     public abstract NestedScope nestedScope();\n \n+    /**\n+     * Build a {@linkplain SubSearchContext} to power an aggregation fetching top hits.\n+     * Try to avoid using this because it pulls in a ton of dependencies.\n+     */\n+    public abstract SubSearchContext subSearchContext();\n+\n+    /**\n+     * Cause this aggregation to be released when the search is finished. \n+     */\n+    public abstract void addReleasable(Aggregator aggregator);\n+\n+    public abstract MultiBucketConsumer multiBucketConsumer();\n+\n+    /**\n+     * Get the filter cache.\n+     */\n+    public abstract BitsetFilterCache bitsetFilterCache();\n+    // TODO it is unclear why we can't just use the IndexSearcher which already caches\n+\n+    /**\n+     * Build a {@linkplain BucketedSort}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced2dbf272d85fa5c862b27c99651f9f2028baee"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDk2OTQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo1OTowMFrOH1LOEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo1OTowMFrOH1LOEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyMDQwMQ==", "bodyText": "This feels like a call that's hiding a volatile read.  Can we put a note about thread behavior on it?", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r525520401", "createdAt": "2020-11-17T20:59:00Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -151,24 +171,121 @@ public final AggregationUsageService getUsageService() {\n      */\n     public abstract NestedScope nestedScope();\n \n+    /**\n+     * Build a {@linkplain SubSearchContext} to power an aggregation fetching top hits.\n+     * Try to avoid using this because it pulls in a ton of dependencies.\n+     */\n+    public abstract SubSearchContext subSearchContext();\n+\n+    /**\n+     * Cause this aggregation to be released when the search is finished. \n+     */\n+    public abstract void addReleasable(Aggregator aggregator);\n+\n+    public abstract MultiBucketConsumer multiBucketConsumer();\n+\n+    /**\n+     * Get the filter cache.\n+     */\n+    public abstract BitsetFilterCache bitsetFilterCache();\n+    // TODO it is unclear why we can't just use the IndexSearcher which already caches\n+\n+    /**\n+     * Build a {@linkplain BucketedSort}.\n+     */\n+    public abstract BucketedSort buildBucketedSort(SortBuilder<?> sort, int size, BucketedSort.ExtraData values) throws IOException;\n+\n+    /**\n+     * Get a deterministic random seed based for this particular shard.\n+     */\n+    public abstract int shardRandomSeed();\n+\n+    /**\n+     * How many millis have passed since we started the search?\n+     */\n+    public abstract long getRelativeTimeInMillis();\n+\n+    /**\n+     * Has the search been cancelled?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced2dbf272d85fa5c862b27c99651f9f2028baee"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2961, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}