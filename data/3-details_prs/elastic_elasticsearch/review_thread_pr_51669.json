{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDU3MzE1", "number": 51669, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODo1M1rODcAGWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjoxNzowMVrODcHlmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjg4MzQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODo1M1rOFjz05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTozODoyNlrOFj3eNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzYwNA==", "bodyText": "Could we have an EqualsHashCodeTestUtils#checkEqualsAndHashCode-based test for this?", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373093604", "createdAt": "2020-01-30T17:38:53Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;\n+    private final String fileName;\n+    private final long fileLength;\n+\n+    CacheKey(SnapshotId snapshotId, IndexId indexId, ShardId shardId, Path cacheDir, String fileName, long fileLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1MzMzNA==", "bodyText": "\ud83e\udd26\u200d\u2642\ufe0f Of course!", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373153334", "createdAt": "2020-01-30T19:38:26Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;\n+    private final String fileName;\n+    private final long fileLength;\n+\n+    CacheKey(SnapshotId snapshotId, IndexId indexId, ShardId shardId, Path cacheDir, String fileName, long fileLength) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzYwNA=="}, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjg4NzQ0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzo0MDoxOFrOFjz3cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTozODo1MFrOFj3e6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NDI1Ng==", "bodyText": "It feels strange to have the length as part of the key. I kinda see that it's here to make some plumbing a bit simpler, but I think I'd still rather move it back out again.", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373094256", "createdAt": "2020-01-30T17:40:18Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;\n+    private final String fileName;\n+    private final long fileLength;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1MzUxNQ==", "bodyText": "Now I look at it again I agree it feels strange. I reverted this.", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373153515", "createdAt": "2020-01-30T19:38:50Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;\n+    private final String fileName;\n+    private final long fileLength;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NDI1Ng=="}, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjg5NTY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzo0Mjo1N1rOFjz8iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTozODo1N1rOFj3fLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NTU2MA==", "bodyText": "Similarly cacheDir. In my mind the thing in the cache is the Lucene file, which is uniquely identified by snapshot/index/shard/filename, and cacheDir is a bit of an implementation detail that I feel should be hidden here.", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373095560", "createdAt": "2020-01-30T17:42:57Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1MzU4Mw==", "bodyText": "Same here, thanks", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373153583", "createdAt": "2020-01-30T19:38:57Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NTU2MA=="}, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODExMDMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjoxNzowMVrOFj_wzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODo0OToxMFrOFkEtVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTE2NA==", "bodyText": "Maybe move this lambda to a method CacheKey#belongsTo(SnapshotId, IndexId, ShardId) (not sure about the name but that's the best I've got)", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373289164", "createdAt": "2020-01-31T02:17:01Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -34,19 +37,33 @@\n     private static final int COPY_BUFFER_SIZE = 8192;\n \n     private final CacheService cacheService;\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n     private final Path cacheDir;\n \n-    public CacheDirectory(Directory in, CacheService cacheService, Path cacheDir) throws IOException {\n+    public CacheDirectory(Directory in, CacheService cacheService, Path cacheDir, SnapshotId snapshotId, IndexId indexId, ShardId shardId)\n+        throws IOException {\n         super(in);\n         this.cacheService = Objects.requireNonNull(cacheService);\n         this.cacheDir = Files.createDirectories(cacheDir);\n+        this.snapshotId = Objects.requireNonNull(snapshotId);\n+        this.indexId = Objects.requireNonNull(indexId);\n+        this.shardId = Objects.requireNonNull(shardId);\n+    }\n+\n+    private CacheKey createCacheKey(String fileName) {\n+        return new CacheKey(snapshotId, indexId, shardId, fileName);\n     }\n \n     public void close() throws IOException {\n         super.close();\n         // Ideally we could let the cache evict/remove cached files by itself after the\n         // directory has been closed.\n-        cacheService.removeFromCache(key -> key.startsWith(cacheDir.toString()));\n+        cacheService.removeFromCache(key ->\n+            Objects.equals(key.getSnapshotId(), snapshotId) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504271711a9456353b14364cba4aae161afeadab"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3MDE5OA==", "bodyText": "Good idea. I kept the name and added a test in e8afbe7", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373370198", "createdAt": "2020-01-31T08:49:10Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -34,19 +37,33 @@\n     private static final int COPY_BUFFER_SIZE = 8192;\n \n     private final CacheService cacheService;\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n     private final Path cacheDir;\n \n-    public CacheDirectory(Directory in, CacheService cacheService, Path cacheDir) throws IOException {\n+    public CacheDirectory(Directory in, CacheService cacheService, Path cacheDir, SnapshotId snapshotId, IndexId indexId, ShardId shardId)\n+        throws IOException {\n         super(in);\n         this.cacheService = Objects.requireNonNull(cacheService);\n         this.cacheDir = Files.createDirectories(cacheDir);\n+        this.snapshotId = Objects.requireNonNull(snapshotId);\n+        this.indexId = Objects.requireNonNull(indexId);\n+        this.shardId = Objects.requireNonNull(shardId);\n+    }\n+\n+    private CacheKey createCacheKey(String fileName) {\n+        return new CacheKey(snapshotId, indexId, shardId, fileName);\n     }\n \n     public void close() throws IOException {\n         super.close();\n         // Ideally we could let the cache evict/remove cached files by itself after the\n         // directory has been closed.\n-        cacheService.removeFromCache(key -> key.startsWith(cacheDir.toString()));\n+        cacheService.removeFromCache(key ->\n+            Objects.equals(key.getSnapshotId(), snapshotId) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTE2NA=="}, "originalCommit": {"oid": "504271711a9456353b14364cba4aae161afeadab"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 134, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}