{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NTcxMDYz", "number": 61621, "title": "Ensure authz operation overrides transient authz headers", "bodyText": "AuthorizationService#authorize uses the thread context to carry the result of the authorization as transient headers.\nThe listener argument to the authorize method must necessarily observe the header values.\nBut we've learned that the TransportService carries over the transient headers from the thread context to the locally executed action handlers (unlike the remotely executed action handlers). This becomes problematic when the authorization is invoked multiple times, eg. because SecurityActionFilter#apply is effectively invoked in the same thread context when a parent action uses the TransportService to execute the child action locally.\nThe desired outcome is that the authorization transient headers of the child action supersede the ones of the parent action.\nThis PR is the first step in this direction; it removes a specific transient header (AuthorizationServiceField#INDICES_PERMISSIONS_KEY) before calling AuthorizationService#authorize which would fill in the header with the new value.\nCo-authored-by: Tim Vernum tim@adjective.org", "createdAt": "2020-08-27T09:27:04Z", "url": "https://github.com/elastic/elasticsearch/pull/61621", "merged": true, "mergeCommit": {"oid": "4b7160da9ed9ebbc65cd69d6f3ac3df5fee4baf3"}, "closed": true, "closedAt": "2020-09-15T10:55:07Z", "author": {"login": "albertzaharovits"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdC88Y-gH2gAyNDc0NTcxMDYzOjVlNjI3ZjdhNTdmNWFkMGM1MzQyZTUyNzg3ZTMzM2M5YTc4MTllMzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI3NUEgH2gAyNDc0NTcxMDYzOjE2OWY2ODAyMWM3NWQyNTdiNTkzYjIyYjQ5OTk3YjFlOGFlNWZjNGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e627f7a57f5ad0c5342e52787e333c9a7819e32", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e627f7a57f5ad0c5342e52787e333c9a7819e32", "committedDate": "2020-08-27T09:25:21Z", "message": "Done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1939750f41bd6aefe6a4872b72f3c56223358d1c", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/1939750f41bd6aefe6a4872b72f3c56223358d1c", "committedDate": "2020-08-27T09:36:56Z", "message": "Unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba47ac01e5e1ba759cc561146ab4fcefdc350e10", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/ba47ac01e5e1ba759cc561146ab4fcefdc350e10", "committedDate": "2020-08-27T10:32:02Z", "message": "Remove indices permissions inn transport filter as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "523699833d46d3d98c43397c34388006b268f641", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/523699833d46d3d98c43397c34388006b268f641", "committedDate": "2020-08-27T14:42:14Z", "message": "Tests fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MjM0MjA1", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-479234205", "createdAt": "2020-09-01T00:57:43Z", "commit": {"oid": "523699833d46d3d98c43397c34388006b268f641"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDo1Nzo0M1rOHKQlWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo1NDozNVrOHKUToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUxOTUxNA==", "bodyText": "For completeness, I'd personally add assertNull for INDICES_PERMISSIONS_KEY as well.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r480519514", "createdAt": "2020-09-01T00:57:43Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilterTests.java", "diffHunk": "@@ -173,23 +188,23 @@ public void testApplyAsSystemUser() throws Exception {\n             callback.onResponse(threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY));\n             return Void.TYPE;\n         }).when(authcService).authenticate(eq(action), eq(request), eq(SystemUser.INSTANCE), any(ActionListener.class));\n-        doAnswer((i) -> {\n-            ActionListener<Void> callback = (ActionListener<Void>) i.getArguments()[3];\n-            callback.onResponse(null);\n-            return Void.TYPE;\n-        }).when(authzService)\n-            .authorize(any(Authentication.class), any(String.class), any(TransportRequest.class), any(ActionListener.class));\n+        IndicesAccessControl authzAccessControl = mock(IndicesAccessControl.class);\n+        mockAuthorize(authzAccessControl);\n \n         filter.apply(task, action, request, listener, chain);\n \n         if (hasExistingAuthentication) {\n             assertEquals(authentication, threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY));\n+            if (hasExistingAccessControl) {\n+                assertThat(threadContext.getTransient(INDICES_PERMISSIONS_KEY), sameInstance(IndicesAccessControl.ALLOW_NO_INDICES));\n+            }\n         } else {\n             assertNull(threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "523699833d46d3d98c43397c34388006b268f641"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU4MDE5Ng==", "bodyText": "My understanding is that there should no transient header at all in this place, since ServerTrasnportFilter is only invoked when the request is cross-nodes. If this is true, would it be better in terms of intention to have an assert here instead of removeTransient?\nBut if we do need removeTransient here, would it then be better to move the remove into AuthorizationService#authorize so it is better encapsulated?", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r480580196", "createdAt": "2020-09-01T01:54:20Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/ServerTransportFilter.java", "diffHunk": "@@ -105,9 +107,11 @@ requests from all the nodes are attached with a user (either a serialize\n                     SystemUser.is(authentication.getUser()) == false) {\n                     securityContext.executeAsUser(SystemUser.INSTANCE, (ctx) -> {\n                         final Authentication replaced = securityContext.getAuthentication();\n+                        threadContext.removeTransient(INDICES_PERMISSIONS_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "523699833d46d3d98c43397c34388006b268f641"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU4MDUxMg==", "bodyText": "Same as above.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r480580512", "createdAt": "2020-09-01T01:54:35Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/ServerTransportFilter.java", "diffHunk": "@@ -105,9 +107,11 @@ requests from all the nodes are attached with a user (either a serialize\n                     SystemUser.is(authentication.getUser()) == false) {\n                     securityContext.executeAsUser(SystemUser.INSTANCE, (ctx) -> {\n                         final Authentication replaced = securityContext.getAuthentication();\n+                        threadContext.removeTransient(INDICES_PERMISSIONS_KEY);\n                         authzService.authorize(replaced, securityAction, request, listener);\n                     }, version);\n                 } else {\n+                    threadContext.removeTransient(INDICES_PERMISSIONS_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "523699833d46d3d98c43397c34388006b268f641"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb7ced73f60be5e10e5fdf28b88047a4e0456e0", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/cdb7ced73f60be5e10e5fdf28b88047a4e0456e0", "committedDate": "2020-09-02T16:19:20Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a92e34917a64ed74c1727df9f07c0fa1d98bbd18", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/a92e34917a64ed74c1727df9f07c0fa1d98bbd18", "committedDate": "2020-09-02T20:23:16Z", "message": "Maybe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddefebb4e158ee620add98807e13798cb613f38b", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/ddefebb4e158ee620add98807e13798cb613f38b", "committedDate": "2020-09-02T22:00:27Z", "message": "Test midway"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a1fdcb118f2571661463bc2d3e8c3cae3e3fc56", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/6a1fdcb118f2571661463bc2d3e8c3cae3e3fc56", "committedDate": "2020-09-02T22:26:31Z", "message": "Tests done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb08ee87448c32717fd2e24eaec191eebe55b02", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/6eb08ee87448c32717fd2e24eaec191eebe55b02", "committedDate": "2020-09-02T22:33:41Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3afb0ac651484f7cfc641e65c3a598c3bf17c97d", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/3afb0ac651484f7cfc641e65c3a598c3bf17c97d", "committedDate": "2020-09-03T07:14:03Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDM0NDA5", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-482034409", "createdAt": "2020-09-03T16:59:41Z", "commit": {"oid": "3afb0ac651484f7cfc641e65c3a598c3bf17c97d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0777da659ac30f1a7dca475b5427ba9d18e315fd", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/0777da659ac30f1a7dca475b5427ba9d18e315fd", "committedDate": "2020-09-04T07:10:43Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d0404628d3026ea77d1807df8a19d7e71bed21", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/64d0404628d3026ea77d1807df8a19d7e71bed21", "committedDate": "2020-09-04T13:30:59Z", "message": "Jay's review but with cruft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6692ff373a24ac2f4ec9f18c08514612325b089", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/f6692ff373a24ac2f4ec9f18c08514612325b089", "committedDate": "2020-09-04T13:47:27Z", "message": "Revert putTransient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023f6a2a4560282ba1b1943cc4389a99600e2681", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/023f6a2a4560282ba1b1943cc4389a99600e2681", "committedDate": "2020-09-04T13:53:08Z", "message": "Nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f8adf3b3bcdb42a8be6349b14e10fa20576a1c9", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/9f8adf3b3bcdb42a8be6349b14e10fa20576a1c9", "committedDate": "2020-09-04T14:35:45Z", "message": "Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12f366376841cd8b818f07554e39549e115930d2", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/12f366376841cd8b818f07554e39549e115930d2", "committedDate": "2020-09-04T15:31:34Z", "message": "za test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc52f392b81fd5844c7d8b11e936014b592ae801", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/bc52f392b81fd5844c7d8b11e936014b592ae801", "committedDate": "2020-09-04T16:32:32Z", "message": "ThreadContext test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b151eda454ddcc17bbaf63598c90ce73385446c3", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/b151eda454ddcc17bbaf63598c90ce73385446c3", "committedDate": "2020-09-04T16:44:31Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/6ff4d6d62bbf2deb885ad95cc3646b1f03da8743", "committedDate": "2020-09-04T21:05:19Z", "message": "RestSqlSecurityIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTQwMzkx", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-482940391", "createdAt": "2020-09-04T21:09:36Z", "commit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTowOTozNlrOHNbjWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMTowOTozNlrOHNbjWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NDk1Mg==", "bodyText": "This is not actually an access denied for SQL_ACTION_NAME , it is for a scroll search, i.e. :\n.expect(\"access_denied\", SearchTransportService.QUERY_FETCH_SCROLL_ACTION_NAME, \"full_access\", \"default_native\", empty(), \"InternalScrollSearchRequest\")\n\nuntil now we've erroneously carried over the ACTION_ORIGIN header to the child action, which is audited.\n(and this IT doesn't look at non-SQL audits)", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r483844952", "createdAt": "2020-09-04T21:09:36Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/sql/qa/server/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java", "diffHunk": "@@ -271,8 +271,6 @@ public void testHijackScrollFails() throws Exception {\n \n         createAuditLogAsserter().expectSqlCompositeActionFieldCaps(\"test_admin\", \"test\")\n             .expect(true, SQL_ACTION_NAME, \"full_access\", empty())\n-            // one scroll access denied per shard\n-            .expect(\"access_denied\", SQL_ACTION_NAME, \"full_access\", \"default_native\", empty(), \"InternalScrollSearchRequest\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMjA2OTMz", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-483206933", "createdAt": "2020-09-07T02:21:56Z", "commit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMTo1N1rOHNuVBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMTo1N1rOHNuVBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjU4MQ==", "bodyText": "I found this doc confusing, and needed to read the implementation in order to understand what it was trying to say.\nHere's my attempt (though others may consider it too long)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Removes the specified transient headers from the current context. The removed transient headers can be\n          \n          \n            \n                 * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n          \n          \n            \n                 * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n          \n          \n            \n                 * and the values for the transient headers, as they existed before invoking this method).\n          \n          \n            \n                 * Removes the specified transient headers from the current context. When the returned\n          \n          \n            \n                 * {@link StoredContext} is closed, it will restore these transient headers to their original\n          \n          \n            \n                 * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n          \n          \n            \n                 * Closing the {@code StoredContext} has no affect on any other header - any headers \n          \n          \n            \n                 * (other than those names specified in {@code transientHeadersToStash} that were\n          \n          \n            \n                 * added to the {@code ThreadContext} will be retained.\n          \n          \n            \n                 *\n          \n          \n            \n                 * For example, at the end of the following code, the ThreadContext will have transient\n          \n          \n            \n                 * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n          \n          \n            \n                 * <pre>\n          \n          \n            \n                 * threadContext.putTransient(\"a\", 1);  \n          \n          \n            \n                 * threadContext.putTransient(\"b\", 1);   \n          \n          \n            \n                 * try (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of(\"b\", \"c\")) ) {\n          \n          \n            \n                 *   threadContext.putTransient(\"b\", 2);   \n          \n          \n            \n                 *   threadContext.putTransient(\"c\", 2);   \n          \n          \n            \n                 *   threadContext.putTransient(\"d\", 2); \n          \n          \n            \n                 * }\n          \n          \n            \n                 * </pre>", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484152581", "createdAt": "2020-09-07T02:21:57Z", "author": {"login": "tvernum"}, "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,47 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. The removed transient headers can be\n+     * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n+     * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n+     * and the values for the transient headers, as they existed before invoking this method).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMjM3MTE4", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-483237118", "createdAt": "2020-09-07T04:40:07Z", "commit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNDo0MDowN1rOHNv8iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0OToyNFrOHNw60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3OTA4MA==", "bodyText": "Could we add Objects.requireNonNull(...) in the existing ThreadContext#putTransient method to stop the possibility of null value ever being added as a transient header?\nPlease note I am not suggesting to remove the null check here. In fact, I think it is good since I don't think we would ever need null transient headers. But the fact that null can be put into the headers and the subtle difference between null value and non-existence makes it a bit distracting to think through the behaviour. I had to spend some time to convince myself that the behaviour is correct even if a null value does slip into the headers. Therefore, if a non-null check can be added to putTransient method, it would help making this thought process easier and also benefit future readers.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484179080", "createdAt": "2020-09-07T04:40:07Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,47 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. The removed transient headers can be\n+     * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n+     * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n+     * and the values for the transient headers, as they existed before invoking this method).\n+     */\n+    public StoredContext stashTransientContext(Collection<String> transientHeadersToStash) {\n+        if (transientHeadersToStash.isEmpty()) {\n+            // no-op\n+            return () -> {\n+            };\n+        }\n+        final ThreadContextStruct beforeContext = threadLocal.get();\n+        final Map<String, Object> stashedTransientHeaders = new HashMap<>();\n+        Map<String, Object> newBeforeTransientHeaders = new HashMap<>(beforeContext.transientHeaders);\n+        for (String transientHeaderToStash : transientHeadersToStash) {\n+            Object stashed = newBeforeTransientHeaders.remove(transientHeaderToStash);\n+            if (stashed != null) {\n+                stashedTransientHeaders.put(transientHeaderToStash, stashed);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5MjE1NQ==", "bodyText": "Naming is hard. I'd personally suggest this method to be just called stashTransientHeaders. The difference is to drop the Context bit, which is the confusing bit for me, because the existing stashContext behaves differently in a subtle but important way:\n\nFor the child actions, stashContext assigns it to a default context, while this method assigns it the \"current\" context minus the transients. This is more similar to the behaviour of newStoredContext, which assigns the current context unchanged.\nWhen restoring, stashContext restores the original context, while this method only restore selected trainstent headers. The important difference here is that this method does not restore anything else.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484192155", "createdAt": "2020-09-07T05:38:12Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,47 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. The removed transient headers can be\n+     * restored by closing the returned {@link StoredContext}. If such a transient header does not exist before\n+     * this method is called, it will also not exist after restore (i.e. restoring asserts the existence\n+     * and the values for the transient headers, as they existed before invoking this method).\n+     */\n+    public StoredContext stashTransientContext(Collection<String> transientHeadersToStash) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NDcwNA==", "bodyText": "I am not sure whether it is necessary to package this into SecurityContext class. I'd prefer to have it as a method of AuthorizationService, since it is the only consumer. Therefore it will be close to the context if it is defined in AuthorizationService. Based on the method name, it is also unlikley to be used anywhere else in future.\nWrapping it here leads to many boilerplate code like securityContext.getThreadContext()..., which does not help reading and maybe obsecure the actual importance being only \"transient header stashing\" for future readers.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484194704", "createdAt": "2020-09-07T05:48:16Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -150,6 +151,16 @@ public void executeAsUser(User user, Consumer<StoredContext> consumer, Version v\n         }\n     }\n \n+    /**\n+     * Compared to {@code ThreadContext#stashContext} this only clears the specific transient headers that are used to convey the\n+     * authorization outcome, leaving the other headers in place, just like {@code ThreadContext#newStoredContext(true)}. When\n+     * the returned {@code StoredContext} is closed, the original authorization transient headers are restored (if any did\n+     * not originally exist, it will also not exist after the restore).\n+     */\n+    public StoredContext stashAuthorizationContext() {\n+        return threadContext.stashTransientContext(AuthorizationServiceField.ALL_AUTHORIZATION_KEYS);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NTAyNA==", "bodyText": "It feels important to me to state clearly that other than the specified transient headers, nothing else gets restored. Any other new headers generated by the child actions will be kept.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484195024", "createdAt": "2020-09-07T05:49:24Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityContext.java", "diffHunk": "@@ -150,6 +151,16 @@ public void executeAsUser(User user, Consumer<StoredContext> consumer, Version v\n         }\n     }\n \n+    /**\n+     * Compared to {@code ThreadContext#stashContext} this only clears the specific transient headers that are used to convey the\n+     * authorization outcome, leaving the other headers in place, just like {@code ThreadContext#newStoredContext(true)}. When\n+     * the returned {@code StoredContext} is closed, the original authorization transient headers are restored (if any did\n+     * not originally exist, it will also not exist after the restore).\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff4d6d62bbf2deb885ad95cc3646b1f03da8743"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e141ef35b10801db9665fbd0a5d7df86ed183f", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/90e141ef35b10801db9665fbd0a5d7df86ed183f", "committedDate": "2020-09-07T09:50:33Z", "message": "Update server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java\n\nCo-authored-by: Tim Vernum <tim@adjective.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c279279284b5352ab14acff605832ff4ac28653e", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/c279279284b5352ab14acff605832ff4ac28653e", "committedDate": "2020-09-07T11:48:47Z", "message": "Move stash authorization arouund"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/d1aeb3cef976ab9395aea006bbd65e4c9b6104d3", "committedDate": "2020-09-07T12:24:53Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjEzNDIw", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-484213420", "createdAt": "2020-09-08T14:43:50Z", "commit": {"oid": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0Mzo1MFrOHOgnnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1NzozNFrOHOhTfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjU0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n          \n          \n            \n                 * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"=2} will not be set.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484976543", "createdAt": "2020-09-08T14:43:50Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,61 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. When the returned\n+     * {@link StoredContext} is closed, it will restore these transient headers to their original\n+     * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n+     * Closing the {@code StoredContext} has no affect on any other header - any headers\n+     * (other than those names specified in {@code transientHeadersToStash} that were\n+     * added to the {@code ThreadContext} will be retained.\n+     *\n+     * For example, at the end of the following code, the ThreadContext will have transient\n+     * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDU2Ng==", "bodyText": "I think this should actually make a copy of the struct and restore it, otherwise any additional headers will be leaked back after closing the StoredContext.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // no-op\n          \n          \n            \n                        return () -> {\n          \n          \n            \n                        };\n          \n          \n            \n                        final ThreadContextStruct context = threadLocal.get();\n          \n          \n            \n                        return () -> threadLocal.set(context);\n          \n      \n    \n    \n  \n\nCan you also add a test to ensure this? Scenario I am thinking will fail as the code is written:\nassertNull(threadContext.getTransient(\"a\");\ntry (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of())) {\n    threadContext.putTransient(\"a\", \"1\");\n}\nassertNull(threadContext.getTransient(\"a\");", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484984566", "createdAt": "2020-09-08T14:54:26Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,61 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. When the returned\n+     * {@link StoredContext} is closed, it will restore these transient headers to their original\n+     * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n+     * Closing the {@code StoredContext} has no affect on any other header - any headers\n+     * (other than those names specified in {@code transientHeadersToStash} that were\n+     * added to the {@code ThreadContext} will be retained.\n+     *\n+     * For example, at the end of the following code, the ThreadContext will have transient\n+     * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n+     * <pre>\n+     * threadContext.putTransient(\"a\", 1);\n+     * threadContext.putTransient(\"b\", 1);\n+     * try (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of(\"b\", \"c\")) ) {\n+     *   threadContext.putTransient(\"b\", 2);\n+     *   threadContext.putTransient(\"c\", 2);\n+     *   threadContext.putTransient(\"d\", 2);\n+     * }\n+     * </pre>\n+     */\n+    public StoredContext stashTransientHeaders(Collection<String> transientHeadersToStash) {\n+        if (transientHeadersToStash.isEmpty()) {\n+            // no-op\n+            return () -> {\n+            };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzc3NA==", "bodyText": "Why can't we just restore the beforeContext?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final ThreadContextStruct afterContext = threadLocal.get();\n          \n          \n            \n                        Map<String, Object> newAfterTransientHeaders = new HashMap<>(afterContext.transientHeaders);\n          \n          \n            \n                        // remove the transients that might have been set in the mean time\n          \n          \n            \n                        for (String transientHeaderToStash : transientHeadersToStash) {\n          \n          \n            \n                            newAfterTransientHeaders.remove(transientHeaderToStash);\n          \n          \n            \n                        }\n          \n          \n            \n                        // fill in the values that existed before stashing\n          \n          \n            \n                        newAfterTransientHeaders.putAll(stashedTransientHeaders);\n          \n          \n            \n                        ThreadContextStruct threadContextStruct = new ThreadContextStruct(afterContext.requestHeaders, afterContext.responseHeaders,\n          \n          \n            \n                                newAfterTransientHeaders, afterContext.isSystemContext);\n          \n          \n            \n                        threadLocal.set(threadContextStruct);\n          \n          \n            \n                        return () -> threadLocal.set(beforeContext);", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r484987774", "createdAt": "2020-09-08T14:57:34Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java", "diffHunk": "@@ -134,6 +135,61 @@ public StoredContext stashContext() {\n         };\n     }\n \n+    /**\n+     * Removes the specified transient headers from the current context. When the returned\n+     * {@link StoredContext} is closed, it will restore these transient headers to their original\n+     * value (including restoring them to an <i>unset</i> value if they did not originally exist).\n+     * Closing the {@code StoredContext} has no affect on any other header - any headers\n+     * (other than those names specified in {@code transientHeadersToStash} that were\n+     * added to the {@code ThreadContext} will be retained.\n+     *\n+     * For example, at the end of the following code, the ThreadContext will have transient\n+     * values {@code \"a\"=1}, {@code \"b\"=1}, {@code \"d\"=2} and {@code \"c\"} will not be set.\n+     * <pre>\n+     * threadContext.putTransient(\"a\", 1);\n+     * threadContext.putTransient(\"b\", 1);\n+     * try (ThreadContext.StoredContext restore = threadContext.stashTransientContext(List.of(\"b\", \"c\")) ) {\n+     *   threadContext.putTransient(\"b\", 2);\n+     *   threadContext.putTransient(\"c\", 2);\n+     *   threadContext.putTransient(\"d\", 2);\n+     * }\n+     * </pre>\n+     */\n+    public StoredContext stashTransientHeaders(Collection<String> transientHeadersToStash) {\n+        if (transientHeadersToStash.isEmpty()) {\n+            // no-op\n+            return () -> {\n+            };\n+        }\n+        final ThreadContextStruct beforeContext = threadLocal.get();\n+        final Map<String, Object> stashedTransientHeaders = new HashMap<>();\n+        Map<String, Object> newBeforeTransientHeaders = new HashMap<>(beforeContext.transientHeaders);\n+        for (String transientHeaderToStash : transientHeadersToStash) {\n+            if (newBeforeTransientHeaders.containsKey(transientHeaderToStash)) {\n+                Object stashed = newBeforeTransientHeaders.remove(transientHeaderToStash);\n+                stashedTransientHeaders.put(transientHeaderToStash, stashed);\n+            }\n+        }\n+        if (false == stashedTransientHeaders.isEmpty()) {\n+            ThreadContextStruct threadContextStruct = new ThreadContextStruct(beforeContext.requestHeaders, beforeContext.responseHeaders,\n+                    newBeforeTransientHeaders, beforeContext.isSystemContext);\n+            threadLocal.set(threadContextStruct);\n+        }\n+        return () -> {\n+            final ThreadContextStruct afterContext = threadLocal.get();\n+            Map<String, Object> newAfterTransientHeaders = new HashMap<>(afterContext.transientHeaders);\n+            // remove the transients that might have been set in the mean time\n+            for (String transientHeaderToStash : transientHeadersToStash) {\n+                newAfterTransientHeaders.remove(transientHeaderToStash);\n+            }\n+            // fill in the values that existed before stashing\n+            newAfterTransientHeaders.putAll(stashedTransientHeaders);\n+            ThreadContextStruct threadContextStruct = new ThreadContextStruct(afterContext.requestHeaders, afterContext.responseHeaders,\n+                    newAfterTransientHeaders, afterContext.isSystemContext);\n+            threadLocal.set(threadContextStruct);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1aeb3cef976ab9395aea006bbd65e4c9b6104d3"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81b71752bb4adf5e65121b90de6e402a9bf8511c", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/81b71752bb4adf5e65121b90de6e402a9bf8511c", "committedDate": "2020-09-08T17:03:32Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e739686e8fb8c7adb61aa53313e64c7f77eb929b", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/e739686e8fb8c7adb61aa53313e64c7f77eb929b", "committedDate": "2020-09-08T21:48:38Z", "message": "don't leak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6acb76ddc09ef9ced61853d026f85970d4f8ec01", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/6acb76ddc09ef9ced61853d026f85970d4f8ec01", "committedDate": "2020-09-08T21:57:08Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dc43fd5d32fb81a67a15d2aaea4f231182bbd4a", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/9dc43fd5d32fb81a67a15d2aaea4f231182bbd4a", "committedDate": "2020-09-09T12:36:29Z", "message": "Merge response headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdc45aabf2013edfde7b89c8a4d160dcf003350f", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/cdc45aabf2013edfde7b89c8a4d160dcf003350f", "committedDate": "2020-09-09T12:44:27Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzYzMDYz", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-485363063", "createdAt": "2020-09-09T20:03:51Z", "commit": {"oid": "cdc45aabf2013edfde7b89c8a4d160dcf003350f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTA4MzQ4", "url": "https://github.com/elastic/elasticsearch/pull/61621#pullrequestreview-485508348", "createdAt": "2020-09-10T01:39:49Z", "commit": {"oid": "cdc45aabf2013edfde7b89c8a4d160dcf003350f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMTozOTo1MFrOHPf05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoxNToyMVrOHPiR8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxMjEzMg==", "bodyText": "This is a duplicate of Line 70-72.", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r486012132", "createdAt": "2020-09-10T01:39:50Z", "author": {"login": "ywangd"}, "path": "server/src/test/java/org/elasticsearch/common/util/concurrent/ThreadContextTests.java", "diffHunk": "@@ -56,6 +57,82 @@ public void testStashContext() {\n         assertEquals(\"1\", threadContext.getHeader(\"default\"));\n     }\n \n+    public void testNewContextWithClearedTransients() {\n+        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n+        threadContext.putTransient(\"foo\", \"bar\");\n+        threadContext.putTransient(\"bar\", \"baz\");\n+        threadContext.putHeader(\"foo\", \"bar\");\n+        threadContext.putHeader(\"baz\", \"bar\");\n+        threadContext.addResponseHeader(\"foo\", \"bar\");\n+        threadContext.addResponseHeader(\"bar\", \"qux\");\n+\n+        // this is missing or null\n+        if (randomBoolean()) {\n+            threadContext.putTransient(\"acme\", null);\n+        }\n+\n+        // foo is the only existing transient header that is cleared\n+        try (ThreadContext.StoredContext stashed = threadContext.newStoredContext(false, randomFrom(List.of(\"foo\", \"foo\"),\n+                List.of(\"foo\"), List.of(\"foo\", \"acme\")))) {\n+            // only the requested transient header is cleared\n+            assertNull(threadContext.getTransient(\"foo\"));\n+            // missing header is still missing\n+            assertNull(threadContext.getTransient(\"acme\"));\n+            // other headers are preserved\n+            assertEquals(\"baz\", threadContext.getTransient(\"bar\"));\n+            assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n+            assertEquals(\"bar\", threadContext.getHeader(\"baz\"));\n+            assertEquals(\"bar\", threadContext.getResponseHeaders().get(\"foo\").get(0));\n+            assertEquals(\"qux\", threadContext.getResponseHeaders().get(\"bar\").get(0));\n+\n+            // try override stashed header\n+            threadContext.putTransient(\"foo\", \"acme\");\n+            assertEquals(\"acme\", threadContext.getTransient(\"foo\"));\n+            // add new headers\n+            threadContext.putTransient(\"baz\", \"bar\");\n+            threadContext.putHeader(\"bar\", \"baz\");\n+            threadContext.addResponseHeader(\"baz\", \"bar\");\n+            threadContext.addResponseHeader(\"foo\", \"baz\");\n+        }\n+\n+        // original is restored (it is not overridden)\n+        assertEquals(\"bar\", threadContext.getTransient(\"foo\"));\n+        // headers added inside the stash are NOT preserved\n+        assertNull(threadContext.getTransient(\"baz\"));\n+        assertNull(threadContext.getHeader(\"bar\"));\n+        assertNull(threadContext.getResponseHeaders().get(\"baz\"));\n+        // original headers are restored\n+        assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n+        assertEquals(\"bar\", threadContext.getHeader(\"baz\"));\n+        assertEquals(\"bar\", threadContext.getResponseHeaders().get(\"foo\").get(0));\n+        assertEquals(1, threadContext.getResponseHeaders().get(\"foo\").size());\n+        assertEquals(\"qux\", threadContext.getResponseHeaders().get(\"bar\").get(0));\n+\n+        if (randomBoolean()) {\n+            threadContext.putTransient(\"acme\", null);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc45aabf2013edfde7b89c8a4d160dcf003350f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjMzOQ==", "bodyText": "Is this the right semantic? I understand this is the reason why RestSqlSecurityIT needs to be updated. Technical details aside, if a parent action invokes a child action, should the \"originating action\" still be the parent action? The change here makes it to be the child action. If it's always the child action, why does it need to be called \"originating\" action?", "url": "https://github.com/elastic/elasticsearch/pull/61621#discussion_r486052339", "createdAt": "2020-09-10T04:15:21Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -168,39 +168,46 @@ private AuthorizationInfo getAuthorizationInfoFromContext() {\n      */\n     public void authorize(final Authentication authentication, final String action, final TransportRequest originalRequest,\n                           final ActionListener<Void> listener) throws ElasticsearchSecurityException {\n-        // prior to doing any authorization lets set the originating action in the context only\n-        putTransientIfNonExisting(ORIGINATING_ACTION_KEY, action);\n-\n-        String auditId = AuditUtil.extractRequestId(threadContext);\n-        if (auditId == null) {\n-            // We would like to assert that there is an existing request-id, but if this is a system action, then that might not be\n-            // true because the request-id is generated during authentication\n-            if (isInternalUser(authentication.getUser()) != false) {\n-                auditId = AuditUtil.getOrGenerateRequestId(threadContext);\n-            } else {\n-                auditTrailService.get().tamperedRequest(null, authentication, action, originalRequest);\n-                final String message = \"Attempt to authorize action [\" + action + \"] for [\" + authentication.getUser().principal()\n-                    + \"] without an existing request-id\";\n-                assert false : message;\n-                listener.onFailure(new ElasticsearchSecurityException(message));\n+        /* authorization fills in certain transient headers (that must be observed in the listener as well), therefore we\n+         * begin by clearing the existing ones up (as they might be already set by the authorization of a previous parent\n+         * action (which ran under the same context (on the same node))).\n+         * When the returned {@code StoredContext} is closed, ALL the original headers are restored.\n+         */\n+        try (ThreadContext.StoredContext ignore = threadContext.newStoredContext(false, AuthorizationServiceField.ALL_AUTHORIZATION_KEYS)) {\n+            // prior to doing any authorization lets set the originating action in the context only\n+            threadContext.putTransient(AuthorizationServiceField.ORIGINATING_ACTION_KEY, action);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc45aabf2013edfde7b89c8a4d160dcf003350f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d0599944051c22459c8cbccf680564541a815f8", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/9d0599944051c22459c8cbccf680564541a815f8", "committedDate": "2020-09-10T10:39:13Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb28efe6fbedf88bd12d84fbb84de1cf2b01197", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/3bb28efe6fbedf88bd12d84fbb84de1cf2b01197", "committedDate": "2020-09-10T12:14:29Z", "message": "Nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be4c2f82b49547214ed0a064559fa946ecec0a2a", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/be4c2f82b49547214ed0a064559fa946ecec0a2a", "committedDate": "2020-09-14T15:15:35Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ba2e8d3c5ae80541fba8b47006d8f57ce89e0f", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/06ba2e8d3c5ae80541fba8b47006d8f57ce89e0f", "committedDate": "2020-09-14T18:07:07Z", "message": "Do not override ORIGINATING_ACTION"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "169f68021c75d257b593b22b49997b1e8ae5fc4f", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/169f68021c75d257b593b22b49997b1e8ae5fc4f", "committedDate": "2020-09-14T18:07:57Z", "message": "Merge branch 'master' into authz_action_overrides_privs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4598, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}