{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjA5MDE4", "number": 59847, "title": "Make MetadataFieldMapper extend ParametrizedFieldMapper", "bodyText": "This commit cuts over all metadata field mappers to parametrized format.  Several\nof these mappers are non-configurable, and we add a new FixedTypeParser\nthat simplifies parsing and building of these mapper types.", "createdAt": "2020-07-20T08:47:44Z", "url": "https://github.com/elastic/elasticsearch/pull/59847", "merged": true, "mergeCommit": {"oid": "3a81b110739c3095078b15f2244eee4b4b38c98f"}, "closed": true, "closedAt": "2020-08-10T16:21:43Z", "author": {"login": "romseygeek"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc10oPSgH2gAyNDUzMjA5MDE4OjBlNmM4Njk3ZGVmNWUyZjM2NWIyOGRjYjJkNzUxNjFmZDg1Y2YxNWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9j58nAFqTQ2NDMzMTg1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0e6c8697def5e2f365b28dcb2d75161fd85cf15e", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/0e6c8697def5e2f365b28dcb2d75161fd85cf15e", "committedDate": "2020-07-17T14:23:05Z", "message": "Make MetadataFieldMapper extend ParametrizedFieldMapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db400c18d228352eec21c32877d281595e3f122a", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/db400c18d228352eec21c32877d281595e3f122a", "committedDate": "2020-07-20T08:33:22Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c72af8d88bb9476a319f24ca16af0bf6aa45c56", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/7c72af8d88bb9476a319f24ca16af0bf6aa45c56", "committedDate": "2020-07-20T08:35:17Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "399e48c0a78698d93bed9d66332e36815f63dea3", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/399e48c0a78698d93bed9d66332e36815f63dea3", "committedDate": "2020-07-20T09:00:54Z", "message": "precommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1c12dd661aabd3df4a261549db9bbfea16364a8", "committedDate": "2020-07-20T09:56:35Z", "message": "tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNTY4NTY0", "url": "https://github.com/elastic/elasticsearch/pull/59847#pullrequestreview-451568564", "createdAt": "2020-07-20T12:41:55Z", "commit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo0MTo1NlrOG0KOqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo0MzozMFrOG0KTmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NjcyOQ==", "bodyText": "this seems unrelated?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457346729", "createdAt": "2020-07-20T12:41:56Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java", "diffHunk": "@@ -138,7 +138,7 @@ private static CompletionFieldMapper toType(FieldMapper in) {\n                 b.startArray(n);\n                 c.toXContent(b, ToXContent.EMPTY_PARAMS);\n                 b.endArray();\n-            });\n+            }, ContextMappings::toString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0Nzk5Mg==", "bodyText": "seems like EnabledAttributeMapper is no longer needed, we may be able to remove the class also.", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457347992", "createdAt": "2020-07-20T12:43:30Z", "author": {"login": "javanna"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -19,88 +19,71 @@\n \n package org.elasticsearch.index.mapper.size;\n \n-import org.apache.lucene.document.FieldType;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.support.XContentMapValues;\n-import org.elasticsearch.index.mapper.EnabledAttributeMapper;\n import org.elasticsearch.index.mapper.FieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.index.mapper.MapperParsingException;\n import org.elasticsearch.index.mapper.MetadataFieldMapper;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.elasticsearch.index.mapper.ParametrizedFieldMapper;\n import org.elasticsearch.index.mapper.ParseContext;\n \n import java.io.IOException;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n public class SizeFieldMapper extends MetadataFieldMapper {\n     public static final String NAME = \"_size\";\n \n     public static class Defaults  {\n-        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;\n-\n-        public static final FieldType SIZE_FIELD_TYPE = new FieldType();\n+        public static final boolean ENABLED = false;\n+    }\n \n-        static {\n-            SIZE_FIELD_TYPE.setStored(true);\n-            SIZE_FIELD_TYPE.freeze();\n-        }\n+    private static SizeFieldMapper toType(FieldMapper in) {\n+        return (SizeFieldMapper) in;\n     }\n \n-    public static class Builder extends MetadataFieldMapper.Builder<Builder> {\n+    public static class Builder extends MetadataFieldMapper.Builder {\n \n-        protected EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;\n+        // TODO should this really be updateable?\n+        private final Parameter<Boolean> enabled = Parameter.boolParam(\"enabled\", true, m -> toType(m).enabled(), false);\n \n         private Builder() {\n-            super(NAME, Defaults.SIZE_FIELD_TYPE);\n-            builder = this;\n+            super(NAME);\n         }\n \n-        public Builder enabled(EnabledAttributeMapper enabled) {\n-            this.enabledState = enabled;\n-            return builder;\n+        @Override\n+        protected List<Parameter<?>> getParameters() {\n+            return List.of(enabled);\n         }\n \n         @Override\n         public SizeFieldMapper build(BuilderContext context) {\n-            return new SizeFieldMapper(fieldType, enabledState,\n+            return new SizeFieldMapper(enabled.getValue(),\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n     public static class TypeParser implements MetadataFieldMapper.TypeParser {\n         @Override\n-        public MetadataFieldMapper.Builder<?> parse(String name, Map<String, Object> node,\n+        public MetadataFieldMapper.Builder parse(String name, Map<String, Object> node,\n                                                        ParserContext parserContext) throws MapperParsingException {\n             Builder builder = new Builder();\n-            for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext();) {\n-                Map.Entry<String, Object> entry = iterator.next();\n-                String fieldName = entry.getKey();\n-                Object fieldNode = entry.getValue();\n-                if (fieldName.equals(\"enabled\")) {\n-                    boolean enabled = XContentMapValues.nodeBooleanValue(fieldNode, name + \".enabled\");\n-                    builder.enabled(enabled ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED);\n-                    iterator.remove();\n-                }\n-            }\n+            builder.parse(name, parserContext, node);\n             return builder;\n         }\n \n         @Override\n         public MetadataFieldMapper getDefault(ParserContext context) {\n-            return new SizeFieldMapper(Defaults.SIZE_FIELD_TYPE, Defaults.ENABLED_STATE,\n+            return new SizeFieldMapper(Defaults.ENABLED,\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n-    private EnabledAttributeMapper enabledState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzAxNTA3", "url": "https://github.com/elastic/elasticsearch/pull/59847#pullrequestreview-451701507", "createdAt": "2020-07-20T15:11:50Z", "commit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMTo1MFrOG0SRfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMzoxMVrOG0S9mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODUyNg==", "bodyText": "Do we need the Defaults object at all any more?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457478526", "createdAt": "2020-07-20T15:11:50Z", "author": {"login": "nik9000"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -19,88 +19,71 @@\n \n package org.elasticsearch.index.mapper.size;\n \n-import org.apache.lucene.document.FieldType;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.support.XContentMapValues;\n-import org.elasticsearch.index.mapper.EnabledAttributeMapper;\n import org.elasticsearch.index.mapper.FieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.index.mapper.MapperParsingException;\n import org.elasticsearch.index.mapper.MetadataFieldMapper;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.elasticsearch.index.mapper.ParametrizedFieldMapper;\n import org.elasticsearch.index.mapper.ParseContext;\n \n import java.io.IOException;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n public class SizeFieldMapper extends MetadataFieldMapper {\n     public static final String NAME = \"_size\";\n \n     public static class Defaults  {\n-        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;\n-\n-        public static final FieldType SIZE_FIELD_TYPE = new FieldType();\n+        public static final boolean ENABLED = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4MDU5Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457480592", "createdAt": "2020-07-20T15:13:52Z", "author": {"login": "nik9000"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -19,88 +19,71 @@\n \n package org.elasticsearch.index.mapper.size;\n \n-import org.apache.lucene.document.FieldType;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.support.XContentMapValues;\n-import org.elasticsearch.index.mapper.EnabledAttributeMapper;\n import org.elasticsearch.index.mapper.FieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n import org.elasticsearch.index.mapper.MapperParsingException;\n import org.elasticsearch.index.mapper.MetadataFieldMapper;\n import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.elasticsearch.index.mapper.ParametrizedFieldMapper;\n import org.elasticsearch.index.mapper.ParseContext;\n \n import java.io.IOException;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n public class SizeFieldMapper extends MetadataFieldMapper {\n     public static final String NAME = \"_size\";\n \n     public static class Defaults  {\n-        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;\n-\n-        public static final FieldType SIZE_FIELD_TYPE = new FieldType();\n+        public static final boolean ENABLED = false;\n+    }\n \n-        static {\n-            SIZE_FIELD_TYPE.setStored(true);\n-            SIZE_FIELD_TYPE.freeze();\n-        }\n+    private static SizeFieldMapper toType(FieldMapper in) {\n+        return (SizeFieldMapper) in;\n     }\n \n-    public static class Builder extends MetadataFieldMapper.Builder<Builder> {\n+    public static class Builder extends MetadataFieldMapper.Builder {\n \n-        protected EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;\n+        // TODO should this really be updateable?\n+        private final Parameter<Boolean> enabled = Parameter.boolParam(\"enabled\", true, m -> toType(m).enabled(), false);\n \n         private Builder() {\n-            super(NAME, Defaults.SIZE_FIELD_TYPE);\n-            builder = this;\n+            super(NAME);\n         }\n \n-        public Builder enabled(EnabledAttributeMapper enabled) {\n-            this.enabledState = enabled;\n-            return builder;\n+        @Override\n+        protected List<Parameter<?>> getParameters() {\n+            return List.of(enabled);\n         }\n \n         @Override\n         public SizeFieldMapper build(BuilderContext context) {\n-            return new SizeFieldMapper(fieldType, enabledState,\n+            return new SizeFieldMapper(enabled.getValue(),\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n     public static class TypeParser implements MetadataFieldMapper.TypeParser {\n         @Override\n-        public MetadataFieldMapper.Builder<?> parse(String name, Map<String, Object> node,\n+        public MetadataFieldMapper.Builder parse(String name, Map<String, Object> node,\n                                                        ParserContext parserContext) throws MapperParsingException {\n             Builder builder = new Builder();\n-            for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext();) {\n-                Map.Entry<String, Object> entry = iterator.next();\n-                String fieldName = entry.getKey();\n-                Object fieldNode = entry.getValue();\n-                if (fieldName.equals(\"enabled\")) {\n-                    boolean enabled = XContentMapValues.nodeBooleanValue(fieldNode, name + \".enabled\");\n-                    builder.enabled(enabled ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED);\n-                    iterator.remove();\n-                }\n-            }\n+            builder.parse(name, parserContext, node);\n             return builder;\n         }\n \n         @Override\n         public MetadataFieldMapper getDefault(ParserContext context) {\n-            return new SizeFieldMapper(Defaults.SIZE_FIELD_TYPE, Defaults.ENABLED_STATE,\n+            return new SizeFieldMapper(Defaults.ENABLED,\n                 new NumberFieldMapper.NumberFieldType(NAME, NumberFieldMapper.NumberType.INTEGER));\n         }\n     }\n \n-    private EnabledAttributeMapper enabledState;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0Nzk5Mg=="}, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4MDk4Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457480986", "createdAt": "2020-07-20T15:14:14Z", "author": {"login": "nik9000"}, "path": "plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java", "diffHunk": "@@ -129,37 +112,15 @@ public void parse(ParseContext context) {\n \n     @Override\n     protected void parseCreateField(ParseContext context) {\n-        if (!enabledState.enabled) {\n+        if (enabled == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4NzU5NQ==", "bodyText": "I wonder if ever allowed disabling indexing the id! Oh well, \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457487595", "createdAt": "2020-07-20T15:20:51Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IdFieldMapper.java", "diffHunk": "@@ -277,19 +263,13 @@ public void preParse(ParseContext context) throws IOException {\n \n     @Override\n     protected void parseCreateField(ParseContext context) throws IOException {\n-        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n-            BytesRef id = Uid.encodeId(context.sourceToParse().id());\n-            context.doc().add(new Field(NAME, id, fieldType));\n-        }\n+        BytesRef id = Uid.encodeId(context.sourceToParse().id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4OTgxNg==", "bodyText": "Can add javadoc?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r457489816", "createdAt": "2020-07-20T15:23:11Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java", "diffHunk": "@@ -45,25 +45,63 @@\n         MetadataFieldMapper getDefault(ParserContext parserContext);\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    public abstract static class Builder<T extends Builder<T>> extends FieldMapper.Builder<T> {\n-        public Builder(String name, FieldType fieldType) {\n-            super(name, fieldType);\n+    public static class FixedTypeParser implements TypeParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c12dd661aabd3df4a261549db9bbfea16364a8"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e04ff5cdda5daa42ab81a9fc48055b8949c730", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/f7e04ff5cdda5daa42ab81a9fc48055b8949c730", "committedDate": "2020-07-20T16:28:32Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11388ca6f1fa64b05bfdfd6f01bca1f8030afa08", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/11388ca6f1fa64b05bfdfd6f01bca1f8030afa08", "committedDate": "2020-07-21T11:09:20Z", "message": "sizemapper enabled param needs to use Explicit; feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a94e565888174226a6d3e7511977f943929bdc1", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/7a94e565888174226a6d3e7511977f943929bdc1", "committedDate": "2020-07-21T13:14:21Z", "message": "ConfigurableTypeParser; Explicit needs equals/hashcode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1eae9227e0c0ab06ce4836e272518a48d3ae04c", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/e1eae9227e0c0ab06ce4836e272518a48d3ae04c", "committedDate": "2020-07-21T13:17:28Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efe31fa9c0df94d0b97fc0d077a0421baad24da7", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/efe31fa9c0df94d0b97fc0d077a0421baad24da7", "committedDate": "2020-07-21T13:21:09Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b23820dcbbbea0611119a9f35b26edc35a5b589", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/7b23820dcbbbea0611119a9f35b26edc35a5b589", "committedDate": "2020-07-21T13:23:08Z", "message": "imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4747d0075b57d76f195bbd0667f3d1238bd9e90e", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/4747d0075b57d76f195bbd0667f3d1238bd9e90e", "committedDate": "2020-08-03T07:47:33Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046717d784c0098c121a36989e1cc4d1534ed116", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/046717d784c0098c121a36989e1cc4d1534ed116", "committedDate": "2020-08-05T08:55:17Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ab5c2633537234921b2a23b10221f37b989452", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7ab5c2633537234921b2a23b10221f37b989452", "committedDate": "2020-08-05T09:23:46Z", "message": "add specific tests for conflict serialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTk2ODc2", "url": "https://github.com/elastic/elasticsearch/pull/59847#pullrequestreview-459996876", "createdAt": "2020-08-03T12:47:32Z", "commit": {"oid": "4747d0075b57d76f195bbd0667f3d1238bd9e90e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjo0NzozM1rOG64JiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjo0NzozM1rOG64JiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM5MDUzNw==", "bodyText": "I think you only override this here to make it final, right? Do you need this method definition at all now?", "url": "https://github.com/elastic/elasticsearch/pull/59847#discussion_r464390537", "createdAt": "2020-08-03T12:47:33Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ParametrizedFieldMapper.java", "diffHunk": "@@ -105,7 +108,7 @@ protected final void mergeOptions(FieldMapper other, List<String> conflicts) {\n     }\n \n     @Override\n-    public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4747d0075b57d76f195bbd0667f3d1238bd9e90e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79e6dce3af23f45fee6e5e0651c9fd1b1462c77e", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/79e6dce3af23f45fee6e5e0651c9fd1b1462c77e", "committedDate": "2020-08-06T08:41:28Z", "message": "remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1e2a1cb07120a3ba6b8b96f58c4eb4318a6c41", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/ad1e2a1cb07120a3ba6b8b96f58c4eb4318a6c41", "committedDate": "2020-08-06T08:41:52Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87a57c80f7e58b298ccc5e49953c547f6fe913d4", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/87a57c80f7e58b298ccc5e49953c547f6fe913d4", "committedDate": "2020-08-10T11:31:20Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/metadata-params"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzMxODU1", "url": "https://github.com/elastic/elasticsearch/pull/59847#pullrequestreview-464331855", "createdAt": "2020-08-10T15:25:26Z", "commit": {"oid": "87a57c80f7e58b298ccc5e49953c547f6fe913d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4241, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}