{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzQ3NDc3", "number": 61358, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyMDozN1rOEaZgUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowMDoyOFrOEa4JWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTE2MzA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyMDozOFrOHDzhCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxOTo1N1rOHEJREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1MTgxNg==", "bodyText": "No need for this kind of extra atomic boolean+check, the BufferedOutputStream is a filter output stream that will only close once.", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r473751816", "createdAt": "2020-08-20T08:20:38Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -88,56 +142,64 @@ public StreamInput streamInput(StreamInput in) throws IOException {\n             throw new IllegalArgumentException(\"Input stream is not compressed with DEFLATE!\");\n         }\n \n-        final boolean nowrap = true;\n-        final Inflater inflater = new Inflater(nowrap);\n-        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE);\n-        decompressedIn = new BufferedInputStream(decompressedIn, BUFFER_SIZE);\n-        return new InputStreamStreamInput(decompressedIn) {\n-            final AtomicBoolean closed = new AtomicBoolean(false);\n-\n+        final ReleasableReference<Inflater> current = inflaterForStreamRef.get();\n+        final Releasable releasable;\n+        final Inflater inflater;\n+        if (current.inUse) {\n+            // Nested de-compression streams should not happen but we still handle them safely by using a fresh Inflater\n+            inflater = new Inflater(true);\n+            releasable = inflater::end;\n+        } else {\n+            inflater = current.get();\n+            releasable = current;\n+        }\n+        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE) {\n+            @Override\n             public void close() throws IOException {\n                 try {\n                     super.close();\n                 } finally {\n-                    if (closed.compareAndSet(false, true)) {\n-                        // important to release native memory\n-                        inflater.end();\n-                    }\n+                    releasable.close();\n                 }\n             }\n         };\n+        return new InputStreamStreamInput(new BufferedInputStream(decompressedIn, BUFFER_SIZE));\n     }\n \n     @Override\n     public StreamOutput streamOutput(OutputStream out) throws IOException {\n         out.write(HEADER);\n-        final boolean nowrap = true;\n-        final Deflater deflater = new Deflater(LEVEL, nowrap);\n+        final ReleasableReference<Deflater> current = deflaterForStreamRef.get();\n+        final Releasable releasable;\n+        final Deflater deflater;\n+        if (current.inUse) {\n+            // Nested compression streams should not happen but we still handle them safely by using a fresh Deflater\n+            deflater = new Deflater(LEVEL, true);\n+            releasable = deflater::end;\n+        } else {\n+            deflater = current.get();\n+            releasable = current;\n+        }\n         final boolean syncFlush = true;\n-        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(out, deflater, BUFFER_SIZE, syncFlush);\n-        OutputStream compressedOut = new BufferedOutputStream(deflaterOutputStream, BUFFER_SIZE);\n-        return new OutputStreamStreamOutput(compressedOut) {\n-            final AtomicBoolean closed = new AtomicBoolean(false);\n-\n+        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(out, deflater, BUFFER_SIZE, syncFlush) {\n+            @Override\n             public void close() throws IOException {\n                 try {\n                     super.close();\n                 } finally {\n-                    if (closed.compareAndSet(false, true)) {\n-                        // important to release native memory\n-                        deflater.end();\n-                    }\n+                    releasable.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwODE3Nw==", "bodyText": "Let's add this as a code comment", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474108177", "createdAt": "2020-08-20T16:19:57Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -88,56 +142,64 @@ public StreamInput streamInput(StreamInput in) throws IOException {\n             throw new IllegalArgumentException(\"Input stream is not compressed with DEFLATE!\");\n         }\n \n-        final boolean nowrap = true;\n-        final Inflater inflater = new Inflater(nowrap);\n-        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE);\n-        decompressedIn = new BufferedInputStream(decompressedIn, BUFFER_SIZE);\n-        return new InputStreamStreamInput(decompressedIn) {\n-            final AtomicBoolean closed = new AtomicBoolean(false);\n-\n+        final ReleasableReference<Inflater> current = inflaterForStreamRef.get();\n+        final Releasable releasable;\n+        final Inflater inflater;\n+        if (current.inUse) {\n+            // Nested de-compression streams should not happen but we still handle them safely by using a fresh Inflater\n+            inflater = new Inflater(true);\n+            releasable = inflater::end;\n+        } else {\n+            inflater = current.get();\n+            releasable = current;\n+        }\n+        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE) {\n+            @Override\n             public void close() throws IOException {\n                 try {\n                     super.close();\n                 } finally {\n-                    if (closed.compareAndSet(false, true)) {\n-                        // important to release native memory\n-                        inflater.end();\n-                    }\n+                    releasable.close();\n                 }\n             }\n         };\n+        return new InputStreamStreamInput(new BufferedInputStream(decompressedIn, BUFFER_SIZE));\n     }\n \n     @Override\n     public StreamOutput streamOutput(OutputStream out) throws IOException {\n         out.write(HEADER);\n-        final boolean nowrap = true;\n-        final Deflater deflater = new Deflater(LEVEL, nowrap);\n+        final ReleasableReference<Deflater> current = deflaterForStreamRef.get();\n+        final Releasable releasable;\n+        final Deflater deflater;\n+        if (current.inUse) {\n+            // Nested compression streams should not happen but we still handle them safely by using a fresh Deflater\n+            deflater = new Deflater(LEVEL, true);\n+            releasable = deflater::end;\n+        } else {\n+            deflater = current.get();\n+            releasable = current;\n+        }\n         final boolean syncFlush = true;\n-        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(out, deflater, BUFFER_SIZE, syncFlush);\n-        OutputStream compressedOut = new BufferedOutputStream(deflaterOutputStream, BUFFER_SIZE);\n-        return new OutputStreamStreamOutput(compressedOut) {\n-            final AtomicBoolean closed = new AtomicBoolean(false);\n-\n+        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(out, deflater, BUFFER_SIZE, syncFlush) {\n+            @Override\n             public void close() throws IOException {\n                 try {\n                     super.close();\n                 } finally {\n-                    if (closed.compareAndSet(false, true)) {\n-                        // important to release native memory\n-                        deflater.end();\n-                    }\n+                    releasable.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1MTgxNg=="}, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTE2NzA5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyMToyMVrOHDzjpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxOTo0MlrOHEJQaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1MjQ4NA==", "bodyText": "No need for this kind of extra atomic boolean+check, the BufferedInputStream will only close once.", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r473752484", "createdAt": "2020-08-20T08:21:21Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -88,56 +142,64 @@ public StreamInput streamInput(StreamInput in) throws IOException {\n             throw new IllegalArgumentException(\"Input stream is not compressed with DEFLATE!\");\n         }\n \n-        final boolean nowrap = true;\n-        final Inflater inflater = new Inflater(nowrap);\n-        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE);\n-        decompressedIn = new BufferedInputStream(decompressedIn, BUFFER_SIZE);\n-        return new InputStreamStreamInput(decompressedIn) {\n-            final AtomicBoolean closed = new AtomicBoolean(false);\n-\n+        final ReleasableReference<Inflater> current = inflaterForStreamRef.get();\n+        final Releasable releasable;\n+        final Inflater inflater;\n+        if (current.inUse) {\n+            // Nested de-compression streams should not happen but we still handle them safely by using a fresh Inflater\n+            inflater = new Inflater(true);\n+            releasable = inflater::end;\n+        } else {\n+            inflater = current.get();\n+            releasable = current;\n+        }\n+        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE) {\n+            @Override\n             public void close() throws IOException {\n                 try {\n                     super.close();\n                 } finally {\n-                    if (closed.compareAndSet(false, true)) {\n-                        // important to release native memory\n-                        inflater.end();\n-                    }\n+                    releasable.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwODAwOA==", "bodyText": "Let's add this as a code comment", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474108008", "createdAt": "2020-08-20T16:19:42Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -88,56 +142,64 @@ public StreamInput streamInput(StreamInput in) throws IOException {\n             throw new IllegalArgumentException(\"Input stream is not compressed with DEFLATE!\");\n         }\n \n-        final boolean nowrap = true;\n-        final Inflater inflater = new Inflater(nowrap);\n-        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE);\n-        decompressedIn = new BufferedInputStream(decompressedIn, BUFFER_SIZE);\n-        return new InputStreamStreamInput(decompressedIn) {\n-            final AtomicBoolean closed = new AtomicBoolean(false);\n-\n+        final ReleasableReference<Inflater> current = inflaterForStreamRef.get();\n+        final Releasable releasable;\n+        final Inflater inflater;\n+        if (current.inUse) {\n+            // Nested de-compression streams should not happen but we still handle them safely by using a fresh Inflater\n+            inflater = new Inflater(true);\n+            releasable = inflater::end;\n+        } else {\n+            inflater = current.get();\n+            releasable = current;\n+        }\n+        InputStream decompressedIn = new InflaterInputStream(in, inflater, BUFFER_SIZE) {\n+            @Override\n             public void close() throws IOException {\n                 try {\n                     super.close();\n                 } finally {\n-                    if (closed.compareAndSet(false, true)) {\n-                        // important to release native memory\n-                        inflater.end();\n-                    }\n+                    releasable.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1MjQ4NA=="}, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTE3MjM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyMjoyMVrOHDznDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyMjoyMVrOHDznDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1MzM1OA==", "bodyText": "This was just a bug where we failed to close the stream and that became visible with the changes in this PR.", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r473753358", "createdAt": "2020-08-20T08:22:21Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java", "diffHunk": "@@ -1331,10 +1332,11 @@ private void cacheRepositoryData(BytesReference updated, long generation) {\n     }\n \n     private RepositoryData repositoryDataFromCachedEntry(Tuple<Long, BytesReference> cacheEntry) throws IOException {\n-        return RepositoryData.snapshotsFromXContent(\n-            XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY,\n-                LoggingDeprecationHandler.INSTANCE,\n-                CompressorFactory.COMPRESSOR.streamInput(cacheEntry.v2().streamInput())), cacheEntry.v1(), false);\n+        try (StreamInput input = CompressorFactory.COMPRESSOR.streamInput(cacheEntry.v2().streamInput())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTE4MDg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyMzo1MVrOHDzsfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyMzo1MVrOHDzsfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1NDc0OQ==", "bodyText": "We do have compressed mapping sources in the cluster state that itself comes to us in compressed form so not closing here would actually lead to not having nested decompression streams so I added the early close.", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r473754749", "createdAt": "2020-08-20T08:23:51Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java", "diffHunk": "@@ -145,6 +145,8 @@ private PublishWithJoinResponse handleIncomingPublishRequest(BytesTransportReque\n                 final ClusterState incomingState;\n                 try {\n                     incomingState = ClusterState.readFrom(in, transportService.getLocalNode());\n+                    // Close early to release resources used by the de-compression as early as possible\n+                    in.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMxOTk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowODo0MlrOHEI08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowODo0MlrOHEI08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDk3Nw==", "bodyText": "How about using try with resources?", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474100977", "createdAt": "2020-08-20T16:08:42Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java", "diffHunk": "@@ -145,6 +145,8 @@ private PublishWithJoinResponse handleIncomingPublishRequest(BytesTransportReque\n                 final ClusterState incomingState;\n                 try {\n                     incomingState = ClusterState.readFrom(in, transportService.getLocalNode());\n+                    // Close early to release resources used by the de-compression as early as possible\n+                    in.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMyNDE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowOTozOFrOHEI3hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODozNDowM1rOHEOTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMTYzNw==", "bodyText": "Is it that important to close before applying the diff here? Otherwise you could use try with resources", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474101637", "createdAt": "2020-08-20T16:09:38Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java", "diffHunk": "@@ -165,6 +167,8 @@ private PublishWithJoinResponse handleIncomingPublishRequest(BytesTransportReque\n                     ClusterState incomingState;\n                     try {\n                         Diff<ClusterState> diff = ClusterState.readDiffFrom(in, lastSeen.nodes().getLocalNode());\n+                        // Close early to release resources used by the de-compression as early as possible\n+                        in.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5MDc5NQ==", "bodyText": "Yea we want to get the handle for the Inflater before because index metadata operations will use it potentially, but just closing here is pretty lazy admittedly, I'll make it nicer using try-with-resources.", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474190795", "createdAt": "2020-08-20T18:34:03Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java", "diffHunk": "@@ -165,6 +167,8 @@ private PublishWithJoinResponse handleIncomingPublishRequest(BytesTransportReque\n                     ClusterState incomingState;\n                     try {\n                         Diff<ClusterState> diff = ClusterState.readDiffFrom(in, lastSeen.nodes().getLocalNode());\n+                        // Close early to release resources used by the de-compression as early as possible\n+                        in.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMTYzNw=="}, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMyNTY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/compress/Compressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMDowMFrOHEI4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMDowMFrOHEI4eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMTg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a new stream input that decompresses the contents read from teh provided stream input.\n          \n          \n            \n                 * Creates a new stream input that decompresses the contents read from the provided stream input.", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474101880", "createdAt": "2020-08-20T16:10:00Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/compress/Compressor.java", "diffHunk": "@@ -32,11 +32,19 @@\n \n     int headerLength();\n \n+    /**\n+     * Creates a new stream input that decompresses the contents read from teh provided stream input.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMzMjg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/compress/Compressor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMTo0M1rOHEI89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMTo0M1rOHEI89A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMzAyOA==", "bodyText": "Maybe name this method something like unsafeStreamInput or threadLocalStreamInput?", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474103028", "createdAt": "2020-08-20T16:11:43Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/compress/Compressor.java", "diffHunk": "@@ -32,11 +32,19 @@\n \n     int headerLength();\n \n+    /**\n+     * Creates a new stream input that decompresses the contents read from teh provided stream input.\n+     * Closing the returned {@link StreamInput} will close the provided stream input.\n+     * Note: The returned stream may only be used on the thread that created it as it might use thread-local resources and must be safely\n+     * closed after use\n+     */\n     StreamInput streamInput(StreamInput in) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMzNjU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/compress/Compressor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMjozNlrOHEI_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0ODo1NlrOHEOz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMzYwMw==", "bodyText": "Maybe name this method something like unsafeStreamOutput or threadLocalStreamOutput?", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474103603", "createdAt": "2020-08-20T16:12:36Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/compress/Compressor.java", "diffHunk": "@@ -32,11 +32,19 @@\n \n     int headerLength();\n \n+    /**\n+     * Creates a new stream input that decompresses the contents read from teh provided stream input.\n+     * Closing the returned {@link StreamInput} will close the provided stream input.\n+     * Note: The returned stream may only be used on the thread that created it as it might use thread-local resources and must be safely\n+     * closed after use\n+     */\n     StreamInput streamInput(StreamInput in) throws IOException;\n \n     /**\n      * Creates a new stream output that compresses the contents and writes to the provided stream\n      * output. Closing the returned {@link StreamOutput} will close the provided stream output.\n+     * Note: The returned stream may only be used on the thread that created it as it might use thread-local resources and must be safely\n+     * closed after use\n      */\n     StreamOutput streamOutput(OutputStream out) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTAwOA==", "bodyText": "edited: nevermind my previous comment unsafeStreamOutput is fine :) I'll special case the http exporter situation another way :)", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474199008", "createdAt": "2020-08-20T18:48:56Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/compress/Compressor.java", "diffHunk": "@@ -32,11 +32,19 @@\n \n     int headerLength();\n \n+    /**\n+     * Creates a new stream input that decompresses the contents read from teh provided stream input.\n+     * Closing the returned {@link StreamInput} will close the provided stream input.\n+     * Note: The returned stream may only be used on the thread that created it as it might use thread-local resources and must be safely\n+     * closed after use\n+     */\n     StreamInput streamInput(StreamInput in) throws IOException;\n \n     /**\n      * Creates a new stream output that compresses the contents and writes to the provided stream\n      * output. Closing the returned {@link StreamOutput} will close the provided stream output.\n+     * Note: The returned stream may only be used on the thread that created it as it might use thread-local resources and must be safely\n+     * closed after use\n      */\n     StreamOutput streamOutput(OutputStream out) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMzYwMw=="}, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM0NzEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxNToxNFrOHEJFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxNToxNFrOHEJFgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNTIxNw==", "bodyText": "s/user/thread ?\nAlso maybe add a note that this is only used when assertions are enabled?", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474105217", "createdAt": "2020-08-20T16:15:14Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -73,6 +74,59 @@ public int headerLength() {\n         return HEADER.length;\n     }\n \n+    // Reusable inflater reference for streaming decompression\n+    private static final ThreadLocal<ReleasableReference<Inflater>> inflaterForStreamRef = ThreadLocal.withInitial(() -> {\n+        final Inflater inflater = new Inflater(true);\n+        return new ReleasableReference<>(inflater, inflater::reset);\n+    });\n+\n+    // Reusable deflater reference for streaming compression\n+    private static final ThreadLocal<ReleasableReference<Deflater>> deflaterForStreamRef = ThreadLocal.withInitial(() -> {\n+        final Deflater deflater = new Deflater(LEVEL, true);\n+        return new ReleasableReference<>(deflater, deflater::reset);\n+    });\n+\n+    // Reference to a deflater or inflater that is used to make sure we do not use the same stream twice when nesting streams.\n+    private static final class ReleasableReference<T> implements Releasable {\n+\n+        protected final T resource;\n+\n+        private final Releasable releasable;\n+\n+        // Thread that is currently using this reference\n+        private Thread user = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d717a47cdb6d00c023cf1d04f02438beed19a4c6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjE4MzI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTowMDoyOFrOHEkMRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTozODo1MFrOHFq4iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0OTMxOA==", "bodyText": "I know this is breaking with the style of the Compressor interface a little but I figured it was the simplest to just expose this as a static utility directly.\nAlso, I wonder if we shouldn't just make all the methods on this class static and do away with the Compressor interface. We only have one implementation that we use via its singleton, so there isn't much point in doing in having that interface around?", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r474549318", "createdAt": "2020-08-21T09:00:28Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -73,8 +74,75 @@ public int headerLength() {\n         return HEADER.length;\n     }\n \n+    // Reusable inflater reference for streaming decompression\n+    private static final ThreadLocal<ReleasableReference<Inflater>> inflaterForStreamRef = ThreadLocal.withInitial(() -> {\n+        final Inflater inflater = new Inflater(true);\n+        return new ReleasableReference<>(inflater, inflater::reset);\n+    });\n+\n+    // Reusable deflater reference for streaming compression\n+    private static final ThreadLocal<ReleasableReference<Deflater>> deflaterForStreamRef = ThreadLocal.withInitial(() -> {\n+        final Deflater deflater = new Deflater(LEVEL, true);\n+        return new ReleasableReference<>(deflater, deflater::reset);\n+    });\n+\n+    // Reference to a deflater or inflater that is used to make sure we do not use the same stream twice when nesting streams.\n+    private static final class ReleasableReference<T> implements Releasable {\n+\n+        protected final T resource;\n+\n+        private final Releasable releasable;\n+\n+        // Thread that is currently using this reference. Only used for assertions and only assigned if assertions are enabled.\n+        private Thread thread = null;\n+\n+        // true if this reference is currently in use and is not available for re-use\n+        boolean inUse;\n+\n+        protected ReleasableReference(T resource, Releasable releasable) {\n+            this.resource = resource;\n+            this.releasable = releasable;\n+        }\n+\n+        T get() {\n+            if (Assertions.ENABLED) {\n+                assert thread == null;\n+                thread = Thread.currentThread();\n+            }\n+            assert inUse == false;\n+            inUse = true;\n+            return resource;\n+        }\n+\n+        @Override\n+        public void close() {\n+            if (Assertions.ENABLED) {\n+                assert thread == Thread.currentThread() :\n+                        \"Opened on [\" + thread.getName() + \"] but closed on [\" + Thread.currentThread().getName() + \"]\";\n+                thread = null;\n+            }\n+            assert inUse;\n+            inUse = false;\n+            releasable.close();\n+        }\n+    }\n+\n     @Override\n-    public StreamInput streamInput(StreamInput in) throws IOException {\n+    public StreamInput threadLocalStreamInput(StreamInput in) throws IOException {\n+        return new InputStreamStreamInput(inputStream(in, true));\n+    }\n+\n+    /**\n+     * Creates a new input stream that decompresses the contents read from the provided input stream.\n+     * Closing the returned stream will close the provided input stream.\n+     * Optionally uses thread-local, pooled resources to save off-heap allocations if the stream is guaranteed to not escape the current\n+     * thread.\n+     *\n+     * @param in           input stream to wrap\n+     * @param threadLocal  whether this stream will only be used on the current thread or not\n+     * @return             decompressing stream\n+     */\n+    public static InputStream inputStream(InputStream in, boolean threadLocal) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b01fcb285e7ef40bbd4d735d0b1306053b9d02"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNzUzMQ==", "bodyText": "I'm fine with this as a one-off special case.\n\nAlso, I wonder if we shouldn't just make all the methods on this class static and do away with the Compressor interface. We only have one implementation that we use via its singleton, so there isn't much point in doing in having that interface around?\n\nThis is a good point; there was a time when both DEFLATE and LZF were available. I hesitate on removing the interface since there may be a desire to allow other compression algorithms in the future; I'm not aware of any specific effort but that doesn't mean there won't be one to investigate/add something else like Zstd.", "url": "https://github.com/elastic/elasticsearch/pull/61358#discussion_r475707531", "createdAt": "2020-08-24T15:38:50Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -73,8 +74,75 @@ public int headerLength() {\n         return HEADER.length;\n     }\n \n+    // Reusable inflater reference for streaming decompression\n+    private static final ThreadLocal<ReleasableReference<Inflater>> inflaterForStreamRef = ThreadLocal.withInitial(() -> {\n+        final Inflater inflater = new Inflater(true);\n+        return new ReleasableReference<>(inflater, inflater::reset);\n+    });\n+\n+    // Reusable deflater reference for streaming compression\n+    private static final ThreadLocal<ReleasableReference<Deflater>> deflaterForStreamRef = ThreadLocal.withInitial(() -> {\n+        final Deflater deflater = new Deflater(LEVEL, true);\n+        return new ReleasableReference<>(deflater, deflater::reset);\n+    });\n+\n+    // Reference to a deflater or inflater that is used to make sure we do not use the same stream twice when nesting streams.\n+    private static final class ReleasableReference<T> implements Releasable {\n+\n+        protected final T resource;\n+\n+        private final Releasable releasable;\n+\n+        // Thread that is currently using this reference. Only used for assertions and only assigned if assertions are enabled.\n+        private Thread thread = null;\n+\n+        // true if this reference is currently in use and is not available for re-use\n+        boolean inUse;\n+\n+        protected ReleasableReference(T resource, Releasable releasable) {\n+            this.resource = resource;\n+            this.releasable = releasable;\n+        }\n+\n+        T get() {\n+            if (Assertions.ENABLED) {\n+                assert thread == null;\n+                thread = Thread.currentThread();\n+            }\n+            assert inUse == false;\n+            inUse = true;\n+            return resource;\n+        }\n+\n+        @Override\n+        public void close() {\n+            if (Assertions.ENABLED) {\n+                assert thread == Thread.currentThread() :\n+                        \"Opened on [\" + thread.getName() + \"] but closed on [\" + Thread.currentThread().getName() + \"]\";\n+                thread = null;\n+            }\n+            assert inUse;\n+            inUse = false;\n+            releasable.close();\n+        }\n+    }\n+\n     @Override\n-    public StreamInput streamInput(StreamInput in) throws IOException {\n+    public StreamInput threadLocalStreamInput(StreamInput in) throws IOException {\n+        return new InputStreamStreamInput(inputStream(in, true));\n+    }\n+\n+    /**\n+     * Creates a new input stream that decompresses the contents read from the provided input stream.\n+     * Closing the returned stream will close the provided input stream.\n+     * Optionally uses thread-local, pooled resources to save off-heap allocations if the stream is guaranteed to not escape the current\n+     * thread.\n+     *\n+     * @param in           input stream to wrap\n+     * @param threadLocal  whether this stream will only be used on the current thread or not\n+     * @return             decompressing stream\n+     */\n+    public static InputStream inputStream(InputStream in, boolean threadLocal) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0OTMxOA=="}, "originalCommit": {"oid": "44b01fcb285e7ef40bbd4d735d0b1306053b9d02"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 870, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}