{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjA0NDEz", "number": 60976, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjowMVrOEXve_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozOTowMFrOEXv-5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMwNjg3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjowMVrOG_s_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjoxNFrOG_09sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDczNA==", "bodyText": "// This is a load.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469450734", "createdAt": "2020-08-12T18:16:01Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTIzMw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581233", "createdAt": "2020-08-12T22:26:14Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDczNA=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMwNzQ0OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjoxMFrOG_tARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjoxNlrOG_09wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDgyMA==", "bodyText": "// This is a store", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469450820", "createdAt": "2020-08-12T18:16:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTI1MA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581250", "createdAt": "2020-08-12T22:26:16Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDgyMA=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMwODg4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjozNFrOG_tBIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjoyNFrOG_099g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTA0MQ==", "bodyText": "// Array access", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451041", "createdAt": "2020-08-12T18:16:34Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTMwMg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581302", "createdAt": "2020-08-12T22:26:24Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTA0MQ=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMxMjc5OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNzo0MVrOG_tDoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjoyMVrOG_092A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTY4MA==", "bodyText": "// Variable node", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451680", "createdAt": "2020-08-12T18:17:41Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTI3Mg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581272", "createdAt": "2020-08-12T22:26:21Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTY4MA=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMxMzMxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNzo1MFrOG_tD8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjoyOFrOG_0-Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTc2MA==", "bodyText": "// Field and brace node", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451760", "createdAt": "2020-08-12T18:17:50Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTMyMg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581322", "createdAt": "2020-08-12T22:26:28Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTc2MA=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMxNTcxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxODozMlrOG_tFbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjozMlrOG_0-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjE0Mw==", "bodyText": "// Standard field", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452143", "createdAt": "2020-08-12T18:18:32Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTM0Mw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581343", "createdAt": "2020-08-12T22:26:32Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjE0Mw=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMxNzc0OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTowOFrOG_tGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjozNlrOG_0-Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjQ3OQ==", "bodyText": "// Storing brace operation", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452479", "createdAt": "2020-08-12T18:19:08Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTM2Mw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581363", "createdAt": "2020-08-12T22:26:36Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjQ3OQ=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMxOTUyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTozNVrOG_tH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjozOVrOG_0-TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjc3Mg==", "bodyText": "// Basic store", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452772", "createdAt": "2020-08-12T18:19:35Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTM4OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581388", "createdAt": "2020-08-12T22:26:39Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjc3Mg=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMyMDY1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTo1N1rOG_tIoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjo0M1rOG_0-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjk2MQ==", "bodyText": "// Not a compound assignment", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452961", "createdAt": "2020-08-12T18:19:57Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTQyOA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581428", "createdAt": "2020-08-12T22:26:43Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjk2MQ=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMyNTEyOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyMTowNlrOG_tLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjo0OFrOG_0-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MzY1NA==", "bodyText": "// Compound assignment", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469453654", "createdAt": "2020-08-12T18:21:06Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);\n+                }\n+            } else {\n+                if (irAccessNode != null) {\n+                    DupNode dupNode = new DupNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTQ0Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581447", "createdAt": "2020-08-12T22:26:48Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);\n+                }\n+            } else {\n+                if (irAccessNode != null) {\n+                    DupNode dupNode = new DupNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MzY1NA=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMzMjY3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyMzoyMFrOG_tQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjo1MlrOG_0-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDg3NA==", "bodyText": "Add comments to help follow to the leaves.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469454874", "createdAt": "2020-08-12T18:23:20Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTQ3Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581477", "createdAt": "2020-08-12T22:26:52Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDg3NA=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM2MTc5OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMToyOFrOG_tiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNjo1OFrOG_0-vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTQ5NQ==", "bodyText": "// For upcast, downcast (int i = 5; i += 2.0;)", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469459495", "createdAt": "2020-08-12T18:31:28Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTUwMQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581501", "createdAt": "2020-08-12T22:26:58Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTQ5NQ=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM3OTA1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNjoxN1rOG_ts2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNzowM1rOG_0-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjIzNA==", "bodyText": "Bigger comment that says what we have to do to support it.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469462234", "createdAt": "2020-08-12T18:36:17Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {\n+            scriptScope.setCondition(userAssignmentNode.getLeftNode(), Compound.class);\n+            irStoreNode = (StoreNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n+            BinaryMathNode irBinaryMathNode = (BinaryMathNode)irStoreNode.getChildNode();\n+\n+            PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n+                    scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n+\n+            if (downcast == null) {\n+                irBinaryMathNode.setExpressionType(irStoreNode.getStoreType());\n+            } else {\n+                CastNode irCastNode = new CastNode();\n+                irCastNode.setLocation(irBinaryMathNode.getLocation());\n+                irCastNode.setExpressionType(downcast.targetType);\n+                irCastNode.setCast(downcast);\n+                irCastNode.setChildNode(irBinaryMathNode);\n+                irStoreNode.setChildNode(irCastNode);\n+            }\n+\n+            if (read) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTUzMg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581532", "createdAt": "2020-08-12T22:27:03Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {\n+            scriptScope.setCondition(userAssignmentNode.getLeftNode(), Compound.class);\n+            irStoreNode = (StoreNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n+            BinaryMathNode irBinaryMathNode = (BinaryMathNode)irStoreNode.getChildNode();\n+\n+            PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n+                    scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n+\n+            if (downcast == null) {\n+                irBinaryMathNode.setExpressionType(irStoreNode.getStoreType());\n+            } else {\n+                CastNode irCastNode = new CastNode();\n+                irCastNode.setLocation(irBinaryMathNode.getLocation());\n+                irCastNode.setExpressionType(downcast.targetType);\n+                irCastNode.setCast(downcast);\n+                irCastNode.setChildNode(irBinaryMathNode);\n+                irStoreNode.setChildNode(irCastNode);\n+            }\n+\n+            if (read) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjIzNA=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 355}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM4ODU1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozOTowMFrOG_tyrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoyNzowOFrOG_0-9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzcyNw==", "bodyText": "Dot, symbol, brace must handle loads and/or stores.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469463727", "createdAt": "2020-08-12T18:39:00Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1235,16 +1403,40 @@ public void visitSymbol(ESymbol userSymbolNode, ScriptScope scriptScope) {\n \n         if (scriptScope.hasDecoration(userSymbolNode, StaticType.class)) {\n             Class<?> staticType = scriptScope.getDecoration(userSymbolNode, StaticType.class).getStaticType();\n-            StaticNode irStaticNode = new StaticNode();\n-            irStaticNode.setLocation(userSymbolNode.getLocation());\n-            irStaticNode.setExpressionType(staticType);\n-            irExpressionNode = irStaticNode;\n+            StaticNode staticNode = new StaticNode();\n+            staticNode.setLocation(userSymbolNode.getLocation());\n+            staticNode.setExpressionType(staticType);\n+            irExpressionNode = staticNode;\n         } else if (scriptScope.hasDecoration(userSymbolNode, ValueType.class)) {\n-            VariableNode irVariableNode = new VariableNode();\n-            irVariableNode.setLocation(userSymbolNode.getLocation());\n-            irVariableNode.setExpressionType(scriptScope.getDecoration(userSymbolNode, ValueType.class).getValueType());\n-            irVariableNode.setName(userSymbolNode.getSymbol());\n-            irExpressionNode = irVariableNode;\n+            boolean read = scriptScope.getCondition(userSymbolNode, Read.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 556}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTU1OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581558", "createdAt": "2020-08-12T22:27:08Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1235,16 +1403,40 @@ public void visitSymbol(ESymbol userSymbolNode, ScriptScope scriptScope) {\n \n         if (scriptScope.hasDecoration(userSymbolNode, StaticType.class)) {\n             Class<?> staticType = scriptScope.getDecoration(userSymbolNode, StaticType.class).getStaticType();\n-            StaticNode irStaticNode = new StaticNode();\n-            irStaticNode.setLocation(userSymbolNode.getLocation());\n-            irStaticNode.setExpressionType(staticType);\n-            irExpressionNode = irStaticNode;\n+            StaticNode staticNode = new StaticNode();\n+            staticNode.setLocation(userSymbolNode.getLocation());\n+            staticNode.setExpressionType(staticType);\n+            irExpressionNode = staticNode;\n         } else if (scriptScope.hasDecoration(userSymbolNode, ValueType.class)) {\n-            VariableNode irVariableNode = new VariableNode();\n-            irVariableNode.setLocation(userSymbolNode.getLocation());\n-            irVariableNode.setExpressionType(scriptScope.getDecoration(userSymbolNode, ValueType.class).getValueType());\n-            irVariableNode.setName(userSymbolNode.getSymbol());\n-            irExpressionNode = irVariableNode;\n+            boolean read = scriptScope.getCondition(userSymbolNode, Read.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzcyNw=="}, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 556}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2559, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}