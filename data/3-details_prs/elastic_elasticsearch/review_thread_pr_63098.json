{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NzMwMTU4", "number": 63098, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNTo0MTo1M1rOEpUmEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNTo0MTo1M1rOEpUmEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzY0NDk2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TotalFeatureImportance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNTo0MTo1M1rOHa7NZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMTozNDo0MVrOHbGOgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5NTExMA==", "bodyText": "Just double-checking: does this line need version condition?", "url": "https://github.com/elastic/elasticsearch/pull/63098#discussion_r497995110", "createdAt": "2020-10-01T05:41:53Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TotalFeatureImportance.java", "diffHunk": "@@ -124,27 +125,31 @@ public int hashCode() {\n         private static ConstructingObjectParser<Importance, Void> createParser(boolean ignoreUnknownFields) {\n             ConstructingObjectParser<Importance, Void> parser = new ConstructingObjectParser<>(NAME,\n                 ignoreUnknownFields,\n-                a -> new Importance((double)a[0], (double)a[1], (double)a[2]));\n+                a -> new Importance((double)a[0], (double)a[1], (double)a[2], (Double)a[3]));\n             parser.declareDouble(ConstructingObjectParser.constructorArg(), MEAN_MAGNITUDE);\n             parser.declareDouble(ConstructingObjectParser.constructorArg(), MIN);\n             parser.declareDouble(ConstructingObjectParser.constructorArg(), MAX);\n+            parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), BASELINE);\n             return parser;\n         }\n \n         private final double meanMagnitude;\n         private final double min;\n         private final double max;\n+        private final Double baseline;\n \n-        public Importance(double meanMagnitude, double min, double max) {\n+        public Importance(double meanMagnitude, double min, double max, Double baseline) {\n             this.meanMagnitude = meanMagnitude;\n             this.min = min;\n             this.max = max;\n+            this.baseline = baseline;\n         }\n \n         public Importance(StreamInput in) throws IOException {\n             this.meanMagnitude = in.readDouble();\n             this.min = in.readDouble();\n             this.max = in.readDouble();\n+            this.baseline = in.readOptionalDouble();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eabce987728878cc1564c67ff3073c268d9e5256"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3NTYxOQ==", "bodyText": "@przemekwitek thanks for double checking :D.\nNo, it doesn't. This feature is a 7.10 feature. Consequently this serialization object was only introduced in 7.10.", "url": "https://github.com/elastic/elasticsearch/pull/63098#discussion_r498175619", "createdAt": "2020-10-01T11:34:41Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TotalFeatureImportance.java", "diffHunk": "@@ -124,27 +125,31 @@ public int hashCode() {\n         private static ConstructingObjectParser<Importance, Void> createParser(boolean ignoreUnknownFields) {\n             ConstructingObjectParser<Importance, Void> parser = new ConstructingObjectParser<>(NAME,\n                 ignoreUnknownFields,\n-                a -> new Importance((double)a[0], (double)a[1], (double)a[2]));\n+                a -> new Importance((double)a[0], (double)a[1], (double)a[2], (Double)a[3]));\n             parser.declareDouble(ConstructingObjectParser.constructorArg(), MEAN_MAGNITUDE);\n             parser.declareDouble(ConstructingObjectParser.constructorArg(), MIN);\n             parser.declareDouble(ConstructingObjectParser.constructorArg(), MAX);\n+            parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), BASELINE);\n             return parser;\n         }\n \n         private final double meanMagnitude;\n         private final double min;\n         private final double max;\n+        private final Double baseline;\n \n-        public Importance(double meanMagnitude, double min, double max) {\n+        public Importance(double meanMagnitude, double min, double max, Double baseline) {\n             this.meanMagnitude = meanMagnitude;\n             this.min = min;\n             this.max = max;\n+            this.baseline = baseline;\n         }\n \n         public Importance(StreamInput in) throws IOException {\n             this.meanMagnitude = in.readDouble();\n             this.min = in.readDouble();\n             this.max = in.readDouble();\n+            this.baseline = in.readOptionalDouble();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5NTExMA=="}, "originalCommit": {"oid": "eabce987728878cc1564c67ff3073c268d9e5256"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3207, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}