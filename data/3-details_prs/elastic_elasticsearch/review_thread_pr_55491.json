{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Mjg4MzU0", "number": 55491, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzozNjowNlrOD0WeAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNzo1OVrOD0oqjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjIwNjczOnYy", "diffSide": "RIGHT", "path": "distribution/docker/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzozNjowNlrOGJQNTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyMjoyNFrOGJ8Tmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1NTkxOA==", "bodyText": "@jasontedor Question for you, since centos uses manifests for their Docker builds pulling from the specific arch is unneeded. Was there another reason to directly pull from arm64v8/centos:7? Or would pulling from centos:7 work? You can see the manifests/archs that Centos supports here, https://hub.docker.com/_/centos?tab=tags.", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r412355918", "createdAt": "2020-04-21T17:36:06Z", "author": {"login": "james-crowley"}, "path": "distribution/docker/build.gradle", "diffHunk": "@@ -38,13 +38,12 @@ ext.expansions = { architecture, oss, local ->\n   final String classifier = \"aarch64\".equals(architecture) ? \"linux-aarch64\" : \"linux-x86_64\"\n   final String elasticsearch = oss ? \"elasticsearch-oss-${VersionProperties.elasticsearch}-${classifier}.tar.gz\" : \"elasticsearch-${VersionProperties.elasticsearch}-${classifier}.tar.gz\"\n   return [\n-    'base_image'          : \"aarch64\".equals(architecture) ? \"arm64v8/centos:7\" : \"centos:7\",\n+    'base_image'          : \"centos:7\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MjEwMA==", "bodyText": "The thinking here is that using an explicit base image makes it possible to cross-build the ARM image, for example using Docker for Mac. It's entirely possible that we'll revert to just specifying centos:7 in the future however.", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r412772100", "createdAt": "2020-04-22T08:18:01Z", "author": {"login": "pugnascotia"}, "path": "distribution/docker/build.gradle", "diffHunk": "@@ -38,13 +38,12 @@ ext.expansions = { architecture, oss, local ->\n   final String classifier = \"aarch64\".equals(architecture) ? \"linux-aarch64\" : \"linux-x86_64\"\n   final String elasticsearch = oss ? \"elasticsearch-oss-${VersionProperties.elasticsearch}-${classifier}.tar.gz\" : \"elasticsearch-${VersionProperties.elasticsearch}-${classifier}.tar.gz\"\n   return [\n-    'base_image'          : \"aarch64\".equals(architecture) ? \"arm64v8/centos:7\" : \"centos:7\",\n+    'base_image'          : \"centos:7\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1NTkxOA=="}, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3ODQyNg==", "bodyText": "The thinking here is that using an explicit base image makes it possible to cross-build the ARM image, for example using Docker for Mac.\n\nMakes perfect sense! I went a head a made the amd64 image explicit too in case you\u2019re not on a x86 system.\n\nIt's entirely possible that we'll revert to just specifying centos:7 in the future however.\n\nUsing manifests for this would help simplify things but all depends on your CI/CD. How are you currently building and publishing your images? Does Elastic have access to arm64 hardware that you will build the arm docker images on? Or are you planning on using qemu and  binfmt_misc to emulate the architectures so you can build all the images on x86 hardware?\nI am happy to lend a hand if you need when it comes to building multi-arch containers and building out manifests. Being at IBM, I do that quite a lot! \ud83d\ude04\nAre you planning on producing manifests for your arm64 and amd64 images? That would be really cool to see!!\nOne quick note with using qemu and  binfmt_misc is that there are some bugs you might run into. Images might seem like they built correctly, but when ran on the specific hardware you will run into errors. Hence why I encourage people to build on platform if they can. I am currently helping the Jenkins Docker team to build on platform for each of their images. AWS does offer arm64 resources, in case you guys were interested.", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r413078426", "createdAt": "2020-04-22T15:22:24Z", "author": {"login": "james-crowley"}, "path": "distribution/docker/build.gradle", "diffHunk": "@@ -38,13 +38,12 @@ ext.expansions = { architecture, oss, local ->\n   final String classifier = \"aarch64\".equals(architecture) ? \"linux-aarch64\" : \"linux-x86_64\"\n   final String elasticsearch = oss ? \"elasticsearch-oss-${VersionProperties.elasticsearch}-${classifier}.tar.gz\" : \"elasticsearch-${VersionProperties.elasticsearch}-${classifier}.tar.gz\"\n   return [\n-    'base_image'          : \"aarch64\".equals(architecture) ? \"arm64v8/centos:7\" : \"centos:7\",\n+    'base_image'          : \"centos:7\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1NTkxOA=="}, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE3MDM2OnYy", "diffSide": "RIGHT", "path": "distribution/docker/src/docker/Dockerfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNDoxMVrOGJqVqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNDoxMVrOGJqVqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4NDA0MQ==", "bodyText": "Rather than installing a Debian packaging tool, let's replace the tini_suffix build variable with tini_arch, and populate it with amd64 or arm64 as appropriate.", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r412784041", "createdAt": "2020-04-22T08:34:11Z", "author": {"login": "pugnascotia"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -14,7 +14,7 @@\n FROM ${base_image} AS builder\n \n RUN for iter in {1..10}; do yum update --setopt=tsflags=nodocs -y && \\\n-    yum install --setopt=tsflags=nodocs -y gzip shadow-utils tar && \\\n+    yum install --setopt=tsflags=nodocs -y epel-release && yum install --setopt=tsflags=nodocs -y dpkg wget gzip shadow-utils tar && \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE3Nzk1OnYy", "diffSide": "RIGHT", "path": "distribution/docker/src/docker/Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNTo1MVrOGJqaLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo0NzoyM1rOGJ3YcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4NTE5OA==", "bodyText": "I don't feel comfortable with not checking the certificate here. Is there any particular reason for using this flag?", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r412785198", "createdAt": "2020-04-22T08:35:51Z", "author": {"login": "pugnascotia"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5Nzc0NA==", "bodyText": "Nope! Let me remove that flag. I think I was looking at some of my flags from an other project and got a little \"copy\" happy. \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r412997744", "createdAt": "2020-04-22T13:47:23Z", "author": {"login": "james-crowley"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4NTE5OA=="}, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE4NjQ2OnYy", "diffSide": "RIGHT", "path": "distribution/docker/src/docker/Dockerfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNzo0MVrOGJqfWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNzo0MVrOGJqfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4NjUyMw==", "bodyText": "Assuming we add a tini_arch variable, how about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                && echo \"\\$(cat tini-\\$(dpkg --print-architecture).sha256sum)\" | sha256sum -c \\\n          \n          \n            \n                && sha256sum -c tini-${tini_arch}.sha256sum \\", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r412786523", "createdAt": "2020-04-22T08:37:41Z", "author": {"login": "pugnascotia"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\\n+    && wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture).sha256sum \\\n+    && echo \"\\$(cat tini-\\$(dpkg --print-architecture).sha256sum)\" | sha256sum -c \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE4Nzk5OnYy", "diffSide": "RIGHT", "path": "distribution/docker/src/docker/Dockerfile", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNzo1OVrOGJqgNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0MTo1MlrOGJ9S-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4Njc0MA==", "bodyText": "There's no need to remove the checksum, since this is just the builder image.", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r412786740", "createdAt": "2020-04-22T08:37:59Z", "author": {"login": "pugnascotia"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\\n+    && wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture).sha256sum \\\n+    && echo \"\\$(cat tini-\\$(dpkg --print-architecture).sha256sum)\" | sha256sum -c \\\n+    && rm -f tini-\\$(dpkg --print-architecture).sha256sum \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMjg5Ng==", "bodyText": "The reason I remove it was were still under the working dir of /usr/share/elasticsearch, which gets copied into the main image. Thus the checksum will be copied to the second stage.\nWhat would be easier is to move the whole Tini \"block\" of code up before you change the WORKDIR to /usr/share/elasticsearch, around line 20. Do you mind if I move the Tini code \"block\" to line 20? I did not want to move to much stuff around, but if you think is a okay solution I will!", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r413002896", "createdAt": "2020-04-22T13:53:28Z", "author": {"login": "james-crowley"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\\n+    && wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture).sha256sum \\\n+    && echo \"\\$(cat tini-\\$(dpkg --print-architecture).sha256sum)\" | sha256sum -c \\\n+    && rm -f tini-\\$(dpkg --print-architecture).sha256sum \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4Njc0MA=="}, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2MTEzMg==", "bodyText": "In my latest commit, I moved the Tini code \"block\" up in the Dockerfile before you change WORKDIR, which eliminates the need to delete the checksum.", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r413061132", "createdAt": "2020-04-22T15:01:52Z", "author": {"login": "james-crowley"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\\n+    && wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture).sha256sum \\\n+    && echo \"\\$(cat tini-\\$(dpkg --print-architecture).sha256sum)\" | sha256sum -c \\\n+    && rm -f tini-\\$(dpkg --print-architecture).sha256sum \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4Njc0MA=="}, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2NTA3OQ==", "bodyText": "I like that we removed the checksum file even if it's currently unneeded, because it means if there's a later refactoring that would for example, accidentally revert executing this in /usr/share/elasticsearch, then we don't have to \"remember\" to now delete the checksum file. It can be done as part of this RUN command, so not introducing a new layer (which doesn't even matter since it's in the builder image).", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r413065079", "createdAt": "2020-04-22T15:06:24Z", "author": {"login": "jasontedor"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\\n+    && wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture).sha256sum \\\n+    && echo \"\\$(cat tini-\\$(dpkg --print-architecture).sha256sum)\" | sha256sum -c \\\n+    && rm -f tini-\\$(dpkg --print-architecture).sha256sum \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4Njc0MA=="}, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NDY1MA==", "bodyText": "@jasontedor @pugnascotia I am flexiable either way.\n\nIt can be done as part of this RUN command, so not introducing a new layer (which doesn't even matter since it's in the builder image).\n\nI think this is key. If there is no new layer were not adding to the build time or build size. Plus, like @jasontedor, its just the builder image.", "url": "https://github.com/elastic/elasticsearch/pull/55491#discussion_r413094650", "createdAt": "2020-04-22T15:41:52Z", "author": {"login": "james-crowley"}, "path": "distribution/docker/src/docker/Dockerfile", "diffHunk": "@@ -40,11 +40,13 @@ RUN chmod 0660 config/elasticsearch.yml config/log4j2.properties\n #\n # The tini GitHub page gives instructions for verifying the binary using\n # gpg, but the keyservers are slow to return the key and this can fail the\n-# build. Instead, we check the binary against a checksum that we have\n-# computed.\n-ADD https://github.com/krallin/tini/releases/download/v0.18.0/tini${tini_suffix} /tini\n-COPY config/tini${tini_suffix}.sha512 /tini.sha512\n-RUN sha512sum -c /tini.sha512 && chmod +x /tini\n+# build. Instead, we check the binary against a checksum that they provide.\n+RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture) \\\n+    && wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/v0.19.0/tini-\\$(dpkg --print-architecture).sha256sum \\\n+    && echo \"\\$(cat tini-\\$(dpkg --print-architecture).sha256sum)\" | sha256sum -c \\\n+    && rm -f tini-\\$(dpkg --print-architecture).sha256sum \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4Njc0MA=="}, "originalCommit": {"oid": "57fc36493755db94a898c091f3de53a4f51cac1e"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2748, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}