{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMDU2Njc0", "number": 52012, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1Mjo0OVrODdywUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1MDoyMFrODe5srQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY2ODY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1Mjo0OVrOFmmWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1Mjo0OVrOFmmWrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxODYwNg==", "bodyText": "This was called assuming only one handler was called only once.", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r376018606", "createdAt": "2020-02-06T18:52:49Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -441,10 +441,9 @@ private SearchRequestBuilder createLatestTimingStatsSearch(String indexName, Str\n             .addSort(SortBuilders.fieldSort(TimingStats.BUCKET_COUNT.getPreferredName()).order(SortOrder.DESC));\n     }\n \n-    public void datafeedTimingStats(List<String> jobIds, Consumer<Map<String, DatafeedTimingStats>> handler,\n-                                    Consumer<Exception> errorHandler) {\n+    public void datafeedTimingStats(List<String> jobIds, ActionListener<Map<String, DatafeedTimingStats>> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe6907f556624f56ae69701c3e3bb6a257061c8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY3MzEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1NDoyMVrOFmmZhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1NDoyMVrOFmmZhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxOTMzNA==", "bodyText": "The only place where this method is used is in getAutodetectParams which is called when a job is opened. Any failure marked the job task as failed and attempted to close the job.\nProblem was the potential of the callback being called numerous times. (see line 600)", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r376019334", "createdAt": "2020-02-06T18:54:21Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -607,38 +622,47 @@ private SearchRequestBuilder createDocIdSearch(String index, String id) {\n                 .setRouting(id);\n     }\n \n-    private static void parseAutodetectParamSearchHit(String jobId, AutodetectParams.Builder paramsBuilder, SearchHit hit,\n-                                               Consumer<Exception> errorHandler) {\n+    /**\n+     * @throws ElasticsearchException when search hit cannot be parsed\n+     * @throws IllegalStateException when search hit has an unexpected ID\n+     */\n+    private static void parseAutodetectParamSearchHit(String jobId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe6907f556624f56ae69701c3e3bb6a257061c8"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI2OTAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMToxNFrOFm1hlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMToxNFrOFm1hlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NzE1OQ==", "bodyText": "If we opt to add returns when we signal a failure, then we might as well use that to simplify the code and remove those elses. Same holds for the added returns a bit lower.", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r376267159", "createdAt": "2020-02-07T08:31:14Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -567,6 +574,7 @@ public void getAutodetectParams(Job job, Consumer<AutodetectParams> consumer, Co\n                                 MultiSearchResponse.Item itemResponse = response.getResponses()[i];\n                                 if (itemResponse.isFailure()) {\n                                     errorHandler.accept(itemResponse.getFailure());\n+                                    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe6907f556624f56ae69701c3e3bb6a257061c8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI3MzU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMzoxMVrOFm1keA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMzoxMVrOFm1keA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzg5Ng==", "bodyText": "Same as the my later comment. As we return now, we can simplify by not using else.", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r376267896", "createdAt": "2020-02-07T08:33:11Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -465,19 +464,22 @@ public void datafeedTimingStats(List<String> jobIds, Consumer<Map<String, Datafe\n                         String jobId = jobIds.get(i);\n                         MultiSearchResponse.Item itemResponse = msearchResponse.getResponses()[i];\n                         if (itemResponse.isFailure()) {\n-                            errorHandler.accept(itemResponse.getFailure());\n+                            listener.onFailure(itemResponse.getFailure());\n+                            return;\n                         } else {\n                             SearchResponse searchResponse = itemResponse.getResponse();\n                             ShardSearchFailure[] shardFailures = searchResponse.getShardFailures();\n                             int unavailableShards = searchResponse.getTotalShards() - searchResponse.getSuccessfulShards();\n                             if (shardFailures != null && shardFailures.length > 0) {\n                                 LOGGER.error(\"[{}] Search request returned shard failures: {}\", jobId, Arrays.toString(shardFailures));\n-                                errorHandler.accept(\n+                                listener.onFailure(\n                                     new ElasticsearchException(ExceptionsHelper.shardFailuresToErrorMsg(jobId, shardFailures)));\n+                                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe6907f556624f56ae69701c3e3bb6a257061c8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODE2OTIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowNzozM1rOFm-Elg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMDoyNlrOFnChWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNzE5MA==", "bodyText": "I know you didn't introduce this problem, but if this assertion error is ever thrown it will be frustrating because it will not say what the root case was.  So please can you change it to e -> { throw new AssertionError(\"Failure getting datafeed timing stats\", e); }.", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r376407190", "createdAt": "2020-02-07T14:07:33Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java", "diffHunk": "@@ -897,8 +897,9 @@ public void testDatafeedTimingStats_EmptyJobList() {\n         JobResultsProvider provider = createProvider(client);\n         provider.datafeedTimingStats(\n             List.of(),\n-            statsByJobId -> assertThat(statsByJobId, anEmptyMap()),\n-            e -> { throw new AssertionError(); });\n+            ActionListener.wrap(\n+                statsByJobId -> assertThat(statsByJobId, anEmptyMap()),\n+                e -> { throw new AssertionError(); }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe6907f556624f56ae69701c3e3bb6a257061c8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDA5MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r376480091", "createdAt": "2020-02-07T16:20:26Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java", "diffHunk": "@@ -897,8 +897,9 @@ public void testDatafeedTimingStats_EmptyJobList() {\n         JobResultsProvider provider = createProvider(client);\n         provider.datafeedTimingStats(\n             List.of(),\n-            statsByJobId -> assertThat(statsByJobId, anEmptyMap()),\n-            e -> { throw new AssertionError(); });\n+            ActionListener.wrap(\n+                statsByJobId -> assertThat(statsByJobId, anEmptyMap()),\n+                e -> { throw new AssertionError(); }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNzE5MA=="}, "originalCommit": {"oid": "0fe6907f556624f56ae69701c3e3bb6a257061c8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI5MTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1MDoyMFrOFoS6Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyNjozNlrOFoUElw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NzIxMA==", "bodyText": "Is there an redundant indentation here or is it github messing with me?", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r377797210", "createdAt": "2020-02-11T17:50:20Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -575,40 +572,38 @@ public void getAutodetectParams(Job job, Consumer<AutodetectParams> consumer, Co\n                                 if (itemResponse.isFailure()) {\n                                     errorHandler.accept(itemResponse.getFailure());\n                                     return;\n-                                } else {\n-                                    SearchResponse searchResponse = itemResponse.getResponse();\n-                                    ShardSearchFailure[] shardFailures = searchResponse.getShardFailures();\n-                                    int unavailableShards = searchResponse.getTotalShards() - searchResponse.getSuccessfulShards();\n-                                    if (shardFailures != null && shardFailures.length > 0) {\n-                                        LOGGER.error(\"[{}] Search request returned shard failures: {}\", jobId,\n-                                                Arrays.toString(shardFailures));\n-                                        errorHandler.accept(new ElasticsearchException(\n-                                                ExceptionsHelper.shardFailuresToErrorMsg(jobId, shardFailures)));\n-                                        return;\n-                                    } else if (unavailableShards > 0) {\n-                                        errorHandler.accept(new ElasticsearchException(\"[\" + jobId\n-                                                + \"] Search request encountered [\" + unavailableShards + \"] unavailable shards\"));\n-                                        return;\n-                                    } else {\n-                                        SearchHits hits = searchResponse.getHits();\n-                                        long hitsCount = hits.getHits().length;\n-                                        if (hitsCount == 0) {\n-                                            SearchRequest searchRequest = msearch.request().requests().get(i);\n-                                            LOGGER.debug(\"Found 0 hits for [{}]\", new Object[]{searchRequest.indices()});\n-                                        } else {\n-                                            for (SearchHit hit : hits) {\n-                                                try {\n-                                                    parseAutodetectParamSearchHit(jobId, paramsBuilder, hit);\n-                                                } catch (Exception e) {\n-                                                    errorHandler.accept(e);\n-                                                    return;\n-                                                }\n-                                            }\n+                                }\n+                                SearchResponse searchResponse = itemResponse.getResponse();\n+                                ShardSearchFailure[] shardFailures = searchResponse.getShardFailures();\n+                                int unavailableShards = searchResponse.getTotalShards() - searchResponse.getSuccessfulShards();\n+                                if (shardFailures != null && shardFailures.length > 0) {\n+                                    LOGGER.error(\"[{}] Search request returned shard failures: {}\", jobId,\n+                                            Arrays.toString(shardFailures));\n+                                    errorHandler.accept(new ElasticsearchException(\n+                                            ExceptionsHelper.shardFailuresToErrorMsg(jobId, shardFailures)));\n+                                    return;\n+                                }\n+                                if (unavailableShards > 0) {\n+                                    errorHandler.accept(new ElasticsearchException(\"[\" + jobId\n+                                            + \"] Search request encountered [\" + unavailableShards + \"] unavailable shards\"));\n+                                    return;\n+                                }\n+                                SearchHits hits = searchResponse.getHits();\n+                                long hitsCount = hits.getHits().length;\n+                                if (hitsCount == 0) {\n+                                    SearchRequest searchRequest = msearch.request().requests().get(i);\n+                                    LOGGER.debug(\"Found 0 hits for [{}]\", new Object[]{searchRequest.indices()});\n+                                    return;\n+                                }\n+                                    for (SearchHit hit : hits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4589d16c30eff07682cd036bf5823003adb5f21"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNjIxNQ==", "bodyText": "fixed :)", "url": "https://github.com/elastic/elasticsearch/pull/52012#discussion_r377816215", "createdAt": "2020-02-11T18:26:36Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -575,40 +572,38 @@ public void getAutodetectParams(Job job, Consumer<AutodetectParams> consumer, Co\n                                 if (itemResponse.isFailure()) {\n                                     errorHandler.accept(itemResponse.getFailure());\n                                     return;\n-                                } else {\n-                                    SearchResponse searchResponse = itemResponse.getResponse();\n-                                    ShardSearchFailure[] shardFailures = searchResponse.getShardFailures();\n-                                    int unavailableShards = searchResponse.getTotalShards() - searchResponse.getSuccessfulShards();\n-                                    if (shardFailures != null && shardFailures.length > 0) {\n-                                        LOGGER.error(\"[{}] Search request returned shard failures: {}\", jobId,\n-                                                Arrays.toString(shardFailures));\n-                                        errorHandler.accept(new ElasticsearchException(\n-                                                ExceptionsHelper.shardFailuresToErrorMsg(jobId, shardFailures)));\n-                                        return;\n-                                    } else if (unavailableShards > 0) {\n-                                        errorHandler.accept(new ElasticsearchException(\"[\" + jobId\n-                                                + \"] Search request encountered [\" + unavailableShards + \"] unavailable shards\"));\n-                                        return;\n-                                    } else {\n-                                        SearchHits hits = searchResponse.getHits();\n-                                        long hitsCount = hits.getHits().length;\n-                                        if (hitsCount == 0) {\n-                                            SearchRequest searchRequest = msearch.request().requests().get(i);\n-                                            LOGGER.debug(\"Found 0 hits for [{}]\", new Object[]{searchRequest.indices()});\n-                                        } else {\n-                                            for (SearchHit hit : hits) {\n-                                                try {\n-                                                    parseAutodetectParamSearchHit(jobId, paramsBuilder, hit);\n-                                                } catch (Exception e) {\n-                                                    errorHandler.accept(e);\n-                                                    return;\n-                                                }\n-                                            }\n+                                }\n+                                SearchResponse searchResponse = itemResponse.getResponse();\n+                                ShardSearchFailure[] shardFailures = searchResponse.getShardFailures();\n+                                int unavailableShards = searchResponse.getTotalShards() - searchResponse.getSuccessfulShards();\n+                                if (shardFailures != null && shardFailures.length > 0) {\n+                                    LOGGER.error(\"[{}] Search request returned shard failures: {}\", jobId,\n+                                            Arrays.toString(shardFailures));\n+                                    errorHandler.accept(new ElasticsearchException(\n+                                            ExceptionsHelper.shardFailuresToErrorMsg(jobId, shardFailures)));\n+                                    return;\n+                                }\n+                                if (unavailableShards > 0) {\n+                                    errorHandler.accept(new ElasticsearchException(\"[\" + jobId\n+                                            + \"] Search request encountered [\" + unavailableShards + \"] unavailable shards\"));\n+                                    return;\n+                                }\n+                                SearchHits hits = searchResponse.getHits();\n+                                long hitsCount = hits.getHits().length;\n+                                if (hitsCount == 0) {\n+                                    SearchRequest searchRequest = msearch.request().requests().get(i);\n+                                    LOGGER.debug(\"Found 0 hits for [{}]\", new Object[]{searchRequest.indices()});\n+                                    return;\n+                                }\n+                                    for (SearchHit hit : hits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NzIxMA=="}, "originalCommit": {"oid": "d4589d16c30eff07682cd036bf5823003adb5f21"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4987, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}