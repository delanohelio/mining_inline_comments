{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjU3MjM3", "number": 60605, "title": "Provide option to allow writes when master is down", "bodyText": "Elasticsearch currently blocks writes by default when a master is unavailable. The cluster.no_master_block setting allows a user to change this behavior to also block reads when a master is unavailable. This PR introduces a way to now also still allow writes when a master is offline. Writes will continue to  work as long as routing table changes are not needed (as those require the master for consistency), or if dynamic mapping updates are not required (as again, these require the master for consistency).\nEventually we should switch the default of cluster.no_master_block to this new mode.", "createdAt": "2020-08-03T15:50:21Z", "url": "https://github.com/elastic/elasticsearch/pull/60605", "merged": true, "mergeCommit": {"oid": "0b517ddca6ff9ccc88ec8fef16aa164a3e39f53f"}, "closed": true, "closedAt": "2020-08-12T14:37:33Z", "author": {"login": "ywelsch"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7T682AH2gAyNDYyMjU3MjM3OjA2MGMzNzkzZWM1ZmJhNGI0NTBjOTRmNTg3ZDBhYWU3ZmE4NDAzZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-JFqXgFqTQ2NTc5NjkwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "060c3793ec5fba4b450c94f587d0aae7fa8403d1", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/060c3793ec5fba4b450c94f587d0aae7fa8403d1", "committedDate": "2020-08-03T15:40:12Z", "message": "Provide option to allow writes when master is down"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a3bb06f5d516e469b1e08e05fb884d1ac2f248", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/75a3bb06f5d516e469b1e08e05fb884d1ac2f248", "committedDate": "2020-08-03T16:11:08Z", "message": "quality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f88f832266c084ebeaff46281d39147215fb8c23", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/f88f832266c084ebeaff46281d39147215fb8c23", "committedDate": "2020-08-04T07:17:13Z", "message": "search throws all kinds of exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1caccd61a917779e9552a52e731f8dbe9248d76a", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/1caccd61a917779e9552a52e731f8dbe9248d76a", "committedDate": "2020-08-10T11:12:54Z", "message": "Randomization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed66cf81f7de239916521ad95f351a94c56b507d", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/ed66cf81f7de239916521ad95f351a94c56b507d", "committedDate": "2020-08-10T11:15:53Z", "message": "Merge remote-tracking branch 'elastic/master' into no_master_metadata_writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0703a26a0b39ca29e114e4eedb34701e4da02c71", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/0703a26a0b39ca29e114e4eedb34701e4da02c71", "committedDate": "2020-08-11T07:16:39Z", "message": "random != random"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b9b68215e6e8b3ba54c4f78b06ad3040f1a2fb", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/97b9b68215e6e8b3ba54c4f78b06ad3040f1a2fb", "committedDate": "2020-08-11T07:18:10Z", "message": "Merge remote-tracking branch 'elastic/master' into no_master_metadata_writes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjE0ODMz", "url": "https://github.com/elastic/elasticsearch/pull/60605#pullrequestreview-465214833", "createdAt": "2020-08-11T16:05:48Z", "commit": {"oid": "97b9b68215e6e8b3ba54c4f78b06ad3040f1a2fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowNTo0OFrOG--4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowNTo0OFrOG--4QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NTEwNQ==", "bodyText": "I wonder if we should add integration tests for the two primary ways indexing can fail with the new block:\n\nAn index or data-stream is to be auto-created.\nA dynamic mapping update is done.\n\nAFAICS, this will work out fine though.", "url": "https://github.com/elastic/elasticsearch/pull/60605#discussion_r468695105", "createdAt": "2020-08-11T16:05:48Z", "author": {"login": "henningandersen"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/NoMasterNodeIT.java", "diffHunk": "@@ -261,4 +266,74 @@ public void testNoMasterActionsWriteMasterBlock() throws Exception {\n \n         internalCluster().clearDisruptionScheme(true);\n     }\n+\n+    public void testNoMasterActionsMetadataWriteMasterBlock() throws Exception {\n+        Settings settings = Settings.builder()\n+            .put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), false)\n+            .put(NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), \"metadata_write\")\n+            .build();\n+\n+        final List<String> nodes = internalCluster().startNodes(3, settings);\n+\n+        prepareCreate(\"test1\").setSettings(\n+            Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 1)).get();\n+        client().admin().cluster().prepareHealth(\"_all\").setWaitForGreenStatus().get();\n+        client().prepareIndex(\"test1\").setId(\"1\").setSource(\"field\", \"value1\").get();\n+        refresh();\n+\n+        ensureGreen(\"test1\");\n+\n+        ClusterStateResponse clusterState = client().admin().cluster().prepareState().get();\n+        logger.info(\"Cluster state:\\n{}\", clusterState.getState());\n+\n+        final List<String> nodesWithShards = clusterState.getState().routingTable().index(\"test1\").shard(0).activeShards().stream()\n+            .map(shardRouting -> shardRouting.currentNodeId()).map(nodeId -> clusterState.getState().nodes().resolveNode(nodeId))\n+            .map(DiscoveryNode::getName).collect(Collectors.toList());\n+\n+        client().execute(AddVotingConfigExclusionsAction.INSTANCE,\n+            new AddVotingConfigExclusionsRequest(nodesWithShards.toArray(new String[0]))).get();\n+        ensureGreen(\"test1\");\n+\n+        String partitionedNode = nodes.stream().filter(n -> nodesWithShards.contains(n) == false).findFirst().get();\n+\n+        final NetworkDisruption disruptionScheme\n+            = new NetworkDisruption(new NetworkDisruption.TwoPartitions(Collections.singleton(partitionedNode),\n+            new HashSet<>(nodesWithShards)), NetworkDisruption.DISCONNECT);\n+        internalCluster().setDisruptionScheme(disruptionScheme);\n+        disruptionScheme.startDisrupting();\n+\n+        assertBusy(() -> {\n+            for (String node : nodesWithShards) {\n+                ClusterState state = client(node).admin().cluster().prepareState().setLocal(true).get().getState();\n+                assertTrue(state.blocks().hasGlobalBlockWithId(NoMasterBlockService.NO_MASTER_BLOCK_ID));\n+            }\n+        });\n+\n+        GetResponse getResponse = client(randomFrom(nodesWithShards)).prepareGet(\"test1\", \"1\").get();\n+        assertExists(getResponse);\n+\n+        expectThrows(Exception.class, () -> client(partitionedNode).prepareGet(\"test1\", \"1\").get());\n+\n+        SearchResponse countResponse = client(randomFrom(nodesWithShards)).prepareSearch(\"test1\")\n+            .setAllowPartialSearchResults(true).setSize(0).get();\n+        assertHitCount(countResponse, 1L);\n+\n+        expectThrows(Exception.class, () -> client(partitionedNode).prepareSearch(\"test1\")\n+            .setAllowPartialSearchResults(true).setSize(0).get());\n+\n+        TimeValue timeout = TimeValue.timeValueMillis(200);\n+        client(randomFrom(nodesWithShards)).prepareUpdate(\"test1\", \"1\")\n+            .setDoc(Requests.INDEX_CONTENT_TYPE, \"field\", \"value2\").setTimeout(timeout).get();\n+\n+        expectThrows(UnavailableShardsException.class, () -> client(partitionedNode).prepareUpdate(\"test1\", \"1\")\n+            .setDoc(Requests.INDEX_CONTENT_TYPE, \"field\", \"value2\").setTimeout(timeout).get());\n+\n+        client(randomFrom(nodesWithShards)).prepareIndex(\"test1\").setId(\"1\")\n+            .setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout).get();\n+\n+        expectThrows(UnavailableShardsException.class, () -> client(partitionedNode).prepareIndex(\"test1\").setId(\"1\")\n+            .setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout).get());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b9b68215e6e8b3ba54c4f78b06ad3040f1a2fb"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d2e10f07e921fd3c71ab9579e7158a1f836182", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/d9d2e10f07e921fd3c71ab9579e7158a1f836182", "committedDate": "2020-08-12T07:14:29Z", "message": "extend test with dynamic index creation and dynamic mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51f5b5351325c44300e7c1eed49ce8ba59c5a741", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/51f5b5351325c44300e7c1eed49ce8ba59c5a741", "committedDate": "2020-08-12T07:14:55Z", "message": "Merge remote-tracking branch 'elastic/master' into no_master_metadata_writes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Nzk2OTAw", "url": "https://github.com/elastic/elasticsearch/pull/60605#pullrequestreview-465796900", "createdAt": "2020-08-12T10:44:43Z", "commit": {"oid": "51f5b5351325c44300e7c1eed49ce8ba59c5a741"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3471, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}