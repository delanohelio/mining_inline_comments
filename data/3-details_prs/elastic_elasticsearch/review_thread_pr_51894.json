{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDgyNzA0", "number": 51894, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1Mjo1OVrODdThlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDowNzozOFrODe8b2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU1MTg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1Mjo1OVrOFl1IeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoxMzo1MlrOFl1qSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjE1Mg==", "bodyText": "Why not breaking early, if there's the first AggregateSort found?", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375212152", "createdAt": "2020-02-05T11:52:59Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxODcwMA==", "bodyText": "We cannot break after the first AggregateSort. Maybe we could break after the last AggregateSort.\nIf we have:\nSELECT f1, f2, f3, MAX(f4) as max, MIN(f5) as min\nFROM test\nGROUP BY f1, f2, f3\nORDER BY f1, max, f2, min, f3\n\nwe cannot break after max, we could break after min.\nI'd rather leave the fix as is and introduce this optimisation in a separate PR where it's properly tested that it works.\n(Needs some carefully chosen data set to test this ordering case)", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375218700", "createdAt": "2020-02-05T12:08:42Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjE1Mg=="}, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDA3NQ==", "bodyText": "I don't understand. That's a simple loop that, when finds an AggregateSort, will set customSort to TRUE. It doesn't really matter what's after in the list of sorts because it doesn't change the value of customSort.\nAlso, I meant breaking from inside the loop not from the method...", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375220075", "createdAt": "2020-02-05T12:12:03Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjE1Mg=="}, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDgxMA==", "bodyText": "Sorry, misunderstood you there, sure we should break once the 1st is found.", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375220810", "createdAt": "2020-02-05T12:13:52Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjE1Mg=="}, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU1NDk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1NDowNVrOFl1KQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjowNDowOVrOFl1aNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjYwOA==", "bodyText": "atIndex == -1", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375212608", "createdAt": "2020-02-05T11:54:05Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;\n             }\n-            sortingColumns.add(tuple);\n         }\n-        \n+\n+        // If no custom sort is used break early\n         if (customSort == null) {\n-            customSort = Boolean.valueOf(aggSort);\n+            customSort = Boolean.FALSE;\n+            return emptyList();\n         }\n \n-        return aggSort ? sortingColumns : emptyList();\n+        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n+        for (Sort s: sort) {\n+            int atIndex = -1;\n+            for (int i = 0; i < fields.size(); i++) {\n+                Tuple<FieldExtraction, String> field = fields.get(i);\n+                if (field.v2().equals(s.id())) {\n+                    atIndex = i;\n+                    break;\n+                }\n+            }\n+            if (atIndex==-1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNjY5NA==", "bodyText": "Somehow I broke the formatting :(", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375216694", "createdAt": "2020-02-05T12:04:09Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;\n             }\n-            sortingColumns.add(tuple);\n         }\n-        \n+\n+        // If no custom sort is used break early\n         if (customSort == null) {\n-            customSort = Boolean.valueOf(aggSort);\n+            customSort = Boolean.FALSE;\n+            return emptyList();\n         }\n \n-        return aggSort ? sortingColumns : emptyList();\n+        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n+        for (Sort s: sort) {\n+            int atIndex = -1;\n+            for (int i = 0; i < fields.size(); i++) {\n+                Tuple<FieldExtraction, String> field = fields.get(i);\n+                if (field.v2().equals(s.id())) {\n+                    atIndex = i;\n+                    break;\n+                }\n+            }\n+            if (atIndex==-1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjYwOA=="}, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU1NTg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1NDoyN1rOFl1K1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1NDoyN1rOFl1K1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjc1Nw==", "bodyText": "Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375212757", "createdAt": "2020-02-05T11:54:27Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;\n             }\n-            sortingColumns.add(tuple);\n         }\n-        \n+\n+        // If no custom sort is used break early\n         if (customSort == null) {\n-            customSort = Boolean.valueOf(aggSort);\n+            customSort = Boolean.FALSE;\n+            return emptyList();\n         }\n \n-        return aggSort ? sortingColumns : emptyList();\n+        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n+        for (Sort s: sort) {\n+            int atIndex = -1;\n+            for (int i = 0; i < fields.size(); i++) {\n+                Tuple<FieldExtraction, String> field = fields.get(i);\n+                if (field.v2().equals(s.id())) {\n+                    atIndex = i;\n+                    break;\n+                }\n+            }\n+            if (atIndex==-1) {\n+                throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n+            }\n+            // assemble a comparator for it\n+            Comparator comp = s.direction()==Sort.Direction.ASC ? Comparator.naturalOrder():Comparator.reverseOrder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU1NjQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1NDo0MVrOFl1LNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1NDo0MVrOFl1LNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjg1Mg==", "bodyText": "comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375212852", "createdAt": "2020-02-05T11:54:41Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -134,45 +133,39 @@ public QueryContainer(Query query,\n             return emptyList();\n         }\n \n-        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n-\n-        boolean aggSort = false;\n         for (Sort s : sort) {\n-            Tuple<Integer, Comparator> tuple = new Tuple<>(Integer.valueOf(-1), null);\n-            \n             if (s instanceof AggregateSort) {\n-                AggregateSort as = (AggregateSort) s;\n-                // find the relevant column of each aggregate function\n-                AggregateFunction af = as.agg();\n-\n-                aggSort = true;\n-                int atIndex = -1;\n-                String id = Expressions.id(af);\n-\n-                for (int i = 0; i < fields.size(); i++) {\n-                    Tuple<FieldExtraction, String> field = fields.get(i);\n-                    if (field.v2().equals(id)) {\n-                        atIndex = i;\n-                        break;\n-                    }\n-                }\n-                if (atIndex == -1) {\n-                    throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n-                }\n-                // assemble a comparator for it\n-                Comparator comp = s.direction() == Sort.Direction.ASC ? Comparator.naturalOrder() : Comparator.reverseOrder();\n-                comp = s.missing() == Sort.Missing.FIRST ? Comparator.nullsFirst(comp) : Comparator.nullsLast(comp);\n-\n-                tuple = new Tuple<>(Integer.valueOf(atIndex), comp);\n+                customSort = Boolean.TRUE;\n             }\n-            sortingColumns.add(tuple);\n         }\n-        \n+\n+        // If no custom sort is used break early\n         if (customSort == null) {\n-            customSort = Boolean.valueOf(aggSort);\n+            customSort = Boolean.FALSE;\n+            return emptyList();\n         }\n \n-        return aggSort ? sortingColumns : emptyList();\n+        List<Tuple<Integer, Comparator>> sortingColumns = new ArrayList<>(sort.size());\n+        for (Sort s: sort) {\n+            int atIndex = -1;\n+            for (int i = 0; i < fields.size(); i++) {\n+                Tuple<FieldExtraction, String> field = fields.get(i);\n+                if (field.v2().equals(s.id())) {\n+                    atIndex = i;\n+                    break;\n+                }\n+            }\n+            if (atIndex==-1) {\n+                throw new SqlIllegalArgumentException(\"Cannot find backing column for ordering aggregation [{}]\", s);\n+            }\n+            // assemble a comparator for it\n+            Comparator comp = s.direction()==Sort.Direction.ASC ? Comparator.naturalOrder():Comparator.reverseOrder();\n+            comp = s.missing()==Sort.Missing.FIRST ? Comparator.nullsFirst(comp):Comparator.nullsLast(comp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU3MDA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/ScoreSort.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjowMDowNlrOFl1TgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoyMzo1NVrOFl16fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNDk3Nw==", "bodyText": "Did you explore the idea of having the id as part of Sort, as I'm seeing a lot of repeated code? (skimming through this PR's changes, the id seems to be introduced in all classes inheriting Sort). I am probably missing something that prevents this approach to be used, would love to hear the reasons.", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375214977", "createdAt": "2020-02-05T12:00:06Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/ScoreSort.java", "diffHunk": "@@ -8,13 +8,22 @@\n import java.util.Objects;\n \n public class ScoreSort extends Sort {\n-    public ScoreSort(Direction direction, Missing missing) {\n+\n+    final String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTUzNw==", "bodyText": "I decided not to, because 2 classes the AttributeSort and AggregateSort can extract the id from their attribute variables. On the other hand 3 classes need to store it, I just chose the 1st approach with forcing to implement the public String id() getter.", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375219537", "createdAt": "2020-02-05T12:10:46Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/ScoreSort.java", "diffHunk": "@@ -8,13 +8,22 @@\n import java.util.Objects;\n \n public class ScoreSort extends Sort {\n-    public ScoreSort(Direction direction, Missing missing) {\n+\n+    final String id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNDk3Nw=="}, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNDk1Ng==", "bodyText": "I would have done it differently. I feel like id and id() should belong to the same base class - Sort, with the help of an additional constructor (that receives the id as an argument). Sort would have also provided a default implementation for id() (to return the id) and the other classes would have overriden the default implementation of id() where appropriate. Also, these \"special\" cases classes would have called the aforementioned freshly added constructor in Sort.\nThe main bothering aspect for me is that there is a required id()  method in Sort, but the id itself (that could be related to this id() method) lives in the inheriting classes.\nYou can leave it as is, I just wanted to point out something that doesn't feel right to me.", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r375224956", "createdAt": "2020-02-05T12:23:55Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/ScoreSort.java", "diffHunk": "@@ -8,13 +8,22 @@\n import java.util.Objects;\n \n public class ScoreSort extends Sort {\n-    public ScoreSort(Direction direction, Missing missing) {\n+\n+    final String id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNDk3Nw=="}, "originalCommit": {"oid": "a68c6ded5058e7a77824ab0cabb35155db027a8b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzc0MDQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDowNzozOFrOFoXW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDowNzozOFrOFoXW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3MDA0OA==", "bodyText": "Nit: or else -> else or otherwise", "url": "https://github.com/elastic/elasticsearch/pull/51894#discussion_r377870048", "createdAt": "2020-02-11T20:07:38Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java", "diffHunk": "@@ -594,36 +594,51 @@ public final void onFailure(Exception ex) {\n             this.sortingColumns = sortingColumns;\n         }\n \n-        // compare row based on the received attribute sort\n-        // if a sort item is not in the list, it is assumed the sorting happened in ES\n-        // and the results are left as is (by using the row ordering), otherwise it is sorted based on the given criteria.\n-        //\n-        // Take for example ORDER BY a, x, b, y\n-        // a, b - are sorted in ES\n-        // x, y - need to be sorted client-side\n-        // sorting on x kicks in, only if the values for a are equal.\n-\n+        /**\n+         * Compare row based on the received attribute sort\n+         * <ul>\n+         *     <li>\n+         *         If a tuple in {@code sortingColumns} has a null comparator, it is assumed the sorting\n+         *         happened in ES and the results are left as is (by using the row ordering), otherwise it is\n+         *         sorted based on the given criteria.\n+         *     </li>\n+         *     <li>\n+         *         If no tuple exists in {@code sortingColumns} for an output column, it means this column\n+         *         is not included at all in the ORDER BY\n+         *     </li>\n+         *</ul>\n+         *\n+         * Take for example ORDER BY a, x, b, y\n+         * a, b - are sorted in ES\n+         * x, y - need to be sorted client-side\n+         * sorting on x kicks in only if the values for a are equal.\n+         * sorting on y kicks in only if the values for a, x and b are all equal\n+         *\n+         */\n         // thanks to @jpountz for the row ordering idea as a way to preserve ordering\n         @SuppressWarnings(\"unchecked\")\n         @Override\n         protected boolean lessThan(Tuple<List<?>, Integer> l, Tuple<List<?>, Integer> r) {\n             for (Tuple<Integer, Comparator> tuple : sortingColumns) {\n-                int i = tuple.v1().intValue();\n+                int columnIdx = tuple.v1().intValue();\n                 Comparator comparator = tuple.v2();\n \n-                Object vl = l.v1().get(i);\n-                Object vr = r.v1().get(i);\n+                // Get the values for left and right rows at the current column index\n+                Object vl = l.v1().get(columnIdx);\n+                Object vr = r.v1().get(columnIdx);\n                 if (comparator != null) {\n                     int result = comparator.compare(vl, vr);\n-                    // if things are equals, move to the next comparator\n+                    // if things are not equal: return the comparison result,\n+                    // or else: move to the next comparator to solve the tie.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b9700ef80131a3cc88022991c6c9983d294ca9"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4915, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}