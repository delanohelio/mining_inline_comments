{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNDg2MTI0", "number": 65045, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoxNTozMlrOE5T2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoxNTozMlrOE5T2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTI5NDc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoxNTozMlrOHzsAIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyOTo0OVrOHzsdSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2MDM1NQ==", "bodyText": "What you're saying is that this line always returns something nonzero. I think you're right, but would you add an assertion to that effect?", "url": "https://github.com/elastic/elasticsearch/pull/65045#discussion_r523960355", "createdAt": "2020-11-16T08:15:32Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "diffHunk": "@@ -770,16 +770,14 @@ private void allocateUnassigned() {\n                 if (o1.primary() ^ o2.primary()) {\n                     return o1.primary() ? -1 : 1;\n                 }\n-                final int indexCmp;\n-                if ((indexCmp = o1.getIndexName().compareTo(o2.getIndexName())) == 0) {\n+                if (o1.getIndexName().compareTo(o2.getIndexName()) == 0) {\n                     return o1.getId() - o2.getId();\n                 }\n                 // this comparator is more expensive than all the others up there\n                 // that's why it's added last even though it could be easier to read\n                 // if we'd apply it earlier. this comparator will only differentiate across\n                 // indices all shards of the same index is treated equally.\n-                final int secondary = secondaryComparator.compare(o1, o2);\n-                return secondary == 0 ? indexCmp : secondary;\n+                return secondaryComparator.compare(o1, o2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be53a1b6dc5ced6cc6ba76771217470d986a3498"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NzgxNg==", "bodyText": "Hi @DaveCTurner , assertion added. Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/65045#discussion_r523967816", "createdAt": "2020-11-16T08:29:49Z", "author": {"login": "howardhuanghua"}, "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "diffHunk": "@@ -770,16 +770,14 @@ private void allocateUnassigned() {\n                 if (o1.primary() ^ o2.primary()) {\n                     return o1.primary() ? -1 : 1;\n                 }\n-                final int indexCmp;\n-                if ((indexCmp = o1.getIndexName().compareTo(o2.getIndexName())) == 0) {\n+                if (o1.getIndexName().compareTo(o2.getIndexName()) == 0) {\n                     return o1.getId() - o2.getId();\n                 }\n                 // this comparator is more expensive than all the others up there\n                 // that's why it's added last even though it could be easier to read\n                 // if we'd apply it earlier. this comparator will only differentiate across\n                 // indices all shards of the same index is treated equally.\n-                final int secondary = secondaryComparator.compare(o1, o2);\n-                return secondary == 0 ? indexCmp : secondary;\n+                return secondaryComparator.compare(o1, o2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2MDM1NQ=="}, "originalCommit": {"oid": "be53a1b6dc5ced6cc6ba76771217470d986a3498"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3018, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}