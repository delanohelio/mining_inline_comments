{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczOTY4NzUx", "number": 61589, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1MDoxNVrOEco5Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MzoxMVrOEdKfeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDY1NTcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo1MDoxNVrOHHSj_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMzoyOFrOHIGC8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNjIwNA==", "bodyText": "Is this sufficient to mark the task as failed? Is there any other clean up to do?", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r477406204", "createdAt": "2020-08-26T15:50:15Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -698,6 +703,20 @@ protected void nodeOperation(AllocatedPersistentTask task, StartDataFrameAnalyti\n                 return;\n             }\n \n+            ActionListener<Boolean> templateCheckListener = ActionListener.wrap(\n+                ok -> executeTask(analyticsTaskState, task),\n+                error -> {\n+                    Throwable cause = ExceptionsHelper.unwrapCause(error);\n+                    String msg = \"Failed to create internal index template [\" + inferenceIndexTemplate.getTemplateName() + \"]\";\n+                    logger.error(msg, cause);\n+                    task.markAsFailed(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxNTA0Nw==", "bodyText": "task.updatePersistentTaskState(startedState, ActionListener.wrap(\n                    response -> manager.execute((DataFrameAnalyticsTask) task, DataFrameAnalyticsState.STARTED, clusterState),\n                    task::markAsFailed));\n\nonly calls task.markAsFailed, so this should be adequate.\n@dimitris-athanasiou do you have a different opinion?", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r477415047", "createdAt": "2020-08-26T16:03:05Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -698,6 +703,20 @@ protected void nodeOperation(AllocatedPersistentTask task, StartDataFrameAnalyti\n                 return;\n             }\n \n+            ActionListener<Boolean> templateCheckListener = ActionListener.wrap(\n+                ok -> executeTask(analyticsTaskState, task),\n+                error -> {\n+                    Throwable cause = ExceptionsHelper.unwrapCause(error);\n+                    String msg = \"Failed to create internal index template [\" + inferenceIndexTemplate.getTemplateName() + \"]\";\n+                    logger.error(msg, cause);\n+                    task.markAsFailed(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNjIwNA=="}, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0OTcxMw==", "bodyText": "Yes, it should be enough", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478249713", "createdAt": "2020-08-27T08:33:28Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -698,6 +703,20 @@ protected void nodeOperation(AllocatedPersistentTask task, StartDataFrameAnalyti\n                 return;\n             }\n \n+            ActionListener<Boolean> templateCheckListener = ActionListener.wrap(\n+                ok -> executeTask(analyticsTaskState, task),\n+                error -> {\n+                    Throwable cause = ExceptionsHelper.unwrapCause(error);\n+                    String msg = \"Failed to create internal index template [\" + inferenceIndexTemplate.getTemplateName() + \"]\";\n+                    logger.error(msg, cause);\n+                    task.markAsFailed(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNjIwNA=="}, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDcwMDA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjowMDo0N1rOHHTAbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMTo0NTozMFrOHIMefw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzQ4NQ==", "bodyText": "I am not sold on this. Since INFERENCE_TEMPLATE is public and static, I am wondering if TransportStartDataFrameAnalyticsAction.TaskExecutor.java has a static array that it creates of all the templates it cares about.", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r477413485", "createdAt": "2020-08-26T16:00:47Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -599,21 +601,24 @@ public void onFailure(Exception e) {\n         private final DataFrameAnalyticsAuditor auditor;\n         private final MlMemoryTracker memoryTracker;\n         private final IndexNameExpressionResolver resolver;\n+        private final IndexTemplateConfig inferenceIndexTemplate;\n \n         private volatile int maxMachineMemoryPercent;\n         private volatile int maxLazyMLNodes;\n         private volatile int maxOpenJobs;\n         private volatile ClusterState clusterState;\n \n         public TaskExecutor(Settings settings, Client client, ClusterService clusterService, DataFrameAnalyticsManager manager,\n-                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver) {\n+                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver,\n+                            IndexTemplateConfig inferenceIndexTemplate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzNjI5OQ==", "bodyText": "TaskExecutor has just 1 template it cares about today. If I use an array I have to iterate that array using call backs in each put request this harms readability and is confusing as there is no requirement for that code today. If in future multiple templates need to be Put the change can be made then.\nUsing a static reference is fine but it would have to be initialised from the static member in MlIndexTemplateRegistry meaning this class would have to 'know' about the template registry as well as IndexTemplateConfig.", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478236299", "createdAt": "2020-08-27T08:10:54Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -599,21 +601,24 @@ public void onFailure(Exception e) {\n         private final DataFrameAnalyticsAuditor auditor;\n         private final MlMemoryTracker memoryTracker;\n         private final IndexNameExpressionResolver resolver;\n+        private final IndexTemplateConfig inferenceIndexTemplate;\n \n         private volatile int maxMachineMemoryPercent;\n         private volatile int maxLazyMLNodes;\n         private volatile int maxOpenJobs;\n         private volatile ClusterState clusterState;\n \n         public TaskExecutor(Settings settings, Client client, ClusterService clusterService, DataFrameAnalyticsManager manager,\n-                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver) {\n+                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver,\n+                            IndexTemplateConfig inferenceIndexTemplate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzQ4NQ=="}, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM1NTA3MQ==", "bodyText": "meaning this class would have to 'know' about the template registry as well as IndexTemplateConfig\n\nIts just a class path. If you would rather extract the template configs to another class, then thats fine too.\nThe complexity of multiple action listeners is assuaged by org.elasticsearch.action.support.GroupedActionListener.\nI won't \"die on this hill\", but I do think adding a parameter here doesn't really make sense.", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478355071", "createdAt": "2020-08-27T11:45:30Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java", "diffHunk": "@@ -599,21 +601,24 @@ public void onFailure(Exception e) {\n         private final DataFrameAnalyticsAuditor auditor;\n         private final MlMemoryTracker memoryTracker;\n         private final IndexNameExpressionResolver resolver;\n+        private final IndexTemplateConfig inferenceIndexTemplate;\n \n         private volatile int maxMachineMemoryPercent;\n         private volatile int maxLazyMLNodes;\n         private volatile int maxOpenJobs;\n         private volatile ClusterState clusterState;\n \n         public TaskExecutor(Settings settings, Client client, ClusterService clusterService, DataFrameAnalyticsManager manager,\n-                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver) {\n+                            DataFrameAnalyticsAuditor auditor, MlMemoryTracker memoryTracker, IndexNameExpressionResolver resolver,\n+                            IndexTemplateConfig inferenceIndexTemplate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMzQ4NQ=="}, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTY4NDM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNDo1MlrOHIGGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNDo1MlrOHIGGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MDUyNA==", "bodyText": "nit: should this be hasIndexTemplate?", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478250524", "createdAt": "2020-08-27T08:34:52Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "diffHunk": "@@ -215,4 +219,52 @@ private static void updateWriteAlias(Client client,\n                 listener::onFailure),\n             client.admin().indices()::aliases);\n     }\n+\n+    /**\n+     * Installs the index template specified by {@code templateConfig} if it is not in already\n+     * installed in {@code clusterState}.\n+     *\n+     * The check for presence is simple and will return the listener on\n+     * the calling thread if successful. If the template has to be installed\n+     * an async call will be made.\n+     *\n+     * @param clusterState The cluster state\n+     * @param client For putting the template\n+     * @param templateConfig The config\n+     * @param listener Async listener\n+     */\n+    public static void installIndexTemplateIfRequired(\n+        ClusterState clusterState,\n+        Client client,\n+        IndexTemplateConfig templateConfig,\n+        ActionListener<Boolean> listener\n+    ) {\n+        String templateName = templateConfig.getTemplateName();\n+\n+        // The check for existence of the template is against the cluster state, so very cheap\n+        if (haveIndexTemplate(clusterState, templateName)) {\n+            listener.onResponse(true);\n+            return;\n+        }\n+\n+        PutIndexTemplateRequest request = new PutIndexTemplateRequest(templateName)\n+            .source(templateConfig.loadBytes(), XContentType.JSON);\n+        request.masterNodeTimeout(TimeValue.timeValueMinutes(1));\n+\n+        ActionListener<AcknowledgedResponse> innerListener = ActionListener.wrap(\n+            response ->  {\n+                if (response.isAcknowledged() == false) {\n+                    logger.error(\"error adding legacy template [{}], request was not acknowledged\", templateName);\n+                }\n+                listener.onResponse(response.isAcknowledged());\n+            },\n+            listener::onFailure);\n+\n+        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, request, innerListener,\n+            client.admin().indices()::putTemplate);\n+    }\n+\n+    static boolean haveIndexTemplate(ClusterState state, String templateName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTY5MjYzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozNzowM1rOHIGLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyODo0MlrOHIIEOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MTgzNQ==", "bodyText": "Should we make this a warn? If it's an error I would expect it causes listener.onFailure to fire.", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478251835", "createdAt": "2020-08-27T08:37:03Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "diffHunk": "@@ -215,4 +219,52 @@ private static void updateWriteAlias(Client client,\n                 listener::onFailure),\n             client.admin().indices()::aliases);\n     }\n+\n+    /**\n+     * Installs the index template specified by {@code templateConfig} if it is not in already\n+     * installed in {@code clusterState}.\n+     *\n+     * The check for presence is simple and will return the listener on\n+     * the calling thread if successful. If the template has to be installed\n+     * an async call will be made.\n+     *\n+     * @param clusterState The cluster state\n+     * @param client For putting the template\n+     * @param templateConfig The config\n+     * @param listener Async listener\n+     */\n+    public static void installIndexTemplateIfRequired(\n+        ClusterState clusterState,\n+        Client client,\n+        IndexTemplateConfig templateConfig,\n+        ActionListener<Boolean> listener\n+    ) {\n+        String templateName = templateConfig.getTemplateName();\n+\n+        // The check for existence of the template is against the cluster state, so very cheap\n+        if (haveIndexTemplate(clusterState, templateName)) {\n+            listener.onResponse(true);\n+            return;\n+        }\n+\n+        PutIndexTemplateRequest request = new PutIndexTemplateRequest(templateName)\n+            .source(templateConfig.loadBytes(), XContentType.JSON);\n+        request.masterNodeTimeout(TimeValue.timeValueMinutes(1));\n+\n+        ActionListener<AcknowledgedResponse> innerListener = ActionListener.wrap(\n+            response ->  {\n+                if (response.isAcknowledged() == false) {\n+                    logger.error(\"error adding legacy template [{}], request was not acknowledged\", templateName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MjgxMQ==", "bodyText": "It is consistent with IndexTemplateRegistry\n\n  \n    \n      elasticsearch/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/IndexTemplateRegistry.java\n    \n    \n         Line 303\n      in\n      3b68df2\n    \n    \n    \n    \n\n        \n          \n           logger.error(\"error adding legacy template [{}] for [{}], request was not acknowledged\", \n        \n    \n  \n\n\nTBH I wasn't sure what it would mean if isAcknowledged == false but I agree it makes more sense as a warning so I've changed it to warning.\nLooking at the put template code the response cannot be false but that might change\n\n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java\n    \n    \n         Line 763\n      in\n      261250d\n    \n    \n    \n    \n\n        \n          \n           listener.onResponse(new PutResponse(true));", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478282811", "createdAt": "2020-08-27T09:28:42Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "diffHunk": "@@ -215,4 +219,52 @@ private static void updateWriteAlias(Client client,\n                 listener::onFailure),\n             client.admin().indices()::aliases);\n     }\n+\n+    /**\n+     * Installs the index template specified by {@code templateConfig} if it is not in already\n+     * installed in {@code clusterState}.\n+     *\n+     * The check for presence is simple and will return the listener on\n+     * the calling thread if successful. If the template has to be installed\n+     * an async call will be made.\n+     *\n+     * @param clusterState The cluster state\n+     * @param client For putting the template\n+     * @param templateConfig The config\n+     * @param listener Async listener\n+     */\n+    public static void installIndexTemplateIfRequired(\n+        ClusterState clusterState,\n+        Client client,\n+        IndexTemplateConfig templateConfig,\n+        ActionListener<Boolean> listener\n+    ) {\n+        String templateName = templateConfig.getTemplateName();\n+\n+        // The check for existence of the template is against the cluster state, so very cheap\n+        if (haveIndexTemplate(clusterState, templateName)) {\n+            listener.onResponse(true);\n+            return;\n+        }\n+\n+        PutIndexTemplateRequest request = new PutIndexTemplateRequest(templateName)\n+            .source(templateConfig.loadBytes(), XContentType.JSON);\n+        request.masterNodeTimeout(TimeValue.timeValueMinutes(1));\n+\n+        ActionListener<AcknowledgedResponse> innerListener = ActionListener.wrap(\n+            response ->  {\n+                if (response.isAcknowledged() == false) {\n+                    logger.error(\"error adding legacy template [{}], request was not acknowledged\", templateName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MTgzNQ=="}, "originalCommit": {"oid": "ede0537fc56642f0700887473aa48d086ab7053f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDE1NzMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MjowM1rOHIKlEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MjowM1rOHIKlEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMzk4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testInstallIndexTemplateIfRequired_TemplateExist() {\n          \n          \n            \n                public void testInstallIndexTemplateIfRequired_TemplateExists() {", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478323985", "createdAt": "2020-08-27T10:42:03Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "diffHunk": "@@ -116,6 +120,34 @@ public void verifyNoMoreInteractionsWithMocks() {\n         verifyNoMoreInteractions(indicesAdminClient, listener);\n     }\n \n+    public void testInstallIndexTemplateIfRequired_TemplateExist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cbc38ee04108dc90ca74ef55975b449f351998"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDE2MDU4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0MzoxMVrOHIKnCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMTo0MzozNVrOHIMaRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyNDQ4OA==", "bodyText": "Could add the following line here?\ninOrder.verifyNoMoreInteractions();", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478324488", "createdAt": "2020-08-27T10:43:11Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "diffHunk": "@@ -116,6 +120,34 @@ public void verifyNoMoreInteractionsWithMocks() {\n         verifyNoMoreInteractions(indicesAdminClient, listener);\n     }\n \n+    public void testInstallIndexTemplateIfRequired_TemplateExist() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap(),\n+            Collections.singletonMap(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                createIndexTemplateMetaData(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                    Collections.singletonList(InferenceIndexConstants.LATEST_INDEX_NAME))));\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"not_a_real_file.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        verify(listener).onResponse(true);\n+        verifyNoMoreInteractions(client);\n+    }\n+\n+    public void testInstallIndexTemplateIfRequired() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap());\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"/org/elasticsearch/xpack/core/ml/inference_index_template.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        InOrder inOrder = inOrder(indicesAdminClient, listener);\n+        inOrder.verify(indicesAdminClient).putTemplate(any(), any());\n+        inOrder.verify(listener).onResponse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cbc38ee04108dc90ca74ef55975b449f351998"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0OTA3Mw==", "bodyText": "Good point. There is an After method which calls verifyNoMoreInteractions on the mocks but you couldn't have known that from the diff", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478349073", "createdAt": "2020-08-27T11:34:23Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "diffHunk": "@@ -116,6 +120,34 @@ public void verifyNoMoreInteractionsWithMocks() {\n         verifyNoMoreInteractions(indicesAdminClient, listener);\n     }\n \n+    public void testInstallIndexTemplateIfRequired_TemplateExist() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap(),\n+            Collections.singletonMap(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                createIndexTemplateMetaData(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                    Collections.singletonList(InferenceIndexConstants.LATEST_INDEX_NAME))));\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"not_a_real_file.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        verify(listener).onResponse(true);\n+        verifyNoMoreInteractions(client);\n+    }\n+\n+    public void testInstallIndexTemplateIfRequired() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap());\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"/org/elasticsearch/xpack/core/ml/inference_index_template.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        InOrder inOrder = inOrder(indicesAdminClient, listener);\n+        inOrder.verify(indicesAdminClient).putTemplate(any(), any());\n+        inOrder.verify(listener).onResponse(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyNDQ4OA=="}, "originalCommit": {"oid": "c1cbc38ee04108dc90ca74ef55975b449f351998"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM1Mzk4OA==", "bodyText": "Actually, I should have known since I wrote the method ;) I just forgot about it :/", "url": "https://github.com/elastic/elasticsearch/pull/61589#discussion_r478353988", "createdAt": "2020-08-27T11:43:35Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAliasTests.java", "diffHunk": "@@ -116,6 +120,34 @@ public void verifyNoMoreInteractionsWithMocks() {\n         verifyNoMoreInteractions(indicesAdminClient, listener);\n     }\n \n+    public void testInstallIndexTemplateIfRequired_TemplateExist() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap(),\n+            Collections.singletonMap(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                createIndexTemplateMetaData(InferenceIndexConstants.LATEST_INDEX_NAME,\n+                    Collections.singletonList(InferenceIndexConstants.LATEST_INDEX_NAME))));\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"not_a_real_file.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        verify(listener).onResponse(true);\n+        verifyNoMoreInteractions(client);\n+    }\n+\n+    public void testInstallIndexTemplateIfRequired() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap());\n+\n+        IndexTemplateConfig inferenceTemplate = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+            \"/org/elasticsearch/xpack/core/ml/inference_index_template.json\", Version.CURRENT.id, \"xpack.ml.version\",\n+            Collections.singletonMap(\"xpack.ml.version.id\", String.valueOf(Version.CURRENT.id)));\n+\n+        MlIndexAndAlias.installIndexTemplateIfRequired(clusterState, client, inferenceTemplate, listener);\n+        InOrder inOrder = inOrder(indicesAdminClient, listener);\n+        inOrder.verify(indicesAdminClient).putTemplate(any(), any());\n+        inOrder.verify(listener).onResponse(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyNDQ4OA=="}, "originalCommit": {"oid": "c1cbc38ee04108dc90ca74ef55975b449f351998"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 719, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}