{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODgxMTgx", "number": 51517, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTo1MDo0NlrODcNrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNDo0OFrODcOsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTEwNzI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSigner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTo1MDo0NlrOFkJJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Nzo1OFrOFoejbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0MzAyMw==", "bodyText": "We could still just deal with SignableXMLObjects here only. We only need to marshal the object, but we don't need to actually use the returned Element as marshalling is also setting the DOM in the object ( see here\n        samlFactory.toDomElement(object);\n        try {\n            Signer.signObject(signature);\n        } catch (SignatureException e) {\n            throw new ElasticsearchException(\"failed to sign SAML object \" + object, e);\n        }\n        return object;", "url": "https://github.com/elastic/elasticsearch/pull/51517#discussion_r373443023", "createdAt": "2020-01-31T11:50:46Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSigner.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.opensaml.xmlsec.signature.SignableXMLObject;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureConstants;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.Signer;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Signs OpenSAML {@link SignableXMLObject} instances using {@link SamlIdentityProvider#getSigningCredential()}.\n+ */\n+public class SamlObjectSigner {\n+\n+    private final SamlFactory samlFactory;\n+    private final SamlIdentityProvider idp;\n+\n+    public SamlObjectSigner(SamlFactory samlFactory, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.idp = idp;\n+    }\n+\n+    public Element sign(SignableXMLObject object) {\n+        final Signature signature = samlFactory.object(Signature.class, Signature.DEFAULT_ELEMENT_NAME);\n+        signature.setSigningCredential(idp.getSigningCredential());\n+        signature.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256);\n+        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n+        object.setSignature(signature);\n+        Element element = samlFactory.toDomElement(object);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0110de527ce1efdc8adb25cb40eedd0640ccba33"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5NDcwMw==", "bodyText": "This is true, but the Signature on the SignableXMLObject will still be null.\nSo you can keep working with the OpenSAML layer objects (because they have a copy of the DOM element with the signature), but it's confusing because the OpenSAML model is no longer an accurate reflection of the DOM state (one has signature data, the other doesn't).\nI prefer to reflect that by returning Element because that is the only model that clearly reflects the newly attached signature.", "url": "https://github.com/elastic/elasticsearch/pull/51517#discussion_r377594703", "createdAt": "2020-02-11T12:06:50Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSigner.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.opensaml.xmlsec.signature.SignableXMLObject;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureConstants;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.Signer;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Signs OpenSAML {@link SignableXMLObject} instances using {@link SamlIdentityProvider#getSigningCredential()}.\n+ */\n+public class SamlObjectSigner {\n+\n+    private final SamlFactory samlFactory;\n+    private final SamlIdentityProvider idp;\n+\n+    public SamlObjectSigner(SamlFactory samlFactory, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.idp = idp;\n+    }\n+\n+    public Element sign(SignableXMLObject object) {\n+        final Signature signature = samlFactory.object(Signature.class, Signature.DEFAULT_ELEMENT_NAME);\n+        signature.setSigningCredential(idp.getSigningCredential());\n+        signature.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256);\n+        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n+        object.setSignature(signature);\n+        Element element = samlFactory.toDomElement(object);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0MzAyMw=="}, "originalCommit": {"oid": "0110de527ce1efdc8adb25cb40eedd0640ccba33"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxMzc0MA==", "bodyText": "This is true, but the Signature on the SignableXMLObject will still be null.\n\nBut don't we\nobject.setSignature(signature);\n\nright above ? I'm fine to merge as is, I don't even know if we get so much by not returning Element here, just for the sake of discussion.", "url": "https://github.com/elastic/elasticsearch/pull/51517#discussion_r377713740", "createdAt": "2020-02-11T15:37:06Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSigner.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.opensaml.xmlsec.signature.SignableXMLObject;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureConstants;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.Signer;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Signs OpenSAML {@link SignableXMLObject} instances using {@link SamlIdentityProvider#getSigningCredential()}.\n+ */\n+public class SamlObjectSigner {\n+\n+    private final SamlFactory samlFactory;\n+    private final SamlIdentityProvider idp;\n+\n+    public SamlObjectSigner(SamlFactory samlFactory, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.idp = idp;\n+    }\n+\n+    public Element sign(SignableXMLObject object) {\n+        final Signature signature = samlFactory.object(Signature.class, Signature.DEFAULT_ELEMENT_NAME);\n+        signature.setSigningCredential(idp.getSigningCredential());\n+        signature.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256);\n+        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n+        object.setSignature(signature);\n+        Element element = samlFactory.toDomElement(object);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0MzAyMw=="}, "originalCommit": {"oid": "0110de527ce1efdc8adb25cb40eedd0640ccba33"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Nzk1MQ==", "bodyText": "You're right. Thanks for keeping me honest.", "url": "https://github.com/elastic/elasticsearch/pull/51517#discussion_r377987951", "createdAt": "2020-02-12T00:57:58Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSigner.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.opensaml.xmlsec.signature.SignableXMLObject;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureConstants;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.Signer;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Signs OpenSAML {@link SignableXMLObject} instances using {@link SamlIdentityProvider#getSigningCredential()}.\n+ */\n+public class SamlObjectSigner {\n+\n+    private final SamlFactory samlFactory;\n+    private final SamlIdentityProvider idp;\n+\n+    public SamlObjectSigner(SamlFactory samlFactory, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.idp = idp;\n+    }\n+\n+    public Element sign(SignableXMLObject object) {\n+        final Signature signature = samlFactory.object(Signature.class, Signature.DEFAULT_ELEMENT_NAME);\n+        signature.setSigningCredential(idp.getSigningCredential());\n+        signature.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256);\n+        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n+        object.setSignature(signature);\n+        Element element = samlFactory.toDomElement(object);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0MzAyMw=="}, "originalCommit": {"oid": "0110de527ce1efdc8adb25cb40eedd0640ccba33"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3NTI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSignerTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNDo0OFrOFkKwQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo0ODo1MFrOFoHrSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTI0OA==", "bodyText": "I know we test sign in SuccessfulAuthenticationResponseMessageBuilderTests.java too but could we add a test that signs and validates a SAML Response which will be our main use case?", "url": "https://github.com/elastic/elasticsearch/pull/51517#discussion_r373469248", "createdAt": "2020-01-31T13:04:48Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSignerTests.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.test.IdpSamlTestCase;\n+import org.hamcrest.Matchers;\n+import org.joda.time.DateTime;\n+import org.mockito.Mockito;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutRequest;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.SignatureValidator;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SamlObjectSignerTests extends IdpSamlTestCase {\n+\n+    public void testSignLogoutRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0110de527ce1efdc8adb25cb40eedd0640ccba33"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxMzEyOQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/51517#discussion_r377613129", "createdAt": "2020-02-11T12:48:50Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/support/SamlObjectSignerTests.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.test.IdpSamlTestCase;\n+import org.hamcrest.Matchers;\n+import org.joda.time.DateTime;\n+import org.mockito.Mockito;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutRequest;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.SignatureValidator;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SamlObjectSignerTests extends IdpSamlTestCase {\n+\n+    public void testSignLogoutRequest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTI0OA=="}, "originalCommit": {"oid": "0110de527ce1efdc8adb25cb40eedd0640ccba33"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 193, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}