{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjE1OTY4", "number": 52811, "title": "Add exception metadata for disabled features", "bodyText": "This change adds a new exception with consistent metadata for when\nsecurity features are not enabled. This allows clients to be able to\ntell that an API failed due to a configuration option, and respond\naccordingly.\nRelates: elastic/kibana#55255\nResolves: #52311, #47759\n\nSample REST output\n{\n  \"error\" : {\n    \"root_cause\" : [\n      {\n        \"type\" : \"feature_not_enabled_exception\",\n        \"reason\" : \"security tokens are not enabled\",\n        \"disabled.feature\" : \"security_tokens\"\n      }\n    ],\n    \"type\" : \"feature_not_enabled_exception\",\n    \"reason\" : \"security tokens are not enabled\",\n    \"disabled.feature\" : \"security_tokens\"\n  },\n  \"status\" : 400\n}\n\nFor now, possible feature names are security_tokens and api_keys", "createdAt": "2020-02-26T12:31:38Z", "url": "https://github.com/elastic/elasticsearch/pull/52811", "merged": true, "mergeCommit": {"oid": "f5ba0f6fd19b21732967874c1b29c53827826795"}, "closed": true, "closedAt": "2020-03-05T05:44:50Z", "author": {"login": "tvernum"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIFpZUgH2gAyMzgwMjE1OTY4Ojc3YmRlYmU3NjE1YTg2YmFmOWZjNGRiYmE0YjFhMWM0YmUxZmFhYzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKkM3zAFqTM2OTI5NTE0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "77bdebe7615a86baf9fc4dbba4b1a1c4be1faac9", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/77bdebe7615a86baf9fc4dbba4b1a1c4be1faac9", "committedDate": "2020-02-26T12:12:13Z", "message": "Add exception metadata for disabled features\n\nThis change adds a new exception with consistent metadata for when\nsecurity features are not enabled. This allows clients to be able to\ntell that an API failed due to a configuration option, and respond\naccordingly.\n\nRelates: kibana#55255\nResolves: #52311"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c39f54ae39454c0ef31a51e06f4306186194dab", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c39f54ae39454c0ef31a51e06f4306186194dab", "committedDate": "2020-02-26T12:36:55Z", "message": "Revert format changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9", "committedDate": "2020-02-26T12:54:11Z", "message": "Fix imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDYzMzk3", "url": "https://github.com/elastic/elasticsearch/pull/52811#pullrequestreview-365463397", "createdAt": "2020-02-27T07:35:22Z", "commit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozNToyMlrOFvHuuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MTo0OFrOFvIGpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDA0Mw==", "bodyText": "I wonder whether we should give Feature more attention to make it more formalized, because it seems to be an useful concept for other places as well. By formalization, I mean something like, have it in a separate class, place it in a shared package which is more accessible, name each feature more consistently (more on this below).\nIncluding Feature, we now have three different but related concepts: Feature, Setting, Plugin. Plugin seems to be the highest level, in that it provides one or multiple Features and Settings. I am not sure whether Feature has an 1-to-1 relationship with a Setting. If so, I feel the associated Setting should be reflected in this class and this could be useful for users to act accordingly.\nIf the relationship between Feature and Setting is more complex, e.g. a feature corresponds to multiple Settings working together, it may need to be more carefully defined and promoted to be a first level concept. I am a bit surprised that Feature is not already an existing concept since both Setting and Plugin sound too technical when talking to users, while Feature seem to be a more accessible term.\nI am aware that it is not something inherent to this PR so we don't need to solve it all with this PR. One possible actionable item is to move this class to a more common package for reuse by places other than security.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384954043", "createdAt": "2020-02-27T07:35:22Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/FeatureNotEnabledException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.rest.RestStatus;\n+\n+public class FeatureNotEnabledException extends ElasticsearchException {\n+\n+    public static final String DISABLED_FEATURE_METADATA = \"es.disabled.feature\";\n+\n+    /**\n+     * The features names here are constants that form part of our API contract.\n+     * Callers (e.g. Kibana) may be dependent on these strings. Do not change them without consideration of BWC.\n+     */\n+    public enum Feature {\n+        TOKEN_SERVICE(\"security_tokens\"),\n+        API_KEY_SERVICE(\"api_keys\");\n+\n+        private final String featureName;\n+\n+        Feature(String featureName) {\n+            this.featureName = featureName;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTI2OQ==", "bodyText": "nit: Maybe replace \"api_keys\" string literal with API_KEY_SERVICE.getFeatureName()(this needs adding the getFeatureName method as well). I generaly prefer to have less string literals.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384959269", "createdAt": "2020-02-27T07:49:38Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyServiceTests.java", "diffHunk": "@@ -435,6 +439,18 @@ public void testGetRolesForApiKey() throws Exception {\n         }\n     }\n \n+    public void testApiKeyServiceDisabled() throws Exception {\n+        final Settings settings = Settings.builder().put(XPackSettings.API_KEY_SERVICE_ENABLED_SETTING.getKey(), false).build();\n+        final ApiKeyService service = createApiKeyService(settings);\n+\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n+            () -> service.getApiKeys(randomAlphaOfLength(6), randomAlphaOfLength(8), null, null, new PlainActionFuture<>()));\n+\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e, throwableWithMessage(\"api keys are not enabled\"));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"api_keys\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTY4OA==", "bodyText": "Similar nitpick for \"security_tokens\" as above.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384959688", "createdAt": "2020-02-27T07:50:35Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java", "diffHunk": "@@ -560,20 +564,21 @@ public void testTokenServiceDisabled() throws Exception {\n                 .put(XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey(), false)\n                 .build(),\n             Clock.systemUTC(), client, licenseState, securityContext, securityMainIndex, securityTokensIndex, clusterService);\n-        IllegalStateException e = expectThrows(IllegalStateException.class,\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n             () -> tokenService.createOAuth2Tokens(null, null, null, true, null));\n-        assertEquals(\"security tokens are not enabled\", e.getMessage());\n+        assertThat(e, throwableWithMessage(\"security tokens are not enabled\"));\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"security_tokens\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDE2NQ==", "bodyText": "Again same nitpick here as well for \"security_token\".", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384960165", "createdAt": "2020-02-27T07:51:48Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java", "diffHunk": "@@ -560,20 +564,21 @@ public void testTokenServiceDisabled() throws Exception {\n                 .put(XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey(), false)\n                 .build(),\n             Clock.systemUTC(), client, licenseState, securityContext, securityMainIndex, securityTokensIndex, clusterService);\n-        IllegalStateException e = expectThrows(IllegalStateException.class,\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n             () -> tokenService.createOAuth2Tokens(null, null, null, true, null));\n-        assertEquals(\"security tokens are not enabled\", e.getMessage());\n+        assertThat(e, throwableWithMessage(\"security tokens are not enabled\"));\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"security_tokens\"));\n \n         PlainActionFuture<UserToken> future = new PlainActionFuture<>();\n         tokenService.getAndValidateToken(null, future);\n         assertNull(future.get());\n \n-        e = expectThrows(IllegalStateException.class, () -> {\n-            PlainActionFuture<TokensInvalidationResult> invalidateFuture = new PlainActionFuture<>();\n-            tokenService.invalidateAccessToken((String) null, invalidateFuture);\n-            invalidateFuture.actionGet();\n-        });\n-        assertEquals(\"security tokens are not enabled\", e.getMessage());\n+        PlainActionFuture<TokensInvalidationResult> invalidateFuture = new PlainActionFuture<>();\n+        e = expectThrows(ElasticsearchException.class, () -> tokenService.invalidateAccessToken((String) null, invalidateFuture));\n+        assertThat(e, throwableWithMessage(\"security tokens are not enabled\"));\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"security_tokens\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzA2Nzg0", "url": "https://github.com/elastic/elasticsearch/pull/52811#pullrequestreview-368706784", "createdAt": "2020-03-04T11:37:52Z", "commit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25538dd52b98cac993814bf54e1cbdfa6584bb9b", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/25538dd52b98cac993814bf54e1cbdfa6584bb9b", "committedDate": "2020-03-05T04:38:05Z", "message": "Add comments about string literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25978648565da47de79167d5430bdd4066952f03", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/25978648565da47de79167d5430bdd4066952f03", "committedDate": "2020-03-05T04:38:09Z", "message": "Merge branch 'master' into feature-not-enabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Mjk1MTQ3", "url": "https://github.com/elastic/elasticsearch/pull/52811#pullrequestreview-369295147", "createdAt": "2020-03-05T04:55:58Z", "commit": {"oid": "25978648565da47de79167d5430bdd4066952f03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1955, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}