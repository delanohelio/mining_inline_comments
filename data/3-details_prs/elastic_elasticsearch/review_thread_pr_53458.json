{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTIyODQ1", "number": 53458, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozNzozNVrODoSs6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozNzozNVrODoSs6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTc2MDQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/PainlessScripts.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozNzozNVrOF2wFUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo0MDoyOVrOF2wLAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NTIxNg==", "bodyText": "I think buildIsEqualScript or something makes more sense. We are verifying the two fields are equal, not just comparing them. Comparing could also mean gt, or gte which we are not doing.", "url": "https://github.com/elastic/elasticsearch/pull/53458#discussion_r392955216", "createdAt": "2020-03-16T11:37:35Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/PainlessScripts.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.script.Script;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+\n+/**\n+ * Painless scripts used by classification metrics in this package.\n+ */\n+final class PainlessScripts {\n+\n+    /**\n+     * Template for the comparison script.\n+     * It uses \"String.valueOf\" method in case the mapping types of the two fields are different.\n+     */\n+    private static final MessageFormat COMPARISON_SCRIPT_TEMPLATE =\n+        new MessageFormat(\"String.valueOf(doc[''{0}''].value).equals(String.valueOf(doc[''{1}''].value))\", Locale.ROOT);\n+\n+    /**\n+     * Builds field comparison script for the given actual and predicted field names.\n+     * @param actualField name of the actual field\n+     * @param predictedField name of the predicted field\n+     * @return script that compares values of actualField and predictedField\n+     */\n+    static Script buildComparisonScript(String actualField, String predictedField) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e66ea305ca4e7d0dfc5072cec80fc814e7b37aa"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NjY3Mw==", "bodyText": "Good suggestion!\nDone.", "url": "https://github.com/elastic/elasticsearch/pull/53458#discussion_r392956673", "createdAt": "2020-03-16T11:40:29Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/PainlessScripts.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.evaluation.classification;\n+\n+import org.elasticsearch.script.Script;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+\n+/**\n+ * Painless scripts used by classification metrics in this package.\n+ */\n+final class PainlessScripts {\n+\n+    /**\n+     * Template for the comparison script.\n+     * It uses \"String.valueOf\" method in case the mapping types of the two fields are different.\n+     */\n+    private static final MessageFormat COMPARISON_SCRIPT_TEMPLATE =\n+        new MessageFormat(\"String.valueOf(doc[''{0}''].value).equals(String.valueOf(doc[''{1}''].value))\", Locale.ROOT);\n+\n+    /**\n+     * Builds field comparison script for the given actual and predicted field names.\n+     * @param actualField name of the actual field\n+     * @param predictedField name of the predicted field\n+     * @return script that compares values of actualField and predictedField\n+     */\n+    static Script buildComparisonScript(String actualField, String predictedField) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NTIxNg=="}, "originalCommit": {"oid": "8e66ea305ca4e7d0dfc5072cec80fc814e7b37aa"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3317, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}