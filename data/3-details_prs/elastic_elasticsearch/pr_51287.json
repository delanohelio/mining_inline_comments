{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NzEzOTIz", "number": 51287, "title": "[DOCS] Split off ILM overview to a separate topic.", "bodyText": "", "createdAt": "2020-01-22T07:54:04Z", "url": "https://github.com/elastic/elasticsearch/pull/51287", "merged": true, "mergeCommit": {"oid": "d5cacd86766e61bbd80159d1efde1a4c962547bc"}, "closed": true, "closedAt": "2020-01-28T03:39:25Z", "author": {"login": "debadair"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb85fQjgFqTM0Njc4MjE4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-m0WCABqjI5ODM5NjE4Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzgyMTg1", "url": "https://github.com/elastic/elasticsearch/pull/51287#pullrequestreview-346782185", "createdAt": "2020-01-22T17:49:06Z", "commit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo0OTowNlrOFglRkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo0OTowNlrOFglRkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwOTQ1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can configure index lifecycle policies to automatically manage indices as they age. \n          \n          \n            \n            You can configure index lifecycle policies to automatically manage indices as they age or grow. \n          \n      \n    \n    \n  \n\nThis sort of implies that you can only manage indices based on dates.", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369709458", "createdAt": "2020-01-22T17:49:06Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/index.asciidoc", "diffHunk": "@@ -1,72 +1,29 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n [[index-lifecycle-management]]\n-= Managing the index lifecycle\n+= Manage the index lifecycle\n \n [partintro]\n --\n-\n-The <<index-lifecycle-management-api,{ilm} ({ilm-init}) APIs>> enable you to\n-automate how you want to manage your indices over time. Rather than simply\n-performing management actions on your indices on a set schedule, you can base\n-actions on other factors such as shard size and performance requirements.\n-\n-You control how indices are handled as they age by attaching a\n-lifecycle policy to the index template used to create them. You can update\n-the policy to modify the lifecycle of both new and existing indices.\n-\n-For time series indices, there are four stages in the index lifecycle:\n-\n-* Hot--the index is actively being updated and queried.\n-* Warm--the index is no longer being updated, but is still being queried.\n-* Cold--the index is no longer being updated and is seldom queried. The\n-information still needs to be searchable, but it's okay if those queries are\n-slower.\n-* Delete--the index is no longer needed and can safely be deleted.\n-\n-The lifecycle policy governs how the index transitions through these stages and\n-the actions that are performed on the index at each stage. The policy can\n-specify:\n-\n-* The maximum size or age at which you want to roll over to a new index.\n-* The point at which the index is no longer being updated and the number of\n-primary shards can be reduced.\n-* When to force a merge to permanently delete documents marked for deletion.\n-* The point at which the index can be moved to less performant hardware.\n-* The point at which the availability is not as critical and the number of\n-replicas can be reduced.\n-* When the index can be safely deleted.\n-\n-For example, if you are indexing metrics data from a fleet of ATMs into\n-Elasticsearch, you might define a policy that says:\n-\n-. When the index reaches 50GB, roll over to a new index.\n-. Move the old index into the warm stage, mark it read only, and shrink it down\n-to a single shard.\n-. After 7 days, move the index into the cold stage and move it to less expensive\n-hardware.\n-. Delete the index once the required 30 day retention period is reached.\n-\n-*Snapshot Lifecycle Management*\n-\n-ILM itself does allow managing indices, however, managing snapshots for a set of\n-indices is outside of the scope of an index-level policy. Instead, there are\n-separate APIs for managing snapshot lifecycles. Please see the\n-<<snapshot-lifecycle-management-api,Snapshot Lifecycle Management>>\n-documentation for information about configuring snapshots.\n-\n-See <<getting-started-snapshot-lifecycle-management,getting started with SLM>>.\n-\n-[IMPORTANT]\n-===========================\n-{ilm} does not support mixed-version cluster usage. Although it\n-may be possible to create such new policies against\n-newer-versioned nodes, there is no guarantee they will\n-work as intended. New policies using new actions that\n-do not exist in the oldest versioned node will cause errors.\n-===========================\n+You can configure index lifecycle policies to automatically manage indices as they age. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Nzg2OTIw", "url": "https://github.com/elastic/elasticsearch/pull/51287#pullrequestreview-346786920", "createdAt": "2020-01-22T17:56:36Z", "commit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1NjozN1rOFglgHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1NjozN1rOFglgHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMzE4MQ==", "bodyText": "I don't know if we should assume users are familiar with actions like \"shrink\" or \"rollover.\" It help to reword this as a short bulleted list of examples, focusing on the biggest use cases.\n\nYou can use index lifecycle policies to automatically:\n\nCreate a new index each day, week, or month and archive previous ones\nSpin up a new index when an index reaches a certain size\nDelete stale indices to enforce data retention standards", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369713181", "createdAt": "2020-01-22T17:56:37Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/index.asciidoc", "diffHunk": "@@ -1,72 +1,29 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n [[index-lifecycle-management]]\n-= Managing the index lifecycle\n+= Manage the index lifecycle\n \n [partintro]\n --\n-\n-The <<index-lifecycle-management-api,{ilm} ({ilm-init}) APIs>> enable you to\n-automate how you want to manage your indices over time. Rather than simply\n-performing management actions on your indices on a set schedule, you can base\n-actions on other factors such as shard size and performance requirements.\n-\n-You control how indices are handled as they age by attaching a\n-lifecycle policy to the index template used to create them. You can update\n-the policy to modify the lifecycle of both new and existing indices.\n-\n-For time series indices, there are four stages in the index lifecycle:\n-\n-* Hot--the index is actively being updated and queried.\n-* Warm--the index is no longer being updated, but is still being queried.\n-* Cold--the index is no longer being updated and is seldom queried. The\n-information still needs to be searchable, but it's okay if those queries are\n-slower.\n-* Delete--the index is no longer needed and can safely be deleted.\n-\n-The lifecycle policy governs how the index transitions through these stages and\n-the actions that are performed on the index at each stage. The policy can\n-specify:\n-\n-* The maximum size or age at which you want to roll over to a new index.\n-* The point at which the index is no longer being updated and the number of\n-primary shards can be reduced.\n-* When to force a merge to permanently delete documents marked for deletion.\n-* The point at which the index can be moved to less performant hardware.\n-* The point at which the availability is not as critical and the number of\n-replicas can be reduced.\n-* When the index can be safely deleted.\n-\n-For example, if you are indexing metrics data from a fleet of ATMs into\n-Elasticsearch, you might define a policy that says:\n-\n-. When the index reaches 50GB, roll over to a new index.\n-. Move the old index into the warm stage, mark it read only, and shrink it down\n-to a single shard.\n-. After 7 days, move the index into the cold stage and move it to less expensive\n-hardware.\n-. Delete the index once the required 30 day retention period is reached.\n-\n-*Snapshot Lifecycle Management*\n-\n-ILM itself does allow managing indices, however, managing snapshots for a set of\n-indices is outside of the scope of an index-level policy. Instead, there are\n-separate APIs for managing snapshot lifecycles. Please see the\n-<<snapshot-lifecycle-management-api,Snapshot Lifecycle Management>>\n-documentation for information about configuring snapshots.\n-\n-See <<getting-started-snapshot-lifecycle-management,getting started with SLM>>.\n-\n-[IMPORTANT]\n-===========================\n-{ilm} does not support mixed-version cluster usage. Although it\n-may be possible to create such new policies against\n-newer-versioned nodes, there is no guarantee they will\n-work as intended. New policies using new actions that\n-do not exist in the oldest versioned node will cause errors.\n-===========================\n+You can configure index lifecycle policies to automatically manage indices as they age. \n+Index lifecycle policies can trigger actions such as rollover, shrink, force merge, freeze, and delete \n+based on your performance, resiliency, and retention requirements. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Nzg3NDA2", "url": "https://github.com/elastic/elasticsearch/pull/51287#pullrequestreview-346787406", "createdAt": "2020-01-22T17:57:16Z", "commit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1NzoxN1rOFglhtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1NzoxN1rOFglhtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMzU4OA==", "bodyText": "I'd put this in a [TIP] block as it's not directly related.", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369713588", "createdAt": "2020-01-22T17:57:17Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/index.asciidoc", "diffHunk": "@@ -1,72 +1,29 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n [[index-lifecycle-management]]\n-= Managing the index lifecycle\n+= Manage the index lifecycle\n \n [partintro]\n --\n-\n-The <<index-lifecycle-management-api,{ilm} ({ilm-init}) APIs>> enable you to\n-automate how you want to manage your indices over time. Rather than simply\n-performing management actions on your indices on a set schedule, you can base\n-actions on other factors such as shard size and performance requirements.\n-\n-You control how indices are handled as they age by attaching a\n-lifecycle policy to the index template used to create them. You can update\n-the policy to modify the lifecycle of both new and existing indices.\n-\n-For time series indices, there are four stages in the index lifecycle:\n-\n-* Hot--the index is actively being updated and queried.\n-* Warm--the index is no longer being updated, but is still being queried.\n-* Cold--the index is no longer being updated and is seldom queried. The\n-information still needs to be searchable, but it's okay if those queries are\n-slower.\n-* Delete--the index is no longer needed and can safely be deleted.\n-\n-The lifecycle policy governs how the index transitions through these stages and\n-the actions that are performed on the index at each stage. The policy can\n-specify:\n-\n-* The maximum size or age at which you want to roll over to a new index.\n-* The point at which the index is no longer being updated and the number of\n-primary shards can be reduced.\n-* When to force a merge to permanently delete documents marked for deletion.\n-* The point at which the index can be moved to less performant hardware.\n-* The point at which the availability is not as critical and the number of\n-replicas can be reduced.\n-* When the index can be safely deleted.\n-\n-For example, if you are indexing metrics data from a fleet of ATMs into\n-Elasticsearch, you might define a policy that says:\n-\n-. When the index reaches 50GB, roll over to a new index.\n-. Move the old index into the warm stage, mark it read only, and shrink it down\n-to a single shard.\n-. After 7 days, move the index into the cold stage and move it to less expensive\n-hardware.\n-. Delete the index once the required 30 day retention period is reached.\n-\n-*Snapshot Lifecycle Management*\n-\n-ILM itself does allow managing indices, however, managing snapshots for a set of\n-indices is outside of the scope of an index-level policy. Instead, there are\n-separate APIs for managing snapshot lifecycles. Please see the\n-<<snapshot-lifecycle-management-api,Snapshot Lifecycle Management>>\n-documentation for information about configuring snapshots.\n-\n-See <<getting-started-snapshot-lifecycle-management,getting started with SLM>>.\n-\n-[IMPORTANT]\n-===========================\n-{ilm} does not support mixed-version cluster usage. Although it\n-may be possible to create such new policies against\n-newer-versioned nodes, there is no guarantee they will\n-work as intended. New policies using new actions that\n-do not exist in the oldest versioned node will cause errors.\n-===========================\n+You can configure index lifecycle policies to automatically manage indices as they age. \n+Index lifecycle policies can trigger actions such as rollover, shrink, force merge, freeze, and delete \n+based on your performance, resiliency, and retention requirements. \n+To automatically back up your indices and manage snapshots, \n+use <<getting-started-snapshot-lifecycle-management,snapshot lifecycle policies>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Nzg4NjQ3", "url": "https://github.com/elastic/elasticsearch/pull/51287#pullrequestreview-346788647", "createdAt": "2020-01-22T17:59:15Z", "commit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1OToxNVrOFgllYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1OToxNVrOFgllYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxNDUzMQ==", "bodyText": "I'm not a huge fan of gerund titles. Not a huge deal though.", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369714531", "createdAt": "2020-01-22T17:59:15Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/index.asciidoc", "diffHunk": "@@ -1,72 +1,29 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n [[index-lifecycle-management]]\n-= Managing the index lifecycle\n+= Manage the index lifecycle\n \n [partintro]\n --\n-\n-The <<index-lifecycle-management-api,{ilm} ({ilm-init}) APIs>> enable you to\n-automate how you want to manage your indices over time. Rather than simply\n-performing management actions on your indices on a set schedule, you can base\n-actions on other factors such as shard size and performance requirements.\n-\n-You control how indices are handled as they age by attaching a\n-lifecycle policy to the index template used to create them. You can update\n-the policy to modify the lifecycle of both new and existing indices.\n-\n-For time series indices, there are four stages in the index lifecycle:\n-\n-* Hot--the index is actively being updated and queried.\n-* Warm--the index is no longer being updated, but is still being queried.\n-* Cold--the index is no longer being updated and is seldom queried. The\n-information still needs to be searchable, but it's okay if those queries are\n-slower.\n-* Delete--the index is no longer needed and can safely be deleted.\n-\n-The lifecycle policy governs how the index transitions through these stages and\n-the actions that are performed on the index at each stage. The policy can\n-specify:\n-\n-* The maximum size or age at which you want to roll over to a new index.\n-* The point at which the index is no longer being updated and the number of\n-primary shards can be reduced.\n-* When to force a merge to permanently delete documents marked for deletion.\n-* The point at which the index can be moved to less performant hardware.\n-* The point at which the availability is not as critical and the number of\n-replicas can be reduced.\n-* When the index can be safely deleted.\n-\n-For example, if you are indexing metrics data from a fleet of ATMs into\n-Elasticsearch, you might define a policy that says:\n-\n-. When the index reaches 50GB, roll over to a new index.\n-. Move the old index into the warm stage, mark it read only, and shrink it down\n-to a single shard.\n-. After 7 days, move the index into the cold stage and move it to less expensive\n-hardware.\n-. Delete the index once the required 30 day retention period is reached.\n-\n-*Snapshot Lifecycle Management*\n-\n-ILM itself does allow managing indices, however, managing snapshots for a set of\n-indices is outside of the scope of an index-level policy. Instead, there are\n-separate APIs for managing snapshot lifecycles. Please see the\n-<<snapshot-lifecycle-management-api,Snapshot Lifecycle Management>>\n-documentation for information about configuring snapshots.\n-\n-See <<getting-started-snapshot-lifecycle-management,getting started with SLM>>.\n-\n-[IMPORTANT]\n-===========================\n-{ilm} does not support mixed-version cluster usage. Although it\n-may be possible to create such new policies against\n-newer-versioned nodes, there is no guarantee they will\n-work as intended. New policies using new actions that\n-do not exist in the oldest versioned node will cause errors.\n-===========================\n+You can configure index lifecycle policies to automatically manage indices as they age. \n+Index lifecycle policies can trigger actions such as rollover, shrink, force merge, freeze, and delete \n+based on your performance, resiliency, and retention requirements. \n+To automatically back up your indices and manage snapshots, \n+use <<getting-started-snapshot-lifecycle-management,snapshot lifecycle policies>>.\n+\n+* <<overview-index-lifecycle-management, Overview>>\n+* <<getting-started-index-lifecycle-management, Getting Started with {ilm-init}>>\n+* <<ilm-policy-definition, Policy phases and actions>>\n+* <<set-up-lifecycle-policy, Creating policies>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Nzg5ODQ3", "url": "https://github.com/elastic/elasticsearch/pull/51287#pullrequestreview-346789847", "createdAt": "2020-01-22T18:01:18Z", "commit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODowNzowNVrOFglzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMjoxOVrOFgmPbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxODA3Mg==", "bodyText": "I'm not sure a new user would know what these actions are or what they mean.\nIt may be more helpful to do one of the following:\n\nRemove this sentence\nAdd links to the example actions\nReword this to go into a bit more depth", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369718072", "createdAt": "2020-01-22T18:07:05Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/overview-ilm.asciidoc", "diffHunk": "@@ -0,0 +1,58 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[overview-index-lifecycle-management]]\n+== Index lifecycle management overview\n+\n+++++\n+<titleabbrev>Overview</titleabbrev>\n+++++\n+\n+You can create and apply {ilm-cap} ({ilm-init}) policies to automatically manage your indices \n+according to your performance, resiliency, and retention requirements. \n+Index lifecycle policies can trigger actions such as rollover, shrink, freeze, and delete. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxOTI0OA==", "bodyText": "I thought the way it worked was:\n\nYou define a match pattern when you create an index template.\nWhen you create an index that matches the match pattern, the index template is applied.\n\nThis sort of implies you create indices from the template space, which I don't think is the case.", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369719248", "createdAt": "2020-01-22T18:09:36Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/overview-ilm.asciidoc", "diffHunk": "@@ -0,0 +1,58 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[overview-index-lifecycle-management]]\n+== Index lifecycle management overview\n+\n+++++\n+<titleabbrev>Overview</titleabbrev>\n+++++\n+\n+You can create and apply {ilm-cap} ({ilm-init}) policies to automatically manage your indices \n+according to your performance, resiliency, and retention requirements. \n+Index lifecycle policies can trigger actions such as rollover, shrink, freeze, and delete. \n+\n+Typically, you associate a lifecycle policy with an index template so it is applied   \n+whenever an index is created from the template. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMTc1MQ==", "bodyText": "I think I'd frame this as \"ILM is often used to manage hot-cold architecture. Hot-warm-cold architectures are common for time series data, such as logging or metrics.\"\nIn any case, the second sentence implies that time-series data always has a hot-cold architecture, which isn't necessarily true. I think it also confuses hot-cold architecture with time-series data. Hot-cold architecture is helpful in contexts outside of time-series data.\nI'd also note that hot-cold architecture can include up to four stages. For example, you could easily pull out the warm or delete stages.", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369721751", "createdAt": "2020-01-22T18:14:53Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/overview-ilm.asciidoc", "diffHunk": "@@ -0,0 +1,58 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[overview-index-lifecycle-management]]\n+== Index lifecycle management overview\n+\n+++++\n+<titleabbrev>Overview</titleabbrev>\n+++++\n+\n+You can create and apply {ilm-cap} ({ilm-init}) policies to automatically manage your indices \n+according to your performance, resiliency, and retention requirements. \n+Index lifecycle policies can trigger actions such as rollover, shrink, freeze, and delete. \n+\n+Typically, you associate a lifecycle policy with an index template so it is applied   \n+whenever an index is created from the template. \n+You can also apply a policy manually when you create an index.\n+\n+Index lifecycle policies are most often used to manage time-series indices. \n+Time-series indices have a four stage lifecycle:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMjc2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A lifecycle policy governs how the index transitions through these stages and\n          \n          \n            \n            You can use a lifecycle policy to govern how an index transitions through these stages and", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369722769", "createdAt": "2020-01-22T18:17:05Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/overview-ilm.asciidoc", "diffHunk": "@@ -0,0 +1,58 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[overview-index-lifecycle-management]]\n+== Index lifecycle management overview\n+\n+++++\n+<titleabbrev>Overview</titleabbrev>\n+++++\n+\n+You can create and apply {ilm-cap} ({ilm-init}) policies to automatically manage your indices \n+according to your performance, resiliency, and retention requirements. \n+Index lifecycle policies can trigger actions such as rollover, shrink, freeze, and delete. \n+\n+Typically, you associate a lifecycle policy with an index template so it is applied   \n+whenever an index is created from the template. \n+You can also apply a policy manually when you create an index.\n+\n+Index lifecycle policies are most often used to manage time-series indices. \n+Time-series indices have a four stage lifecycle:\n+\n+* Hot--the index is actively being updated and queried.\n+* Warm--the index is no longer being updated, but is still being queried.\n+* Cold--the index is no longer being updated and is seldom queried. The\n+information still needs to be searchable, but it's okay if those queries are\n+slower.\n+* Delete--the index is no longer needed and can safely be deleted.\n+\n+A lifecycle policy governs how the index transitions through these stages and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMjg4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the actions that are performed on the index at each stage. \n          \n          \n            \n            the actions performed at each stage.", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369722887", "createdAt": "2020-01-22T18:17:19Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/overview-ilm.asciidoc", "diffHunk": "@@ -0,0 +1,58 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[overview-index-lifecycle-management]]\n+== Index lifecycle management overview\n+\n+++++\n+<titleabbrev>Overview</titleabbrev>\n+++++\n+\n+You can create and apply {ilm-cap} ({ilm-init}) policies to automatically manage your indices \n+according to your performance, resiliency, and retention requirements. \n+Index lifecycle policies can trigger actions such as rollover, shrink, freeze, and delete. \n+\n+Typically, you associate a lifecycle policy with an index template so it is applied   \n+whenever an index is created from the template. \n+You can also apply a policy manually when you create an index.\n+\n+Index lifecycle policies are most often used to manage time-series indices. \n+Time-series indices have a four stage lifecycle:\n+\n+* Hot--the index is actively being updated and queried.\n+* Warm--the index is no longer being updated, but is still being queried.\n+* Cold--the index is no longer being updated and is seldom queried. The\n+information still needs to be searchable, but it's okay if those queries are\n+slower.\n+* Delete--the index is no longer needed and can safely be deleted.\n+\n+A lifecycle policy governs how the index transitions through these stages and\n+the actions that are performed on the index at each stage. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTI5NA==", "bodyText": "We should probably explain what a mixed-version cluster is.", "url": "https://github.com/elastic/elasticsearch/pull/51287#discussion_r369725294", "createdAt": "2020-01-22T18:22:19Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/overview-ilm.asciidoc", "diffHunk": "@@ -0,0 +1,58 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[overview-index-lifecycle-management]]\n+== Index lifecycle management overview\n+\n+++++\n+<titleabbrev>Overview</titleabbrev>\n+++++\n+\n+You can create and apply {ilm-cap} ({ilm-init}) policies to automatically manage your indices \n+according to your performance, resiliency, and retention requirements. \n+Index lifecycle policies can trigger actions such as rollover, shrink, freeze, and delete. \n+\n+Typically, you associate a lifecycle policy with an index template so it is applied   \n+whenever an index is created from the template. \n+You can also apply a policy manually when you create an index.\n+\n+Index lifecycle policies are most often used to manage time-series indices. \n+Time-series indices have a four stage lifecycle:\n+\n+* Hot--the index is actively being updated and queried.\n+* Warm--the index is no longer being updated, but is still being queried.\n+* Cold--the index is no longer being updated and is seldom queried. The\n+information still needs to be searchable, but it's okay if those queries are\n+slower.\n+* Delete--the index is no longer needed and can safely be deleted.\n+\n+A lifecycle policy governs how the index transitions through these stages and\n+the actions that are performed on the index at each stage. \n+The policy can specify:\n+\n+* The maximum size or age at which you want to roll over to a new index.\n+* The point at which the index is no longer being updated and the number of\n+primary shards can be reduced.\n+* When to force a merge to permanently delete documents marked for deletion.\n+* The point at which the index can be moved to less performant hardware.\n+* The point at which the availability is not as critical and the number of\n+replicas can be reduced.\n+* When the index can be safely deleted.\n+\n+For example, if you are indexing metrics data from a fleet of ATMs into\n+Elasticsearch, you might define a policy that says:\n+\n+. When the index reaches 50GB, roll over to a new index.\n+. Move the old index into the warm stage, mark it read only, and shrink it down\n+to a single shard.\n+. After 7 days, move the index into the cold stage and move it to less expensive\n+hardware.\n+. Delete the index once the required 30 day retention period is reached.\n+\n+[IMPORTANT]\n+===========================\n+{ilm} does not support mixed-version clusters. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d096d6eed7b3c9b3d8d726956356bf931e5f45e0"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da5446455df137e18dc5d7125dac4952942f3274", "author": {"user": {"login": "debadair", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/da5446455df137e18dc5d7125dac4952942f3274", "committedDate": "2020-01-28T01:11:18Z", "message": "[DOCS} Split off overview to a separate topic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c3f0fa818640d01d06ffb81beb6661cd5498450", "author": {"user": {"login": "debadair", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/0c3f0fa818640d01d06ffb81beb6661cd5498450", "committedDate": "2020-01-28T01:11:19Z", "message": "Edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c45993e68371d0c4b678e0e631d091f35a2c7847", "author": {"user": {"login": "debadair", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/c45993e68371d0c4b678e0e631d091f35a2c7847", "committedDate": "2020-01-28T01:11:19Z", "message": "Fixed xref"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6acc42cb5c9c95cb3cdc4e42b3cfb42e18d3f711", "author": {"user": {"login": "debadair", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/6acc42cb5c9c95cb3cdc4e42b3cfb42e18d3f711", "committedDate": "2020-01-28T01:11:24Z", "message": "[DOCS] Incorporated feedback from @jrodewig."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3beab7db22b0382feba5a7695c0e097559259707", "author": {"user": {"login": "debadair", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/3beab7db22b0382feba5a7695c0e097559259707", "committedDate": "2020-01-28T01:08:29Z", "message": "[DOCS] Incorporated feedback from @jrodewig."}, "afterCommit": {"oid": "6acc42cb5c9c95cb3cdc4e42b3cfb42e18d3f711", "author": {"user": {"login": "debadair", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/6acc42cb5c9c95cb3cdc4e42b3cfb42e18d3f711", "committedDate": "2020-01-28T01:11:24Z", "message": "[DOCS] Incorporated feedback from @jrodewig."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2833, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}