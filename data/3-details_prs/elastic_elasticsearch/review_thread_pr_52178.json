{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDQxMjcy", "number": 52178, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjo1Mjo1NFrODfCFVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNDoxMFrODhu48g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODY2NTgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjo1Mjo1NFrOFogQTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjowMjoyMlrOFrlk3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNTgyMA==", "bodyText": "This is not strictly necessary since API key cannot impersonate another API key. But changed anyhow for consistency.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378015820", "createdAt": "2020-02-12T02:52:54Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e264109c4a613d0d1e7fddd8213b4faac7f32760"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMDA4NQ==", "bodyText": "I don't take issue with your change, but ApiKeyService#getCreatorRealmType uses the getAuthenticatedBy realm, so the consistency argument is weak.\nDeep inside I prefer:\nif (Authentication.AuthenticationType.API_KEY == authentication.getAuthenticationType()) { \n\nand that ApiKeyService#getCreatorRealmType/Name be refactored under Authentication .\nBut this is out of scope for this PR.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381200085", "createdAt": "2020-02-19T10:20:38Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNTgyMA=="}, "originalCommit": {"oid": "e264109c4a613d0d1e7fddd8213b4faac7f32760"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0ODczMw==", "bodyText": "I mean consistency within the same class, i.e. the following line in the same file.\nI agree with your analysis. The logic in ApiKeyService#getCreatorRealmXxx is inconsistent. Since API key cannot impersonate another API key, it works with both authenticatedBy and lookedUpBy. But I think it's better to keep them consistent. Also worthwhile to change the authentication type test as you suggested. I created a new issue #52511 for these changes. Thanks", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381248733", "createdAt": "2020-02-19T12:02:22Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNTgyMA=="}, "originalCommit": {"oid": "e264109c4a613d0d1e7fddd8213b4faac7f32760"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzMzODE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo0Mjo0OVrOFpNCCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMzozMVrOFpRS8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0OTQ1MA==", "bodyText": "I don't think the \"authenticated\" user and realm are the ones required here.\nThis check must verify that the username and realm request parameters match the user's name and realm. This is because the value of the request parameters are the ones actually used when retrieving/invalidating the API keys.\nFor example, this ought to be possible if user jacknich has only the manage_own_api_keys privilege.\ncurl -u tomcruise -H \"es-security-runas-user: jacknich\" -X DELETE \"localhost:9200/_security/api_key?pretty\" -H 'Content-Type: application/json' -d'\n{\n  \"username\" : \"jacknich\"\n}\n'\n\nBut it would not work with your changes because the check here compares the \"username\" request parameter to the user that authenticated, i.e. tomcruise.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378749450", "createdAt": "2020-02-13T09:42:49Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {\n                     // API key cannot own any other API key so deny access\n                     return false;\n                 } else if (ownedByAuthenticatedUser) {\n                     return true;\n                 } else if (Strings.hasText(username) && Strings.hasText(realmName)) {\n-                    final String authenticatedUserPrincipal = authentication.getUser().principal();\n-                    final String authenticatedUserRealm = authentication.getAuthenticatedBy().getName();\n+                    final String authenticatedUserPrincipal = authentication.getUser().authenticatedUser().principal();\n+                    final String authenticatedUserRealm = authentication.getSourceRealm().getName();\n                     return username.equals(authenticatedUserPrincipal) && realmName.equals(authenticatedUserRealm);\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MTEyMg==", "bodyText": "Thanks Albert. This is a good catch! Really appreciated.\nI thought I understood how User object was designed. But somehow I got it wrong. Thanks for catching this.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378771122", "createdAt": "2020-02-13T10:23:38Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {\n                     // API key cannot own any other API key so deny access\n                     return false;\n                 } else if (ownedByAuthenticatedUser) {\n                     return true;\n                 } else if (Strings.hasText(username) && Strings.hasText(realmName)) {\n-                    final String authenticatedUserPrincipal = authentication.getUser().principal();\n-                    final String authenticatedUserRealm = authentication.getAuthenticatedBy().getName();\n+                    final String authenticatedUserPrincipal = authentication.getUser().authenticatedUser().principal();\n+                    final String authenticatedUserRealm = authentication.getSourceRealm().getName();\n                     return username.equals(authenticatedUserPrincipal) && realmName.equals(authenticatedUserRealm);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0OTQ1MA=="}, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxOTMxMw==", "bodyText": "Updated", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378819313", "createdAt": "2020-02-13T12:03:31Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilege.java", "diffHunk": "@@ -78,22 +78,22 @@ private boolean checkIfUserIsOwnerOfApiKeys(Authentication authentication, Strin\n                  * TODO bizybot we need to think on how we can propagate appropriate error message to the end user when username, realm name\n                  *   is missing. This is similar to the problem of propagating right error messages in case of access denied.\n                  */\n-                if (authentication.getAuthenticatedBy().getType().equals(API_KEY_REALM_TYPE)) {\n+                if (authentication.getSourceRealm().getType().equals(API_KEY_REALM_TYPE)) {\n                     // API key cannot own any other API key so deny access\n                     return false;\n                 } else if (ownedByAuthenticatedUser) {\n                     return true;\n                 } else if (Strings.hasText(username) && Strings.hasText(realmName)) {\n-                    final String authenticatedUserPrincipal = authentication.getUser().principal();\n-                    final String authenticatedUserRealm = authentication.getAuthenticatedBy().getName();\n+                    final String authenticatedUserPrincipal = authentication.getUser().authenticatedUser().principal();\n+                    final String authenticatedUserRealm = authentication.getSourceRealm().getName();\n                     return username.equals(authenticatedUserPrincipal) && realmName.equals(authenticatedUserRealm);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0OTQ1MA=="}, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzQwNDk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDowMjozOVrOFpNreQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjoxNTozMFrOFpRmmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MDA1Nw==", "bodyText": "add a test when the owned flag is not set, but the username and realm are.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378760057", "createdAt": "2020-02-13T10:02:39Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -540,6 +544,25 @@ public void testGetApiKeysOwnedByCurrentAuthenticatedUser() throws InterruptedEx\n             response, userWithManageApiKeyRoleApiKeys.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n     }\n \n+    public void testGetApiKeysOwnedByRunAsUser() throws ExecutionException, InterruptedException {\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);\n+        final String userWithManageOwnApiKeyRole = \"user_with_manage_own_api_key_role\";\n+        final String userWithRunAsRole = \"user_with_run_as_role\";\n+        List<CreateApiKeyResponse> userWithManageOwnApiKeyRoleApiKeys = createApiKeys(userWithManageOwnApiKeyRole,\n+            userWithRunAsRole, noOfApiKeysForUserWithManageApiKeyRole, null, \"monitor\");\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\", UsernamePasswordToken\n+            .basicAuthHeaderValue(userWithRunAsRole, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", userWithManageOwnApiKeyRole));\n+\n+        PlainActionFuture<GetApiKeyResponse> listener = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.forOwnedApiKeys(), listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MjA0NQ==", "bodyText": "I was meant do test without the \"owner\" flag since the updated logic won't get executed with its presense. Somehow I ended up forgetting it. Will update. Thanks", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378772045", "createdAt": "2020-02-13T10:25:23Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -540,6 +544,25 @@ public void testGetApiKeysOwnedByCurrentAuthenticatedUser() throws InterruptedEx\n             response, userWithManageApiKeyRoleApiKeys.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n     }\n \n+    public void testGetApiKeysOwnedByRunAsUser() throws ExecutionException, InterruptedException {\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);\n+        final String userWithManageOwnApiKeyRole = \"user_with_manage_own_api_key_role\";\n+        final String userWithRunAsRole = \"user_with_run_as_role\";\n+        List<CreateApiKeyResponse> userWithManageOwnApiKeyRoleApiKeys = createApiKeys(userWithManageOwnApiKeyRole,\n+            userWithRunAsRole, noOfApiKeysForUserWithManageApiKeyRole, null, \"monitor\");\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\", UsernamePasswordToken\n+            .basicAuthHeaderValue(userWithRunAsRole, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", userWithManageOwnApiKeyRole));\n+\n+        PlainActionFuture<GetApiKeyResponse> listener = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.forOwnedApiKeys(), listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MDA1Nw=="}, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDM0Ng==", "bodyText": "Add tests for get and invalidate API key without \"owner=true\"", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378824346", "createdAt": "2020-02-13T12:15:30Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -540,6 +544,25 @@ public void testGetApiKeysOwnedByCurrentAuthenticatedUser() throws InterruptedEx\n             response, userWithManageApiKeyRoleApiKeys.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n     }\n \n+    public void testGetApiKeysOwnedByRunAsUser() throws ExecutionException, InterruptedException {\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);\n+        final String userWithManageOwnApiKeyRole = \"user_with_manage_own_api_key_role\";\n+        final String userWithRunAsRole = \"user_with_run_as_role\";\n+        List<CreateApiKeyResponse> userWithManageOwnApiKeyRoleApiKeys = createApiKeys(userWithManageOwnApiKeyRole,\n+            userWithRunAsRole, noOfApiKeysForUserWithManageApiKeyRole, null, \"monitor\");\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\", UsernamePasswordToken\n+            .basicAuthHeaderValue(userWithRunAsRole, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", userWithManageOwnApiKeyRole));\n+\n+        PlainActionFuture<GetApiKeyResponse> listener = new PlainActionFuture<>();\n+        client.execute(GetApiKeyAction.INSTANCE, GetApiKeyRequest.forOwnedApiKeys(), listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MDA1Nw=="}, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzQxNjY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDowNjoxMlrOFpNyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjoxNjowNlrOFpRnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MTkyMw==", "bodyText": "same as above, we should also test without the owner flag toggled but with the concrete username and realm set.\nI would also add a negative test, but this is usually better to do in unit tests, but I sometimes sneak in a negative test in integ tests as well.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378761923", "createdAt": "2020-02-13T10:06:12Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -600,6 +623,25 @@ public void testInvalidateApiKeysOwnedByCurrentAuthenticatedUser() throws Interr\n         verifyInvalidateResponse(noOfApiKeysForUserWithManageApiKeyRole, userWithManageApiKeyRoleApiKeys, invalidateResponse);\n     }\n \n+    public void testInvalidateApiKeysOwnedByRunAsUser() throws InterruptedException, ExecutionException {\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);\n+        final String userWithManageOwnApiKeyRole = \"user_with_manage_own_api_key_role\";\n+        final String userWithRunAsRole = \"user_with_run_as_role\";\n+        List<CreateApiKeyResponse> userWithManageApiKeyRoleApiKeys = createApiKeys(userWithManageOwnApiKeyRole,\n+            userWithRunAsRole, noOfApiKeysForUserWithManageApiKeyRole, null, \"monitor\");\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\", UsernamePasswordToken\n+            .basicAuthHeaderValue(userWithRunAsRole, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", userWithManageOwnApiKeyRole));\n+\n+        PlainActionFuture<InvalidateApiKeyResponse> listener = new PlainActionFuture<>();\n+        client.execute(InvalidateApiKeyAction.INSTANCE, InvalidateApiKeyRequest.forOwnedApiKeys(), listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDYwOQ==", "bodyText": "Added negative tests for calling get and invalidate API key with mismatching username and/or realm name.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378824609", "createdAt": "2020-02-13T12:16:06Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -600,6 +623,25 @@ public void testInvalidateApiKeysOwnedByCurrentAuthenticatedUser() throws Interr\n         verifyInvalidateResponse(noOfApiKeysForUserWithManageApiKeyRole, userWithManageApiKeyRoleApiKeys, invalidateResponse);\n     }\n \n+    public void testInvalidateApiKeysOwnedByRunAsUser() throws InterruptedException, ExecutionException {\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);\n+        final String userWithManageOwnApiKeyRole = \"user_with_manage_own_api_key_role\";\n+        final String userWithRunAsRole = \"user_with_run_as_role\";\n+        List<CreateApiKeyResponse> userWithManageApiKeyRoleApiKeys = createApiKeys(userWithManageOwnApiKeyRole,\n+            userWithRunAsRole, noOfApiKeysForUserWithManageApiKeyRole, null, \"monitor\");\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\", UsernamePasswordToken\n+            .basicAuthHeaderValue(userWithRunAsRole, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", userWithManageOwnApiKeyRole));\n+\n+        PlainActionFuture<InvalidateApiKeyResponse> listener = new PlainActionFuture<>();\n+        client.execute(InvalidateApiKeyAction.INSTANCE, InvalidateApiKeyRequest.forOwnedApiKeys(), listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2MTkyMw=="}, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzQzNjgzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDoxMjowN1rOFpN_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDoxMjowN1rOFpN_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2NTExNA==", "bodyText": "^ This is why the inversion is not caught up by tests\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final User user = new User(username, new String[0], new User(runAsUsername));\n          \n          \n            \n                    final User user = new User(runAsUsername, new String[0], new User(username));", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378765114", "createdAt": "2020-02-13T10:12:07Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java", "diffHunk": "@@ -96,15 +96,47 @@ public void testAuthenticationWithUserDeniesAccessToApiKeyActionsWhenItIsNotOwne\n         assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n     }\n \n+    public void testGetAndInvalidateApiKeyWillRespectRunAsUser() {\n+        final ClusterPermission clusterPermission =\n+            ManageOwnApiKeyClusterPrivilege.INSTANCE.buildPermission(ClusterPermission.builder()).build();\n+\n+        final Authentication authentication = createMockRunAsAuthentication(\n+            \"user_a\", \"realm_a\", \"realm_a_type\",\n+            \"user_b\", \"realm_b\", \"realm_b_type\");\n+\n+        final TransportRequest getApiKeyRequest = GetApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+        final TransportRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", getApiKeyRequest, authentication));\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n+    }\n+\n     private Authentication createMockAuthentication(String username, String realmName, String realmType, Map<String, Object> metadata) {\n         final User user = new User(username);\n         final Authentication authentication = mock(Authentication.class);\n         final Authentication.RealmRef authenticatedBy = mock(Authentication.RealmRef.class);\n         when(authentication.getUser()).thenReturn(user);\n-        when(authentication.getAuthenticatedBy()).thenReturn(authenticatedBy);\n+        when(authentication.getSourceRealm()).thenReturn(authenticatedBy);\n         when(authenticatedBy.getName()).thenReturn(realmName);\n         when(authenticatedBy.getType()).thenReturn(realmType);\n         when(authentication.getMetadata()).thenReturn(metadata);\n         return authentication;\n     }\n+\n+    private Authentication createMockRunAsAuthentication(String username, String realmName, String realmType,\n+        String runAsUsername, String runAsRealmName, String runAsRealmType) {\n+        final Authentication.RealmRef authenticatedBy = mock(Authentication.RealmRef.class);\n+        when(authenticatedBy.getName()).thenReturn(realmName);\n+        when(authenticatedBy.getType()).thenReturn(realmType);\n+        final Authentication.RealmRef lookedUpBy = mock(Authentication.RealmRef.class);\n+        when(lookedUpBy.getName()).thenReturn(runAsRealmName);\n+        when(lookedUpBy.getType()).thenReturn(runAsRealmType);\n+        final User user = new User(username, new String[0], new User(runAsUsername));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455a6d6c74cbbf4bc4c3d7323a33e693b985dded"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzgxMTc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjoxNDozNVrOFpRlQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjoxNDo1NlrOFspm7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDAwMg==", "bodyText": "In order to have negative tests for realm name mismatch, user_with_run_as_role needs to be created in a different realm other than file (which is handled by configureUsers()). This new helper method creates the user in the native realm.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r378824002", "createdAt": "2020-02-13T12:14:35Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -715,6 +829,26 @@ private void verifyGetResponse(String[] user, int expectedNumberOfApiKeys, List<\n         return responses;\n     }\n \n+    private void createUserWithRunAsRole() throws ExecutionException, InterruptedException {\n+        final PutUserRequest putUserRequest = new PutUserRequest();\n+        putUserRequest.username(\"user_with_run_as_role\");\n+        putUserRequest.roles(\"run_as_role\");\n+        putUserRequest.passwordHash(SecuritySettingsSource.TEST_PASSWORD_HASHED.toCharArray());\n+        PlainActionFuture<PutUserResponse> listener = new PlainActionFuture<>();\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+        client.execute(PutUserAction.INSTANCE, putUserRequest, listener);\n+        final PutUserResponse putUserResponse = listener.get();\n+        assertTrue(putUserResponse.created());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NjMwNQ==", "bodyText": "Can we add that explanation to the code?", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382346305", "createdAt": "2020-02-21T01:05:38Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -715,6 +829,26 @@ private void verifyGetResponse(String[] user, int expectedNumberOfApiKeys, List<\n         return responses;\n     }\n \n+    private void createUserWithRunAsRole() throws ExecutionException, InterruptedException {\n+        final PutUserRequest putUserRequest = new PutUserRequest();\n+        putUserRequest.username(\"user_with_run_as_role\");\n+        putUserRequest.roles(\"run_as_role\");\n+        putUserRequest.passwordHash(SecuritySettingsSource.TEST_PASSWORD_HASHED.toCharArray());\n+        PlainActionFuture<PutUserResponse> listener = new PlainActionFuture<>();\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+        client.execute(PutUserAction.INSTANCE, putUserRequest, listener);\n+        final PutUserResponse putUserResponse = listener.get();\n+        assertTrue(putUserResponse.created());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDAwMg=="}, "originalCommit": {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM2MzM3NQ==", "bodyText": "Added", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382363375", "createdAt": "2020-02-21T02:14:56Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -715,6 +829,26 @@ private void verifyGetResponse(String[] user, int expectedNumberOfApiKeys, List<\n         return responses;\n     }\n \n+    private void createUserWithRunAsRole() throws ExecutionException, InterruptedException {\n+        final PutUserRequest putUserRequest = new PutUserRequest();\n+        putUserRequest.username(\"user_with_run_as_role\");\n+        putUserRequest.roles(\"run_as_role\");\n+        putUserRequest.passwordHash(SecuritySettingsSource.TEST_PASSWORD_HASHED.toCharArray());\n+        PlainActionFuture<PutUserResponse> listener = new PlainActionFuture<>();\n+        final Client client = client().filterWithHeader(Map.of(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+        client.execute(PutUserAction.INSTANCE, putUserRequest, listener);\n+        final PutUserResponse putUserResponse = listener.get();\n+        assertTrue(putUserResponse.created());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNDAwMg=="}, "originalCommit": {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTQ2MzkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDoyMzowOFrOFrisIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTo0OTo0M1rOFrlPQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMTQ0Mg==", "bodyText": "Is this line needed?", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381201442", "createdAt": "2020-02-19T10:23:08Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -540,6 +546,54 @@ public void testGetApiKeysOwnedByCurrentAuthenticatedUser() throws InterruptedEx\n             response, userWithManageApiKeyRoleApiKeys.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n     }\n \n+    public void testGetApiKeysOwnedByRunAsUserWhenOwnerIsTrue() throws ExecutionException, InterruptedException {\n+        createUserWithRunAsRole();\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MzIwMg==", "bodyText": "Not strictly needed. I copied it from the existing test and my understanding is that it adds some noise during test setup. After a series of API key operations, the verification step makes sure the operations touch only designated keys and not the noise. I'll just leave them as is since it has some (marginal) value.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381243202", "createdAt": "2020-02-19T11:49:43Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -540,6 +546,54 @@ public void testGetApiKeysOwnedByCurrentAuthenticatedUser() throws InterruptedEx\n             response, userWithManageApiKeyRoleApiKeys.stream().map(o -> o.getId()).collect(Collectors.toSet()), null);\n     }\n \n+    public void testGetApiKeysOwnedByRunAsUserWhenOwnerIsTrue() throws ExecutionException, InterruptedException {\n+        createUserWithRunAsRole();\n+        int noOfSuperuserApiKeys = randomIntBetween(3, 5);\n+        int noOfApiKeysForUserWithManageApiKeyRole = randomIntBetween(3, 5);\n+        createApiKeys(noOfSuperuserApiKeys, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMTQ0Mg=="}, "originalCommit": {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTUyMDg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozOTo0OVrOFrjP_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTo1MDowMFrOFrlPsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMDYyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                    assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", GetApiKeyRequest.usingRealmAndUserName(\"realm_a\",\n          \n          \n            \n                            \"user_a\"), authentication));\n          \n          \n            \n                    assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\",\n          \n          \n            \n                            InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_a\", \"user_a\"), authentication));\n          \n          \n            \n                }", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381210621", "createdAt": "2020-02-19T10:39:49Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java", "diffHunk": "@@ -96,15 +96,47 @@ public void testAuthenticationWithUserDeniesAccessToApiKeyActionsWhenItIsNotOwne\n         assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n     }\n \n+    public void testGetAndInvalidateApiKeyWillRespectRunAsUser() {\n+        final ClusterPermission clusterPermission =\n+            ManageOwnApiKeyClusterPrivilege.INSTANCE.buildPermission(ClusterPermission.builder()).build();\n+\n+        final Authentication authentication = createMockRunAsAuthentication(\n+            \"user_a\", \"realm_a\", \"realm_a_type\",\n+            \"user_b\", \"realm_b\", \"realm_b_type\");\n+\n+        final TransportRequest getApiKeyRequest = GetApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+        final TransportRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", getApiKeyRequest, authentication));\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MzMxNQ==", "bodyText": "I'll inline these. Thanks", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r381243315", "createdAt": "2020-02-19T11:50:00Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/ManageOwnApiKeyClusterPrivilegeTests.java", "diffHunk": "@@ -96,15 +96,47 @@ public void testAuthenticationWithUserDeniesAccessToApiKeyActionsWhenItIsNotOwne\n         assertFalse(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n     }\n \n+    public void testGetAndInvalidateApiKeyWillRespectRunAsUser() {\n+        final ClusterPermission clusterPermission =\n+            ManageOwnApiKeyClusterPrivilege.INSTANCE.buildPermission(ClusterPermission.builder()).build();\n+\n+        final Authentication authentication = createMockRunAsAuthentication(\n+            \"user_a\", \"realm_a\", \"realm_a_type\",\n+            \"user_b\", \"realm_b\", \"realm_b_type\");\n+\n+        final TransportRequest getApiKeyRequest = GetApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+        final TransportRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmAndUserName(\"realm_b\", \"user_b\");\n+\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/get\", getApiKeyRequest, authentication));\n+        assertTrue(clusterPermission.check(\"cluster:admin/xpack/security/api_key/invalidate\", invalidateApiKeyRequest, authentication));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMDYyMQ=="}, "originalCommit": {"oid": "584343aedd7ff71d94a27e05a0a6f12d0ba88227"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk3ODQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNDoxMVrOFsoisg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjoxNjowOFrOFspoMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NTkwNg==", "bodyText": "These seem backwards to me. You authenticate as runAsUser but run-as user.\nI assume the parameters are just strangely named, but it probably makes sense to have authenticatingUser and owningUser or something like that.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382345906", "createdAt": "2020-02-21T01:04:11Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -699,14 +799,28 @@ private void verifyGetResponse(String[] user, int expectedNumberOfApiKeys, List<\n     }\n \n     private List<CreateApiKeyResponse> createApiKeys(String user, int noOfApiKeys, TimeValue expiration, String... clusterPrivileges) {\n+        final Map<String, String> headers = Collections.singletonMap(\n+                \"Authorization\", UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING));\n+        return createApiKeys(headers, noOfApiKeys, expiration, clusterPrivileges);\n+    }\n+\n+    private List<CreateApiKeyResponse> createApiKeys(String user, String runAsUser,\n+        int noOfApiKeys, TimeValue expiration, String... clusterPrivileges) {\n+        final Map<String, String> headers = Map.of(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(runAsUser, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bdd03bea71e5fe30068e4b75c768d6d43e1816"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM2MzY5Nw==", "bodyText": "Good point. It does read awkward. Updated.", "url": "https://github.com/elastic/elasticsearch/pull/52178#discussion_r382363697", "createdAt": "2020-02-21T02:16:08Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -699,14 +799,28 @@ private void verifyGetResponse(String[] user, int expectedNumberOfApiKeys, List<\n     }\n \n     private List<CreateApiKeyResponse> createApiKeys(String user, int noOfApiKeys, TimeValue expiration, String... clusterPrivileges) {\n+        final Map<String, String> headers = Collections.singletonMap(\n+                \"Authorization\", UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING));\n+        return createApiKeys(headers, noOfApiKeys, expiration, clusterPrivileges);\n+    }\n+\n+    private List<CreateApiKeyResponse> createApiKeys(String user, String runAsUser,\n+        int noOfApiKeys, TimeValue expiration, String... clusterPrivileges) {\n+        final Map<String, String> headers = Map.of(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(runAsUser, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING),\n+            \"es-security-runas-user\", user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NTkwNg=="}, "originalCommit": {"oid": "b7bdd03bea71e5fe30068e4b75c768d6d43e1816"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4720, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}