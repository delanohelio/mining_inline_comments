{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDM3NzQ4", "number": 51137, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NDowNlrODYxBOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1OTo1NlrODY4UpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk1NTQ0OnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NDowNlrOFez5og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NDowNlrOFez5og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MTkzOA==", "bodyText": "It should be read_blob_incomplete", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367851938", "createdAt": "2020-01-17T09:54:06Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -227,7 +291,9 @@ public void testReadBlobWithPrematureConnectionClose() {\n         });\n \n         final Exception exception = expectThrows(ConnectionClosedException.class, () -> {\n-            try (InputStream stream = blobContainer.readBlob(\"read_blob_incomplete\")) {\n+            try (InputStream stream = randomBoolean() ?\n+                    blobContainer.readBlob(\"read_blob_incomplete\") :\n+                    blobContainer.readBlob(\"read_blob_no_response\", 0, 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk1NzcxOnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NDo1MVrOFez67Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MDo0NlrOFe_Elg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ==", "bodyText": "I think we could reasonably drop this constructor and use the ranged one everywhere.", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367852269", "createdAt": "2020-01-17T09:54:51Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk3MDM3MA==", "bodyText": "I prefer to have a separate constructor instead of passing magical values.", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367970370", "createdAt": "2020-01-17T14:44:33Z", "author": {"login": "ywelsch"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ=="}, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDk2Ng==", "bodyText": "ok", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368034966", "createdAt": "2020-01-17T16:50:46Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ=="}, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk2NTcwOnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NzozOFrOFez_7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1NzozOFrOFez_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzU1MQ==", "bodyText": "end < 0L is redundant since 0 \u2264 start and we're also checking for end < start.", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367853551", "createdAt": "2020-01-17T09:57:38Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {\n+        this(blobStore, blobKey, 0, Long.MAX_VALUE - 1);\n+    }\n+\n+    // both start and end are inclusive bounds, following the definition in GetObjectRequest.setRange\n+    S3RetryingInputStream(S3BlobStore blobStore, String blobKey, long start, long end) throws IOException {\n+        if (start < 0L) {\n+            throw new IllegalArgumentException(\"start must be non-negative\");\n+        }\n+        if (end < 0L || end == Long.MAX_VALUE || end < start) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk2NTc5OnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1Nzo0MFrOFe0AAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1Nzo0MFrOFe0AAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzU2OA==", "bodyText": "Maybe just randomize the call to range/non-range read instead of doing both?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367853568", "createdAt": "2020-01-17T09:57:40Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -139,8 +143,12 @@ private BlobContainer createBlobContainer(final @Nullable Integer maxRetries,\n \n     public void testReadNonexistentBlobThrowsNoSuchFileException() {\n         final BlobContainer blobContainer = createBlobContainer(between(1, 5), null, null, null);\n-        final Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));\n+        Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));\n         assertThat(exception.getMessage().toLowerCase(Locale.ROOT), containsString(\"blob object [read_nonexistent_blob] not found\"));\n+        final long position = randomLongBetween(0, Long.MAX_VALUE - 1);\n+        final int length = randomIntBetween(0, Math.toIntExact(Math.min(Integer.MAX_VALUE, Long.MAX_VALUE - 1 - position)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk2ODU3OnYy", "diffSide": "LEFT", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1ODozNlrOFe0Bzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1ODozNlrOFe0Bzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDAzMQ==", "bodyText": "Can still be final?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367854031", "createdAt": "2020-01-17T09:58:36Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -139,8 +143,12 @@ private BlobContainer createBlobContainer(final @Nullable Integer maxRetries,\n \n     public void testReadNonexistentBlobThrowsNoSuchFileException() {\n         final BlobContainer blobContainer = createBlobContainer(between(1, 5), null, null, null);\n-        final Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk3NDU0OnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMDo0NFrOFe0Fgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMDo0NFrOFe0Fgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDk3OQ==", "bodyText": "Maybe rename read_blob_max_retries ->  read_range_blob_max_retries so that each test uses a dedicated Http context (this is no mandatory but can avoid some confusion maybe)?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367854979", "createdAt": "2020-01-17T10:00:44Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -178,6 +187,50 @@ public void testReadBlobWithRetries() throws Exception {\n         }\n     }\n \n+    public void testReadRangeBlobWithRetries() throws Exception {\n+        final int maxRetries = randomInt(5);\n+        final CountDown countDown = new CountDown(maxRetries + 1);\n+\n+        final byte[] bytes = randomBlobContent();\n+        httpServer.createContext(\"/bucket/read_blob_max_retries\", exchange -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk3OTAxOnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjoyN1rOFe0ISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjoyN1rOFe0ISw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTY5MQ==", "bodyText": "It pops up here and there, maybe we should put this value in a constant?", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367855691", "createdAt": "2020-01-17T10:02:27Z", "author": {"login": "tlrx"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -397,23 +463,47 @@ public void testWriteLargeBlob() throws Exception {\n         return randomByteArrayOfLength(randomIntBetween(1, frequently() ? 512 : 1 << 20)); // rarely up to 1mb\n     }\n \n-    private static int getRangeStart(HttpExchange exchange) {\n+    private static Tuple<Long, Long> getRange(HttpExchange exchange) {\n         final String rangeHeader = exchange.getRequestHeaders().getFirst(\"Range\");\n         if (rangeHeader == null) {\n-            return 0;\n+            return Tuple.tuple(0L, Long.MAX_VALUE - 1);\n         }\n \n-        final Matcher matcher = Pattern.compile(\"^bytes=([0-9]+)-9223372036854775806$\").matcher(rangeHeader);\n+        final Matcher matcher = Pattern.compile(\"^bytes=([0-9]+)-([0-9]+)$\").matcher(rangeHeader);\n         assertTrue(rangeHeader + \" matches expected pattern\", matcher.matches());\n-        return Math.toIntExact(Long.parseLong(matcher.group(1)));\n+        long rangeStart = Long.parseLong(matcher.group(1));\n+        long rangeEnd = Long.parseLong(matcher.group(2));\n+        assertThat(rangeStart, lessThanOrEqualTo(rangeEnd));\n+        return Tuple.tuple(rangeStart, rangeEnd);\n+    }\n+\n+    private static int getRangeStart(HttpExchange exchange) {\n+        return Math.toIntExact(getRange(exchange).v1());\n+    }\n+\n+    private static Optional<Integer> getRangeEnd(HttpExchange exchange) {\n+        final long rangeEnd = getRange(exchange).v2();\n+        if (rangeEnd == Long.MAX_VALUE - 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c75a2a00069208c68b4ebb124680b1d126731471"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDEzMjk1OnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MzoxMFrOFe_JRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyNzowMVrOFfAB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjE2NQ==", "bodyText": "I think we need it the other way round:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        e2.addSuppressed(e);\n          \n          \n            \n                        e.addSuppressed(e2);", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368036165", "createdAt": "2020-01-17T16:53:10Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -122,20 +140,33 @@ private void ensureOpen() {\n \n     private void reopenStreamOrFail(IOException e) throws IOException {\n         if (attempt >= maxAttempts) {\n+            logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], giving up\",\n+                blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n             throw addSuppressedExceptions(e);\n         }\n         logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], retrying\",\n-            blobStore.bucket(), blobKey, currentOffset, attempt, maxAttempts), e);\n+            blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n         attempt += 1;\n         if (failures.size() < MAX_SUPPRESSED_EXCEPTIONS) {\n             failures.add(e);\n         }\n+        try {\n+            Streams.consumeFully(currentStream);\n+        } catch (Exception e2) {\n+            e2.addSuppressed(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDY1NQ==", "bodyText": "I actually intended to log it that way. It's not needed anyway, as we already log the original exception above. I have removed this in 0b733f0", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368050655", "createdAt": "2020-01-17T17:27:01Z", "author": {"login": "ywelsch"}, "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -122,20 +140,33 @@ private void ensureOpen() {\n \n     private void reopenStreamOrFail(IOException e) throws IOException {\n         if (attempt >= maxAttempts) {\n+            logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], giving up\",\n+                blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n             throw addSuppressedExceptions(e);\n         }\n         logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], retrying\",\n-            blobStore.bucket(), blobKey, currentOffset, attempt, maxAttempts), e);\n+            blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n         attempt += 1;\n         if (failures.size() < MAX_SUPPRESSED_EXCEPTIONS) {\n             failures.add(e);\n         }\n+        try {\n+            Streams.consumeFully(currentStream);\n+        } catch (Exception e2) {\n+            e2.addSuppressed(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjE2NQ=="}, "originalCommit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDE1MjA0OnYy", "diffSide": "RIGHT", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1OTo1NlrOFe_VZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyNzoyM1rOFfACbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzOTI3MA==", "bodyText": "Apparently this results in a different exception?\njava.lang.AssertionError: \nExpected: a string containing \"premature end of content-length delimited message body\"\n     but: was \"premature end of chunk coded message body: closing chunk expected\"", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368039270", "createdAt": "2020-01-17T16:59:56Z", "author": {"login": "DaveCTurner"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -227,7 +339,9 @@ public void testReadBlobWithPrematureConnectionClose() {\n         });\n \n         final Exception exception = expectThrows(ConnectionClosedException.class, () -> {\n-            try (InputStream stream = blobContainer.readBlob(\"read_blob_incomplete\")) {\n+            try (InputStream stream = randomBoolean() ?\n+                    blobContainer.readBlob(\"read_blob_incomplete\") :\n+                    blobContainer.readBlob(\"read_blob_incomplete\", 0, 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDc5OA==", "bodyText": "Thanks, fixed in 6ec202c", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368050798", "createdAt": "2020-01-17T17:27:23Z", "author": {"login": "ywelsch"}, "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -227,7 +339,9 @@ public void testReadBlobWithPrematureConnectionClose() {\n         });\n \n         final Exception exception = expectThrows(ConnectionClosedException.class, () -> {\n-            try (InputStream stream = blobContainer.readBlob(\"read_blob_incomplete\")) {\n+            try (InputStream stream = randomBoolean() ?\n+                    blobContainer.readBlob(\"read_blob_incomplete\") :\n+                    blobContainer.readBlob(\"read_blob_incomplete\", 0, 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzOTI3MA=="}, "originalCommit": {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b"}, "originalPosition": 197}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4519, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}