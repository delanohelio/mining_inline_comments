{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODQ4NTI0", "number": 58148, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyMjoyOFrOEF71GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0Mjo0MlrOEF8ZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU4NTg1OnYy", "diffSide": "RIGHT", "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyMjoyOFrOGkbA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDowNzozMFrOGkdIdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NDU0Mw==", "bodyText": "Just a heads-up: this is currently accurate though we're considering applying mappings at the level of the data stream instead of for each backing index.", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440844543", "createdAt": "2020-06-16T13:22:28Z", "author": {"login": "danhermann"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3OTIyMw==", "bodyText": "Thanks for noting that. I'll leave as-is for now, but I think we could easily remove the mapping references later on.", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440879223", "createdAt": "2020-06-16T14:07:30Z", "author": {"login": "jrodewig"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NDU0Mw=="}, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU5NjE3OnYy", "diffSide": "RIGHT", "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNDozNlrOGkbHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxMzowNlrOGkdYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NjE3NQ==", "bodyText": "This is correct, but if the intent is to unconditionally roll over the data stream, you can omit the conditions block altogether.", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440846175", "createdAt": "2020-06-16T13:24:36Z", "author": {"login": "danhermann"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MzI1Nw==", "bodyText": "Thanks for catching this. Updated with e015f4f.", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440883257", "createdAt": "2020-06-16T14:13:06Z", "author": {"login": "jrodewig"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NjE3NQ=="}, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY2MzY3OnYy", "diffSide": "RIGHT", "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzozOToyNlrOGkbyWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTowODo0NVrOGkgAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1NzE3Ng==", "bodyText": "I don't understand this. Is this still related to reindexing into the new data stream? Is the new data the data that'll be sent directly to the new data stream (having not been ported over from the old data stream)? If that's the case where would we delete it from?", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440857176", "createdAt": "2020-06-16T13:39:26Z", "author": {"login": "andreidan"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+* To apply mapping and setting changes to all existing backing indices and\n+future ones, you must create a new data stream and reindex your data into it.\n+See <<data-streams-use-reindex-to-change-mappings-settings>>.\n+\n+[discrete]\n+[[data-streams-use-reindex-to-change-mappings-settings]]\n+=== Use reindex to change mappings or settings\n+\n+To change the mappings or settings for every backing index in a data stream, you\n+must first create or update a composable template so that it contains the\n+changes. You can then reindex the existing data stream into a new one associated\n+with the template. This applies the mapping and setting changes in the template\n+to each document and backing index of the data stream destination. These changes\n+also affect any future backing index created by the new stream.\n+\n+Follow these steps:\n+\n+. Choose a name or wildcard (`*`) pattern for a new data stream. This new data\n+stream will contain data from your existing stream.\n++\n+You can use the resolve index API to check if the name or pattern matches any\n+existing indices, index aliases, or data streams. If so, you should consider\n+using another name or pattern.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following resolve index API request checks for any existing indices, index\n+aliases, or data streams that start with `new_logs`. If not, the `new_logs*`\n+wildcard pattern can be used to create a new data stream.\n+\n+[source,console]\n+----\n+GET /_resolve/index/new_logs*\n+----\n+// TEST[continued]\n+\n+The API returns the following response, indicating no existing targets match\n+this pattern.\n+\n+[source,console-result]\n+----\n+{\n+  \"indices\" : [ ],\n+  \"aliases\" : [ ],\n+  \"data_streams\" : [ ]\n+}\n+----\n+====\n+\n+. Create or update a composable template. This template should contain the\n+mappings and settings you'd like to apply to the new data stream's backing\n+indices.\n++\n+This composable template must meet the\n+<<create-a-data-stream-template,requirements for a data stream template>>. It\n+should also contain your previously chosen name or wildcard pattern in the\n+`index_patterns` property.\n++\n+TIP: If you are only adding or changing a few things, we recommend you create a\n+new template by copying an existing one and modifying it as needed.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> request creates\n+a new composable template, `new_logs_data_stream`. `new_logs_data_stream`\n+uses the `logs_data_stream` template as its basis, with the following changes:\n+\n+* The `index_patterns` wildcard pattern matches any index or data stream\n+  starting with `new_logs`.\n+* The `@timestamp` field mapping uses the `date_nanos` field datatype rather\n+  than the `date` datatype.\n+* The template includes `sort.field` and `sort.order` index settings, which were\n+  not in the original `logs_data_stream` template.\n+\n+[source,console]\n+----\n+PUT /_index_template/new_logs_data_stream\n+{\n+  \"index_patterns\": [ \"new_logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` field datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n+\n+. Use the <<indices-create-data-stream,create data stream API>> to manually\n+create the new data stream. The name of the data stream must match the name or\n+wildcard pattern defined in the new template's `index_patterns` property.\n++\n+IMPORTANT: If you do not want to mix new and old data, do not use an indexing\n+request to create the data stream. Mixing old and new data is safe, but the\n+backing index containing this data needs to be retained until you are ready to\n+delete the new data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTk1MA==", "bodyText": "Thanks for raising this @andreidan. I've revised this and the next relevant section.\nTo answer your question, I was envisioning a scenario in which a user creates the new data stream by indexing new documents to it. Because the user will later reindex data from an existing data stream into this new stream, it could result in one or more backing indices that contain mixed data.\nThis could interfere with data retention if the user deletes older backing indices. A user could prematurely delete an index they assume contains only old data but actually contains new data as well. This could result in unintended data loss.\nThe alternative is to keep such backing indices until its newest data expires. This could increase storage costs and potentially violate their data retention policies.\nIn most cases, users should just avoid this scenario entirely.", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440911950", "createdAt": "2020-06-16T14:50:28Z", "author": {"login": "jrodewig"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+* To apply mapping and setting changes to all existing backing indices and\n+future ones, you must create a new data stream and reindex your data into it.\n+See <<data-streams-use-reindex-to-change-mappings-settings>>.\n+\n+[discrete]\n+[[data-streams-use-reindex-to-change-mappings-settings]]\n+=== Use reindex to change mappings or settings\n+\n+To change the mappings or settings for every backing index in a data stream, you\n+must first create or update a composable template so that it contains the\n+changes. You can then reindex the existing data stream into a new one associated\n+with the template. This applies the mapping and setting changes in the template\n+to each document and backing index of the data stream destination. These changes\n+also affect any future backing index created by the new stream.\n+\n+Follow these steps:\n+\n+. Choose a name or wildcard (`*`) pattern for a new data stream. This new data\n+stream will contain data from your existing stream.\n++\n+You can use the resolve index API to check if the name or pattern matches any\n+existing indices, index aliases, or data streams. If so, you should consider\n+using another name or pattern.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following resolve index API request checks for any existing indices, index\n+aliases, or data streams that start with `new_logs`. If not, the `new_logs*`\n+wildcard pattern can be used to create a new data stream.\n+\n+[source,console]\n+----\n+GET /_resolve/index/new_logs*\n+----\n+// TEST[continued]\n+\n+The API returns the following response, indicating no existing targets match\n+this pattern.\n+\n+[source,console-result]\n+----\n+{\n+  \"indices\" : [ ],\n+  \"aliases\" : [ ],\n+  \"data_streams\" : [ ]\n+}\n+----\n+====\n+\n+. Create or update a composable template. This template should contain the\n+mappings and settings you'd like to apply to the new data stream's backing\n+indices.\n++\n+This composable template must meet the\n+<<create-a-data-stream-template,requirements for a data stream template>>. It\n+should also contain your previously chosen name or wildcard pattern in the\n+`index_patterns` property.\n++\n+TIP: If you are only adding or changing a few things, we recommend you create a\n+new template by copying an existing one and modifying it as needed.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> request creates\n+a new composable template, `new_logs_data_stream`. `new_logs_data_stream`\n+uses the `logs_data_stream` template as its basis, with the following changes:\n+\n+* The `index_patterns` wildcard pattern matches any index or data stream\n+  starting with `new_logs`.\n+* The `@timestamp` field mapping uses the `date_nanos` field datatype rather\n+  than the `date` datatype.\n+* The template includes `sort.field` and `sort.order` index settings, which were\n+  not in the original `logs_data_stream` template.\n+\n+[source,console]\n+----\n+PUT /_index_template/new_logs_data_stream\n+{\n+  \"index_patterns\": [ \"new_logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` field datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n+\n+. Use the <<indices-create-data-stream,create data stream API>> to manually\n+create the new data stream. The name of the data stream must match the name or\n+wildcard pattern defined in the new template's `index_patterns` property.\n++\n+IMPORTANT: If you do not want to mix new and old data, do not use an indexing\n+request to create the data stream. Mixing old and new data is safe, but the\n+backing index containing this data needs to be retained until you are ready to\n+delete the new data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1NzE3Ng=="}, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNjI1MQ==", "bodyText": "Thanks for the explanation and for revising this @jrodewig. It makes perfect sense now and I think it's great this sits in its own section now", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440926251", "createdAt": "2020-06-16T15:08:45Z", "author": {"login": "andreidan"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+* To apply mapping and setting changes to all existing backing indices and\n+future ones, you must create a new data stream and reindex your data into it.\n+See <<data-streams-use-reindex-to-change-mappings-settings>>.\n+\n+[discrete]\n+[[data-streams-use-reindex-to-change-mappings-settings]]\n+=== Use reindex to change mappings or settings\n+\n+To change the mappings or settings for every backing index in a data stream, you\n+must first create or update a composable template so that it contains the\n+changes. You can then reindex the existing data stream into a new one associated\n+with the template. This applies the mapping and setting changes in the template\n+to each document and backing index of the data stream destination. These changes\n+also affect any future backing index created by the new stream.\n+\n+Follow these steps:\n+\n+. Choose a name or wildcard (`*`) pattern for a new data stream. This new data\n+stream will contain data from your existing stream.\n++\n+You can use the resolve index API to check if the name or pattern matches any\n+existing indices, index aliases, or data streams. If so, you should consider\n+using another name or pattern.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following resolve index API request checks for any existing indices, index\n+aliases, or data streams that start with `new_logs`. If not, the `new_logs*`\n+wildcard pattern can be used to create a new data stream.\n+\n+[source,console]\n+----\n+GET /_resolve/index/new_logs*\n+----\n+// TEST[continued]\n+\n+The API returns the following response, indicating no existing targets match\n+this pattern.\n+\n+[source,console-result]\n+----\n+{\n+  \"indices\" : [ ],\n+  \"aliases\" : [ ],\n+  \"data_streams\" : [ ]\n+}\n+----\n+====\n+\n+. Create or update a composable template. This template should contain the\n+mappings and settings you'd like to apply to the new data stream's backing\n+indices.\n++\n+This composable template must meet the\n+<<create-a-data-stream-template,requirements for a data stream template>>. It\n+should also contain your previously chosen name or wildcard pattern in the\n+`index_patterns` property.\n++\n+TIP: If you are only adding or changing a few things, we recommend you create a\n+new template by copying an existing one and modifying it as needed.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> request creates\n+a new composable template, `new_logs_data_stream`. `new_logs_data_stream`\n+uses the `logs_data_stream` template as its basis, with the following changes:\n+\n+* The `index_patterns` wildcard pattern matches any index or data stream\n+  starting with `new_logs`.\n+* The `@timestamp` field mapping uses the `date_nanos` field datatype rather\n+  than the `date` datatype.\n+* The template includes `sort.field` and `sort.order` index settings, which were\n+  not in the original `logs_data_stream` template.\n+\n+[source,console]\n+----\n+PUT /_index_template/new_logs_data_stream\n+{\n+  \"index_patterns\": [ \"new_logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` field datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n+\n+. Use the <<indices-create-data-stream,create data stream API>> to manually\n+create the new data stream. The name of the data stream must match the name or\n+wildcard pattern defined in the new template's `index_patterns` property.\n++\n+IMPORTANT: If you do not want to mix new and old data, do not use an indexing\n+request to create the data stream. Mixing old and new data is safe, but the\n+backing index containing this data needs to be retained until you are ready to\n+delete the new data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1NzE3Ng=="}, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY3MDU5OnYy", "diffSide": "RIGHT", "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0MDo1MlrOGkb2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0MDo1MlrOGkb2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1ODI0NA==", "bodyText": "this ties into my previous comment. I think we need to provide more details about new/old data and what we're trying to achieve here", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440858244", "createdAt": "2020-06-16T13:40:52Z", "author": {"login": "andreidan"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+* To apply mapping and setting changes to all existing backing indices and\n+future ones, you must create a new data stream and reindex your data into it.\n+See <<data-streams-use-reindex-to-change-mappings-settings>>.\n+\n+[discrete]\n+[[data-streams-use-reindex-to-change-mappings-settings]]\n+=== Use reindex to change mappings or settings\n+\n+To change the mappings or settings for every backing index in a data stream, you\n+must first create or update a composable template so that it contains the\n+changes. You can then reindex the existing data stream into a new one associated\n+with the template. This applies the mapping and setting changes in the template\n+to each document and backing index of the data stream destination. These changes\n+also affect any future backing index created by the new stream.\n+\n+Follow these steps:\n+\n+. Choose a name or wildcard (`*`) pattern for a new data stream. This new data\n+stream will contain data from your existing stream.\n++\n+You can use the resolve index API to check if the name or pattern matches any\n+existing indices, index aliases, or data streams. If so, you should consider\n+using another name or pattern.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following resolve index API request checks for any existing indices, index\n+aliases, or data streams that start with `new_logs`. If not, the `new_logs*`\n+wildcard pattern can be used to create a new data stream.\n+\n+[source,console]\n+----\n+GET /_resolve/index/new_logs*\n+----\n+// TEST[continued]\n+\n+The API returns the following response, indicating no existing targets match\n+this pattern.\n+\n+[source,console-result]\n+----\n+{\n+  \"indices\" : [ ],\n+  \"aliases\" : [ ],\n+  \"data_streams\" : [ ]\n+}\n+----\n+====\n+\n+. Create or update a composable template. This template should contain the\n+mappings and settings you'd like to apply to the new data stream's backing\n+indices.\n++\n+This composable template must meet the\n+<<create-a-data-stream-template,requirements for a data stream template>>. It\n+should also contain your previously chosen name or wildcard pattern in the\n+`index_patterns` property.\n++\n+TIP: If you are only adding or changing a few things, we recommend you create a\n+new template by copying an existing one and modifying it as needed.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> request creates\n+a new composable template, `new_logs_data_stream`. `new_logs_data_stream`\n+uses the `logs_data_stream` template as its basis, with the following changes:\n+\n+* The `index_patterns` wildcard pattern matches any index or data stream\n+  starting with `new_logs`.\n+* The `@timestamp` field mapping uses the `date_nanos` field datatype rather\n+  than the `date` datatype.\n+* The template includes `sort.field` and `sort.order` index settings, which were\n+  not in the original `logs_data_stream` template.\n+\n+[source,console]\n+----\n+PUT /_index_template/new_logs_data_stream\n+{\n+  \"index_patterns\": [ \"new_logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` field datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n+\n+. Use the <<indices-create-data-stream,create data stream API>> to manually\n+create the new data stream. The name of the data stream must match the name or\n+wildcard pattern defined in the new template's `index_patterns` property.\n++\n+IMPORTANT: If you do not want to mix new and old data, do not use an indexing\n+request to create the data stream. Mixing old and new data is safe, but the\n+backing index containing this data needs to be retained until you are ready to\n+delete the new data.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following create data stream API request targets `new_logs`, which matches\n+the wildcard pattern for the `new_logs_data_stream` template. Because no\n+existing index or data stream uses this name, this request creates the\n+`new_logs` data stream.\n+\n+[source,console]\n+----\n+PUT /_data_stream/new_logs\n+----\n+// TEST[continued]\n+====\n+\n+. If you do not want to mix new and old data in your new data stream, pause the\n+indexing of new documents.\n+\n+. If you use {ilm-init} to <<getting-started-index-lifecycle-management,automate\n+rollover>>, reduce the {ilm-init} poll interval to ensure that the current write\n+index doesn\u2019t grow too large while waiting for the rollover check. By default,\n+{ilm-init} checks rollover conditions every 10 minutes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY3OTEyOnYy", "diffSide": "RIGHT", "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0Mjo0MlrOGkb73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1OToxM1rOGkcw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1OTYxMw==", "bodyText": "Do we want to promote this concept? If we talked about ILM managing the data stream (which presumably has a rollover policy) do we want to talk about backing indices? (which are an implementation details for data streams)", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440859613", "createdAt": "2020-06-16T13:42:42Z", "author": {"login": "andreidan"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+* To apply mapping and setting changes to all existing backing indices and\n+future ones, you must create a new data stream and reindex your data into it.\n+See <<data-streams-use-reindex-to-change-mappings-settings>>.\n+\n+[discrete]\n+[[data-streams-use-reindex-to-change-mappings-settings]]\n+=== Use reindex to change mappings or settings\n+\n+To change the mappings or settings for every backing index in a data stream, you\n+must first create or update a composable template so that it contains the\n+changes. You can then reindex the existing data stream into a new one associated\n+with the template. This applies the mapping and setting changes in the template\n+to each document and backing index of the data stream destination. These changes\n+also affect any future backing index created by the new stream.\n+\n+Follow these steps:\n+\n+. Choose a name or wildcard (`*`) pattern for a new data stream. This new data\n+stream will contain data from your existing stream.\n++\n+You can use the resolve index API to check if the name or pattern matches any\n+existing indices, index aliases, or data streams. If so, you should consider\n+using another name or pattern.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following resolve index API request checks for any existing indices, index\n+aliases, or data streams that start with `new_logs`. If not, the `new_logs*`\n+wildcard pattern can be used to create a new data stream.\n+\n+[source,console]\n+----\n+GET /_resolve/index/new_logs*\n+----\n+// TEST[continued]\n+\n+The API returns the following response, indicating no existing targets match\n+this pattern.\n+\n+[source,console-result]\n+----\n+{\n+  \"indices\" : [ ],\n+  \"aliases\" : [ ],\n+  \"data_streams\" : [ ]\n+}\n+----\n+====\n+\n+. Create or update a composable template. This template should contain the\n+mappings and settings you'd like to apply to the new data stream's backing\n+indices.\n++\n+This composable template must meet the\n+<<create-a-data-stream-template,requirements for a data stream template>>. It\n+should also contain your previously chosen name or wildcard pattern in the\n+`index_patterns` property.\n++\n+TIP: If you are only adding or changing a few things, we recommend you create a\n+new template by copying an existing one and modifying it as needed.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> request creates\n+a new composable template, `new_logs_data_stream`. `new_logs_data_stream`\n+uses the `logs_data_stream` template as its basis, with the following changes:\n+\n+* The `index_patterns` wildcard pattern matches any index or data stream\n+  starting with `new_logs`.\n+* The `@timestamp` field mapping uses the `date_nanos` field datatype rather\n+  than the `date` datatype.\n+* The template includes `sort.field` and `sort.order` index settings, which were\n+  not in the original `logs_data_stream` template.\n+\n+[source,console]\n+----\n+PUT /_index_template/new_logs_data_stream\n+{\n+  \"index_patterns\": [ \"new_logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` field datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n+\n+. Use the <<indices-create-data-stream,create data stream API>> to manually\n+create the new data stream. The name of the data stream must match the name or\n+wildcard pattern defined in the new template's `index_patterns` property.\n++\n+IMPORTANT: If you do not want to mix new and old data, do not use an indexing\n+request to create the data stream. Mixing old and new data is safe, but the\n+backing index containing this data needs to be retained until you are ready to\n+delete the new data.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following create data stream API request targets `new_logs`, which matches\n+the wildcard pattern for the `new_logs_data_stream` template. Because no\n+existing index or data stream uses this name, this request creates the\n+`new_logs` data stream.\n+\n+[source,console]\n+----\n+PUT /_data_stream/new_logs\n+----\n+// TEST[continued]\n+====\n+\n+. If you do not want to mix new and old data in your new data stream, pause the\n+indexing of new documents.\n+\n+. If you use {ilm-init} to <<getting-started-index-lifecycle-management,automate\n+rollover>>, reduce the {ilm-init} poll interval to ensure that the current write\n+index doesn\u2019t grow too large while waiting for the rollover check. By default,\n+{ilm-init} checks rollover conditions every 10 minutes.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<cluster-update-settings,update cluster settings API>> request\n+lowers the `indices.lifecycle.poll_interval` setting to `1m` (one minute).\n+\n+[source,console]\n+----\n+PUT /_cluster/settings\n+{\n+  \"transient\": {\n+    \"indices.lifecycle.poll_interval\": \"1m\"\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+////\n+[source,console]\n+----\n+DELETE /_data_stream/logs\n+\n+DELETE /_data_stream/new_logs\n+\n+DELETE /_index_template/logs_data_stream\n+\n+DELETE /_index_template/new_logs_data_stream\n+\n+DELETE /_ilm/policy/logs_policy\n+----\n+// TEST[continued]\n+////\n+====\n+\n+. Reindex your data to the new data stream using an `op_type` of `create`.\n++\n+If you want to partition the data in the order in which it was originally\n+indexed, you can run separate reindex requests. These reindex requests can use\n+individual backing indices as the source. You can use the\n+<<indices-get-data-stream,get data stream API>> to retrieve a list of backing\n+indices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 324}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3MzE4NA==", "bodyText": "I think we have to strike a careful balance between completely hiding the fact that data streams include multiple backing indices (which I think would be unhelpful) and always talking about operating on individual backing indices (which would eliminate much of the value of data streams).\nIn this particular case, I can see scenarios where using individual backing indices as reindex sources would be useful. E.g., when you have a data stream with a large number of backing indices and you want to be able to be able to easily resume the reindex process if it fails at any point during the operation. Perhaps in the future we could make the reindex operation handle resuming operations on data streams without needing to reference individual backing indices, but that would certainly be an enhancement for a future phase.", "url": "https://github.com/elastic/elasticsearch/pull/58148#discussion_r440873184", "createdAt": "2020-06-16T13:59:13Z", "author": {"login": "danhermann"}, "path": "docs/reference/data-streams/change-mappings-and-settings.asciidoc", "diffHunk": "@@ -0,0 +1,520 @@\n+[[data-streams-change-mappings-and-settings]]\n+== Change mappings and settings of backing indices\n+++++\n+<titleabbrev>Change mappings and settings</titleabbrev>\n+++++\n+\n+Each data stream has an <<create-a-data-stream-template,associated composable\n+template>>. Mappings and index settings from this template are applied to new\n+backing indices created for the stream. This includes the stream's first\n+backing index, which is auto-generated when the stream is created.\n+\n+Before creating a data stream, we recommend you carefully consider which\n+mappings and settings to include in this template. However, if you later need to\n+change the mappings or settings of a data stream's backing indices, you have a\n+couple options:\n+\n+* To apply changes to future backing indices, simply update the composable\n+template associated with the data stream. Mapping and setting changes will be\n+automatically applied to any backing indices created after the update.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> makes several\n+changes to the `logs_data_stream` template:\n+\n+* It changes the `@timestamp` field mapping from the `date` field datatype to\n+  the `date_nanos` datatype.\n+* It adds new `sort.field` and `sort.order` index settings.\n+\n+////\n+[source,console]\n+----\n+PUT /_ilm/policy/logs_policy\n+{\n+  \"policy\": {\n+    \"phases\": {\n+      \"hot\": {\n+        \"actions\": {\n+          \"rollover\": {\n+            \"max_size\": \"25GB\"\n+          }\n+        }\n+      },\n+      \"delete\": {\n+        \"min_age\": \"30d\",\n+        \"actions\": {\n+          \"delete\": {}\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date\"\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\"\n+    }\n+  }\n+}\n+\n+PUT /logs/_bulk?refresh\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:04:05.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-08T11:06:07.000Z\" }\n+{\"create\":{\"_index\" : \"logs\"}}\n+{ \"@timestamp\": \"2020-12-09T11:07:08.000Z\" }\n+----\n+////\n+\n+[source,console]\n+----\n+PUT /_index_template/logs_data_stream\n+{\n+  \"index_patterns\": [ \"logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n++\n+If wanted, you can <<manually-roll-over-a-data-stream,roll over the data\n+stream>> to immediately apply the new mappings and settings to the data stream's\n+write index. This affects any new data added to the stream after the rollover.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<indices-rollover-index,rollover API>> request rolls over the\n+`logs` data stream. This creates a new write index with mappings and index\n+settings from the recently updated `logs_data_stream` template.\n+\n+[source,console]\n+----\n+POST /logs/_rollover/\n+{\n+  \"conditions\": {\n+    \"max_docs\":   \"1\"\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+* To apply mapping and setting changes to all existing backing indices and\n+future ones, you must create a new data stream and reindex your data into it.\n+See <<data-streams-use-reindex-to-change-mappings-settings>>.\n+\n+[discrete]\n+[[data-streams-use-reindex-to-change-mappings-settings]]\n+=== Use reindex to change mappings or settings\n+\n+To change the mappings or settings for every backing index in a data stream, you\n+must first create or update a composable template so that it contains the\n+changes. You can then reindex the existing data stream into a new one associated\n+with the template. This applies the mapping and setting changes in the template\n+to each document and backing index of the data stream destination. These changes\n+also affect any future backing index created by the new stream.\n+\n+Follow these steps:\n+\n+. Choose a name or wildcard (`*`) pattern for a new data stream. This new data\n+stream will contain data from your existing stream.\n++\n+You can use the resolve index API to check if the name or pattern matches any\n+existing indices, index aliases, or data streams. If so, you should consider\n+using another name or pattern.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following resolve index API request checks for any existing indices, index\n+aliases, or data streams that start with `new_logs`. If not, the `new_logs*`\n+wildcard pattern can be used to create a new data stream.\n+\n+[source,console]\n+----\n+GET /_resolve/index/new_logs*\n+----\n+// TEST[continued]\n+\n+The API returns the following response, indicating no existing targets match\n+this pattern.\n+\n+[source,console-result]\n+----\n+{\n+  \"indices\" : [ ],\n+  \"aliases\" : [ ],\n+  \"data_streams\" : [ ]\n+}\n+----\n+====\n+\n+. Create or update a composable template. This template should contain the\n+mappings and settings you'd like to apply to the new data stream's backing\n+indices.\n++\n+This composable template must meet the\n+<<create-a-data-stream-template,requirements for a data stream template>>. It\n+should also contain your previously chosen name or wildcard pattern in the\n+`index_patterns` property.\n++\n+TIP: If you are only adding or changing a few things, we recommend you create a\n+new template by copying an existing one and modifying it as needed.\n++\n+.*Example*\n+[%collapsible]\n+====\n+`logs_data_stream` is an existing composable template associated with the\n+`logs` data stream.\n+\n+The following <<indices-templates,put composable template API>> request creates\n+a new composable template, `new_logs_data_stream`. `new_logs_data_stream`\n+uses the `logs_data_stream` template as its basis, with the following changes:\n+\n+* The `index_patterns` wildcard pattern matches any index or data stream\n+  starting with `new_logs`.\n+* The `@timestamp` field mapping uses the `date_nanos` field datatype rather\n+  than the `date` datatype.\n+* The template includes `sort.field` and `sort.order` index settings, which were\n+  not in the original `logs_data_stream` template.\n+\n+[source,console]\n+----\n+PUT /_index_template/new_logs_data_stream\n+{\n+  \"index_patterns\": [ \"new_logs*\" ],\n+  \"data_stream\": {\n+    \"timestamp_field\": \"@timestamp\"\n+  },\n+  \"template\": {\n+    \"mappings\": {\n+      \"properties\": {\n+        \"@timestamp\": {\n+          \"type\": \"date_nanos\"                 <1>\n+        }\n+      }\n+    },\n+    \"settings\": {\n+      \"index.lifecycle.name\": \"logs_policy\",\n+      \"sort.field\" : [ \"@timestamp\"],          <2>\n+      \"sort.order\" : [ \"desc\"]                 <3>\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+<1>  Changes the `@timestamp` field mapping to the `date_nanos` field datatype.\n+<2>  Adds the `sort.field` index setting.\n+<3>  Adds the `sort.order` index setting.\n+====\n+\n+. Use the <<indices-create-data-stream,create data stream API>> to manually\n+create the new data stream. The name of the data stream must match the name or\n+wildcard pattern defined in the new template's `index_patterns` property.\n++\n+IMPORTANT: If you do not want to mix new and old data, do not use an indexing\n+request to create the data stream. Mixing old and new data is safe, but the\n+backing index containing this data needs to be retained until you are ready to\n+delete the new data.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following create data stream API request targets `new_logs`, which matches\n+the wildcard pattern for the `new_logs_data_stream` template. Because no\n+existing index or data stream uses this name, this request creates the\n+`new_logs` data stream.\n+\n+[source,console]\n+----\n+PUT /_data_stream/new_logs\n+----\n+// TEST[continued]\n+====\n+\n+. If you do not want to mix new and old data in your new data stream, pause the\n+indexing of new documents.\n+\n+. If you use {ilm-init} to <<getting-started-index-lifecycle-management,automate\n+rollover>>, reduce the {ilm-init} poll interval to ensure that the current write\n+index doesn\u2019t grow too large while waiting for the rollover check. By default,\n+{ilm-init} checks rollover conditions every 10 minutes.\n++\n+.*Example*\n+[%collapsible]\n+====\n+The following <<cluster-update-settings,update cluster settings API>> request\n+lowers the `indices.lifecycle.poll_interval` setting to `1m` (one minute).\n+\n+[source,console]\n+----\n+PUT /_cluster/settings\n+{\n+  \"transient\": {\n+    \"indices.lifecycle.poll_interval\": \"1m\"\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+////\n+[source,console]\n+----\n+DELETE /_data_stream/logs\n+\n+DELETE /_data_stream/new_logs\n+\n+DELETE /_index_template/logs_data_stream\n+\n+DELETE /_index_template/new_logs_data_stream\n+\n+DELETE /_ilm/policy/logs_policy\n+----\n+// TEST[continued]\n+////\n+====\n+\n+. Reindex your data to the new data stream using an `op_type` of `create`.\n++\n+If you want to partition the data in the order in which it was originally\n+indexed, you can run separate reindex requests. These reindex requests can use\n+individual backing indices as the source. You can use the\n+<<indices-get-data-stream,get data stream API>> to retrieve a list of backing\n+indices.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1OTYxMw=="}, "originalCommit": {"oid": "111f2e1fb33b5b6a125065a878c201b8a54fdc1e"}, "originalPosition": 324}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1482, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}