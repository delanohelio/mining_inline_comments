{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NzIxNDM1", "number": 66062, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTozNTo1M1rOFE41hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowOTo1NlrOFE7dew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjY5ODI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/MlDeprecationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTozNTo1M1rOIFHndw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzozODozNFrOIFQ0Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzODU4Mw==", "bodyText": "The defaults are the same as the public RestHighLevelClient ctor (give or take a Collections.emptyList vs new ArrayList)\nI suspect there is a good reason you added this class but I can't see it.", "url": "https://github.com/elastic/elasticsearch/pull/66062#discussion_r542238583", "createdAt": "2020-12-14T09:35:53Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/MlDeprecationIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.deprecation;\n+\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.client.migration.DeprecationInfoRequest;\n+import org.elasticsearch.client.migration.DeprecationInfoResponse;\n+import org.elasticsearch.client.ml.PutJobRequest;\n+import org.elasticsearch.client.ml.job.config.AnalysisConfig;\n+import org.elasticsearch.client.ml.job.config.DataDescription;\n+import org.elasticsearch.client.ml.job.config.Detector;\n+import org.elasticsearch.client.ml.job.config.Job;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchModule;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+public class MlDeprecationIT extends ESRestTestCase {\n+\n+    private static final RequestOptions REQUEST_OPTIONS = RequestOptions.DEFAULT.toBuilder()\n+        .setWarningsHandler(WarningsHandler.PERMISSIVE)\n+        .build();\n+\n+    private static class HLRC extends RestHighLevelClient {\n+        HLRC(RestClient restClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645929a3e899d581c063a99ea09eb6c9716fdd1c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM4OTMzOQ==", "bodyText": "@davidkyle the public ctor for the RestHighLevelClient takes a client builder. Since the rest client is already built, I need to access the protected ctor that accepts the built low level client.", "url": "https://github.com/elastic/elasticsearch/pull/66062#discussion_r542389339", "createdAt": "2020-12-14T13:38:34Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/MlDeprecationIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.deprecation;\n+\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.client.migration.DeprecationInfoRequest;\n+import org.elasticsearch.client.migration.DeprecationInfoResponse;\n+import org.elasticsearch.client.ml.PutJobRequest;\n+import org.elasticsearch.client.ml.job.config.AnalysisConfig;\n+import org.elasticsearch.client.ml.job.config.DataDescription;\n+import org.elasticsearch.client.ml.job.config.Detector;\n+import org.elasticsearch.client.ml.job.config.Job;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchModule;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+public class MlDeprecationIT extends ESRestTestCase {\n+\n+    private static final RequestOptions REQUEST_OPTIONS = RequestOptions.DEFAULT.toBuilder()\n+        .setWarningsHandler(WarningsHandler.PERMISSIVE)\n+        .build();\n+\n+    private static class HLRC extends RestHighLevelClient {\n+        HLRC(RestClient restClient) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzODU4Mw=="}, "originalCommit": {"oid": "645929a3e899d581c063a99ea09eb6c9716fdd1c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjc2ODU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/MlDeprecationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo1MDoyNFrOIFIPqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo1MDoyNFrOIFIPqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0ODg3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    );\n          \n          \n            \n                    );\n          \n          \n            \n                    hlrc.close();", "url": "https://github.com/elastic/elasticsearch/pull/66062#discussion_r542248875", "createdAt": "2020-12-14T09:50:24Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/MlDeprecationIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.deprecation;\n+\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.client.migration.DeprecationInfoRequest;\n+import org.elasticsearch.client.migration.DeprecationInfoResponse;\n+import org.elasticsearch.client.ml.PutJobRequest;\n+import org.elasticsearch.client.ml.job.config.AnalysisConfig;\n+import org.elasticsearch.client.ml.job.config.DataDescription;\n+import org.elasticsearch.client.ml.job.config.Detector;\n+import org.elasticsearch.client.ml.job.config.Job;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.SearchModule;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+public class MlDeprecationIT extends ESRestTestCase {\n+\n+    private static final RequestOptions REQUEST_OPTIONS = RequestOptions.DEFAULT.toBuilder()\n+        .setWarningsHandler(WarningsHandler.PERMISSIVE)\n+        .build();\n+\n+    private static class HLRC extends RestHighLevelClient {\n+        HLRC(RestClient restClient) {\n+            super(restClient, RestClient::close, new ArrayList<>());\n+        }\n+    }\n+\n+    @Override\n+    protected NamedXContentRegistry xContentRegistry() {\n+        SearchModule searchModule = new SearchModule(Settings.EMPTY, Collections.emptyList());\n+        return new NamedXContentRegistry(searchModule.getNamedXContents());\n+    }\n+\n+    @Override\n+    protected boolean enableWarningsCheck() {\n+        return false;\n+    }\n+\n+    public void testMlDeprecationChecks() throws Exception {\n+        HLRC hlrc = new HLRC(client());\n+        String jobId = \"deprecation_check_job\";\n+        hlrc.machineLearning()\n+            .putJob(\n+                new PutJobRequest(\n+                    Job.builder(jobId)\n+                        .setAnalysisConfig(\n+                            AnalysisConfig.builder(Collections.singletonList(Detector.builder().setFunction(\"count\").build()))\n+                        )\n+                        .setDataDescription(new DataDescription.Builder().setTimeField(\"time\"))\n+                        .build()\n+                ),\n+                REQUEST_OPTIONS\n+            );\n+\n+        IndexRequest indexRequest = new IndexRequest(\".ml-anomalies-.write-\" + jobId).id(jobId + \"_model_snapshot_1\")\n+            .source(\"{\\\"job_id\\\":\\\"deprecation_check_job\\\",\\\"snapshot_id\\\":\\\"1\\\", \\\"snapshot_doc_count\\\":1}\", XContentType.JSON);\n+        hlrc.index(indexRequest, REQUEST_OPTIONS);\n+\n+        indexRequest = new IndexRequest(\".ml-anomalies-.write-\" + jobId).id(jobId + \"_model_snapshot_2\")\n+            .source(\n+                \"{\\\"job_id\\\":\\\"deprecation_check_job\\\",\\\"snapshot_id\\\":\\\"2\\\",\\\"snapshot_doc_count\\\":1,\\\"min_version\\\":\\\"8.0.0\\\"}\",\n+                XContentType.JSON\n+            );\n+        hlrc.index(indexRequest, REQUEST_OPTIONS);\n+        hlrc.indices().refresh(new RefreshRequest(\".ml-anomalies-*\"), REQUEST_OPTIONS);\n+\n+        DeprecationInfoResponse response = hlrc.migration()\n+            .getDeprecationInfo(\n+                // specify an index so that deprecation checks don't run against any accidentally existing indices\n+                new DeprecationInfoRequest(Collections.singletonList(\"index-that-does-not-exist-*\")),\n+                RequestOptions.DEFAULT\n+            );\n+        assertThat(response.getMlSettingsIssues(), hasSize(1));\n+        assertThat(\n+            response.getMlSettingsIssues().get(0).getMessage(),\n+            containsString(\"model snapshot [1] for job [deprecation_check_job] needs to be deleted or upgraded\")\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645929a3e899d581c063a99ea09eb6c9716fdd1c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjgyNzg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/MlDeprecationChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDowMjo0OFrOIFIxeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo0MTozMlrOIFQ82Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1NzUyOQ==", "bodyText": "The snapshot docs are small increase the PageParams to 100 if not more!", "url": "https://github.com/elastic/elasticsearch/pull/66062#discussion_r542257529", "createdAt": "2020-12-14T10:02:48Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/MlDeprecationChecker.java", "diffHunk": "@@ -56,16 +84,36 @@ public void check(Components components, ActionListener<CheckResult> deprecation\n             deprecationIssueListener.onResponse(new CheckResult(getName(), Collections.emptyList()));\n             return;\n         }\n+        List<DeprecationIssue> issues = Collections.synchronizedList(new ArrayList<>());\n+        final GetModelSnapshotsAction.Request getModelSnapshots = new GetModelSnapshotsAction.Request(\"*\", null);\n+        getModelSnapshots.setPageParams(new PageParams(0, 50));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645929a3e899d581c063a99ea09eb6c9716fdd1c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM5MTUxMw==", "bodyText": "The snapshot docs are small increase the PageParams to 100 if not more!\n\nThe reason I am limiting here is that I don't want to write an insane amount of deprecation warnings not necessarily a limit in the docs we search for.", "url": "https://github.com/elastic/elasticsearch/pull/66062#discussion_r542391513", "createdAt": "2020-12-14T13:41:32Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/MlDeprecationChecker.java", "diffHunk": "@@ -56,16 +84,36 @@ public void check(Components components, ActionListener<CheckResult> deprecation\n             deprecationIssueListener.onResponse(new CheckResult(getName(), Collections.emptyList()));\n             return;\n         }\n+        List<DeprecationIssue> issues = Collections.synchronizedList(new ArrayList<>());\n+        final GetModelSnapshotsAction.Request getModelSnapshots = new GetModelSnapshotsAction.Request(\"*\", null);\n+        getModelSnapshots.setPageParams(new PageParams(0, 50));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1NzUyOQ=="}, "originalCommit": {"oid": "645929a3e899d581c063a99ea09eb6c9716fdd1c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEyNjMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportGetModelSnapshotsAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowOTozMlrOIFLcJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowOTozMlrOIFLcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMTIyMg==", "bodyText": "nice one", "url": "https://github.com/elastic/elasticsearch/pull/66062#discussion_r542301222", "createdAt": "2020-12-14T11:09:32Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportGetModelSnapshotsAction.java", "diffHunk": "@@ -53,19 +54,29 @@ protected void doExecute(Task task, GetModelSnapshotsAction.Request request,\n                 request.getSort(),\n                 request.getDescOrder()));\n \n+        if (Strings.isAllOrWildcard(request.getJobId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645929a3e899d581c063a99ea09eb6c9716fdd1c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEyODI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowOTo1NlrOIFLdPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowOTo1NlrOIFLdPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMTUwMQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/66062#discussion_r542301501", "createdAt": "2020-12-14T11:09:56Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java", "diffHunk": "@@ -1054,6 +1055,11 @@ private void modelSnapshots(String jobId,\n \n         FieldSortBuilder sb = new FieldSortBuilder(sortField)\n                 .order(sortDescending ? SortOrder.DESC : SortOrder.ASC);\n+        // `min_version` might not be present in very early snapshots.\n+        // Consequently, we should treat it as being at least from 6.3.0 or before\n+        if (sortField.equals(ModelSnapshot.MIN_VERSION.getPreferredName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645929a3e899d581c063a99ea09eb6c9716fdd1c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}