{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDkwMjQy", "number": 55193, "title": "EQL: Add concat function", "bodyText": "Closes #55185\nAdds variable argument concat function. This function will never return null, and only skips over null input parameters.\nIn #55185, I raise three different options for null handling. Currently, I'm choosing the first.\n\nnever return null\nreturn null if any inputs are null\nreturn null if all inputs are null\n\nBut I'm wondering if the second option (return null if any input is null) is the most appropriate and consistent with null handling. Having a coalesce function to make the user manually handle nulls seems like a better choice than just ignoring null inputs.", "createdAt": "2020-04-15T01:18:18Z", "url": "https://github.com/elastic/elasticsearch/pull/55193", "merged": true, "mergeCommit": {"oid": "a9828ab83f9b92563089d4e62b55ba8c9fe971ea"}, "closed": true, "closedAt": "2020-05-05T18:52:55Z", "author": {"login": "rw-access"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXtY5qAH2gAyNDAzNDkwMjQyOmJjYzQwMzM0MTZiY2I3OTU0ZTAyNGQ1YjEyMTA5ZWJkMDRhOTk0ZTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceG-R6AFqTQwNTM4NDA5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/bcc4033416bcb7954e024d5b12109ebd04a994e8", "committedDate": "2020-04-15T00:59:16Z", "message": "EQL: Add concat function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNjczOTY1", "url": "https://github.com/elastic/elasticsearch/pull/55193#pullrequestreview-393673965", "createdAt": "2020-04-15T11:08:33Z", "commit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTowODozM1rOGF0zaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMToxNjo1NlrOGF1D0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MTE5Mg==", "bodyText": "Why only isExact? Shouldn't this be a string only type of value?", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408761192", "createdAt": "2020-04-15T11:08:33Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Concat.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ConcatFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific concat function to build a string of all input arguments concatenated.\n+ */\n+public class Concat extends ScalarFunction {\n+\n+    private final List<Expression> values;\n+\n+    public Concat(Source source, List<Expression> values) {\n+        super(source, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution resolution = TypeResolution.TYPE_RESOLVED;\n+        int index = 0;\n+        for (Expression value : values) {\n+            resolution = isExact(value, sourceText(), ParamOrdinal.fromIndex(index));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MzI3NA==", "bodyText": "Also, this loop goes through all of concat's values and returns the resolution of the last element in list. Shouldn't, maybe, stop at the first resolution that is .unresolved() and return that?", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408763274", "createdAt": "2020-04-15T11:12:47Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Concat.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ConcatFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific concat function to build a string of all input arguments concatenated.\n+ */\n+public class Concat extends ScalarFunction {\n+\n+    private final List<Expression> values;\n+\n+    public Concat(Source source, List<Expression> values) {\n+        super(source, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution resolution = TypeResolution.TYPE_RESOLVED;\n+        int index = 0;\n+        for (Expression value : values) {\n+            resolution = isExact(value, sourceText(), ParamOrdinal.fromIndex(index));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MTE5Mg=="}, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NDQyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe v: values) {\n          \n          \n            \n                    for (Pipe v : values) {\n          \n      \n    \n    \n  \n\nAnd the same change throughout the rest of this function's classes. Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408764424", "createdAt": "2020-04-15T11:14:55Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NDUzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe p: values) {\n          \n          \n            \n                    for (Pipe p : values) {", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408764536", "createdAt": "2020-04-15T11:15:09Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {\n+            newValues.add(v.resolveAttributes(resolver));\n+        }\n+\n+        if (newValues == values) {\n+            return this;\n+        }\n+\n+        return replaceChildren(newValues);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        for (Pipe p: values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NDg4OQ==", "bodyText": "Please, add more integration tests here:\n\nwith one pattern only\nwith an empty string pattern among other patterns\nwith null patterns", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408764889", "createdAt": "2020-04-15T11:15:54Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -14,6 +14,16 @@ query = '''\n file where between(file_path, \"dev\", \".json\", true) == \"\\\\TestLogs\\\\something\"\n '''\n \n+[[queries]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe p: values) {\n          \n          \n            \n                    for (Pipe p : values) {", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408765267", "createdAt": "2020-04-15T11:16:40Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {\n+            newValues.add(v.resolveAttributes(resolver));\n+        }\n+\n+        if (newValues == values) {\n+            return this;\n+        }\n+\n+        return replaceChildren(newValues);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        for (Pipe p: values) {\n+            if (p.supportedByAggsOnlyQuery() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        for (Pipe p: values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTM5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Pipe v: values) {\n          \n          \n            \n                    for (Pipe v : values) {", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r408765395", "createdAt": "2020-04-15T11:16:56Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ConcatFunctionPipe.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ConcatFunctionPipe extends Pipe {\n+\n+    private final List<Pipe> values;\n+\n+    public ConcatFunctionPipe(Source source, Expression expression, List<Pipe> values) {\n+        super(source, expression, values);\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        return new ConcatFunctionPipe(source(), expression(), newChildren);\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        List<Pipe> newValues = new ArrayList<>(values.size());\n+        for (Pipe v: values) {\n+            newValues.add(v.resolveAttributes(resolver));\n+        }\n+\n+        if (newValues == values) {\n+            return this;\n+        }\n+\n+        return replaceChildren(newValues);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        for (Pipe p: values) {\n+            if (p.supportedByAggsOnlyQuery() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        for (Pipe p: values) {\n+            if (p.resolved() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public final void collectFields(QlSourceBuilder sourceBuilder) {\n+        for (Pipe v: values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd14685e47d1542138517950ff224d45de5be1ae", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/bd14685e47d1542138517950ff224d45de5be1ae", "committedDate": "2020-04-15T16:35:21Z", "message": "EQL: for loop spacing for concat\n\nCo-Authored-By: Andrei Stefan <astefan@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9295e7920777ebca4c3d26cc51cedecdbf4869db", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/9295e7920777ebca4c3d26cc51cedecdbf4869db", "committedDate": "2020-04-15T16:50:50Z", "message": "EQL: return unresolved arguments to concat early"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aadfc052f8efe05a028cd9b97d7f5868599bb45f", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/aadfc052f8efe05a028cd9b97d7f5868599bb45f", "committedDate": "2020-04-15T16:53:25Z", "message": "Merge remote-tracking branch 'origin/master' into eql/concat-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1050a0d6443c60146cf35140b92dee6565402174", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/1050a0d6443c60146cf35140b92dee6565402174", "committedDate": "2020-04-15T18:03:20Z", "message": "EQL: Add concat integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01403006024b49b9917a938323b24c10df76201e", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/01403006024b49b9917a938323b24c10df76201e", "committedDate": "2020-04-15T21:59:00Z", "message": "EQL: Fix concat query fail test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTU4ODIy", "url": "https://github.com/elastic/elasticsearch/pull/55193#pullrequestreview-394558822", "createdAt": "2020-04-16T11:56:29Z", "commit": {"oid": "01403006024b49b9917a938323b24c10df76201e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo1NjoyOVrOGGhweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo1NjoyOVrOGGhweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NzcyMQ==", "bodyText": "With all nulls as well", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r409497721", "createdAt": "2020-04-16T11:56:29Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -14,6 +14,16 @@ query = '''\n file where between(file_path, \"dev\", \".json\", true) == \"\\\\TestLogs\\\\something\"\n '''\n \n+[[queries]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NDg4OQ=="}, "originalCommit": {"oid": "bcc4033416bcb7954e024d5b12109ebd04a994e8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ab872085e03d44a1b4276d0f4e60653d7608fd", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/53ab872085e03d44a1b4276d0f4e60653d7608fd", "committedDate": "2020-04-21T20:36:49Z", "message": "Merge branch 'master' into eql/concat-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9e0f5af516b60359a6a9edda70cd58b36abb701", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/f9e0f5af516b60359a6a9edda70cd58b36abb701", "committedDate": "2020-04-21T21:40:35Z", "message": "EQL: Add class for concat function testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c28ee3496e907228c5835a08484c5bcfaa8e276", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/6c28ee3496e907228c5835a08484c5bcfaa8e276", "committedDate": "2020-04-21T21:49:33Z", "message": "EQL: Add concat integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Mzg4MzU5", "url": "https://github.com/elastic/elasticsearch/pull/55193#pullrequestreview-398388359", "createdAt": "2020-04-22T16:54:37Z", "commit": {"oid": "6c28ee3496e907228c5835a08484c5bcfaa8e276"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NDozOFrOGKAwhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NDozOFrOGKAwhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MTM2Nw==", "bodyText": "Small improvement here: if it's possible for a one argument call to not use \"first\" in the error message, that would look more user friendly.\nAlso, I would like to see one or two tests where another argument different from the first doesn't fulfill the restriction.", "url": "https://github.com/elastic/elasticsearch/pull/55193#discussion_r413151367", "createdAt": "2020-04-22T16:54:38Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -93,6 +93,14 @@ public void testCIDRMatchNonString() {\n                 \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n     }\n \n+    public void testConcatWithInexact() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where concat(plain_text)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\nline 1:15: [concat(plain_text)] cannot operate on first argument field of data type \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c28ee3496e907228c5835a08484c5bcfaa8e276"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbfbc1b6f35abef581145ec9f8550a78effc569f", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/fbfbc1b6f35abef581145ec9f8550a78effc569f", "committedDate": "2020-04-30T22:53:33Z", "message": "EQL: Update concat() null behavior"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "badd0d1beeffe86a51644347608fa2aa24d21bab", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/badd0d1beeffe86a51644347608fa2aa24d21bab", "committedDate": "2020-05-04T15:31:40Z", "message": "Merge remote-tracking branch 'origin/master' into eql/concat-function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Mzg0MDkx", "url": "https://github.com/elastic/elasticsearch/pull/55193#pullrequestreview-405384091", "createdAt": "2020-05-04T22:11:16Z", "commit": {"oid": "badd0d1beeffe86a51644347608fa2aa24d21bab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3344, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}