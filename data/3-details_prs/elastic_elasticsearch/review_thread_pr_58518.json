{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NTI5MTQ5", "number": 58518, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMToyMFrOEI1Bew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxNToyNFrOEI1IXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyNzk1OnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/Shell.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMToyMFrOGpBzUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo1MToxOFrOGpDXyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDMyMA==", "bodyText": "Leftover?", "url": "https://github.com/elastic/elasticsearch/pull/58518#discussion_r445674320", "createdAt": "2020-06-25T16:11:20Z", "author": {"login": "nik9000"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/Shell.java", "diffHunk": "@@ -200,9 +216,9 @@ private Result runScriptIgnoreExitCode(String[] command) {\n     private String readFileIfExists(Path path) throws IOException {\n         if (Files.exists(path)) {\n             long size = Files.size(path);\n-            if (size > 100 * 1024) {\n+            /*if (size > 100 * 1024) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb748c4e16a07b6026b64277bd30085dca6c077"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5OTM3MA==", "bodyText": "Oops yes, will uncomment.", "url": "https://github.com/elastic/elasticsearch/pull/58518#discussion_r445699370", "createdAt": "2020-06-25T16:50:14Z", "author": {"login": "rjernst"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/Shell.java", "diffHunk": "@@ -200,9 +216,9 @@ private Result runScriptIgnoreExitCode(String[] command) {\n     private String readFileIfExists(Path path) throws IOException {\n         if (Files.exists(path)) {\n             long size = Files.size(path);\n-            if (size > 100 * 1024) {\n+            /*if (size > 100 * 1024) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDMyMA=="}, "originalCommit": {"oid": "efb748c4e16a07b6026b64277bd30085dca6c077"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMDA0Mg==", "bodyText": "I pushed d6b6627", "url": "https://github.com/elastic/elasticsearch/pull/58518#discussion_r445700042", "createdAt": "2020-06-25T16:51:18Z", "author": {"login": "rjernst"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/Shell.java", "diffHunk": "@@ -200,9 +216,9 @@ private Result runScriptIgnoreExitCode(String[] command) {\n     private String readFileIfExists(Path path) throws IOException {\n         if (Files.exists(path)) {\n             long size = Files.size(path);\n-            if (size > 100 * 1024) {\n+            /*if (size > 100 * 1024) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDMyMA=="}, "originalCommit": {"oid": "efb748c4e16a07b6026b64277bd30085dca6c077"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njk0NTU2OnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PluginCliTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxNToyNFrOGpB-cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxNToyNFrOGpB-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NzE3MQ==", "bodyText": "I don't remember why some of them booted ES and asserted that the example plugin looks good and some didn't. I think what you have here is fine though, just asserting that the installer didn't blow up is probably good enough in these cases so long as we have a single test that asserts that it did indeed install the plugin in all the way. And you have that above.\n\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/58518#discussion_r445677171", "createdAt": "2020-06-25T16:15:24Z", "author": {"login": "nik9000"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PluginCliTests.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.packaging.test;\n+\n+import org.apache.http.client.fluent.Request;\n+import org.elasticsearch.packaging.util.Distribution;\n+import org.elasticsearch.packaging.util.Installation;\n+import org.elasticsearch.packaging.util.Platforms;\n+import org.elasticsearch.packaging.util.Shell;\n+import org.junit.Before;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.elasticsearch.packaging.util.ServerUtils.makeRequest;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class PluginCliTests extends PackagingTestCase {\n+\n+    private static final String EXAMPLE_PLUGIN_NAME = \"custom-settings\";\n+    private static final Path EXAMPLE_PLUGIN_ZIP;\n+    static {\n+        // re-read before each test so the plugin path can be manipulated within tests\n+        EXAMPLE_PLUGIN_ZIP = Paths.get(System.getProperty(\"tests.example-plugin\"));\n+    }\n+\n+    @Before\n+    public void filterDistros() {\n+        assumeTrue(\"no docker\", distribution.packaging != Distribution.Packaging.DOCKER);\n+    }\n+\n+    @FunctionalInterface\n+    public interface PluginAction {\n+        void run(Shell.Result installResult) throws Exception;\n+    }\n+\n+    private Shell.Result assertWithPlugin(Installation.Executable pluginTool, Path pluginZip, String pluginName, PluginAction action)\n+        throws Exception {\n+        Shell.Result installResult = pluginTool.run(\"install --batch \\\"\" + pluginZip.toUri().toString() + \"\\\"\");\n+        action.run(installResult);\n+        return pluginTool.run(\"remove \" + pluginName);\n+    }\n+\n+    private void assertWithExamplePlugin(PluginAction action) throws Exception {\n+        assertWithPlugin(installation.executables().pluginTool, EXAMPLE_PLUGIN_ZIP, EXAMPLE_PLUGIN_NAME, action);\n+    }\n+\n+    public void test10Install() throws Exception {\n+        install();\n+    }\n+\n+    public void test20SymlinkPluginsDir() throws Exception {\n+        Path pluginsDir = installation.plugins;\n+        Path stashedPluginsDir = createTempDir(\"stashed-plugins\");\n+\n+        Files.delete(stashedPluginsDir); // delete so we can replace it\n+        Files.move(pluginsDir, stashedPluginsDir);\n+        Path linkedPlugins = createTempDir(\"symlinked-plugins\");\n+        Platforms.onLinux(() -> sh.run(\"chown elasticsearch:elasticsearch \" + linkedPlugins.toString()));\n+        Files.createSymbolicLink(pluginsDir, linkedPlugins);\n+        assertWithExamplePlugin(installResult -> {\n+            assertWhileRunning(() -> {\n+                final String pluginsResponse = makeRequest(Request.Get(\"http://localhost:9200/_cat/plugins?h=component\")).strip();\n+                assertThat(pluginsResponse, equalTo(EXAMPLE_PLUGIN_NAME));\n+\n+                String settingsPath = \"_cluster/settings?include_defaults&filter_path=defaults.custom.simple\";\n+                final String settingsResponse = makeRequest(Request.Get(\"http://localhost:9200/\" + settingsPath)).strip();\n+                assertThat(settingsResponse, equalTo(\"{\\\"defaults\\\":{\\\"custom\\\":{\\\"simple\\\":\\\"foo\\\"}}}\"));\n+            });\n+        });\n+\n+        Files.delete(pluginsDir);\n+        Files.move(stashedPluginsDir, pluginsDir);\n+    }\n+\n+    public void test21CustomConfDir() throws Exception {\n+        withCustomConfig(confPath -> assertWithExamplePlugin(installResult -> {}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb748c4e16a07b6026b64277bd30085dca6c077"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1425, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}