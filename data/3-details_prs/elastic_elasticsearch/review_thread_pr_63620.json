{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNDM5Mzc4", "number": 63620, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTozNTowNFrOEtGcZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMDoxMlrOEw7RPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzI2OTQ5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTozNTowNFrOHgs9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyNjozMVrOHhVzUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1MzE0Ng==", "bodyText": "This naming is a bit confusing, specifically the \"only\" part. Other plugins are not \"bootstrap\" plugins, so this plugin is not \"only\" a bootstrap plugin. Perhaps instead we could have a \"type\" attribute or something like that which defaults to \"isolated\", and then have this alternative value \"bootstrap\"?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504053146", "createdAt": "2020-10-13T15:35:04Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.java", "diffHunk": "@@ -105,6 +107,14 @@ public void setHasNativeController(boolean hasNativeController) {\n         this.hasNativeController = hasNativeController;\n     }\n \n+    public boolean isBootstrapOnly() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dd544ad4359d21b490d3a23e91bbcc4284bf1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMjI1OQ==", "bodyText": "I've changed to a \"type\" as you suggested.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504722259", "createdAt": "2020-10-14T14:26:31Z", "author": {"login": "pugnascotia"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.java", "diffHunk": "@@ -105,6 +107,14 @@ public void setHasNativeController(boolean hasNativeController) {\n         this.hasNativeController = hasNativeController;\n     }\n \n+    public boolean isBootstrapOnly() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1MzE0Ng=="}, "originalCommit": {"oid": "99dd544ad4359d21b490d3a23e91bbcc4284bf1e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzI4NjAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/BootstrapPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTozODoyMlrOHgtHng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyNzozNlrOHhV2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1NTcxMA==", "bodyText": "I don't understand what advantages a marker interface gives here. A bootstrap plugin's purpose is to add code to the root classloader, so that it can be used by the jdk and other parts of the system that are loaded before plugins are loaded. I don't see a reason why these plugins should have a Plugin class at all?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504055710", "createdAt": "2020-10-13T15:38:22Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/BootstrapPlugin.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+/**\n+ * Bootstrap plugins are not loaded during normal Elasticsearch operation. This\n+ * interface exists to make this explicit.\n+ */\n+public interface BootstrapPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dd544ad4359d21b490d3a23e91bbcc4284bf1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMzA1Ng==", "bodyText": "Ah...I think I originally added it, thinking I'd use it to filter out bootstrap plugins, but of course you need to load the plugin to inspect it \ud83e\udd26. I should have removed it earlier, but it's gone now.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504723056", "createdAt": "2020-10-14T14:27:36Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/plugins/BootstrapPlugin.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+/**\n+ * Bootstrap plugins are not loaded during normal Elasticsearch operation. This\n+ * interface exists to make this explicit.\n+ */\n+public interface BootstrapPlugin {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1NTcxMA=="}, "originalCommit": {"oid": "99dd544ad4359d21b490d3a23e91bbcc4284bf1e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzI5OTI1OnYy", "diffSide": "RIGHT", "path": "distribution/src/bin/elasticsearch", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTo0MToxM1rOHgtPpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyOToxNlrOHhV8FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1Nzc2NQ==", "bodyText": "The idea of bootstrap plugins is to avoid this type of specialized logic (#29306). Instead, the plugin should define which system properties need to be added, and bin/elasticsearch should introspect those upon finding all bootstrap plugins.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504057765", "createdAt": "2020-10-13T15:41:13Z", "author": {"login": "rjernst"}, "path": "distribution/src/bin/elasticsearch", "diffHunk": "@@ -54,6 +54,14 @@ fi\n #   - fourth, ergonomic JVM options are applied\n ES_JAVA_OPTS=`export ES_TMPDIR; \"$JAVA\" \"$XSHARE\" -cp \"$ES_CLASSPATH\" org.elasticsearch.tools.launchers.JvmOptionsParser \"$ES_PATH_CONF\"`\n \n+# If the quote-aware filesystem plugin is installed, then we need to pass extra\n+# flags to Java in order to use the plugin.\n+if [[ -d \"$ES_HOME/plugins/quota-aware-fs\" ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dd544ad4359d21b490d3a23e91bbcc4284bf1e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyNDUwMA==", "bodyText": "I've added infrastructure to do this, see what you think.\nWhat I haven't done, however, is update bin/elasticsearch.bat (yet). My batch knowledge it pretty woeful, so if we want to support this mechanism on Windows, I'll need to pair with someone who knows what they're doing \ud83d\ude05", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504724500", "createdAt": "2020-10-14T14:29:16Z", "author": {"login": "pugnascotia"}, "path": "distribution/src/bin/elasticsearch", "diffHunk": "@@ -54,6 +54,14 @@ fi\n #   - fourth, ergonomic JVM options are applied\n ES_JAVA_OPTS=`export ES_TMPDIR; \"$JAVA\" \"$XSHARE\" -cp \"$ES_CLASSPATH\" org.elasticsearch.tools.launchers.JvmOptionsParser \"$ES_PATH_CONF\"`\n \n+# If the quote-aware filesystem plugin is installed, then we need to pass extra\n+# flags to Java in order to use the plugin.\n+if [[ -d \"$ES_HOME/plugins/quota-aware-fs\" ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1Nzc2NQ=="}, "originalCommit": {"oid": "99dd544ad4359d21b490d3a23e91bbcc4284bf1e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ1MzkyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo0OTowMVrOHheXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo0OTowMVrOHheXHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MjQ5Mg==", "bodyText": "Just a note for future thinking there. We moved away from building all plugins and making them available to packaging tests, under the assumption plugins don't have platform specific behavior. Quota aware fs is a special case, I guess, but if we have any more cases like this, we should rethink how we model packaging tests for these plugins so as not to need special sysprops/setup for every one.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504862492", "createdAt": "2020-10-14T17:49:01Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/DistroTestPlugin.java", "diffHunk": "@@ -78,6 +78,9 @@\n     private static final String BWC_DISTRIBUTION_SYSPROP = \"tests.bwc-distribution\";\n     private static final String EXAMPLE_PLUGIN_SYSPROP = \"tests.example-plugin\";\n \n+    private static final String QUOTA_AWARE_FS_PLUGIN_CONFIGURATION = \"quotaAwareFsPlugin\";\n+    private static final String QUOTA_AWARE_FS_PLUGIN_SYSPROP = \"tests.quota-aware-fs-plugin\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ2NjM1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/resources/plugin-descriptor.properties", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1MjoxNVrOHhee0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1NzoyNFrOHic8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NDQ2Nw==", "bodyText": "Is this producing a commented out line?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504864467", "createdAt": "2020-10-14T17:52:15Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/resources/plugin-descriptor.properties", "diffHunk": "@@ -43,3 +43,12 @@ extended.plugins=${extendedPlugins}\n #\n # 'has.native.controller': whether or not the plugin has a native controller\n has.native.controller=${hasNativeController}\n+#\n+# 'type': the type of this plugin. 'isolated' indicated a typical sandboxed plugin,\n+# whereas 'bootstrap' indicates a plugin whose jars are added to the JVM's boot\n+# classpath.\n+type=${type}\n+#\n+# 'java.opts': any additional command line parameters to pass to the JVM when\n+# Elasticsearch starts. Only applies when 'type' is 'bootstrap'.\n+<%= type == \"bootstrap\" ? \"\" : \"# \" %>java.opts=${javaOpts}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyODY1Mg==", "bodyText": "It is. Perhaps it's overkill, but I thought it was worth some extra discouragement from anyone setting this field. I can remove it if you feel it's too much.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r505428652", "createdAt": "2020-10-15T10:18:32Z", "author": {"login": "pugnascotia"}, "path": "buildSrc/src/main/resources/plugin-descriptor.properties", "diffHunk": "@@ -43,3 +43,12 @@ extended.plugins=${extendedPlugins}\n #\n # 'has.native.controller': whether or not the plugin has a native controller\n has.native.controller=${hasNativeController}\n+#\n+# 'type': the type of this plugin. 'isolated' indicated a typical sandboxed plugin,\n+# whereas 'bootstrap' indicates a plugin whose jars are added to the JVM's boot\n+# classpath.\n+type=${type}\n+#\n+# 'java.opts': any additional command line parameters to pass to the JVM when\n+# Elasticsearch starts. Only applies when 'type' is 'bootstrap'.\n+<%= type == \"bootstrap\" ? \"\" : \"# \" %>java.opts=${javaOpts}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NDQ2Nw=="}, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4Nzk0MQ==", "bodyText": "I'm not understand why it would be commented. If it is a bootstrap plugin, the java.opts should be added. If it is an isolated plugin, then why add java.opts at all, commented or otherwise?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r505887941", "createdAt": "2020-10-15T21:57:24Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/resources/plugin-descriptor.properties", "diffHunk": "@@ -43,3 +43,12 @@ extended.plugins=${extendedPlugins}\n #\n # 'has.native.controller': whether or not the plugin has a native controller\n has.native.controller=${hasNativeController}\n+#\n+# 'type': the type of this plugin. 'isolated' indicated a typical sandboxed plugin,\n+# whereas 'bootstrap' indicates a plugin whose jars are added to the JVM's boot\n+# classpath.\n+type=${type}\n+#\n+# 'java.opts': any additional command line parameters to pass to the JVM when\n+# Elasticsearch starts. Only applies when 'type' is 'bootstrap'.\n+<%= type == \"bootstrap\" ? \"\" : \"# \" %>java.opts=${javaOpts}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NDQ2Nw=="}, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ5MzI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1OToxNlrOHhevoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1NToyNFrOHic55g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2ODc2OA==", "bodyText": "Could we not use Booleans.parseBoolean?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504868768", "createdAt": "2020-10-14T17:59:16Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -172,36 +183,45 @@ public static PluginInfo readFromProperties(final Path path) throws IOException\n             extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, \",\"));\n         }\n \n-        final String hasNativeControllerValue = propsMap.remove(\"has.native.controller\");\n-        final boolean hasNativeController;\n-        if (hasNativeControllerValue == null) {\n-            hasNativeController = false;\n-        } else {\n-            switch (hasNativeControllerValue) {\n-                case \"true\":\n-                    hasNativeController = true;\n-                    break;\n-                case \"false\":\n-                    hasNativeController = false;\n-                    break;\n-                default:\n-                    final String message = String.format(\n-                            Locale.ROOT,\n-                            \"property [%s] must be [%s], [%s], or unspecified but was [%s]\",\n-                            \"has_native_controller\",\n-                            \"true\",\n-                            \"false\",\n-                            hasNativeControllerValue);\n-                    throw new IllegalArgumentException(message);\n-            }\n+        final boolean hasNativeController = parseBooleanValue(\"has.native.controller\", propsMap.remove(\"has.native.controller\"));\n+\n+        final String typeString = propsMap.remove(\"type\");\n+        if (Strings.isNullOrEmpty(typeString)) {\n+            throw new IllegalArgumentException(\"property [type] is missing for plugin [\" + name + \"]\");\n         }\n \n+        final PluginType type = PluginType.valueOf(typeString.toUpperCase());\n+\n+        final String javaOpts = propsMap.remove(\"java.opts\");\n+\n         if (propsMap.isEmpty() == false) {\n             throw new IllegalArgumentException(\"Unknown properties in plugin descriptor: \" + propsMap.keySet());\n         }\n \n         return new PluginInfo(name, description, version, esVersion, javaVersionString,\n-                              classname, extendedPlugins, hasNativeController);\n+                              classname, extendedPlugins, hasNativeController, type, javaOpts);\n+    }\n+\n+    private static boolean parseBooleanValue(String name, String rawValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyOTA4OQ==", "bodyText": "Boolean.parseBoolean never throws an exception, so we'd lose the validation part.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r505429089", "createdAt": "2020-10-15T10:19:17Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -172,36 +183,45 @@ public static PluginInfo readFromProperties(final Path path) throws IOException\n             extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, \",\"));\n         }\n \n-        final String hasNativeControllerValue = propsMap.remove(\"has.native.controller\");\n-        final boolean hasNativeController;\n-        if (hasNativeControllerValue == null) {\n-            hasNativeController = false;\n-        } else {\n-            switch (hasNativeControllerValue) {\n-                case \"true\":\n-                    hasNativeController = true;\n-                    break;\n-                case \"false\":\n-                    hasNativeController = false;\n-                    break;\n-                default:\n-                    final String message = String.format(\n-                            Locale.ROOT,\n-                            \"property [%s] must be [%s], [%s], or unspecified but was [%s]\",\n-                            \"has_native_controller\",\n-                            \"true\",\n-                            \"false\",\n-                            hasNativeControllerValue);\n-                    throw new IllegalArgumentException(message);\n-            }\n+        final boolean hasNativeController = parseBooleanValue(\"has.native.controller\", propsMap.remove(\"has.native.controller\"));\n+\n+        final String typeString = propsMap.remove(\"type\");\n+        if (Strings.isNullOrEmpty(typeString)) {\n+            throw new IllegalArgumentException(\"property [type] is missing for plugin [\" + name + \"]\");\n         }\n \n+        final PluginType type = PluginType.valueOf(typeString.toUpperCase());\n+\n+        final String javaOpts = propsMap.remove(\"java.opts\");\n+\n         if (propsMap.isEmpty() == false) {\n             throw new IllegalArgumentException(\"Unknown properties in plugin descriptor: \" + propsMap.keySet());\n         }\n \n         return new PluginInfo(name, description, version, esVersion, javaVersionString,\n-                              classname, extendedPlugins, hasNativeController);\n+                              classname, extendedPlugins, hasNativeController, type, javaOpts);\n+    }\n+\n+    private static boolean parseBooleanValue(String name, String rawValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2ODc2OA=="}, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NzIwNg==", "bodyText": "I didn't mean the parse method from Boolean, I mean that from o.e.c.Booleans, which throws an error on non true/false values.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r505887206", "createdAt": "2020-10-15T21:55:24Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -172,36 +183,45 @@ public static PluginInfo readFromProperties(final Path path) throws IOException\n             extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, \",\"));\n         }\n \n-        final String hasNativeControllerValue = propsMap.remove(\"has.native.controller\");\n-        final boolean hasNativeController;\n-        if (hasNativeControllerValue == null) {\n-            hasNativeController = false;\n-        } else {\n-            switch (hasNativeControllerValue) {\n-                case \"true\":\n-                    hasNativeController = true;\n-                    break;\n-                case \"false\":\n-                    hasNativeController = false;\n-                    break;\n-                default:\n-                    final String message = String.format(\n-                            Locale.ROOT,\n-                            \"property [%s] must be [%s], [%s], or unspecified but was [%s]\",\n-                            \"has_native_controller\",\n-                            \"true\",\n-                            \"false\",\n-                            hasNativeControllerValue);\n-                    throw new IllegalArgumentException(message);\n-            }\n+        final boolean hasNativeController = parseBooleanValue(\"has.native.controller\", propsMap.remove(\"has.native.controller\"));\n+\n+        final String typeString = propsMap.remove(\"type\");\n+        if (Strings.isNullOrEmpty(typeString)) {\n+            throw new IllegalArgumentException(\"property [type] is missing for plugin [\" + name + \"]\");\n         }\n \n+        final PluginType type = PluginType.valueOf(typeString.toUpperCase());\n+\n+        final String javaOpts = propsMap.remove(\"java.opts\");\n+\n         if (propsMap.isEmpty() == false) {\n             throw new IllegalArgumentException(\"Unknown properties in plugin descriptor: \" + propsMap.keySet());\n         }\n \n         return new PluginInfo(name, description, version, esVersion, javaVersionString,\n-                              classname, extendedPlugins, hasNativeController);\n+                              classname, extendedPlugins, hasNativeController, type, javaOpts);\n+    }\n+\n+    private static boolean parseBooleanValue(String name, String rawValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2ODc2OA=="}, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ5NjQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowMDowOFrOHhexrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoxOTozN1rOHiA9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2OTI5NA==", "bodyText": "I think this will break a lot of plugin authors who have static plugin properties. Can we instead default type to isolated?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504869294", "createdAt": "2020-10-14T18:00:08Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -172,36 +183,45 @@ public static PluginInfo readFromProperties(final Path path) throws IOException\n             extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, \",\"));\n         }\n \n-        final String hasNativeControllerValue = propsMap.remove(\"has.native.controller\");\n-        final boolean hasNativeController;\n-        if (hasNativeControllerValue == null) {\n-            hasNativeController = false;\n-        } else {\n-            switch (hasNativeControllerValue) {\n-                case \"true\":\n-                    hasNativeController = true;\n-                    break;\n-                case \"false\":\n-                    hasNativeController = false;\n-                    break;\n-                default:\n-                    final String message = String.format(\n-                            Locale.ROOT,\n-                            \"property [%s] must be [%s], [%s], or unspecified but was [%s]\",\n-                            \"has_native_controller\",\n-                            \"true\",\n-                            \"false\",\n-                            hasNativeControllerValue);\n-                    throw new IllegalArgumentException(message);\n-            }\n+        final boolean hasNativeController = parseBooleanValue(\"has.native.controller\", propsMap.remove(\"has.native.controller\"));\n+\n+        final String typeString = propsMap.remove(\"type\");\n+        if (Strings.isNullOrEmpty(typeString)) {\n+            throw new IllegalArgumentException(\"property [type] is missing for plugin [\" + name + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyOTI1Mg==", "bodyText": "It now defaults to isolated.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r505429252", "createdAt": "2020-10-15T10:19:37Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -172,36 +183,45 @@ public static PluginInfo readFromProperties(final Path path) throws IOException\n             extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, \",\"));\n         }\n \n-        final String hasNativeControllerValue = propsMap.remove(\"has.native.controller\");\n-        final boolean hasNativeController;\n-        if (hasNativeControllerValue == null) {\n-            hasNativeController = false;\n-        } else {\n-            switch (hasNativeControllerValue) {\n-                case \"true\":\n-                    hasNativeController = true;\n-                    break;\n-                case \"false\":\n-                    hasNativeController = false;\n-                    break;\n-                default:\n-                    final String message = String.format(\n-                            Locale.ROOT,\n-                            \"property [%s] must be [%s], [%s], or unspecified but was [%s]\",\n-                            \"has_native_controller\",\n-                            \"true\",\n-                            \"false\",\n-                            hasNativeControllerValue);\n-                    throw new IllegalArgumentException(message);\n-            }\n+        final boolean hasNativeController = parseBooleanValue(\"has.native.controller\", propsMap.remove(\"has.native.controller\"));\n+\n+        final String typeString = propsMap.remove(\"type\");\n+        if (Strings.isNullOrEmpty(typeString)) {\n+            throw new IllegalArgumentException(\"property [type] is missing for plugin [\" + name + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2OTI5NA=="}, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ5Nzg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowMDozNFrOHheyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMDozM1rOHiA_FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2OTUzNg==", "bodyText": "Can we error if java opts is set for non bootstrap plugins?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504869536", "createdAt": "2020-10-14T18:00:34Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -172,36 +183,45 @@ public static PluginInfo readFromProperties(final Path path) throws IOException\n             extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, \",\"));\n         }\n \n-        final String hasNativeControllerValue = propsMap.remove(\"has.native.controller\");\n-        final boolean hasNativeController;\n-        if (hasNativeControllerValue == null) {\n-            hasNativeController = false;\n-        } else {\n-            switch (hasNativeControllerValue) {\n-                case \"true\":\n-                    hasNativeController = true;\n-                    break;\n-                case \"false\":\n-                    hasNativeController = false;\n-                    break;\n-                default:\n-                    final String message = String.format(\n-                            Locale.ROOT,\n-                            \"property [%s] must be [%s], [%s], or unspecified but was [%s]\",\n-                            \"has_native_controller\",\n-                            \"true\",\n-                            \"false\",\n-                            hasNativeControllerValue);\n-                    throw new IllegalArgumentException(message);\n-            }\n+        final boolean hasNativeController = parseBooleanValue(\"has.native.controller\", propsMap.remove(\"has.native.controller\"));\n+\n+        final String typeString = propsMap.remove(\"type\");\n+        if (Strings.isNullOrEmpty(typeString)) {\n+            throw new IllegalArgumentException(\"property [type] is missing for plugin [\" + name + \"]\");\n         }\n \n+        final PluginType type = PluginType.valueOf(typeString.toUpperCase());\n+\n+        final String javaOpts = propsMap.remove(\"java.opts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyOTc4MA==", "bodyText": "I actually had that in, then removed it because of the validation I added to bin/elasticsearch, but I've put it back in to be on the safe side.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r505429780", "createdAt": "2020-10-15T10:20:33Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -172,36 +183,45 @@ public static PluginInfo readFromProperties(final Path path) throws IOException\n             extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, \",\"));\n         }\n \n-        final String hasNativeControllerValue = propsMap.remove(\"has.native.controller\");\n-        final boolean hasNativeController;\n-        if (hasNativeControllerValue == null) {\n-            hasNativeController = false;\n-        } else {\n-            switch (hasNativeControllerValue) {\n-                case \"true\":\n-                    hasNativeController = true;\n-                    break;\n-                case \"false\":\n-                    hasNativeController = false;\n-                    break;\n-                default:\n-                    final String message = String.format(\n-                            Locale.ROOT,\n-                            \"property [%s] must be [%s], [%s], or unspecified but was [%s]\",\n-                            \"has_native_controller\",\n-                            \"true\",\n-                            \"false\",\n-                            hasNativeControllerValue);\n-                    throw new IllegalArgumentException(message);\n-            }\n+        final boolean hasNativeController = parseBooleanValue(\"has.native.controller\", propsMap.remove(\"has.native.controller\"));\n+\n+        final String typeString = propsMap.remove(\"type\");\n+        if (Strings.isNullOrEmpty(typeString)) {\n+            throw new IllegalArgumentException(\"property [type] is missing for plugin [\" + name + \"]\");\n         }\n \n+        final PluginType type = PluginType.valueOf(typeString.toUpperCase());\n+\n+        final String javaOpts = propsMap.remove(\"java.opts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2OTUzNg=="}, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjUwMDAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/PluginsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowMTowNlrOHhez9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowMTowNlrOHhez9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2OTg3Ng==", "bodyText": "nit: only -> plugin", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504869876", "createdAt": "2020-10-14T18:01:06Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginsService.java", "diffHunk": "@@ -349,31 +350,36 @@ static void checkForFailedPluginRemovals(final Path pluginsDirectory) throws IOE\n     private static Set<Bundle> findBundles(final Path directory, String type) throws IOException {\n         final Set<Bundle> bundles = new HashSet<>();\n         for (final Path plugin : findPluginDirs(directory)) {\n-            final Bundle bundle = readPluginBundle(bundles, plugin, type);\n-            bundles.add(bundle);\n+            final Bundle bundle = readPluginBundle(plugin, type);\n+            if (bundle.plugin.getType() == PluginType.BOOTSTRAP) {\n+                logger.trace(\"--- skipping bootstrap only [{}] [{}]\", type, plugin.toAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjUwMjg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/PluginsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowMjowMlrOHhe1yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMDo1MlrOHiA_4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3MDM0Ng==", "bodyText": "nit: this trace is going to produce a string every time. the message should be wrapped in a lambda?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r504870346", "createdAt": "2020-10-14T18:02:02Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginsService.java", "diffHunk": "@@ -349,31 +350,36 @@ static void checkForFailedPluginRemovals(final Path pluginsDirectory) throws IOE\n     private static Set<Bundle> findBundles(final Path directory, String type) throws IOException {\n         final Set<Bundle> bundles = new HashSet<>();\n         for (final Path plugin : findPluginDirs(directory)) {\n-            final Bundle bundle = readPluginBundle(bundles, plugin, type);\n-            bundles.add(bundle);\n+            final Bundle bundle = readPluginBundle(plugin, type);\n+            if (bundle.plugin.getType() == PluginType.BOOTSTRAP) {\n+                logger.trace(\"--- skipping bootstrap only [{}] [{}]\", type, plugin.toAbsolutePath());\n+            } else {\n+                if (bundles.add(bundle) == false) {\n+                    throw new IllegalStateException(\"duplicate \" + type + \": \" + bundle.plugin);\n+                }\n+                if (type.equals(\"module\") && bundle.plugin.getName().startsWith(\"test-\") && Build.CURRENT.isSnapshot() == false) {\n+                    throw new IllegalStateException(\"external test module [\" + plugin.getFileName() + \"] found in non-snapshot build\");\n+                }\n+            }\n         }\n \n+        logger.trace(\n+            \"findBundles(\" + type + \") returning: \" + bundles.stream().map(b -> b.plugin.getName()).sorted().collect(Collectors.toList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyOTk4NA==", "bodyText": "I've wrapped it in a lambda.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r505429984", "createdAt": "2020-10-15T10:20:52Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginsService.java", "diffHunk": "@@ -349,31 +350,36 @@ static void checkForFailedPluginRemovals(final Path pluginsDirectory) throws IOE\n     private static Set<Bundle> findBundles(final Path directory, String type) throws IOException {\n         final Set<Bundle> bundles = new HashSet<>();\n         for (final Path plugin : findPluginDirs(directory)) {\n-            final Bundle bundle = readPluginBundle(bundles, plugin, type);\n-            bundles.add(bundle);\n+            final Bundle bundle = readPluginBundle(plugin, type);\n+            if (bundle.plugin.getType() == PluginType.BOOTSTRAP) {\n+                logger.trace(\"--- skipping bootstrap only [{}] [{}]\", type, plugin.toAbsolutePath());\n+            } else {\n+                if (bundles.add(bundle) == false) {\n+                    throw new IllegalStateException(\"duplicate \" + type + \": \" + bundle.plugin);\n+                }\n+                if (type.equals(\"module\") && bundle.plugin.getName().startsWith(\"test-\") && Build.CURRENT.isSnapshot() == false) {\n+                    throw new IllegalStateException(\"external test module [\" + plugin.getFileName() + \"] found in non-snapshot build\");\n+                }\n+            }\n         }\n \n+        logger.trace(\n+            \"findBundles(\" + type + \") returning: \" + bundles.stream().map(b -> b.plugin.getName()).sorted().collect(Collectors.toList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3MDM0Ng=="}, "originalCommit": {"oid": "2289280379b7f96330b5e630c9da1bfbf085f7ac"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTY2NDI4OnYy", "diffSide": "RIGHT", "path": "plugins/quota-aware-fs/src/main/java/org/elasticsearch/fs/quotaaware/QuotaAwareFileSystemProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NTozMFrOHkGrdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo1MDowOFrOHkImTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDIxNQ==", "bodyText": "Now that this is becoming a plugin and as such is released for every ES version, it could just use the Lucene version in ES", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r507620215", "createdAt": "2020-10-19T09:55:30Z", "author": {"login": "beiske"}, "path": "plugins/quota-aware-fs/src/main/java/org/elasticsearch/fs/quotaaware/QuotaAwareFileSystemProvider.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fs.quotaaware;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.channels.AsynchronousFileChannel;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.AccessMode;\n+import java.nio.file.CopyOption;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.FileStore;\n+import java.nio.file.FileSystem;\n+import java.nio.file.LinkOption;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+import java.nio.file.ProviderMismatchException;\n+import java.nio.file.StandardOpenOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * QuotaAwareFileSystemProvider is intended to be used as a wrapper around the\n+ * default file system provider of the JVM.\n+ *\n+ * It augments the default file system by allowing to report total size and\n+ * remaining capacity according to some externally defined quota that is not\n+ * readily available to the JVM. Essentially it is a workaround for containers\n+ * that see the size of the host volume and not the effective quota available to\n+ * them. It will however never report larger capacity than what the underlying\n+ * file system sees.\n+ *\n+ * In application usage:\n+ * <ol>\n+ * <li>Include this project in the class path</li>\n+ * <li>Specify this argument at JVM boot:\n+ * <code>-Djava.nio.file.spi.DefaultFileSystemProvider=co.elastic.cloud.quotaawarefs.QuotaAwareFileSystemProvider</code>\n+ * </li>\n+ * <li>Have some external system check the quota usage and\n+ * write it to the path specified by the system property {@value #QUOTA_PATH_KEY}.</li>\n+ * </ol>\n+ *\n+ * In any case the quota file must be a {@link Properties} file with the\n+ * properties <code>total</code> and <code>remaining</code>. Both properties are\n+ * {@link Long} values, parsed according to {@link Long#parseLong(String)} and\n+ * assumed to be in bytes.\n+ *\n+ * Sample format:\n+ *\n+ * <pre>\n+ * {@code\n+ * total=5000\n+ * remaining=200\n+ * }\n+ * </pre>\n+ */\n+public class QuotaAwareFileSystemProvider extends FileSystemProvider implements AutoCloseable {\n+\n+    private static final int CHECK_PERIOD = 1000;\n+\n+    private final class RefreshLimitsTask extends TimerTask {\n+        @Override\n+        public void run() {\n+            try {\n+                assert timerThread == Thread.currentThread() : \"QuotaAwareFileSystemProvider doesn't support multithreaded timer.\";\n+                refreshLimits();\n+            } catch (Exception e) {\n+                // Canceling from the timer Thread guarantees last execution,\n+                // so no need to check for duplicate error\n+                error.set(e);\n+                timer.cancel();\n+            }\n+        }\n+\n+    }\n+\n+    static final String QUOTA_PATH_KEY = \"es.fs.quota.file\";\n+\n+    private final FileSystemProvider delegate;\n+    private final Path configPath;\n+\n+    private volatile long total = Long.MAX_VALUE;\n+    private volatile long remaining = Long.MAX_VALUE;\n+\n+    private final Timer timer;\n+\n+    private final ConcurrentHashMap<FileSystem, QuotaAwareFileSystem> systemsCache = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<FileStore, QuotaAwareFileStore> storesCache = new ConcurrentHashMap<>();\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final AtomicReference<Throwable> error = new AtomicReference<>();\n+\n+    private static final AtomicInteger NEXT_SERIAL = new AtomicInteger(0);\n+    private final String timerThreadName = \"QuotaAwareFSTimer-\" + NEXT_SERIAL.getAndIncrement();\n+    private final Thread timerThread;\n+\n+    public QuotaAwareFileSystemProvider(FileSystemProvider delegate) throws Exception {\n+        this(delegate, URI.create(getUri()));\n+    }\n+\n+    private static String getUri() {\n+        final String property = System.getProperty(QUOTA_PATH_KEY);\n+        if (property == null) {\n+            throw new IllegalArgumentException(\n+                \"Property \"\n+                    + QUOTA_PATH_KEY\n+                    + \" must be set to a URI in order to use the quota filesystem provider, e.g. using -D\"\n+                    + QUOTA_PATH_KEY\n+                    + \"=file://path/to/fsquota.properties\"\n+            );\n+        }\n+\n+        return property;\n+    }\n+\n+    public QuotaAwareFileSystemProvider(FileSystemProvider delegate, URI config) throws Exception {\n+        if (delegate instanceof QuotaAwareFileSystemProvider) {\n+            throw new IllegalArgumentException(\"Delegate provider cannot be an instance of QuotaAwareFileSystemProvider\");\n+        }\n+        this.delegate = delegate;\n+        configPath = delegate.getPath(config);\n+        refreshLimits(); // Ensures that a parseable file exists before\n+                         // timer is created\n+        timer = new Timer(timerThreadName, true);\n+        try {\n+            timerThread = getThreadFromTimer(timer).get();\n+            timer.schedule(new RefreshLimitsTask(), CHECK_PERIOD, CHECK_PERIOD);\n+        } catch (Exception e1) {\n+            if (e1 instanceof InterruptedException) {\n+                Thread.currentThread().interrupt(); // Restore interrupted flag\n+            }\n+            try {\n+                // Avoid thread leak if this failed to start\n+                timer.cancel();\n+            } catch (Exception e2) {\n+                e1.addSuppressed(e2);\n+            }\n+            throw e1;\n+        }\n+    }\n+\n+    /**\n+     * Extracts the {@link Thread} used by a {@link Timer}.\n+     *\n+     * Ideally {@link Timer} would provide necessary health checks or error\n+     * handling support that this would not be required.\n+     *\n+     * @param timer\n+     *            The {@link Timer} instance to extract thread from\n+     * @return the Thread used by the given timer\n+     * @throws IllegalStateException\n+     *             if Timer is cancelled.\n+     */\n+    private static Future<Thread> getThreadFromTimer(Timer timer) {\n+        FutureTask<Thread> timerThreadFuture = new FutureTask<>(() -> Thread.currentThread());\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                timerThreadFuture.run();\n+            }\n+        }, 0);\n+        return timerThreadFuture;\n+    }\n+\n+    /**\n+     * Performs a single attempt at reading the required files.\n+     *\n+     * @throws PrivilegedActionException if something goes wrong\n+     * @throws IOException if something goes wrong\n+     *\n+     * @throws IllegalStateException\n+     *             if security manager denies reading the property file\n+     * @throws IllegalStateException\n+     *             if the property file cannot be parsed\n+     */\n+    private void refreshLimits() throws IOException, PrivilegedActionException {\n+        try (InputStream newInputStream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() {\n+            @Override\n+            public InputStream run() throws Exception {\n+                return delegate.newInputStream(configPath, StandardOpenOption.READ);\n+            }\n+        })) {\n+            Properties properties = new Properties();\n+            properties.load(newInputStream);\n+            total = Long.parseLong(properties.getProperty(\"total\"));\n+            remaining = Long.parseLong(properties.getProperty(\"remaining\"));\n+        }\n+    }\n+\n+    @Override\n+    public String getScheme() {\n+        return \"file\";\n+    }\n+\n+    @Override\n+    public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {\n+        // Delegate handles throwing exception if filesystem already exists\n+        return getFS(delegate.newFileSystem(uri, env));\n+\n+    }\n+\n+    private QuotaAwareFileSystem getFS(FileSystem fileSystem) {\n+        return systemsCache.computeIfAbsent(fileSystem, (delegate) -> new QuotaAwareFileSystem(this, delegate));\n+    }\n+\n+    @Override\n+    public FileSystem getFileSystem(URI uri) {\n+        // Delegate handles throwing exception if filesystem doesn't exist, but\n+        // delegate may also have precreated filesystems, like the default file\n+        // system.\n+        return getFS(delegate.getFileSystem(uri));\n+    }\n+\n+    @Override\n+    public Path getPath(URI uri) {\n+        return ensureWrapped(delegate.getPath(uri));\n+    }\n+\n+    private Path ensureWrapped(Path path) {\n+        if (path instanceof QuotaAwarePath) {\n+            assert path.getFileSystem().provider() == this;\n+            // Delegate may use this instance to create the path when this\n+            // instance is installed as the default provider.\n+            // This is safe because nested QuotaAwareProviders are prohibited,\n+            // otherwise this would require unwrapping.\n+            return path;\n+        } else {\n+            return new QuotaAwarePath(getFS(path.getFileSystem()), path);\n+        }\n+    }\n+\n+    @Override\n+    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n+        return delegate.newByteChannel(QuotaAwarePath.unwrap(path), options, attrs);\n+    }\n+\n+    @Override\n+    public DirectoryStream<Path> newDirectoryStream(Path dir, Filter<? super Path> filter) throws IOException {\n+        return new DirectoryStream<Path>() {\n+            DirectoryStream<Path> stream = delegate.newDirectoryStream(QuotaAwarePath.unwrap(dir), filter);\n+\n+            @Override\n+            public void close() throws IOException {\n+                stream.close();\n+            }\n+\n+            @Override\n+            public Iterator<Path> iterator() {\n+                return StreamSupport.stream(stream.spliterator(), false).map(QuotaAwareFileSystemProvider.this::ensureWrapped).iterator();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {\n+        delegate.createDirectory(QuotaAwarePath.unwrap(dir), attrs);\n+    }\n+\n+    @Override\n+    public void delete(Path path) throws IOException {\n+        delegate.delete(QuotaAwarePath.unwrap(path));\n+    }\n+\n+    @Override\n+    public void copy(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.copy(QuotaAwarePath.unwrap(source), QuotaAwarePath.unwrap(target), options);\n+    }\n+\n+    @Override\n+    public void move(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.move(QuotaAwarePath.unwrap(source), QuotaAwarePath.unwrap(target), options);\n+    }\n+\n+    @Override\n+    public boolean isSameFile(Path path, Path path2) throws IOException {\n+        return delegate.isSameFile(QuotaAwarePath.unwrap(path), QuotaAwarePath.unwrap(path2));\n+    }\n+\n+    @Override\n+    public boolean isHidden(Path path) throws IOException {\n+        return delegate.isHidden(QuotaAwarePath.unwrap(path));\n+    }\n+\n+    @Override\n+    public QuotaAwareFileStore getFileStore(Path path) throws IOException {\n+        return getFileStore(delegate.getFileStore(QuotaAwarePath.unwrap(path)));\n+    }\n+\n+    QuotaAwareFileStore getFileStore(FileStore store) {\n+        return storesCache.computeIfAbsent(store, (fs) -> new QuotaAwareFileStore(QuotaAwareFileSystemProvider.this, fs));\n+    }\n+\n+    @Override\n+    public void checkAccess(Path path, AccessMode... modes) throws IOException {\n+        delegate.checkAccess(QuotaAwarePath.unwrap(path), modes);\n+    }\n+\n+    @Override\n+    public <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n+        return delegate.getFileAttributeView(QuotaAwarePath.unwrap(path), type, options);\n+    }\n+\n+    @Override\n+    public <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException {\n+        try {\n+            return delegate.readAttributes(QuotaAwarePath.unwrap(path), type, options);\n+        } catch (ProviderMismatchException e) {\n+            throw new IllegalArgumentException(\"Failed to read attributes for path: [\" + path + \"]\", e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException {\n+        return delegate.readAttributes(QuotaAwarePath.unwrap(path), attributes, options);\n+    }\n+\n+    @Override\n+    public void setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException {\n+        delegate.setAttribute(QuotaAwarePath.unwrap(path), attribute, value, options);\n+    }\n+\n+    long getTotal() {\n+        ensureHealth();\n+        return total;\n+    }\n+\n+    void ensureHealth() throws AssertionError {\n+        boolean timerIsAlive = timerThread.isAlive();\n+        Throwable cause = error.get();\n+        if (cause != null || !timerIsAlive) {\n+            throw new AssertionError(\"The quota aware filesystem has failed\", cause);\n+        }\n+    }\n+\n+    long getRemaining() {\n+        ensureHealth();\n+        return remaining;\n+    }\n+\n+    @Override\n+    public FileChannel newFileChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n+        return delegate.newFileChannel(QuotaAwarePath.unwrap(path), options, attrs);\n+    }\n+\n+    @Override\n+    public AsynchronousFileChannel newAsynchronousFileChannel(\n+        Path path,\n+        Set<? extends OpenOption> options,\n+        ExecutorService executor,\n+        FileAttribute<?>... attrs\n+    ) throws IOException {\n+        return delegate.newAsynchronousFileChannel(QuotaAwarePath.unwrap(path), options, executor, attrs);\n+    }\n+\n+    /**\n+     * Normally only used in testing. Avoids thread leak when life cycle of this\n+     * object doesn't follow that of the JVM.\n+     *\n+     * @throws IOException if something goes wrong\n+     */\n+    @Override\n+    public void close() throws IOException {\n+        if (closed.compareAndSet(false, true)) {\n+            timer.cancel();\n+\n+            // If there was a currently executing task wait for it, to\n+            // avoid false positives on file handle leak.\n+            try {\n+                timerThread.join();\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt(); // Restore interrupted flag\n+            }\n+\n+            try {\n+                // Inlined org.apache.lucene.util.IOUtils.close(...) to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd721d3eb73241e8587129e891c615007c909ece"}, "originalPosition": 414}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY1MTY2MQ==", "bodyText": "Ah, I meant to do that, thanks Konrad.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r507651661", "createdAt": "2020-10-19T10:50:08Z", "author": {"login": "pugnascotia"}, "path": "plugins/quota-aware-fs/src/main/java/org/elasticsearch/fs/quotaaware/QuotaAwareFileSystemProvider.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fs.quotaaware;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.channels.AsynchronousFileChannel;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.AccessMode;\n+import java.nio.file.CopyOption;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.FileStore;\n+import java.nio.file.FileSystem;\n+import java.nio.file.LinkOption;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+import java.nio.file.ProviderMismatchException;\n+import java.nio.file.StandardOpenOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * QuotaAwareFileSystemProvider is intended to be used as a wrapper around the\n+ * default file system provider of the JVM.\n+ *\n+ * It augments the default file system by allowing to report total size and\n+ * remaining capacity according to some externally defined quota that is not\n+ * readily available to the JVM. Essentially it is a workaround for containers\n+ * that see the size of the host volume and not the effective quota available to\n+ * them. It will however never report larger capacity than what the underlying\n+ * file system sees.\n+ *\n+ * In application usage:\n+ * <ol>\n+ * <li>Include this project in the class path</li>\n+ * <li>Specify this argument at JVM boot:\n+ * <code>-Djava.nio.file.spi.DefaultFileSystemProvider=co.elastic.cloud.quotaawarefs.QuotaAwareFileSystemProvider</code>\n+ * </li>\n+ * <li>Have some external system check the quota usage and\n+ * write it to the path specified by the system property {@value #QUOTA_PATH_KEY}.</li>\n+ * </ol>\n+ *\n+ * In any case the quota file must be a {@link Properties} file with the\n+ * properties <code>total</code> and <code>remaining</code>. Both properties are\n+ * {@link Long} values, parsed according to {@link Long#parseLong(String)} and\n+ * assumed to be in bytes.\n+ *\n+ * Sample format:\n+ *\n+ * <pre>\n+ * {@code\n+ * total=5000\n+ * remaining=200\n+ * }\n+ * </pre>\n+ */\n+public class QuotaAwareFileSystemProvider extends FileSystemProvider implements AutoCloseable {\n+\n+    private static final int CHECK_PERIOD = 1000;\n+\n+    private final class RefreshLimitsTask extends TimerTask {\n+        @Override\n+        public void run() {\n+            try {\n+                assert timerThread == Thread.currentThread() : \"QuotaAwareFileSystemProvider doesn't support multithreaded timer.\";\n+                refreshLimits();\n+            } catch (Exception e) {\n+                // Canceling from the timer Thread guarantees last execution,\n+                // so no need to check for duplicate error\n+                error.set(e);\n+                timer.cancel();\n+            }\n+        }\n+\n+    }\n+\n+    static final String QUOTA_PATH_KEY = \"es.fs.quota.file\";\n+\n+    private final FileSystemProvider delegate;\n+    private final Path configPath;\n+\n+    private volatile long total = Long.MAX_VALUE;\n+    private volatile long remaining = Long.MAX_VALUE;\n+\n+    private final Timer timer;\n+\n+    private final ConcurrentHashMap<FileSystem, QuotaAwareFileSystem> systemsCache = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<FileStore, QuotaAwareFileStore> storesCache = new ConcurrentHashMap<>();\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final AtomicReference<Throwable> error = new AtomicReference<>();\n+\n+    private static final AtomicInteger NEXT_SERIAL = new AtomicInteger(0);\n+    private final String timerThreadName = \"QuotaAwareFSTimer-\" + NEXT_SERIAL.getAndIncrement();\n+    private final Thread timerThread;\n+\n+    public QuotaAwareFileSystemProvider(FileSystemProvider delegate) throws Exception {\n+        this(delegate, URI.create(getUri()));\n+    }\n+\n+    private static String getUri() {\n+        final String property = System.getProperty(QUOTA_PATH_KEY);\n+        if (property == null) {\n+            throw new IllegalArgumentException(\n+                \"Property \"\n+                    + QUOTA_PATH_KEY\n+                    + \" must be set to a URI in order to use the quota filesystem provider, e.g. using -D\"\n+                    + QUOTA_PATH_KEY\n+                    + \"=file://path/to/fsquota.properties\"\n+            );\n+        }\n+\n+        return property;\n+    }\n+\n+    public QuotaAwareFileSystemProvider(FileSystemProvider delegate, URI config) throws Exception {\n+        if (delegate instanceof QuotaAwareFileSystemProvider) {\n+            throw new IllegalArgumentException(\"Delegate provider cannot be an instance of QuotaAwareFileSystemProvider\");\n+        }\n+        this.delegate = delegate;\n+        configPath = delegate.getPath(config);\n+        refreshLimits(); // Ensures that a parseable file exists before\n+                         // timer is created\n+        timer = new Timer(timerThreadName, true);\n+        try {\n+            timerThread = getThreadFromTimer(timer).get();\n+            timer.schedule(new RefreshLimitsTask(), CHECK_PERIOD, CHECK_PERIOD);\n+        } catch (Exception e1) {\n+            if (e1 instanceof InterruptedException) {\n+                Thread.currentThread().interrupt(); // Restore interrupted flag\n+            }\n+            try {\n+                // Avoid thread leak if this failed to start\n+                timer.cancel();\n+            } catch (Exception e2) {\n+                e1.addSuppressed(e2);\n+            }\n+            throw e1;\n+        }\n+    }\n+\n+    /**\n+     * Extracts the {@link Thread} used by a {@link Timer}.\n+     *\n+     * Ideally {@link Timer} would provide necessary health checks or error\n+     * handling support that this would not be required.\n+     *\n+     * @param timer\n+     *            The {@link Timer} instance to extract thread from\n+     * @return the Thread used by the given timer\n+     * @throws IllegalStateException\n+     *             if Timer is cancelled.\n+     */\n+    private static Future<Thread> getThreadFromTimer(Timer timer) {\n+        FutureTask<Thread> timerThreadFuture = new FutureTask<>(() -> Thread.currentThread());\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                timerThreadFuture.run();\n+            }\n+        }, 0);\n+        return timerThreadFuture;\n+    }\n+\n+    /**\n+     * Performs a single attempt at reading the required files.\n+     *\n+     * @throws PrivilegedActionException if something goes wrong\n+     * @throws IOException if something goes wrong\n+     *\n+     * @throws IllegalStateException\n+     *             if security manager denies reading the property file\n+     * @throws IllegalStateException\n+     *             if the property file cannot be parsed\n+     */\n+    private void refreshLimits() throws IOException, PrivilegedActionException {\n+        try (InputStream newInputStream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() {\n+            @Override\n+            public InputStream run() throws Exception {\n+                return delegate.newInputStream(configPath, StandardOpenOption.READ);\n+            }\n+        })) {\n+            Properties properties = new Properties();\n+            properties.load(newInputStream);\n+            total = Long.parseLong(properties.getProperty(\"total\"));\n+            remaining = Long.parseLong(properties.getProperty(\"remaining\"));\n+        }\n+    }\n+\n+    @Override\n+    public String getScheme() {\n+        return \"file\";\n+    }\n+\n+    @Override\n+    public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {\n+        // Delegate handles throwing exception if filesystem already exists\n+        return getFS(delegate.newFileSystem(uri, env));\n+\n+    }\n+\n+    private QuotaAwareFileSystem getFS(FileSystem fileSystem) {\n+        return systemsCache.computeIfAbsent(fileSystem, (delegate) -> new QuotaAwareFileSystem(this, delegate));\n+    }\n+\n+    @Override\n+    public FileSystem getFileSystem(URI uri) {\n+        // Delegate handles throwing exception if filesystem doesn't exist, but\n+        // delegate may also have precreated filesystems, like the default file\n+        // system.\n+        return getFS(delegate.getFileSystem(uri));\n+    }\n+\n+    @Override\n+    public Path getPath(URI uri) {\n+        return ensureWrapped(delegate.getPath(uri));\n+    }\n+\n+    private Path ensureWrapped(Path path) {\n+        if (path instanceof QuotaAwarePath) {\n+            assert path.getFileSystem().provider() == this;\n+            // Delegate may use this instance to create the path when this\n+            // instance is installed as the default provider.\n+            // This is safe because nested QuotaAwareProviders are prohibited,\n+            // otherwise this would require unwrapping.\n+            return path;\n+        } else {\n+            return new QuotaAwarePath(getFS(path.getFileSystem()), path);\n+        }\n+    }\n+\n+    @Override\n+    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n+        return delegate.newByteChannel(QuotaAwarePath.unwrap(path), options, attrs);\n+    }\n+\n+    @Override\n+    public DirectoryStream<Path> newDirectoryStream(Path dir, Filter<? super Path> filter) throws IOException {\n+        return new DirectoryStream<Path>() {\n+            DirectoryStream<Path> stream = delegate.newDirectoryStream(QuotaAwarePath.unwrap(dir), filter);\n+\n+            @Override\n+            public void close() throws IOException {\n+                stream.close();\n+            }\n+\n+            @Override\n+            public Iterator<Path> iterator() {\n+                return StreamSupport.stream(stream.spliterator(), false).map(QuotaAwareFileSystemProvider.this::ensureWrapped).iterator();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {\n+        delegate.createDirectory(QuotaAwarePath.unwrap(dir), attrs);\n+    }\n+\n+    @Override\n+    public void delete(Path path) throws IOException {\n+        delegate.delete(QuotaAwarePath.unwrap(path));\n+    }\n+\n+    @Override\n+    public void copy(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.copy(QuotaAwarePath.unwrap(source), QuotaAwarePath.unwrap(target), options);\n+    }\n+\n+    @Override\n+    public void move(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.move(QuotaAwarePath.unwrap(source), QuotaAwarePath.unwrap(target), options);\n+    }\n+\n+    @Override\n+    public boolean isSameFile(Path path, Path path2) throws IOException {\n+        return delegate.isSameFile(QuotaAwarePath.unwrap(path), QuotaAwarePath.unwrap(path2));\n+    }\n+\n+    @Override\n+    public boolean isHidden(Path path) throws IOException {\n+        return delegate.isHidden(QuotaAwarePath.unwrap(path));\n+    }\n+\n+    @Override\n+    public QuotaAwareFileStore getFileStore(Path path) throws IOException {\n+        return getFileStore(delegate.getFileStore(QuotaAwarePath.unwrap(path)));\n+    }\n+\n+    QuotaAwareFileStore getFileStore(FileStore store) {\n+        return storesCache.computeIfAbsent(store, (fs) -> new QuotaAwareFileStore(QuotaAwareFileSystemProvider.this, fs));\n+    }\n+\n+    @Override\n+    public void checkAccess(Path path, AccessMode... modes) throws IOException {\n+        delegate.checkAccess(QuotaAwarePath.unwrap(path), modes);\n+    }\n+\n+    @Override\n+    public <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n+        return delegate.getFileAttributeView(QuotaAwarePath.unwrap(path), type, options);\n+    }\n+\n+    @Override\n+    public <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException {\n+        try {\n+            return delegate.readAttributes(QuotaAwarePath.unwrap(path), type, options);\n+        } catch (ProviderMismatchException e) {\n+            throw new IllegalArgumentException(\"Failed to read attributes for path: [\" + path + \"]\", e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException {\n+        return delegate.readAttributes(QuotaAwarePath.unwrap(path), attributes, options);\n+    }\n+\n+    @Override\n+    public void setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException {\n+        delegate.setAttribute(QuotaAwarePath.unwrap(path), attribute, value, options);\n+    }\n+\n+    long getTotal() {\n+        ensureHealth();\n+        return total;\n+    }\n+\n+    void ensureHealth() throws AssertionError {\n+        boolean timerIsAlive = timerThread.isAlive();\n+        Throwable cause = error.get();\n+        if (cause != null || !timerIsAlive) {\n+            throw new AssertionError(\"The quota aware filesystem has failed\", cause);\n+        }\n+    }\n+\n+    long getRemaining() {\n+        ensureHealth();\n+        return remaining;\n+    }\n+\n+    @Override\n+    public FileChannel newFileChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n+        return delegate.newFileChannel(QuotaAwarePath.unwrap(path), options, attrs);\n+    }\n+\n+    @Override\n+    public AsynchronousFileChannel newAsynchronousFileChannel(\n+        Path path,\n+        Set<? extends OpenOption> options,\n+        ExecutorService executor,\n+        FileAttribute<?>... attrs\n+    ) throws IOException {\n+        return delegate.newAsynchronousFileChannel(QuotaAwarePath.unwrap(path), options, executor, attrs);\n+    }\n+\n+    /**\n+     * Normally only used in testing. Avoids thread leak when life cycle of this\n+     * object doesn't follow that of the JVM.\n+     *\n+     * @throws IOException if something goes wrong\n+     */\n+    @Override\n+    public void close() throws IOException {\n+        if (closed.compareAndSet(false, true)) {\n+            timer.cancel();\n+\n+            // If there was a currently executing task wait for it, to\n+            // avoid false positives on file handle leak.\n+            try {\n+                timerThread.join();\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt(); // Restore interrupted flag\n+            }\n+\n+            try {\n+                // Inlined org.apache.lucene.util.IOUtils.close(...) to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDIxNQ=="}, "originalCommit": {"oid": "dd721d3eb73241e8587129e891c615007c909ece"}, "originalPosition": 414}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQzODM0OnYy", "diffSide": "RIGHT", "path": "docs/plugins/quota-aware-fs.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1Mzo0NFrOHltnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1Mzo0NFrOHltnxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjgyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            by supplying the `es.fs.quota.file` <<jvm-options,JVM system property>> on startup. This\n          \n          \n            \n            by supplying the `es.fs.quota.file` {ref}/jvm-options.html[JVM system property] on startup. This", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r509306823", "createdAt": "2020-10-21T13:53:44Z", "author": {"login": "jrodewig"}, "path": "docs/plugins/quota-aware-fs.asciidoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[[quota-aware-fs]]\n+=== Quota-aware Filesystem Plugin\n+\n+The Quota-aware Filesystem plugin adds an interface for telling\n+Elasticsearch the disk-quota limits under which it is operating.\n+\n+:plugin_name: quota-aware-fs\n+include::install_remove.asciidoc[]\n+\n+[[quota-aware-fs-usage]]\n+==== Passing disk quota information to Elasticsearch\n+\n+{es} considers the available disk space on a node before deciding whether\n+to allocate new shards to that node or to actively relocate shards away from that node.\n+However, while the JVM has support for reporting a filesystem's total space and available\n+space, it has no knowledge of any quota limits imposed on the user under which {es} is\n+running. Consequently, the {es} mechanisms for handling low disk space situations cannot\n+function. To work around this situation, this plugin provides a mechanism for supplying quota-ware\n+total and available amounts of disk space.\n+\n+To use the plugin, install it on all nodes and restart them. You must configure the plugin\n+by supplying the `es.fs.quota.file` <<jvm-options,JVM system property>> on startup. This", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abbdbb1d3de3330f9681d5d532e5a36be37ebaed"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzMxODcxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/plugin/PluginType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTo1MjoyMlrOHmxbTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDowNTo0MlrOHoIgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxNzc0Mg==", "bodyText": "docs please", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r510417742", "createdAt": "2020-10-22T19:52:22Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/plugin/PluginType.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.plugin;\n+\n+/* Mirrors org.elasticsearch.plugins.PluginType */\n+\n+import java.util.Locale;\n+\n+public enum PluginType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NDQyMw==", "bodyText": "Docs added.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r511844423", "createdAt": "2020-10-26T10:05:42Z", "author": {"login": "pugnascotia"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/plugin/PluginType.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.plugin;\n+\n+/* Mirrors org.elasticsearch.plugins.PluginType */\n+\n+import java.util.Locale;\n+\n+public enum PluginType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxNzc0Mg=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM1NTUxOnYy", "diffSide": "RIGHT", "path": "plugins/quota-aware-fs/src/main/java/org/elasticsearch/fs/quotaaware/QuotaAwareFsPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDowMjo0NlrOHmxxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDowNTo1NlrOHoIg0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMzQ0Ng==", "bodyText": "This class shouldn't be necessary anymore?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r510423446", "createdAt": "2020-10-22T20:02:46Z", "author": {"login": "rjernst"}, "path": "plugins/quota-aware-fs/src/main/java/org/elasticsearch/fs/quotaaware/QuotaAwareFsPlugin.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fs.quotaaware;\n+\n+import org.elasticsearch.plugins.Plugin;\n+\n+/**\n+ * This plugin adds support for passing information to Elasticsearch about\n+ * filesystem quotas, so that any mechanisms that need to know about free /\n+ * used space can perform accurate calculation with respect to the disk\n+ * space that is actually available to Elasticsearch.\n+ */\n+public class QuotaAwareFsPlugin extends Plugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NDU2MA==", "bodyText": "Good spot, I've removed it.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r511844560", "createdAt": "2020-10-26T10:05:56Z", "author": {"login": "pugnascotia"}, "path": "plugins/quota-aware-fs/src/main/java/org/elasticsearch/fs/quotaaware/QuotaAwareFsPlugin.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fs.quotaaware;\n+\n+import org.elasticsearch.plugins.Plugin;\n+\n+/**\n+ * This plugin adds support for passing information to Elasticsearch about\n+ * filesystem quotas, so that any mechanisms that need to know about free /\n+ * used space can perform accurate calculation with respect to the disk\n+ * space that is actually available to Elasticsearch.\n+ */\n+public class QuotaAwareFsPlugin extends Plugin {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMzQ0Ng=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM1ODI0OnYy", "diffSide": "RIGHT", "path": "plugins/quota-aware-fs/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDowMzozNVrOHmxzNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjowNTo1NlrOHpSxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMzg2Mg==", "bodyText": "This shouldn't be necessary for bootstrap plugins, we should change the validation to only require it for isolated plugins.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r510423862", "createdAt": "2020-10-22T20:03:35Z", "author": {"login": "rjernst"}, "path": "plugins/quota-aware-fs/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+esplugin {\n+  description 'A bootstrap plugin that adds support for interfacing with filesystem that enforce user quotas.'\n+  classname 'org.elasticsearch.fs.quotaaware.QuoteAwareFsPlugin'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NjcxNA==", "bodyText": "I've changed the validation and removed this line. I initially retained an empty classname in the properties file as it felt more consistent, but then realised that it would be more consistent to omit it since we omit javaOpts for bootstrap plugins. I'm partly being thrown off by all the \"example plugin\" preamble at the top of the file. Do we really want that there? We could use JSP comments to remove it from the build output?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r511846714", "createdAt": "2020-10-26T10:09:33Z", "author": {"login": "pugnascotia"}, "path": "plugins/quota-aware-fs/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+esplugin {\n+  description 'A bootstrap plugin that adds support for interfacing with filesystem that enforce user quotas.'\n+  classname 'org.elasticsearch.fs.quotaaware.QuoteAwareFsPlugin'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMzg2Mg=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2MTI4OA==", "bodyText": "At one point the template file was also referenced from our docs as an example for plugin authors who built the plugin properties on their own. I don't have any preference on how it is done, but we should definitely continue to have such an example.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r513061288", "createdAt": "2020-10-27T22:05:56Z", "author": {"login": "rjernst"}, "path": "plugins/quota-aware-fs/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+esplugin {\n+  description 'A bootstrap plugin that adds support for interfacing with filesystem that enforce user quotas.'\n+  classname 'org.elasticsearch.fs.quotaaware.QuoteAwareFsPlugin'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMzg2Mg=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM2ODQ5OnYy", "diffSide": "RIGHT", "path": "qa/smoke-test-plugins/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDowNjozMFrOHmx5Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDowNjozMFrOHmx5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNTQwNw==", "bodyText": "We should just be skipping all bootstrap plugins rather than hardcoding quota-aware-fs?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r510425407", "createdAt": "2020-10-22T20:06:30Z", "author": {"login": "rjernst"}, "path": "qa/smoke-test-plugins/build.gradle", "diffHunk": "@@ -33,6 +33,10 @@ testClusters.integTest {\n       // Do not attempt to install ingest-attachment in FIPS 140 as it is not supported (it depends on non-FIPS BouncyCastle)\n       return\n     }\n+    if (pluginName == 'quota-aware-fs') {\n+      // This plugin has to be configured to work via system properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM3MDcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDowNzoxNFrOHmx6qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTozNDozNFrOHplxpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNTc2OA==", "bodyText": "This should be 7.11?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r510425768", "createdAt": "2020-10-22T20:07:14Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -49,6 +50,8 @@\n     public static final String ES_PLUGIN_PROPERTIES = \"plugin-descriptor.properties\";\n     public static final String ES_PLUGIN_POLICY = \"plugin-security.policy\";\n \n+    private static final Version QUOTA_FS_PLUGIN_SUPPORT = Version.CURRENT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NzA4Mw==", "bodyText": "I can't do that until the changes are backported - I learnt that the hard way on another branch.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r511847083", "createdAt": "2020-10-26T10:10:08Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -49,6 +50,8 @@\n     public static final String ES_PLUGIN_PROPERTIES = \"plugin-descriptor.properties\";\n     public static final String ES_PLUGIN_POLICY = \"plugin-security.policy\";\n \n+    private static final Version QUOTA_FS_PLUGIN_SUPPORT = Version.CURRENT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNTc2OA=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1OTk2NA==", "bodyText": "This can be done. There are 2 ways to handle the backports. One is to put CURRENT in master, change it on the backport, then go back to master and change all the occurrences. The other is to put the intended version in master and disable bwc tests (there is a global flag in the root build.gradle), backport, then re-enable bwc tests in master after the backport is complete. The latter has the advantages that the backport can be tested locally before committing to master, as well as only a single place to change (the bwc flag) on followup, instead of potentially multiple versioned conditional statements.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r513059964", "createdAt": "2020-10-27T22:02:56Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -49,6 +50,8 @@\n     public static final String ES_PLUGIN_PROPERTIES = \"plugin-descriptor.properties\";\n     public static final String ES_PLUGIN_POLICY = \"plugin-security.policy\";\n \n+    private static final Version QUOTA_FS_PLUGIN_SUPPORT = Version.CURRENT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNTc2OA=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MjU4MA==", "bodyText": "I believe this is the only place that I reference a version. I'll go for the former route I think.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r513372580", "createdAt": "2020-10-28T11:34:34Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/plugins/PluginInfo.java", "diffHunk": "@@ -49,6 +50,8 @@\n     public static final String ES_PLUGIN_PROPERTIES = \"plugin-descriptor.properties\";\n     public static final String ES_PLUGIN_POLICY = \"plugin-security.policy\";\n \n+    private static final Version QUOTA_FS_PLUGIN_SUPPORT = Version.CURRENT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNTc2OA=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM4MTc0OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/smoke-test-plugins/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxMDoxMlrOHmyBLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDozNzowNlrOHoJppQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNzQzNw==", "bodyText": "Same comment as before. Anywhere we are iterating over plugins like this it should be for isolated plugins? All bootstrap plugins will require packaging tests.", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r510427437", "createdAt": "2020-10-22T20:10:12Z", "author": {"login": "rjernst"}, "path": "x-pack/qa/smoke-test-plugins/build.gradle", "diffHunk": "@@ -21,6 +21,10 @@ testClusters.integTest {\n       // Do not attempt to install ingest-attachment in FIPS 140 as it is not supported (it depends on non-FIPS BouncyCastle)\n       return\n     }\n+    if (pluginName == 'quota-aware-fs') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MzIwNQ==", "bodyText": "I talked with Rene about this, but it turned out not to be trivial. Maybe we can revisit this if/when we add another bootstrap plugin?", "url": "https://github.com/elastic/elasticsearch/pull/63620#discussion_r511863205", "createdAt": "2020-10-26T10:37:06Z", "author": {"login": "pugnascotia"}, "path": "x-pack/qa/smoke-test-plugins/build.gradle", "diffHunk": "@@ -21,6 +21,10 @@ testClusters.integTest {\n       // Do not attempt to install ingest-attachment in FIPS 140 as it is not supported (it depends on non-FIPS BouncyCastle)\n       return\n     }\n+    if (pluginName == 'quota-aware-fs') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNzQzNw=="}, "originalCommit": {"oid": "ef86e4a113f983736df712c5735963b5175bcd79"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2979, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}