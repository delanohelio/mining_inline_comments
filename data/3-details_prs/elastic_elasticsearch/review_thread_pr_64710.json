{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzUyNTIx", "number": 64710, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzo0ODoxN1rOE2F77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyODozNFrOFB1lQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTU1ODIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/action/PromoteDataStreamTransportAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzo0ODoxN1rOHuusww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzo0ODoxN1rOHuusww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2MTY2Nw==", "bodyText": "Should we embed this in the unfollow api? I'm not sure, because that api is centered around unfollowing a regular index and this operation is different and that would add ambiguity to the unfollow api. However the argument can also be made in reverse, in that this is a related operation.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r518761667", "createdAt": "2020-11-06T13:48:17Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/action/PromoteDataStreamTransportAction.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.datastreams.action;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedTransportMasterNodeAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.action.PromoteDataStreamAction;\n+\n+public class PromoteDataStreamTransportAction extends AcknowledgedTransportMasterNodeAction<PromoteDataStreamAction.Request> {\n+\n+    @Inject\n+    public PromoteDataStreamTransportAction(\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ThreadPool threadPool,\n+        ActionFilters actionFilters,\n+        IndexNameExpressionResolver indexNameExpressionResolver\n+    ) {\n+        super(\n+            PromoteDataStreamAction.NAME,\n+            transportService,\n+            clusterService,\n+            threadPool,\n+            actionFilters,\n+            PromoteDataStreamAction.Request::new,\n+            indexNameExpressionResolver,\n+            ThreadPool.Names.SAME\n+        );\n+    }\n+\n+    @Override\n+    protected void masterOperation(\n+        Task task,\n+        PromoteDataStreamAction.Request request,\n+        ClusterState state,\n+        ActionListener<AcknowledgedResponse> listener\n+    ) throws Exception {\n+        clusterService.submitStateUpdateTask(\n+            \"promote-data-stream [\" + request.getName() + \"]\",\n+            new ClusterStateUpdateTask(Priority.HIGH, request.masterNodeTimeout()) {\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    return promoteDataStream(currentState, request);\n+                }\n+\n+                @Override\n+                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                    listener.onResponse(AcknowledgedResponse.TRUE);\n+                }\n+            }\n+        );\n+    }\n+\n+    static ClusterState promoteDataStream(ClusterState currentState, PromoteDataStreamAction.Request request) {\n+        DataStream dataStream = currentState.getMetadata().dataStreams().get(request.getName());\n+        if (dataStream == null) {\n+            throw new ResourceNotFoundException(\"data stream [\" + request.getName() + \"] does not exist\");\n+        }\n+\n+        DataStream promotedDataStream = dataStream.promoteDataStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10d7ffcb67bde9df9284f81962919f9b82e35372"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzM2NjcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo1Njo0NlrOH5XCdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNzoyNVrOH5sz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwODM0Mg==", "bodyText": "Should we have a separate method that ensures this datastream can be rolled over instead?", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r529908342", "createdAt": "2020-11-24T21:56:46Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverService.java", "diffHunk": "@@ -148,6 +149,7 @@ private RolloverResult rolloverDataStream(ClusterState currentState, IndexAbstra\n         final DataStream ds = dataStream.getDataStream();\n         final IndexMetadata originalWriteIndex = dataStream.getWriteIndex();\n         final String newWriteIndexName = DataStream.getDefaultBackingIndexName(ds.getName(), ds.getGeneration() + 1);\n+        ds.rollover(new Index(newWriteIndexName, \"uuid\")); // just for validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a21454e2ef70c5437ae2a10d81570a7abfb72592"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2NTA2Ng==", "bodyText": "I think that this is what happens in this rolloverDataStream(...) method. Anything before the if statement is for validating purposes and after the if statement is for actually performing the rollover (the DataStream#rollover(...) method is then also invoked). I just added the DataStream#rollover(...) invocation here, so that validation that is in this method is also performed when just validating the rollover.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r530265066", "createdAt": "2020-11-25T10:27:25Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverService.java", "diffHunk": "@@ -148,6 +149,7 @@ private RolloverResult rolloverDataStream(ClusterState currentState, IndexAbstra\n         final DataStream ds = dataStream.getDataStream();\n         final IndexMetadata originalWriteIndex = dataStream.getWriteIndex();\n         final String newWriteIndexName = DataStream.getDefaultBackingIndexName(ds.getName(), ds.getGeneration() + 1);\n+        ds.rollover(new Index(newWriteIndexName, \"uuid\")); // just for validation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwODM0Mg=="}, "originalCommit": {"oid": "a21454e2ef70c5437ae2a10d81570a7abfb72592"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzM3ODg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo1ODo0NFrOH5XKeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozMTo0M1rOH5s-0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxMDM5NA==", "bodyText": "Should we name this \"allowRollover\" or \"followed\"? I am okay with \"replicated\" if you prefer.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r529910394", "createdAt": "2020-11-24T21:58:44Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -44,26 +44,29 @@\n \n     public static final String BACKING_INDEX_PREFIX = \".ds-\";\n     public static final Version HIDDEN_VERSION = Version.V_7_11_0;\n+    public static final Version REPLICATED_VERSION = Version.V_8_0_0;\n \n     private final String name;\n     private final TimestampField timeStampField;\n     private final List<Index> indices;\n     private final long generation;\n     private final Map<String, Object> metadata;\n     private final boolean hidden;\n+    private final boolean replicated;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a21454e2ef70c5437ae2a10d81570a7abfb72592"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2Nzg1Ng==", "bodyText": "Maybe something that indicates whether a data stream can be rolled over is a better name. I will think about this.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r530267856", "createdAt": "2020-11-25T10:31:43Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -44,26 +44,29 @@\n \n     public static final String BACKING_INDEX_PREFIX = \".ds-\";\n     public static final Version HIDDEN_VERSION = Version.V_7_11_0;\n+    public static final Version REPLICATED_VERSION = Version.V_8_0_0;\n \n     private final String name;\n     private final TimestampField timeStampField;\n     private final List<Index> indices;\n     private final long generation;\n     private final Map<String, Object> metadata;\n     private final boolean hidden;\n+    private final boolean replicated;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxMDM5NA=="}, "originalCommit": {"oid": "a21454e2ef70c5437ae2a10d81570a7abfb72592"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjAzMTczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo0MjoxNFrOIAUt0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoyODozMFrOIDJPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMDMyMg==", "bodyText": "@martijnvg Sorry, I think I didn't explain well my concern about supporting bi-directional replication. What I meant was JasonZ's blog. In his setup, we can send the same indexing request (uses the same write alias) to either cluster. In this test, we use different data streams for indexing requests. That means users can't simply reroute all indexing to a single cluster when another is not available.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r537210322", "createdAt": "2020-12-07T03:42:14Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java", "diffHunk": "@@ -347,13 +321,369 @@ public void testDataStreams_autoFollowAfterDataStreamCreated() throws Exception\n         }\n     }\n \n+    public void testRolloverDataStreamInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String dataStreamName = \"logs-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"logs-*\", \"leader_cluster\");\n+\n+        // Create data stream and ensure that is is auto followed\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Unfollow .ds-logs-tomcat-prod-000001\n+            pauseFollow(backingIndexName(dataStreamName, 1));\n+            closeIndex(backingIndexName(dataStreamName, 1));\n+            unfollow(backingIndexName(dataStreamName, 1));\n+\n+            // Try again\n+            Request rolloverRequest2 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest2));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Promote local data stream\n+            Request promoteRequest = new Request(\"POST\", \"/_data_stream/_promote/\" + dataStreamName);\n+            assertOK(client().performRequest(promoteRequest));\n+\n+            // Try again and now the rollover should be successful because local data stream is now :\n+            Request rolloverRequest3 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            assertOK(client().performRequest(rolloverRequest3));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2),\n+                backingIndexName(dataStreamName, 3));\n+\n+            // TODO: verify that following a backing index for logs-tomcat-prod data stream in remote cluster fails,\n+            // because local data stream isn't a replicated data stream anymore.\n+\n+            // Unfollow .ds-logs-tomcat-prod-000002,\n+            // which is now possible because this index can now be closed as it is no longer the write index.\n+            pauseFollow(backingIndexName(dataStreamName, 2));\n+            closeIndex(backingIndexName(dataStreamName, 2));\n+            unfollow(backingIndexName(dataStreamName, 2));\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+            deleteDataStream(dataStreamName);\n+        }\n+    }\n+\n+    public void testRolloverAliasInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String aliasName = \"log-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"log-*\", \"leader_cluster\");\n+\n+        // Create leader index and write alias:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request createFirstIndexRequest = new Request(\"PUT\", \"/\" + aliasName + \"-000001\");\n+                createFirstIndexRequest.setJsonEntity(\"{\\\"aliases\\\": {\\\"\" + aliasName + \"\\\":{\\\"is_write_index\\\":true}}}\");\n+                leaderClient.performRequest(createFirstIndexRequest);\n+\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000001\");\n+                verifyDocuments(leaderClient, aliasName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000002\", aliasName + \"-000001\");\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, aliasName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster, this should fail, because is_write_index property of an alias isn't\n+        // replicated to follow cluster.\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"rollover target [\" + aliasName + \"] does not point to a write index\"));\n+            verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+        }\n+    }\n+\n+    private static void verifyAlias(RestClient client,\n+                                    String aliasName,\n+                                    boolean checkWriteIndex,\n+                                    String... otherIndices) throws IOException {\n+        Request getAliasRequest = new Request(\"GET\", \"/_alias/\" + aliasName);\n+        Map<?, ?> responseBody = toMap(client.performRequest(getAliasRequest));\n+        if (checkWriteIndex) {\n+            assertThat(ObjectPath.eval(otherIndices[0] + \".aliases.\" + aliasName + \".is_write_index\", responseBody), is(true));\n+        }\n+        for (String otherIndex : otherIndices) {\n+            assertThat(ObjectPath.eval(otherIndex + \".aliases.\" + aliasName, responseBody), notNullValue());\n+        }\n+    }\n+\n+    public void testDataStreamsBiDirectionalReplication() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef26773e6713eadb03cc781278b4e0ef8b31f763"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2ODczMQ==", "bodyText": "Currently an alias can't point to a data stream or its backing indices. So the test can't completely follow the bi directional scenario. I did add a few logs-http* searches to mimic reading from a logs-http alias, as best effort replacement for the fact aliases can't point to data streams.\nWe're planning to add alias support to data streams. These aliases would only be able point to data streams and not to a data stream's backing indices, other indices or other aliases. Like aliases defined on indices, aliases on data stream could also have a write flag, which indicates to which data stream write requests are redirected to. I will add a TODO here, that these searches on logs-http* pattern should be replaced with searches and writes via aliases when alias support for data streams has landed.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r537368731", "createdAt": "2020-12-07T09:50:37Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java", "diffHunk": "@@ -347,13 +321,369 @@ public void testDataStreams_autoFollowAfterDataStreamCreated() throws Exception\n         }\n     }\n \n+    public void testRolloverDataStreamInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String dataStreamName = \"logs-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"logs-*\", \"leader_cluster\");\n+\n+        // Create data stream and ensure that is is auto followed\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Unfollow .ds-logs-tomcat-prod-000001\n+            pauseFollow(backingIndexName(dataStreamName, 1));\n+            closeIndex(backingIndexName(dataStreamName, 1));\n+            unfollow(backingIndexName(dataStreamName, 1));\n+\n+            // Try again\n+            Request rolloverRequest2 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest2));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Promote local data stream\n+            Request promoteRequest = new Request(\"POST\", \"/_data_stream/_promote/\" + dataStreamName);\n+            assertOK(client().performRequest(promoteRequest));\n+\n+            // Try again and now the rollover should be successful because local data stream is now :\n+            Request rolloverRequest3 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            assertOK(client().performRequest(rolloverRequest3));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2),\n+                backingIndexName(dataStreamName, 3));\n+\n+            // TODO: verify that following a backing index for logs-tomcat-prod data stream in remote cluster fails,\n+            // because local data stream isn't a replicated data stream anymore.\n+\n+            // Unfollow .ds-logs-tomcat-prod-000002,\n+            // which is now possible because this index can now be closed as it is no longer the write index.\n+            pauseFollow(backingIndexName(dataStreamName, 2));\n+            closeIndex(backingIndexName(dataStreamName, 2));\n+            unfollow(backingIndexName(dataStreamName, 2));\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+            deleteDataStream(dataStreamName);\n+        }\n+    }\n+\n+    public void testRolloverAliasInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String aliasName = \"log-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"log-*\", \"leader_cluster\");\n+\n+        // Create leader index and write alias:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request createFirstIndexRequest = new Request(\"PUT\", \"/\" + aliasName + \"-000001\");\n+                createFirstIndexRequest.setJsonEntity(\"{\\\"aliases\\\": {\\\"\" + aliasName + \"\\\":{\\\"is_write_index\\\":true}}}\");\n+                leaderClient.performRequest(createFirstIndexRequest);\n+\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000001\");\n+                verifyDocuments(leaderClient, aliasName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000002\", aliasName + \"-000001\");\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, aliasName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster, this should fail, because is_write_index property of an alias isn't\n+        // replicated to follow cluster.\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"rollover target [\" + aliasName + \"] does not point to a write index\"));\n+            verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+        }\n+    }\n+\n+    private static void verifyAlias(RestClient client,\n+                                    String aliasName,\n+                                    boolean checkWriteIndex,\n+                                    String... otherIndices) throws IOException {\n+        Request getAliasRequest = new Request(\"GET\", \"/_alias/\" + aliasName);\n+        Map<?, ?> responseBody = toMap(client.performRequest(getAliasRequest));\n+        if (checkWriteIndex) {\n+            assertThat(ObjectPath.eval(otherIndices[0] + \".aliases.\" + aliasName + \".is_write_index\", responseBody), is(true));\n+        }\n+        for (String otherIndex : otherIndices) {\n+            assertThat(ObjectPath.eval(otherIndex + \".aliases.\" + aliasName, responseBody), notNullValue());\n+        }\n+    }\n+\n+    public void testDataStreamsBiDirectionalReplication() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMDMyMg=="}, "originalCommit": {"oid": "ef26773e6713eadb03cc781278b4e0ef8b31f763"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NzgzMQ==", "bodyText": "We're planning to add alias support to data streams.\n\nThanks for explaning + adding the TODO.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r537597831", "createdAt": "2020-12-07T15:30:00Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java", "diffHunk": "@@ -347,13 +321,369 @@ public void testDataStreams_autoFollowAfterDataStreamCreated() throws Exception\n         }\n     }\n \n+    public void testRolloverDataStreamInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String dataStreamName = \"logs-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"logs-*\", \"leader_cluster\");\n+\n+        // Create data stream and ensure that is is auto followed\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Unfollow .ds-logs-tomcat-prod-000001\n+            pauseFollow(backingIndexName(dataStreamName, 1));\n+            closeIndex(backingIndexName(dataStreamName, 1));\n+            unfollow(backingIndexName(dataStreamName, 1));\n+\n+            // Try again\n+            Request rolloverRequest2 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest2));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Promote local data stream\n+            Request promoteRequest = new Request(\"POST\", \"/_data_stream/_promote/\" + dataStreamName);\n+            assertOK(client().performRequest(promoteRequest));\n+\n+            // Try again and now the rollover should be successful because local data stream is now :\n+            Request rolloverRequest3 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            assertOK(client().performRequest(rolloverRequest3));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2),\n+                backingIndexName(dataStreamName, 3));\n+\n+            // TODO: verify that following a backing index for logs-tomcat-prod data stream in remote cluster fails,\n+            // because local data stream isn't a replicated data stream anymore.\n+\n+            // Unfollow .ds-logs-tomcat-prod-000002,\n+            // which is now possible because this index can now be closed as it is no longer the write index.\n+            pauseFollow(backingIndexName(dataStreamName, 2));\n+            closeIndex(backingIndexName(dataStreamName, 2));\n+            unfollow(backingIndexName(dataStreamName, 2));\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+            deleteDataStream(dataStreamName);\n+        }\n+    }\n+\n+    public void testRolloverAliasInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String aliasName = \"log-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"log-*\", \"leader_cluster\");\n+\n+        // Create leader index and write alias:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request createFirstIndexRequest = new Request(\"PUT\", \"/\" + aliasName + \"-000001\");\n+                createFirstIndexRequest.setJsonEntity(\"{\\\"aliases\\\": {\\\"\" + aliasName + \"\\\":{\\\"is_write_index\\\":true}}}\");\n+                leaderClient.performRequest(createFirstIndexRequest);\n+\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000001\");\n+                verifyDocuments(leaderClient, aliasName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000002\", aliasName + \"-000001\");\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, aliasName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster, this should fail, because is_write_index property of an alias isn't\n+        // replicated to follow cluster.\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"rollover target [\" + aliasName + \"] does not point to a write index\"));\n+            verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+        }\n+    }\n+\n+    private static void verifyAlias(RestClient client,\n+                                    String aliasName,\n+                                    boolean checkWriteIndex,\n+                                    String... otherIndices) throws IOException {\n+        Request getAliasRequest = new Request(\"GET\", \"/_alias/\" + aliasName);\n+        Map<?, ?> responseBody = toMap(client.performRequest(getAliasRequest));\n+        if (checkWriteIndex) {\n+            assertThat(ObjectPath.eval(otherIndices[0] + \".aliases.\" + aliasName + \".is_write_index\", responseBody), is(true));\n+        }\n+        for (String otherIndex : otherIndices) {\n+            assertThat(ObjectPath.eval(otherIndex + \".aliases.\" + aliasName, responseBody), notNullValue());\n+        }\n+    }\n+\n+    public void testDataStreamsBiDirectionalReplication() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMDMyMg=="}, "originalCommit": {"oid": "ef26773e6713eadb03cc781278b4e0ef8b31f763"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzNjQzMg==", "bodyText": "@dnhatn I've opened: #66163", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r540136432", "createdAt": "2020-12-10T12:39:52Z", "author": {"login": "martijnvg"}, "path": "x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java", "diffHunk": "@@ -347,13 +321,369 @@ public void testDataStreams_autoFollowAfterDataStreamCreated() throws Exception\n         }\n     }\n \n+    public void testRolloverDataStreamInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String dataStreamName = \"logs-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"logs-*\", \"leader_cluster\");\n+\n+        // Create data stream and ensure that is is auto followed\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Unfollow .ds-logs-tomcat-prod-000001\n+            pauseFollow(backingIndexName(dataStreamName, 1));\n+            closeIndex(backingIndexName(dataStreamName, 1));\n+            unfollow(backingIndexName(dataStreamName, 1));\n+\n+            // Try again\n+            Request rolloverRequest2 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest2));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Promote local data stream\n+            Request promoteRequest = new Request(\"POST\", \"/_data_stream/_promote/\" + dataStreamName);\n+            assertOK(client().performRequest(promoteRequest));\n+\n+            // Try again and now the rollover should be successful because local data stream is now :\n+            Request rolloverRequest3 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            assertOK(client().performRequest(rolloverRequest3));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2),\n+                backingIndexName(dataStreamName, 3));\n+\n+            // TODO: verify that following a backing index for logs-tomcat-prod data stream in remote cluster fails,\n+            // because local data stream isn't a replicated data stream anymore.\n+\n+            // Unfollow .ds-logs-tomcat-prod-000002,\n+            // which is now possible because this index can now be closed as it is no longer the write index.\n+            pauseFollow(backingIndexName(dataStreamName, 2));\n+            closeIndex(backingIndexName(dataStreamName, 2));\n+            unfollow(backingIndexName(dataStreamName, 2));\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+            deleteDataStream(dataStreamName);\n+        }\n+    }\n+\n+    public void testRolloverAliasInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String aliasName = \"log-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"log-*\", \"leader_cluster\");\n+\n+        // Create leader index and write alias:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request createFirstIndexRequest = new Request(\"PUT\", \"/\" + aliasName + \"-000001\");\n+                createFirstIndexRequest.setJsonEntity(\"{\\\"aliases\\\": {\\\"\" + aliasName + \"\\\":{\\\"is_write_index\\\":true}}}\");\n+                leaderClient.performRequest(createFirstIndexRequest);\n+\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000001\");\n+                verifyDocuments(leaderClient, aliasName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000002\", aliasName + \"-000001\");\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, aliasName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster, this should fail, because is_write_index property of an alias isn't\n+        // replicated to follow cluster.\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"rollover target [\" + aliasName + \"] does not point to a write index\"));\n+            verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+        }\n+    }\n+\n+    private static void verifyAlias(RestClient client,\n+                                    String aliasName,\n+                                    boolean checkWriteIndex,\n+                                    String... otherIndices) throws IOException {\n+        Request getAliasRequest = new Request(\"GET\", \"/_alias/\" + aliasName);\n+        Map<?, ?> responseBody = toMap(client.performRequest(getAliasRequest));\n+        if (checkWriteIndex) {\n+            assertThat(ObjectPath.eval(otherIndices[0] + \".aliases.\" + aliasName + \".is_write_index\", responseBody), is(true));\n+        }\n+        for (String otherIndex : otherIndices) {\n+            assertThat(ObjectPath.eval(otherIndex + \".aliases.\" + aliasName, responseBody), notNullValue());\n+        }\n+    }\n+\n+    public void testDataStreamsBiDirectionalReplication() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMDMyMg=="}, "originalCommit": {"oid": "ef26773e6713eadb03cc781278b4e0ef8b31f763"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2Nzk0Mg==", "bodyText": "Thanks @martijnvg.", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r540167942", "createdAt": "2020-12-10T13:28:30Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java", "diffHunk": "@@ -347,13 +321,369 @@ public void testDataStreams_autoFollowAfterDataStreamCreated() throws Exception\n         }\n     }\n \n+    public void testRolloverDataStreamInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String dataStreamName = \"logs-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"logs-*\", \"leader_cluster\");\n+\n+        // Create data stream and ensure that is is auto followed\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyDataStream(leaderClient, dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + dataStreamName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, dataStreamName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+                ensureYellow(dataStreamName);\n+                verifyDocuments(client(), dataStreamName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Unfollow .ds-logs-tomcat-prod-000001\n+            pauseFollow(backingIndexName(dataStreamName, 1));\n+            closeIndex(backingIndexName(dataStreamName, 1));\n+            unfollow(backingIndexName(dataStreamName, 1));\n+\n+            // Try again\n+            Request rolloverRequest2 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest2));\n+            assertThat(e.getMessage(), containsString(\"data stream [\" + dataStreamName + \"] cannot be rolled over, \" +\n+                \"because it is a replicated data stream\"));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2));\n+\n+            // Promote local data stream\n+            Request promoteRequest = new Request(\"POST\", \"/_data_stream/_promote/\" + dataStreamName);\n+            assertOK(client().performRequest(promoteRequest));\n+\n+            // Try again and now the rollover should be successful because local data stream is now :\n+            Request rolloverRequest3 = new Request(\"POST\", \"/\" +  dataStreamName + \"/_rollover\");\n+            assertOK(client().performRequest(rolloverRequest3));\n+            verifyDataStream(client(), dataStreamName, backingIndexName(dataStreamName, 1), backingIndexName(dataStreamName, 2),\n+                backingIndexName(dataStreamName, 3));\n+\n+            // TODO: verify that following a backing index for logs-tomcat-prod data stream in remote cluster fails,\n+            // because local data stream isn't a replicated data stream anymore.\n+\n+            // Unfollow .ds-logs-tomcat-prod-000002,\n+            // which is now possible because this index can now be closed as it is no longer the write index.\n+            pauseFollow(backingIndexName(dataStreamName, 2));\n+            closeIndex(backingIndexName(dataStreamName, 2));\n+            unfollow(backingIndexName(dataStreamName, 2));\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+            deleteDataStream(dataStreamName);\n+        }\n+    }\n+\n+    public void testRolloverAliasInFollowClusterForbidden() throws Exception {\n+        if (\"follow\".equals(targetCluster) == false) {\n+            return;\n+        }\n+\n+        final int numDocs = 64;\n+        final String aliasName = \"log-tomcat-prod\";\n+\n+        int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n+\n+        // Create auto follow pattern\n+        createAutoFollowPattern(client(), \"test_pattern\", \"log-*\", \"leader_cluster\");\n+\n+        // Create leader index and write alias:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request createFirstIndexRequest = new Request(\"PUT\", \"/\" + aliasName + \"-000001\");\n+                createFirstIndexRequest.setJsonEntity(\"{\\\"aliases\\\": {\\\"\" + aliasName + \"\\\":{\\\"is_write_index\\\":true}}}\");\n+                leaderClient.performRequest(createFirstIndexRequest);\n+\n+                for (int i = 0; i < numDocs; i++) {\n+                    Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                    indexRequest.addParameter(\"refresh\", \"true\");\n+                    indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                    assertOK(leaderClient.performRequest(indexRequest));\n+                }\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000001\");\n+                verifyDocuments(leaderClient, aliasName, numDocs);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 1));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs);\n+            });\n+        }\n+\n+        // Rollover in leader cluster and ensure second backing index is replicated:\n+        {\n+            try (RestClient leaderClient = buildLeaderClient()) {\n+                Request rolloverRequest = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+                assertOK(leaderClient.performRequest(rolloverRequest));\n+                verifyAlias(leaderClient, aliasName, true, aliasName + \"-000002\", aliasName + \"-000001\");\n+\n+                Request indexRequest = new Request(\"POST\", \"/\" + aliasName + \"/_doc\");\n+                indexRequest.addParameter(\"refresh\", \"true\");\n+                indexRequest.setJsonEntity(\"{\\\"@timestamp\\\": \\\"\" + DATE_FORMAT.format(new Date()) + \"\\\",\\\"message\\\":\\\"abc\\\"}\");\n+                assertOK(leaderClient.performRequest(indexRequest));\n+                verifyDocuments(leaderClient, aliasName, numDocs + 1);\n+            }\n+            assertBusy(() -> {\n+                assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(initialNumberOfSuccessfulFollowedIndices + 2));\n+                verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+                ensureYellow(aliasName);\n+                verifyDocuments(client(), aliasName, numDocs + 1);\n+            });\n+        }\n+\n+        // Try rollover in follow cluster, this should fail, because is_write_index property of an alias isn't\n+        // replicated to follow cluster.\n+        {\n+            Request rolloverRequest1 = new Request(\"POST\", \"/\" +  aliasName + \"/_rollover\");\n+            Exception e = expectThrows(ResponseException.class, () -> client().performRequest(rolloverRequest1));\n+            assertThat(e.getMessage(), containsString(\"rollover target [\" + aliasName + \"] does not point to a write index\"));\n+            verifyAlias(client(), aliasName, false, aliasName + \"-000002\", aliasName + \"-000001\");\n+        }\n+        // Cleanup:\n+        {\n+            deleteAutoFollowPattern(\"test_pattern\");\n+        }\n+    }\n+\n+    private static void verifyAlias(RestClient client,\n+                                    String aliasName,\n+                                    boolean checkWriteIndex,\n+                                    String... otherIndices) throws IOException {\n+        Request getAliasRequest = new Request(\"GET\", \"/_alias/\" + aliasName);\n+        Map<?, ?> responseBody = toMap(client.performRequest(getAliasRequest));\n+        if (checkWriteIndex) {\n+            assertThat(ObjectPath.eval(otherIndices[0] + \".aliases.\" + aliasName + \".is_write_index\", responseBody), is(true));\n+        }\n+        for (String otherIndex : otherIndices) {\n+            assertThat(ObjectPath.eval(otherIndex + \".aliases.\" + aliasName, responseBody), notNullValue());\n+        }\n+    }\n+\n+    public void testDataStreamsBiDirectionalReplication() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMDMyMg=="}, "originalCommit": {"oid": "ef26773e6713eadb03cc781278b4e0ef8b31f763"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDcwNzg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/api/indices.promote_data_stream.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyODozNFrOIAsStQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyODozNFrOIAsStQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NjU5Nw==", "bodyText": "nit: s/replicate/replicated", "url": "https://github.com/elastic/elasticsearch/pull/64710#discussion_r537596597", "createdAt": "2020-12-07T15:28:34Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/api/indices.promote_data_stream.json", "diffHunk": "@@ -0,0 +1,27 @@\n+{\n+  \"indices.promote_data_stream\":{\n+    \"documentation\":{\n+      \"url\":\"https://www.elastic.co/guide/en/elasticsearch/reference/master/data-streams.html\",\n+      \"description\":\"Promotes a data stream from a replicate data stream managed by CCR to a regular data stream\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7a0715e3cf348000265bc2d16215d01c3d3a27"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3111, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}