{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjM1ODU4", "number": 58575, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MDowN1rOEJLj9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDowNjo0OVrOEKcr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDYyMDY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MDowN1rOGpl6EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDo1MzowNFrOGpx_OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NTg3Mw==", "bodyText": "Should we make this the default implementation for doExecute in TransportWriteAction when rerouteBypassed() is true? Maybe we can then also rename that method to supportsRerouteAction.", "url": "https://github.com/elastic/elasticsearch/pull/58575#discussion_r446265873", "createdAt": "2020-06-26T15:50:07Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java", "diffHunk": "@@ -64,6 +64,11 @@ public TransportResyncReplicationAction(Settings settings, TransportService tran\n             writeMemoryLimits);\n     }\n \n+    @Override\n+    protected void doExecute(Task parentTask, ResyncReplicationRequest request, ActionListener<ResyncReplicationResponse> listener) {\n+        assert false : \"use TransportResyncReplicationAction#sync\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1c11107a8782819e7946afade98425cfdc90f0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MzE2NA==", "bodyText": "Okay. This is a little tricky because I have to expose reroute in TransportReplicationAction. But I did that and we can discuss.", "url": "https://github.com/elastic/elasticsearch/pull/58575#discussion_r446463164", "createdAt": "2020-06-27T00:47:20Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java", "diffHunk": "@@ -64,6 +64,11 @@ public TransportResyncReplicationAction(Settings settings, TransportService tran\n             writeMemoryLimits);\n     }\n \n+    @Override\n+    protected void doExecute(Task parentTask, ResyncReplicationRequest request, ActionListener<ResyncReplicationResponse> listener) {\n+        assert false : \"use TransportResyncReplicationAction#sync\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NTg3Mw=="}, "originalCommit": {"oid": "fb1c11107a8782819e7946afade98425cfdc90f0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MzgwMA==", "bodyText": "Eh. Actually I holding off this for the moment because it gets kind of messy. We can talk more about this. I did rename the method.", "url": "https://github.com/elastic/elasticsearch/pull/58575#discussion_r446463800", "createdAt": "2020-06-27T00:53:04Z", "author": {"login": "tbrooks8"}, "path": "server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java", "diffHunk": "@@ -64,6 +64,11 @@ public TransportResyncReplicationAction(Settings settings, TransportService tran\n             writeMemoryLimits);\n     }\n \n+    @Override\n+    protected void doExecute(Task parentTask, ResyncReplicationRequest request, ActionListener<ResyncReplicationResponse> listener) {\n+        assert false : \"use TransportResyncReplicationAction#sync\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NTg3Mw=="}, "originalCommit": {"oid": "fb1c11107a8782819e7946afade98425cfdc90f0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEyODkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMzozN1rOGqVojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMzozN1rOGqVojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NzgyMA==", "bodyText": "One scenario which is not supported by this I think is if we have a relocating primary where the old primary has done a relocation handoff with the new primary, and is directly sending a primary action from old primary to new primary (see primaryShardReference.isRelocated() in TransportReplicationAction.AsyncPrimaryAction.runWithPrimaryShardReference).\nThe new primary would then not account for the bytes. This should only be a for a short time, nevertheless I'm wondering if we can find a solution for this.", "url": "https://github.com/elastic/elasticsearch/pull/58575#discussion_r447047820", "createdAt": "2020-06-29T15:13:37Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java", "diffHunk": "@@ -80,12 +80,25 @@ protected TransportWriteAction(Settings settings, String actionName, TransportSe\n \n     @Override\n     protected Releasable checkOperationLimits(Request request) {\n-        return writeMemoryLimits.markCoordinatingOperationStarted(primaryOperationSize(request));\n+        assert supportsRerouteAction() : \"checkOperationLimits should be be called if reroute not supported by action\";\n+        return writeMemoryLimits.markWriteOperationStarted(primaryOperationSize(request));\n     }\n \n     @Override\n     protected Releasable checkPrimaryLimits(Request request) {\n-        return writeMemoryLimits.markPrimaryOperationStarted(primaryOperationSize(request));\n+        if (supportsRerouteAction()) {\n+            return () -> {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c86d2162d902f900962cc56f5191aac480d263c5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDczNjk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMzowNVrOGrBQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMzowNVrOGrBQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MjU2MQ==", "bodyText": "needs to be v8.0.0", "url": "https://github.com/elastic/elasticsearch/pull/58575#discussion_r447762561", "createdAt": "2020-06-30T15:13:05Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -1102,19 +1102,31 @@ public void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, l\n         private final String targetAllocationID;\n         private final long primaryTerm;\n         private final R request;\n+        private final boolean rerouteWasLocal;\n \n         public ConcreteShardRequest(Writeable.Reader<R> requestReader, StreamInput in) throws IOException {\n             targetAllocationID = in.readString();\n             primaryTerm  = in.readVLong();\n+            // TODO: Change after backport\n+            if (in.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14dafcf32932d4fb154ecf529304502452b10943"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDgzNTgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozMzozOVrOGrCNjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozMzozOVrOGrCNjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3ODE5MQ==", "bodyText": "The confusing bit about this name is that this flag does not say whether the reroute action came from a local node, but whether the primary action was sent by a reroute phase on the local node.\nMy suggestion was to mention primaryDelegation here (which is the terminology we use when sending a primary action to a different node (otherwise, it's always local to the node where the reroute was executing). By default primaryDelegation will be false (i.e. exactly the inverse of this flag here)", "url": "https://github.com/elastic/elasticsearch/pull/58575#discussion_r447778191", "createdAt": "2020-06-30T15:33:39Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -1145,9 +1157,17 @@ public String getDescription() {\n         public void writeTo(StreamOutput out) throws IOException {\n             out.writeString(targetAllocationID);\n             out.writeVLong(primaryTerm);\n+            // TODO: Change after backport\n+            if (out.getVersion().onOrAfter(Version.V_8_0_0)) {\n+                out.writeBoolean(rerouteWasLocal);\n+            }\n             request.writeTo(out);\n         }\n \n+        public boolean rerouteWasLocal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8249eee8b4cacb21a021547a75219b9d3d77308"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzkxMTkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDowNjo0OVrOGrfiYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDowNjo0OVrOGrfiYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1ODY1OA==", "bodyText": "remove this  comment?", "url": "https://github.com/elastic/elasticsearch/pull/58575#discussion_r448258658", "createdAt": "2020-07-01T10:06:49Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java", "diffHunk": "@@ -1102,19 +1101,28 @@ public void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, l\n         private final String targetAllocationID;\n         private final long primaryTerm;\n         private final R request;\n+        // Indicates if this primary shard request originated by a reroute on this local node.\n+        private final boolean sentFromLocalReroute;\n \n         public ConcreteShardRequest(Writeable.Reader<R> requestReader, StreamInput in) throws IOException {\n+            // sendFromLocalReroute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b1738277fdc5e868496a8cca1ccbec27c4b3760"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2312, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}