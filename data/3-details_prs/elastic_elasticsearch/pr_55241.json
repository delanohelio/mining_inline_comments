{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODA1NjY4", "number": 55241, "title": "SQL: Implement scripting inside aggs", "bodyText": "Implement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n\nScalar functions are still not allowed for KURTOSIS and SKEWNESS as\nthis is currently not implemented on the Elasticsearch side.\nFixes: #29980\nFixes: #36865\nFixes: #37271", "createdAt": "2020-04-15T14:46:28Z", "url": "https://github.com/elastic/elasticsearch/pull/55241", "merged": true, "mergeCommit": {"oid": "506d1beea7abb2b45de793bba2e349090a78f2f9"}, "closed": true, "closedAt": "2020-04-17T09:22:07Z", "author": {"login": "matriv"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX5QFjABqjMyMzU4NDUxMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYSTAdgH2gAyNDAzODA1NjY4OjEyNjQ2MGJhY2FhNmZhNDljZTEyZTA3NmNkM2U3MjJmYTg3NDViZDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02eb7953aa60cde576d50a4bcf03a4224f638c24", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/02eb7953aa60cde576d50a4bcf03a4224f638c24", "committedDate": "2020-04-15T14:45:33Z", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271"}, "afterCommit": {"oid": "57bd9c05f801f31fcb541b178caee9ddb1ce6176", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/57bd9c05f801f31fcb541b178caee9ddb1ce6176", "committedDate": "2020-04-15T14:48:22Z", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTQ1NDkw", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-393945490", "createdAt": "2020-04-15T16:36:12Z", "commit": {"oid": "57bd9c05f801f31fcb541b178caee9ddb1ce6176"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozNjoxMlrOGGCIuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozNjoxMlrOGGCIuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTY0MQ==", "bodyText": "So this code becomes:\nObject argument = asFieldOrLiteralOrScript(c.field());\n\n           if (c.distinct()) {\n                    return new CardinalityAgg(id, argument);\n                } else {\n                    return new FilterExistsAgg(id, argument);\n                }", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r408979641", "createdAt": "2020-04-15T16:36:12Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -523,10 +524,19 @@ public QueryTranslation translate(Expression exp, boolean onAggs, TranslatorHand\n \n         @Override\n         protected LeafAgg toAgg(String id, Count c) {\n-            if (c.distinct()) {\n-                return new CardinalityAgg(id, field(c));\n+            if (fieldOrLiteral(c)) {\n+                if (c.distinct()) {\n+                    return new CardinalityAgg(id, field(c));\n+                } else {\n+                    return new FilterExistsAgg(id, field(c));\n+                }\n             } else {\n-                return new FilterExistsAgg(id, field(c));\n+                ScriptTemplate scriptTemplate = ((Function) c.field()).asScript();\n+                if (c.distinct()) {\n+                    return new CardinalityAgg(id, scriptTemplate);\n+                } else {\n+                    return new FilterExistsAgg(id, scriptTemplate);\n+                }\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57bd9c05f801f31fcb541b178caee9ddb1ce6176"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57bd9c05f801f31fcb541b178caee9ddb1ce6176", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/57bd9c05f801f31fcb541b178caee9ddb1ce6176", "committedDate": "2020-04-15T14:48:22Z", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271"}, "afterCommit": {"oid": "db0202d317ee32fe948849a5aed3fcfdd4bc5f4e", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/db0202d317ee32fe948849a5aed3fcfdd4bc5f4e", "committedDate": "2020-04-15T16:59:06Z", "message": "added tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ae462d60144c1b4e012efd3e56eb13c0ad3ae7b", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ae462d60144c1b4e012efd3e56eb13c0ad3ae7b", "committedDate": "2020-04-15T18:29:56Z", "message": "refactor constructors"}, "afterCommit": {"oid": "8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "committedDate": "2020-04-15T19:36:15Z", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1002af1369790a48c65a3ee7fd4119a05c69c69e", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/1002af1369790a48c65a3ee7fd4119a05c69c69e", "committedDate": "2020-04-15T19:43:41Z", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "committedDate": "2020-04-15T19:36:15Z", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271"}, "afterCommit": {"oid": "1002af1369790a48c65a3ee7fd4119a05c69c69e", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/1002af1369790a48c65a3ee7fd4119a05c69c69e", "committedDate": "2020-04-15T19:43:41Z", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18b38d1f62aa154498c18c75920aed91a8d300dd", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/18b38d1f62aa154498c18c75920aed91a8d300dd", "committedDate": "2020-04-15T20:02:21Z", "message": "Avoid instantiating SqlFunctionRegistry multiple times"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f0be69b1c10b8b11daeaebd37e4f0c479d0c27", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/30f0be69b1c10b8b11daeaebd37e4f0c479d0c27", "committedDate": "2020-04-15T20:18:34Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/b8bc29f350f24b22bde8b9096a95d4273dd822fe", "committedDate": "2020-04-15T20:32:35Z", "message": "re-arrange imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTI3MjQw", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-394127240", "createdAt": "2020-04-15T20:54:00Z", "commit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo1NDowMFrOGGLKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMToyMjoxNFrOGGMA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNzU3NA==", "bodyText": "This method seems to be used in one place as such extracting it in a different class doesn't add much value since there's no reuse.\nThe name also indicates that - a method specific to cardinality/count.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409127574", "createdAt": "2020-04-15T20:54:00Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/gen/script/Scripts.java", "diffHunk": "@@ -66,6 +66,13 @@ public static ScriptTemplate nullSafeFilter(ScriptTemplate script) {\n                 DataTypes.BOOLEAN);\n     }\n \n+    public static ScriptTemplate isNotNullCardinality(ScriptTemplate script) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNzc0MA==", "bodyText": "nice", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409127740", "createdAt": "2020-04-15T20:54:17Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec", "diffHunk": "@@ -899,3 +899,156 @@ SELECT gender, MAD(salary) AS mad FROM test_emp GROUP BY gender HAVING mad > 100\n null           |10789.0        \n F              |12719.0         \n ;\n+\n+\n+// aggregates with scalars\n+aggregateFunctionsWithScalars\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyODM2NA==", "bodyText": "Can you please add a couple of tests where the aggs with scalars are inside having?\nEven better have scalars over aggs over scalars inside Having.\nAlso another that sorts by an aggregation with an internal scalar.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409128364", "createdAt": "2020-04-15T20:55:32Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec", "diffHunk": "@@ -899,3 +899,156 @@ SELECT gender, MAD(salary) AS mad FROM test_emp GROUP BY gender HAVING mad > 100\n null           |10789.0        \n F              |12719.0         \n ;\n+\n+\n+// aggregates with scalars\n+aggregateFunctionsWithScalars", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMTY5Ng==", "bodyText": "String.valueOf(arg.fold())\nThere's rarely a reason to cast to a Literal", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409131696", "createdAt": "2020-04-15T21:02:06Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -240,15 +236,11 @@ static String nameOf(Expression e) {\n         }\n     }\n \n-    static String dateFormat(Expression e) {\n-        if (e instanceof DateTimeFunction) {\n-            return ((DateTimeFunction) e).dateTimeFormat();\n-        }\n-        return null;\n-    }\n-\n     static String field(AggregateFunction af) {\n         Expression arg = af.field();\n+        if (arg.foldable()) {\n+            return String.valueOf(((Literal) arg).value());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjM3MQ==", "bodyText": "return  isFieldOrLiteral(af) ?  field(af) : ((ScalarFunction) af.field()).asScript()", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409132371", "createdAt": "2020-04-15T21:03:24Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {\n         if (e == null) {\n             return null;\n         }\n         if (e instanceof FieldAttribute) {\n             return ((FieldAttribute) e).exactAttribute().name();\n         }\n+        if (e instanceof ScalarFunction) {\n+            return ((ScalarFunction) e).asScript();\n+        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", e.nodeString(), af.nodeString());\n     }\n \n+    private static boolean isFieldOrLiteral(AggregateFunction af) {\n+        return af.field().foldable() || af.field() instanceof FieldAttribute;\n+    }\n+\n+    private static Object getFieldOrLiteralOrScript(AggregateFunction af) {\n+        if (isFieldOrLiteral(af)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjkxNA==", "bodyText": "get prefix is for getter - use something like toField.. or asField..", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409132914", "createdAt": "2020-04-15T21:04:22Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {\n         if (e == null) {\n             return null;\n         }\n         if (e instanceof FieldAttribute) {\n             return ((FieldAttribute) e).exactAttribute().name();\n         }\n+        if (e instanceof ScalarFunction) {\n+            return ((ScalarFunction) e).asScript();\n+        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", e.nodeString(), af.nodeString());\n     }\n \n+    private static boolean isFieldOrLiteral(AggregateFunction af) {\n+        return af.field().foldable() || af.field() instanceof FieldAttribute;\n+    }\n+\n+    private static Object getFieldOrLiteralOrScript(AggregateFunction af) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMzIyMQ==", "bodyText": "This can be moved under the TopHit agg class", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409133221", "createdAt": "2020-04-15T21:04:57Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNDEwNA==", "bodyText": "The logic from topAggsFieldOrScript and this method is similar and should be reused - I like the instanceof check for Scalar instead of the direct cast; a bit verbose but safe.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409134104", "createdAt": "2020-04-15T21:06:49Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {\n         if (e == null) {\n             return null;\n         }\n         if (e instanceof FieldAttribute) {\n             return ((FieldAttribute) e).exactAttribute().name();\n         }\n+        if (e instanceof ScalarFunction) {\n+            return ((ScalarFunction) e).asScript();\n+        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", e.nodeString(), af.nodeString());\n     }\n \n+    private static boolean isFieldOrLiteral(AggregateFunction af) {\n+        return af.field().foldable() || af.field() instanceof FieldAttribute;\n+    }\n+\n+    private static Object getFieldOrLiteralOrScript(AggregateFunction af) {\n+        if (isFieldOrLiteral(af)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjM3MQ=="}, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0MTQ5Ng==", "bodyText": "Thinking a bit more about this, a better solution might be creating a simple DTO specific for Agg that can hold either a String or a ScriptTemplate.\nThat one would handle the hashCode, equals, etc.\nFurther more maybe extend it to accept behavior by accepting a ValuesSourceAggregationBuilder and internally call either field or script based on its content.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Agg(String id, Object fieldOrScript) {\n          \n          \n            \n                Agg(String id, AggTarget target) {\n          \n          \n            \n                   this.target = target;\n          \n          \n            \n                }\n          \n          \n            \n                ...\n          \n          \n            \n                class AggTarget {\n          \n          \n            \n                    private final String fieldName;\n          \n          \n            \n                    private final ScriptTemplate script;\n          \n          \n            \n                    \n          \n          \n            \n                    ...\n          \n          \n            \n                    \n          \n          \n            \n                    ValuesSourceAggregationBuilder with(ValuesSourceAggregationBuilder aggBuilder) {\n          \n          \n            \n                        if (field != null) {\n          \n          \n            \n                             aggBuilder.field(field);\n          \n          \n            \n                         }\n          \n          \n            \n                         else {\n          \n          \n            \n                             aggBuilder.script(scriptTemplate.asScript());\n          \n          \n            \n                          }\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nThis would improve LeafAgg which would improve toBuilder and call AggTarget so that subclasses would only have to create the ValueSourceAggregationBuilder. In fact we could just declare them as a method reference for a string:\npublic abstract class LeafAgg extends Agg {\n\n    LeafAgg(String id, AggTarget target) {\n        super(id, target);\n    }\n\n    ValuesSourceAggregationBuilder builder() {\n         return aggBuilder.apply(id()).with(aggTarget);\n    }\n\n    protected abstract Function<String, ValuesSourceAggregationBuilder> aggBuilder();\nso that subclasses would now look like:\npublic class CardinalityAgg extends LeafAgg {\n\n    public CardinalityAgg(String id, AggTarget aggTarget) {\n        super(id, aggTarget);\n    }\n\n    @Override\n    ValuesSourceAggregationBuilder aggBuilder() {\n        return AggregationBuilders::cardinality;\n    }\n}", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409141496", "createdAt": "2020-04-15T21:22:14Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -17,10 +20,19 @@\n \n     private final String id;\n     private final String fieldName;\n+    private final ScriptTemplate scriptTemplate;\n \n-    Agg(String id, String fieldName) {\n+    Agg(String id, Object fieldOrScript) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "committedDate": "2020-04-16T08:58:59Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fabece71f4d5aed991dc31765f412d4574af1c8d", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/fabece71f4d5aed991dc31765f412d4574af1c8d", "committedDate": "2020-04-16T10:10:26Z", "message": "fix check for matrix aggs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NDk1Njc2", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-394495676", "createdAt": "2020-04-16T10:20:06Z", "commit": {"oid": "fabece71f4d5aed991dc31765f412d4574af1c8d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyMDowN1rOGGemTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyMDowN1rOGGemTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ0NTk2NA==", "bodyText": "I have already:\n\nI was thinking of a test with the agg declared just inside the order and not referencing an already declared aggregation.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409445964", "createdAt": "2020-04-16T10:20:07Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec", "diffHunk": "@@ -899,3 +899,156 @@ SELECT gender, MAD(salary) AS mad FROM test_emp GROUP BY gender HAVING mad > 100\n null           |10789.0        \n F              |12719.0         \n ;\n+\n+\n+// aggregates with scalars\n+aggregateFunctionsWithScalars", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyODM2NA=="}, "originalCommit": {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dae3ae643d8f5018e1201ec225045e12b8ffbce", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/5dae3ae643d8f5018e1201ec225045e12b8ffbce", "committedDate": "2020-04-16T11:00:41Z", "message": "Add one more ordering test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/2ef7067aa600d8bae79a5caddb48687c4bc1a508", "committedDate": "2020-04-16T11:52:41Z", "message": "use a POJO for fielname or script"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTY5MjA0", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-394569204", "createdAt": "2020-04-16T12:11:35Z", "commit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxMTozNVrOGGiQdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxMTozNVrOGGiQdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNTkwOA==", "bodyText": "Objects.hash(id, target)", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409505908", "createdAt": "2020-04-16T12:11:35Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -19,37 +16,25 @@\n public abstract class Agg {\n \n     private final String id;\n-    private final String fieldName;\n-    private final ScriptTemplate scriptTemplate;\n+    private final AggTarget target;\n \n-    Agg(String id, Object fieldOrScript) {\n+    Agg(String id, AggTarget target) {\n         this.id = id;\n-        if (fieldOrScript instanceof String) {\n-            this.fieldName = (String) fieldOrScript;\n-            this.scriptTemplate = null;\n-        } else if (fieldOrScript instanceof ScriptTemplate) {\n-            this.fieldName = null;\n-            this.scriptTemplate = (ScriptTemplate) fieldOrScript;\n-        } else {\n-            throw new SqlIllegalArgumentException(\"Argument of an aggregate function should be String or ScriptTemplate\");\n-        }\n+        Objects.requireNonNull(target, \"AggTarget must not be null\");\n+        this.target = target;\n     }\n \n     public String id() {\n         return id;\n     }\n \n-    protected String fieldName() {\n-        return fieldName;\n-    }\n-\n-    public ScriptTemplate scriptTemplate() {\n-        return scriptTemplate;\n+    public AggTarget target() {\n+        return target;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(id, fieldName, scriptTemplate);\n+        return Objects.hash(id) + target.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTcyNjMy", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-394572632", "createdAt": "2020-04-16T12:16:21Z", "commit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxNjoyMVrOGGia-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxNjoyMVrOGGia-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODYwMg==", "bodyText": "The name is leaking implementation details - why not addTarget()?", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409508602", "createdAt": "2020-04-16T12:16:21Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/LeafAgg.java", "diffHunk": "@@ -6,12 +6,18 @@\n package org.elasticsearch.xpack.sql.querydsl.agg;\n \n import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n \n public abstract class LeafAgg extends Agg {\n \n-    LeafAgg(String id, String fieldName) {\n-        super(id, fieldName);\n+    LeafAgg(String id, AggTarget target) {\n+        super(id, target);\n     }\n \n     abstract AggregationBuilder toBuilder();\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    protected ValuesSourceAggregationBuilder addFieldOrScript(ValuesSourceAggregationBuilder builder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTcyMTk0", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-394572194", "createdAt": "2020-04-16T12:15:46Z", "commit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxNTo0NlrOGGiZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjozNTo1N1rOGGjIVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODI3Mg==", "bodyText": "Reading the NOTE I would have expected to see \"KURTOSIS ... on top of scalar functions\" but I'm seeing KURTOSIS applied on a field.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409508272", "createdAt": "2020-04-16T12:15:46Z", "author": {"login": "astefan"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -397,6 +397,16 @@ https://en.wikipedia.org/wiki/Kurtosis[Quantify] the shape of the distribution o\n include-tagged::{sql-specs}/docs/docs.csv-spec[aggKurtosis]\n --------------------------------------------------\n \n+[NOTE]\n+====\n+`KURTOSIS` cannot be used on top of scalar functions but only directly on a field. So, for example, the following is\n+not allowed and an error is returned:\n+[source, sql]\n+---------------------------------------\n+ SELECT KURTOSIS(salary), gender FROM emp GROUP BY gender", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMjE1NQ==", "bodyText": "Please, add MAX(salary % 100) to the result.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409512155", "createdAt": "2020-04-16T12:22:18Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec", "diffHunk": "@@ -899,3 +899,196 @@ SELECT gender, MAD(salary) AS mad FROM test_emp GROUP BY gender HAVING mad > 100\n null           |10789.0        \n F              |12719.0         \n ;\n+\n+\n+// aggregates with scalars\n+aggregateFunctionsWithScalars\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+MIN(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"min\",\n+AVG(cos(salary * 1.2) + 100 * (salary / 5)) AS \"avg\",\n+SUM(-salary / 0.765 + sin((salary + 12345) / 12)) AS \"sum\",\n+MAD(abs(salary / -0.813) / 2 + (12345 * (salary % 10))) AS \"mad\"\n+FROM test_emp;\n+\n+       max        |      min      |       avg       |       sum        |       mad\n+------------------+---------------+-----------------+------------------+-----------------\n+155409.30000000002|23532.72       |964937.9295477575|-6307004.517507723|30811.76199261993\n+;\n+\n+countWithScalars\n+schema::cnt1:l|cnt2:l\n+SELECT count(DISTINCT CASE WHEN (languages - 1) > 3 THEN (languages + 3) * 1.2 ELSE (languages - 1) * 2.7 END) AS \"cnt1\",\n+count(CASE WHEN (languages - 2) > 2 THEN (languages + 5) * 1.2 ELSE ((languages / 0.87) - 11) * 2.7 END) AS \"cnt2\"\n+FROM test_emp;\n+\n+   cnt1   |  cnt2\n+----------+-------\n+5         | 90\n+;\n+\n+aggregateFunctionsWithScalarsAndGroupBy\n+schema::max:d|min:d|avg:d|sum:d|mad:d|gender:s\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+MIN(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"min\",\n+AVG(cos(salary * 1.2) + 100 * (salary / 5)) AS \"avg\",\n+SUM(-salary / 0.765 + sin((salary + 12345) / 12)) AS \"sum\",\n+MAD(abs(salary / -0.813) / 2 + (12345 * (salary % 10))) AS \"mad\",\n+gender\n+FROM test_emp GROUP BY gender ORDER BY gender;\n+\n+       max        |      min      |       avg        |        sum        |       mad       |    gender\n+------------------+---------------+------------------+-------------------+-----------------+---------------\n+132335.1          |23532.72       |975179.5463883684 |-637388.2516376646 |33398.4963099631 |null\n+155409.30000000002|24139.08       |1009778.6217005679|-2178038.0602625553|24031.90651906518|F\n+151745.40000000002|24110.25       |937180.7539433916 |-3491578.2056075027|32956.9126691267 |M\n+;\n+\n+countWithScalarsAndGroupBy\n+schema::cnt1:l|cnt2:l|gender:s\n+SELECT count(DISTINCT CASE WHEN (languages - 1) > 3 THEN (languages + 3) * 1.2 ELSE (languages - 1) * 2.7 END) AS \"cnt1\",\n+count(CASE WHEN (languages - 2) > 2 THEN (languages + 5) * 1.2 ELSE ((languages / 0.87) - 11) * 2.7 END) AS \"cnt2\",\n+gender\n+FROM test_emp GROUP BY gender ORDER BY gender;\n+\n+     cnt1      |     cnt2      |    gender\n+---------------+---------------+---------------\n+4              |10             |null\n+5              |30             |F\n+5              |50             |M\n+;\n+\n+aggregatesWithScalarsAndGroupByOrderByAgg\n+schema::max:d|gender:s\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+gender\n+FROM test_emp GROUP BY gender ORDER BY max DESC;\n+\n+       max        |    gender\n+------------------+---------------\n+155409.30000000002|F\n+151745.40000000002|M\n+132335.1          |null\n+;\n+\n+aggregatesWithScalarsAndGroupByOrderByAggWithoutProjection\n+schema::gender:s\n+SELECT gender FROM test_emp GROUP BY gender ORDER BY MAX(salary % 100) DESC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMzE0NA==", "bodyText": "I like the complexities of these tests, but the queries are too complex for me to assess that the example is relevant :-). I trust that you checked the numbers against the data and made sure everything is ok.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409513144", "createdAt": "2020-04-16T12:23:56Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec", "diffHunk": "@@ -899,3 +899,196 @@ SELECT gender, MAD(salary) AS mad FROM test_emp GROUP BY gender HAVING mad > 100\n null           |10789.0        \n F              |12719.0         \n ;\n+\n+\n+// aggregates with scalars\n+aggregateFunctionsWithScalars\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+MIN(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"min\",\n+AVG(cos(salary * 1.2) + 100 * (salary / 5)) AS \"avg\",\n+SUM(-salary / 0.765 + sin((salary + 12345) / 12)) AS \"sum\",\n+MAD(abs(salary / -0.813) / 2 + (12345 * (salary % 10))) AS \"mad\"\n+FROM test_emp;\n+\n+       max        |      min      |       avg       |       sum        |       mad\n+------------------+---------------+-----------------+------------------+-----------------\n+155409.30000000002|23532.72       |964937.9295477575|-6307004.517507723|30811.76199261993\n+;\n+\n+countWithScalars\n+schema::cnt1:l|cnt2:l\n+SELECT count(DISTINCT CASE WHEN (languages - 1) > 3 THEN (languages + 3) * 1.2 ELSE (languages - 1) * 2.7 END) AS \"cnt1\",\n+count(CASE WHEN (languages - 2) > 2 THEN (languages + 5) * 1.2 ELSE ((languages / 0.87) - 11) * 2.7 END) AS \"cnt2\"\n+FROM test_emp;\n+\n+   cnt1   |  cnt2\n+----------+-------\n+5         | 90\n+;\n+\n+aggregateFunctionsWithScalarsAndGroupBy\n+schema::max:d|min:d|avg:d|sum:d|mad:d|gender:s\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+MIN(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"min\",\n+AVG(cos(salary * 1.2) + 100 * (salary / 5)) AS \"avg\",\n+SUM(-salary / 0.765 + sin((salary + 12345) / 12)) AS \"sum\",\n+MAD(abs(salary / -0.813) / 2 + (12345 * (salary % 10))) AS \"mad\",\n+gender\n+FROM test_emp GROUP BY gender ORDER BY gender;\n+\n+       max        |      min      |       avg        |        sum        |       mad       |    gender\n+------------------+---------------+------------------+-------------------+-----------------+---------------\n+132335.1          |23532.72       |975179.5463883684 |-637388.2516376646 |33398.4963099631 |null\n+155409.30000000002|24139.08       |1009778.6217005679|-2178038.0602625553|24031.90651906518|F\n+151745.40000000002|24110.25       |937180.7539433916 |-3491578.2056075027|32956.9126691267 |M\n+;\n+\n+countWithScalarsAndGroupBy\n+schema::cnt1:l|cnt2:l|gender:s\n+SELECT count(DISTINCT CASE WHEN (languages - 1) > 3 THEN (languages + 3) * 1.2 ELSE (languages - 1) * 2.7 END) AS \"cnt1\",\n+count(CASE WHEN (languages - 2) > 2 THEN (languages + 5) * 1.2 ELSE ((languages / 0.87) - 11) * 2.7 END) AS \"cnt2\",\n+gender\n+FROM test_emp GROUP BY gender ORDER BY gender;\n+\n+     cnt1      |     cnt2      |    gender\n+---------------+---------------+---------------\n+4              |10             |null\n+5              |30             |F\n+5              |50             |M\n+;\n+\n+aggregatesWithScalarsAndGroupByOrderByAgg\n+schema::max:d|gender:s\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+gender\n+FROM test_emp GROUP BY gender ORDER BY max DESC;\n+\n+       max        |    gender\n+------------------+---------------\n+155409.30000000002|F\n+151745.40000000002|M\n+132335.1          |null\n+;\n+\n+aggregatesWithScalarsAndGroupByOrderByAggWithoutProjection\n+schema::gender:s\n+SELECT gender FROM test_emp GROUP BY gender ORDER BY MAX(salary % 100) DESC;\n+\n+    gender\n+---------------\n+M\n+null\n+F\n+;\n+\n+topHitsWithScalars\n+schema::first:s|last:s|gender:s\n+SELECT FIRST(concat('aa_', substring(first_name, 3, 10)), birth_date) AS first,\n+LAST(concat('bb_', substring(last_name, 4, 8)), birth_date) AS last,\n+gender\n+FROM test_emp GROUP BY gender ORDER By gender;\n+\n+     first     |     last      |    gender\n+---------------+---------------+---------------\n+aa_llian       |bb_kki         |null\n+aa_mant        |bb_zuma        |F\n+aa_mzi         |bb_ton         |M\n+;\n+\n+aggregateFunctionsWithScalarsAndGroupByAndHaving\n+schema::max:d|min:d|gender:s\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+MIN(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"min\",\n+gender FROM test_emp\n+GROUP BY gender HAVING max > 152000 or min > 24000 ORDER BY gender;\n+\n+       max        |      min      |    gender\n+------------------+---------------+---------------\n+155409.30000000002|24139.08       |F\n+151745.40000000002|24110.25       |M\n+;\n+\n+aggregateFunctionsWithScalarsAndGroupByAndHaving_ComplexExpressions\n+schema::max:d|min:d|gender:s\n+SELECT ABS((MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) + 123) / -100) AS \"max\",\n+cos(MIN(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) % 100) AS \"min\",\n+gender\n+FROM test_emp\n+GROUP BY gender HAVING (max / 10) + 10 > 165  OR ABS(min * -100) > 60 ORDER BY gender;\n+\n+       max        |        min        |    gender\n+------------------+-------------------+---------------\n+1555.323          |0.1887687166044111 |F\n+1518.6840000000002|-0.6783938504738453|M\n+;\n+\n+aggregateFunctionsWithScalarsAndGroupByAndHaving_CombinedFields\n+schema::min:d|max:d|gender:s\n+SELECT MIN(ABS(salary * (languages / - 20.0))) AS \"min\",\n+MAX(salary / ((languages / 3.0) + 1)) AS \"max\",\n+gender\n+FROM test_emp\n+GROUP BY gender HAVING (min::long) / 120 > 12 OR ROUND(max) / 10 > 5200 ORDER BY gender;\n+\n+      min      |      max      |    gender\n+---------------+---------------+---------------\n+2436.75        |55287.75       |null\n+1401.75        |52508.25       |M\n+;\n+\n+aggregateFunctionsWithScalarsAndGroupByAndHavingConvertedToStats\n+schema::max:d|min:d|gender:s\n+SELECT MAX(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"max\",\n+MIN(CASE WHEN (salary - 10) > 70000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"min\",\n+gender FROM test_emp\n+GROUP BY gender HAVING max > 155000 or min > 36000 ORDER BY gender;\n+\n+       max        |       min        |    gender\n+------------------+------------------+---------------\n+155409.30000000002|36803.700000000004|F\n+151745.40000000002|36720.0           |M\n+;\n+\n+percentileAggregateFunctionsWithScalars\n+schema::percentile:d|percentile_rank:d|gender:s\n+SELECT PERCENTILE(CASE WHEN (salary / 2) > 10000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END, 80) AS \"percentile\",\n+PERCENTILE_RANK(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END, 40000) AS \"percentile_rank\",\n+gender FROM test_emp\n+GROUP BY gender ORDER BY gender;\n+\n+   percentile    | percentile_rank  |    gender\n+-----------------+------------------+---------------\n+86857.79999999999|32.69659025378865 |null\n+94042.92000000001|37.03569653103581 |F\n+87348.36         |44.337514210592246|M\n+;\n+\n+extendedStatsAggregateFunctionsWithScalars\n+schema::stddev_pop:d|sum_of_squares:d|var_pop:d|gender:s\n+SELECT STDDEV_POP(CASE WHEN (salary / 2) > 10000 THEN (salary + 12345) * 1.2 ELSE (salary - 12345) * 2.7 END) AS \"stddev_pop\",\n+SUM_OF_SQUARES(CASE WHEN (salary - 20) > 50000 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"sum_of_squares\",\n+VAR_POP(CASE WHEN (salary - 20) % 1000 > 200 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"var_pop\",\n+gender FROM test_emp\n+GROUP BY gender ORDER BY gender;\n+\n+    stddev_pop    |   sum_of_squares    |      var_pop       |    gender\n+------------------+---------------------+--------------------+---------------\n+16752.73244172422 |3.06310583829007E10  |3.460331137445282E8 |null\n+17427.462400181845|1.148127725047658E11 |3.1723426960671306E8|F\n+15702.798665784752|1.5882243113919238E11|2.529402043805585E8 |M\n+;\n+\n+extendedStatsAggregateFunctionsWithScalarAndSameArg\n+schema::stddev_pop:d|sum_of_squares:d|var_pop:d|gender:s\n+SELECT STDDEV_POP(CASE WHEN (salary - 20) % 1000 > 200 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"stddev_pop\",\n+SUM_OF_SQUARES(CASE WHEN (salary - 20) % 1000 > 200 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"sum_of_squares\",\n+VAR_POP(CASE WHEN (salary - 20) % 1000 > 200 THEN (salary * 1.2) - 1234 ELSE (salary - 20) * 0.93 END) AS \"var_pop\",\n+gender FROM test_emp\n+GROUP BY gender ORDER BY gender;\n+\n+    stddev_pop    |   sum_of_squares    |      var_pop       |    gender\n+------------------+---------------------+--------------------+---------------\n+18601.965319409886|3.4461553130896095E10|3.460331137445282E8 |null\n+17811.071545718776|1.2151168881502939E11|3.1723426960671306E8|F\n+15904.093950318531|1.699198993070239E11 |2.529402043805585E8 |M\n+;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA==", "bodyText": "Can this error message be improved?\n\nwhy is it mentioning matrix stats, isn't this an implementation detail?\nnot a biggie and can be left as is, but can the message be more targeted to the exact aggregate function? (mention only KURTOSIS or SKEWNESS)", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409519334", "createdAt": "2020-04-16T12:34:29Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -535,104 +528,122 @@ protected LeafAgg toAgg(String id, Count c) {\n \n         @Override\n         protected LeafAgg toAgg(String id, Sum s) {\n-            return new SumAgg(id, field(s));\n+            return new SumAgg(id, asFieldOrLiteralOrScript(s));\n         }\n     }\n \n     static class Avgs extends SingleValueAggTranslator<Avg> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Avg a) {\n-            return new AvgAgg(id, field(a));\n+            return new AvgAgg(id, asFieldOrLiteralOrScript(a));\n         }\n     }\n \n     static class Maxes extends SingleValueAggTranslator<Max> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Max m) {\n-            return new MaxAgg(id, field(m));\n+            return new MaxAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class Mins extends SingleValueAggTranslator<Min> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Min m) {\n-            return new MinAgg(id, field(m));\n+            return new MinAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class MADs extends SingleValueAggTranslator<MedianAbsoluteDeviation> {\n         @Override\n         protected LeafAgg toAgg(String id, MedianAbsoluteDeviation m) {\n-            return new MedianAbsoluteDeviationAgg(id, field(m));\n+            return new MedianAbsoluteDeviationAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class Firsts extends TopHitsAggTranslator<First> {\n \n         @Override\n         protected LeafAgg toAgg(String id, First f) {\n-            return new TopHitsAgg(id, topAggsField(f, f.field()), f.dataType(),\n-                topAggsField(f, f.orderField()), f.orderField() == null ? null : f.orderField().dataType(), SortOrder.ASC);\n+            return new TopHitsAgg(\n+                id,\n+                asFieldOrLiteralOrScript(f, f.field()),\n+                f.dataType(),\n+                asFieldOrLiteralOrScript(f, f.orderField()),\n+                f.orderField() == null ? null : f.orderField().dataType(),\n+                SortOrder.ASC\n+            );\n         }\n     }\n \n     static class Lasts extends TopHitsAggTranslator<Last> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Last l) {\n-            return new TopHitsAgg(id, topAggsField(l, l.field()), l.dataType(),\n-                topAggsField(l, l.orderField()), l.orderField() == null ? null : l.orderField().dataType(), SortOrder.DESC);\n+            return new TopHitsAgg(\n+                id,\n+                asFieldOrLiteralOrScript(l, l.field()),\n+                l.dataType(),\n+                asFieldOrLiteralOrScript(l, l.orderField()),\n+                l.orderField() == null ? null : l.orderField().dataType(),\n+                SortOrder.DESC\n+            );\n         }\n     }\n \n     static class StatsAggs extends CompoundAggTranslator<Stats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Stats s) {\n-            return new StatsAgg(id, field(s));\n+            return new StatsAgg(id, asFieldOrLiteralOrScript(s));\n         }\n     }\n \n     static class ExtendedStatsAggs extends CompoundAggTranslator<ExtendedStats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, ExtendedStats e) {\n-            return new ExtendedStatsAgg(id, field(e));\n+            return new ExtendedStatsAgg(id, asFieldOrLiteralOrScript(e));\n         }\n     }\n \n     static class MatrixStatsAggs extends CompoundAggTranslator<MatrixStats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, MatrixStats m) {\n-            return new MatrixStatsAgg(id, singletonList(field(m)));\n+            if (isFieldOrLiteral(m.field())) {\n+                return new MatrixStatsAgg(id, singletonList(field(m, m.field())));\n+            }\n+            throw new SqlIllegalArgumentException(\n+                \"Cannot use scalar functions or operators: [{}] in matrix stats \" + \"aggregate functions [KURTOSIS] and [SKEWNESS]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUyMDIxNQ==", "bodyText": "You could move this call as the first in the constructor, no?", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409520215", "createdAt": "2020-04-16T12:35:57Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -16,24 +16,25 @@\n public abstract class Agg {\n \n     private final String id;\n-    private final String fieldName;\n+    private final AggTarget target;\n \n-    Agg(String id, String fieldName) {\n+    Agg(String id, AggTarget target) {\n         this.id = id;\n-        this.fieldName = fieldName;\n+        Objects.requireNonNull(target, \"AggTarget must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86f701e647277d51821a62934282ca13455cb38c", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/86f701e647277d51821a62934282ca13455cb38c", "committedDate": "2020-04-16T12:43:08Z", "message": "rename class and method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45458799873cac06dc903e2ba57e12d5657e1a77", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/45458799873cac06dc903e2ba57e12d5657e1a77", "committedDate": "2020-04-16T12:52:30Z", "message": "address more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dc7a8118538a0189c646602219c89329c5183fa", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/4dc7a8118538a0189c646602219c89329c5183fa", "committedDate": "2020-04-16T12:59:14Z", "message": "fix docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODk1MjQz", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-394895243", "createdAt": "2020-04-16T18:29:54Z", "commit": {"oid": "4dc7a8118538a0189c646602219c89329c5183fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODoyOTo1NFrOGGyDWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODoyOTo1NFrOGGyDWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc2NDY5OA==", "bodyText": "I think it's worth adding examples in the docs (either a dedicated one or for most aggregations) that shows aggregations alongside a scalar function as it might not be obvious, especially for existing users.\nThis would also address @astefan point of having a test that can be easily be verified.", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409764698", "createdAt": "2020-04-16T18:29:54Z", "author": {"login": "costin"}, "path": "docs/reference/sql/functions/aggs.asciidoc", "diffHunk": "@@ -397,6 +397,16 @@ https://en.wikipedia.org/wiki/Kurtosis[Quantify] the shape of the distribution o\n include-tagged::{sql-specs}/docs/docs.csv-spec[aggKurtosis]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dc7a8118538a0189c646602219c89329c5183fa"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTAwNTM2", "url": "https://github.com/elastic/elasticsearch/pull/55241#pullrequestreview-394900536", "createdAt": "2020-04-16T18:36:58Z", "commit": {"oid": "4dc7a8118538a0189c646602219c89329c5183fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a54145dd53cf8f1d3b49313c0212df7ab61f8dfd", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/a54145dd53cf8f1d3b49313c0212df7ab61f8dfd", "committedDate": "2020-04-16T19:49:14Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126460bacaa6fa49ce12e076cd3e722fa8745bd3", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/126460bacaa6fa49ce12e076cd3e722fa8745bd3", "committedDate": "2020-04-16T19:59:19Z", "message": "fix imports"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3375, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}