{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzA0MTc0", "number": 53296, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzowNjo1NFrODmYnzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzowNjo1NFrODmYnzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTc1ODg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzowNjo1NFrOFzxbYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxOTowN1rOFzx5xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMTUyMw==", "bodyText": "You can still hit the bug if the source configs is smaller than the index sort ? Since we're looking for the biggest prefix of the index sort maybe we could leave the for loop as it is but add a check that breaks the loop if the source configs length is reached:\nif (i >= sourceConfigs.length) {\n  break;\n}", "url": "https://github.com/elastic/elasticsearch/pull/53296#discussion_r389831523", "createdAt": "2020-03-09T17:06:54Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java", "diffHunk": "@@ -202,7 +202,8 @@ private Sort buildIndexSortPrefix(LeafReaderContext context) throws IOException\n             return null;\n         }\n         List<SortField> sortFields = new ArrayList<>();\n-        for (int i = 0; i < indexSort.getSort().length; i++) {\n+        int max = Math.min(indexSort.getSort().length, sourceConfigs.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86c88cfb465e8a28693828447215b458a5eb79b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTkzNQ==", "bodyText": "I think the way I have it covers both cases, right?", "url": "https://github.com/elastic/elasticsearch/pull/53296#discussion_r389835935", "createdAt": "2020-03-09T17:13:54Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java", "diffHunk": "@@ -202,7 +202,8 @@ private Sort buildIndexSortPrefix(LeafReaderContext context) throws IOException\n             return null;\n         }\n         List<SortField> sortFields = new ArrayList<>();\n-        for (int i = 0; i < indexSort.getSort().length; i++) {\n+        int max = Math.min(indexSort.getSort().length, sourceConfigs.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMTUyMw=="}, "originalCommit": {"oid": "a86c88cfb465e8a28693828447215b458a5eb79b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzOTMwMA==", "bodyText": "oh right, I read the variable named max and thought that you were extracting the max of the length :(", "url": "https://github.com/elastic/elasticsearch/pull/53296#discussion_r389839300", "createdAt": "2020-03-09T17:19:07Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java", "diffHunk": "@@ -202,7 +202,8 @@ private Sort buildIndexSortPrefix(LeafReaderContext context) throws IOException\n             return null;\n         }\n         List<SortField> sortFields = new ArrayList<>();\n-        for (int i = 0; i < indexSort.getSort().length; i++) {\n+        int max = Math.min(indexSort.getSort().length, sourceConfigs.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMTUyMw=="}, "originalCommit": {"oid": "a86c88cfb465e8a28693828447215b458a5eb79b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3371, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}