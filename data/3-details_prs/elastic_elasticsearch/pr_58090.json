{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MzIxMjI4", "number": 58090, "title": "Improve threadpool usage and error handling for API key validation", "bodyText": "The PR introduces following two changes:\n\nMove API key validation into a new separate threadpool\nReturn more informative response on threadpool saturation\n\nThe new threadpool is created separately with half of the available processors and 1000 in queue size. We could combine it with the existing TokenService's threadpool. Technically it is straightforward, but I am not sure whether it could be a rushed optimization since I am not clear about potential impact on the token service.\nOn threadpoool saturation, it now fails with EsRejectedExecutionException which in turns gives back a 429 status code to users. Note this is also a subtle behaviour change: Previously any failures during API key validation are translated into \"unsuccessful but continue to realm authentication\". After the change, threadpool saturation error is translated into \"unsuccessful and terminate authentication\". The difference will manifest iteself when user sends in two set of credentials, e.g. one for API key and one for basic auth. Before the change, authentication will continue with the basic auth and if it is valid, authentication will end up as successful. After the change, the authentication stops at API key when pool is saturated and does not proceed further. When threadpool is saturated, it is highly likely that users do want the API key authentication (otherwise the pool will not be saturated in the first place). Hence I doubt any user would really depend on the existing behaviour. (edit: this is not a concern since the code does not allow multiple Authorization headers. Thanks @jkakavas)\nResolves: #58088", "createdAt": "2020-06-15T06:33:50Z", "url": "https://github.com/elastic/elasticsearch/pull/58090", "merged": true, "mergeCommit": {"oid": "7dcfd45ec95cb1d1200dc62d1708e0f4551d707b"}, "closed": true, "closedAt": "2020-07-06T06:00:19Z", "author": {"login": "ywangd"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcraa2UgH2gAyNDM0MzIxMjI4OjgwMTg1MjIxMTU0NGRkMmY2MTdhYmFlM2RiMjAzYjI2ZGEwZmUzNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyJdkIAH2gAyNDM0MzIxMjI4OjFmNzFmNDdlN2RlZTNmNDA0NTY4Y2I0OTlkYWNlYzRmMzhiZjk0Yzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "801852211544dd2f617abae3db203b26da0fe34b", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/801852211544dd2f617abae3db203b26da0fe34b", "committedDate": "2020-06-15T06:11:41Z", "message": "Add separat thread pool for API key hashing\n\nAlso return 429 when either GET or the hashing thread pool is saturated."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85ff0354ba2b38f648446b19d7bab9c63a440c4a", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/85ff0354ba2b38f648446b19d7bab9c63a440c4a", "committedDate": "2020-06-15T07:57:04Z", "message": "Fix bug where threadpool size can be 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "202a5a8b0fc8ce7f137bcebd29b3c6de68c06549", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/202a5a8b0fc8ce7f137bcebd29b3c6de68c06549", "committedDate": "2020-06-15T08:33:02Z", "message": "Fix test threadpool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "121581e65300e4572456216f1310e83ae612130f", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/121581e65300e4572456216f1310e83ae612130f", "committedDate": "2020-06-15T11:53:27Z", "message": "Only push expansive hash computation to new thread pool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTk0MDYw", "url": "https://github.com/elastic/elasticsearch/pull/58090#pullrequestreview-430594060", "createdAt": "2020-06-15T12:27:19Z", "commit": {"oid": "121581e65300e4572456216f1310e83ae612130f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjoyNzoxOVrOGjv-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjoyNzoxOVrOGjv-Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzOTMxOQ==", "bodyText": "The specified executor will only be used when the future is being computed, i.e. expensive hashing is underway. In this case, the API key is not yet cached, so change it to use the separate hashing pool which are dedicated to uncached API keys. If the future is already computed, it is handled in the same thread and the executor will not be used at all (i.e. does not affect cached API key auth).", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r440139319", "createdAt": "2020-06-15T12:27:19Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -466,25 +480,33 @@ void validateApiKeyCredentials(String docId, Map<String, Object> source, ApiKeyC\n                                 validateApiKeyCredentials(docId, source, credentials, clock, listener);\n                             }\n                         }, listener::onFailure),\n-                        threadPool.generic(), threadPool.getThreadContext());\n+                        threadPool.executor(THREAD_POOL_NAME), threadPool.getThreadContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121581e65300e4572456216f1310e83ae612130f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aac19ad3c5513e25616ac2653a0326949c0346ce", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/aac19ad3c5513e25616ac2653a0326949c0346ce", "committedDate": "2020-06-15T12:37:28Z", "message": "Avoid forking if current thread is already for api-key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzM2MjM4", "url": "https://github.com/elastic/elasticsearch/pull/58090#pullrequestreview-431336238", "createdAt": "2020-06-16T09:44:04Z", "commit": {"oid": "aac19ad3c5513e25616ac2653a0326949c0346ce"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NDowNFrOGkTpKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTo1NDo0NlrOGkX1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzc1Mw==", "bodyText": "GH doesn't allow me to comment on the line above. My intention is to comment on:\nvalidateApiKeyCredentials(docId, source, credentials, clock, listener);\n\n\nIn general I think it is very tricky to decide between listener.onFailure, listener.onRestponse(AuthenticationResult.unsuccessful and listener.onRestponse(AuthenticationResult.terminate and I think you did a good job of not changing existing behaviour unless necessary.\nWhat I would suggest is that we \"contain\" the if (ExceptionsHelper.unwrapCause(e) instanceof EsRejectedExecutionException) { as much as possible. There are conflicting goals at play, but I would prefer :\n         executeAsyncWithOrigin(ctx, SECURITY_ORIGIN, getRequest, ActionListener.<GetResponse>wrap(response -> {\n                 if (response.isExists()) {\n                     final Map<String, Object> source = response.getSource();\n-                    validateApiKeyCredentials(docId, source, credentials, clock, listener);\n+                    validateApiKeyCredentials(docId, source, credentials, clock, ActionListener.delegateResponse(listener,\n+                            (l, e) -> {\n+                                if (ExceptionsHelper.unwrapCause(e) instanceof EsRejectedExecutionException) {\n+                                    listener.onResponse(AuthenticationResult.terminate(\"server is too busy to respond\", e));\n+                                } else {\n+                                    listener.onResponse(AuthenticationResult.unsuccessful(\n+                                            \"apikey authentication for id \" + credentials.getId() + \" encountered a failure\",e));\n+                                }\n+                            }));\n                 } else {\n                     listener.onResponse(\n                         AuthenticationResult.unsuccessful(\"unable to find apikey with id \" + credentials.getId(), null));\n\nbecause this way we contain this particular exception handling only to a single method loadApiKeyAndValidateCredentials which I think is a reasonable place (i.e. it's a method that returns response failures ).", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r440723753", "createdAt": "2020-06-16T09:44:04Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -334,8 +342,14 @@ private void loadApiKeyAndValidateCredentials(ThreadContext ctx, ApiKeyCredentia\n                         AuthenticationResult.unsuccessful(\"unable to find apikey with id \" + credentials.getId(), null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac19ad3c5513e25616ac2653a0326949c0346ce"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTg1NQ==", "bodyText": "I would avoid this special handling at this level because I believe it's relatively difficult to figure out the cases this branch covers. It would be OKish if this were the only place, but it's not. Please see comment below for my suggestion.", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r440725855", "createdAt": "2020-06-16T09:47:40Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -307,7 +311,11 @@ void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<Authentic\n                     },\n                     e -> {\n                         credentials.close();\n-                        listener.onFailure(e);\n+                        if (ExceptionsHelper.unwrapCause(e) instanceof EsRejectedExecutionException) {\n+                            listener.onResponse(AuthenticationResult.terminate(\"server is too busy to respond\", e));\n+                        } else {\n+                            listener.onFailure(e);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac19ad3c5513e25616ac2653a0326949c0346ce"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc3ODUyNw==", "bodyText": "It's a bit of a grey area, but I would lean more on using the generic threadPool for these lightweight listeners. The purpose of using a dedicated bounded work queue and thread pool is to limit the amount of expensive tasks, otherwise it would be reasonable to enqueue unlimited requests (they are limited by other considerations such as memory). I feel like these small tasks add noise to the work queue dedicated to expensive tasks.", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r440778527", "createdAt": "2020-06-16T11:26:41Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -466,25 +480,33 @@ void validateApiKeyCredentials(String docId, Map<String, Object> source, ApiKeyC\n                                 validateApiKeyCredentials(docId, source, credentials, clock, listener);\n                             }\n                         }, listener::onFailure),\n-                        threadPool.generic(), threadPool.getThreadContext());\n+                        threadPool.executor(THREAD_POOL_NAME), threadPool.getThreadContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzOTMxOQ=="}, "originalCommit": {"oid": "121581e65300e4572456216f1310e83ae612130f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MzIyNg==", "bodyText": "Personal preference, move this inside the listener, so it's closer to the use and destroy place.", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r440783226", "createdAt": "2020-06-16T11:36:18Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -552,14 +574,17 @@ static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {\n     }\n \n     // Protected instance method so this can be mocked\n-    protected boolean verifyKeyAgainstHash(String apiKeyHash, ApiKeyCredentials credentials) {\n+    protected void verifyKeyAgainstHash(String apiKeyHash, ApiKeyCredentials credentials, ActionListener<Boolean> listener) {\n         final char[] apiKeyHashChars = apiKeyHash.toCharArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac19ad3c5513e25616ac2653a0326949c0346ce"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5MjM5OQ==", "bodyText": "This optimisation is a nice touch, but it doesn't jibe with my comment above about only keeping expensive hashing on the dedicated thread pool.", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r440792399", "createdAt": "2020-06-16T11:54:46Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java", "diffHunk": "@@ -552,14 +574,17 @@ static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {\n     }\n \n     // Protected instance method so this can be mocked\n-    protected boolean verifyKeyAgainstHash(String apiKeyHash, ApiKeyCredentials credentials) {\n+    protected void verifyKeyAgainstHash(String apiKeyHash, ApiKeyCredentials credentials, ActionListener<Boolean> listener) {\n         final char[] apiKeyHashChars = apiKeyHash.toCharArray();\n-        try {\n-            Hasher hasher = Hasher.resolveFromHash(apiKeyHash.toCharArray());\n-            return hasher.verify(credentials.getKey(), apiKeyHashChars);\n-        } finally {\n-            Arrays.fill(apiKeyHashChars, (char) 0);\n-        }\n+        Hasher hasher = Hasher.resolveFromHash(apiKeyHash.toCharArray());\n+        final String executorName = Thread.currentThread().getName().contains(THREAD_POOL_NAME) ? ThreadPool.Names.SAME : THREAD_POOL_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac19ad3c5513e25616ac2653a0326949c0346ce"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56927ff1d445c34e920ba920a3eb24930c23885", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/a56927ff1d445c34e920ba920a3eb24930c23885", "committedDate": "2020-06-17T05:13:18Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "770b2467c297e2634448f77983870b5ece258889", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/770b2467c297e2634448f77983870b5ece258889", "committedDate": "2020-06-17T05:26:20Z", "message": "Minor tweak"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTQyNzAz", "url": "https://github.com/elastic/elasticsearch/pull/58090#pullrequestreview-432142703", "createdAt": "2020-06-17T07:47:45Z", "commit": {"oid": "770b2467c297e2634448f77983870b5ece258889"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0Nzo0NVrOGk5yCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0Nzo0NVrOGk5yCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODYxOA==", "bodyText": "Note by using half of the allocated processors, initial authentiation of API keys, i.e. warming up the cache, could be up to twice as slow as current implemention.", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r441348618", "createdAt": "2020-06-17T07:47:45Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "diffHunk": "@@ -992,9 +993,14 @@ public AsyncSender interceptSender(AsyncSender sender) {\n     @Override\n     public List<ExecutorBuilder<?>> getExecutorBuilders(final Settings settings) {\n         if (enabled) {\n-            return Collections.singletonList(\n-                    new FixedExecutorBuilder(settings, TokenService.THREAD_POOL_NAME, 1, 1000, \"xpack.security.authc.token.thread_pool\",\n-                        false));\n+            final int allocatedProcessors = EsExecutors.allocatedProcessors(settings);\n+            return List.of(\n+                new FixedExecutorBuilder(settings, TokenService.THREAD_POOL_NAME, 1, 1000,\n+                    \"xpack.security.authc.token.thread_pool\", false),\n+                new FixedExecutorBuilder(settings, ApiKeyService.THREAD_POOL_NAME,\n+                    (allocatedProcessors + 1) / 2, 1000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "770b2467c297e2634448f77983870b5ece258889"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjI3MDEw", "url": "https://github.com/elastic/elasticsearch/pull/58090#pullrequestreview-433227010", "createdAt": "2020-06-18T12:22:59Z", "commit": {"oid": "770b2467c297e2634448f77983870b5ece258889"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjoyMjo1OVrOGls1Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjozMzo1NFrOGltNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4NTA0Ng==", "bodyText": "This is not how the EsThreadPoolExecutor handles over-capacity. The test below as well.", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r442185046", "createdAt": "2020-06-18T12:22:59Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyServiceTests.java", "diffHunk": "@@ -602,6 +610,83 @@ public void testWillGetLookedUpByRealmTypeIfExists() {\n         assertEquals(\"looked_up_by_type\", ApiKeyService.getCreatorRealmType(authentication));\n     }\n \n+    public void testAuthWillTerminateIfGetThreadPoolIsSaturated() throws ExecutionException, InterruptedException {\n+        final String apiKey = randomAlphaOfLength(16);\n+        final ApiKeyCredentials creds = new ApiKeyCredentials(randomAlphaOfLength(12), new SecureString(apiKey.toCharArray()));\n+        writeCredentialsToThreadContext(creds);\n+        SecurityMocks.mockGetRequestException(client, new EsRejectedExecutionException(\"rejected\"));\n+        ApiKeyService service = createApiKeyService(Settings.EMPTY);\n+        final PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>();\n+        service.authenticateWithApiKeyIfPresent(threadPool.getThreadContext(), future);\n+        final AuthenticationResult authenticationResult = future.get();\n+        assertEquals(AuthenticationResult.Status.TERMINATE, authenticationResult.getStatus());\n+        assertThat(authenticationResult.getMessage(), containsString(\"server is too busy to respond\"));\n+    }\n+\n+    public void testAuthWillTerminateIfHashingThreadPoolIsSaturated() throws IOException, ExecutionException, InterruptedException {\n+        final String apiKey = randomAlphaOfLength(16);\n+        final ApiKeyCredentials creds = new ApiKeyCredentials(randomAlphaOfLength(12), new SecureString(apiKey.toCharArray()));\n+        writeCredentialsToThreadContext(creds);\n+\n+        Hasher hasher = randomFrom(Hasher.PBKDF2, Hasher.BCRYPT4, Hasher.BCRYPT);\n+        final char[] hash = hasher.hash(new SecureString(apiKey.toCharArray()));\n+        Map<String, Object> sourceMap = buildApiKeySourceDoc(hash);\n+        mockSourceDocument(creds.getId(), sourceMap);\n+        final ExecutorService mockExecutorService = mock(ExecutorService.class);\n+        when(threadPool.executor(ApiKeyService.THREAD_POOL_NAME)).thenReturn(mockExecutorService);\n+        Mockito.doThrow(new EsRejectedExecutionException(\"rejected\")).when(mockExecutorService).execute(any(Runnable.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "770b2467c297e2634448f77983870b5ece258889"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE5MTExNQ==", "bodyText": "The maximum theoretical throughput of new (previously unseen) API key validations will indeed halve, but I'm not personally worried about it. We're talking about the theoretical maximum throughput which, because of the contention on the get threadpool, and because there are many thread pools overbooking the available processors, it's not something I would consider practically important.\nYet, a possible mitigation would be to decrease (halve) the default hashing cost factor for API Keys. GIven the length of the random api key secret that we generate, we would still remain out of the brute force plausibility range.", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r442191115", "createdAt": "2020-06-18T12:33:54Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "diffHunk": "@@ -992,9 +993,14 @@ public AsyncSender interceptSender(AsyncSender sender) {\n     @Override\n     public List<ExecutorBuilder<?>> getExecutorBuilders(final Settings settings) {\n         if (enabled) {\n-            return Collections.singletonList(\n-                    new FixedExecutorBuilder(settings, TokenService.THREAD_POOL_NAME, 1, 1000, \"xpack.security.authc.token.thread_pool\",\n-                        false));\n+            final int allocatedProcessors = EsExecutors.allocatedProcessors(settings);\n+            return List.of(\n+                new FixedExecutorBuilder(settings, TokenService.THREAD_POOL_NAME, 1, 1000,\n+                    \"xpack.security.authc.token.thread_pool\", false),\n+                new FixedExecutorBuilder(settings, ApiKeyService.THREAD_POOL_NAME,\n+                    (allocatedProcessors + 1) / 2, 1000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODYxOA=="}, "originalCommit": {"oid": "770b2467c297e2634448f77983870b5ece258889"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c1c27f6103fec620a267c0b89899457fda807ed", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c1c27f6103fec620a267c0b89899457fda807ed", "committedDate": "2020-06-22T23:36:11Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06baa99c601c6592f6ea243e787233ff908193e0", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/06baa99c601c6592f6ea243e787233ff908193e0", "committedDate": "2020-06-22T23:36:36Z", "message": "Merge remote-tracking branch 'origin/master' into es-58088-hashing-thread-pool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjY5NDY0", "url": "https://github.com/elastic/elasticsearch/pull/58090#pullrequestreview-436269464", "createdAt": "2020-06-24T01:46:56Z", "commit": {"oid": "06baa99c601c6592f6ea243e787233ff908193e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTo0Njo1NlrOGoAJzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTo0Njo1NlrOGoAJzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5ODczMg==", "bodyText": "I think we should name this thread pool in a more generic way to reflect the intent that it be used for all password hashing.\nSomething like security-password-hash feels better to me than security-api-key", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r444598732", "createdAt": "2020-06-24T01:46:56Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "diffHunk": "@@ -992,9 +993,14 @@ public AsyncSender interceptSender(AsyncSender sender) {\n     @Override\n     public List<ExecutorBuilder<?>> getExecutorBuilders(final Settings settings) {\n         if (enabled) {\n-            return Collections.singletonList(\n-                    new FixedExecutorBuilder(settings, TokenService.THREAD_POOL_NAME, 1, 1000, \"xpack.security.authc.token.thread_pool\",\n-                        false));\n+            final int allocatedProcessors = EsExecutors.allocatedProcessors(settings);\n+            return List.of(\n+                new FixedExecutorBuilder(settings, TokenService.THREAD_POOL_NAME, 1, 1000,\n+                    \"xpack.security.authc.token.thread_pool\", false),\n+                new FixedExecutorBuilder(settings, ApiKeyService.THREAD_POOL_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06baa99c601c6592f6ea243e787233ff908193e0"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ec11fea59945c7cc5f150578a3a7bb55a1d2ce", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/57ec11fea59945c7cc5f150578a3a7bb55a1d2ce", "committedDate": "2020-06-29T06:45:59Z", "message": "Address feedback to add 429 status code test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ed0ed44f896d41b907037f97c7eb7cb81e01d1", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/39ed0ed44f896d41b907037f97c7eb7cb81e01d1", "committedDate": "2020-06-29T06:46:06Z", "message": "Merge remote-tracking branch 'origin/master' into es-58088-hashing-thread-pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c71e2d45ab114142e26f98d5f176e7190778ff01", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/c71e2d45ab114142e26f98d5f176e7190778ff01", "committedDate": "2020-06-29T06:51:52Z", "message": "CheckStyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c4e560389a906fa8ff5dff87a40adadb5470199", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/8c4e560389a906fa8ff5dff87a40adadb5470199", "committedDate": "2020-06-29T08:15:03Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTA5MzEz", "url": "https://github.com/elastic/elasticsearch/pull/58090#pullrequestreview-442109313", "createdAt": "2020-07-03T02:18:33Z", "commit": {"oid": "8c4e560389a906fa8ff5dff87a40adadb5470199"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjoxODozM1rOGshx1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjoxOTo1NVrOGshzJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0Mzk1Nw==", "bodyText": "This 1000 is based on the SECURITY_CRYPTO_THREAD_POOL_NAME queue size, correct?\nCan we extract it to a variable so that its meaning is clear?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    IntStream.range(0, 1000).forEach(i -> executorService.submit(() -> {}));\n          \n          \n            \n                    // Fill the whole queue for the crypto thread pool\n          \n          \n            \n                    final int queueSize = 1000;\n          \n          \n            \n                    IntStream.range(0, queueSize).forEach(i -> executorService.submit(() -> {}));", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r449343957", "createdAt": "2020-07-03T02:18:33Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -823,6 +833,60 @@ public void testDerivedKeys() throws ExecutionException, InterruptedException {\n         assertApiKeyNotCreated(client, \"key-5\");\n     }\n \n+    public void testAuthenticationReturns429WhenThreadPoolIsSaturated() throws IOException, InterruptedException {\n+        final String nodeName = randomFrom(internalCluster().getNodeNames());\n+        final Settings settings = internalCluster().getInstance(Settings.class, nodeName);\n+        final ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, nodeName);\n+\n+        final RoleDescriptor descriptor = new RoleDescriptor(\"auth_only\", new String[] { }, null, null);\n+        final Client client = client().filterWithHeader(Collections.singletonMap(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+        final CreateApiKeyResponse createApiKeyResponse = new CreateApiKeyRequestBuilder(client)\n+            .setName(\"auth only key\")\n+            .setRoleDescriptors(Collections.singletonList(descriptor))\n+            .get();\n+\n+        assertNotNull(createApiKeyResponse.getId());\n+        assertNotNull(createApiKeyResponse.getKey());\n+\n+        final List<NodeInfo> nodeInfos = client().admin().cluster().prepareNodesInfo().get().getNodes().stream()\n+            .filter(nodeInfo -> nodeInfo.getNode().getName().equals(nodeName))\n+            .collect(Collectors.toList());\n+\n+        final ExecutorService executorService = threadPool.executor(SECURITY_CRYPTO_THREAD_POOL_NAME);\n+        final int allocatedProcessors = EsExecutors.allocatedProcessors(settings);\n+        final int numberOfThreads = (allocatedProcessors + 1) / 2;\n+        final CountDownLatch blockingLatch = new CountDownLatch(1);\n+        final CountDownLatch readyLatch = new CountDownLatch(numberOfThreads);\n+\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            executorService.submit(() -> {\n+                readyLatch.countDown();\n+                try {\n+                    blockingLatch.await();\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+        IntStream.range(0, 1000).forEach(i -> executorService.submit(() -> {}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4e560389a906fa8ff5dff87a40adadb5470199"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0NDI5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertThat(responseException.getMessage(), containsString(\"429 Too Many Requests\"));\n          \n          \n            \n                        assertThat(responseException.getMessage(), containsString(\"429 Too Many Requests\"));\n          \n          \n            \n                        assertThat(responseException.getResponse().getStatusLine().getStatusCode(), is(429));", "url": "https://github.com/elastic/elasticsearch/pull/58090#discussion_r449344293", "createdAt": "2020-07-03T02:19:55Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java", "diffHunk": "@@ -823,6 +833,60 @@ public void testDerivedKeys() throws ExecutionException, InterruptedException {\n         assertApiKeyNotCreated(client, \"key-5\");\n     }\n \n+    public void testAuthenticationReturns429WhenThreadPoolIsSaturated() throws IOException, InterruptedException {\n+        final String nodeName = randomFrom(internalCluster().getNodeNames());\n+        final Settings settings = internalCluster().getInstance(Settings.class, nodeName);\n+        final ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, nodeName);\n+\n+        final RoleDescriptor descriptor = new RoleDescriptor(\"auth_only\", new String[] { }, null, null);\n+        final Client client = client().filterWithHeader(Collections.singletonMap(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+        final CreateApiKeyResponse createApiKeyResponse = new CreateApiKeyRequestBuilder(client)\n+            .setName(\"auth only key\")\n+            .setRoleDescriptors(Collections.singletonList(descriptor))\n+            .get();\n+\n+        assertNotNull(createApiKeyResponse.getId());\n+        assertNotNull(createApiKeyResponse.getKey());\n+\n+        final List<NodeInfo> nodeInfos = client().admin().cluster().prepareNodesInfo().get().getNodes().stream()\n+            .filter(nodeInfo -> nodeInfo.getNode().getName().equals(nodeName))\n+            .collect(Collectors.toList());\n+\n+        final ExecutorService executorService = threadPool.executor(SECURITY_CRYPTO_THREAD_POOL_NAME);\n+        final int allocatedProcessors = EsExecutors.allocatedProcessors(settings);\n+        final int numberOfThreads = (allocatedProcessors + 1) / 2;\n+        final CountDownLatch blockingLatch = new CountDownLatch(1);\n+        final CountDownLatch readyLatch = new CountDownLatch(numberOfThreads);\n+\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            executorService.submit(() -> {\n+                readyLatch.countDown();\n+                try {\n+                    blockingLatch.await();\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+        IntStream.range(0, 1000).forEach(i -> executorService.submit(() -> {}));\n+        readyLatch.await();\n+\n+        try (RestClient restClient = createRestClient(nodeInfos, null, \"http\")) {\n+            final String base64ApiKeyKeyValue = Base64.getEncoder().encodeToString(\n+                (createApiKeyResponse.getId() + \":\" + createApiKeyResponse.getKey().toString()).getBytes(StandardCharsets.UTF_8));\n+\n+            final Request authRequest = new Request(\"GET\", \"_security/_authenticate\");\n+            authRequest.setOptions(RequestOptions.DEFAULT.toBuilder().addHeader(\n+                \"Authorization\", \"ApiKey \" + base64ApiKeyKeyValue).build());\n+            final ResponseException responseException = expectThrows(ResponseException.class, () -> restClient.performRequest(authRequest));\n+            assertThat(responseException.getMessage(), containsString(\"429 Too Many Requests\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4e560389a906fa8ff5dff87a40adadb5470199"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44caad09375fd78afa3814d7e89a28e040b6620", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/d44caad09375fd78afa3814d7e89a28e040b6620", "committedDate": "2020-07-03T04:39:53Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Tim Vernum <tim@adjective.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99a8fafeabb66030ce6b18927e656dcef8e3e643", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/99a8fafeabb66030ce6b18927e656dcef8e3e643", "committedDate": "2020-07-03T05:13:27Z", "message": "Merge remote-tracking branch 'origin/master' into es-58088-hashing-thread-pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "867a35bb95a49a5bd6a7a45c78ccff30fca28ab4", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/867a35bb95a49a5bd6a7a45c78ccff30fca28ab4", "committedDate": "2020-07-03T06:51:54Z", "message": "Merge remote-tracking branch 'origin/master' into es-58088-hashing-thread-pool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzIxNDU1", "url": "https://github.com/elastic/elasticsearch/pull/58090#pullrequestreview-442721455", "createdAt": "2020-07-06T00:32:53Z", "commit": {"oid": "867a35bb95a49a5bd6a7a45c78ccff30fca28ab4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f71f47e7dee3f404568cb499dacec4f38bf94c9", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/1f71f47e7dee3f404568cb499dacec4f38bf94c9", "committedDate": "2020-07-06T04:23:44Z", "message": "Merge remote-tracking branch 'origin/master' into es-58088-hashing-thread-pool"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 661, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}