{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3ODQwMjYx", "number": 65526, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDozNDo0N1rOE-5k8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDozNDo0N1rOE-5k8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzkwNTE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDozNDo0N1rOH8TboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjowMDozOFrOH8VKYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5NDk3Ng==", "bodyText": "Can we use a more descriptive type name than \"O\"?", "url": "https://github.com/elastic/elasticsearch/pull/65526#discussion_r532994976", "createdAt": "2020-12-01T00:34:47Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "diffHunk": "@@ -45,6 +45,71 @@\n      */\n     void onFailure(Exception e);\n \n+    /**\n+     * Creates a listener that wraps this listener, mapping response values via the given mapping function and passing along\n+     * exceptions to this instance.\n+     *\n+     * Notice that it is considered a bug if the listener's onResponse or onFailure fails. onResponse failures will not call onFailure.\n+     *\n+     * If the function fails, the listener's onFailure handler will be called. The principle is that the mapped listener will handle\n+     * exceptions from the mapping function {@code fn} but it is the responsibility of {@code delegate} to handle its own exceptions\n+     * inside `onResponse` and `onFailure`.\n+     *\n+     * @param fn Function to apply to listener response\n+     * @param <T> Response type of the wrapped listener\n+     * @return a listener that maps the received response and then passes it to this instance\n+     */\n+    default <T> ActionListener<T> map(CheckedFunction<T, Response, Exception> fn) {\n+        return new MappedActionListener<>(fn, this);\n+    }\n+\n+    final class MappedActionListener<Response, O> implements ActionListener<Response> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72364c434fd5d73a0ad14e9bcdf78d2f8a2bb00d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMzMyOQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/65526#discussion_r533023329", "createdAt": "2020-12-01T02:00:38Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "diffHunk": "@@ -45,6 +45,71 @@\n      */\n     void onFailure(Exception e);\n \n+    /**\n+     * Creates a listener that wraps this listener, mapping response values via the given mapping function and passing along\n+     * exceptions to this instance.\n+     *\n+     * Notice that it is considered a bug if the listener's onResponse or onFailure fails. onResponse failures will not call onFailure.\n+     *\n+     * If the function fails, the listener's onFailure handler will be called. The principle is that the mapped listener will handle\n+     * exceptions from the mapping function {@code fn} but it is the responsibility of {@code delegate} to handle its own exceptions\n+     * inside `onResponse` and `onFailure`.\n+     *\n+     * @param fn Function to apply to listener response\n+     * @param <T> Response type of the wrapped listener\n+     * @return a listener that maps the received response and then passes it to this instance\n+     */\n+    default <T> ActionListener<T> map(CheckedFunction<T, Response, Exception> fn) {\n+        return new MappedActionListener<>(fn, this);\n+    }\n+\n+    final class MappedActionListener<Response, O> implements ActionListener<Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5NDk3Ng=="}, "originalCommit": {"oid": "72364c434fd5d73a0ad14e9bcdf78d2f8a2bb00d"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1946, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}