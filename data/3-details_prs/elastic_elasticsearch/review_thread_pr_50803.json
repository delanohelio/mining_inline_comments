{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDQ0ODAz", "number": 50803, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzozMToyOFrODW7jlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzozMzowMFrODW7lNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzcxMDMwOnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/KeystoreManagementTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzozMToyOFrOFb93jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODoyODo1NFrOFb_WnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2OTUxOQ==", "bodyText": "Are we only concerned with whether ES starts up?", "url": "https://github.com/elastic/elasticsearch/pull/50803#discussion_r364869519", "createdAt": "2020-01-09T17:31:28Z", "author": {"login": "rjernst"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/KeystoreManagementTests.java", "diffHunk": "@@ -253,6 +258,81 @@ public void test51WrongKeystorePasswordFromFile() throws Exception {\n         }\n     }\n \n+    /**\n+     * Check that we can mount a password-protected keystore to a docker image\n+     * and provide a password via an environment variable.\n+     */\n+    public void test60DockerEnvironmentVariablePassword() throws Exception {\n+        assumeTrue(distribution().isDocker());\n+        String password = \"password\";\n+        Path dockerKeystore = installation.config(\"elasticsearch.keystore\");\n+\n+        Path localKeystoreFile = getKeystoreFileFromDockerContainer(password, dockerKeystore);\n+\n+        // restart ES with password and mounted keystore\n+        Map<Path, Path> volumes = Map.of(localKeystoreFile, dockerKeystore);\n+        Map<String, String> envVars = Map.of(\"KEYSTORE_PASSWORD\", password);\n+        runContainer(distribution(), volumes, envVars);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45858b04bc725dc064335e1b0a7ffa66a84e55c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Mzg1Mg==", "bodyText": "Ah, what a silly oversight. I spent so long trying to get ES to start up that I forgot the line that runs our quick tests. I'll put that in.", "url": "https://github.com/elastic/elasticsearch/pull/50803#discussion_r364893852", "createdAt": "2020-01-09T18:28:54Z", "author": {"login": "williamrandolph"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/KeystoreManagementTests.java", "diffHunk": "@@ -253,6 +258,81 @@ public void test51WrongKeystorePasswordFromFile() throws Exception {\n         }\n     }\n \n+    /**\n+     * Check that we can mount a password-protected keystore to a docker image\n+     * and provide a password via an environment variable.\n+     */\n+    public void test60DockerEnvironmentVariablePassword() throws Exception {\n+        assumeTrue(distribution().isDocker());\n+        String password = \"password\";\n+        Path dockerKeystore = installation.config(\"elasticsearch.keystore\");\n+\n+        Path localKeystoreFile = getKeystoreFileFromDockerContainer(password, dockerKeystore);\n+\n+        // restart ES with password and mounted keystore\n+        Map<Path, Path> volumes = Map.of(localKeystoreFile, dockerKeystore);\n+        Map<String, String> envVars = Map.of(\"KEYSTORE_PASSWORD\", password);\n+        runContainer(distribution(), volumes, envVars);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2OTUxOQ=="}, "originalCommit": {"oid": "a45858b04bc725dc064335e1b0a7ffa66a84e55c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzcxNDQ2OnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/KeystoreManagementTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzozMzowMFrOFb96KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODozMjoyMVrOFb_c4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MDE4NA==", "bodyText": "Future thought: should we have a test utility to grab any file from the container, not just the keystore?", "url": "https://github.com/elastic/elasticsearch/pull/50803#discussion_r364870184", "createdAt": "2020-01-09T17:33:00Z", "author": {"login": "rjernst"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/KeystoreManagementTests.java", "diffHunk": "@@ -253,6 +258,81 @@ public void test51WrongKeystorePasswordFromFile() throws Exception {\n         }\n     }\n \n+    /**\n+     * Check that we can mount a password-protected keystore to a docker image\n+     * and provide a password via an environment variable.\n+     */\n+    public void test60DockerEnvironmentVariablePassword() throws Exception {\n+        assumeTrue(distribution().isDocker());\n+        String password = \"password\";\n+        Path dockerKeystore = installation.config(\"elasticsearch.keystore\");\n+\n+        Path localKeystoreFile = getKeystoreFileFromDockerContainer(password, dockerKeystore);\n+\n+        // restart ES with password and mounted keystore\n+        Map<Path, Path> volumes = Map.of(localKeystoreFile, dockerKeystore);\n+        Map<String, String> envVars = Map.of(\"KEYSTORE_PASSWORD\", password);\n+        runContainer(distribution(), volumes, envVars);\n+    }\n+\n+    /**\n+     * Check that if we provide the wrong password for a mounted and password-protected\n+     * keystore, Elasticsearch doesn't start.\n+     */\n+    public void test61DockerEnvironmentVariableBadPassword() throws Exception {\n+        assumeTrue(distribution().isDocker());\n+        String password = \"password\";\n+        Path dockerKeystore = installation.config(\"elasticsearch.keystore\");\n+\n+        Path localKeystoreFile = getKeystoreFileFromDockerContainer(password, dockerKeystore);\n+\n+        // restart ES with password and mounted keystore\n+        Map<Path, Path> volumes = Map.of(localKeystoreFile, dockerKeystore);\n+        Map<String, String> envVars = Map.of(\"KEYSTORE_PASSWORD\", \"wrong\");\n+        Shell.Result r = runContainerExpectingFailure(distribution(), volumes, envVars);\n+        assertThat(r.stderr, containsString(PASSWORD_ERROR_MESSAGE));\n+    }\n+\n+    /**\n+     * In the Docker context, it's a little bit tricky to get a password-protected\n+     * keystore. All of the utilities we'd want to use are on the Docker image.\n+     * This method mounts a temporary directory to a Docker container, password-protects\n+     * the keystore, and then returns the path of the file that appears in the\n+     * mounted directory (now accessible from the local filesystem).\n+     */\n+    private Path getKeystoreFileFromDockerContainer(String password, Path dockerKeystore) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45858b04bc725dc064335e1b0a7ffa66a84e55c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NTQ1Ng==", "bodyText": "We already do \u2014\u00a0Docker#copyFromContainer. But because I was already using a mounted directory to load the script, it seemed like a fairly clean way to get this specific file.", "url": "https://github.com/elastic/elasticsearch/pull/50803#discussion_r364895456", "createdAt": "2020-01-09T18:32:21Z", "author": {"login": "williamrandolph"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/KeystoreManagementTests.java", "diffHunk": "@@ -253,6 +258,81 @@ public void test51WrongKeystorePasswordFromFile() throws Exception {\n         }\n     }\n \n+    /**\n+     * Check that we can mount a password-protected keystore to a docker image\n+     * and provide a password via an environment variable.\n+     */\n+    public void test60DockerEnvironmentVariablePassword() throws Exception {\n+        assumeTrue(distribution().isDocker());\n+        String password = \"password\";\n+        Path dockerKeystore = installation.config(\"elasticsearch.keystore\");\n+\n+        Path localKeystoreFile = getKeystoreFileFromDockerContainer(password, dockerKeystore);\n+\n+        // restart ES with password and mounted keystore\n+        Map<Path, Path> volumes = Map.of(localKeystoreFile, dockerKeystore);\n+        Map<String, String> envVars = Map.of(\"KEYSTORE_PASSWORD\", password);\n+        runContainer(distribution(), volumes, envVars);\n+    }\n+\n+    /**\n+     * Check that if we provide the wrong password for a mounted and password-protected\n+     * keystore, Elasticsearch doesn't start.\n+     */\n+    public void test61DockerEnvironmentVariableBadPassword() throws Exception {\n+        assumeTrue(distribution().isDocker());\n+        String password = \"password\";\n+        Path dockerKeystore = installation.config(\"elasticsearch.keystore\");\n+\n+        Path localKeystoreFile = getKeystoreFileFromDockerContainer(password, dockerKeystore);\n+\n+        // restart ES with password and mounted keystore\n+        Map<Path, Path> volumes = Map.of(localKeystoreFile, dockerKeystore);\n+        Map<String, String> envVars = Map.of(\"KEYSTORE_PASSWORD\", \"wrong\");\n+        Shell.Result r = runContainerExpectingFailure(distribution(), volumes, envVars);\n+        assertThat(r.stderr, containsString(PASSWORD_ERROR_MESSAGE));\n+    }\n+\n+    /**\n+     * In the Docker context, it's a little bit tricky to get a password-protected\n+     * keystore. All of the utilities we'd want to use are on the Docker image.\n+     * This method mounts a temporary directory to a Docker container, password-protects\n+     * the keystore, and then returns the path of the file that appears in the\n+     * mounted directory (now accessible from the local filesystem).\n+     */\n+    private Path getKeystoreFileFromDockerContainer(String password, Path dockerKeystore) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MDE4NA=="}, "originalCommit": {"oid": "a45858b04bc725dc064335e1b0a7ffa66a84e55c"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4797, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}