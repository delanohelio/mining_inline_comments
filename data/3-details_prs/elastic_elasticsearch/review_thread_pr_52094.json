{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjk3NTMx", "number": 52094, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowOTo1OVrODen8dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MzoyOVrODesNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDM4MzI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowOTo1OVrOFn3anw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowOTo1OVrOFn3anw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0NjcxOQ==", "bodyText": "nit: Add the javadoc line here too\n\nThis method will optionally, authenticate as the anonymous user if the service is configured to allow anonymous access.", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377346719", "createdAt": "2020-02-10T22:09:59Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -149,7 +166,7 @@ public void authenticate(String action, TransportMessage message, User fallbackU\n      */\n     public void authenticate(String action, TransportMessage message,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc191dc58e2e106b2af4ffafd8af73fabea300c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDM4MzU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxMDowN1rOFn3a0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0NDozOVrOFn98Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0Njc3MQ==", "bodyText": "request for change: Can we add the check for fallbackToAnonymous in shouldFallbackToAnonymous() instead so that we call one method instead of this ?", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377346771", "createdAt": "2020-02-10T22:10:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -205,18 +224,21 @@ long getNumInvalidation() {\n         private AuthenticationToken authenticationToken = null;\n         private AuthenticationResult authenticationResult = null;\n \n-        Authenticator(RestRequest request, ActionListener<Authentication> listener) {\n-            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, listener);\n+        Authenticator(RestRequest request, boolean fallbackToAnonymous, ActionListener<Authentication> listener) {\n+            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, fallbackToAnonymous, listener);\n         }\n \n-        Authenticator(String action, TransportMessage message, User fallbackUser, ActionListener<Authentication> listener) {\n-            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message\n-            ), fallbackUser, listener);\n+        Authenticator(String action, TransportMessage message, User fallbackUser, boolean fallbackToAnonymous,\n+                      ActionListener<Authentication> listener) {\n+            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message),\n+                fallbackUser, fallbackToAnonymous, listener);\n         }\n \n-        private Authenticator(AuditableRequest auditableRequest, User fallbackUser, ActionListener<Authentication> listener) {\n+        private Authenticator(AuditableRequest auditableRequest, User fallbackUser, boolean fallbackToAnonymous,\n+                              ActionListener<Authentication> listener) {\n             this.request = auditableRequest;\n             this.fallbackUser = fallbackUser;\n+            this.fallbackToAnonymous = fallbackToAnonymous && shouldFallbackToAnonymous();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc191dc58e2e106b2af4ffafd8af73fabea300c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MjA1OA==", "bodyText": "I chose to move the whole thing up into the service, so that the Authenticator just gets 1 parameter that it can respect.\nLet me know if that seems like a problem and we can talk it through.", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377392058", "createdAt": "2020-02-11T00:14:14Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -205,18 +224,21 @@ long getNumInvalidation() {\n         private AuthenticationToken authenticationToken = null;\n         private AuthenticationResult authenticationResult = null;\n \n-        Authenticator(RestRequest request, ActionListener<Authentication> listener) {\n-            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, listener);\n+        Authenticator(RestRequest request, boolean fallbackToAnonymous, ActionListener<Authentication> listener) {\n+            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, fallbackToAnonymous, listener);\n         }\n \n-        Authenticator(String action, TransportMessage message, User fallbackUser, ActionListener<Authentication> listener) {\n-            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message\n-            ), fallbackUser, listener);\n+        Authenticator(String action, TransportMessage message, User fallbackUser, boolean fallbackToAnonymous,\n+                      ActionListener<Authentication> listener) {\n+            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message),\n+                fallbackUser, fallbackToAnonymous, listener);\n         }\n \n-        private Authenticator(AuditableRequest auditableRequest, User fallbackUser, ActionListener<Authentication> listener) {\n+        private Authenticator(AuditableRequest auditableRequest, User fallbackUser, boolean fallbackToAnonymous,\n+                              ActionListener<Authentication> listener) {\n             this.request = auditableRequest;\n             this.fallbackUser = fallbackUser;\n+            this.fallbackToAnonymous = fallbackToAnonymous && shouldFallbackToAnonymous();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0Njc3MQ=="}, "originalCommit": {"oid": "7fc191dc58e2e106b2af4ffafd8af73fabea300c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzYzOQ==", "bodyText": "+1", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377453639", "createdAt": "2020-02-11T05:44:39Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -205,18 +224,21 @@ long getNumInvalidation() {\n         private AuthenticationToken authenticationToken = null;\n         private AuthenticationResult authenticationResult = null;\n \n-        Authenticator(RestRequest request, ActionListener<Authentication> listener) {\n-            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, listener);\n+        Authenticator(RestRequest request, boolean fallbackToAnonymous, ActionListener<Authentication> listener) {\n+            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, fallbackToAnonymous, listener);\n         }\n \n-        Authenticator(String action, TransportMessage message, User fallbackUser, ActionListener<Authentication> listener) {\n-            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message\n-            ), fallbackUser, listener);\n+        Authenticator(String action, TransportMessage message, User fallbackUser, boolean fallbackToAnonymous,\n+                      ActionListener<Authentication> listener) {\n+            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message),\n+                fallbackUser, fallbackToAnonymous, listener);\n         }\n \n-        private Authenticator(AuditableRequest auditableRequest, User fallbackUser, ActionListener<Authentication> listener) {\n+        private Authenticator(AuditableRequest auditableRequest, User fallbackUser, boolean fallbackToAnonymous,\n+                              ActionListener<Authentication> listener) {\n             this.request = auditableRequest;\n             this.fallbackUser = fallbackUser;\n+            this.fallbackToAnonymous = fallbackToAnonymous && shouldFallbackToAnonymous();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0Njc3MQ=="}, "originalCommit": {"oid": "7fc191dc58e2e106b2af4ffafd8af73fabea300c"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQwODk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxODo0NFrOFn3qIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoxNToxM1rOFn6Mvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MDY5MQ==", "bodyText": "nit: fallback user is checked before the anonymous user so we would never end up with AnonymousUser even if we passed true here. Not sure if worth mentioning in the javadoc, I was just confused while reading the existing one. Maybe something like\n\nWe want to fallback to the SystemUser and this takes precedence, but we explicitly disallow AnonymousUser fallback in order to be future proof\n\nI don't like that much either tbh", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377350691", "createdAt": "2020-02-10T22:18:44Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -150,9 +150,10 @@ the system itself (e.g. pings, update mappings, share relocation, etc...) and we\n          it to the action without an associated user (not via REST or transport - this is taken care of by\n          the {@link Rest} filter and the {@link ServerTransport} filter respectively), it's safe to assume a system user\n          here if a request is not associated with any other user.\n+         Because we want to fallback to the SystemUser, we don't allow anonymous (AnonymousUser) requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc191dc58e2e106b2af4ffafd8af73fabea300c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MjMxOA==", "bodyText": "I've split this method so you can either pass in 1, non-null fallback user, or a boolean to control anonymous access. You can no longer pass both.", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377392318", "createdAt": "2020-02-11T00:15:13Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -150,9 +150,10 @@ the system itself (e.g. pings, update mappings, share relocation, etc...) and we\n          it to the action without an associated user (not via REST or transport - this is taken care of by\n          the {@link Rest} filter and the {@link ServerTransport} filter respectively), it's safe to assume a system user\n          here if a request is not associated with any other user.\n+         Because we want to fallback to the SystemUser, we don't allow anonymous (AnonymousUser) requests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MDY5MQ=="}, "originalCommit": {"oid": "7fc191dc58e2e106b2af4ffafd8af73fabea300c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTA4Mjk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MzoyOVrOFn97lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNTo0NDoxMVrOFoiWSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzQ2MA==", "bodyText": "Since fallbackToAnonymous makes no sense when fallbackUser is passed in and not null, I'm wondering if this is clearer to have a ctor and a #createAuthenticator() without the  fallbackToAnonymous parameter and Objects.notNull for the fallbackUser. It feels like it would be simpler to argue about or understand while reading the code.", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377453460", "createdAt": "2020-02-11T05:43:29Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -208,18 +267,21 @@ long getNumInvalidation() {\n         private AuthenticationToken authenticationToken = null;\n         private AuthenticationResult authenticationResult = null;\n \n-        Authenticator(RestRequest request, ActionListener<Authentication> listener) {\n-            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, listener);\n+        Authenticator(RestRequest request, boolean fallbackToAnonymous, ActionListener<Authentication> listener) {\n+            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, fallbackToAnonymous, listener);\n         }\n \n-        Authenticator(String action, TransportMessage message, User fallbackUser, ActionListener<Authentication> listener) {\n-            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message\n-            ), fallbackUser, listener);\n+        Authenticator(String action, TransportMessage message, User fallbackUser, boolean fallbackToAnonymous,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8404e9faff1b8e3c0bbf8120ea6ae4209959379c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzOTE0NQ==", "bodyText": "The other option is to merge the two options (fallbackUser and fallbacktoAnonymous) into a single field in some way. Right now those two cases in handleNullToken are almost identical.\nThere's just enough minor differences to make it a bit tricky though.\nI could make it a Supplier<Authentication> fallback, but I don't think I'd get anything cleaner than that.", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377539145", "createdAt": "2020-02-11T10:07:46Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -208,18 +267,21 @@ long getNumInvalidation() {\n         private AuthenticationToken authenticationToken = null;\n         private AuthenticationResult authenticationResult = null;\n \n-        Authenticator(RestRequest request, ActionListener<Authentication> listener) {\n-            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, listener);\n+        Authenticator(RestRequest request, boolean fallbackToAnonymous, ActionListener<Authentication> listener) {\n+            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, fallbackToAnonymous, listener);\n         }\n \n-        Authenticator(String action, TransportMessage message, User fallbackUser, ActionListener<Authentication> listener) {\n-            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message\n-            ), fallbackUser, listener);\n+        Authenticator(String action, TransportMessage message, User fallbackUser, boolean fallbackToAnonymous,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzQ2MA=="}, "originalCommit": {"oid": "8404e9faff1b8e3c0bbf8120ea6ae4209959379c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NjAzMQ==", "bodyText": "@jkakavas Let me know if you'd like to see that change. I've implemented it as you suggested for now, but could do more.", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r377546031", "createdAt": "2020-02-11T10:20:53Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -208,18 +267,21 @@ long getNumInvalidation() {\n         private AuthenticationToken authenticationToken = null;\n         private AuthenticationResult authenticationResult = null;\n \n-        Authenticator(RestRequest request, ActionListener<Authentication> listener) {\n-            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, listener);\n+        Authenticator(RestRequest request, boolean fallbackToAnonymous, ActionListener<Authentication> listener) {\n+            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, fallbackToAnonymous, listener);\n         }\n \n-        Authenticator(String action, TransportMessage message, User fallbackUser, ActionListener<Authentication> listener) {\n-            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message\n-            ), fallbackUser, listener);\n+        Authenticator(String action, TransportMessage message, User fallbackUser, boolean fallbackToAnonymous,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzQ2MA=="}, "originalCommit": {"oid": "8404e9faff1b8e3c0bbf8120ea6ae4209959379c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1MDEyMw==", "bodyText": "I think this is clean enough. Maybe we can reconsider additional changes in the refactoring effort that will follow at some point", "url": "https://github.com/elastic/elasticsearch/pull/52094#discussion_r378050123", "createdAt": "2020-02-12T05:44:11Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -208,18 +267,21 @@ long getNumInvalidation() {\n         private AuthenticationToken authenticationToken = null;\n         private AuthenticationResult authenticationResult = null;\n \n-        Authenticator(RestRequest request, ActionListener<Authentication> listener) {\n-            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, listener);\n+        Authenticator(RestRequest request, boolean fallbackToAnonymous, ActionListener<Authentication> listener) {\n+            this(new AuditableRestRequest(auditTrail, failureHandler, threadContext, request), null, fallbackToAnonymous, listener);\n         }\n \n-        Authenticator(String action, TransportMessage message, User fallbackUser, ActionListener<Authentication> listener) {\n-            this(new AuditableTransportRequest(auditTrail, failureHandler, threadContext, action, message\n-            ), fallbackUser, listener);\n+        Authenticator(String action, TransportMessage message, User fallbackUser, boolean fallbackToAnonymous,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzQ2MA=="}, "originalCommit": {"oid": "8404e9faff1b8e3c0bbf8120ea6ae4209959379c"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4853, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}