{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTA3ODUz", "number": 56632, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyMzowMVrOD77LrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyOTowM1rOD77RUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTYyMjIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyMzowMVrOGUi_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyMzowMVrOGUi_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5ODAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return !cppLogHandler().hasLogStreamEnded();\n          \n          \n            \n                    return cppLogHandler().hasLogStreamEnded() == false;\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424198013", "createdAt": "2020-05-13T06:23:01Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java", "diffHunk": "@@ -248,39 +260,43 @@ public ZonedDateTime getProcessStartTime() {\n     @Override\n     public boolean isProcessAlive() {\n         // Sanity check: make sure the process hasn't terminated already\n-        return !cppLogHandler.hasLogStreamEnded();\n+        return !cppLogHandler().hasLogStreamEnded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44420ab96be91f75d146d4a656766a56cf9e617"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTYyOTE2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyNTo0MlrOGUjDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyNTo0MlrOGUjDqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5OTA4Mg==", "bodyText": "Could we also have a similar method for input stream for consistency?\nprivate OutputStream processInStream();", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424199082", "createdAt": "2020-05-13T06:25:42Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java", "diffHunk": "@@ -248,39 +260,43 @@ public ZonedDateTime getProcessStartTime() {\n     @Override\n     public boolean isProcessAlive() {\n         // Sanity check: make sure the process hasn't terminated already\n-        return !cppLogHandler.hasLogStreamEnded();\n+        return !cppLogHandler().hasLogStreamEnded();\n     }\n \n     @Override\n     public boolean isProcessAliveAfterWaiting() {\n-        cppLogHandler.waitForLogStreamClose(Duration.ofMillis(45));\n+        cppLogHandler().waitForLogStreamClose(Duration.ofMillis(45));\n         return isProcessAlive();\n     }\n \n     @Override\n     public String readError() {\n-        return cppLogHandler.getErrors();\n+        return cppLogHandler().getErrors();\n     }\n \n     protected String jobId() {\n         return jobId;\n     }\n \n     protected InputStream processOutStream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44420ab96be91f75d146d4a656766a56cf9e617"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTYzNjY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/ProcessPipes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjoyOTowM1rOGUjIMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MTowM1rOGUllAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMDI0MQ==", "bodyText": "Why do we need both assert and if statements?\nIs it because asserts can get optimized away?", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424200241", "createdAt": "2020-05-13T06:29:03Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/ProcessPipes.java", "diffHunk": "@@ -118,19 +119,35 @@ public void addArgs(List<String> command) {\n     }\n \n     /**\n-     * Connect the pipes created by the C++ process.  This must be called after the corresponding C++ process has been started.\n+     * Connect the log pipe created by the C++ process.  The must be connected before any other pipes <em>and a thread must be\n+     * started to read from it</em>so that there is no risk of messages logged in between creation of the other pipes on the C++\n+     * side from blocking due to filling up the named pipe's buffer, and hence deadlocking communications between that process\n+     * and this JVM.\n+     * @param timeout Needs to be long enough for the C++ process perform all startup tasks that precede creation of named pipes.\n+     *                There should not be very many of these, so a short timeout should be fine.  However, at least a couple of\n+     *                seconds is recommended due to the vagaries of process scheduling and the way VMs can completely stall for\n+     *                some hypervisor actions.\n+     */\n+    public void connectLogStream(Duration timeout) throws IOException {\n+        logStreamHandler = new CppLogMessageHandler(jobId, namedPipeHelper.openNamedPipeInputStream(logPipeName, timeout));\n+    }\n+\n+    /**\n+     * Connect the other pipes created by the C++ process after the logging pipe has been connected.  This must be called after\n+     * the corresponding C++ process has been started, and after {@link #connectLogStream}.\n      * @param timeout Needs to be long enough for the C++ process perform all startup tasks that precede creation of named pipes.\n      *                There should not be very many of these, so a short timeout should be fine.  However, at least a couple of\n      *                seconds is recommended due to the vagaries of process scheduling and the way VMs can completely stall for\n      *                some hypervisor actions.\n      */\n-    public void connectStreams(Duration timeout) throws IOException {\n+    public void connectOtherStreams(Duration timeout) throws IOException {\n+        assert logStreamHandler != null : \"Must connect log stream before other streams\";\n+        if (logStreamHandler == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44420ab96be91f75d146d4a656766a56cf9e617"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MDM4Ng==", "bodyText": "Yes, in production we run with assertions disabled.  So the assertion is to make CI fail instantly if the condition is violated (as it indicates a mistake in the program, not an environmental or user problem).  But if the mistake did somehow make it into production then we'll get a normal exception.", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424240386", "createdAt": "2020-05-13T07:51:03Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/ProcessPipes.java", "diffHunk": "@@ -118,19 +119,35 @@ public void addArgs(List<String> command) {\n     }\n \n     /**\n-     * Connect the pipes created by the C++ process.  This must be called after the corresponding C++ process has been started.\n+     * Connect the log pipe created by the C++ process.  The must be connected before any other pipes <em>and a thread must be\n+     * started to read from it</em>so that there is no risk of messages logged in between creation of the other pipes on the C++\n+     * side from blocking due to filling up the named pipe's buffer, and hence deadlocking communications between that process\n+     * and this JVM.\n+     * @param timeout Needs to be long enough for the C++ process perform all startup tasks that precede creation of named pipes.\n+     *                There should not be very many of these, so a short timeout should be fine.  However, at least a couple of\n+     *                seconds is recommended due to the vagaries of process scheduling and the way VMs can completely stall for\n+     *                some hypervisor actions.\n+     */\n+    public void connectLogStream(Duration timeout) throws IOException {\n+        logStreamHandler = new CppLogMessageHandler(jobId, namedPipeHelper.openNamedPipeInputStream(logPipeName, timeout));\n+    }\n+\n+    /**\n+     * Connect the other pipes created by the C++ process after the logging pipe has been connected.  This must be called after\n+     * the corresponding C++ process has been started, and after {@link #connectLogStream}.\n      * @param timeout Needs to be long enough for the C++ process perform all startup tasks that precede creation of named pipes.\n      *                There should not be very many of these, so a short timeout should be fine.  However, at least a couple of\n      *                seconds is recommended due to the vagaries of process scheduling and the way VMs can completely stall for\n      *                some hypervisor actions.\n      */\n-    public void connectStreams(Duration timeout) throws IOException {\n+    public void connectOtherStreams(Duration timeout) throws IOException {\n+        assert logStreamHandler != null : \"Must connect log stream before other streams\";\n+        if (logStreamHandler == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMDI0MQ=="}, "originalCommit": {"oid": "c44420ab96be91f75d146d4a656766a56cf9e617"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 472, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}