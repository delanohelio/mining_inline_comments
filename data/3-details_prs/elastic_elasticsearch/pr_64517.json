{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTk5NDEx", "number": 64517, "title": "Adding API for generating SAML SP metadata", "bodyText": "Adding API for generating SAML SP metadata\nResolves #49018", "createdAt": "2020-11-03T09:25:44Z", "url": "https://github.com/elastic/elasticsearch/pull/64517", "merged": true, "mergeCommit": {"oid": "ad658c6fb70db74593d4e6652b011d9142f17f90"}, "closed": true, "closedAt": "2020-11-06T09:09:21Z", "author": {"login": "BigPandaToo"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY1rVRgH2gAyNTE0NTk5NDExOjg2MGZkMzAwMTdkZTVjNDNhZjBkYTE4ODg2NDBjNDkxZWFiNWUwZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZylZ1gH2gAyNTE0NTk5NDExOmEzYmQ5MzU5MzAwMTZhMGExYzFiOThiMTZiZDU2ODdiMjI0MGY0YmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/860fd30017de5c43af0da1888640c491eab5e0f0", "committedDate": "2020-11-03T09:23:43Z", "message": "Adding API for generating SAML SP metadata\nResolve #49018"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMzMzMzk3", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-522333397", "createdAt": "2020-11-03T09:52:58Z", "commit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTo1Mjo1OFrOHsnNIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDo0MDowNVrOHso_3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0MTczMQ==", "bodyText": "Since the request object only contains the realm name, we can use the realm name instead of the request object", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516541731", "createdAt": "2020-11-03T09:52:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjE5Mw==", "bodyText": "Given that we search by name and we do not allow multple realms of the same type with the same name ( this would even fail in the YAML validation of the settings as they'd have the same key ) this can never happen. The other places that call findSamlRealms potentially pass an acsUrl and this is why they need to handle possible multiple results. We can leave this here in the spirit of defensive coding  I think", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516546193", "createdAt": "2020-11-03T09:59:48Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0ODc4OQ==", "bodyText": "I think we should extract all the Metadata building functionality in a separate class ( ie. see SamlIdpMetadataBuilder ) and use this in the SamlMetadataCommand and here, instead of calling methods of SamlMetadataCommand in this transport action", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516548789", "createdAt": "2020-11-03T10:04:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0OTU3Ng==", "bodyText": "since we will be returing the XML metadata as a value in json, it doesn't make much sens to add indentation", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516549576", "createdAt": "2020-11-03T10:05:24Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSPMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final EntityDescriptor descriptor = SamlMetadataCommand.buildEntityDescriptorFromSamlRealm(realm);\n+            final Element element = marshaller.marshall(descriptor);\n+            final StringWriter writer = new StringWriter();\n+            final Transformer serializer = SamlUtils.getHardenedXMLTransformer();\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1NzE1Mw==", "bodyText": "This is not used. In general when you have a single field that you don't want to maipulate somehow, you don't need a static inner class for this as you can call the relevant setter in the request object directly when declaring the field in the parser", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516557153", "createdAt": "2020-11-03T10:17:14Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {\n+\n+    static class Input {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1ODQ4NA==", "bodyText": "This is a GET API so it doesn't make sense to expect a parameter in the body of the request. We should get the realm from a request parameter instead", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516558484", "createdAt": "2020-11-03T10:19:27Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {\n+\n+    static class Input {\n+        String realm;\n+        void setRealm(String realm) {\n+            this.realm = realm;\n+        }\n+    }\n+\n+    static final ObjectParser<SamlSPMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",\n+        SamlSPMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareStringOrNull(SamlSPMetadataRequest::setRealmName, new ParseField(\"realm\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzU2MQ==", "bodyText": "suggestion: \"Realm name may not be empty\"", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516563561", "createdAt": "2020-11-03T10:27:50Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSPMetadataRequest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class SamlSPMetadataRequest extends ActionRequest {\n+\n+    String realmName;\n+\n+    public SamlSPMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        realmName = in.readOptionalString();\n+    }\n+\n+    public SamlSPMetadataRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (Strings.hasText(realmName) == false) {\n+            validationException = addValidationError(\"realm may not be empty\", validationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzczMw==", "bodyText": "This should be part of another class, see my comments in TransportSamlSPMetadataAction", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516567733", "createdAt": "2020-11-03T10:34:35Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java", "diffHunk": "@@ -93,6 +93,18 @@ public static void main(String[] args) throws Exception {\n         exit(new SamlMetadataCommand().main(args, Terminal.DEFAULT));\n     }\n \n+    public static EntityDescriptor buildEntityDescriptorFromSamlRealm(SamlRealm samlRealm) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2ODYwMg==", "bodyText": "This affects all files, but I'll make it only once here:\nnit: We should either use xxxxSpMetadatayyyyyy.java or xxxxServiceProviderMetadatayyyy.java for the class names", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516568602", "createdAt": "2020-11-03T10:36:01Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MDE5MA==", "bodyText": "let's call the field metadata, xml is redundant as it is obvious and we don't offer any other format of metadata", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516570190", "createdAt": "2020-11-03T10:38:36Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {\n+\n+    static class Input {\n+        String realm;\n+        void setRealm(String realm) {\n+            this.realm = realm;\n+        }\n+    }\n+\n+    static final ObjectParser<SamlSPMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",\n+        SamlSPMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareStringOrNull(SamlSPMetadataRequest::setRealmName, new ParseField(\"realm\"));\n+    }\n+\n+    public RestSamlSPMetadataAction(Settings settings, XPackLicenseState licenseState) {\n+        super(settings, licenseState);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return Collections.singletonList(\n+            new Route(GET, \"/_security/saml/metadata\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"security_saml_metadata_action\";\n+    }\n+\n+    @Override\n+    public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        try (XContentParser parser = request.contentParser()) {\n+            final SamlSPMetadataRequest SamlSPRequest = PARSER.parse(parser, null);\n+            return channel -> client.execute(SamlSPMetadataAction.INSTANCE, SamlSPRequest,\n+                new RestBuilderListener<SamlSPMetadataResponse>(channel) {\n+                @Override\n+                public RestResponse buildResponse(SamlSPMetadataResponse response, XContentBuilder builder) throws Exception {\n+                    builder.startObject();\n+                    builder.field(\"xml_metadata\", response.getXMLString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MTEwMQ==", "bodyText": "nit: s/Internal exception/Error. Also maybe add the realm name in the message here for easier debugging.", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516571101", "createdAt": "2020-11-03T10:40:05Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSPMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final EntityDescriptor descriptor = SamlMetadataCommand.buildEntityDescriptorFromSamlRealm(realm);\n+            final Element element = marshaller.marshall(descriptor);\n+            final StringWriter writer = new StringWriter();\n+            final Transformer serializer = SamlUtils.getHardenedXMLTransformer();\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            serializer.transform(new DOMSource(element), new StreamResult(writer));\n+            listener.onResponse(new SamlSPMetadataResponse(writer.toString()));\n+        } catch (Exception e) {\n+            logger.debug(\"Internal exception during SAML SP metadata generation\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860fd30017de5c43af0da1888640c491eab5e0f0"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75b6c953ad4261dccdd15f7d47d44a7dfdf7ef21", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/75b6c953ad4261dccdd15f7d47d44a7dfdf7ef21", "committedDate": "2020-11-03T14:48:19Z", "message": "Merge branch 'master' into SAML_SP_API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/1180e645b6b156be2af38bed936c6a3da95d7386", "committedDate": "2020-11-03T22:18:12Z", "message": "Adding API for generating SAML SP metadata\nResolves #49018"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDk4Njkx", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523098691", "createdAt": "2020-11-04T07:31:12Z", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzozMToxMlrOHtL3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzozMTo0MVrOHtL37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjMxMA==", "bodyText": "Is it intentional that this is admin rather monitor?", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517142310", "createdAt": "2020-11-04T07:31:12Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+public class SamlSpMetadataAction extends ActionType<SamlSpMetadataResponse> {\n+    public static final String NAME = \"cluster:admin/xpack/security/saml/metadata\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjUwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String realmName;\n          \n          \n            \n                private String realmName;", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517142509", "createdAt": "2020-11-04T07:31:41Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class SamlSpMetadataRequest extends ActionRequest {\n+\n+    String realmName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTQ2MDc3", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523146077", "createdAt": "2020-11-04T08:45:57Z", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NTo1N1rOHtOJFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NTo1N1rOHtOJFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTY3MQ==", "bodyText": "So I had missed we already have SamlSpMetadataBuilder. This is great because we could use that and not introduce SamlEntityDescriptorBuilder. You already have everything you need there to use in the Transport action I think.\nTo be more concrete, buildEntityDescriptorFromSamlRealm that you already had in SamlMetadataCommand, could live in the transport action ( as a method of its own or as part of prepareMetadata ) and make use of SamlSpMetadataBuilder", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517179671", "createdAt": "2020-11-04T08:45:57Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.cli.ExitCodes;\n+import org.elasticsearch.cli.Terminal;\n+import org.elasticsearch.cli.UserException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.security.authc.RealmConfig;\n+import org.elasticsearch.xpack.core.security.authc.RealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.saml.SamlRealmSettings;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class SamlEntityDescriptorBuilder {\n+    private final EntityDescriptor entityDescriptor;\n+\n+    public EntityDescriptor getEntityDescriptor() {\n+        return entityDescriptor;\n+    }\n+\n+    public SamlEntityDescriptorBuilder(SamlRealm samlRealm) throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTQ3MDg1", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523147085", "createdAt": "2020-11-04T08:47:21Z", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NzoyMVrOHtOMHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0NzoyMVrOHtOMHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MDQ0NA==", "bodyText": "This is probably irrelevant now, if we remove this class after all but it wouldn't make much sense for user input related code to be here and not in the Command class", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517180444", "createdAt": "2020-11-04T08:47:21Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.cli.ExitCodes;\n+import org.elasticsearch.cli.Terminal;\n+import org.elasticsearch.cli.UserException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.security.authc.RealmConfig;\n+import org.elasticsearch.xpack.core.security.authc.RealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.saml.SamlRealmSettings;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class SamlEntityDescriptorBuilder {\n+    private final EntityDescriptor entityDescriptor;\n+\n+    public EntityDescriptor getEntityDescriptor() {\n+        return entityDescriptor;\n+    }\n+\n+    public SamlEntityDescriptorBuilder(SamlRealm samlRealm) throws Exception{\n+        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();\n+        final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(samlRealm)\n+            .encryptionCredentials(spConfig.getEncryptionCredentials())\n+            .signingCredential(spConfig.getSigningConfiguration().getCredential())\n+            .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME));\n+        entityDescriptor = builder.build();\n+    }\n+\n+    public SamlEntityDescriptorBuilder(RealmConfig realm, boolean batch, String serviceName, String orgName, String orgUrl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTQ3OTU4", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523147958", "createdAt": "2020-11-04T08:48:32Z", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0ODozM1rOHtOOlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0ODozM1rOHtOOlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MTA3OA==", "bodyText": "You don't need a parser now that there is nothing to parse.", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517181078", "createdAt": "2020-11-04T08:48:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSpMetadataAction extends SamlBaseRestHandler {\n+\n+    static final ObjectParser<SamlSpMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTQ5MjIw", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523149220", "createdAt": "2020-11-04T08:50:17Z", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo1MDoxN1rOHtOSoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo1MDoxN1rOHtOSoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MjExMw==", "bodyText": "ctor can have the realm name as a parameter", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517182113", "createdAt": "2020-11-04T08:50:17Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class SamlSpMetadataRequest extends ActionRequest {\n+\n+    String realmName;\n+\n+    public SamlSpMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        realmName = in.readOptionalString();\n+    }\n+\n+    public SamlSpMetadataRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTUxMDM4", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523151038", "createdAt": "2020-11-04T08:52:43Z", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo1Mjo0M1rOHtOYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo1Mjo0M1rOHtOYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MzU4Mw==", "bodyText": "You can get the realm param first and call the ctor with it", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517183583", "createdAt": "2020-11-04T08:52:43Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSpMetadataAction extends SamlBaseRestHandler {\n+\n+    static final ObjectParser<SamlSpMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",\n+        SamlSpMetadataRequest::new);\n+\n+    public RestSamlSpMetadataAction(Settings settings, XPackLicenseState licenseState) {\n+        super(settings, licenseState);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return Collections.singletonList(\n+            new Route(GET, \"/_security/saml/metadata/{realm}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"security_saml_metadata_action\";\n+    }\n+\n+    @Override\n+    public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        try (XContentParser parser = request.contentParser()) {\n+            final SamlSpMetadataRequest SamlSpRequest = PARSER.parse(parser, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTUyMDAy", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523152002", "createdAt": "2020-11-04T08:53:58Z", "commit": {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b18d9f85d73afa7404d9924d396f993400e89ef", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/1b18d9f85d73afa7404d9924d396f993400e89ef", "committedDate": "2020-11-04T14:42:50Z", "message": "Adding API for generating SAML SP metadata\nResolves #49018"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/82f663f5f268f3882e682ce82662c21656caa876", "committedDate": "2020-11-04T15:26:35Z", "message": "Merge branch 'master' into SAML_SP_API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDk3Nzc2", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-523497776", "createdAt": "2020-11-04T15:55:16Z", "commit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTo1NToxN1rOHteeYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoxMTowN1rOHtfMGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0NzI2Nw==", "bodyText": "It doesn't make much sense to get the SpConfiguration from the SamlLogoutHandler in this case ( or in general I guess ) . How about we add a getter for private final SpConfiguration serviceProvider; in SamlRealm ?", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517447267", "createdAt": "2020-11-04T15:55:17Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -95,6 +96,30 @@ public SamlSpMetadataBuilder(Locale locale, String entityId) {\n         this.authnRequestsSigned = Boolean.FALSE;\n     }\n \n+    /**\n+     * @param samlRealm   SamlRealm for which SP Metadata is built\n+     */\n+    public SamlSpMetadataBuilder(SamlRealm samlRealm) {\n+        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0ODk1Mw==", "bodyText": "I'd argue we don't need the extra constructor here - it kinda goes against the Builder Pattern. How about something like\nfinal SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(locale, spConfig.getEntityId())\n                .assertionConsumerServiceUrl(spConfig.getAscUrl())\n                ....\n                anything else we want to set from the spConfiguration here\n                .....\n                );\n\nin the transport action?", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517448953", "createdAt": "2020-11-04T15:57:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -95,6 +96,30 @@ public SamlSpMetadataBuilder(Locale locale, String entityId) {\n         this.authnRequestsSigned = Boolean.FALSE;\n     }\n \n+    /**\n+     * @param samlRealm   SamlRealm for which SP Metadata is built\n+     */\n+    public SamlSpMetadataBuilder(SamlRealm samlRealm) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1MjE1NA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final SamlSpMetadataRequest SamlSpRequest = new SamlSpMetadataRequest(request.param(\"realm\"));\n          \n          \n            \n                    final SamlSpMetadataRequest SamlSpMetadataRequest = new SamlSpMetadataRequest(request.param(\"realm\"));\n          \n      \n    \n    \n  \n\nor any var name that has metadata in it, just for clarity", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517452154", "createdAt": "2020-11-04T16:01:49Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSpMetadataAction extends SamlBaseRestHandler {\n+\n+    public RestSamlSpMetadataAction(Settings settings, XPackLicenseState licenseState) {\n+        super(settings, licenseState);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return Collections.singletonList(\n+            new Route(GET, \"/_security/saml/metadata/{realm}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"security_saml_metadata_action\";\n+    }\n+\n+    @Override\n+    public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        final SamlSpMetadataRequest SamlSpRequest = new SamlSpMetadataRequest(request.param(\"realm\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1NTcxMw==", "bodyText": "Can we undo all the whitespace changes here?", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517455713", "createdAt": "2020-11-04T16:06:37Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java", "diffHunk": "@@ -110,22 +110,22 @@ public SamlMetadataCommand(CheckedFunction<Environment, KeyStoreWrapper, Excepti\n         attributeSpec = parser.accepts(\"attribute\", \"additional SAML attributes to request\").withRequiredArg();\n         orgNameSpec = parser.accepts(\"organisation-name\", \"the name of the organisation operating this service\").withRequiredArg();\n         orgDisplayNameSpec = parser.accepts(\"organisation-display-name\", \"the display-name of the organisation operating this service\")\n-                .availableIf(orgNameSpec).withRequiredArg();\n+            .availableIf(orgNameSpec).withRequiredArg();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1NjAzNQ==", "bodyText": "See comments in the SamlSpMetadataBuilder", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517456035", "createdAt": "2020-11-04T16:07:03Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlSpMetadataBuilder;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSpMetadataAction\n+    extends HandledTransportAction<SamlSpMetadataRequest, SamlSpMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSpMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSpMetadataAction.NAME, transportService, actionFilters, SamlSpMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSpMetadataRequest request,\n+                             ActionListener<SamlSpMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request.getRealmName()));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request.getRealmName()));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSpMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1ODk3MQ==", "bodyText": "The only problematic thing with this is that users with manage_saml would understandably expect to be able to call the API but now they can't. We should add this action name to the MANAGE_SAML_PATTERN in ClusterPrivilegeResolver", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517458971", "createdAt": "2020-11-04T16:11:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+public class SamlSpMetadataAction extends ActionType<SamlSpMetadataResponse> {\n+    public static final String NAME = \"cluster:monitor/xpack/security/saml/metadata\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f663f5f268f3882e682ce82662c21656caa876"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b076e6c7ee10e94232c66429f007728e580fbd14", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/b076e6c7ee10e94232c66429f007728e580fbd14", "committedDate": "2020-11-04T18:12:37Z", "message": "Adding API for generating SAML SP metadata\nResolves #49018"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ac8d2854bdb23c76576fc4092c245a3aa72682e", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/7ac8d2854bdb23c76576fc4092c245a3aa72682e", "committedDate": "2020-11-05T09:22:30Z", "message": "Merge branch 'master' into SAML_SP_API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d1a098e865e36bbfaed54a2f6491885f314c49d", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/9d1a098e865e36bbfaed54a2f6491885f314c49d", "committedDate": "2020-11-05T11:50:48Z", "message": "Adding API for generating SAML SP metadata\nResolves #49018"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaa823b3c4a1588d94affe731150df39d2c43ca0", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/aaa823b3c4a1588d94affe731150df39d2c43ca0", "committedDate": "2020-11-05T11:51:07Z", "message": "Merge branch 'SAML_SP_API' of github.com:BigPandaToo/elasticsearch into SAML_SP_API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "337f23c3fc2111992b206ea9218e8295db4afb44", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/337f23c3fc2111992b206ea9218e8295db4afb44", "committedDate": "2020-11-05T13:21:16Z", "message": "Adding API for generating SAML SP metadata\nResolves #49018"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Mjg2NTUz", "url": "https://github.com/elastic/elasticsearch/pull/64517#pullrequestreview-524286553", "createdAt": "2020-11-05T13:59:46Z", "commit": {"oid": "337f23c3fc2111992b206ea9218e8295db4afb44"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo1OTo0N1rOHuEi_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDowMjowM1rOHuEpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MTAzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(new ParameterizedMessage(\"Error during SAML SP metadata generation for real [{}]\", realm.name()), e);\n          \n          \n            \n                        logger.error(new ParameterizedMessage(\"Error during SAML SP metadata generation for realm [{}]\", realm.name()), e);", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518071038", "createdAt": "2020-11-05T13:59:47Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlSpMetadataBuilder;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.elasticsearch.xpack.security.authc.saml.SpConfiguration;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSpMetadataAction\n+    extends HandledTransportAction<SamlSpMetadataRequest, SamlSpMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSpMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSpMetadataAction.NAME, transportService, actionFilters, SamlSpMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSpMetadataRequest request,\n+                             ActionListener<SamlSpMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request.getRealmName()));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request.getRealmName()));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSpMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final SpConfiguration spConfig = realm.getServiceProvider();\n+            final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(Locale.getDefault(), spConfig.getEntityId())\n+                .assertionConsumerServiceUrl(spConfig.getAscUrl())\n+                .singleLogoutServiceUrl(spConfig.getLogoutUrl())\n+                .encryptionCredentials(spConfig.getEncryptionCredentials())\n+                .signingCredential(spConfig.getSigningConfiguration().getCredential())\n+                .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME));\n+            final EntityDescriptor descriptor = builder.build();\n+            final Element element = marshaller.marshall(descriptor);\n+            final StringWriter writer = new StringWriter();\n+            final Transformer serializer = SamlUtils.getHardenedXMLTransformer();\n+            serializer.transform(new DOMSource(element), new StreamResult(writer));\n+            listener.onResponse(new SamlSpMetadataResponse(writer.toString()));\n+        } catch (Exception e) {\n+            logger.error(new ParameterizedMessage(\"Error during SAML SP metadata generation for real [{}]\", realm.name()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337f23c3fc2111992b206ea9218e8295db4afb44"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MjA2MQ==", "bodyText": "I don't think we need to change this any more since we initialize attributesNames properly in the single ctor of this class.", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518072061", "createdAt": "2020-11-05T14:01:08Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -225,7 +225,7 @@ public EntityDescriptor build() throws Exception {\n             spRoleDescriptor.getNameIDFormats().add(buildNameIdFormat());\n         }\n         spRoleDescriptor.getAssertionConsumerServices().add(buildAssertionConsumerService());\n-        if (attributeNames.size() > 0) {\n+        if (attributeNames != null && attributeNames.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337f23c3fc2111992b206ea9218e8295db4afb44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MjY1Nw==", "bodyText": "Same for contacts, they can't be null", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518072657", "createdAt": "2020-11-05T14:02:03Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -240,7 +240,9 @@ public EntityDescriptor build() throws Exception {\n         if (organization != null) {\n             descriptor.setOrganization(buildOrganization());\n         }\n-        contacts.forEach(c -> descriptor.getContactPersons().add(buildContact(c)));\n+        if(contacts != null && contacts.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337f23c3fc2111992b206ea9218e8295db4afb44"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6567e0f25c293bf099f6fa8da3c32eb906914f34", "author": {"user": {"login": "BigPandaToo", "name": "Lyudmila Fokina"}}, "url": "https://github.com/elastic/elasticsearch/commit/6567e0f25c293bf099f6fa8da3c32eb906914f34", "committedDate": "2020-11-05T15:00:24Z", "message": "Adding API for generating SAML SP metadata\nResolves #49018"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16875172bee6ad25e4477814e69cbf7af111c67e", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/16875172bee6ad25e4477814e69cbf7af111c67e", "committedDate": "2020-11-05T15:30:42Z", "message": "Merge branch 'master' into SAML_SP_API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f3899ea00e6e3a11c9048349a6bb2b3bcfa6b1", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/71f3899ea00e6e3a11c9048349a6bb2b3bcfa6b1", "committedDate": "2020-11-05T18:04:10Z", "message": "Merge branch 'master' into SAML_SP_API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3bd935930016a0a1c1b98b16bd5687b2240f4bc", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/a3bd935930016a0a1c1b98b16bd5687b2240f4bc", "committedDate": "2020-11-06T08:21:27Z", "message": "Merge branch 'master' into SAML_SP_API"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 762, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}