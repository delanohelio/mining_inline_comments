{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjY4MDUz", "number": 54619, "title": "Async search: create internal index only before storing initial response", "bodyText": "We currently create the .async-search index if necessary before performing any action (index, update or delete). Truth is that this is needed only before storing the initial response. The other operations are either update or delete, which will anyways not find the document to update/delete even if the index gets created when missing. This also caused testCancellation failures as we were trying to delete the document twice from the .async-search index, once from TransportDeleteAsyncSearchAction and once as a consequence of the search task being completed. The latter may be called after the test is completed, but before the cluster is shut down and causing problems to the after test checks, for instance if it happens after all the indices have been cleaned up. It is totally fine to try to delete a response that is no longer found, but not quite so if such call will also trigger an index creation.\nWith this commit we remove all the calls to createIndexIfNecessary from the update/delete operation, and we leave one call only from storeInitialResponse which is where the index is expected to be created.\nCloses #54180", "createdAt": "2020-04-01T22:43:52Z", "url": "https://github.com/elastic/elasticsearch/pull/54619", "merged": true, "mergeCommit": {"oid": "1b694776ed8b517581ea28f8ee556ce8176d53ae"}, "closed": true, "closedAt": "2020-04-10T16:19:15Z", "author": {"login": "javanna"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTfkPUgH2gAyMzk3MjY4MDUzOmNkMmNkODc0MGE5ZGU3Y2I0OTQ4ZjAzYWRlOTQ1ODg1YTE1ZDNmNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWQHHQAH2gAyMzk3MjY4MDUzOmIyZjk1NmRlYTUwYmM5YjkzNmQyODBhYzkyNmQyYmJhMzA0ZTAxYTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cd2cd8740a9de7cb4948f03ade945885a15d3f4f", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/cd2cd8740a9de7cb4948f03ade945885a15d3f4f", "committedDate": "2020-04-01T22:37:17Z", "message": "Async search: create internal index if necessary only before storing initial response\n\nWe currently create the .async-search index if necessary before performing any action (index, update or delete). Truth is that this is needed only before storing the initial response. The other operations are either update or delete, which will anyways not find the document to update/delete even if the index gets created when missing. This also caused `testCancellation` failures as we were trying to delete the document twice from the .async-search index, once from `TransportDeleteAsyncSearchAction` and once as a consequence of the search task being completed. The latter may be called after the test is completed, but before the cluster is shut down and causing problems to the after test checks, for instance if it happens after all the indices have been cleaned up. It is totally fine to try to delete a response that is no longer found, but not quite so if such call will also trigger an index creation.\n\nWith this commit we remove all the calls to createIndexIfNecessary from the update/delete operation, and we leave one call only from storeInitialResponse which is where the index is expected to be created.\n\nCloses #54180"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDAwNjEz", "url": "https://github.com/elastic/elasticsearch/pull/54619#pullrequestreview-386000613", "createdAt": "2020-04-01T22:45:08Z", "commit": {"oid": "cd2cd8740a9de7cb4948f03ade945885a15d3f4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo0NTowOFrOF_VSwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo0NTowOFrOF_VSwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzQ3NA==", "bodyText": "I tried to make this logic more readable. I found the boolean flag hard to reason about especially as it was provided true only once. I moved the listener wrapping to the callers, where each caller needs to do something different.", "url": "https://github.com/elastic/elasticsearch/pull/54619#discussion_r401953474", "createdAt": "2020-04-01T22:45:08Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchIndexService.java", "diffHunk": "@@ -194,31 +192,16 @@ void updateExpirationTime(String docId,\n         UpdateRequest request = new UpdateRequest().index(INDEX)\n             .id(docId)\n             .doc(source, XContentType.JSON);\n-        createIndexIfNecessary(ActionListener.wrap(v -> client.update(request, listener), listener::onFailure));\n+        client.update(request, listener);\n     }\n \n     /**\n      * Deletes the provided <code>searchId</code> from the index if present.\n      */\n     void deleteResponse(AsyncSearchId searchId,\n-                        boolean failIfNotFound,\n-                        ActionListener<AcknowledgedResponse> listener) {\n+                        ActionListener<DeleteResponse> listener) {\n         DeleteRequest request = new DeleteRequest(INDEX).id(searchId.getDocId());\n-        createIndexIfNecessary(\n-            ActionListener.wrap(v -> client.delete(request,\n-                ActionListener.wrap(\n-                    resp -> {\n-                        if (resp.status() == RestStatus.NOT_FOUND && failIfNotFound) {\n-                            listener.onFailure(new ResourceNotFoundException(searchId.getEncoded()));\n-                        } else {\n-                            listener.onResponse(new AcknowledgedResponse(true));\n-                        }\n-                    },\n-                    exc -> {\n-                        logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\", searchId.getEncoded()), exc);\n-                        listener.onFailure(exc);\n-                    })),\n-                listener::onFailure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2cd8740a9de7cb4948f03ade945885a15d3f4f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDAwODg0", "url": "https://github.com/elastic/elasticsearch/pull/54619#pullrequestreview-386000884", "createdAt": "2020-04-01T22:45:50Z", "commit": {"oid": "cd2cd8740a9de7cb4948f03ade945885a15d3f4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo0NTo1MVrOF_VTtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo0NTo1MVrOF_VTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzcxOQ==", "bodyText": "I was wondering if we are sure about exc.getCause here. What's the top level exception?", "url": "https://github.com/elastic/elasticsearch/pull/54619#discussion_r401953719", "createdAt": "2020-04-01T22:45:51Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportGetAsyncSearchAction.java", "diffHunk": "@@ -57,8 +59,12 @@ protected void doExecute(Task task, GetAsyncSearchAction.Request request, Action\n                         ActionListener.wrap(\n                             p -> getSearchResponseFromTask(searchId, request, nowInMillis, expirationTime, listener),\n                             exc -> {\n-                                if (exc.getCause() instanceof DocumentMissingException == false) {\n-                                    logger.error(\"failed to retrieve \" + searchId.getEncoded(), exc);\n+                                //don't even log when: the async search document or its index is not found. That can happen if an invalid\n+                                //search id is provided and no async search initial response has been stored yet.\n+                                if (exc.getCause() instanceof DocumentMissingException == false\n+                                    && exc.getCause() instanceof IndexNotFoundException == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2cd8740a9de7cb4948f03ade945885a15d3f4f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e087dbde9a6bbba40d0d30d032e91ca2d6b9090", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/1e087dbde9a6bbba40d0d30d032e91ca2d6b9090", "committedDate": "2020-04-03T07:59:00Z", "message": "Merge branch 'master' into enhancement/async_search_create_index"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDUzNDgy", "url": "https://github.com/elastic/elasticsearch/pull/54619#pullrequestreview-387053482", "createdAt": "2020-04-03T08:24:29Z", "commit": {"oid": "1e087dbde9a6bbba40d0d30d032e91ca2d6b9090"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyNDozMFrOGAKmZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo0NzowN1rOGALzJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNjg1NQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/54619#discussion_r402826855", "createdAt": "2020-04-03T08:24:30Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchIndexService.java", "diffHunk": "@@ -194,31 +192,16 @@ void updateExpirationTime(String docId,\n         UpdateRequest request = new UpdateRequest().index(INDEX)\n             .id(docId)\n             .doc(source, XContentType.JSON);\n-        createIndexIfNecessary(ActionListener.wrap(v -> client.update(request, listener), listener::onFailure));\n+        client.update(request, listener);\n     }\n \n     /**\n      * Deletes the provided <code>searchId</code> from the index if present.\n      */\n     void deleteResponse(AsyncSearchId searchId,\n-                        boolean failIfNotFound,\n-                        ActionListener<AcknowledgedResponse> listener) {\n+                        ActionListener<DeleteResponse> listener) {\n         DeleteRequest request = new DeleteRequest(INDEX).id(searchId.getDocId());\n-        createIndexIfNecessary(\n-            ActionListener.wrap(v -> client.delete(request,\n-                ActionListener.wrap(\n-                    resp -> {\n-                        if (resp.status() == RestStatus.NOT_FOUND && failIfNotFound) {\n-                            listener.onFailure(new ResourceNotFoundException(searchId.getEncoded()));\n-                        } else {\n-                            listener.onResponse(new AcknowledgedResponse(true));\n-                        }\n-                    },\n-                    exc -> {\n-                        logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\", searchId.getEncoded()), exc);\n-                        listener.onFailure(exc);\n-                    })),\n-                listener::onFailure));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzQ3NA=="}, "originalCommit": {"oid": "cd2cd8740a9de7cb4948f03ade945885a15d3f4f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0MzQ1MQ==", "bodyText": "A RemoteTransportException.  Maybe we can replace the instanceof with ExceptionsHelper.status(exc) != RestStatus.NOT_FOUND ?", "url": "https://github.com/elastic/elasticsearch/pull/54619#discussion_r402843451", "createdAt": "2020-04-03T08:43:42Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportGetAsyncSearchAction.java", "diffHunk": "@@ -57,8 +59,12 @@ protected void doExecute(Task task, GetAsyncSearchAction.Request request, Action\n                         ActionListener.wrap(\n                             p -> getSearchResponseFromTask(searchId, request, nowInMillis, expirationTime, listener),\n                             exc -> {\n-                                if (exc.getCause() instanceof DocumentMissingException == false) {\n-                                    logger.error(\"failed to retrieve \" + searchId.getEncoded(), exc);\n+                                //don't even log when: the async search document or its index is not found. That can happen if an invalid\n+                                //search id is provided and no async search initial response has been stored yet.\n+                                if (exc.getCause() instanceof DocumentMissingException == false\n+                                    && exc.getCause() instanceof IndexNotFoundException == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzcxOQ=="}, "originalCommit": {"oid": "cd2cd8740a9de7cb4948f03ade945885a15d3f4f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0NjUwMA==", "bodyText": "We shouldn't fail If the document is missing:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (exc.getCause() instanceof IndexNotFoundException) {\n          \n          \n            \n                                    if (ExceptionsHelper.status(exc) == RestStatus.NOT_FOUND) {", "url": "https://github.com/elastic/elasticsearch/pull/54619#discussion_r402846500", "createdAt": "2020-04-03T08:47:07Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportDeleteAsyncSearchAction.java", "diffHunk": "@@ -58,15 +67,40 @@ protected void doExecute(Task task, DeleteAsyncSearchAction.Request request, Act\n         }\n     }\n \n-    private void cancelTaskAndDeleteResult(AsyncSearchId searchId, ActionListener<AcknowledgedResponse> listener) throws IOException {\n+    void cancelTaskAndDeleteResult(AsyncSearchId searchId, ActionListener<AcknowledgedResponse> listener) throws IOException {\n         AsyncSearchTask task = store.getTask(taskManager, searchId);\n         if (task != null) {\n-            task.cancelTask(() -> store.deleteResponse(searchId, false, listener));\n+            //the task was found and gets cancelled. The response may or may not be found, but we will return 200 anyways.\n+            task.cancelTask(() -> store.deleteResponse(searchId,\n+                ActionListener.wrap(\n+                    r -> listener.onResponse(new AcknowledgedResponse(true)),\n+                    exc -> {\n+                        //the index may not be there (no initial async search response stored yet?): we still want to return 200\n+                        if (exc.getCause() instanceof IndexNotFoundException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e087dbde9a6bbba40d0d30d032e91ca2d6b9090"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bbde18791467d2522dc4159702dcdf61fd1c7e7", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/5bbde18791467d2522dc4159702dcdf61fd1c7e7", "committedDate": "2020-04-10T09:34:14Z", "message": "Merge branch 'master' into enhancement/async_search_create_index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f739f197e0da833a97801d70d73835431c5e4348", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/f739f197e0da833a97801d70d73835431c5e4348", "committedDate": "2020-04-10T12:12:06Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2f956dea50bc9b936d280ac926d2bba304e01a1", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/b2f956dea50bc9b936d280ac926d2bba304e01a1", "committedDate": "2020-04-10T12:18:40Z", "message": "checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1274, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}