{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTU1MTIx", "number": 59094, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozNDowMlrOEL8VEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozOToyN1rOEL8ZvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTU4MjI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozNDowMlrOGtw3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozNDowMlrOGtw3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzOTc2MA==", "bodyText": "This is a really interesting observation! It took me a bit of thinking to convince myself that this is equivalent to the previous equation, but I agree that this makes sense.\nThe next question I had was whether this is the right metric to use after all, since this means that if a bucket is placed between the first and last bucket, its actual location doesn't affect the avgBucketDistance.\nBut upon further consideration I think it definitely makes sense, since this is still just measuring the distance between buckets.", "url": "https://github.com/elastic/elasticsearch/pull/59094#discussion_r450639760", "createdAt": "2020-07-07T06:34:02Z", "author": {"login": "jamesdorfman"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "diffHunk": "@@ -293,17 +283,33 @@ public CollectionPhase collectValue(LeafBucketCollector sub, int doc, double val\n                 collectBucket(sub, doc, numClusters - 1);\n \n                 if(val > clusterCentroids.get(bucketOrd)){\n-                    // Insert just ahead of bucketOrd so that the array remains sorted\n+                    /*\n+                     * If the new value is bigger than the nearest bucket then insert\n+                     * just ahead of bucketOrd so that the array remains sorted.\n+                     */\n                     bucketOrd += 1;\n                 }\n                 moveLastCluster(bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             } else {\n                 addToCluster(bucketOrd, val);\n                 collectExistingBucket(sub, doc, bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             }\n             return this;\n         }\n \n+        private void updateAvgBucketDistanceIfModified(int modifiedBucketOrd) {\n+            if (modifiedBucketOrd == 0 || modifiedBucketOrd == numClusters - 1) {\n+                updateAvgBucketDistance();\n+            }\n+        }\n+\n+        private void updateAvgBucketDistance() {\n+            // Centroids are sorted so the average distance is the difference between the first and last.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956ad7e41e90080662c99593ff814d818d94c02c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTU5NDIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozOToyN1rOGtw_Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyNjo1N1rOGuGVug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MTcxMQ==", "bodyText": "This looks correct for when a centroid is modified. But numClusters is the denominator of the avgBucketDistance equation. So when a new bucket is added I think the distance should be updated regardless of the bucket's position. In that case maybe you can just call updateAvgBucketDistance() directly?\nThis makes sense to me intuitively. If a bucket is added within the existing range of buckets, this should decrease the average bucket distance, since there are more buckets in the same range.", "url": "https://github.com/elastic/elasticsearch/pull/59094#discussion_r450641711", "createdAt": "2020-07-07T06:39:27Z", "author": {"login": "jamesdorfman"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "diffHunk": "@@ -293,17 +283,33 @@ public CollectionPhase collectValue(LeafBucketCollector sub, int doc, double val\n                 collectBucket(sub, doc, numClusters - 1);\n \n                 if(val > clusterCentroids.get(bucketOrd)){\n-                    // Insert just ahead of bucketOrd so that the array remains sorted\n+                    /*\n+                     * If the new value is bigger than the nearest bucket then insert\n+                     * just ahead of bucketOrd so that the array remains sorted.\n+                     */\n                     bucketOrd += 1;\n                 }\n                 moveLastCluster(bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             } else {\n                 addToCluster(bucketOrd, val);\n                 collectExistingBucket(sub, doc, bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             }\n             return this;\n         }\n \n+        private void updateAvgBucketDistanceIfModified(int modifiedBucketOrd) {\n+            if (modifiedBucketOrd == 0 || modifiedBucketOrd == numClusters - 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956ad7e41e90080662c99593ff814d818d94c02c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MTU0Ng==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/59094#discussion_r450991546", "createdAt": "2020-07-07T16:26:57Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "diffHunk": "@@ -293,17 +283,33 @@ public CollectionPhase collectValue(LeafBucketCollector sub, int doc, double val\n                 collectBucket(sub, doc, numClusters - 1);\n \n                 if(val > clusterCentroids.get(bucketOrd)){\n-                    // Insert just ahead of bucketOrd so that the array remains sorted\n+                    /*\n+                     * If the new value is bigger than the nearest bucket then insert\n+                     * just ahead of bucketOrd so that the array remains sorted.\n+                     */\n                     bucketOrd += 1;\n                 }\n                 moveLastCluster(bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             } else {\n                 addToCluster(bucketOrd, val);\n                 collectExistingBucket(sub, doc, bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             }\n             return this;\n         }\n \n+        private void updateAvgBucketDistanceIfModified(int modifiedBucketOrd) {\n+            if (modifiedBucketOrd == 0 || modifiedBucketOrd == numClusters - 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MTcxMQ=="}, "originalCommit": {"oid": "956ad7e41e90080662c99593ff814d818d94c02c"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2089, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}