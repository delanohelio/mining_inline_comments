{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzYxMTMz", "number": 55422, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoxODo1NFrODz3DKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoxOToxNVrODz3DsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA1ODk4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoxODo1NFrOGIhj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTowMTozNlrOGIjLeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTY3OQ==", "bodyText": "\"script should query should be cacheable: \"  -> \"function script query should be cacheable\"", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411591679", "createdAt": "2020-04-20T18:18:54Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxODE2OA==", "bodyText": "Added.", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411618168", "createdAt": "2020-04-20T19:01:36Z", "author": {"login": "stu-elastic"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTY3OQ=="}, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA2MDMzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoxOToxNVrOGIhkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTowMTo1M1rOGIjMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTg4NQ==", "bodyText": "\"random score should query should not be cacheable: \"  -> \"function random query should not be cacheable: \"", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411591885", "createdAt": "2020-04-20T18:19:15Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n \n-            context = createShardContext();\n-            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n-            assertNotNull(rewriteQuery.toQuery(context));\n-            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n-        }\n+        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertFalse(\"random score should query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MjkxMw==", "bodyText": "We also need to remove ScriptScoreFunctionBuilder as a condition for false in the isCacheable function (line 861-862), as for ScriptScoreFunctionBuilder case we want to return true.", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411592913", "createdAt": "2020-04-20T18:21:03Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n \n-            context = createShardContext();\n-            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n-            assertNotNull(rewriteQuery.toQuery(context));\n-            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n-        }\n+        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertFalse(\"random score should query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTg4NQ=="}, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxODMyMw==", "bodyText": "Updated message and removed ScriptScoreFunctionBuilder.", "url": "https://github.com/elastic/elasticsearch/pull/55422#discussion_r411618323", "createdAt": "2020-04-20T19:01:53Z", "author": {"login": "stu-elastic"}, "path": "server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java", "diffHunk": "@@ -837,21 +837,22 @@ public void testCacheability() throws IOException {\n         assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                 context.isCacheable());\n \n-        // check the two non-cacheable cases explicitly\n         ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                 new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n-        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n-\n-        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n-            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n-                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n-            queryBuilder = new FunctionScoreQueryBuilder(functions);\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertTrue(\"script should query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n \n-            context = createShardContext();\n-            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n-            assertNotNull(rewriteQuery.toQuery(context));\n-            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n-        }\n+        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n+        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n+            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n+        context = createShardContext();\n+        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n+        assertNotNull(rewriteQuery.toQuery(context));\n+        assertFalse(\"random score should query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTg4NQ=="}, "originalCommit": {"oid": "452bae2f6c9c557fc4c778fb486d25e2ad86d9f1"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1012, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}