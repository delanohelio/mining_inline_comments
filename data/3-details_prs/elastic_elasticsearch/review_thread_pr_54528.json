{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTU3MzA1", "number": 54528, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0Nzo0OVrODtQxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NDozN1rODtQ7bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg3MzY4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0Nzo0OVrOF-ljpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0Nzo0OVrOF-ljpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MTM2NQ==", "bodyText": "Let's provide an overloaded method that takes a Supplier<String> so we don't have to do this explicit cast here.", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401171365", "createdAt": "2020-03-31T19:47:49Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg4MDc1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0OTo0NFrOF-ln_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0OTo0NFrOF-ln_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MjQ3OQ==", "bodyText": "Let's use TestClustersPlugin.EXTENSION_NAME here instead of hard-coding.", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401172479", "createdAt": "2020-03-31T19:49:44Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg5MDU5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1MjozMVrOF-luFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzoxMTo1OFrOF-rbpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDAzNw==", "bodyText": "Gross. Let's replace this with something like:\nrunner.onlyIf(t -> this.getEnabled())", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401174037", "createdAt": "2020-03-31T19:52:31Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())\n+            );\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllTransportPortURI())\n+            );\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, (Supplier<String>) cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            // an external cluster was specified and all responsibility for cluster configuration is taken by the user\n+            runner.systemProperty(TESTS_REST_CLUSTER, System.getProperty(TESTS_REST_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER, System.getProperty(TESTS_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER_NAME, System.getProperty(TESTS_CLUSTER_NAME));\n+        }\n+        // this must run after all projects have been configured, so we know any project\n+        // references can be accessed as a fully configured\n+        project.getGradle().projectsEvaluated(x -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNzIzNw==", "bodyText": ":( I tried it and ended up violating the testingConventions.\nExpected at least one test class included in task :x-pack:plugin:autoscaling:integTestRunner, but found none.\n\nI always wondered why these where needed: https://github.com/elastic/elasticsearch/blob/master/x-pack/plugin/autoscaling/build.gradle#L15  Fixing that is a bit more then i want to chew off for this PR, so put it back to how it was.", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401217237", "createdAt": "2020-03-31T21:10:13Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())\n+            );\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllTransportPortURI())\n+            );\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, (Supplier<String>) cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            // an external cluster was specified and all responsibility for cluster configuration is taken by the user\n+            runner.systemProperty(TESTS_REST_CLUSTER, System.getProperty(TESTS_REST_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER, System.getProperty(TESTS_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER_NAME, System.getProperty(TESTS_CLUSTER_NAME));\n+        }\n+        // this must run after all projects have been configured, so we know any project\n+        // references can be accessed as a fully configured\n+        project.getGradle().projectsEvaluated(x -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDAzNw=="}, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2NzYyMQ==", "bodyText": "\ud83d\ude22 fair enough, we'll leave as-is", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401267621", "createdAt": "2020-03-31T23:11:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())\n+            );\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllTransportPortURI())\n+            );\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, (Supplier<String>) cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            // an external cluster was specified and all responsibility for cluster configuration is taken by the user\n+            runner.systemProperty(TESTS_REST_CLUSTER, System.getProperty(TESTS_REST_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER, System.getProperty(TESTS_CLUSTER));\n+            runner.systemProperty(TESTS_CLUSTER_NAME, System.getProperty(TESTS_CLUSTER_NAME));\n+        }\n+        // this must run after all projects have been configured, so we know any project\n+        // references can be accessed as a fully configured\n+        project.getGradle().projectsEvaluated(x -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDAzNw=="}, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg5ODY4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NDozN1rOF-ly7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0NjoxOFrOF-nlDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTI3OA==", "bodyText": "I'm now not sure this is even necessary. We already by default pass thru any system properties with the prefix tests.\n\n  \n    \n      elasticsearch/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy\n    \n    \n        Lines 676 to 680\n      in\n      ecdbd37\n    \n    \n    \n    \n\n        \n          \n           System.getProperties().each { key, value -> \n        \n\n        \n          \n               if ((key.toString().startsWith('tests.') || key.toString().startsWith('es.'))) { \n        \n\n        \n          \n                   test.systemProperty key.toString(), value \n        \n\n        \n          \n               } \n        \n\n        \n          \n           }", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401175278", "createdAt": "2020-03-31T19:54:37Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())\n+            );\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllTransportPortURI())\n+            );\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, (Supplier<String>) cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            // an external cluster was specified and all responsibility for cluster configuration is taken by the user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNDQ5NQ==", "bodyText": "I am pretty sure you are right. The fact that it also had a bug that went un-noticed means that either no one used it, or it did in fact work. (I swear I had used this before without issue). Also if assume code hasn't moved too much, it looks like the referenced passthrough happened after the introduction here.\nI have removed it, and will do a quick manual spot check to ensure it still works.\nEDIT: double checked running the tests against a docker cluster and it still works with these lines removed", "url": "https://github.com/elastic/elasticsearch/pull/54528#discussion_r401204495", "createdAt": "2020-03-31T20:46:18Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+import java.util.function.Supplier;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        super.dependsOn(project);\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(\"testClusters\");\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_REST_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllHttpSocketURI())\n+            );\n+            runnerNonInputProperties.systemProperty(\n+                TESTS_CLUSTER,\n+                (Supplier<String>) () -> String.join(\",\", cluster.getAllTransportPortURI())\n+            );\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, (Supplier<String>) cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            // an external cluster was specified and all responsibility for cluster configuration is taken by the user", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTI3OA=="}, "originalCommit": {"oid": "d4cac28a6a0c6774dbc95adf5fd18b67fcb83bb9"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4017, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}