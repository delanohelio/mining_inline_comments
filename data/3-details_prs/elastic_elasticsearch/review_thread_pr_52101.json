{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzY4Mzc0", "number": 52101, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNTo1MDozOVrODeSBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1OToxNlrODedoTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDc5MTg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNTo1MDozOVrOFnVrvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNTo1MDozOVrOFnVrvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5NDA0Ng==", "bodyText": "Can't you move this part in the if (i==0) {} else {} above?", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376794046", "createdAt": "2020-02-09T15:50:39Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java", "diffHunk": "@@ -151,6 +155,74 @@ public void testNextPage() throws IOException {\n                 ContentType.APPLICATION_JSON), StringUtils.EMPTY, mode));\n     }\n \n+    public void testNextPageWithDatetimeAndTimezoneParam() throws IOException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        String mode = randomMode();\n+        String sqlRequest =\n+                \"{\\\"query\\\":\\\"SELECT DATE_PART('TZOFFSET', date) AS tz FROM test_date_timezone ORDER BY date\\\",\"\n+                        + \"\\\"time_zone\\\":\\\"\" + zoneId.getId() + \"\\\", \"\n+                        + \"\\\"mode\\\":\\\"\" + mode + \"\\\", \"\n+                        + \"\\\"fetch_size\\\":2}\";\n+\n+        String cursor = null;\n+        for (int i = 0; i <= datetimes.length; i += 2) {\n+            Map<String, Object> response;\n+            if (i == 0) {\n+                response = runSql(new StringEntity(sqlRequest, ContentType.APPLICATION_JSON), \"\", mode);\n+            } else {\n+                response = runSql(new StringEntity(\"{\\\"cursor\\\":\\\"\" + cursor + \"\\\"\" + mode(mode) + \"}\",\n+                        ContentType.APPLICATION_JSON), StringUtils.EMPTY, mode);\n+            }\n+\n+            Map<String, Object> expected = new HashMap<>();\n+            if (i == 0) {\n+                expected.put(\"columns\", singletonList(\n+                        columnInfo(mode, \"tz\", \"integer\", JDBCType.INTEGER, 11)));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a488512e3abd83b8de95ef0cbfcd9b2adc2b8a86"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDgxOTQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/FetchSizeTestCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNjo0Mzo1NVrOFnV6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo1Njo0OFrOFneDQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5NzczNQ==", "bodyText": "Can you move this line on the above one?", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376797735", "createdAt": "2020-02-09T16:43:55Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/FetchSizeTestCase.java", "diffHunk": "@@ -102,6 +107,51 @@ public void testIncompleteScroll() throws Exception {\n         assertNoSearchContexts();\n     }\n \n+    public void testScrollWithDatetimeAndTimezoneParam() throws IOException, SQLException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        Properties connectionProperties = connectionProperties();\n+        connectionProperties.put(JDBC_TIMEZONE, zoneId.toString());\n+        try (Connection c = esJdbc(connectionProperties);\n+             Statement s = c.createStatement()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a488512e3abd83b8de95ef0cbfcd9b2adc2b8a86"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5ODM5Mw==", "bodyText": "Sure, just kept the style from the other tests, e.g.: https://github.com/elastic/elasticsearch/pull/52101/files/a488512e3abd83b8de95ef0cbfcd9b2adc2b8a86#diff-7eb5a40bcec78e0f582b7ef886430b28R95", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376798393", "createdAt": "2020-02-09T16:54:38Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/FetchSizeTestCase.java", "diffHunk": "@@ -102,6 +107,51 @@ public void testIncompleteScroll() throws Exception {\n         assertNoSearchContexts();\n     }\n \n+    public void testScrollWithDatetimeAndTimezoneParam() throws IOException, SQLException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        Properties connectionProperties = connectionProperties();\n+        connectionProperties.put(JDBC_TIMEZONE, zoneId.toString());\n+        try (Connection c = esJdbc(connectionProperties);\n+             Statement s = c.createStatement()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5NzczNQ=="}, "originalCommit": {"oid": "a488512e3abd83b8de95ef0cbfcd9b2adc2b8a86"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMTEzNg==", "bodyText": "A(n appropriate) formatter should help in these style-adjusting cases.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376931136", "createdAt": "2020-02-10T08:56:48Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/FetchSizeTestCase.java", "diffHunk": "@@ -102,6 +107,51 @@ public void testIncompleteScroll() throws Exception {\n         assertNoSearchContexts();\n     }\n \n+    public void testScrollWithDatetimeAndTimezoneParam() throws IOException, SQLException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        Properties connectionProperties = connectionProperties();\n+        connectionProperties.put(JDBC_TIMEZONE, zoneId.toString());\n+        try (Connection c = esJdbc(connectionProperties);\n+             Statement s = c.createStatement()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5NzczNQ=="}, "originalCommit": {"oid": "a488512e3abd83b8de95ef0cbfcd9b2adc2b8a86"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTc5MTI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOToxNDoxOVrOFnehvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDowNzoxMlrOFngQvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzODk0MA==", "bodyText": "I think it's perfectly fine as is, but was curious about the reason - if any - for choosing a fetch_size of 2, vs. 1, which would simplify the test just a bit.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376938940", "createdAt": "2020-02-10T09:14:19Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java", "diffHunk": "@@ -151,6 +155,70 @@ public void testNextPage() throws IOException {\n                 ContentType.APPLICATION_JSON), StringUtils.EMPTY, mode));\n     }\n \n+    public void testNextPageWithDatetimeAndTimezoneParam() throws IOException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        String mode = randomMode();\n+        String sqlRequest =\n+                \"{\\\"query\\\":\\\"SELECT DATE_PART('TZOFFSET', date) AS tz FROM test_date_timezone ORDER BY date\\\",\"\n+                        + \"\\\"time_zone\\\":\\\"\" + zoneId.getId() + \"\\\", \"\n+                        + \"\\\"mode\\\":\\\"\" + mode + \"\\\", \"\n+                        + \"\\\"fetch_size\\\":2}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0OTIxMw==", "bodyText": "Fetch size 2 and odd number of rows ('5') makes the last page to return 1 row.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376949213", "createdAt": "2020-02-10T09:34:22Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java", "diffHunk": "@@ -151,6 +155,70 @@ public void testNextPage() throws IOException {\n                 ContentType.APPLICATION_JSON), StringUtils.EMPTY, mode));\n     }\n \n+    public void testNextPageWithDatetimeAndTimezoneParam() throws IOException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        String mode = randomMode();\n+        String sqlRequest =\n+                \"{\\\"query\\\":\\\"SELECT DATE_PART('TZOFFSET', date) AS tz FROM test_date_timezone ORDER BY date\\\",\"\n+                        + \"\\\"time_zone\\\":\\\"\" + zoneId.getId() + \"\\\", \"\n+                        + \"\\\"mode\\\":\\\"\" + mode + \"\\\", \"\n+                        + \"\\\"fetch_size\\\":2}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzODk0MA=="}, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2NTg5Ng==", "bodyText": "Sure, there'll be pages with 1 and 2 rows as the j-based for makes it obvious.\nBut I was only curious to understand why is that desired in respect to what the test checks (i.e. all rows have the same timezone offset). Sorry if missing anything obvious. :-)", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376965896", "createdAt": "2020-02-10T10:04:27Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java", "diffHunk": "@@ -151,6 +155,70 @@ public void testNextPage() throws IOException {\n                 ContentType.APPLICATION_JSON), StringUtils.EMPTY, mode));\n     }\n \n+    public void testNextPageWithDatetimeAndTimezoneParam() throws IOException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        String mode = randomMode();\n+        String sqlRequest =\n+                \"{\\\"query\\\":\\\"SELECT DATE_PART('TZOFFSET', date) AS tz FROM test_date_timezone ORDER BY date\\\",\"\n+                        + \"\\\"time_zone\\\":\\\"\" + zoneId.getId() + \"\\\", \"\n+                        + \"\\\"mode\\\":\\\"\" + mode + \"\\\", \"\n+                        + \"\\\"fetch_size\\\":2}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzODk0MA=="}, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2NzM1Nw==", "bodyText": "Doesn't have to do with the bug fixed, just another safety testing that the fetch size behavior is correct.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r376967357", "createdAt": "2020-02-10T10:07:12Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java", "diffHunk": "@@ -151,6 +155,70 @@ public void testNextPage() throws IOException {\n                 ContentType.APPLICATION_JSON), StringUtils.EMPTY, mode));\n     }\n \n+    public void testNextPageWithDatetimeAndTimezoneParam() throws IOException {\n+        Request request = new Request(\"PUT\", \"/test_date_timezone\");\n+        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();\n+        createIndex.startObject(\"mappings\");\n+        {\n+            createIndex.startObject(\"properties\");\n+            {\n+                createIndex.startObject(\"date\").field(\"type\", \"date\").field(\"format\", \"epoch_millis\");\n+                createIndex.endObject();\n+            }\n+            createIndex.endObject();\n+        }\n+        createIndex.endObject().endObject();\n+        request.setJsonEntity(Strings.toString(createIndex));\n+        client().performRequest(request);\n+\n+        request = new Request(\"PUT\", \"/test_date_timezone/_bulk\");\n+        request.addParameter(\"refresh\", \"true\");\n+        StringBuilder bulk = new StringBuilder();\n+        long[] datetimes = new long[] { 1_000, 10_000, 100_000, 1_000_000, 10_000_000 };\n+        for (long datetime : datetimes) {\n+            bulk.append(\"{\\\"index\\\":{}}\\n\");\n+            bulk.append(\"{\\\"date\\\":\").append(datetime).append(\"}\\n\");\n+        }\n+        request.setJsonEntity(bulk.toString());\n+        assertEquals(200, client().performRequest(request).getStatusLine().getStatusCode());\n+\n+        ZoneId zoneId = randomZone();\n+        String mode = randomMode();\n+        String sqlRequest =\n+                \"{\\\"query\\\":\\\"SELECT DATE_PART('TZOFFSET', date) AS tz FROM test_date_timezone ORDER BY date\\\",\"\n+                        + \"\\\"time_zone\\\":\\\"\" + zoneId.getId() + \"\\\", \"\n+                        + \"\\\"mode\\\":\\\"\" + mode + \"\\\", \"\n+                        + \"\\\"fetch_size\\\":2}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzODk0MA=="}, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY5MDY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1ODoyN1rOFnm_Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1OTozM1rOFoH_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzU0Mw==", "bodyText": "Is Cursors.decodeFromString used anywhere else ? It might be that decoding a tuple of timezone or adding it as a property in the Cursor class should be the default.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r377077543", "createdAt": "2020-02-10T13:58:27Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java", "diffHunk": "@@ -80,13 +83,14 @@ public static void operation(PlanExecutor planExecutor, SqlQueryRequest request,\n             planExecutor.sql(cfg, request.query(), request.params(),\n                     wrap(p -> listener.onResponse(createResponseWithSchema(request, p)), listener::onFailure));\n         } else {\n-            planExecutor.nextPage(cfg, Cursors.decodeFromString(request.cursor()),\n-                    wrap(p -> listener.onResponse(createResponse(request, null, p)),\n+            Tuple<Cursor, ZoneId> decoded = Cursors.decodeFromStringWithZone(request.cursor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5OTQ4Ng==", "bodyText": "I'm planning to do that in an upcoming PR.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r377199486", "createdAt": "2020-02-10T17:13:37Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java", "diffHunk": "@@ -80,13 +83,14 @@ public static void operation(PlanExecutor planExecutor, SqlQueryRequest request,\n             planExecutor.sql(cfg, request.query(), request.params(),\n                     wrap(p -> listener.onResponse(createResponseWithSchema(request, p)), listener::onFailure));\n         } else {\n-            planExecutor.nextPage(cfg, Cursors.decodeFromString(request.cursor()),\n-                    wrap(p -> listener.onResponse(createResponse(request, null, p)),\n+            Tuple<Cursor, ZoneId> decoded = Cursors.decodeFromStringWithZone(request.cursor());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzU0Mw=="}, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODI3Mg==", "bodyText": "Ad discussed, will not pass the zoneId into the Cursor, as zoneId is the responsibility of SqlInput/OutputStreams to handle. Instead, I remove the decodeFromString and only use the decodeFromStringWithZone, so it's obvious for consumers that the zoneId is always decoded as well and returned as part of the returned Tuple.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r377618272", "createdAt": "2020-02-11T12:59:33Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java", "diffHunk": "@@ -80,13 +83,14 @@ public static void operation(PlanExecutor planExecutor, SqlQueryRequest request,\n             planExecutor.sql(cfg, request.query(), request.params(),\n                     wrap(p -> listener.onResponse(createResponseWithSchema(request, p)), listener::onFailure));\n         } else {\n-            planExecutor.nextPage(cfg, Cursors.decodeFromString(request.cursor()),\n-                    wrap(p -> listener.onResponse(createResponse(request, null, p)),\n+            Tuple<Cursor, ZoneId> decoded = Cursors.decodeFromStringWithZone(request.cursor());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzU0Mw=="}, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY5MzI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1OToxNlrOFnnA5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDowNDozMVrOFnnMNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Nzk5MA==", "bodyText": "Nit: why make it private ? I think this will make things a bit harded in debug project.", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r377077990", "createdAt": "2020-02-10T13:59:16Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java", "diffHunk": "@@ -68,7 +71,7 @@ protected void doExecute(Task task, SqlQueryRequest request, ActionListener<SqlQ\n     /**\n      * Actual implementation of the action. Statically available to support embedded mode.\n      */\n-    public static void operation(PlanExecutor planExecutor, SqlQueryRequest request, ActionListener<SqlQueryResponse> listener,\n+    private static void operation(PlanExecutor planExecutor, SqlQueryRequest request, ActionListener<SqlQueryResponse> listener,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4MDg4NQ==", "bodyText": "Ah, didn't think of that, Thx, I'll revert", "url": "https://github.com/elastic/elasticsearch/pull/52101#discussion_r377080885", "createdAt": "2020-02-10T14:04:31Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java", "diffHunk": "@@ -68,7 +71,7 @@ protected void doExecute(Task task, SqlQueryRequest request, ActionListener<SqlQ\n     /**\n      * Actual implementation of the action. Statically available to support embedded mode.\n      */\n-    public static void operation(PlanExecutor planExecutor, SqlQueryRequest request, ActionListener<SqlQueryResponse> listener,\n+    private static void operation(PlanExecutor planExecutor, SqlQueryRequest request, ActionListener<SqlQueryResponse> listener,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Nzk5MA=="}, "originalCommit": {"oid": "c891567c397e9a88c3adc6d8b2a67036e0ee5efb"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4857, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}