{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzU4NzEz", "number": 56058, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoxNjo0MlrOD5G3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTo0MDoxMFrOD5Iu2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjA3ODQyOnYy", "diffSide": "RIGHT", "path": "docs/reference/search/run-a-search.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoxNjo0MlrOGQMVCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoyNzoyMFrOGQMt6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMjM5Mw==", "bodyText": "This isn't specifically related to this reorg, but I've been wondering about the use of \"glob\" vs \"index pattern\". Given the prevalence of index pattern in other contexts, it feels like the glob terminology is potentially confusing. Glob isn't wrong in this context, but I'd be inclined to use index pattern, anyway.", "url": "https://github.com/elastic/elasticsearch/pull/56058#discussion_r419632393", "createdAt": "2020-05-04T18:16:42Z", "author": {"login": "debadair"}, "path": "docs/reference/search/run-a-search.asciidoc", "diffHunk": "@@ -0,0 +1,284 @@\n+[[run-a-search]]\n+== Run a search\n+\n+You can use the <<search-search,search API>> to search data stored in\n+one or more {es} indices.\n+\n+The API can runs two types of searches, depending on how you provide\n+<<search-query,queries>>:\n+\n+<<run-uri-search,URI searches>>::\n+  Queries are provided through a query parameter. URI searches tend to be\n+  simpler and best suited for testing.\n+\n+<<run-request-body-search,Request body searches>>::\n+  Queries are provided through the JSON body of the API request. These queries\n+  are written in <<query-dsl,Query DSL>>. We recommend using request body\n+  searches in most production use cases.\n+\n+[WARNING]\n+====\n+If you specify both a query in both the URI and request body, the search API\n+request runs only the URI query.\n+====\n+\n+[discrete]\n+[[run-uri-search]]\n+=== Run a URI search\n+\n+You can use the search API's <<search-api-query-params-q,`q` query string\n+parameter>> to run a search in the request's URI. The `q` parameter only accepts\n+queries written in Lucene's <<query-string-syntax,query string syntax>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+To get started, ingest or add some data to an {es} index.\n+\n+The following <<docs-bulk,bulk API>> request adds some example user log data to\n+the `user_logs_000001` index.\n+\n+[source,console]\n+----\n+PUT /user_logs_000001/_bulk?refresh\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"1\"}}\n+{ \"@timestamp\": \"2020-12-06T11:04:05.000Z\", \"user\": { \"id\": \"vlb44hny\" }, \"message\": \"Login attempt failed\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"2\"}}\n+{ \"@timestamp\": \"2020-12-07T11:06:07.000Z\", \"user\": { \"id\": \"8a4f500d\" }, \"message\": \"Login successful\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"3\"}}\n+{ \"@timestamp\": \"2020-12-07T11:07:08.000Z\", \"user\": { \"id\": \"l7gk7f82\" }, \"message\": \"Logout successful\" }\n+----\n+\n+You can now use the search API to run a URI search on this index.\n+\n+The following URI search matches documents with a `user.id` value of `l7gk7f82`.\n+Note the query is specified using the `q` query string parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search?q=user.id:8a4f500d\n+----\n+// TEST[continued]\n+\n+The API returns the following response. Note the `hits.hits` property contains\n+the document that matched the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 2,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9808291,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9808291,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 2/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[run-request-body-search]]\n+=== Run a request body search\n+\n+You can use the search API's <<search-api-request-body-query,`query` request\n+body parameter>> to provide a query as a JSON object, written in\n+<<query-dsl,Query DSL>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request body search uses the <<query-dsl-match-query,`match`>>\n+query to match documents with a `message` value of `login successful`. Note the\n+`match` query is specified as a JSON object in the `query` parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following response.\n+\n+The `hits.hits` property contains matching documents. By default, the response\n+sorts these matching documents by `_score`, a <<relevance-scores,relevance\n+score>> that measures how well each document matches the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 1,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 3,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9983525,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9983525,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"3\",\n+        \"_score\": 0.49917626,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:07:08.000Z\",\n+          \"user\": {\n+            \"id\": \"l7gk7f82\"\n+          },\n+          \"message\": \"Logout successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"1\",\n+        \"_score\": 0.42081726,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-06T11:04:05.000Z\",\n+          \"user\": {\n+            \"id\": \"vlb44hny\"\n+          },\n+          \"message\": \"Login attempt failed\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 1/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[search-multiple-indices]]\n+=== Search multiple indices\n+\n+To search multiple indices, add them as comma-separated values in the search API\n+request path.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request searches the `user_logs_000001` and `user_logs_000002`\n+indices.\n+\n+[source,console]\n+----\n+GET /user_logs_000001,user_logs_000002/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+// TEST[s/^/PUT user_logs_000002\\n/]\n+====\n+\n+You can also search multiple indices using a glob or wildcard expression.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request uses the glob `user_logs*` in place of the index name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1babd2f0b7e7d0aabf3108f911d55e86b95a2090"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzODc2Mg==", "bodyText": "Solid point. Removed glob and used index pattern throughout. Thanks @debadair!", "url": "https://github.com/elastic/elasticsearch/pull/56058#discussion_r419638762", "createdAt": "2020-05-04T18:27:20Z", "author": {"login": "jrodewig"}, "path": "docs/reference/search/run-a-search.asciidoc", "diffHunk": "@@ -0,0 +1,284 @@\n+[[run-a-search]]\n+== Run a search\n+\n+You can use the <<search-search,search API>> to search data stored in\n+one or more {es} indices.\n+\n+The API can runs two types of searches, depending on how you provide\n+<<search-query,queries>>:\n+\n+<<run-uri-search,URI searches>>::\n+  Queries are provided through a query parameter. URI searches tend to be\n+  simpler and best suited for testing.\n+\n+<<run-request-body-search,Request body searches>>::\n+  Queries are provided through the JSON body of the API request. These queries\n+  are written in <<query-dsl,Query DSL>>. We recommend using request body\n+  searches in most production use cases.\n+\n+[WARNING]\n+====\n+If you specify both a query in both the URI and request body, the search API\n+request runs only the URI query.\n+====\n+\n+[discrete]\n+[[run-uri-search]]\n+=== Run a URI search\n+\n+You can use the search API's <<search-api-query-params-q,`q` query string\n+parameter>> to run a search in the request's URI. The `q` parameter only accepts\n+queries written in Lucene's <<query-string-syntax,query string syntax>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+To get started, ingest or add some data to an {es} index.\n+\n+The following <<docs-bulk,bulk API>> request adds some example user log data to\n+the `user_logs_000001` index.\n+\n+[source,console]\n+----\n+PUT /user_logs_000001/_bulk?refresh\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"1\"}}\n+{ \"@timestamp\": \"2020-12-06T11:04:05.000Z\", \"user\": { \"id\": \"vlb44hny\" }, \"message\": \"Login attempt failed\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"2\"}}\n+{ \"@timestamp\": \"2020-12-07T11:06:07.000Z\", \"user\": { \"id\": \"8a4f500d\" }, \"message\": \"Login successful\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"3\"}}\n+{ \"@timestamp\": \"2020-12-07T11:07:08.000Z\", \"user\": { \"id\": \"l7gk7f82\" }, \"message\": \"Logout successful\" }\n+----\n+\n+You can now use the search API to run a URI search on this index.\n+\n+The following URI search matches documents with a `user.id` value of `l7gk7f82`.\n+Note the query is specified using the `q` query string parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search?q=user.id:8a4f500d\n+----\n+// TEST[continued]\n+\n+The API returns the following response. Note the `hits.hits` property contains\n+the document that matched the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 2,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9808291,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9808291,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 2/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[run-request-body-search]]\n+=== Run a request body search\n+\n+You can use the search API's <<search-api-request-body-query,`query` request\n+body parameter>> to provide a query as a JSON object, written in\n+<<query-dsl,Query DSL>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request body search uses the <<query-dsl-match-query,`match`>>\n+query to match documents with a `message` value of `login successful`. Note the\n+`match` query is specified as a JSON object in the `query` parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following response.\n+\n+The `hits.hits` property contains matching documents. By default, the response\n+sorts these matching documents by `_score`, a <<relevance-scores,relevance\n+score>> that measures how well each document matches the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 1,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 3,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9983525,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9983525,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"3\",\n+        \"_score\": 0.49917626,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:07:08.000Z\",\n+          \"user\": {\n+            \"id\": \"l7gk7f82\"\n+          },\n+          \"message\": \"Logout successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"1\",\n+        \"_score\": 0.42081726,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-06T11:04:05.000Z\",\n+          \"user\": {\n+            \"id\": \"vlb44hny\"\n+          },\n+          \"message\": \"Login attempt failed\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 1/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[search-multiple-indices]]\n+=== Search multiple indices\n+\n+To search multiple indices, add them as comma-separated values in the search API\n+request path.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request searches the `user_logs_000001` and `user_logs_000002`\n+indices.\n+\n+[source,console]\n+----\n+GET /user_logs_000001,user_logs_000002/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+// TEST[s/^/PUT user_logs_000002\\n/]\n+====\n+\n+You can also search multiple indices using a glob or wildcard expression.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request uses the glob `user_logs*` in place of the index name.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMjM5Mw=="}, "originalCommit": {"oid": "1babd2f0b7e7d0aabf3108f911d55e86b95a2090"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjM3MTQzOnYy", "diffSide": "RIGHT", "path": "docs/reference/search/run-a-search.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTozNjowOFrOGQPK8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTo0ODoyOVrOGQPmaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3ODk2Mw==", "bodyText": "Suggest removing the first \"both\" to read:\n\nIf you specify a query in both the URI and request body...", "url": "https://github.com/elastic/elasticsearch/pull/56058#discussion_r419678963", "createdAt": "2020-05-04T19:36:08Z", "author": {"login": "lockewritesdocs"}, "path": "docs/reference/search/run-a-search.asciidoc", "diffHunk": "@@ -0,0 +1,285 @@\n+[[run-a-search]]\n+== Run a search\n+\n+You can use the <<search-search,search API>> to search data stored in\n+one or more {es} indices.\n+\n+The API can runs two types of searches, depending on how you provide\n+<<search-query,queries>>:\n+\n+<<run-uri-search,URI searches>>::\n+  Queries are provided through a query parameter. URI searches tend to be\n+  simpler and best suited for testing.\n+\n+<<run-request-body-search,Request body searches>>::\n+  Queries are provided through the JSON body of the API request. These queries\n+  are written in <<query-dsl,Query DSL>>. We recommend using request body\n+  searches in most production use cases.\n+\n+[WARNING]\n+====\n+If you specify both a query in both the URI and request body, the search API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8422c68749b82cd30d847b1057f4ede8e05f2fb6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4NTk5NQ==", "bodyText": "Good catch. Fixed with d05ea62.", "url": "https://github.com/elastic/elasticsearch/pull/56058#discussion_r419685995", "createdAt": "2020-05-04T19:48:29Z", "author": {"login": "jrodewig"}, "path": "docs/reference/search/run-a-search.asciidoc", "diffHunk": "@@ -0,0 +1,285 @@\n+[[run-a-search]]\n+== Run a search\n+\n+You can use the <<search-search,search API>> to search data stored in\n+one or more {es} indices.\n+\n+The API can runs two types of searches, depending on how you provide\n+<<search-query,queries>>:\n+\n+<<run-uri-search,URI searches>>::\n+  Queries are provided through a query parameter. URI searches tend to be\n+  simpler and best suited for testing.\n+\n+<<run-request-body-search,Request body searches>>::\n+  Queries are provided through the JSON body of the API request. These queries\n+  are written in <<query-dsl,Query DSL>>. We recommend using request body\n+  searches in most production use cases.\n+\n+[WARNING]\n+====\n+If you specify both a query in both the URI and request body, the search API", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3ODk2Mw=="}, "originalCommit": {"oid": "8422c68749b82cd30d847b1057f4ede8e05f2fb6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjM4NDg5OnYy", "diffSide": "RIGHT", "path": "docs/reference/search/run-a-search.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTo0MDoxMFrOGQPTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTo0ODozNlrOGQPmog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4MTIxOA==", "bodyText": "The two previous examples have a lead-in sentence that describes the collapsed example. Just noting that this example does not follow that convention.", "url": "https://github.com/elastic/elasticsearch/pull/56058#discussion_r419681218", "createdAt": "2020-05-04T19:40:10Z", "author": {"login": "lockewritesdocs"}, "path": "docs/reference/search/run-a-search.asciidoc", "diffHunk": "@@ -0,0 +1,285 @@\n+[[run-a-search]]\n+== Run a search\n+\n+You can use the <<search-search,search API>> to search data stored in\n+one or more {es} indices.\n+\n+The API can runs two types of searches, depending on how you provide\n+<<search-query,queries>>:\n+\n+<<run-uri-search,URI searches>>::\n+  Queries are provided through a query parameter. URI searches tend to be\n+  simpler and best suited for testing.\n+\n+<<run-request-body-search,Request body searches>>::\n+  Queries are provided through the JSON body of the API request. These queries\n+  are written in <<query-dsl,Query DSL>>. We recommend using request body\n+  searches in most production use cases.\n+\n+[WARNING]\n+====\n+If you specify both a query in both the URI and request body, the search API\n+request runs only the URI query.\n+====\n+\n+[discrete]\n+[[run-uri-search]]\n+=== Run a URI search\n+\n+You can use the search API's <<search-api-query-params-q,`q` query string\n+parameter>> to run a search in the request's URI. The `q` parameter only accepts\n+queries written in Lucene's <<query-string-syntax,query string syntax>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+To get started, ingest or add some data to an {es} index.\n+\n+The following <<docs-bulk,bulk API>> request adds some example user log data to\n+the `user_logs_000001` index.\n+\n+[source,console]\n+----\n+PUT /user_logs_000001/_bulk?refresh\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"1\"}}\n+{ \"@timestamp\": \"2020-12-06T11:04:05.000Z\", \"user\": { \"id\": \"vlb44hny\" }, \"message\": \"Login attempt failed\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"2\"}}\n+{ \"@timestamp\": \"2020-12-07T11:06:07.000Z\", \"user\": { \"id\": \"8a4f500d\" }, \"message\": \"Login successful\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"3\"}}\n+{ \"@timestamp\": \"2020-12-07T11:07:08.000Z\", \"user\": { \"id\": \"l7gk7f82\" }, \"message\": \"Logout successful\" }\n+----\n+\n+You can now use the search API to run a URI search on this index.\n+\n+The following URI search matches documents with a `user.id` value of `l7gk7f82`.\n+Note the query is specified using the `q` query string parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search?q=user.id:8a4f500d\n+----\n+// TEST[continued]\n+\n+The API returns the following response. Note the `hits.hits` property contains\n+the document that matched the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 2,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9808291,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9808291,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 2/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[run-request-body-search]]\n+=== Run a request body search\n+\n+You can use the search API's <<search-api-request-body-query,`query` request\n+body parameter>> to provide a query as a JSON object, written in\n+<<query-dsl,Query DSL>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request body search uses the <<query-dsl-match-query,`match`>>\n+query to match documents with a `message` value of `login successful`. Note the\n+`match` query is specified as a JSON object in the `query` parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following response.\n+\n+The `hits.hits` property contains matching documents. By default, the response\n+sorts these matching documents by `_score`, a <<relevance-scores,relevance\n+score>> that measures how well each document matches the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 1,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 3,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9983525,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9983525,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"3\",\n+        \"_score\": 0.49917626,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:07:08.000Z\",\n+          \"user\": {\n+            \"id\": \"l7gk7f82\"\n+          },\n+          \"message\": \"Logout successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"1\",\n+        \"_score\": 0.42081726,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-06T11:04:05.000Z\",\n+          \"user\": {\n+            \"id\": \"vlb44hny\"\n+          },\n+          \"message\": \"Login attempt failed\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 1/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[search-multiple-indices]]\n+=== Search multiple indices\n+\n+To search multiple indices, add them as comma-separated values in the search API\n+request path.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request searches the `user_logs_000001` and `user_logs_000002`\n+indices.\n+\n+[source,console]\n+----\n+GET /user_logs_000001,user_logs_000002/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+// TEST[s/^/PUT user_logs_000002\\n/]\n+====\n+\n+You can also search multiple indices using an index pattern.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request uses the index pattern `user_logs*` in place of the index\n+name. The request searches any indices in the cluster that start with\n+`user_logs`.\n+\n+[source,console]\n+----\n+GET /user_logs*/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+To search all indices in a cluster, omit the index name from the request path.\n+Alternatively, you can use `_all` or `*` in place of the index name.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following requests are equivalent and search all indices in the cluster.\n+\n+[source,console]\n+----\n+GET /_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+\n+GET /_all/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+\n+GET /*/_search\n+{\n+    \"query\" : {\n+        \"match\" : { \"message\" : \"login\" }\n+    }\n+}\n+----\n+// TEST[continued]\n+====", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8422c68749b82cd30d847b1057f4ede8e05f2fb6"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4NjA1MA==", "bodyText": "I think I'm okay with that in this case. Thanks for raising though!", "url": "https://github.com/elastic/elasticsearch/pull/56058#discussion_r419686050", "createdAt": "2020-05-04T19:48:36Z", "author": {"login": "jrodewig"}, "path": "docs/reference/search/run-a-search.asciidoc", "diffHunk": "@@ -0,0 +1,285 @@\n+[[run-a-search]]\n+== Run a search\n+\n+You can use the <<search-search,search API>> to search data stored in\n+one or more {es} indices.\n+\n+The API can runs two types of searches, depending on how you provide\n+<<search-query,queries>>:\n+\n+<<run-uri-search,URI searches>>::\n+  Queries are provided through a query parameter. URI searches tend to be\n+  simpler and best suited for testing.\n+\n+<<run-request-body-search,Request body searches>>::\n+  Queries are provided through the JSON body of the API request. These queries\n+  are written in <<query-dsl,Query DSL>>. We recommend using request body\n+  searches in most production use cases.\n+\n+[WARNING]\n+====\n+If you specify both a query in both the URI and request body, the search API\n+request runs only the URI query.\n+====\n+\n+[discrete]\n+[[run-uri-search]]\n+=== Run a URI search\n+\n+You can use the search API's <<search-api-query-params-q,`q` query string\n+parameter>> to run a search in the request's URI. The `q` parameter only accepts\n+queries written in Lucene's <<query-string-syntax,query string syntax>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+To get started, ingest or add some data to an {es} index.\n+\n+The following <<docs-bulk,bulk API>> request adds some example user log data to\n+the `user_logs_000001` index.\n+\n+[source,console]\n+----\n+PUT /user_logs_000001/_bulk?refresh\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"1\"}}\n+{ \"@timestamp\": \"2020-12-06T11:04:05.000Z\", \"user\": { \"id\": \"vlb44hny\" }, \"message\": \"Login attempt failed\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"2\"}}\n+{ \"@timestamp\": \"2020-12-07T11:06:07.000Z\", \"user\": { \"id\": \"8a4f500d\" }, \"message\": \"Login successful\" }\n+{\"index\":{\"_index\" : \"user_logs_000001\", \"_id\" : \"3\"}}\n+{ \"@timestamp\": \"2020-12-07T11:07:08.000Z\", \"user\": { \"id\": \"l7gk7f82\" }, \"message\": \"Logout successful\" }\n+----\n+\n+You can now use the search API to run a URI search on this index.\n+\n+The following URI search matches documents with a `user.id` value of `l7gk7f82`.\n+Note the query is specified using the `q` query string parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search?q=user.id:8a4f500d\n+----\n+// TEST[continued]\n+\n+The API returns the following response. Note the `hits.hits` property contains\n+the document that matched the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 2,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 1,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9808291,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9808291,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 2/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[run-request-body-search]]\n+=== Run a request body search\n+\n+You can use the search API's <<search-api-request-body-query,`query` request\n+body parameter>> to provide a query as a JSON object, written in\n+<<query-dsl,Query DSL>>.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request body search uses the <<query-dsl-match-query,`match`>>\n+query to match documents with a `message` value of `login successful`. Note the\n+`match` query is specified as a JSON object in the `query` parameter.\n+\n+[source,console]\n+----\n+GET /user_logs_000001/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following response.\n+\n+The `hits.hits` property contains matching documents. By default, the response\n+sorts these matching documents by `_score`, a <<relevance-scores,relevance\n+score>> that measures how well each document matches the query.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\": 1,\n+  \"timed_out\": false,\n+  \"_shards\": {\n+    \"total\": 1,\n+    \"successful\": 1,\n+    \"skipped\": 0,\n+    \"failed\": 0\n+  },\n+  \"hits\": {\n+    \"total\": {\n+      \"value\": 3,\n+      \"relation\": \"eq\"\n+    },\n+    \"max_score\": 0.9983525,\n+    \"hits\": [\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"2\",\n+        \"_score\": 0.9983525,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n+          \"user\": {\n+            \"id\": \"8a4f500d\"\n+          },\n+          \"message\": \"Login successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"3\",\n+        \"_score\": 0.49917626,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-07T11:07:08.000Z\",\n+          \"user\": {\n+            \"id\": \"l7gk7f82\"\n+          },\n+          \"message\": \"Logout successful\"\n+        }\n+      },\n+      {\n+        \"_index\": \"user_logs_000001\",\n+        \"_id\": \"1\",\n+        \"_score\": 0.42081726,\n+        \"_source\": {\n+          \"@timestamp\": \"2020-12-06T11:04:05.000Z\",\n+          \"user\": {\n+            \"id\": \"vlb44hny\"\n+          },\n+          \"message\": \"Login attempt failed\"\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\": 1/\"took\": \"$body.took\"/]\n+====\n+\n+[discrete]\n+[[search-multiple-indices]]\n+=== Search multiple indices\n+\n+To search multiple indices, add them as comma-separated values in the search API\n+request path.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request searches the `user_logs_000001` and `user_logs_000002`\n+indices.\n+\n+[source,console]\n+----\n+GET /user_logs_000001,user_logs_000002/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+// TEST[s/^/PUT user_logs_000002\\n/]\n+====\n+\n+You can also search multiple indices using an index pattern.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following request uses the index pattern `user_logs*` in place of the index\n+name. The request searches any indices in the cluster that start with\n+`user_logs`.\n+\n+[source,console]\n+----\n+GET /user_logs*/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+====\n+\n+To search all indices in a cluster, omit the index name from the request path.\n+Alternatively, you can use `_all` or `*` in place of the index name.\n+\n+.*Example*\n+[%collapsible]\n+====\n+The following requests are equivalent and search all indices in the cluster.\n+\n+[source,console]\n+----\n+GET /_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+\n+GET /_all/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"message\": \"login successful\"\n+    }\n+  }\n+}\n+\n+GET /*/_search\n+{\n+    \"query\" : {\n+        \"match\" : { \"message\" : \"login\" }\n+    }\n+}\n+----\n+// TEST[continued]\n+====", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4MTIxOA=="}, "originalCommit": {"oid": "8422c68749b82cd30d847b1057f4ede8e05f2fb6"}, "originalPosition": 285}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2434, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}