{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDcwMTc3", "number": 51675, "title": "SQL: Fix milliseconds handling in intervals", "bodyText": "This PR fixes:\n\nthe parsing of milliseconds in intervals: everything past the . used to be converted as-is to milliseconds, with no normalisation of the unit; thus, a value of .23 ended up as 23 millis in the interval, instead of 230.\nthe printing of a trailing .0, in case the interval lacks the fractional part;\ntests generating a random millisecond value used to simply print it in the string about to be evaluated without a necessary front-filling of 0[s], where the amount was below 100/10.\n\n(The combination of first and last issues above, plus statistical \"luck\" made the incorrect handling pass the tests.)\nCloses #41635.", "createdAt": "2020-01-30T13:21:33Z", "url": "https://github.com/elastic/elasticsearch/pull/51675", "merged": true, "mergeCommit": {"oid": "4de8c64f63ee37c1bcfdb9b9d3a07d09be243222"}, "closed": true, "closedAt": "2020-02-03T08:27:07Z", "author": {"login": "bpintea"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_aJBwgH2gAyMzY5MDcwMTc3OjQ0YzQ2ODg0MTFiMjU4MTFmMmMwMjJjNjhmODZhY2FjMTY1N2FkZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_rgATAFqTM1MTM3Mjg0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/44c4688411b25811f2c022c68f86acac1657adec", "committedDate": "2020-01-30T12:59:33Z", "message": "Fix milliseconds handling in intervals\n\nThis commit fixes:\n- the parsing of milliseconds in intervals: a value such as .23 is no\nlonger converted to 23 millis, but to 230;\n- the printing of a trailing .0, in case the interval lacks the\nfractional part."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTA2NTgz", "url": "https://github.com/elastic/elasticsearch/pull/51675#pullrequestreview-351106583", "createdAt": "2020-01-30T20:05:21Z", "commit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTE0Mjcy", "url": "https://github.com/elastic/elasticsearch/pull/51675#pullrequestreview-351114272", "createdAt": "2020-01-30T20:18:45Z", "commit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxODo0NVrOFj4oyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoyMzowNVrOFj4wDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MjQyNg==", "bodyText": "Same here.", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373172426", "createdAt": "2020-01-30T20:18:45Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/StringUtils.java", "diffHunk": "@@ -129,8 +129,14 @@ public static String toString(Object value) {\n             sb.append(\":\");\n             durationInSec = durationInSec % SECONDS_PER_MINUTE;\n             sb.append(indent(durationInSec));\n-            sb.append(\".\");\n-            sb.append(TimeUnit.NANOSECONDS.toMillis(d.getNano()));\n+            long millis = TimeUnit.NANOSECONDS.toMillis(d.getNano());\n+            if (millis > 0) {\n+                sb.append(\".\");\n+                while (millis % 10 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MzQ3MQ==", "bodyText": "Alternatively you could just iterate on the string millis from end->start and remove all zeroes.\nDon't know if performance wise makes sense...", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373173471", "createdAt": "2020-01-30T20:21:17Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/util/DateUtils.java", "diffHunk": "@@ -136,8 +136,14 @@ public static String toString(Object value) {\n             sb.append(\":\");\n             durationInSec = durationInSec % SECONDS_PER_MINUTE;\n             sb.append(indent(durationInSec));\n-            sb.append(\".\");\n-            sb.append(TimeUnit.NANOSECONDS.toMillis(d.getNano()));\n+            long millis = TimeUnit.NANOSECONDS.toMillis(d.getNano());\n+            if (millis > 0) {\n+                sb.append(\".\");\n+                while (millis % 10 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NDI4NA==", "bodyText": "Same concept here, you could avoid the multiplication by creating a string with right zero padding and then read is as number.", "url": "https://github.com/elastic/elasticsearch/pull/51675#discussion_r373174284", "createdAt": "2020-01-30T20:23:05Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/literal/interval/Intervals.java", "diffHunk": "@@ -341,6 +341,10 @@ TemporalAmount parse(Source source, String string) {\n                                             + \": negative value [{}] not allowed (negate the entire interval instead)\",\n                                     v);\n                         }\n+                        if (units.get(unitIndex) == TimeUnit.MILLISECOND && number.length() < 3) {\n+                            // normalize the number past DOT to millis\n+                            v *= number.length() < 2 ? 100 : 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzcyODQ4", "url": "https://github.com/elastic/elasticsearch/pull/51675#pullrequestreview-351372848", "createdAt": "2020-01-31T09:13:02Z", "commit": {"oid": "44c4688411b25811f2c022c68f86acac1657adec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3096, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}