{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODM4OTQx", "number": 63172, "title": "[ML] adds feature_importance_baseline object to model metadata", "bodyText": "this adds the new field feature_importance_baseline and allows it to be optionally be included in the model's metadata.", "createdAt": "2020-10-02T11:06:45Z", "url": "https://github.com/elastic/elasticsearch/pull/63172", "merged": true, "mergeCommit": {"oid": "0c56516f8766a662e5b87a414709ad385db8d90b"}, "closed": true, "closedAt": "2020-10-05T12:14:23Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOXfhGgH2gAyNDk2ODM4OTQxOmVkODc3ZDFkNTI2YzhmOTUzMDI0MjA3YjVmYmFiZGZlOTZhMDJhMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOqSTngH2gAyNDk2ODM4OTQxOmFkOThhYzc4MDZkMjYzNDU2ZDNkOWM3YmMwYTkzNTAwMzNjMThlODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed877d1d526c8f953024207b5fbabdfe96a02a12", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/ed877d1d526c8f953024207b5fbabdfe96a02a12", "committedDate": "2020-10-01T20:34:25Z", "message": "[ML] adds feature_importance_baseline object to model metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "312b96e8c267106b8bed76b2402a77c8c371284d", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/312b96e8c267106b8bed76b2402a77c8c371284d", "committedDate": "2020-10-02T11:20:06Z", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-analytics-feature-importance-baseline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05947998458a4894c9b69d5bfcd50b5569c9c3a", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/e05947998458a4894c9b69d5bfcd50b5569c9c3a", "committedDate": "2020-10-02T11:42:27Z", "message": "fixing mapping"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjU5ODQ3", "url": "https://github.com/elastic/elasticsearch/pull/63172#pullrequestreview-501259847", "createdAt": "2020-10-02T16:00:18Z", "commit": {"oid": "e05947998458a4894c9b69d5bfcd50b5569c9c3a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowMDoxOVrOHbzGkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowMDoxOVrOHbzGkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMDg2NQ==", "bodyText": "nit: you could reuse the BASELINE parsefield defined in the parent class", "url": "https://github.com/elastic/elasticsearch/pull/63172#discussion_r498910865", "createdAt": "2020-10-02T16:00:19Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/FeatureImportanceBaseline.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParseException;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class FeatureImportanceBaseline implements ToXContentObject, Writeable {\n+\n+    private static final String NAME = \"feature_importance_baseline\";\n+    public static final ParseField BASELINE = new ParseField(\"baseline\");\n+    public static final ParseField CLASSES = new ParseField(\"classes\");\n+\n+    // These parsers follow the pattern that metadata is parsed leniently (to allow for enhancements), whilst config is parsed strictly\n+    public static final ConstructingObjectParser<FeatureImportanceBaseline, Void> LENIENT_PARSER = createParser(true);\n+    public static final ConstructingObjectParser<FeatureImportanceBaseline, Void> STRICT_PARSER = createParser(false);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<FeatureImportanceBaseline, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<FeatureImportanceBaseline, Void> parser = new ConstructingObjectParser<>(NAME,\n+            ignoreUnknownFields,\n+            a -> new FeatureImportanceBaseline((Double)a[0], (List<ClassBaseline>)a[1]));\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), BASELINE);\n+        parser.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(),\n+            ignoreUnknownFields ? ClassBaseline.LENIENT_PARSER : ClassBaseline.STRICT_PARSER,\n+            CLASSES);\n+        return parser;\n+    }\n+\n+    public static FeatureImportanceBaseline fromXContent(XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.parse(parser, null) : STRICT_PARSER.parse(parser, null);\n+    }\n+\n+    public final Double baseline;\n+    public final List<ClassBaseline> classBaselines;\n+\n+    public FeatureImportanceBaseline(StreamInput in) throws IOException {\n+        this.baseline = in.readOptionalDouble();\n+        this.classBaselines = in.readList(ClassBaseline::new);\n+    }\n+\n+    FeatureImportanceBaseline(Double baseline, List<ClassBaseline> classBaselines) {\n+        this.baseline = baseline;\n+        this.classBaselines = classBaselines == null ? Collections.emptyList() : classBaselines;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeOptionalDouble(baseline);\n+        out.writeList(classBaselines);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        return builder.map(asMap());\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        FeatureImportanceBaseline that = (FeatureImportanceBaseline) o;\n+        return Objects.equals(that.baseline, baseline)\n+            && Objects.equals(classBaselines, that.classBaselines);\n+    }\n+\n+    public Map<String, Object> asMap() {\n+        Map<String, Object> map = new LinkedHashMap<>();\n+        if (baseline != null) {\n+            map.put(BASELINE.getPreferredName(), baseline);\n+        }\n+        if (classBaselines.isEmpty() == false) {\n+            map.put(CLASSES.getPreferredName(), classBaselines.stream().map(ClassBaseline::asMap).collect(Collectors.toList()));\n+        }\n+        return map;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(baseline, classBaselines);\n+    }\n+\n+    public static class ClassBaseline implements ToXContentObject, Writeable {\n+        private static final String NAME = \"feature_importance_class_baseline\";\n+\n+        public static final ParseField CLASS_NAME = new ParseField(\"class_name\");\n+        public static final ParseField BASELINE = new ParseField(\"baseline\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05947998458a4894c9b69d5bfcd50b5569c9c3a"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad98ac7806d263456d3d9c7bc0a9350033c18e88", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/ad98ac7806d263456d3d9c7bc0a9350033c18e88", "committedDate": "2020-10-02T18:28:11Z", "message": "addressing comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4480, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}