{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzM4NjM1", "number": 59672, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyNTo0MlrOEPcdtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjo0Nzo0N1rOEPhW4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMwNDU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/RuntimeKeywordMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyNTo0MlrOGzKINQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0MDo0NlrOGzTczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NjUwMQ==", "bodyText": "I think that I will remove this assertion. I initially assumed that calling this would make us load doc_values for a runtime field which is expensive, but it will only make us instantiate the classes and doc_values will not be advanced, hence no script is going to be executed.", "url": "https://github.com/elastic/elasticsearch/pull/59672#discussion_r456296501", "createdAt": "2020-07-17T08:25:42Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/RuntimeKeywordMappedFieldType.java", "diffHunk": "@@ -62,13 +63,27 @@ public Object valueForDisplay(Object value) {\n \n     @Override\n     public String typeName() {\n-        // TODO not sure what we should return here: the runtime type or the field type?\n-        // why is the same string returned from three different methods?\n         return ScriptFieldMapper.CONTENT_TYPE;\n     }\n \n+    @Override\n+    public String familyTypeName() {\n+        return KeywordFieldMapper.CONTENT_TYPE;\n+    }\n+\n+    @Override\n+    public boolean isSearchable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isAggregatable() {\n+        return true;\n+    }\n+\n     @Override\n     public ScriptBinaryFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        assert fullyQualifiedIndexName.length() > 0 : \"index name must not be empty\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69340e758e59a6c0994e4175eee1dc8d8d1f77fe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0OTIyOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/59672#discussion_r456449228", "createdAt": "2020-07-17T13:40:46Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/RuntimeKeywordMappedFieldType.java", "diffHunk": "@@ -62,13 +63,27 @@ public Object valueForDisplay(Object value) {\n \n     @Override\n     public String typeName() {\n-        // TODO not sure what we should return here: the runtime type or the field type?\n-        // why is the same string returned from three different methods?\n         return ScriptFieldMapper.CONTENT_TYPE;\n     }\n \n+    @Override\n+    public String familyTypeName() {\n+        return KeywordFieldMapper.CONTENT_TYPE;\n+    }\n+\n+    @Override\n+    public boolean isSearchable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isAggregatable() {\n+        return true;\n+    }\n+\n     @Override\n     public ScriptBinaryFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {\n+        assert fullyQualifiedIndexName.length() > 0 : \"index name must not be empty\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NjUwMQ=="}, "originalCommit": {"oid": "69340e758e59a6c0994e4175eee1dc8d8d1f77fe"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzEwNjI2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjo0Nzo0N1rOGzRqPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0NToyNlrOGzTnrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQxOTkwMA==", "bodyText": "@nik9000 you may have opinions on this. I added it because I did not want to have tests to maintain a list of supported runtime types and rather rely on the truth which cannot get outdated. Downside is we have no if but rather a map with a bifunction, maybe a bit cryptic.", "url": "https://github.com/elastic/elasticsearch/pull/59672#discussion_r456419900", "createdAt": "2020-07-17T12:47:47Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "diffHunk": "@@ -112,13 +130,13 @@ protected Builder(String name, ScriptCompiler scriptCompiler) {\n \n         @Override\n         public ScriptFieldMapper build(BuilderContext context) {\n-            MappedFieldType mappedFieldType;\n-            if (runtimeType.getValue().equals(\"keyword\")) {\n-                StringScriptFieldScript.Factory factory = scriptCompiler.compile(script.getValue(), StringScriptFieldScript.CONTEXT);\n-                mappedFieldType = new RuntimeKeywordMappedFieldType(buildFullName(context), script.getValue(), factory, meta.getValue());\n-            } else {\n+            BiFunction<Builder, BuilderContext, MappedFieldType> fieldTypeResolver = Builder.FIELD_TYPE_RESOLVER.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06875dc0eea5079a3b0ae1683710cfa7be98e037"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MTEzNQ==", "bodyText": "I'm pretty used to maps to functions at this point. I'm happy with this. I'm not 100% this is better than the switch statement that I had in #59721, but it does the job just as well. If you like it, I'm happy with it.", "url": "https://github.com/elastic/elasticsearch/pull/59672#discussion_r456451135", "createdAt": "2020-07-17T13:44:00Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "diffHunk": "@@ -112,13 +130,13 @@ protected Builder(String name, ScriptCompiler scriptCompiler) {\n \n         @Override\n         public ScriptFieldMapper build(BuilderContext context) {\n-            MappedFieldType mappedFieldType;\n-            if (runtimeType.getValue().equals(\"keyword\")) {\n-                StringScriptFieldScript.Factory factory = scriptCompiler.compile(script.getValue(), StringScriptFieldScript.CONTEXT);\n-                mappedFieldType = new RuntimeKeywordMappedFieldType(buildFullName(context), script.getValue(), factory, meta.getValue());\n-            } else {\n+            BiFunction<Builder, BuilderContext, MappedFieldType> fieldTypeResolver = Builder.FIELD_TYPE_RESOLVER.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQxOTkwMA=="}, "originalCommit": {"oid": "06875dc0eea5079a3b0ae1683710cfa7be98e037"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MjAxNQ==", "bodyText": "it does not do a better job than the switch, but it allows to expose all the keys for testing :)", "url": "https://github.com/elastic/elasticsearch/pull/59672#discussion_r456452015", "createdAt": "2020-07-17T13:45:26Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "diffHunk": "@@ -112,13 +130,13 @@ protected Builder(String name, ScriptCompiler scriptCompiler) {\n \n         @Override\n         public ScriptFieldMapper build(BuilderContext context) {\n-            MappedFieldType mappedFieldType;\n-            if (runtimeType.getValue().equals(\"keyword\")) {\n-                StringScriptFieldScript.Factory factory = scriptCompiler.compile(script.getValue(), StringScriptFieldScript.CONTEXT);\n-                mappedFieldType = new RuntimeKeywordMappedFieldType(buildFullName(context), script.getValue(), factory, meta.getValue());\n-            } else {\n+            BiFunction<Builder, BuilderContext, MappedFieldType> fieldTypeResolver = Builder.FIELD_TYPE_RESOLVER.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQxOTkwMA=="}, "originalCommit": {"oid": "06875dc0eea5079a3b0ae1683710cfa7be98e037"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2245, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}