{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTMxODUw", "number": 51830, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo1NTozNVrODd6ZUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxODoxMVrODgYvHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkyMDUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/IdentityProviderPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo1NTozNVrOFmyTKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo1NTozNVrOFmyTKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNDMxNQ==", "bodyText": "Why is this repeated here?", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376214315", "createdAt": "2020-02-07T04:55:35Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/IdentityProviderPlugin.java", "diffHunk": "@@ -73,23 +87,47 @@\n \n     private final Logger logger = LogManager.getLogger();\n     private boolean enabled;\n+    private Settings settings;\n \n     @Override\n     public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n                                                ResourceWatcherService resourceWatcherService, ScriptService scriptService,\n                                                NamedXContentRegistry xContentRegistry, Environment environment,\n                                                NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {\n-        final Settings settings = environment.settings();\n+        settings = environment.settings();\n         enabled = ENABLED_SETTING.get(settings);\n         if (enabled == false) {\n             return List.of();\n         }\n \n-        SamlInit.initialize();\n+        SamlUtils.initialize();\n         CloudIdp idp = new CloudIdp(environment, settings);\n         return List.of();\n     }\n \n+    @Override\n+    public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {\n+\n+        enabled = ENABLED_SETTING.get(settings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkyMzE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlInitiateSingleSignOnAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo1NzozOFrOFmyUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDo1OToyMFrOFm_wAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNDcyNQ==", "bodyText": "I think we agreed that we wouldn't use xpack/ here, didn't we?", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376214725", "createdAt": "2020-02-07T04:57:38Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+/**\n+ * ActionType to create a SAML Response in the context of IDP initiated SSO for a given SP\n+ */\n+public class SamlInitiateSingleSignOnAction extends ActionType<SamlInitiateSingleSignOnResponse> {\n+\n+    public static final String NAME = \"cluster:admin/xpack/idp/saml/init\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQzNDY4OQ==", "bodyText": "We did, but it was a few hours after I opened the PR :)", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376434689", "createdAt": "2020-02-07T14:59:20Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+/**\n+ * ActionType to create a SAML Response in the context of IDP initiated SSO for a given SP\n+ */\n+public class SamlInitiateSingleSignOnAction extends ActionType<SamlInitiateSingleSignOnResponse> {\n+\n+    public static final String NAME = \"cluster:admin/xpack/idp/saml/init\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNDcyNQ=="}, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkyNjM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlInitiateSingleSignOnRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowMDoyMVrOFmyWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowMDoyMVrOFmyWyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNTI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        validationException = addValidationError(\"sp_entity_id is missing\", null);\n          \n          \n            \n                        validationException = addValidationError(\"sp_entity_id is missing\", validationException);\n          \n      \n    \n    \n  \n\nThis way if we add new validations in the future, there's less chance of dropping (overwriting) an error.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376215242", "createdAt": "2020-02-07T05:00:21Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlInitiateSingleSignOnRequest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+import java.io.IOException;\n+\n+public class SamlInitiateSingleSignOnRequest extends ActionRequest {\n+\n+    private String spEntityId;\n+\n+    public SamlInitiateSingleSignOnRequest(StreamInput in) throws IOException {\n+        super(in);\n+        spEntityId = in.readString();\n+    }\n+\n+    public SamlInitiateSingleSignOnRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (Strings.isNullOrEmpty(spEntityId)) {\n+            validationException = addValidationError(\"sp_entity_id is missing\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkzMTYwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowNDoyNVrOFmyZrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowNDoyNVrOFmyZrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNTk4MA==", "bodyText": "I'd prefer this to be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SamlServiceProvider sp = idp.getRegisteredServiceProviders().get(request.getSpEntityId());\n          \n          \n            \n                    SamlServiceProvider sp = idp.getRegisteredServiceProvider(request.getSpEntityId());\n          \n      \n    \n    \n  \n\nI don't think we want to rely on the IdP object always representing the SPs as a Map.\nThere may be millions of SPs and we don't want to have to load all of them into memory.\nEventually we'll probably need to make that method async, but for now separating this code from the underlying implentation is a start.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376215980", "createdAt": "2020-02-07T05:04:25Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.user.User;\n+import org.elasticsearch.xpack.idp.saml.authn.SuccessfulAuthenticationResponseMessageBuilder;\n+import org.elasticsearch.xpack.idp.saml.authn.UserServiceAuthentication;\n+import org.elasticsearch.xpack.idp.saml.idp.CloudIdp;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.elasticsearch.xpack.idp.saml.support.SamlUtils;\n+import org.opensaml.saml.saml2.core.Response;\n+\n+import java.time.Clock;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class TransportSamlInitiateSingleSignOnAction\n+    extends HandledTransportAction<SamlInitiateSingleSignOnRequest, SamlInitiateSingleSignOnResponse> {\n+\n+    private final ThreadPool threadPool;\n+    private final Environment env;\n+    private final Logger logger = LogManager.getLogger(TransportSamlInitiateSingleSignOnAction.class);\n+\n+    @Inject\n+    public TransportSamlInitiateSingleSignOnAction(ThreadPool threadPool, TransportService transportService,\n+                                                   ActionFilters actionFilters, Environment environment) {\n+        super(SamlInitiateSingleSignOnAction.NAME, transportService, actionFilters, SamlInitiateSingleSignOnRequest::new);\n+        this.threadPool = threadPool;\n+        this.env = environment;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlInitiateSingleSignOnRequest request,\n+                             ActionListener<SamlInitiateSingleSignOnResponse> listener) {\n+        final ThreadContext threadContext = threadPool.getThreadContext();\n+        final SamlFactory samlFactory = new SamlFactory();\n+        final SamlIdentityProvider idp = new CloudIdp(env, env.settings());\n+        Authentication serviceAccountAuthentication = Authentication.getAuthentication(threadContext);\n+        // TODO: Adjust this once secondary auth code is merged in master and use the authentication object of the user\n+        // Authentication authentication = authenticationService.getSecondaryAuth();\n+\n+        SamlServiceProvider sp = idp.getRegisteredServiceProviders().get(request.getSpEntityId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjk3OTU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/action/RestSamlInitiateSingleSignOnAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo0NjoxMFrOFmy2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo0NjoxMFrOFmy2zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMzQzNg==", "bodyText": "Can we make the service provider an object?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    builder.field(\"sp_entity_id\", response.getSpEntityId());\n          \n          \n            \n                                    builder.startObject(\"service_provider\");\n          \n          \n            \n                                    builder.field(\"entity_id\", response.getSpEntityId());\n          \n          \n            \n                                    builder.endObject();\n          \n      \n    \n    \n  \n\nI suspect that we might (perhaps) want to return a name for the SP in the future so the UI can say \"Redirecting you to ...\" and that sort of change will be easier if this is an object from the start.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376223436", "createdAt": "2020-02-07T05:46:10Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/action/RestSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlInitiateSingleSignOnAction;\n+import org.elasticsearch.xpack.idp.action.SamlInitiateSingleSignOnRequest;\n+import org.elasticsearch.xpack.idp.action.SamlInitiateSingleSignOnResponse;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestSamlInitiateSingleSignOnAction extends BaseRestHandler {\n+    static final ObjectParser<SamlInitiateSingleSignOnRequest, Void> PARSER = new ObjectParser<>(\"idp_init_sso\",\n+        SamlInitiateSingleSignOnRequest::new);\n+\n+    static {\n+        PARSER.declareString(SamlInitiateSingleSignOnRequest::setSpEntityId, new ParseField(\"sp_entity_id\"));\n+    }\n+\n+    public RestSamlInitiateSingleSignOnAction(RestController controller) {\n+        controller.registerHandler(\n+            POST, \"/_idp/saml/init\", this\n+        );\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"idp_init_sso_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        try (XContentParser parser = request.contentParser()) {\n+            final SamlInitiateSingleSignOnRequest initRequest = PARSER.parse(parser, null);\n+            return channel -> client.execute(SamlInitiateSingleSignOnAction.INSTANCE, initRequest,\n+                new RestBuilderListener<SamlInitiateSingleSignOnResponse>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(SamlInitiateSingleSignOnResponse response, XContentBuilder builder) throws Exception {\n+                        builder.startObject();\n+                        builder.field(\"redirect_url\", response.getRedirectUrl());\n+                        builder.field(\"response_body\", response.getResponseBody());\n+                        builder.field(\"sp_entity_id\", response.getSpEntityId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjk4NjQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo1MToxN1rOFmy62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo1MToxN1rOFmy62A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNDQ3Mg==", "bodyText": "Per my comments above, I think we can replace this with a getRegisteredServiceProvider(String id) method.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376224472", "createdAt": "2020-02-07T05:51:17Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -73,6 +78,12 @@ public X509Credential getSigningCredential() {\n         return signingCredential;\n     }\n \n+    @Override\n+    public Map<String, SamlServiceProvider> getRegisteredServiceProviders() {\n+        return registeredServiceProviders;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjk4NzcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/CloudKibanaServiceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo1MjoxNVrOFmy7og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo1MjoxNVrOFmy7og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNDY3NA==", "bodyText": "I think can drop the Kibana part of the name. There's nothing here that's Kibana specific.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376224674", "createdAt": "2020-02-07T05:52:15Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/CloudKibanaServiceProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.joda.time.Duration;\n+import org.joda.time.ReadableDuration;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+public class CloudKibanaServiceProvider implements SamlServiceProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjk5MzY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo1Njo1N1rOFmy_LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxOTo1M1rOFqiiAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNTU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static String samlObjectToString(SAMLObject object) {\n          \n          \n            \n                public static String getXmlContent(SAMLObject object) {\n          \n      \n    \n    \n  \n\nI think we should be more explict that this is used to get the object in XML, not just for printing.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376225581", "createdAt": "2020-02-07T05:56:57Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.core.xml.util.XMLObjectSupport;\n+import org.opensaml.saml.common.SAMLObject;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class SamlUtils {\n+\n+    private static final String SAML_MARSHALLING_ERROR_STRING = \"_unserializable_\";\n+\n+    private static final AtomicBoolean INITIALISED = new AtomicBoolean(false);\n+\n+    private static final Logger LOGGER = LogManager.getLogger(SamlUtils.class);\n+\n+    /**\n+     * This is needed in order to initialize the underlying OpenSAML library.\n+     * It must be called before doing anything that potentially interacts with OpenSAML (whether in server code, or in tests).\n+     * The initialization happens within do privileged block as the underlying Apache XML security library has a permission check.\n+     * The initialization happens with a specific context classloader as OpenSAML loads resources from its jar file.\n+     */\n+    public static void initialize() {\n+        if (INITIALISED.compareAndSet(false, true)) {\n+            // We want to force these classes to be loaded _before_ we fiddle with the context classloader\n+            LoggerFactory.getLogger(InitializationService.class);\n+            SpecialPermission.check();\n+            try {\n+                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n+                    LOGGER.debug(\"Initializing OpenSAML\");\n+                    try (RestorableContextClassLoader ignore = new RestorableContextClassLoader(InitializationService.class)) {\n+                        InitializationService.initialize();\n+                    }\n+                    LOGGER.debug(\"Initialized OpenSAML\");\n+                    return null;\n+                });\n+            } catch (PrivilegedActionException e) {\n+                throw new ElasticsearchSecurityException(\"failed to set context classloader for SAML IdP\", e);\n+            }\n+        }\n+    }\n+\n+    static String toString(Element element, boolean pretty) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            print(element, writer, pretty);\n+            return writer.toString();\n+        } catch (TransformerException e) {\n+            return \"[\" + element.getNamespaceURI() + \"]\" + element.getLocalName();\n+        }\n+    }\n+\n+    static void print(Element element, Writer writer, boolean pretty) throws TransformerException {\n+        final Transformer serializer = getHardenedXMLTransformer();\n+        if (pretty) {\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        }\n+        serializer.transform(new DOMSource(element), new StreamResult(writer));\n+    }\n+\n+    public static String samlObjectToString(SAMLObject object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MDI3NQ==", "bodyText": "This is marked resolved, but it doesn't seem to have changed.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r380150275", "createdAt": "2020-02-17T12:19:53Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.core.xml.util.XMLObjectSupport;\n+import org.opensaml.saml.common.SAMLObject;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class SamlUtils {\n+\n+    private static final String SAML_MARSHALLING_ERROR_STRING = \"_unserializable_\";\n+\n+    private static final AtomicBoolean INITIALISED = new AtomicBoolean(false);\n+\n+    private static final Logger LOGGER = LogManager.getLogger(SamlUtils.class);\n+\n+    /**\n+     * This is needed in order to initialize the underlying OpenSAML library.\n+     * It must be called before doing anything that potentially interacts with OpenSAML (whether in server code, or in tests).\n+     * The initialization happens within do privileged block as the underlying Apache XML security library has a permission check.\n+     * The initialization happens with a specific context classloader as OpenSAML loads resources from its jar file.\n+     */\n+    public static void initialize() {\n+        if (INITIALISED.compareAndSet(false, true)) {\n+            // We want to force these classes to be loaded _before_ we fiddle with the context classloader\n+            LoggerFactory.getLogger(InitializationService.class);\n+            SpecialPermission.check();\n+            try {\n+                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n+                    LOGGER.debug(\"Initializing OpenSAML\");\n+                    try (RestorableContextClassLoader ignore = new RestorableContextClassLoader(InitializationService.class)) {\n+                        InitializationService.initialize();\n+                    }\n+                    LOGGER.debug(\"Initialized OpenSAML\");\n+                    return null;\n+                });\n+            } catch (PrivilegedActionException e) {\n+                throw new ElasticsearchSecurityException(\"failed to set context classloader for SAML IdP\", e);\n+            }\n+        }\n+    }\n+\n+    static String toString(Element element, boolean pretty) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            print(element, writer, pretty);\n+            return writer.toString();\n+        } catch (TransformerException e) {\n+            return \"[\" + element.getNamespaceURI() + \"]\" + element.getLocalName();\n+        }\n+    }\n+\n+    static void print(Element element, Writer writer, boolean pretty) throws TransformerException {\n+        final Transformer serializer = getHardenedXMLTransformer();\n+        if (pretty) {\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        }\n+        serializer.transform(new DOMSource(element), new StreamResult(writer));\n+    }\n+\n+    public static String samlObjectToString(SAMLObject object) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNTU4MQ=="}, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjk5NDg4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo1Nzo1OVrOFmy_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoyMDozN1rOFqijHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNTc2OA==", "bodyText": "I think for the case where this is used (Rest response) we don't want to pretty print by default (maybe if the pretty parameter is set, but not otherwise).", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376225768", "createdAt": "2020-02-07T05:57:59Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.core.xml.util.XMLObjectSupport;\n+import org.opensaml.saml.common.SAMLObject;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class SamlUtils {\n+\n+    private static final String SAML_MARSHALLING_ERROR_STRING = \"_unserializable_\";\n+\n+    private static final AtomicBoolean INITIALISED = new AtomicBoolean(false);\n+\n+    private static final Logger LOGGER = LogManager.getLogger(SamlUtils.class);\n+\n+    /**\n+     * This is needed in order to initialize the underlying OpenSAML library.\n+     * It must be called before doing anything that potentially interacts with OpenSAML (whether in server code, or in tests).\n+     * The initialization happens within do privileged block as the underlying Apache XML security library has a permission check.\n+     * The initialization happens with a specific context classloader as OpenSAML loads resources from its jar file.\n+     */\n+    public static void initialize() {\n+        if (INITIALISED.compareAndSet(false, true)) {\n+            // We want to force these classes to be loaded _before_ we fiddle with the context classloader\n+            LoggerFactory.getLogger(InitializationService.class);\n+            SpecialPermission.check();\n+            try {\n+                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n+                    LOGGER.debug(\"Initializing OpenSAML\");\n+                    try (RestorableContextClassLoader ignore = new RestorableContextClassLoader(InitializationService.class)) {\n+                        InitializationService.initialize();\n+                    }\n+                    LOGGER.debug(\"Initialized OpenSAML\");\n+                    return null;\n+                });\n+            } catch (PrivilegedActionException e) {\n+                throw new ElasticsearchSecurityException(\"failed to set context classloader for SAML IdP\", e);\n+            }\n+        }\n+    }\n+\n+    static String toString(Element element, boolean pretty) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            print(element, writer, pretty);\n+            return writer.toString();\n+        } catch (TransformerException e) {\n+            return \"[\" + element.getNamespaceURI() + \"]\" + element.getLocalName();\n+        }\n+    }\n+\n+    static void print(Element element, Writer writer, boolean pretty) throws TransformerException {\n+        final Transformer serializer = getHardenedXMLTransformer();\n+        if (pretty) {\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        }\n+        serializer.transform(new DOMSource(element), new StreamResult(writer));\n+    }\n+\n+    public static String samlObjectToString(SAMLObject object) {\n+        try {\n+            return toString(XMLObjectSupport.marshall(object), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MDU1OQ==", "bodyText": "I don't think this has been resolved", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r380150559", "createdAt": "2020-02-17T12:20:37Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.core.xml.util.XMLObjectSupport;\n+import org.opensaml.saml.common.SAMLObject;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class SamlUtils {\n+\n+    private static final String SAML_MARSHALLING_ERROR_STRING = \"_unserializable_\";\n+\n+    private static final AtomicBoolean INITIALISED = new AtomicBoolean(false);\n+\n+    private static final Logger LOGGER = LogManager.getLogger(SamlUtils.class);\n+\n+    /**\n+     * This is needed in order to initialize the underlying OpenSAML library.\n+     * It must be called before doing anything that potentially interacts with OpenSAML (whether in server code, or in tests).\n+     * The initialization happens within do privileged block as the underlying Apache XML security library has a permission check.\n+     * The initialization happens with a specific context classloader as OpenSAML loads resources from its jar file.\n+     */\n+    public static void initialize() {\n+        if (INITIALISED.compareAndSet(false, true)) {\n+            // We want to force these classes to be loaded _before_ we fiddle with the context classloader\n+            LoggerFactory.getLogger(InitializationService.class);\n+            SpecialPermission.check();\n+            try {\n+                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n+                    LOGGER.debug(\"Initializing OpenSAML\");\n+                    try (RestorableContextClassLoader ignore = new RestorableContextClassLoader(InitializationService.class)) {\n+                        InitializationService.initialize();\n+                    }\n+                    LOGGER.debug(\"Initialized OpenSAML\");\n+                    return null;\n+                });\n+            } catch (PrivilegedActionException e) {\n+                throw new ElasticsearchSecurityException(\"failed to set context classloader for SAML IdP\", e);\n+            }\n+        }\n+    }\n+\n+    static String toString(Element element, boolean pretty) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            print(element, writer, pretty);\n+            return writer.toString();\n+        } catch (TransformerException e) {\n+            return \"[\" + element.getNamespaceURI() + \"]\" + element.getLocalName();\n+        }\n+    }\n+\n+    static void print(Element element, Writer writer, boolean pretty) throws TransformerException {\n+        final Transformer serializer = getHardenedXMLTransformer();\n+        if (pretty) {\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        }\n+        serializer.transform(new DOMSource(element), new StreamResult(writer));\n+    }\n+\n+    public static String samlObjectToString(SAMLObject object) {\n+        try {\n+            return toString(XMLObjectSupport.marshall(object), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNTc2OA=="}, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjk5NTE3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo1ODowNlrOFmzADg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTowMTo0NVrOFm_1Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNTgwNg==", "bodyText": "I think we can delete some of the methods from the TestCase object now.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376225806", "createdAt": "2020-02-07T05:58:06Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.core.xml.util.XMLObjectSupport;\n+import org.opensaml.saml.common.SAMLObject;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class SamlUtils {\n+\n+    private static final String SAML_MARSHALLING_ERROR_STRING = \"_unserializable_\";\n+\n+    private static final AtomicBoolean INITIALISED = new AtomicBoolean(false);\n+\n+    private static final Logger LOGGER = LogManager.getLogger(SamlUtils.class);\n+\n+    /**\n+     * This is needed in order to initialize the underlying OpenSAML library.\n+     * It must be called before doing anything that potentially interacts with OpenSAML (whether in server code, or in tests).\n+     * The initialization happens within do privileged block as the underlying Apache XML security library has a permission check.\n+     * The initialization happens with a specific context classloader as OpenSAML loads resources from its jar file.\n+     */\n+    public static void initialize() {\n+        if (INITIALISED.compareAndSet(false, true)) {\n+            // We want to force these classes to be loaded _before_ we fiddle with the context classloader\n+            LoggerFactory.getLogger(InitializationService.class);\n+            SpecialPermission.check();\n+            try {\n+                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n+                    LOGGER.debug(\"Initializing OpenSAML\");\n+                    try (RestorableContextClassLoader ignore = new RestorableContextClassLoader(InitializationService.class)) {\n+                        InitializationService.initialize();\n+                    }\n+                    LOGGER.debug(\"Initialized OpenSAML\");\n+                    return null;\n+                });\n+            } catch (PrivilegedActionException e) {\n+                throw new ElasticsearchSecurityException(\"failed to set context classloader for SAML IdP\", e);\n+            }\n+        }\n+    }\n+\n+    static String toString(Element element, boolean pretty) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            print(element, writer, pretty);\n+            return writer.toString();\n+        } catch (TransformerException e) {\n+            return \"[\" + element.getNamespaceURI() + \"]\" + element.getLocalName();\n+        }\n+    }\n+\n+    static void print(Element element, Writer writer, boolean pretty) throws TransformerException {\n+        final Transformer serializer = getHardenedXMLTransformer();\n+        if (pretty) {\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        }\n+        serializer.transform(new DOMSource(element), new StreamResult(writer));\n+    }\n+\n+    public static String samlObjectToString(SAMLObject object) {\n+        try {\n+            return toString(XMLObjectSupport.marshall(object), true);\n+        } catch (MarshallingException e) {\n+            LOGGER.info(\"Error marshalling SAMLObject \", e);\n+            return SAML_MARSHALLING_ERROR_STRING;\n+        }\n+    }\n+\n+    static String describeSamlObject(SAMLObject object) {\n+        if (Response.class.isInstance(object)) {\n+            Response response = (Response) object;\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"SAML Response: [\\n\");\n+            sb.append(\"    Destination: \").append(response.getDestination()).append(\"\\n\");\n+            sb.append(\"    Response ID: \").append(response.getID()).append(\"\\n\");\n+            sb.append(\"    In response to: \").append(response.getInResponseTo()).append(\"\\n\");\n+            sb.append(\"    Response issued at:\").append(response.getIssueInstant()).append(\"\\n\");\n+            if (response.getIssuer() != null) {\n+                sb.append(\"    Issuer: \").append(response.getIssuer().getValue()).append(\"\\n\");\n+            }\n+            sb.append(\"    Number of unencrypted Assertions: \").append(response.getAssertions().size()).append(\"\\n\");\n+            sb.append(\"    Number of encrypted Assertions: \").append(response.getEncryptedAssertions().size()).append(\"\\n\");\n+            sb.append(\"]\");\n+            return sb.toString();\n+\n+        } else if (Assertion.class.isInstance(object)) {\n+            Assertion assertion = (Assertion) object;\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"SAML Assertion: [\\n\");\n+            sb.append(\"    Response ID: \").append(assertion.getID()).append(\"\\n\");\n+            sb.append(\"    Response issued at: \").append(assertion.getIssueInstant()).append(\"\\n\");\n+            if (assertion.getIssuer() != null) {\n+                sb.append(\"    Issuer: \").append(assertion.getIssuer().getValue()).append(\"\\n\");\n+            }\n+            sb.append(\"    Number of attribute statements: \").append(assertion.getAttributeStatements().size()).append(\"\\n\");\n+            sb.append(\"    Number of authentication statements: \").append(assertion.getAuthnStatements().size()).append(\"\\n\");\n+            sb.append(\"]\");\n+            return sb.toString();\n+        }\n+        return samlObjectToString(object);\n+    }\n+\n+    @SuppressForbidden(reason = \"This is the only allowed way to construct a Transformer\")\n+    public static Transformer getHardenedXMLTransformer() throws TransformerConfigurationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQzNjAzMQ==", "bodyText": "I have consolidated things in the other PR, merging will be fun", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376436031", "createdAt": "2020-02-07T15:01:45Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlUtils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.core.xml.util.XMLObjectSupport;\n+import org.opensaml.saml.common.SAMLObject;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class SamlUtils {\n+\n+    private static final String SAML_MARSHALLING_ERROR_STRING = \"_unserializable_\";\n+\n+    private static final AtomicBoolean INITIALISED = new AtomicBoolean(false);\n+\n+    private static final Logger LOGGER = LogManager.getLogger(SamlUtils.class);\n+\n+    /**\n+     * This is needed in order to initialize the underlying OpenSAML library.\n+     * It must be called before doing anything that potentially interacts with OpenSAML (whether in server code, or in tests).\n+     * The initialization happens within do privileged block as the underlying Apache XML security library has a permission check.\n+     * The initialization happens with a specific context classloader as OpenSAML loads resources from its jar file.\n+     */\n+    public static void initialize() {\n+        if (INITIALISED.compareAndSet(false, true)) {\n+            // We want to force these classes to be loaded _before_ we fiddle with the context classloader\n+            LoggerFactory.getLogger(InitializationService.class);\n+            SpecialPermission.check();\n+            try {\n+                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n+                    LOGGER.debug(\"Initializing OpenSAML\");\n+                    try (RestorableContextClassLoader ignore = new RestorableContextClassLoader(InitializationService.class)) {\n+                        InitializationService.initialize();\n+                    }\n+                    LOGGER.debug(\"Initialized OpenSAML\");\n+                    return null;\n+                });\n+            } catch (PrivilegedActionException e) {\n+                throw new ElasticsearchSecurityException(\"failed to set context classloader for SAML IdP\", e);\n+            }\n+        }\n+    }\n+\n+    static String toString(Element element, boolean pretty) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            print(element, writer, pretty);\n+            return writer.toString();\n+        } catch (TransformerException e) {\n+            return \"[\" + element.getNamespaceURI() + \"]\" + element.getLocalName();\n+        }\n+    }\n+\n+    static void print(Element element, Writer writer, boolean pretty) throws TransformerException {\n+        final Transformer serializer = getHardenedXMLTransformer();\n+        if (pretty) {\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        }\n+        serializer.transform(new DOMSource(element), new StreamResult(writer));\n+    }\n+\n+    public static String samlObjectToString(SAMLObject object) {\n+        try {\n+            return toString(XMLObjectSupport.marshall(object), true);\n+        } catch (MarshallingException e) {\n+            LOGGER.info(\"Error marshalling SAMLObject \", e);\n+            return SAML_MARSHALLING_ERROR_STRING;\n+        }\n+    }\n+\n+    static String describeSamlObject(SAMLObject object) {\n+        if (Response.class.isInstance(object)) {\n+            Response response = (Response) object;\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"SAML Response: [\\n\");\n+            sb.append(\"    Destination: \").append(response.getDestination()).append(\"\\n\");\n+            sb.append(\"    Response ID: \").append(response.getID()).append(\"\\n\");\n+            sb.append(\"    In response to: \").append(response.getInResponseTo()).append(\"\\n\");\n+            sb.append(\"    Response issued at:\").append(response.getIssueInstant()).append(\"\\n\");\n+            if (response.getIssuer() != null) {\n+                sb.append(\"    Issuer: \").append(response.getIssuer().getValue()).append(\"\\n\");\n+            }\n+            sb.append(\"    Number of unencrypted Assertions: \").append(response.getAssertions().size()).append(\"\\n\");\n+            sb.append(\"    Number of encrypted Assertions: \").append(response.getEncryptedAssertions().size()).append(\"\\n\");\n+            sb.append(\"]\");\n+            return sb.toString();\n+\n+        } else if (Assertion.class.isInstance(object)) {\n+            Assertion assertion = (Assertion) object;\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"SAML Assertion: [\\n\");\n+            sb.append(\"    Response ID: \").append(assertion.getID()).append(\"\\n\");\n+            sb.append(\"    Response issued at: \").append(assertion.getIssueInstant()).append(\"\\n\");\n+            if (assertion.getIssuer() != null) {\n+                sb.append(\"    Issuer: \").append(assertion.getIssuer().getValue()).append(\"\\n\");\n+            }\n+            sb.append(\"    Number of attribute statements: \").append(assertion.getAttributeStatements().size()).append(\"\\n\");\n+            sb.append(\"    Number of authentication statements: \").append(assertion.getAuthnStatements().size()).append(\"\\n\");\n+            sb.append(\"]\");\n+            return sb.toString();\n+        }\n+        return samlObjectToString(object);\n+    }\n+\n+    @SuppressForbidden(reason = \"This is the only allowed way to construct a Transformer\")\n+    public static Transformer getHardenedXMLTransformer() throws TransformerConfigurationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyNTgwNg=="}, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzAxMDE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNjowODoyOVrOFmzI6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTowNDozM1rOFm_7Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyODA3Mg==", "bodyText": "I'd like a test for this class.\nIt doesn't do much yet, but we keep a better pace of development if we write the tests earlier, and build on them as needed.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376228072", "createdAt": "2020-02-07T06:08:29Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.user.User;\n+import org.elasticsearch.xpack.idp.saml.authn.SuccessfulAuthenticationResponseMessageBuilder;\n+import org.elasticsearch.xpack.idp.saml.authn.UserServiceAuthentication;\n+import org.elasticsearch.xpack.idp.saml.idp.CloudIdp;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.elasticsearch.xpack.idp.saml.support.SamlUtils;\n+import org.opensaml.saml.saml2.core.Response;\n+\n+import java.time.Clock;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class TransportSamlInitiateSingleSignOnAction\n+    extends HandledTransportAction<SamlInitiateSingleSignOnRequest, SamlInitiateSingleSignOnResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQzNzU1MQ==", "bodyText": "Agreed, I had a TODO in 3931770 description that didn't make it to the PR description", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r376437551", "createdAt": "2020-02-07T15:04:33Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.user.User;\n+import org.elasticsearch.xpack.idp.saml.authn.SuccessfulAuthenticationResponseMessageBuilder;\n+import org.elasticsearch.xpack.idp.saml.authn.UserServiceAuthentication;\n+import org.elasticsearch.xpack.idp.saml.idp.CloudIdp;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.elasticsearch.xpack.idp.saml.support.SamlUtils;\n+import org.opensaml.saml.saml2.core.Response;\n+\n+import java.time.Clock;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class TransportSamlInitiateSingleSignOnAction\n+    extends HandledTransportAction<SamlInitiateSingleSignOnRequest, SamlInitiateSingleSignOnResponse> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyODA3Mg=="}, "originalCommit": {"oid": "de22cd618f796ef1c0c7ce42798835b01a09716c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjg2MzAyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/action/RestSamlInitiateSingleSignOnAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxODoxMVrOFqkG-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxODoxMVrOFqkG-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NjEyMg==", "bodyText": "It's minor, but I think this name should reference SAML since it's a SAML specific endpoint.", "url": "https://github.com/elastic/elasticsearch/pull/51830#discussion_r380176122", "createdAt": "2020-02-17T13:18:11Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/action/RestSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlInitiateSingleSignOnAction;\n+import org.elasticsearch.xpack.idp.action.SamlInitiateSingleSignOnRequest;\n+import org.elasticsearch.xpack.idp.action.SamlInitiateSingleSignOnResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestSamlInitiateSingleSignOnAction extends BaseRestHandler {\n+    static final ObjectParser<SamlInitiateSingleSignOnRequest, Void> PARSER = new ObjectParser<>(\"idp_init_sso\",\n+        SamlInitiateSingleSignOnRequest::new);\n+\n+    static {\n+        PARSER.declareString(SamlInitiateSingleSignOnRequest::setSpEntityId, new ParseField(\"sp_entity_id\"));\n+    }\n+\n+    @Override\n+    public List<Route> routes(){\n+        return Collections.singletonList(\n+            new Route(POST, \"/_idp/saml/init\")\n+        );\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"idp_init_sso_action\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be53bf56aa317c0bf1783b7aaaaef453cd363126"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 53, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}