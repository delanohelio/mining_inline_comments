{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDE2NTY3", "number": 59008, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNToyMVrOELSq8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjowM1rOELSrgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjc1Njk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNToyMVrOGs0b1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNToyMVrOGs0b1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTYyMw==", "bodyText": "\ud83d\ude31 , but luckily assertions tripped!", "url": "https://github.com/elastic/elasticsearch/pull/59008#discussion_r449649623", "createdAt": "2020-07-03T16:15:21Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -207,7 +207,7 @@ public ClusterState execute(ClusterState currentState) {\n                     throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName, \" a snapshot is already running\");\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n-                List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState, request));\n+                indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState, request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1780b1d11b5ba20db7aae3c33f34330d8911eec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjc1ODQzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjowM1rOGs0cqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoyMzoxNFrOGs0j7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTgzMg==", "bodyText": "why is this commented out?", "url": "https://github.com/elastic/elasticsearch/pull/59008#discussion_r449649832", "createdAt": "2020-07-03T16:16:03Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "diffHunk": "@@ -1702,26 +1717,26 @@ public void testIndicesAliasesRequestTargetDataStreams() {\n         {\n             IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(dataStreamName);\n             IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n-                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions, false));\n+                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions));\n             assertEquals(\"The provided expression [\" + dataStreamName + \"] matches a data stream, specify the corresponding \" +\n                 \"concrete indices instead.\", iae.getMessage());\n         }\n \n         {\n             IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(\"my-data-*\").alias(\"my-data\");\n             IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n-                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions, false));\n+                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions));\n             assertEquals(\"The provided expression [my-data-*] matches a data stream, specify the corresponding concrete indices instead.\",\n                 iae.getMessage());\n         }\n \n-        {\n-            IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(dataStreamName)\n-                .alias(\"my-data\");\n-            String[] indices = indexNameExpressionResolver.concreteIndexNames(state, aliasActions, true);\n-            assertEquals(1, indices.length);\n-            assertEquals(backingIndex.getIndex().getName(), indices[0]);\n-        }\n+        //{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b644495ccda226a950c43add837b1658ad8646"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1MTY5NA==", "bodyText": "I missed that in an earlier commit. The backport of #57900 will un-comment it.", "url": "https://github.com/elastic/elasticsearch/pull/59008#discussion_r449651694", "createdAt": "2020-07-03T16:23:14Z", "author": {"login": "danhermann"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "diffHunk": "@@ -1702,26 +1717,26 @@ public void testIndicesAliasesRequestTargetDataStreams() {\n         {\n             IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(dataStreamName);\n             IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n-                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions, false));\n+                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions));\n             assertEquals(\"The provided expression [\" + dataStreamName + \"] matches a data stream, specify the corresponding \" +\n                 \"concrete indices instead.\", iae.getMessage());\n         }\n \n         {\n             IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(\"my-data-*\").alias(\"my-data\");\n             IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n-                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions, false));\n+                () -> indexNameExpressionResolver.concreteIndexNames(state, aliasActions));\n             assertEquals(\"The provided expression [my-data-*] matches a data stream, specify the corresponding concrete indices instead.\",\n                 iae.getMessage());\n         }\n \n-        {\n-            IndicesAliasesRequest.AliasActions aliasActions = IndicesAliasesRequest.AliasActions.add().index(dataStreamName)\n-                .alias(\"my-data\");\n-            String[] indices = indexNameExpressionResolver.concreteIndexNames(state, aliasActions, true);\n-            assertEquals(1, indices.length);\n-            assertEquals(backingIndex.getIndex().getName(), indices[0]);\n-        }\n+        //{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTgzMg=="}, "originalCommit": {"oid": "b2b644495ccda226a950c43add837b1658ad8646"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2022, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}