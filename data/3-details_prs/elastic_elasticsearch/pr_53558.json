{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTMxMDA4", "number": 53558, "title": "Add REST API for ComponentTemplate CRUD", "bodyText": "This adds the Put/Get/DeleteComponentTemplate APIs that allow inserting, retrieving, and removing\nComponentTemplateMetadata into the cluster state metadata.\nThese APIs are currently only available behind a feature flag system property -\nes.itv2_feature_flag_registered.\nRelates to #53101", "createdAt": "2020-03-13T19:01:34Z", "url": "https://github.com/elastic/elasticsearch/pull/53558", "merged": true, "mergeCommit": {"oid": "263e525e496498b9a2006675178105cb20114d2c"}, "closed": true, "closedAt": "2020-03-17T16:55:08Z", "author": {"login": "dakrone"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNVD7uAH2gAyMzg3OTMxMDA4OjBkMWZjZmQwM2JmMjJkZmYyOGZmMjRhYmIxOTgxMmI2YjM3MGY0MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOk06eAH2gAyMzg3OTMxMDA4OmIyZjQ2MGI4ZTVkNzMyYzkyMTFmMmE1YjViNzhjMGJmNGE2NjQxMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0d1fcfd03bf22dff28ff24abb19812b6b370f415", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/0d1fcfd03bf22dff28ff24abb19812b6b370f415", "committedDate": "2020-03-13T18:59:24Z", "message": "Add REST API for ComponentTemplate CRUD\n\nThis adds the Put/Get/DeleteComponentTemplate APIs that allow inserting, retrieving, and removing\nComponentTemplateMetadata into the cluster state metadata.\n\nThese APIs are currently only available behind a feature flag system property -\n`es.itv2_feature_flag_registered`.\n\nRelates to #53101"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92801325388d4b6c61d9b441f4445741b32aa226", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/92801325388d4b6c61d9b441f4445741b32aa226", "committedDate": "2020-03-13T19:10:20Z", "message": "Fix API names in json spec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d406dc5072cd1c7df004fcfb9341e209cc7de427", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/d406dc5072cd1c7df004fcfb9341e209cc7de427", "committedDate": "2020-03-13T19:31:29Z", "message": "Fix yaml test definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2cba2600c0255237f613bf65c937f89d0f72fd5", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/e2cba2600c0255237f613bf65c937f89d0f72fd5", "committedDate": "2020-03-13T20:32:10Z", "message": "Fix version in skip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a312ef9f0c078b87b9b14b19747368c1345a8cf6", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/a312ef9f0c078b87b9b14b19747368c1345a8cf6", "committedDate": "2020-03-13T21:07:22Z", "message": "I think I finally got the right format :|"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46eca0cbc51a3c97b548ab3a60059bb1acde6f0", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/d46eca0cbc51a3c97b548ab3a60059bb1acde6f0", "committedDate": "2020-03-13T21:16:11Z", "message": "Add component apis to exceptions list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/b77411f012eef3fbf321e072bf5156d9875dac7a", "committedDate": "2020-03-13T21:47:02Z", "message": "Fix yaml test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDY5NTA5", "url": "https://github.com/elastic/elasticsearch/pull/53558#pullrequestreview-375069509", "createdAt": "2020-03-16T10:17:02Z", "commit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDoxNzowM1rOF2tRvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDoyNTo1N1rOF2tjmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwOTI0Ng==", "bodyText": "Perhaps inline the request and transport actions classes into each action class?\nI think this will save some LOC.", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392909246", "createdAt": "2020-03-16T10:17:03Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/delete/DeleteComponentTemplateAction.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.delete;\n+\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+\n+public class DeleteComponentTemplateAction extends ActionType<AcknowledgedResponse> {\n+\n+    public static final DeleteComponentTemplateAction INSTANCE = new DeleteComponentTemplateAction();\n+    public static final String NAME = \"cluster:admin/component_template/delete\";\n+\n+    private DeleteComponentTemplateAction() {\n+        super(NAME, AcknowledgedResponse::new);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMDI0NQ==", "bodyText": "maybe move the body of this method and remove method into a static method?\nThis will make writing unit tests easier.", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392910245", "createdAt": "2020-03-16T10:18:58Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java", "diffHunk": "@@ -132,6 +134,98 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n         });\n     }\n \n+    /**\n+     * Add the given component template to the cluster state. If {@code create} is true, an\n+     * exception will be thrown if the component template already exists\n+     */\n+    public void putComponentTemplate(final String cause, final boolean create, final String name, final TimeValue masterTimeout,\n+                                     final ComponentTemplate template, final ActionListener<AcknowledgedResponse> listener) {\n+        clusterService.submitStateUpdateTask(\"create-component-template [\" + name + \"], cause [\" + cause + \"]\",\n+            new ClusterStateUpdateTask(Priority.URGENT) {\n+\n+                @Override\n+                public TimeValue timeout() {\n+                    return masterTimeout;\n+                }\n+\n+                @Override\n+                public void onFailure(String source, Exception e) {\n+                    listener.onFailure(e);\n+                }\n+\n+                @Override\n+                public ClusterState execute(ClusterState currentState) {\n+                    if (create && currentState.metaData().componentTemplates().containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMzgxNw==", "bodyText": "Should we return a json array here? If I recall correctly, for new apis we try to return arrays instead of keyed json objects.", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392913817", "createdAt": "2020-03-16T10:25:57Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateResponse.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class GetComponentTemplateResponse extends ActionResponse implements ToXContentObject {\n+\n+    private final Map<String, ComponentTemplate> componentTemplates;\n+\n+    public GetComponentTemplateResponse(StreamInput in) throws IOException {\n+        super(in);\n+        int size = in.readVInt();\n+        componentTemplates = new HashMap<>();\n+        for (int i = 0 ; i < size ; i++) {\n+            componentTemplates.put(in.readString(), new ComponentTemplate(in));\n+        }\n+    }\n+\n+    public GetComponentTemplateResponse(Map<String, ComponentTemplate> componentTemplates) {\n+        this.componentTemplates = componentTemplates;\n+    }\n+\n+    public Map<String, ComponentTemplate> getComponentTemplates() {\n+        return componentTemplates;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(componentTemplates.size());\n+        for (Map.Entry<String, ComponentTemplate> componentTemplate : componentTemplates.entrySet()) {\n+            out.writeString(componentTemplate.getKey());\n+            componentTemplate.getValue().writeTo(out);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        GetComponentTemplateResponse that = (GetComponentTemplateResponse) o;\n+        return Objects.equals(componentTemplates, that.componentTemplates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(componentTemplates);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjU0Mzc4", "url": "https://github.com/elastic/elasticsearch/pull/53558#pullrequestreview-374654378", "createdAt": "2020-03-13T22:37:11Z", "commit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjozODo1NFrOF2VRfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0NDozOVrOF2VW8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNTk2Nw==", "bodyText": "Use Strings.hasText(name) == false instead of !", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392515967", "createdAt": "2020-03-13T22:38:54Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeReadRequest;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Request that to retrieve one or more component templates\n+ */\n+public class GetComponentTemplateRequest extends MasterNodeReadRequest<GetComponentTemplateRequest> {\n+\n+    private String[] names;\n+\n+    public GetComponentTemplateRequest() { }\n+\n+    public GetComponentTemplateRequest(String... names) {\n+        this.names = names;\n+    }\n+\n+    public GetComponentTemplateRequest(StreamInput in) throws IOException {\n+        super(in);\n+        names = in.readStringArray();\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeStringArray(names);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (names == null) {\n+            validationException = addValidationError(\"names is null or empty\", validationException);\n+        } else {\n+            for (String name : names) {\n+                if (name == null || !Strings.hasText(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNjY5NA==", "bodyText": "empty names is allowed, right? To return all templates?", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392516694", "createdAt": "2020-03-13T22:41:48Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/GetComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeReadRequest;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * Request that to retrieve one or more component templates\n+ */\n+public class GetComponentTemplateRequest extends MasterNodeReadRequest<GetComponentTemplateRequest> {\n+\n+    private String[] names;\n+\n+    public GetComponentTemplateRequest() { }\n+\n+    public GetComponentTemplateRequest(String... names) {\n+        this.names = names;\n+    }\n+\n+    public GetComponentTemplateRequest(StreamInput in) throws IOException {\n+        super(in);\n+        names = in.readStringArray();\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeStringArray(names);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (names == null) {\n+            validationException = addValidationError(\"names is null or empty\", validationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNjk5Mw==", "bodyText": "You can move it above if and reuse", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392516993", "createdAt": "2020-03-13T22:43:13Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/get/TransportGetComponentTemplateAction.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.get;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.master.TransportMasterNodeReadAction;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlockException;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class TransportGetComponentTemplateAction extends\n+    TransportMasterNodeReadAction<GetComponentTemplateRequest, GetComponentTemplateResponse> {\n+\n+    @Inject\n+    public TransportGetComponentTemplateAction(TransportService transportService, ClusterService clusterService,\n+                                               ThreadPool threadPool, ActionFilters actionFilters,\n+                                               IndexNameExpressionResolver indexNameExpressionResolver) {\n+        super(GetComponentTemplateAction.NAME, transportService, clusterService, threadPool, actionFilters,\n+            GetComponentTemplateRequest::new, indexNameExpressionResolver);\n+    }\n+\n+    @Override\n+    protected String executor() {\n+        return ThreadPool.Names.SAME;\n+    }\n+\n+    @Override\n+    protected GetComponentTemplateResponse read(StreamInput in) throws IOException {\n+        return new GetComponentTemplateResponse(in);\n+    }\n+\n+    @Override\n+    protected ClusterBlockException checkBlock(GetComponentTemplateRequest request, ClusterState state) {\n+        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task, GetComponentTemplateRequest request, ClusterState state,\n+                                   ActionListener<GetComponentTemplateResponse> listener) {\n+        final Map<String, ComponentTemplate> results;\n+\n+        // If we did not ask for a specific name, then we return all templates\n+        if (request.names().length == 0) {\n+            results = new HashMap<>(state.metaData().componentTemplates());\n+        } else {\n+            results = new HashMap<>();\n+        }\n+\n+        Map<String, ComponentTemplate> allTemplates = state.metaData().componentTemplates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNzM2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (name == null) {\n          \n          \n            \n                    if (name == null || Strings.hasText(name) == false) {", "url": "https://github.com/elastic/elasticsearch/pull/53558#discussion_r392517360", "createdAt": "2020-03-13T22:44:39Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.indices.template.put;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * A request for putting a single component template into the cluster state\n+ */\n+public class PutComponentTemplateRequest extends MasterNodeRequest<PutComponentTemplateRequest> {\n+    private final String name;\n+    @Nullable\n+    private String cause;\n+    private boolean create;\n+    private ComponentTemplate componentTemplate;\n+\n+    public PutComponentTemplateRequest(StreamInput in) throws IOException {\n+        super(in);\n+        this.name = in.readString();\n+        this.cause = in.readOptionalString();\n+        this.create = in.readBoolean();\n+        this.componentTemplate = new ComponentTemplate(in);\n+    }\n+\n+    /**\n+     * Constructs a new put component template request with the provided name.\n+     */\n+    public PutComponentTemplateRequest(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeString(name);\n+        out.writeOptionalString(cause);\n+        out.writeBoolean(create);\n+        this.componentTemplate.writeTo(out);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (name == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77411f012eef3fbf321e072bf5156d9875dac7a"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3002266d8113f008b126358246806a357637adf2", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/3002266d8113f008b126358246806a357637adf2", "committedDate": "2020-03-16T16:21:21Z", "message": "Remove accidental ! in favor of == false"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d46f9cc76fd1da4712c18f26649bbadb3cd20a", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/f3d46f9cc76fd1da4712c18f26649bbadb3cd20a", "committedDate": "2020-03-16T16:23:51Z", "message": "Rejig TransportGetComponentTemplateAction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0153f47fef4f0ad21a922f7ef27f85a94e5cddb5", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/0153f47fef4f0ad21a922f7ef27f85a94e5cddb5", "committedDate": "2020-03-16T16:26:30Z", "message": "Check for empty name in PutComponentTemplateRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "068ecadcd8791bfcb82dc4bee456165428a11984", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/068ecadcd8791bfcb82dc4bee456165428a11984", "committedDate": "2020-03-16T16:38:54Z", "message": "Move addition into static method and add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2152ac303814fe251bbbf0f3b3e3ac73b9c1e4", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe2152ac303814fe251bbbf0f3b3e3ac73b9c1e4", "committedDate": "2020-03-16T16:49:16Z", "message": "Collapse request/response objects into the actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8dc5f449777b84a5c074539fd90ac1208a2ad5a", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/d8dc5f449777b84a5c074539fd90ac1208a2ad5a", "committedDate": "2020-03-16T16:50:36Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e56e63f08c2833a70e3c5d00d9bb14b17bb2f985", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/e56e63f08c2833a70e3c5d00d9bb14b17bb2f985", "committedDate": "2020-03-16T17:48:25Z", "message": "Merge branch 'master' into itv2-component-template-apis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d11d0e0864c660d63b772834cfd8dab1cbc35b", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/f6d11d0e0864c660d63b772834cfd8dab1cbc35b", "committedDate": "2020-03-16T18:30:39Z", "message": "Merge branch 'master' into itv2-component-template-apis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c9b76f41cc7a84197374f5413e4417aa5b14b9f", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/6c9b76f41cc7a84197374f5413e4417aa5b14b9f", "committedDate": "2020-03-17T15:35:59Z", "message": "Change output format to use arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2f460b8e5d732c9211f2a5b5b78c0bf4a664122", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/b2f460b8e5d732c9211f2a5b5b78c0bf4a664122", "committedDate": "2020-03-17T15:55:24Z", "message": "Merge branch 'master' into itv2-component-template-apis"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1401, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}