{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjkwMjMz", "number": 58708, "title": "Oidc additional client auth types", "bodyText": "The OpenID Connect specification defines a number of ways for a\nclient (RP) to authenticate itself to the OP when accessing the\nToken Endpoint. We currently only support client_secret_basic.\nThis change introduces support for 2 additional authentication\nmethods, namely client_secret_post (where the client credentials\nare passed in the body of the POST request to the OP) and\nclient_secret_jwt where the client constructs a JWT and signs\nit using the the client secret as a key.\nSupport for the above, and especially client_secret_jwt in our\nintegration tests meant that the OP we use ( Connect2id server )\nshould be able to validate the JWT that we send it from the RP\n(which contains the Token Endpoint as the aud claim ).\nSince we run the OP in docker and it listens on an ephemeral port\nwe would have no way of knowing the port so that we can configure\nthe ES running via the testcluster to know the \"correct\" Token\nEndpoint, and even if we did, this would not be the Token Endpoint\nURL that the OP would think it listens on. To alleviate this, we\nrun an ES single node cluster in docker, alongside the OP so that\nwe can configured it with the correct hostname and port within\nthe docker network.", "createdAt": "2020-06-29T22:56:15Z", "url": "https://github.com/elastic/elasticsearch/pull/58708", "merged": true, "mergeCommit": {"oid": "5d341dc28e120464244c0e32ef875f7450880719"}, "closed": true, "closedAt": "2020-09-14T06:16:24Z", "author": {"login": "jkakavas"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuoI6QAH2gAyNDQxNjkwMjMzOjMzNjBmYTEzZmI1MjlkMzNjNjAyYTE3MGY5NzUzNDc5OTI4ZGJkZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHITu9AH2gAyNDQxNjkwMjMzOjFkY2Q2ZjMxMDkwYjUxYTk0ZjBjMDk0N2ZmNDAyYWZkYmRkODQwOGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3360fa13fb529d33c602a170f9753479928dbdd3", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/3360fa13fb529d33c602a170f9753479928dbdd3", "committedDate": "2020-06-25T05:52:32Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7050759cfb616d9ec60f127868d1ca5382d9eee4", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/7050759cfb616d9ec60f127868d1ca5382d9eee4", "committedDate": "2020-06-29T12:20:13Z", "message": "OIDC: Enable additional client auth types\n\nThe OpenID Connect specification defines a number of ways for a\nclient (RP) to authenticate itself to the OP when accessing the\nToken Endpoint. We currently only support `client_secret_basic`.\n\nThis change introduces support for 2 additional authentication\nmethods, namely `client_secret_post` (where the client credentials\nare passed in the body of the POST request to the OP) and\n`client_secret_jwt` where the client constructs a JWT and signs\nit using the the client secret as a key.\n\nSupport for the above, and especially `client_secret_jwt` in our\nintegration tests meant that the OP we use ( Connect2id server )\nshould be able to validate the JWT that we send it from the RP.\nSince we run the OP in docker and it listens on an ephemeral port\nwe would have no way of knowing the port so that we can configure\nthe ES running via the testcluster to know the \"correct\" Token\nEndpoint, and even if we did, this would not be the Token Endpoint\nURL that the OP would think it listens on. To alleviate this, we\nrun an ES single node cluster in docker, alongside the OP so that\nwe can configured it with the correct hostname and port within\nthe docker network."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45d9a742a57174909816fccc1222d18e7158f06a", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/45d9a742a57174909816fccc1222d18e7158f06a", "committedDate": "2020-06-29T22:52:18Z", "message": "Merge remote-tracking branch 'origin/master' into oidc-additional-client-auth-types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "committedDate": "2020-06-30T04:54:25Z", "message": "remove random characters from config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDE0MDI3", "url": "https://github.com/elastic/elasticsearch/pull/58708#pullrequestreview-440014027", "createdAt": "2020-06-30T13:28:48Z", "commit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyODo0OFrOGq8Vwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoxMTo1NFrOGq-U-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MTk4Ng==", "bodyText": "Nit: The name or value is usually placed inside a pair of brackets in error messages, .e.g ... but was [xxx].", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447681986", "createdAt": "2020-06-30T13:28:48Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }\n+            } else {\n+                tokensListener.onFailure(new ElasticsearchSecurityException(\"Failed to exchange code for Id Token using Token Endpoint.\" +\n+                    \"Expected client authentication method to be one of \" + OpenIdConnectRealmSettings.CLIENT_AUTH_METHODS + \" but was \" +\n+                    rpConfig.getClientAuthenticationMethod()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA==", "bodyText": "Maybe I am missing something obvious. But client_id is not added as one of the request parameters? The map returned from ClientSecretJWT.toParameters() only contains client_assertion and client_assertion_type if I read the code correctly.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447685828", "createdAt": "2020-06-30T13:33:49Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4ODI2Mg==", "bodyText": "Nit: need a blank line before this method.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447688262", "createdAt": "2020-06-30T13:37:11Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticatorTests.java", "diffHunk": "@@ -841,6 +842,8 @@ private RelyingPartyConfiguration getDefaultRpConfig() throws URISyntaxException\n             new ResponseType(\"id_token\", \"token\"),\n             new Scope(\"openid\"),\n             JWSAlgorithm.RS384,\n+            ClientAuthenticationMethod.CLIENT_SECRET_BASIC,\n+            JWSAlgorithm.HS384,\n             new URI(\"https://rp.elastic.co/successfull_logout\"));\n     }\n     private RelyingPartyConfiguration getRpConfig(String alg) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTMxMg==", "bodyText": "\"none\", \"None\", \"noNe\", \"nOnE\", \"NonE\" ... \ud83d\udc4d that we will not have this issue.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447695312", "createdAt": "2020-06-30T13:46:37Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealmSettingsTests.java", "diffHunk": "@@ -327,6 +362,45 @@ public void testInvalidProxyHostThrowsError() {\n         ));\n     }\n \n+    public void testInvalidClientAuthenticationMethodThrowsError() {\n+        final Settings.Builder settingsBuilder = Settings.builder()\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_AUTHORIZATION_ENDPOINT), \"https://op.example.com/login\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_ISSUER), \"https://op.example.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_JWKSET_PATH), \"https://op.example.com/jwks.json\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_TOKEN_ENDPOINT), \"https://op.example.com/token\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.PRINCIPAL_CLAIM.getClaim()), \"sub\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_REDIRECT_URI), \"https://rp.my.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_ID), \"rp-my\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_AUTH_METHOD), \"none\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDU1NA==", "bodyText": "I don't see test.fixtures.elasticsearch-node.9200 get set anywhere. How does this work?", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447714554", "createdAt": "2020-06-30T14:11:54Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -65,16 +71,31 @@\n     private static final String REALM_NAME = \"c2id\";\n     private static final String REALM_NAME_IMPLICIT = \"c2id-implicit\";\n     private static final String REALM_NAME_PROXY = \"c2id-proxy\";\n+    private static final String REALM_NAME_CLIENT_POST_AUTH = \"c2id-post\";\n+    private static final String REALM_NAME_CLIENT_JWT_AUTH = \"c2id-jwt\";\n     private static final String FACILITATOR_PASSWORD = \"f@cilit@t0r\";\n-    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id/clients\";\n-    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id-login/api/\";\n+    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id/clients\";\n+    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id-login/api/\";\n+    private static final String ES_PORT = getEphemeralTcpPortFromProperty(\"elasticsearch-node\", \"9200\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e1e553724b454b64043e80a74a10c57b7c5c7ceb", "committedDate": "2020-06-30T14:39:52Z", "message": "address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzAyNTQ1", "url": "https://github.com/elastic/elasticsearch/pull/58708#pullrequestreview-440302545", "createdAt": "2020-06-30T19:00:13Z", "commit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowMDoxM1rOGrKbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowMDoxM1rOGrKbkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMjg0OA==", "bodyText": "I wonder if we can remove elasticsearch.build plugin. This project contains no code or tests, it's simply a test fixture.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447912848", "createdAt": "2020-06-30T19:00:13Z", "author": {"login": "mark-vieira"}, "path": "x-pack/test/idp-fixture/build.gradle", "diffHunk": "@@ -1,4 +1,36 @@\n+import org.elasticsearch.gradle.VersionProperties\n+import org.elasticsearch.gradle.Architecture\n+\n apply plugin: 'elasticsearch.build'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTI5Mjc2", "url": "https://github.com/elastic/elasticsearch/pull/58708#pullrequestreview-440529276", "createdAt": "2020-07-01T03:56:33Z", "commit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMzo1NjozM1rOGrV6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDoyODowMVrOGrWWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwMTAwNA==", "bodyText": "Is this an image that we maintain? If so, where can I find the Dockerfile that builds the image?", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448101004", "createdAt": "2020-07-01T03:56:33Z", "author": {"login": "ywangd"}, "path": "x-pack/test/idp-fixture/docker-compose.yml", "diffHunk": "@@ -40,11 +153,13 @@ services:\n       - ./idp/shib-jetty-base/start.d/ssl.ini:/opt/shib-jetty-base/start.d/ssl.ini\n \n   oidc-provider:\n-    image: \"c2id/c2id-server:7.8\"\n+    image: \"c2id/c2id-server:9.5\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwNzA0MA==", "bodyText": "Not sure where this Bearer token is picked from. I guess it has something to do with the docker image?", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448107040", "createdAt": "2020-07-01T04:23:43Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -95,30 +117,71 @@ public static void registerClients() throws Exception {\n                 \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n                 \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"]\" +\n                 \"}\";\n+            String postClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_post\\\"\" +\n+                \"}\";\n+            String jwtClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post-jwt\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_jwt\\\"\" +\n+                \"}\";\n             HttpPost httpPost = new HttpPost(REGISTRATION_URL);\n             final BasicHttpContext context = new BasicHttpContext();\n             httpPost.setEntity(new StringEntity(codeClient, ContentType.APPLICATION_JSON));\n             httpPost.setHeader(\"Accept\", \"application/json\");\n             httpPost.setHeader(\"Content-type\", \"application/json\");\n             httpPost.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost, context));\n-            assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\n-            httpPost.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n+\n             HttpPost httpPost2 = new HttpPost(REGISTRATION_URL);\n             httpPost2.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n             httpPost2.setHeader(\"Accept\", \"application/json\");\n             httpPost2.setHeader(\"Content-type\", \"application/json\");\n             httpPost2.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response2 = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost2, context));\n-            assertThat(response2.getStatusLine().getStatusCode(), equalTo(200));\n+\n+            HttpPost httpPost3 = new HttpPost(REGISTRATION_URL);\n+            httpPost3.setEntity(new StringEntity(postClient, ContentType.APPLICATION_JSON));\n+            httpPost3.setHeader(\"Accept\", \"application/json\");\n+            httpPost3.setHeader(\"Content-type\", \"application/json\");\n+            httpPost3.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwODEwNQ==", "bodyText": "Same here. Would be great to learn how these configurations work.", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448108105", "createdAt": "2020-07-01T04:28:01Z", "author": {"login": "ywangd"}, "path": "x-pack/test/idp-fixture/oidc/override.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-op.issuer=http://localhost:8080\n-op.authz.endpoint=http://localhost:8080/c2id-login/\n+op.issuer=http://oidc-provider:8080/c2id\n+op.authz.endpoint=http://oidc-provider:8080/c2id-login/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e66c6e5d092395fe41c0c1d85e3601b39d153a72", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e66c6e5d092395fe41c0c1d85e3601b39d153a72", "committedDate": "2020-08-19T08:54:42Z", "message": "Merge remote-tracking branch 'origin/master' into oidc-additional-client-auth-types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49cd4388950e8e07cf35372e3a67cc5659eacfb3", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/49cd4388950e8e07cf35372e3a67cc5659eacfb3", "committedDate": "2020-08-19T09:13:17Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0636079234ac1cf7bbb7cfb37df56dfb8479cf28", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/0636079234ac1cf7bbb7cfb37df56dfb8479cf28", "committedDate": "2020-09-01T09:33:36Z", "message": "Merge branch 'master' into oidc-additional-client-auth-types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52a4c80eb89f14ec2cdebd776e95236e259f2f53", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/52a4c80eb89f14ec2cdebd776e95236e259f2f53", "committedDate": "2020-09-09T08:53:49Z", "message": "Merge remote-tracking branch 'origin/master' into oidc-additional-client-auth-types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dcd6f31090b51a94f0c0947ff402afdbdd8408e", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/1dcd6f31090b51a94f0c0947ff402afdbdd8408e", "committedDate": "2020-09-09T08:55:30Z", "message": "Apply Rene's fix for test fixture\n\nFrom\nhttps://github.com/breskeby/elasticsearch/commit/de079d6dde022c5122a0c7b41ae9248abed4ad58"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2579, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}