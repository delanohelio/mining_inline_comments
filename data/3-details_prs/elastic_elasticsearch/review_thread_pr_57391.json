{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDE4NTk3", "number": 57391, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0NzozMlrOECpZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1NDowNVrOEORMYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjEwODk0OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0NzozMlrOGfO2Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0NzozMlrOGfO2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMjMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== `DATEE_PARSE`\n          \n          \n            \n            ==== `DATE_PARSE`", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435402311", "createdAt": "2020-06-04T16:47:32Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -404,6 +404,49 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateTimeMinutes]\n include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateMinutes]\n --------------------------------------------------\n \n+[[sql-functions-datetime-dateparse]]\n+==== `DATEE_PARSE`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjExMTU0OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0ODoxNlrOGfO3-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0ODoxNlrOGfO3-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMjc0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the parsing pattern contains date units (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned\n          \n          \n            \n            If the parsing pattern contains time units (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435402745", "createdAt": "2020-06-04T16:48:16Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -404,6 +404,49 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateTimeMinutes]\n include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateMinutes]\n --------------------------------------------------\n \n+[[sql-functions-datetime-dateparse]]\n+==== `DATEE_PARSE`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+DATE_PARSE(\n+    string_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date expression as a string\n+<2> parsing pattern\n+\n+*Output*: date\n+\n+*Description*: Returns a date by parsing the 1st argument using the format specified in the 2nd argument. The parsing\n+format pattern used is the one from\n+https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/format/DateTimeFormatter.html[`java.time.format.DateTimeFormatter`].\n+If any of the two arguments is `null` or an empty string `null` is returned.\n+\n+[NOTE]\n+If the parsing pattern contains date units (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjExMzY5OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0ODo0N1rOGfO5SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0ODo0N1rOGfO5SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMzA4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            as the function needs to return a value of `date` type which will contain only date.\n          \n          \n            \n            as the function needs to return a value of `date` type which will contain only date part.", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435403081", "createdAt": "2020-06-04T16:48:47Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -404,6 +404,49 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateTimeMinutes]\n include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateMinutes]\n --------------------------------------------------\n \n+[[sql-functions-datetime-dateparse]]\n+==== `DATEE_PARSE`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+DATE_PARSE(\n+    string_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date expression as a string\n+<2> parsing pattern\n+\n+*Output*: date\n+\n+*Description*: Returns a date by parsing the 1st argument using the format specified in the 2nd argument. The parsing\n+format pattern used is the one from\n+https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/format/DateTimeFormatter.html[`java.time.format.DateTimeFormatter`].\n+If any of the two arguments is `null` or an empty string `null` is returned.\n+\n+[NOTE]\n+If the parsing pattern contains date units (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned\n+as the function needs to return a value of `date` type which will contain only date.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjEyMTAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/date.csv-spec", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1MDo0OVrOGfO-OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzowNzoyOFrOGfe8gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNDM0NQ==", "bodyText": "How come this works? the parsing pattern contains HH which is time information.", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435404345", "createdAt": "2020-06-04T16:50:49Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/date.csv-spec", "diffHunk": "@@ -164,3 +164,105 @@ SELECT MAX(salary) FROM test_emp GROUP BY TODAY();\n ---------------\n 74999\n ;\n+\n+selectDateParse\n+schema::date1:date\n+SELECT DATE_PARSE('07/04/2020', 'dd/MM/uuuu') AS date1;\n+\n+   date1       \n+------------\n+2020-04-07 \n+;\n+\n+\n+selectDateParseWithField\n+schema::birth_date:ts|dp_birth_date:date\n+SELECT birth_date, DATE_PARSE(DATETIME_FORMAT(birth_date, 'MM/dd/ HH uuuu'), concat(gender, 'M/dd/ HH uuuu')) AS dp_birth_date", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2NjA1MA==", "bodyText": "It's work. I found if the parsing pattern contains time units and date units (e.g. 'MM/dd/ HH mm ss  uuuu', 'MM/dd/ HH  uuuu', etc.) an error will not be returned.\nAnd The time parse function also will not return error when the parsing pattern contains date units.\nShould I modify the document or check the parsing pattern strictly?", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435666050", "createdAt": "2020-06-05T03:07:28Z", "author": {"login": "Patrick0308"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/date.csv-spec", "diffHunk": "@@ -164,3 +164,105 @@ SELECT MAX(salary) FROM test_emp GROUP BY TODAY();\n ---------------\n 74999\n ;\n+\n+selectDateParse\n+schema::date1:date\n+SELECT DATE_PARSE('07/04/2020', 'dd/MM/uuuu') AS date1;\n+\n+   date1       \n+------------\n+2020-04-07 \n+;\n+\n+\n+selectDateParseWithField\n+schema::birth_date:ts|dp_birth_date:date\n+SELECT birth_date, DATE_PARSE(DATETIME_FORMAT(birth_date, 'MM/dd/ HH uuuu'), concat(gender, 'M/dd/ HH uuuu')) AS dp_birth_date", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNDM0NQ=="}, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjEzMDEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1MzoyMFrOGfPEGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1MzoyMFrOGfPEGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTg1MQ==", "bodyText": "I think it makes sense to show:\n2020-04-07T00:00:00.000+03:00 so that it's visible that the timezone is considered.", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435405851", "createdAt": "2020-06-04T16:53:20Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "diffHunk": "@@ -2841,6 +2842,31 @@ schema::time:time\n // end::timeParse3\n ;\n \n+dateParse1\n+schema::date:date\n+// tag::dateParse1\n+SELECT DATE_PARSE('07/04/2020', 'dd/MM/uuuu') AS \"date\";\n+\n+   date\n+-----------\n+2020-04-07\n+// end::dateParse1\n+;\n+\n+dateParse2-Ignore\n+schema::date:date\n+// tag::timeParse3\n+{\n+    \"query\" : \"SELECT DATE_PARSE('07/04/2020', 'dd/MM/uuuu') AS \\\"date\\\"\",\n+    \"time_zone\" : \"Europe/Athens\"\n+}\n+\n+   date\n+------------\n+2020-04-07", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjEzODc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NTozNlrOGfPJqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNTo0ODo1OVrOGfhLvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzI3NA==", "bodyText": "I don't think you should throw an exception here, it should be handled by the code here: https://github.com/elastic/elasticsearch/pull/57391/files#diff-abec0662fc741468125e83032b91a634R66", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435407274", "createdAt": "2020-06-04T16:55:36Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -31,7 +32,8 @@\n \n     public enum Parser {\n         DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        TIME(\"time\", OffsetTime::from, LocalTime::from),\n+        DATE(\"date\", LocalDate::from, (TemporalAccessor ta) -> {throw new RuntimeException();});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMjcxNg==", "bodyText": "DateTimeFormatter.parseBest needs two queries at least. May be adding (TemporalAccessor ta) -> {throw new RuntimeException();} in constructor is better? or use DateTimeFormatter.parse in constructor where queries.length == 1?", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435702716", "createdAt": "2020-06-05T05:48:59Z", "author": {"login": "Patrick0308"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -31,7 +32,8 @@\n \n     public enum Parser {\n         DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        TIME(\"time\", OffsetTime::from, LocalTime::from),\n+        DATE(\"date\", LocalDate::from, (TemporalAccessor ta) -> {throw new RuntimeException();});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzI3NA=="}, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjE0MDM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NjowMFrOGfPKsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NjowMFrOGfPKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzUzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (ta instanceof LocalDate){\n          \n          \n            \n                    } else if (ta instanceof LocalDate) {", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435407538", "createdAt": "2020-06-04T16:56:00Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java", "diffHunk": "@@ -235,6 +239,8 @@ public static TemporalAccessor atTimeZone(TemporalAccessor ta, ZoneId zoneId) {\n             return atTimeZone((OffsetTime) ta, zoneId);\n         } else if (ta instanceof LocalTime) {\n             return atTimeZone((LocalTime) ta, zoneId);\n+        } else if (ta instanceof LocalDate){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjE1MTQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1ODo0N1rOGfPRvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1ODo0N1rOGfPRvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwOTM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ZonedDateTime date(int year, int month, int day, ZoneId zoneId){\n          \n          \n            \n                public static ZonedDateTime date(int year, int month, int day, ZoneId zoneId) {", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435409341", "createdAt": "2020-06-04T16:58:47Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeTestUtils.java", "diffHunk": "@@ -63,6 +63,10 @@ public static OffsetTime time(int hour, int minute, int second, int nano, ZoneId\n         return OffsetTime.of(lt, zoneId.getRules().getValidOffsets(ldt).get(0));\n     }\n \n+    public static ZonedDateTime date(int year, int month, int day, ZoneId zoneId){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjE1NTc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessorTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1OTo1NVrOGfPUjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyMjoxOVrOGh6HJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMDA2Mw==", "bodyText": "Please add one more test where there are both valid date and time parts which should also throw an exception as time parts are not allowed.", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435410063", "createdAt": "2020-06-04T16:59:55Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessorTests.java", "diffHunk": "@@ -113,44 +114,86 @@ public void testDateTimeInvalidInputs() {\n     \n     public void testTimeInvalidInputs() {\n         SqlIllegalArgumentException siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\"A string is required; received [10]\", siae.getMessage());\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\"A string is required; received [20]\", siae.getMessage());\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [11:04:07] or pattern [invalid] is received; Unknown pattern letter: i\",\n-                siae.getMessage()\n+            \"Invalid time string [11:04:07] or pattern [invalid] is received; Unknown pattern letter: i\",\n+            siae.getMessage()\n         );\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [11:04:07] or pattern [HH:mm] is received; \" +\n-                        \"Text '11:04:07' could not be parsed, unparsed text found at index 5\",\n-                siae.getMessage()\n+            \"Invalid time string [11:04:07] or pattern [HH:mm] is received; \" +\n+                \"Text '11:04:07' could not be parsed, unparsed text found at index 5\",\n+            siae.getMessage()\n         );\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM/uuuu\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM/uuuu\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"Invalid time string [07/05/2020] or pattern [dd/MM/uuuu] is received; Unable to convert parsed text into [time]\",\n+            siae.getMessage()\n+        );\n+    }\n+ \n+    public void testDateInvalidInputs() {\n+        SqlIllegalArgumentException siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"A string is required; received [10]\", siae.getMessage());\n+\n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"A string is required; received [20]\", siae.getMessage());\n+\n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(\"07/05/2020\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [07/05/2020] or pattern [dd/MM/uuuu] is received; Unable to convert parsed text into [time]\",\n+            \"Invalid date string [07/05/2020] or pattern [invalid] is received; Unknown pattern letter: i\",\n                 siae.getMessage()\n         );\n+\n+        siae = expectThrows(\n+             SqlIllegalArgumentException.class,\n+             () -> new DateParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+           \"Invalid date string [07/05/2020] or pattern [dd/MM] is received; \" +\n+                \"Text '07/05/2020' could not be parsed, unparsed text found at index 5\",\n+           siae.getMessage()\n+        );\n+    \n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm:ss\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"Invalid date string [11:04:07] or pattern [HH:mm:ss] is received; Unable to convert parsed text into [date]\",\n+            siae.getMessage()\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwODI5Mw==", "bodyText": "Same problem as above, is both valid date and time parts must not be allowed? I add unit test in testParsing for now.", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r438208293", "createdAt": "2020-06-10T15:22:19Z", "author": {"login": "Patrick0308"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessorTests.java", "diffHunk": "@@ -113,44 +114,86 @@ public void testDateTimeInvalidInputs() {\n     \n     public void testTimeInvalidInputs() {\n         SqlIllegalArgumentException siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\"A string is required; received [10]\", siae.getMessage());\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\"A string is required; received [20]\", siae.getMessage());\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [11:04:07] or pattern [invalid] is received; Unknown pattern letter: i\",\n-                siae.getMessage()\n+            \"Invalid time string [11:04:07] or pattern [invalid] is received; Unknown pattern letter: i\",\n+            siae.getMessage()\n         );\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [11:04:07] or pattern [HH:mm] is received; \" +\n-                        \"Text '11:04:07' could not be parsed, unparsed text found at index 5\",\n-                siae.getMessage()\n+            \"Invalid time string [11:04:07] or pattern [HH:mm] is received; \" +\n+                \"Text '11:04:07' could not be parsed, unparsed text found at index 5\",\n+            siae.getMessage()\n         );\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM/uuuu\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM/uuuu\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"Invalid time string [07/05/2020] or pattern [dd/MM/uuuu] is received; Unable to convert parsed text into [time]\",\n+            siae.getMessage()\n+        );\n+    }\n+ \n+    public void testDateInvalidInputs() {\n+        SqlIllegalArgumentException siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"A string is required; received [10]\", siae.getMessage());\n+\n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"A string is required; received [20]\", siae.getMessage());\n+\n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(\"07/05/2020\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [07/05/2020] or pattern [dd/MM/uuuu] is received; Unable to convert parsed text into [time]\",\n+            \"Invalid date string [07/05/2020] or pattern [invalid] is received; Unknown pattern letter: i\",\n                 siae.getMessage()\n         );\n+\n+        siae = expectThrows(\n+             SqlIllegalArgumentException.class,\n+             () -> new DateParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+           \"Invalid date string [07/05/2020] or pattern [dd/MM] is received; \" +\n+                \"Text '07/05/2020' could not be parsed, unparsed text found at index 5\",\n+           siae.getMessage()\n+        );\n+    \n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm:ss\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"Invalid date string [11:04:07] or pattern [HH:mm:ss] is received; Unable to convert parsed text into [date]\",\n+            siae.getMessage()\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMDA2Mw=="}, "originalCommit": {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMzNjQ1OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowMTozMlrOGkieDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowMTozMlrOGkieDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NjY2OQ==", "bodyText": "You need to close the ====", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r440966669", "createdAt": "2020-06-16T16:01:32Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -404,6 +404,49 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateTimeMinutes]\n include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateMinutes]\n --------------------------------------------------\n \n+[[sql-functions-datetime-dateparse]]\n+==== `DATE_PARSE`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+DATE_PARSE(\n+    string_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date expression as a string\n+<2> parsing pattern\n+\n+*Output*: date\n+\n+*Description*: Returns a date by parsing the 1st argument using the format specified in the 2nd argument. The parsing\n+format pattern used is the one from\n+https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/format/DateTimeFormatter.html[`java.time.format.DateTimeFormatter`].\n+If any of the two arguments is `null` or an empty string `null` is returned.\n+\n+[NOTE]\n+If the parsing pattern not contains date units completely (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned\n+as the function needs to return a value of `date` type which will contain date part.\n+\n+[source, sql]\n+--------------------------------------------------\n+include-tagged::{sql-specs}/docs/docs.csv-spec[dateParse1]\n+--------------------------------------------------\n+\n+[NOTE]\n+====\n+The resulting `date` will have the time zone specified by the user through the \n+<<sql-rest-fields-timezone,`time_zone`>>/<<jdbc-cfg-timezone,`timezone`>> REST/driver parameters\n+with no conversion applied.\n+\n+[source, sql]\n+--------------------------------------------------\n+include-tagged::{sql-specs}/docs/docs.csv-spec[dateParse2]\n+--------------------------------------------------\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f1461ca2b3dd5a4bf776f78b8be18208740ea"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzU3OTY5OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMzowNFrOGkk5cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMzowNFrOGkk5cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNjQ0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the parsing pattern not contains date units completely (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned\n          \n          \n            \n            If the parsing pattern does not contain all valid date units (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r441006448", "createdAt": "2020-06-16T17:03:04Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -404,6 +404,49 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateTimeMinutes]\n include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateMinutes]\n --------------------------------------------------\n \n+[[sql-functions-datetime-dateparse]]\n+==== `DATE_PARSE`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+DATE_PARSE(\n+    string_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date expression as a string\n+<2> parsing pattern\n+\n+*Output*: date\n+\n+*Description*: Returns a date by parsing the 1st argument using the format specified in the 2nd argument. The parsing\n+format pattern used is the one from\n+https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/format/DateTimeFormatter.html[`java.time.format.DateTimeFormatter`].\n+If any of the two arguments is `null` or an empty string `null` is returned.\n+\n+[NOTE]\n+If the parsing pattern not contains date units completely (e.g. 'HH:mm:ss', 'dd-MM HH:mm:ss', etc.) an error is returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f1461ca2b3dd5a4bf776f78b8be18208740ea"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzU4Mzc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowNDoxNVrOGkk8Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowNDoxNVrOGkk8Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNzEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n          \n          \n            \n                    DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from),\n          \n          \n            \n                    TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n          \n          \n            \n                    DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> { throw new DateTimeException(\"InvalidDate\");});\n          \n          \n            \n                    \n          \n          \n            \n                    private final BiFunction<String, String, TemporalAccessor> parser;\n          \n          \n            \n                    \n          \n          \n            \n                    private final String parseType;\n          \n          \n            \n            \n          \n          \n            \n                    Parser(DataType parseType,  TemporalQuery<?>... queries) {\n          \n          \n            \n                        this.parseType = parseType.typeName();\n          \n          \n            \n                        this.parser = (timestampStr, pattern) -> DateTimeFormatter.ofPattern(pattern, Locale.ROOT).parseBest(timestampStr, queries);\n          \n          \n            \n                    }", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r441007138", "createdAt": "2020-06-16T17:04:15Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -31,16 +32,21 @@\n \n     public enum Parser {\n         DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f1461ca2b3dd5a4bf776f78b8be18208740ea"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Nzc4OTI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo1OTowM1rOGnn__g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo1OTowM1rOGnn__g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMzAwNg==", "bodyText": "Please remove.", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r444203006", "createdAt": "2020-06-23T12:59:03Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -30,15 +34,17 @@\n public class DateTimeParseProcessor extends BinaryDateTimeProcessor {\n \n     public enum Parser {\n-        DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from), \n+        TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n+        DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> {throw new DateTimeException(\"InvalidDate\");});\n         \n         private final BiFunction<String, String, TemporalAccessor> parser;\n         \n-        private final String parseType;\n+        private final DataType parseType;\n \n-        Parser(String parseType,  TemporalQuery<?>... queries) {\n+        Parser(DataType parseType, TemporalQuery<?>... queries) {\n             this.parseType = parseType;\n+            // queries's length must must be greater than one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819176f07dd840dd9ec11a21fae867fb575c1d2d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Nzc5MzQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzowMDowNFrOGnoCkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzowMDowNFrOGnoCkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMzY2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.parseType = parseType;\n          \n          \n            \n                        this.parseType = parseType.typeName();", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r444203665", "createdAt": "2020-06-23T13:00:04Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -30,15 +34,17 @@\n public class DateTimeParseProcessor extends BinaryDateTimeProcessor {\n \n     public enum Parser {\n-        DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from), \n+        TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n+        DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> {throw new DateTimeException(\"InvalidDate\");});\n         \n         private final BiFunction<String, String, TemporalAccessor> parser;\n         \n-        private final String parseType;\n+        private final DataType parseType;\n \n-        Parser(String parseType,  TemporalQuery<?>... queries) {\n+        Parser(DataType parseType, TemporalQuery<?>... queries) {\n             this.parseType = parseType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819176f07dd840dd9ec11a21fae867fb575c1d2d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Nzc5NDEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzowMDoxOFrOGnoDDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzowMDoxOFrOGnoDDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMzc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private final DataType parseType;\n          \n          \n            \n                    private final String parseType;", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r444203789", "createdAt": "2020-06-23T13:00:18Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -30,15 +34,17 @@\n public class DateTimeParseProcessor extends BinaryDateTimeProcessor {\n \n     public enum Parser {\n-        DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from), \n+        TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n+        DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> {throw new DateTimeException(\"InvalidDate\");});\n         \n         private final BiFunction<String, String, TemporalAccessor> parser;\n         \n-        private final String parseType;\n+        private final DataType parseType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819176f07dd840dd9ec11a21fae867fb575c1d2d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM3NzY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/date.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1OToxN1rOGofH6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1OToxN1rOGofH6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNjE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            dateTimeParseHaving\n          \n          \n            \n            dateParseHaving", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r445106155", "createdAt": "2020-06-24T18:59:17Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/date.csv-spec", "diffHunk": "@@ -164,3 +164,105 @@ SELECT MAX(salary) FROM test_emp GROUP BY TODAY();\n ---------------\n 74999\n ;\n+\n+selectDateParse\n+schema::date1:date\n+SELECT DATE_PARSE('07/04/2020', 'dd/MM/uuuu') AS date1;\n+\n+   date1       \n+------------\n+2020-04-07 \n+;\n+\n+\n+selectDateParseWithField\n+schema::birth_date:ts|dp_birth_date:date\n+SELECT birth_date, DATE_PARSE(DATETIME_FORMAT(birth_date, 'MM/dd/ HH uuuu'), concat(gender, 'M/dd/ HH uuuu')) AS dp_birth_date\n+FROM test_emp WHERE gender = 'M' AND emp_no BETWEEN 10037 AND 10052 ORDER BY emp_no;\n+\n+       birth_date        | dp_birth_date\n+-------------------------+----------------\n+1963-07-22 00:00:00.000Z | 1963-07-22\n+1960-07-20 00:00:00.000Z | 1960-07-20\n+1959-10-01 00:00:00.000Z | 1959-10-01\n+null                     | null\n+null                     | null\n+null                     | null\n+null                     | null\n+null                     | null\n+1958-05-21 00:00:00.000Z | 1958-05-21\n+1953-07-28 00:00:00.000Z | 1953-07-28\n+1961-02-26 00:00:00.000Z | 1961-02-26\n+;\n+\n+dateParseWhere\n+schema::birth_date:ts|dp_birth_date:date\n+SELECT birth_date, DATE_PARSE(DATETIME_FORMAT(birth_date, 'MM_dd_uuuu'), 'MM_dd_uuuu') AS dp_birth_date\n+FROM test_emp WHERE dp_birth_date > '1963-10-20'::date ORDER BY emp_no;\n+\n+       birth_date        | dp_birth_date\n+-------------------------+----------------\n+1964-06-02 00:00:00.000Z | 1964-06-02\n+1963-11-26 00:00:00.000Z | 1963-11-26\n+1964-04-18 00:00:00.000Z | 1964-04-18\n+1964-10-18 00:00:00.000Z | 1964-10-18\n+1964-06-11 00:00:00.000Z | 1964-06-11\n+1965-01-03 00:00:00.000Z | 1965-01-03\n+;\n+\n+dateParseOrderBy\n+schema::birth_date:ts|dp_birth_date:date\n+SELECT birth_date, DATE_PARSE(DATETIME_FORMAT(birth_date, 'MM/dd/uuuu'), 'MM/dd/uuuu') AS dp_birth_date\n+FROM test_emp ORDER BY 2 DESC NULLS LAST LIMIT 10;\n+\n+       birth_date        | dp_birth_date\n+-------------------------+---------------\n+1965-01-03 00:00:00.000Z | 1965-01-03\n+1964-10-18 00:00:00.000Z | 1964-10-18\n+1964-06-11 00:00:00.000Z | 1964-06-11\n+1964-06-02 00:00:00.000Z | 1964-06-02\n+1964-04-18 00:00:00.000Z | 1964-04-18\n+1963-11-26 00:00:00.000Z | 1963-11-26\n+1963-09-09 00:00:00.000Z | 1963-09-09\n+1963-07-22 00:00:00.000Z | 1963-07-22\n+1963-06-07 00:00:00.000Z | 1963-06-07\n+1963-06-01 00:00:00.000Z | 1963-06-01\n+;\n+\n+dateParseGroupBy\n+schema::count:l|df_birth_date:s\n+SELECT count(*) AS count, DATETIME_FORMAT(DATE_PARSE(DATETIME_FORMAT(birth_date, 'dd/MM/uuuu'), 'dd/MM/uuuu'), 'MM') AS df_birth_date\n+FROM test_emp GROUP BY df_birth_date ORDER BY 1 DESC, 2 DESC NULLS LAST LIMIT 10;\n+\n+ count | df_birth_date\n+-------+---------------\n+10     | 09\n+10     | 05\n+10     | null\n+9      | 10\n+9      | 07\n+8      | 11\n+8      | 04\n+8      | 02\n+7      | 12\n+7      | 06\n+;\n+\n+dateTimeParseHaving", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a802cc0406b16352c792cf08a399c4d57b0d5ab0"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM4MDQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMDowOVrOGofJvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMDowOVrOGofJvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNjYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // tag::timeParse3\n          \n          \n            \n            // tag::dateParse2", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r445106622", "createdAt": "2020-06-24T19:00:09Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/docs/docs.csv-spec", "diffHunk": "@@ -2864,6 +2865,31 @@ schema::time:time\n // end::timeParse3\n ;\n \n+dateParse1\n+schema::date:date\n+// tag::dateParse1\n+SELECT DATE_PARSE('07/04/2020', 'dd/MM/uuuu') AS \"date\";\n+\n+   date\n+-----------\n+2020-04-07\n+// end::dateParse1\n+;\n+\n+dateParse2-Ignore\n+schema::date:date\n+// tag::timeParse3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a802cc0406b16352c792cf08a399c4d57b0d5ab0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzk3MjE4OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1NDowNVrOGxUvtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1NDowNVrOGxUvtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3MzMwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If any of the two arguments is `null` or an empty string `null` is returned.\n          \n          \n            \n            If any of the two arguments is `null` or an empty string, then `null` is returned.", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r454373303", "createdAt": "2020-07-14T13:54:05Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -404,6 +404,50 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateTimeMinutes]\n include-tagged::{sql-specs}/docs/docs.csv-spec[dateDiffDateMinutes]\n --------------------------------------------------\n \n+[[sql-functions-datetime-dateparse]]\n+==== `DATE_PARSE`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+DATE_PARSE(\n+    string_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date expression as a string\n+<2> parsing pattern\n+\n+*Output*: date\n+\n+*Description*: Returns a date by parsing the 1st argument using the format specified in the 2nd argument. The parsing\n+format pattern used is the one from\n+https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/format/DateTimeFormatter.html[`java.time.format.DateTimeFormatter`].\n+If any of the two arguments is `null` or an empty string `null` is returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c2d72a74ddf9d0621f8bc62d64b979383c69c5"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3803, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}