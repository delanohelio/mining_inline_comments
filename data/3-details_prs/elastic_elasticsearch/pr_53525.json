{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NTI3OTQ3", "number": 53525, "title": "SQL: add support for index aliases for SYS COLUMNS command", "bodyText": "Fixes #31609.", "createdAt": "2020-03-13T00:03:32Z", "url": "https://github.com/elastic/elasticsearch/pull/53525", "merged": true, "mergeCommit": {"oid": "f65e4d6ff7b2e00eb6f9c985fbe7cb24de00f045"}, "closed": true, "closedAt": "2020-03-17T09:46:18Z", "author": {"login": "astefan"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNEbCZgH2gAyMzg3NTI3OTQ3Ojk0N2U1MDEwMTI1ZjI1YTVmMWFiOGJmNmYwNDk0ZWE3M2ZkZTE0YTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOepmqgH2gAyMzg3NTI3OTQ3OjA3OWJlNmJhOGZhODA2ZjQ4NTFiZTlhZjUyOWJjNzJlZGU1ZThkMGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "947e5010125f25a5f1ab8bf6f0494ea73fde14a6", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/947e5010125f25a5f1ab8bf6f0494ea73fde14a6", "committedDate": "2020-03-12T23:36:15Z", "message": "Add support for index aliases for SYS COLUMNS command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dabcccf6804d2ebd8334c74ba2800d55bd054311", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/dabcccf6804d2ebd8334c74ba2800d55bd054311", "committedDate": "2020-03-12T23:38:34Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 31609_fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/3aa01f30490b36d998aa965c3c23acb32e8717da", "committedDate": "2020-03-12T23:52:49Z", "message": "Update to test after branch update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTUzODc5", "url": "https://github.com/elastic/elasticsearch/pull/53525#pullrequestreview-374153879", "createdAt": "2020-03-13T09:28:03Z", "commit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToyODowNFrOF18zwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTozOTo1OFrOF19Kgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExNTEzNg==", "bodyText": "The IndicesOption depends on whether includeFrozen is true or not.", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392115136", "createdAt": "2020-03-13T09:28:04Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -460,15 +463,31 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n         FieldCapabilitiesRequest fieldRequest = createFieldCapsRequest(indexWildcard, includeFrozen);\n         client.fieldCaps(fieldRequest,\n                 ActionListener.wrap(\n-                        response -> listener.onResponse(\n-                                separateMappings(typeRegistry, indexWildcard, javaRegex, response.getIndices(), response.get())),\n+                        response -> {\n+                            String[] indicesList = response.getIndices();\n+                            GetAliasesRequest aliasRequest = new GetAliasesRequest()\n+                                    .local(true)\n+                                    .aliases(\"*\")\n+                                    .indices(indicesList)\n+                                    .indicesOptions(IndicesOptions.lenientExpandOpen());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExNTg3Ng==", "bodyText": "Maybe use static imports on ActionListener to make the code a bit more readable.", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392115876", "createdAt": "2020-03-13T09:29:27Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -460,15 +463,31 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n         FieldCapabilitiesRequest fieldRequest = createFieldCapsRequest(indexWildcard, includeFrozen);\n         client.fieldCaps(fieldRequest,\n                 ActionListener.wrap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExNzE0Nw==", "bodyText": "Small nit - maybe it makes sense to extract this method into a separate one - it's not reusable but it might make the call easier to read:\nclient.fieldCaps(fieldRequest, wrap(response -> getIndexAliases(response, wrap(aliases -> ...))", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392117147", "createdAt": "2020-03-13T09:32:03Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -460,15 +463,31 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n         FieldCapabilitiesRequest fieldRequest = createFieldCapsRequest(indexWildcard, includeFrozen);\n         client.fieldCaps(fieldRequest,\n                 ActionListener.wrap(\n-                        response -> listener.onResponse(\n-                                separateMappings(typeRegistry, indexWildcard, javaRegex, response.getIndices(), response.get())),\n+                        response -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExNzQyOA==", "bodyText": "Why use ImmutableOpenMap instead of Map ?", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392117428", "createdAt": "2020-03-13T09:32:45Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -481,16 +500,26 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n      * each field.\n      */\n     private static List<EsIndex> buildIndices(DataTypeRegistry typeRegistry, String[] indexNames, String javaRegex,\n-            Map<String, Map<String, FieldCapabilities>> fieldCaps,\n+            Map<String, Map<String, FieldCapabilities>> fieldCaps, ImmutableOpenMap<String, List<AliasMetaData>> aliases,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExNzYzNQ==", "bodyText": "What was wrong with Map ?", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392117635", "createdAt": "2020-03-13T09:33:08Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -460,15 +463,31 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n         FieldCapabilitiesRequest fieldRequest = createFieldCapsRequest(indexWildcard, includeFrozen);\n         client.fieldCaps(fieldRequest,\n                 ActionListener.wrap(\n-                        response -> listener.onResponse(\n-                                separateMappings(typeRegistry, indexWildcard, javaRegex, response.getIndices(), response.get())),\n+                        response -> {\n+                            String[] indicesList = response.getIndices();\n+                            GetAliasesRequest aliasRequest = new GetAliasesRequest()\n+                                    .local(true)\n+                                    .aliases(\"*\")\n+                                    .indices(indicesList)\n+                                    .indicesOptions(IndicesOptions.lenientExpandOpen());\n+                            client.admin().indices().getAliases(aliasRequest, wrap(aliases ->\n+                                listener.onResponse(separateMappings(typeRegistry, javaRegex, indicesList, response.get(),\n+                                        aliases.getAliases())),\n+                                ex -> {\n+                                    if (ex instanceof IndexNotFoundException || ex instanceof ElasticsearchSecurityException) {\n+                                        listener.onResponse(separateMappings(typeRegistry, javaRegex, indicesList, response.get(), null));\n+                                    } else {\n+                                        listener.onFailure(ex);\n+                                    }\n+                                }));\n+                        },\n                         listener::onFailure));\n \n     }\n     \n-    public static List<EsIndex> separateMappings(DataTypeRegistry typeRegistry, String indexPattern, String javaRegex, String[] indexNames,\n-            Map<String, Map<String, FieldCapabilities>> fieldCaps) {\n-        return buildIndices(typeRegistry, indexNames, javaRegex, fieldCaps, Function.identity(), (s, cap) -> null);\n+    public static List<EsIndex> separateMappings(DataTypeRegistry typeRegistry, String javaRegex, String[] indexNames,\n+            Map<String, Map<String, FieldCapabilities>> fieldCaps, ImmutableOpenMap<String, List<AliasMetaData>> aliases) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExODY4Mw==", "bodyText": "The size is incorrect - use CollectionUtils.mapSize", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392118683", "createdAt": "2020-03-13T09:35:15Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -481,16 +500,26 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n      * each field.\n      */\n     private static List<EsIndex> buildIndices(DataTypeRegistry typeRegistry, String[] indexNames, String javaRegex,\n-            Map<String, Map<String, FieldCapabilities>> fieldCaps,\n+            Map<String, Map<String, FieldCapabilities>> fieldCaps, ImmutableOpenMap<String, List<AliasMetaData>> aliases,\n             Function<String, String> indexNameProcessor,\n             BiFunction<String, Map<String, FieldCapabilities>, InvalidMappedField> validityVerifier) {\n \n-        if (indexNames == null || indexNames.length == 0) {\n+        if ((indexNames == null || indexNames.length == 0) && (aliases == null || aliases.size() == 0)) {\n             return emptyList();\n         }\n \n-        final List<String> resolvedIndices = asList(indexNames);\n-        Map<String, Fields> indices = new LinkedHashMap<>(resolvedIndices.size());\n+        Set<String> resolvedAliases = new LinkedHashSet<>();\n+        if (aliases != null) {\n+            Iterator<ObjectObjectCursor<String, List<AliasMetaData>>> iterator = aliases.iterator();\n+            while (iterator.hasNext()) {\n+                for(AliasMetaData alias : iterator.next().value) {\n+                    resolvedAliases.add(alias.getAlias());\n+                }\n+            }\n+        }\n+\n+        List<String> resolvedIndices = new ArrayList<>(asList(indexNames));\n+        Map<String, Fields> indices = new LinkedHashMap<>(resolvedIndices.size() + resolvedAliases.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExOTEyMg==", "bodyText": "Is it okay to put all aliases in the same map?", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392119122", "createdAt": "2020-03-13T09:36:08Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -481,16 +500,26 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n      * each field.\n      */\n     private static List<EsIndex> buildIndices(DataTypeRegistry typeRegistry, String[] indexNames, String javaRegex,\n-            Map<String, Map<String, FieldCapabilities>> fieldCaps,\n+            Map<String, Map<String, FieldCapabilities>> fieldCaps, ImmutableOpenMap<String, List<AliasMetaData>> aliases,\n             Function<String, String> indexNameProcessor,\n             BiFunction<String, Map<String, FieldCapabilities>, InvalidMappedField> validityVerifier) {\n \n-        if (indexNames == null || indexNames.length == 0) {\n+        if ((indexNames == null || indexNames.length == 0) && (aliases == null || aliases.size() == 0)) {\n             return emptyList();\n         }\n \n-        final List<String> resolvedIndices = asList(indexNames);\n-        Map<String, Fields> indices = new LinkedHashMap<>(resolvedIndices.size());\n+        Set<String> resolvedAliases = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyMDk2Mg==", "bodyText": "this creates a HashSet regardless of the key presence - better to do the check", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r392120962", "createdAt": "2020-03-13T09:39:58Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -590,4 +646,134 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n         foundIndices.sort(Comparator.comparing(EsIndex::name));\n         return foundIndices;\n     }\n+\n+\n+    /*\n+     * Checks if the field is valid (same type and same capabilities - searchable/aggregatable) across indices belonging to a list\n+     * of aliases.\n+     * A field can look like the example below (generated by field_caps API).\n+     *   \"name\": {\n+     *       \"text\": {\n+     *           \"type\": \"text\",\n+     *           \"searchable\": false,\n+     *           \"aggregatable\": false,\n+     *           \"indices\": [\n+     *               \"bar\",\n+     *               \"foo\"\n+     *           ],\n+     *           \"non_searchable_indices\": [\n+     *               \"foo\"\n+     *           ]\n+     *       },\n+     *       \"keyword\": {\n+     *           \"type\": \"keyword\",\n+     *           \"searchable\": false,\n+     *           \"aggregatable\": true,\n+     *           \"non_aggregatable_indices\": [\n+     *               \"bar\", \"baz\"\n+     *           ]\n+     *       }\n+     *   }\n+     */\n+    private static Map<String, InvalidMappedField> getInvalidFieldsForAliases(String fieldName, Map<String, FieldCapabilities> types,\n+            ImmutableOpenMap<String, List<AliasMetaData>> aliases) {\n+        if (aliases == null || aliases.isEmpty()) {\n+            return emptyMap();\n+        }\n+        Map<String, InvalidMappedField> invalidFields = new HashMap<>();\n+        Map<String, Set<String>> typesErrors = new HashMap<>();\n+        Map<String, Set<String>> aliasToIndices = new HashMap<>(); // map with aliases and their list of indices\n+        \n+        Iterator<ObjectObjectCursor<String, List<AliasMetaData>>> iter = aliases.iterator();\n+        while (iter.hasNext()) {\n+            ObjectObjectCursor<String, List<AliasMetaData>> index = iter.next();\n+            for (AliasMetaData aliasMetaData : index.value) {\n+                String aliasName = aliasMetaData.alias();\n+                typesErrors.putIfAbsent(aliasName, new HashSet<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa01f30490b36d998aa965c3c23acb32e8717da"}, "originalPosition": 251}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26bf119aaa30d170b7932116172326e7661b415c", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/26bf119aaa30d170b7932116172326e7661b415c", "committedDate": "2020-03-16T13:41:48Z", "message": "Address reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d8162de832826f1d920ee31a58c177ed51eb49", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/93d8162de832826f1d920ee31a58c177ed51eb49", "committedDate": "2020-03-16T13:46:15Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 31609_fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80f0b63a90d2db8032100b50659db27a9d787f05", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/80f0b63a90d2db8032100b50659db27a9d787f05", "committedDate": "2020-03-16T14:02:37Z", "message": "Fix one integration test after update branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d34271a85cae13da46deff6a1d20075f26ef156e", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/d34271a85cae13da46deff6a1d20075f26ef156e", "committedDate": "2020-03-16T16:40:42Z", "message": "Address further review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/bf8df94ecfcbd9a66f9e9077c7a2886dfc671331", "committedDate": "2020-03-16T16:43:13Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 31609_fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTE5NzAx", "url": "https://github.com/elastic/elasticsearch/pull/53525#pullrequestreview-375519701", "createdAt": "2020-03-16T19:23:54Z", "commit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMzo1NVrOF3CuSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMzo1NVrOF3CuSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MDYxOQ==", "bodyText": "nit: s/accross/across.", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r393260619", "createdAt": "2020-03-16T19:23:55Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -605,4 +662,141 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n         foundIndices.sort(Comparator.comparing(EsIndex::name));\n         return foundIndices;\n     }\n+\n+\n+    /*\n+     * Checks if the field is valid (same type and same capabilities - searchable/aggregatable) across indices belonging to a list\n+     * of aliases.\n+     * A field can look like the example below (generated by field_caps API).\n+     *   \"name\": {\n+     *       \"text\": {\n+     *           \"type\": \"text\",\n+     *           \"searchable\": false,\n+     *           \"aggregatable\": false,\n+     *           \"indices\": [\n+     *               \"bar\",\n+     *               \"foo\"\n+     *           ],\n+     *           \"non_searchable_indices\": [\n+     *               \"foo\"\n+     *           ]\n+     *       },\n+     *       \"keyword\": {\n+     *           \"type\": \"keyword\",\n+     *           \"searchable\": false,\n+     *           \"aggregatable\": true,\n+     *           \"non_aggregatable_indices\": [\n+     *               \"bar\", \"baz\"\n+     *           ]\n+     *       }\n+     *   }\n+     */\n+    private static Map<String, InvalidMappedField> getInvalidFieldsForAliases(String fieldName, Map<String, FieldCapabilities> types,\n+            ImmutableOpenMap<String, List<AliasMetaData>> aliases) {\n+        if (aliases == null || aliases.isEmpty()) {\n+            return emptyMap();\n+        }\n+        Map<String, InvalidMappedField> invalidFields = new HashMap<>();\n+        Map<String, Set<String>> typesErrors = new HashMap<>(); // map holding aliases and a list of unique field types accross its indices", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTE5Nzgx", "url": "https://github.com/elastic/elasticsearch/pull/53525#pullrequestreview-375519781", "createdAt": "2020-03-16T19:24:04Z", "commit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjA2MDMy", "url": "https://github.com/elastic/elasticsearch/pull/53525#pullrequestreview-375606032", "createdAt": "2020-03-16T21:49:42Z", "commit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo0OTo0MlrOF3G6EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo0OTo0MlrOF3G6EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTE2OA==", "bodyText": "Use org.elasticsearch.common.util.CollectionUtils.isEmpty instead.", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r393329168", "createdAt": "2020-03-16T21:49:42Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -496,16 +515,27 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n      * each field.\n      */\n     private static List<EsIndex> buildIndices(DataTypeRegistry typeRegistry, String[] indexNames, String javaRegex,\n-            Map<String, Map<String, FieldCapabilities>> fieldCaps,\n+            Map<String, Map<String, FieldCapabilities>> fieldCaps, ImmutableOpenMap<String, List<AliasMetaData>> aliases,\n             Function<String, String> indexNameProcessor,\n             BiFunction<String, Map<String, FieldCapabilities>, InvalidMappedField> validityVerifier) {\n \n-        if (indexNames == null || indexNames.length == 0) {\n+        if ((indexNames == null || indexNames.length == 0) && (aliases == null || aliases.size() == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed8fa2667d18e3be724fa8c3857ea0aeb87f864", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/9ed8fa2667d18e3be724fa8c3857ea0aeb87f864", "committedDate": "2020-03-17T05:45:38Z", "message": "Address more reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6c420a37c8156d5fd6d2280c1b84ecda0f5492", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/cd6c420a37c8156d5fd6d2280c1b84ecda0f5492", "committedDate": "2020-03-17T05:45:53Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 31609_fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjYxOTQz", "url": "https://github.com/elastic/elasticsearch/pull/53525#pullrequestreview-375661943", "createdAt": "2020-03-17T00:13:22Z", "commit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxMzoyMlrOF3J66A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyNTo0NlrOF3KGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3ODUzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for(AliasMetaData alias : iterator.next().value) {\n          \n          \n            \n                            for (AliasMetaData alias : iterator.next().value) {", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r393378536", "createdAt": "2020-03-17T00:13:22Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -496,16 +515,27 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n      * each field.\n      */\n     private static List<EsIndex> buildIndices(DataTypeRegistry typeRegistry, String[] indexNames, String javaRegex,\n-            Map<String, Map<String, FieldCapabilities>> fieldCaps,\n+            Map<String, Map<String, FieldCapabilities>> fieldCaps, ImmutableOpenMap<String, List<AliasMetaData>> aliases,\n             Function<String, String> indexNameProcessor,\n             BiFunction<String, Map<String, FieldCapabilities>, InvalidMappedField> validityVerifier) {\n \n-        if (indexNames == null || indexNames.length == 0) {\n+        if ((indexNames == null || indexNames.length == 0) && (aliases == null || aliases.size() == 0)) {\n             return emptyList();\n         }\n \n-        final List<String> resolvedIndices = asList(indexNames);\n-        Map<String, Fields> indices = new LinkedHashMap<>(resolvedIndices.size());\n+        Set<String> resolvedAliases = new HashSet<>();\n+        if (aliases != null) {\n+            Iterator<ObjectObjectCursor<String, List<AliasMetaData>>> iterator = aliases.iterator();\n+            while (iterator.hasNext()) {\n+                for(AliasMetaData alias : iterator.next().value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTM5NA==", "bodyText": "Can it be simply <>?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            aliasToIndices.putIfAbsent(aliasName, new HashSet<String>());\n          \n          \n            \n                            aliasToIndices.putIfAbsent(aliasName, new HashSet<>());", "url": "https://github.com/elastic/elasticsearch/pull/53525#discussion_r393381394", "createdAt": "2020-03-17T00:25:46Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java", "diffHunk": "@@ -605,4 +662,141 @@ public void resolveAsSeparateMappings(String indexWildcard, String javaRegex, bo\n         foundIndices.sort(Comparator.comparing(EsIndex::name));\n         return foundIndices;\n     }\n+\n+\n+    /*\n+     * Checks if the field is valid (same type and same capabilities - searchable/aggregatable) across indices belonging to a list\n+     * of aliases.\n+     * A field can look like the example below (generated by field_caps API).\n+     *   \"name\": {\n+     *       \"text\": {\n+     *           \"type\": \"text\",\n+     *           \"searchable\": false,\n+     *           \"aggregatable\": false,\n+     *           \"indices\": [\n+     *               \"bar\",\n+     *               \"foo\"\n+     *           ],\n+     *           \"non_searchable_indices\": [\n+     *               \"foo\"\n+     *           ]\n+     *       },\n+     *       \"keyword\": {\n+     *           \"type\": \"keyword\",\n+     *           \"searchable\": false,\n+     *           \"aggregatable\": true,\n+     *           \"non_aggregatable_indices\": [\n+     *               \"bar\", \"baz\"\n+     *           ]\n+     *       }\n+     *   }\n+     */\n+    private static Map<String, InvalidMappedField> getInvalidFieldsForAliases(String fieldName, Map<String, FieldCapabilities> types,\n+            ImmutableOpenMap<String, List<AliasMetaData>> aliases) {\n+        if (aliases == null || aliases.isEmpty()) {\n+            return emptyMap();\n+        }\n+        Map<String, InvalidMappedField> invalidFields = new HashMap<>();\n+        Map<String, Set<String>> typesErrors = new HashMap<>(); // map holding aliases and a list of unique field types accross its indices\n+        Map<String, Set<String>> aliasToIndices = new HashMap<>(); // map with aliases and their list of indices\n+        \n+        Iterator<ObjectObjectCursor<String, List<AliasMetaData>>> iter = aliases.iterator();\n+        while (iter.hasNext()) {\n+            ObjectObjectCursor<String, List<AliasMetaData>> index = iter.next();\n+            for (AliasMetaData aliasMetaData : index.value) {\n+                String aliasName = aliasMetaData.alias();\n+                aliasToIndices.putIfAbsent(aliasName, new HashSet<String>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8df94ecfcbd9a66f9e9077c7a2886dfc671331"}, "originalPosition": 260}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079be6ba8fa806f4851be9af529bc72ede5e8d0e", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/079be6ba8fa806f4851be9af529bc72ede5e8d0e", "committedDate": "2020-03-17T08:43:37Z", "message": "Small updates"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1383, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}