{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjcyOTQ1", "number": 51180, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNDowMlrODZKLnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNDowMlrODZKLnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzA3ODA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/extractor/TimeFieldTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNDowMlrOFfZYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNDowMlrOFfZYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ2NjAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Instant time = Instant.ofEpochSecond(millis / 1000, (millis % 1000) * 1000000 + extraNanos);\n          \n          \n            \n                    Instant time = Instant.ofEpochMilli(millis).plusNanos(extraNanos);", "url": "https://github.com/elastic/elasticsearch/pull/51180#discussion_r368466012", "createdAt": "2020-01-20T10:14:02Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/extractor/TimeFieldTests.java", "diffHunk": "@@ -5,20 +5,48 @@\n  */\n package org.elasticsearch.xpack.ml.extractor;\n \n+import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.test.ESTestCase;\n import org.elasticsearch.xpack.ml.test.SearchHitBuilder;\n \n+import java.time.Instant;\n+\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.startsWith;\n \n public class TimeFieldTests extends ESTestCase {\n \n-    public void testDocValueWithStringValue() {\n-        long millis = randomLong();\n-        SearchHit hit = new SearchHitBuilder(randomInt()).addField(\"time\", Long.toString(millis)).build();\n+    public void testDocValueWithWholeMillisecondStringValue() {\n+        long millis = randomNonNegativeLong();\n+        Instant time = Instant.ofEpochMilli(millis);\n+        DateFormatter formatter = DateFormatter.forPattern(\"epoch_millis\");\n+        String timeAsString = formatter.format(time);\n+        SearchHit hit = new SearchHitBuilder(randomInt()).addField(\"time\", timeAsString).build();\n+\n+        ExtractedField timeField = new TimeField(\"time\", ExtractedField.Method.DOC_VALUE);\n+\n+        assertThat(timeField.value(hit), equalTo(new Object[] { millis }));\n+        assertThat(timeField.getName(), equalTo(\"time\"));\n+        assertThat(timeField.getSearchField(), equalTo(\"time\"));\n+        assertThat(timeField.getTypes(), contains(\"date\"));\n+        assertThat(timeField.getMethod(), equalTo(ExtractedField.Method.DOC_VALUE));\n+        assertThat(timeField.getDocValueFormat(), equalTo(\"epoch_millis\"));\n+        assertThat(timeField.supportsFromSource(), is(false));\n+        expectThrows(UnsupportedOperationException.class, timeField::newFromSource);\n+        assertThat(timeField.isMultiField(), is(false));\n+        expectThrows(UnsupportedOperationException.class, timeField::getParentField);\n+    }\n+\n+    public void testDocValueWithFractionalMillisecondStringValue() {\n+        long millis = randomNonNegativeLong();\n+        int extraNanos = randomIntBetween(0, 999999);\n+        Instant time = Instant.ofEpochSecond(millis / 1000, (millis % 1000) * 1000000 + extraNanos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f4dc84dd36a72b00ada87a9bb12a2aa5490538"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4538, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}