{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTA4ODIx", "number": 57739, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToxMDoyN1rOEDZfdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODoyNzozOFrOFYh_FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTk4ODM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToxMDoyN1rOGgZIwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzoyMTozMVrOGkOZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTQ1OA==", "bodyText": "can't remember what we agreed. Do we throttle compatible API logs?", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r436619458", "createdAt": "2020-06-08T11:10:27Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -79,12 +81,20 @@ public DeprecationLoggerBuilder deprecate(final String key, final String msg, fi\n \n     public class DeprecationLoggerBuilder {\n \n-        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object[] params) {\n+        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object... params) {\n             String opaqueId = HeaderWarning.getXOpaqueId();\n             ESLogMessage deprecationMessage = DeprecatedMessage.of(opaqueId, msg, params);\n             deprecationLogger.throttleLogAndAddWarning(key, deprecationMessage);\n             return this;\n         }\n \n+        public DeprecationLoggerBuilder compatibleApiWarning(String key, String msg, Object... params) {\n+            String opaqueId = HeaderWarning.getXOpaqueId();\n+            ESLogMessage deprecationMessage = DeprecatedMessage.compatibleDeprecationMessage(opaqueId, msg, params);\n+            compatibleLogger.throttleLogAndAddWarning(key, deprecationMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f428f7d90a7d2218da47560d6d0b35f028ed27f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyMTM0MA==", "bodyText": "yes throttled, however, I think the they key needs to be more contextual. i.e. rather then just a \"get_with_types\" key, it needs to be the actual resolved message emitted, which should include the per request elements such as the path parameters. Which means that it will have ALOT more cache misses and may want to separate the backing cache store from the deprecation logger.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r436721340", "createdAt": "2020-06-08T13:52:55Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -79,12 +81,20 @@ public DeprecationLoggerBuilder deprecate(final String key, final String msg, fi\n \n     public class DeprecationLoggerBuilder {\n \n-        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object[] params) {\n+        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object... params) {\n             String opaqueId = HeaderWarning.getXOpaqueId();\n             ESLogMessage deprecationMessage = DeprecatedMessage.of(opaqueId, msg, params);\n             deprecationLogger.throttleLogAndAddWarning(key, deprecationMessage);\n             return this;\n         }\n \n+        public DeprecationLoggerBuilder compatibleApiWarning(String key, String msg, Object... params) {\n+            String opaqueId = HeaderWarning.getXOpaqueId();\n+            ESLogMessage deprecationMessage = DeprecatedMessage.compatibleDeprecationMessage(opaqueId, msg, params);\n+            compatibleLogger.throttleLogAndAddWarning(key, deprecationMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTQ1OA=="}, "originalCommit": {"oid": "5f428f7d90a7d2218da47560d6d0b35f028ed27f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwOTM4OA==", "bodyText": "agree. We could either create a second cache (same LRU set) or just expand it to make it bigger. Not sure we could make the size of that cache configurable. This would allow users to estimate how many x-opaque-id unique users will they have (we would then multiply that number by number of compatible APIs we have).\nWhen it comes to the key itself, and if we want to use StackWalker we need to make sure this is properly abstracted so that it won't be accidentally back ported to 7.x where jdk 1.8 is still supported.\nI guess for the time being we could simply just resolve the formatted message as you suggest.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r440109388", "createdAt": "2020-06-15T11:28:20Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -79,12 +81,20 @@ public DeprecationLoggerBuilder deprecate(final String key, final String msg, fi\n \n     public class DeprecationLoggerBuilder {\n \n-        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object[] params) {\n+        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object... params) {\n             String opaqueId = HeaderWarning.getXOpaqueId();\n             ESLogMessage deprecationMessage = DeprecatedMessage.of(opaqueId, msg, params);\n             deprecationLogger.throttleLogAndAddWarning(key, deprecationMessage);\n             return this;\n         }\n \n+        public DeprecationLoggerBuilder compatibleApiWarning(String key, String msg, Object... params) {\n+            String opaqueId = HeaderWarning.getXOpaqueId();\n+            ESLogMessage deprecationMessage = DeprecatedMessage.compatibleDeprecationMessage(opaqueId, msg, params);\n+            compatibleLogger.throttleLogAndAddWarning(key, deprecationMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTQ1OA=="}, "originalCommit": {"oid": "5f428f7d90a7d2218da47560d6d0b35f028ed27f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI2NzIyMA==", "bodyText": "for the record. We discussed this as I was concerned that expanding path parameters into logs would make throttling not be as effective. Every log line with a key containing a different type would not throttle.\nHowever there is a plus side to this - a user might easier identify places in his codebase where he uses that type. For instance if his app has that type \"hardcoded\" somewhere.\nWe are considering if we could have a debug level log line with exact path like myIndex/myType/ and a warn level with a path being in a form of {index}/{type}\nFor the time being we will stay with the more verbose expanded version and will revisit if this becomes a problem", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r440267220", "createdAt": "2020-06-15T15:38:53Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -79,12 +81,20 @@ public DeprecationLoggerBuilder deprecate(final String key, final String msg, fi\n \n     public class DeprecationLoggerBuilder {\n \n-        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object[] params) {\n+        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object... params) {\n             String opaqueId = HeaderWarning.getXOpaqueId();\n             ESLogMessage deprecationMessage = DeprecatedMessage.of(opaqueId, msg, params);\n             deprecationLogger.throttleLogAndAddWarning(key, deprecationMessage);\n             return this;\n         }\n \n+        public DeprecationLoggerBuilder compatibleApiWarning(String key, String msg, Object... params) {\n+            String opaqueId = HeaderWarning.getXOpaqueId();\n+            ESLogMessage deprecationMessage = DeprecatedMessage.compatibleDeprecationMessage(opaqueId, msg, params);\n+            compatibleLogger.throttleLogAndAddWarning(key, deprecationMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTQ1OA=="}, "originalCommit": {"oid": "5f428f7d90a7d2218da47560d6d0b35f028ed27f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzNzcyOQ==", "bodyText": "I am still not sure on logs where an id will be used. For this kind of endpoints there would be far too many logs. i.e. /{index}/{type}/{id}", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r440637729", "createdAt": "2020-06-16T07:21:31Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -79,12 +81,20 @@ public DeprecationLoggerBuilder deprecate(final String key, final String msg, fi\n \n     public class DeprecationLoggerBuilder {\n \n-        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object[] params) {\n+        public DeprecationLoggerBuilder withDeprecation(String key, String msg, Object... params) {\n             String opaqueId = HeaderWarning.getXOpaqueId();\n             ESLogMessage deprecationMessage = DeprecatedMessage.of(opaqueId, msg, params);\n             deprecationLogger.throttleLogAndAddWarning(key, deprecationMessage);\n             return this;\n         }\n \n+        public DeprecationLoggerBuilder compatibleApiWarning(String key, String msg, Object... params) {\n+            String opaqueId = HeaderWarning.getXOpaqueId();\n+            ESLogMessage deprecationMessage = DeprecatedMessage.compatibleDeprecationMessage(opaqueId, msg, params);\n+            compatibleLogger.throttleLogAndAddWarning(key, deprecationMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTQ1OA=="}, "originalCommit": {"oid": "5f428f7d90a7d2218da47560d6d0b35f028ed27f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDA2ODM1OnYy", "diffSide": "RIGHT", "path": "qa/logging-config/src/test/java/org/elasticsearch/common/logging/JsonLoggerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTozOToyOFrOGgZ6aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTozOToyOFrOGgZ6aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzMjE2OQ==", "bodyText": "I wonder if we should allow anything like this where a deprecation logger is fetched by name\n        final Logger testLogger = LogManager.getLogger(\"deprecation.test\");\nand used without DeprecationLogger and DeprecationMessage class", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r436632169", "createdAt": "2020-06-08T11:39:28Z", "author": {"login": "pgomulka"}, "path": "qa/logging-config/src/test/java/org/elasticsearch/common/logging/JsonLoggerTests.java", "diffHunk": "@@ -172,7 +172,7 @@ public void testDeprecatedMessageWithoutXOpaqueId() throws IOException {\n         testLogger.info( DeprecatedMessage.of(\"someId\",\"deprecated message1\"));\n         testLogger.info( DeprecatedMessage.of(\"\",\"deprecated message2\"));\n         testLogger.info( DeprecatedMessage.of(null,\"deprecated message3\"));\n-        testLogger.info(\"deprecated message4\");\n+//        testLogger.info(\"deprecated message4\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f428f7d90a7d2218da47560d6d0b35f028ed27f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDYwNzIxOnYy", "diffSide": "RIGHT", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0ODo0NFrOGgfFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0ODo0NFrOGgfFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxNjk2OA==", "bodyText": "Can this (and all other compatible warnings) be a past tense message that explains that what compatibly did ?\nFor this one...something like:\nHTTP compatibility was applied to this request. The GET request for /<index-name>/<type-name>/<id> was mapped to /<index-name>/_doc/<id>. \n\nWhere the actual index-name, type, and id are emitted to the log.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r436716968", "createdAt": "2020-06-08T13:48:44Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java", "diffHunk": "@@ -33,10 +33,11 @@\n import static org.elasticsearch.rest.RestRequest.Method.HEAD;\n \n public class RestGetActionV7 extends RestGetAction {\n-\n-    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestGetAction.class));\n     static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] Specifying types in \"\n         + \"document get requests is deprecated, use the /{index}/_doc/{id} endpoint instead.\";\n+    static final String TYPED_API_COMPATIBLE_WARNING = \"Using typed version of Get API. Use /{index}/_doc/{id} instead.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f267c43a64a30a8cf59044905ed8f9fcf8c1360b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDI3NTIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzowNjowNlrOIf-CoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMjowMDo0MlrOIgeLpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5MzI0OQ==", "bodyText": "we always create two loggers when using deprecationLogger. But often it won't be necessary. I wonder what is the performance penalty.\nWe could create a CompatibleLogger that would inherit DeprecationLogger and would allow to create two loggers and would have two logging methods compatibleApiWarning and deprecate.\n@pugnascotia WDYT?", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r570393249", "createdAt": "2021-02-04T17:06:06Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -54,16 +51,21 @@ public static DeprecationLogger getLogger(Class<?> aClass) {\n      * the \"org.elasticsearch\" namespace.\n      */\n     public static DeprecationLogger getLogger(String name) {\n-        return new DeprecationLogger(getDeprecatedLoggerForName(name));\n+        return new DeprecationLogger(name);\n+    }\n+\n+    private DeprecationLogger(String parentLoggerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f64a849db60a6512d5b6c3e74252d4a2ae44668"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDkxOTg0Ng==", "bodyText": "we could also just use a\n        this.compatibleLogger = new LazyInitializable<>(()-> LogManager.getLogger(getLoggerName(parentLoggerName, \"compatible\")));\n\n\nbut I recon we don't do any optimisations unless the performance is impacted", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r570919846", "createdAt": "2021-02-05T12:00:42Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -54,16 +51,21 @@ public static DeprecationLogger getLogger(Class<?> aClass) {\n      * the \"org.elasticsearch\" namespace.\n      */\n     public static DeprecationLogger getLogger(String name) {\n-        return new DeprecationLogger(getDeprecatedLoggerForName(name));\n+        return new DeprecationLogger(name);\n+    }\n+\n+    private DeprecationLogger(String parentLoggerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5MzI0OQ=="}, "originalCommit": {"oid": "7f64a849db60a6512d5b6c3e74252d4a2ae44668"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODQ2NTY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/logging/DeprecationIndexingComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNTowNzo1NlrOIglKOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNTowNzo1NlrOIglKOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAzNDE3MA==", "bodyText": "Do we still need these lines?", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r571034170", "createdAt": "2021-02-05T15:07:56Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/logging/DeprecationIndexingComponent.java", "diffHunk": "@@ -78,11 +78,13 @@ public DeprecationIndexingComponent(Client client, Settings settings) {\n     protected void doStart() {\n         this.appender.start();\n         Loggers.addAppender(LogManager.getLogger(\"org.elasticsearch.deprecation\"), this.appender);\n+        Loggers.addAppender(LogManager.getLogger(\"org.elasticsearch.compatible\"), this.appender);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "345963b22025304644675b2de32c516c00c4d781"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjU5MTg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODoxMDozOVrOIikW9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODowMzozOVrOIi8x-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzExODE5OA==", "bodyText": "Is required to accept a prefix ? (won't it always be deprecation ? (and shouldn't it always be deprecation ?)", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r573118198", "createdAt": "2021-02-09T18:10:39Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -54,16 +50,20 @@ public static DeprecationLogger getLogger(Class<?> aClass) {\n      * the \"org.elasticsearch\" namespace.\n      */\n     public static DeprecationLogger getLogger(String name) {\n-        return new DeprecationLogger(getDeprecatedLoggerForName(name));\n+        return new DeprecationLogger(name);\n+    }\n+\n+    private DeprecationLogger(String parentLoggerName) {\n+        this.logger = LogManager.getLogger(getLoggerName(parentLoggerName, \"deprecation\"));\n     }\n \n-    private static Logger getDeprecatedLoggerForName(String name) {\n+    private static String getLoggerName(String name, String prefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUxODMyOQ==", "bodyText": "agree, we can remove it", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r573518329", "createdAt": "2021-02-10T08:03:39Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -54,16 +50,20 @@ public static DeprecationLogger getLogger(Class<?> aClass) {\n      * the \"org.elasticsearch\" namespace.\n      */\n     public static DeprecationLogger getLogger(String name) {\n-        return new DeprecationLogger(getDeprecatedLoggerForName(name));\n+        return new DeprecationLogger(name);\n+    }\n+\n+    private DeprecationLogger(String parentLoggerName) {\n+        this.logger = LogManager.getLogger(getLoggerName(parentLoggerName, \"deprecation\"));\n     }\n \n-    private static Logger getDeprecatedLoggerForName(String name) {\n+    private static String getLoggerName(String name, String prefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzExODE5OA=="}, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjY1NzU0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODoyNDo1N1rOIik_FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMVQxOToyMDo0M1rOIkI1Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEyODQ2OQ==", "bodyText": "I wonder if we should leave this class as-is and require the user to pass the CompatibleApi category. Now that we are re-using this log and logger, it feels abit off for this to be special enough to warrant it's own method.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r573128469", "createdAt": "2021-02-09T18:24:57Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -75,23 +75,25 @@ private static String toLoggerName(final Class<?> cls) {\n      * Logs a message at the {@link #DEPRECATION} level. The message is also sent to the header warning logger,\n      * so that it can be returned to the client.\n      */\n-    public DeprecationLoggerBuilder deprecate(\n+    public DeprecationLogger deprecate(\n         final DeprecationCategory category,\n         final String key,\n         final String msg,\n         final Object... params\n     ) {\n-        return new DeprecationLoggerBuilder().withDeprecation(category, key, msg, params);\n+        ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n+        logger.log(DEPRECATION, deprecationMessage);\n+        return this;\n     }\n \n-    public class DeprecationLoggerBuilder {\n-\n-        public DeprecationLoggerBuilder withDeprecation(DeprecationCategory category, String key, String msg, Object[] params) {\n-            ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n-\n-            logger.log(DEPRECATION, deprecationMessage);\n-\n-            return this;\n-        }\n+    public DeprecationLogger compatibleApiWarning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUyMDIzMw==", "bodyText": "I think the idea with the builder was over complicated. It was meant to allow for constructing some more complex DSLs (like emitting a compatible warning only when a deprecation warning was already called etc)\nI think we don't need this, and also I am worried that we would unnecessarily create objects.\nRegarding the separate method. I think it would be beneficial to have it. We hide from a user (a developer) that he has to remember about the Category field.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r573520233", "createdAt": "2021-02-10T08:07:15Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -75,23 +75,25 @@ private static String toLoggerName(final Class<?> cls) {\n      * Logs a message at the {@link #DEPRECATION} level. The message is also sent to the header warning logger,\n      * so that it can be returned to the client.\n      */\n-    public DeprecationLoggerBuilder deprecate(\n+    public DeprecationLogger deprecate(\n         final DeprecationCategory category,\n         final String key,\n         final String msg,\n         final Object... params\n     ) {\n-        return new DeprecationLoggerBuilder().withDeprecation(category, key, msg, params);\n+        ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n+        logger.log(DEPRECATION, deprecationMessage);\n+        return this;\n     }\n \n-    public class DeprecationLoggerBuilder {\n-\n-        public DeprecationLoggerBuilder withDeprecation(DeprecationCategory category, String key, String msg, Object[] params) {\n-            ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n-\n-            logger.log(DEPRECATION, deprecationMessage);\n-\n-            return this;\n-        }\n+    public DeprecationLogger compatibleApiWarning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEyODQ2OQ=="}, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDAwNDA5NQ==", "bodyText": "+1 on the simplification, thanks for the explanation.\nre: separate method, I worry abit about the perception this is special in a way that it is not. It introduces a different way from everything. A dev adding a compatible warning will need to know they are adding a compatible warning, and this is mostly about which keys they need type to do that.  I would prefer to prevent differences without substance.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r574004095", "createdAt": "2021-02-10T19:13:55Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -75,23 +75,25 @@ private static String toLoggerName(final Class<?> cls) {\n      * Logs a message at the {@link #DEPRECATION} level. The message is also sent to the header warning logger,\n      * so that it can be returned to the client.\n      */\n-    public DeprecationLoggerBuilder deprecate(\n+    public DeprecationLogger deprecate(\n         final DeprecationCategory category,\n         final String key,\n         final String msg,\n         final Object... params\n     ) {\n-        return new DeprecationLoggerBuilder().withDeprecation(category, key, msg, params);\n+        ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n+        logger.log(DEPRECATION, deprecationMessage);\n+        return this;\n     }\n \n-    public class DeprecationLoggerBuilder {\n-\n-        public DeprecationLoggerBuilder withDeprecation(DeprecationCategory category, String key, String msg, Object[] params) {\n-            ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n-\n-            logger.log(DEPRECATION, deprecationMessage);\n-\n-            return this;\n-        }\n+    public DeprecationLogger compatibleApiWarning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEyODQ2OQ=="}, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDMwMjE3OA==", "bodyText": "I am not sure I understand. The intention of a separate method is to hide that additional category key from a developer. Using just a category field would mean that a developer would have to remember to use it, it would be an unnecessary duplication and inconvenience.  If a developer makes a mistake with the category, it will not be possible to find that usage of compatible API.\nI might disagree with just using a deprecation log method, but I don't think it is all that relevant. There is no usage of it now and this PR was just meant to introduce an infrastructure - which is reduced to the direct use of deprecation log.\nIn fact, if the method is to be removed, there is actually no point for this PR at all.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r574302178", "createdAt": "2021-02-11T07:55:16Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -75,23 +75,25 @@ private static String toLoggerName(final Class<?> cls) {\n      * Logs a message at the {@link #DEPRECATION} level. The message is also sent to the header warning logger,\n      * so that it can be returned to the client.\n      */\n-    public DeprecationLoggerBuilder deprecate(\n+    public DeprecationLogger deprecate(\n         final DeprecationCategory category,\n         final String key,\n         final String msg,\n         final Object... params\n     ) {\n-        return new DeprecationLoggerBuilder().withDeprecation(category, key, msg, params);\n+        ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n+        logger.log(DEPRECATION, deprecationMessage);\n+        return this;\n     }\n \n-    public class DeprecationLoggerBuilder {\n-\n-        public DeprecationLoggerBuilder withDeprecation(DeprecationCategory category, String key, String msg, Object[] params) {\n-            ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n-\n-            logger.log(DEPRECATION, deprecationMessage);\n-\n-            return this;\n-        }\n+    public DeprecationLogger compatibleApiWarning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEyODQ2OQ=="}, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDc2NDM1NA==", "bodyText": "OK ... my argument was that we shouldn't try to hide the additional category.  However, I am fine with the additional method.  Might want to consider adding an assert so that this method is the only way to set that category.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r574764354", "createdAt": "2021-02-11T19:20:43Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -75,23 +75,25 @@ private static String toLoggerName(final Class<?> cls) {\n      * Logs a message at the {@link #DEPRECATION} level. The message is also sent to the header warning logger,\n      * so that it can be returned to the client.\n      */\n-    public DeprecationLoggerBuilder deprecate(\n+    public DeprecationLogger deprecate(\n         final DeprecationCategory category,\n         final String key,\n         final String msg,\n         final Object... params\n     ) {\n-        return new DeprecationLoggerBuilder().withDeprecation(category, key, msg, params);\n+        ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n+        logger.log(DEPRECATION, deprecationMessage);\n+        return this;\n     }\n \n-    public class DeprecationLoggerBuilder {\n-\n-        public DeprecationLoggerBuilder withDeprecation(DeprecationCategory category, String key, String msg, Object[] params) {\n-            ESLogMessage deprecationMessage = DeprecatedMessage.of(category, key, HeaderWarning.getXOpaqueId(), msg, params);\n-\n-            logger.log(DEPRECATION, deprecationMessage);\n-\n-            return this;\n-        }\n+    public DeprecationLogger compatibleApiWarning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEyODQ2OQ=="}, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjY2OTY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/DeprecationHttpIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODoyNzozOFrOIilGag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMVQxOToyMTozOVrOIkI3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMDM0Ng==", "bodyText": "should we also test the HTTP response warning ?", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r573130346", "createdAt": "2021-02-09T18:27:38Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/DeprecationHttpIT.java", "diffHunk": "@@ -320,6 +321,131 @@ public void testDeprecationMessagesCanBeIndexed() throws Exception {\n         }\n     }\n \n+    /**\n+     * Check that compatible api log messages can be recorded to an index\n+     */\n+    public void testCompatibleMessagesCanBeIndexed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDc2NDk1Mg==", "bodyText": "nevermind on this comment ... since it is the same functionality as other deprecation logger, that is already tested.", "url": "https://github.com/elastic/elasticsearch/pull/57739#discussion_r574764952", "createdAt": "2021-02-11T19:21:39Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/deprecation/qa/rest/src/javaRestTest/java/org/elasticsearch/xpack/deprecation/DeprecationHttpIT.java", "diffHunk": "@@ -320,6 +321,131 @@ public void testDeprecationMessagesCanBeIndexed() throws Exception {\n         }\n     }\n \n+    /**\n+     * Check that compatible api log messages can be recorded to an index\n+     */\n+    public void testCompatibleMessagesCanBeIndexed() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMDM0Ng=="}, "originalCommit": {"oid": "af2f2ad32b0aef6838303326dac12d3a23922143"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3575, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}