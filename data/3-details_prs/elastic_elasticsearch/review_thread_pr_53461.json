{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTMxNzk3", "number": 53461, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyMzo1OVrODoAI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNjowMlrODoAKcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjcxOTM0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyMzo1OVrOF2VC4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyMzo1OVrOF2VC4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjIyNQ==", "bodyText": "Please move arguments to single line (you can extract ShardRoutingState to variable to make it more readable)", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512225", "createdAt": "2020-03-13T22:23:59Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4650439ba7025058b9d16ef1bcecb44ceff7f787"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjcxOTYyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDoxMlrOF2VDDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDoxMlrOF2VDDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjI3MQ==", "bodyText": "Same as above", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512271", "createdAt": "2020-03-13T22:24:12Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(\n+                index,\n+                i,\n+                localNode.getId(),\n+                randomBoolean(),\n+                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3))\n+            );\n+            Path path = createTempDir().resolve(\"indices\")\n+                .resolve(shardRouting.shardId().getIndex().getUUID())\n+                .resolve(String.valueOf(shardRouting.shardId().id()));\n+            ShardStats shardStats = new ShardStats(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4650439ba7025058b9d16ef1bcecb44ceff7f787"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjcyMDA2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDozMlrOF2VDWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDozMlrOF2VDWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjM0Nw==", "bodyText": "restController is not really used here, it can be removed", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512347", "createdAt": "2020-03-13T22:24:32Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(\n+                index,\n+                i,\n+                localNode.getId(),\n+                randomBoolean(),\n+                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3))\n+            );\n+            Path path = createTempDir().resolve(\"indices\")\n+                .resolve(shardRouting.shardId().getIndex().getUUID())\n+                .resolve(String.valueOf(shardRouting.shardId().id()));\n+            ShardStats shardStats = new ShardStats(\n+                shardRouting,\n+                new ShardPath(false, path, path, shardRouting.shardId()),\n+                null,\n+                null,\n+                null,\n+                null\n+            );\n+            shardStatsMap.put(shardRouting, shardStats);\n+            shardRoutings.add(shardRouting);\n+        }\n+\n+        IndexStats indexStats = mock(IndexStats.class);\n+        when(indexStats.getPrimaries()).thenReturn(new CommonStats());\n+        when(indexStats.getTotal()).thenReturn(new CommonStats());\n+\n+        IndicesStatsResponse stats = mock(IndicesStatsResponse.class);\n+        when(stats.asMap()).thenReturn(shardStatsMap);\n+\n+        DiscoveryNodes discoveryNodes = mock(DiscoveryNodes.class);\n+        when(discoveryNodes.get(localNode.getId())).thenReturn(localNode);\n+\n+        ClusterStateResponse state = mock(ClusterStateResponse.class);\n+        RoutingTable routingTable = mock(RoutingTable.class);\n+        when(routingTable.allShards()).thenReturn(shardRoutings);\n+        ClusterState clusterState = mock(ClusterState.class);\n+        when(clusterState.routingTable()).thenReturn(routingTable);\n+        when(clusterState.nodes()).thenReturn(discoveryNodes);\n+        when(state.getState()).thenReturn(clusterState);\n+\n+        final RestController restController = new RestController(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4650439ba7025058b9d16ef1bcecb44ceff7f787"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjcyMzA1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNjowMlrOF2VFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNjowMlrOF2VFAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjc2OA==", "bodyText": "Consider using iterator here, you don't have to increment counter by yourself\nIterator<ShardRouting> shardRoutingsIt = shardRoutings.iterator();\nfor (final List<Table.Cell> row : rows) {\n    ShardRouting shardRouting = shardRoutingsIt.next();", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512768", "createdAt": "2020-03-13T22:26:02Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(\n+                index,\n+                i,\n+                localNode.getId(),\n+                randomBoolean(),\n+                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3))\n+            );\n+            Path path = createTempDir().resolve(\"indices\")\n+                .resolve(shardRouting.shardId().getIndex().getUUID())\n+                .resolve(String.valueOf(shardRouting.shardId().id()));\n+            ShardStats shardStats = new ShardStats(\n+                shardRouting,\n+                new ShardPath(false, path, path, shardRouting.shardId()),\n+                null,\n+                null,\n+                null,\n+                null\n+            );\n+            shardStatsMap.put(shardRouting, shardStats);\n+            shardRoutings.add(shardRouting);\n+        }\n+\n+        IndexStats indexStats = mock(IndexStats.class);\n+        when(indexStats.getPrimaries()).thenReturn(new CommonStats());\n+        when(indexStats.getTotal()).thenReturn(new CommonStats());\n+\n+        IndicesStatsResponse stats = mock(IndicesStatsResponse.class);\n+        when(stats.asMap()).thenReturn(shardStatsMap);\n+\n+        DiscoveryNodes discoveryNodes = mock(DiscoveryNodes.class);\n+        when(discoveryNodes.get(localNode.getId())).thenReturn(localNode);\n+\n+        ClusterStateResponse state = mock(ClusterStateResponse.class);\n+        RoutingTable routingTable = mock(RoutingTable.class);\n+        when(routingTable.allShards()).thenReturn(shardRoutings);\n+        ClusterState clusterState = mock(ClusterState.class);\n+        when(clusterState.routingTable()).thenReturn(routingTable);\n+        when(clusterState.nodes()).thenReturn(discoveryNodes);\n+        when(state.getState()).thenReturn(clusterState);\n+\n+        final RestController restController = new RestController(\n+            Collections.emptySet(),\n+            null,\n+            null,\n+            null,\n+            new UsageService(),\n+            randomBoolean()\n+        );\n+        final RestShardsAction action = new RestShardsAction();\n+        restController.registerHandler(action);\n+\n+        final Table table = action.buildTable(new FakeRestRequest(), state, stats);\n+\n+        // now, verify the table is correct\n+        List<Table.Cell> headers = table.getHeaders();\n+        assertThat(headers.get(0).value, equalTo(\"index\"));\n+        assertThat(headers.get(1).value, equalTo(\"shard\"));\n+        assertThat(headers.get(2).value, equalTo(\"prirep\"));\n+        assertThat(headers.get(3).value, equalTo(\"state\"));\n+        assertThat(headers.get(4).value, equalTo(\"docs\"));\n+        assertThat(headers.get(5).value, equalTo(\"store\"));\n+        assertThat(headers.get(6).value, equalTo(\"ip\"));\n+        assertThat(headers.get(7).value, equalTo(\"id\"));\n+        assertThat(headers.get(8).value, equalTo(\"node\"));\n+\n+        final List<List<Table.Cell>> rows = table.getRows();\n+        assertThat(rows.size(), equalTo(numShards));\n+\n+        int i = 0;\n+        for (final List<Table.Cell> row : rows) {\n+            ShardRouting shardRouting = shardRoutings.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4650439ba7025058b9d16ef1bcecb44ceff7f787"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3321, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}