{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjA0NDEz", "number": 60976, "title": "Split ir nodes for variable/field access into load/store", "bodyText": "This change splits the ir nodes for variable/field accesses into two separate nodes, one for load and one for store. This removes the need for an assignment node as the store nodes replace it as the root. It also means all nodes simply have a write method instead of having separate methods for load and store to support the different types of bytecode required for this. This also means that compound assignment is no longer specialized on the assignment node which had to be overly coupled with the previous version of the variable/field accessor nodes.\nStore nodes now have two children. The first child is the prefix chain. The second child is the value to store.  The prefix chain is the set of nodes that represent a.b in the accessor chain of a.b.c. The value node can be any value that is legally castable to type of the store node.\nCompound assignments are now setup where the value node of a store node is a binary math node. The left side of the binary math node is a dup node with a prefix root node as a child. The right side of the binary math node is the value node.", "createdAt": "2020-08-11T16:05:58Z", "url": "https://github.com/elastic/elasticsearch/pull/60976", "merged": true, "mergeCommit": {"oid": "0d9f7e96947f3e39cce143ae607feca60d3b806a"}, "closed": true, "closedAt": "2020-08-13T14:26:03Z", "author": {"login": "jdconrad"}, "timelineItems": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5F4hvAH2gAyNDY2MjA0NDEzOmZlNGY3YmZiNDM4ZjM4ZTg4ZjU5NmIxOWNlMzhhZTRjZDQ5ZWM1YzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-UsTqgFqTQ2NjM2MTAyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fe4f7bfb438f38e88f596b19ce38ae4cd49ec5c6", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe4f7bfb438f38e88f596b19ce38ae4cd49ec5c6", "committedDate": "2020-07-27T18:11:02Z", "message": "Move bootstrap injection into the the ir tree builder phase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b70959c0a4be12ee85565aaf25ee1cae4ebea5", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/02b70959c0a4be12ee85565aaf25ee1cae4ebea5", "committedDate": "2020-07-27T18:42:59Z", "message": "move ScriptClassInfo out of walker and remove unncessary injection\nphases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be17b14018e28414e10b9e7e02e3f7c299fc2589", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/be17b14018e28414e10b9e7e02e3f7c299fc2589", "committedDate": "2020-07-27T20:46:00Z", "message": "add AccessNode in place of ECall, EBrace, and EDot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1725972243f755a6e7b51583ca490140517b70be", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/1725972243f755a6e7b51583ca490140517b70be", "committedDate": "2020-07-27T21:24:32Z", "message": "rename some nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d979077dc6248a0ec0dbdf7101fdcf4e11307e9f", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/d979077dc6248a0ec0dbdf7101fdcf4e11307e9f", "committedDate": "2020-07-27T21:38:42Z", "message": "add flip nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e3633cc8e54fae4ef3ad82f13d8689213baa579", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e3633cc8e54fae4ef3ad82f13d8689213baa579", "committedDate": "2020-07-28T17:32:29Z", "message": "add dup node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a53ce8fb049e000a8535d19f6133d444eddeff8", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/0a53ce8fb049e000a8535d19f6133d444eddeff8", "committedDate": "2020-07-28T17:55:53Z", "message": "add store node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc42b1c72c0750a96cd826004c782051deb7164b", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/dc42b1c72c0750a96cd826004c782051deb7164b", "committedDate": "2020-07-28T18:23:33Z", "message": "rename to load nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "294963891ce711b9b3e97a6df2cc7f6222991d1f", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/294963891ce711b9b3e97a6df2cc7f6222991d1f", "committedDate": "2020-07-28T18:26:05Z", "message": "add store nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fce1199c70357bf3ed29a4caf0232dda47a604e", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/8fce1199c70357bf3ed29a4caf0232dda47a604e", "committedDate": "2020-07-28T18:46:43Z", "message": "add store nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33976f6b95ec1d851c2e4b7c4da663bc48eb88b9", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/33976f6b95ec1d851c2e4b7c4da663bc48eb88b9", "committedDate": "2020-07-28T18:55:41Z", "message": "add slightly different node setup and decorations for compound\nassignment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ef7f3e1c82262c3dd8b550f8b499ea6c2504f5", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/45ef7f3e1c82262c3dd8b550f8b499ea6c2504f5", "committedDate": "2020-07-28T19:27:25Z", "message": "update load nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65f3a8f764e14ac684c3fdc8d2bd922d035b5a4b", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/65f3a8f764e14ac684c3fdc8d2bd922d035b5a4b", "committedDate": "2020-07-28T19:52:57Z", "message": "split ir nodes into load and store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922e1e670e907e42a550e9eeb52119bfce6e4bcf", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/922e1e670e907e42a550e9eeb52119bfce6e4bcf", "committedDate": "2020-07-28T20:01:11Z", "message": "some fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16d8996cbe3d54d1ab20e11a00623e3dd9a22827", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/16d8996cbe3d54d1ab20e11a00623e3dd9a22827", "committedDate": "2020-07-28T20:08:54Z", "message": "fix dup issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810e186871e7f075f4e1423c65dba826d9ef42ea", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/810e186871e7f075f4e1423c65dba826d9ef42ea", "committedDate": "2020-07-28T20:10:48Z", "message": "remove dead node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/a4d61ba2e61783c5e884a3af0c161dcff2e42cf4", "committedDate": "2020-07-29T17:45:57Z", "message": "Merge branch 'master' into semantic010"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd130aeb8b8eda556cc45047887ab537d590f61d", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd130aeb8b8eda556cc45047887ab537d590f61d", "committedDate": "2020-07-29T17:46:17Z", "message": "Merge branch 'semantic010' into semantic011"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2f27b89f8a20646232083535d05d3bd81817d3b", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/d2f27b89f8a20646232083535d05d3bd81817d3b", "committedDate": "2020-07-29T17:46:37Z", "message": "Merge branch 'semantic011' into semantic013"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f298cbb66a25cecfd0f9fc0fd837c20aeab0dc8c", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/f298cbb66a25cecfd0f9fc0fd837c20aeab0dc8c", "committedDate": "2020-07-29T17:46:59Z", "message": "Merge branch 'semantic013' into semantic015"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fbd0bcdf699ca71db447a21ea00ce18e8aacbd5", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/3fbd0bcdf699ca71db447a21ea00ce18e8aacbd5", "committedDate": "2020-08-05T16:59:29Z", "message": "Merge branch 'master' into semantic010"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3fd76361e7e1d00df0f0d4070949130845f6271", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/b3fd76361e7e1d00df0f0d4070949130845f6271", "committedDate": "2020-08-05T17:24:53Z", "message": "response to pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1e958536707210b141a4a495da5ee315e88b06", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/2e1e958536707210b141a4a495da5ee315e88b06", "committedDate": "2020-08-05T19:35:03Z", "message": "Merge branch 'master' into semantic010"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "397c7b1f728cf0f7a7fda6552090ab4d2ccf23b8", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/397c7b1f728cf0f7a7fda6552090ab4d2ccf23b8", "committedDate": "2020-08-05T19:36:47Z", "message": "Merge branch 'semantic010' into semantic011"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8bc699f649519c4d1d7b8b28d31e7add3406966", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/a8bc699f649519c4d1d7b8b28d31e7add3406966", "committedDate": "2020-08-05T20:42:28Z", "message": "fix spacing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab90f387c3bb5600f90f45d9e27ca0b1b041cb9", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/aab90f387c3bb5600f90f45d9e27ca0b1b041cb9", "committedDate": "2020-08-06T16:05:28Z", "message": "Merge branch 'master' into semantic011"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee21c7cba9d202259bac2e25edda5994341fe66", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/9ee21c7cba9d202259bac2e25edda5994341fe66", "committedDate": "2020-08-06T16:10:02Z", "message": "Merge branch 'semantic011' into semantic013"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9e3de4df0b053f324a0a8600399718f67f11d11", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/f9e3de4df0b053f324a0a8600399718f67f11d11", "committedDate": "2020-08-10T18:58:06Z", "message": "Merge branch 'master' into semantic013"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "416801084c6dd5c2fc8179a4ee5f67b5a0e2dddb", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/416801084c6dd5c2fc8179a4ee5f67b5a0e2dddb", "committedDate": "2020-08-10T18:59:56Z", "message": "remove extraneous semicolon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc0fc208120adee10f5cd2f6ee7e842232d24016", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/bc0fc208120adee10f5cd2f6ee7e842232d24016", "committedDate": "2020-08-10T20:58:55Z", "message": "Merge branch 'master' into semantic013"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923d361801a8b723f9e7473c37ed3335f0cc225d", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/923d361801a8b723f9e7473c37ed3335f0cc225d", "committedDate": "2020-08-10T21:17:08Z", "message": "Merge branch 'semantic013' into semantic015"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c9dec6c10d79356905cd36df064ed2077a23eef", "committedDate": "2020-08-11T16:23:18Z", "message": "Merge branch 'master' into semantic015"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYwMDY2", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466160066", "createdAt": "2020-08-12T18:16:01Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjowMVrOG_s_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjowMVrOG_s_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDczNA==", "bodyText": "// This is a load.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469450734", "createdAt": "2020-08-12T18:16:01Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 226}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYwMTY1", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466160165", "createdAt": "2020-08-12T18:16:10Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjoxMFrOG_tARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjoxMFrOG_tARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDgyMA==", "bodyText": "// This is a store", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469450820", "createdAt": "2020-08-12T18:16:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 260}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYwNDU0", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466160454", "createdAt": "2020-08-12T18:16:34Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjozNFrOG_tBIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNjozNFrOG_tBIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTA0MQ==", "bodyText": "// Array access", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451041", "createdAt": "2020-08-12T18:16:34Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 231}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYxMjcw", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466161270", "createdAt": "2020-08-12T18:17:41Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNzo0MVrOG_tDoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNzo0MVrOG_tDoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTY4MA==", "bodyText": "// Variable node", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451680", "createdAt": "2020-08-12T18:17:41Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYxMzYx", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466161361", "createdAt": "2020-08-12T18:17:50Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNzo1MFrOG_tD8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNzo1MFrOG_tD8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTc2MA==", "bodyText": "// Field and brace node", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451760", "createdAt": "2020-08-12T18:17:50Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 251}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYxODc0", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466161874", "createdAt": "2020-08-12T18:18:32Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxODozMlrOG_tFbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxODozMlrOG_tFbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjE0Mw==", "bodyText": "// Standard field", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452143", "createdAt": "2020-08-12T18:18:32Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 263}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYyMzI0", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466162324", "createdAt": "2020-08-12T18:19:08Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTowOFrOG_tGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTowOFrOG_tGvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjQ3OQ==", "bodyText": "// Storing brace operation", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452479", "createdAt": "2020-08-12T18:19:08Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 265}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYyNjUy", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466162652", "createdAt": "2020-08-12T18:19:35Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTozNVrOG_tH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTozNVrOG_tH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjc3Mg==", "bodyText": "// Basic store", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452772", "createdAt": "2020-08-12T18:19:35Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 275}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYyOTIz", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466162923", "createdAt": "2020-08-12T18:19:57Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTo1N1rOG_tIoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOTo1N1rOG_tIoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjk2MQ==", "bodyText": "// Not a compound assignment", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452961", "createdAt": "2020-08-12T18:19:57Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 276}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYzNzcz", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466163773", "createdAt": "2020-08-12T18:21:06Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyMTowNlrOG_tLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyMTowNlrOG_tLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MzY1NA==", "bodyText": "// Compound assignment", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469453654", "createdAt": "2020-08-12T18:21:06Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);\n+                }\n+            } else {\n+                if (irAccessNode != null) {\n+                    DupNode dupNode = new DupNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 280}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTY1MzAw", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466165300", "createdAt": "2020-08-12T18:23:20Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyMzoyMFrOG_tQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyMzoyMFrOG_tQGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDg3NA==", "bodyText": "Add comments to help follow to the leaves.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469454874", "createdAt": "2020-08-12T18:23:20Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 336}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTcxMDQ0", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466171044", "createdAt": "2020-08-12T18:31:28Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMToyOFrOG_tiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMToyOFrOG_tiJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTQ5NQ==", "bodyText": "// For upcast, downcast (int i = 5; i += 2.0;)", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469459495", "createdAt": "2020-08-12T18:31:28Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 334}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTc0MzQ2", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466174346", "createdAt": "2020-08-12T18:36:17Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNjoxN1rOG_ts2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNjoxN1rOG_ts2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjIzNA==", "bodyText": "Bigger comment that says what we have to do to support it.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469462234", "createdAt": "2020-08-12T18:36:17Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {\n+            scriptScope.setCondition(userAssignmentNode.getLeftNode(), Compound.class);\n+            irStoreNode = (StoreNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n+            BinaryMathNode irBinaryMathNode = (BinaryMathNode)irStoreNode.getChildNode();\n+\n+            PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n+                    scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n+\n+            if (downcast == null) {\n+                irBinaryMathNode.setExpressionType(irStoreNode.getStoreType());\n+            } else {\n+                CastNode irCastNode = new CastNode();\n+                irCastNode.setLocation(irBinaryMathNode.getLocation());\n+                irCastNode.setExpressionType(downcast.targetType);\n+                irCastNode.setCast(downcast);\n+                irCastNode.setChildNode(irBinaryMathNode);\n+                irStoreNode.setChildNode(irCastNode);\n+            }\n+\n+            if (read) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 355}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTc2Mjc5", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466176279", "createdAt": "2020-08-12T18:39:00Z", "commit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozOTowMFrOG_tyrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozOTowMFrOG_tyrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzcyNw==", "bodyText": "Dot, symbol, brace must handle loads and/or stores.", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469463727", "createdAt": "2020-08-12T18:39:00Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1235,16 +1403,40 @@ public void visitSymbol(ESymbol userSymbolNode, ScriptScope scriptScope) {\n \n         if (scriptScope.hasDecoration(userSymbolNode, StaticType.class)) {\n             Class<?> staticType = scriptScope.getDecoration(userSymbolNode, StaticType.class).getStaticType();\n-            StaticNode irStaticNode = new StaticNode();\n-            irStaticNode.setLocation(userSymbolNode.getLocation());\n-            irStaticNode.setExpressionType(staticType);\n-            irExpressionNode = irStaticNode;\n+            StaticNode staticNode = new StaticNode();\n+            staticNode.setLocation(userSymbolNode.getLocation());\n+            staticNode.setExpressionType(staticType);\n+            irExpressionNode = staticNode;\n         } else if (scriptScope.hasDecoration(userSymbolNode, ValueType.class)) {\n-            VariableNode irVariableNode = new VariableNode();\n-            irVariableNode.setLocation(userSymbolNode.getLocation());\n-            irVariableNode.setExpressionType(scriptScope.getDecoration(userSymbolNode, ValueType.class).getValueType());\n-            irVariableNode.setName(userSymbolNode.getSymbol());\n-            irExpressionNode = irVariableNode;\n+            boolean read = scriptScope.getCondition(userSymbolNode, Read.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef"}, "originalPosition": 556}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efa61967cb53a7f6cdd1449673e9b127dd67dd5b", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/efa61967cb53a7f6cdd1449673e9b127dd67dd5b", "committedDate": "2020-08-12T21:49:31Z", "message": "Merge branch 'master' into semantic015"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "author": {"user": {"login": "jdconrad", "name": "Jack Conradson"}}, "url": "https://github.com/elastic/elasticsearch/commit/62ec784135b21e49357c0cf0f2d494af1d6082e2", "committedDate": "2020-08-12T22:27:55Z", "message": "comment load/store"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzYxMDI1", "url": "https://github.com/elastic/elasticsearch/pull/60976#pullrequestreview-466361025", "createdAt": "2020-08-13T00:15:53Z", "commit": {"oid": "62ec784135b21e49357c0cf0f2d494af1d6082e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3403, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}