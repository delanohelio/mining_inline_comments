{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTE2MDU1", "number": 65501, "title": "Allow to create SparseFileTracker with ranges already present", "bodyText": "This pull request allows to create SparseFileTracker instances with already completed/available ranges. Creating non empty sparse file tracker will be required for the searchable snapshots cache to be initialized with existing information on cache files.", "createdAt": "2020-11-25T15:13:32Z", "url": "https://github.com/elastic/elasticsearch/pull/65501", "merged": true, "mergeCommit": {"oid": "8d72b9973598f6d067bb9670e3f6c2ec3ec85fbd"}, "closed": true, "closedAt": "2020-11-26T08:06:01Z", "author": {"login": "tlrx"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf_1L6AH2gAyNTI3NTE2MDU1OmYxMTg3YWI2ODE5ZWNiNmRjOWZkYWExZTU3ZWI5MGU0OWRlZjdiNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgAZJqgH2gAyNTI3NTE2MDU1OjYwZTg1Y2QzNzZkMTk4Nzg0ZmQxMmU3NjVkNTg3N2E1MDQzZTg2OWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41", "committedDate": "2020-11-25T15:11:00Z", "message": "Allow to create SparseFileTracker with ranges already present"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjAyODYx", "url": "https://github.com/elastic/elasticsearch/pull/65501#pullrequestreview-538602861", "createdAt": "2020-11-25T15:18:00Z", "commit": {"oid": "f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxODowMFrOH54Hiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxOTozOFrOH54L7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1MDMxNQ==", "bodyText": "Since ranges is a SortedSet we're iterating through them in order, so can we just remember the previous range we added?", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530450315", "createdAt": "2020-11-25T15:18:00Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/SparseFileTracker.java", "diffHunk": "@@ -37,12 +37,56 @@\n \n     private final long length;\n \n+    /**\n+     * Creates a new empty {@link SparseFileTracker}\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     */\n     public SparseFileTracker(String description, long length) {\n+        this(description, length, Collections.emptySortedSet());\n+    }\n+\n+    /**\n+     * Creates a {@link SparseFileTracker} with some ranges already present\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     * @param ranges      the set of ranges to be considered present\n+     */\n+    public SparseFileTracker(String description, long length, SortedSet<Tuple<Long, Long>> ranges) {\n         this.description = description;\n         this.length = length;\n         if (length < 0) {\n             throw new IllegalArgumentException(\"Length [\" + length + \"] must be equal to or greater than 0 for [\" + description + \"]\");\n         }\n+        if (ranges.isEmpty() == false) {\n+            synchronized (mutex) {\n+                for (Tuple<Long, Long> next : ranges) {\n+                    final Range range = new Range(next.v1(), next.v2(), null);\n+                    if (range.end <= range.start) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" cannot be empty\");\n+                    }\n+                    if (length < range.end) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" is exceeding maximum length [\" + length + ']');\n+                    }\n+\n+                    final SortedSet<Range> previousRanges = this.ranges.headSet(range);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1MTQzNw==", "bodyText": "I think this is impossible, so we may as well just assert added.", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530451437", "createdAt": "2020-11-25T15:19:38Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/cache/SparseFileTracker.java", "diffHunk": "@@ -37,12 +37,56 @@\n \n     private final long length;\n \n+    /**\n+     * Creates a new empty {@link SparseFileTracker}\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     */\n     public SparseFileTracker(String description, long length) {\n+        this(description, length, Collections.emptySortedSet());\n+    }\n+\n+    /**\n+     * Creates a {@link SparseFileTracker} with some ranges already present\n+     *\n+     * @param description a description for the sparse file tracker\n+     * @param length      the length of the file tracked by the sparse file tracker\n+     * @param ranges      the set of ranges to be considered present\n+     */\n+    public SparseFileTracker(String description, long length, SortedSet<Tuple<Long, Long>> ranges) {\n         this.description = description;\n         this.length = length;\n         if (length < 0) {\n             throw new IllegalArgumentException(\"Length [\" + length + \"] must be equal to or greater than 0 for [\" + description + \"]\");\n         }\n+        if (ranges.isEmpty() == false) {\n+            synchronized (mutex) {\n+                for (Tuple<Long, Long> next : ranges) {\n+                    final Range range = new Range(next.v1(), next.v2(), null);\n+                    if (range.end <= range.start) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" cannot be empty\");\n+                    }\n+                    if (length < range.end) {\n+                        throw new IllegalArgumentException(\"Range \" + range + \" is exceeding maximum length [\" + length + ']');\n+                    }\n+\n+                    final SortedSet<Range> previousRanges = this.ranges.headSet(range);\n+                    if (previousRanges.isEmpty() == false) {\n+                        final Range previous = previousRanges.last();\n+                        if (range.start <= previous.end) {\n+                            throw new IllegalArgumentException(\"Range \" + range + \" is overlapping a previous range \" + previous);\n+                        }\n+                    }\n+                    final boolean added = this.ranges.add(range);\n+                    if (added == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1187ab6819ecb6dc9fdaa1e57eb90e49def7b41"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf845b7597456d3f01f1ccc3e3dce98f1339575", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/aaf845b7597456d3f01f1ccc3e3dce98f1339575", "committedDate": "2020-11-25T15:30:12Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjIxNzA0", "url": "https://github.com/elastic/elasticsearch/pull/65501#pullrequestreview-538621704", "createdAt": "2020-11-25T15:38:11Z", "commit": {"oid": "aaf845b7597456d3f01f1ccc3e3dce98f1339575"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTozODoxMVrOH54_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTozODoxMVrOH54_-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2NDc2Mg==", "bodyText": "Think this is off-by-one \ud83d\ude01\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        i = end + 2L + randomLongBetween(0L, Math.max(0L, length - end)); // +2 for non contiguous ranges\n          \n          \n            \n                        i = end + 1L + randomLongBetween(0L, Math.max(0L, length - end)); // +1 for non contiguous ranges", "url": "https://github.com/elastic/elasticsearch/pull/65501#discussion_r530464762", "createdAt": "2020-11-25T15:38:11Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/index/store/cache/SparseFileTrackerTests.java", "diffHunk": "@@ -536,4 +563,18 @@ private static boolean processGap(byte[] fileContents, SparseFileTracker.Gap gap\n             return true;\n         }\n     }\n+\n+    /**\n+     * Generates a sorted set of non-empty and non-contiguous random ranges that could fit into a file of a given maximum length.\n+     */\n+    private static SortedSet<Tuple<Long, Long>> randomRanges(long length) {\n+        final SortedSet<Tuple<Long, Long>> randomRanges = new TreeSet<>(Comparator.comparingLong(Tuple::v1));\n+        for (long i = 0L; i < length;) {\n+            long start = randomLongBetween(i, Math.max(0L, length - 1L));\n+            long end = randomLongBetween(start + 1L, length); // +1 for non empty ranges\n+            randomRanges.add(Tuple.tuple(start, end));\n+            i = end + 2L + randomLongBetween(0L, Math.max(0L, length - end)); // +2 for non contiguous ranges", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaf845b7597456d3f01f1ccc3e3dce98f1339575"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60e85cd376d198784fd12e765d5877a5043e869d", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/60e85cd376d198784fd12e765d5877a5043e869d", "committedDate": "2020-11-25T15:50:17Z", "message": "off by one"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4277, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}