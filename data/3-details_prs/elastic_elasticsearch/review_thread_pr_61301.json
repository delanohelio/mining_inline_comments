{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzM5MzA3", "number": 61301, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo0OTowMVrOEZp4FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1Mjo0M1rOEZp85Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzM1OTU3OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/FieldMapperTestCase2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo0OTowMVrOHCmJuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo0OTo0OVrOHCmLSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NDI4MA==", "bodyText": "I'm hoping that we'll migrate to this one and remove the 2 in the name.", "url": "https://github.com/elastic/elasticsearch/pull/61301#discussion_r472484280", "createdAt": "2020-08-18T20:49:01Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/FieldMapperTestCase2.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.analysis.core.KeywordAnalyzer;\n+import org.apache.lucene.analysis.core.WhitespaceAnalyzer;\n+import org.apache.lucene.analysis.standard.StandardAnalyzer;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.analysis.AnalyzerScope;\n+import org.elasticsearch.index.analysis.NamedAnalyzer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+/**\n+ * Base class for testing {@link FieldMapper}s.\n+ * @param <T> builder for the mapper to test\n+ */\n+public abstract class FieldMapperTestCase2<T extends FieldMapper.Builder<?>> extends MapperTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89ff37bedf62ddd1bffdf295a9ec108c42837d09"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NDY4MQ==", "bodyText": "Or we'll drop this entirely when we move to ParameterizedFieldMapper. Tests of those depend on MapperTestCase directly.", "url": "https://github.com/elastic/elasticsearch/pull/61301#discussion_r472484681", "createdAt": "2020-08-18T20:49:49Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/FieldMapperTestCase2.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.analysis.core.KeywordAnalyzer;\n+import org.apache.lucene.analysis.core.WhitespaceAnalyzer;\n+import org.apache.lucene.analysis.standard.StandardAnalyzer;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.analysis.AnalyzerScope;\n+import org.elasticsearch.index.analysis.NamedAnalyzer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+/**\n+ * Base class for testing {@link FieldMapper}s.\n+ * @param <T> builder for the mapper to test\n+ */\n+public abstract class FieldMapperTestCase2<T extends FieldMapper.Builder<?>> extends MapperTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NDI4MA=="}, "originalCommit": {"oid": "89ff37bedf62ddd1bffdf295a9ec108c42837d09"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzM3MTg5OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1Mjo0M1rOHCmRRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTowNjowNVrOHC-OaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NjIxMw==", "bodyText": "MapperService seems good enough for most of the tests. Most tests actually just want DocumentMapper which it contains. MapperService is useful for testing merging mappings though.", "url": "https://github.com/elastic/elasticsearch/pull/61301#discussion_r472486213", "createdAt": "2020-08-18T20:52:43Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperTestCase.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.analysis.standard.StandardAnalyzer;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.CheckedConsumer;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.compress.CompressedXContent;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.analysis.AnalyzerScope;\n+import org.elasticsearch.index.analysis.IndexAnalyzers;\n+import org.elasticsearch.index.analysis.NamedAnalyzer;\n+import org.elasticsearch.index.mapper.MapperService.MergeReason;\n+import org.elasticsearch.index.similarity.SimilarityService;\n+import org.elasticsearch.indices.IndicesModule;\n+import org.elasticsearch.indices.mapper.MapperRegistry;\n+import org.elasticsearch.plugins.MapperPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.Matchers.containsString;\n+\n+/**\n+ * Base class for testing {@link Mapper}s.\n+ */\n+public abstract class MapperTestCase extends ESTestCase {\n+    protected static final Settings SETTINGS = Settings.builder().put(\"index.version.created\", Version.CURRENT).build();\n+\n+    protected Collection<? extends Plugin> getPlugins() {\n+        return emptyList();\n+    }\n+\n+    protected Settings getIndexSettings() {\n+        return Settings.EMPTY;\n+    }\n+\n+    protected final String randomIndexOptions() {\n+        return randomFrom(new String[] { \"docs\", \"freqs\", \"positions\", \"offsets\" });\n+    }\n+\n+    protected final MapperService createIndex(XContentBuilder mappings) throws IOException {\n+        return createIndex(getIndexSettings(), mappings);\n+    }\n+\n+    protected IndexAnalyzers createIndexAnalyzers() {\n+        return new IndexAnalyzers(\n+            Map.of(\"default\", new NamedAnalyzer(\"default\", AnalyzerScope.INDEX, new StandardAnalyzer())),\n+            Map.of(),\n+            Map.of()\n+        );\n+    }\n+\n+    /**\n+     * Create the {@link MapperService} for an index.\n+     */\n+    protected final MapperService createIndex(Settings settings, XContentBuilder mapping) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89ff37bedf62ddd1bffdf295a9ec108c42837d09"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3ODY5Ng==", "bodyText": "Can we call this createMapperService instead?  And maybe add a createDocumentMapper sugar method as well, given that the vast majority of callers immediately call documentMapper()?", "url": "https://github.com/elastic/elasticsearch/pull/61301#discussion_r472878696", "createdAt": "2020-08-19T09:06:05Z", "author": {"login": "romseygeek"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperTestCase.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.analysis.standard.StandardAnalyzer;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.CheckedConsumer;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.compress.CompressedXContent;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.index.analysis.AnalyzerScope;\n+import org.elasticsearch.index.analysis.IndexAnalyzers;\n+import org.elasticsearch.index.analysis.NamedAnalyzer;\n+import org.elasticsearch.index.mapper.MapperService.MergeReason;\n+import org.elasticsearch.index.similarity.SimilarityService;\n+import org.elasticsearch.indices.IndicesModule;\n+import org.elasticsearch.indices.mapper.MapperRegistry;\n+import org.elasticsearch.plugins.MapperPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.Matchers.containsString;\n+\n+/**\n+ * Base class for testing {@link Mapper}s.\n+ */\n+public abstract class MapperTestCase extends ESTestCase {\n+    protected static final Settings SETTINGS = Settings.builder().put(\"index.version.created\", Version.CURRENT).build();\n+\n+    protected Collection<? extends Plugin> getPlugins() {\n+        return emptyList();\n+    }\n+\n+    protected Settings getIndexSettings() {\n+        return Settings.EMPTY;\n+    }\n+\n+    protected final String randomIndexOptions() {\n+        return randomFrom(new String[] { \"docs\", \"freqs\", \"positions\", \"offsets\" });\n+    }\n+\n+    protected final MapperService createIndex(XContentBuilder mappings) throws IOException {\n+        return createIndex(getIndexSettings(), mappings);\n+    }\n+\n+    protected IndexAnalyzers createIndexAnalyzers() {\n+        return new IndexAnalyzers(\n+            Map.of(\"default\", new NamedAnalyzer(\"default\", AnalyzerScope.INDEX, new StandardAnalyzer())),\n+            Map.of(),\n+            Map.of()\n+        );\n+    }\n+\n+    /**\n+     * Create the {@link MapperService} for an index.\n+     */\n+    protected final MapperService createIndex(Settings settings, XContentBuilder mapping) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NjIxMw=="}, "originalCommit": {"oid": "89ff37bedf62ddd1bffdf295a9ec108c42837d09"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 841, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}