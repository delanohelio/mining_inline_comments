{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NjE5NDk3", "number": 61183, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNTowMVrOEY7W-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoyMjo1NlrOEZ6cXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTczODE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/bytes/BytesArray.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNTowMVrOHBdQfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNTowMVrOHBdQfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI4OTk4MA==", "bodyText": "I think this is well worth the optimization to not allocating anything for equals and hashCode since we use BytesArray as keys in request caches.", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r471289980", "createdAt": "2020-08-17T07:25:01Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/BytesArray.java", "diffHunk": "@@ -67,6 +71,33 @@ public int length() {\n         return length;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        // NOOP override to satisfy Checkstyle's EqualsHashCode\n+        return super.hashCode();\n+    }\n+\n+    @Override\n+    protected int calculateHashCode() {\n+        int result = 1;\n+        for (int i = 0; i < length; i++) {\n+            result = 31 * result + bytes[offset + i];\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (other instanceof BytesArray) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7500c7257c2d5878031ca18e0d03178b25a53745"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTc0MTYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/bytes/CompositeBytesReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNTo1M1rOHBdSZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNTo1M1rOHBdSZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MDQ2OA==", "bodyText": "Taking advantage of the now cheaper writeTo for the BytesArray + this is always cheaper since we never cleverly batch up writes from multiple components anyway", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r471290468", "createdAt": "2020-08-17T07:25:53Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/CompositeBytesReference.java", "diffHunk": "@@ -187,6 +188,13 @@ public BytesRef next() throws IOException {\n         };\n     }\n \n+    @Override\n+    public void writeTo(OutputStream os) throws IOException {\n+        for (BytesReference reference : references) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269e6546f703ec5e35cd36726cd96ac033c36598"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTc0NDQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNjo0NlrOHBdUCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzoyNjo0NlrOHBdUCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MDg5MA==", "bodyText": "Why have another step going to the byte[] through ByteArray when we don't have to, especially with the new optimizations for that case in here.", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r471290890", "createdAt": "2020-08-17T07:26:46Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java", "diffHunk": "@@ -39,11 +39,18 @@\n     private final int offset;\n     private final int length;\n \n-    public PagedBytesReference(ByteArray byteArray, int length) {\n-        this(byteArray, 0, length);\n+    public static BytesReference of(ByteArray byteArray, int length) {\n+        if (length == 0) {\n+            return BytesArray.EMPTY;\n+        }\n+        if (byteArray.hasArray()) {\n+            return new BytesArray(byteArray.array(), 0, length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269e6546f703ec5e35cd36726cd96ac033c36598"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjM1MDc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/BigByteArray.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDoyMTowNlrOHBi8AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDo0MDowM1rOHBjjlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4MzA0MQ==", "bodyText": "assert false here, we shouldn't be calling this?", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r471383041", "createdAt": "2020-08-17T10:21:06Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigByteArray.java", "diffHunk": "@@ -127,6 +127,16 @@ public void fill(long fromIndex, long toIndex, byte value) {\n         }\n     }\n \n+    @Override\n+    public boolean hasArray() {\n+        return false;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3f7ed986da0770397386bb951f5a45aa9dc4ae"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM5MzE3Mg==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r471393172", "createdAt": "2020-08-17T10:40:03Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/util/BigByteArray.java", "diffHunk": "@@ -127,6 +127,16 @@ public void fill(long fromIndex, long toIndex, byte value) {\n         }\n     }\n \n+    @Override\n+    public boolean hasArray() {\n+        return false;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4MzA0MQ=="}, "originalCommit": {"oid": "7f3f7ed986da0770397386bb951f5a45aa9dc4ae"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzc2NzA3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzoyMjozOVrOHCp9XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowNTozMVrOHC4eSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0NjY1Mg==", "bodyText": "Why did this change?", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r472546652", "createdAt": "2020-08-18T23:22:39Z", "author": {"login": "tbrooks8"}, "path": "server/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java", "diffHunk": "@@ -796,7 +796,7 @@ public void testReadCorruptedArraySize() throws IOException {\n                     assertEquals(i, ints[i]);\n                 }\n                 EOFException eofException = expectThrows(EOFException.class, () -> streamInput.readIntArray());\n-                assertEquals(\"tried to read: 100 bytes but only 40 remaining\", eofException.getMessage());\n+                assertEquals(\"tried to read: 100 bytes but this stream is limited to: 82\", eofException.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae645bc6cfd20d227bfceee3beaef67bc41d887e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4NDQ1Nw==", "bodyText": "It's a different stream now. Instead of BytesReferenceStream which generated the previous exception message it's backed by a ByteArrayInputStream now.", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r472784457", "createdAt": "2020-08-19T07:05:31Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java", "diffHunk": "@@ -796,7 +796,7 @@ public void testReadCorruptedArraySize() throws IOException {\n                     assertEquals(i, ints[i]);\n                 }\n                 EOFException eofException = expectThrows(EOFException.class, () -> streamInput.readIntArray());\n-                assertEquals(\"tried to read: 100 bytes but only 40 remaining\", eofException.getMessage());\n+                assertEquals(\"tried to read: 100 bytes but this stream is limited to: 82\", eofException.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0NjY1Mg=="}, "originalCommit": {"oid": "ae645bc6cfd20d227bfceee3beaef67bc41d887e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjA3Mzg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoyMjo1NlrOHDA_OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoyMjo1NlrOHDA_OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMzk2MQ==", "bodyText": "Just to remind me when I inevitably trip over this in future...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert byteArray.hasArray() == false;\n          \n          \n            \n                    assert byteArray.hasArray() == false : \"use BytesReference#fromByteArray\";", "url": "https://github.com/elastic/elasticsearch/pull/61183#discussion_r472923961", "createdAt": "2020-08-19T10:22:56Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java", "diffHunk": "@@ -39,11 +39,8 @@\n     private final int offset;\n     private final int length;\n \n-    public PagedBytesReference(ByteArray byteArray, int length) {\n-        this(byteArray, 0, length);\n-    }\n-\n-    private PagedBytesReference(ByteArray byteArray, int from, int length) {\n+    PagedBytesReference(ByteArray byteArray, int from, int length) {\n+        assert byteArray.hasArray() == false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25afc12af530bf4717fd0ebd056299b8956d39b3"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 911, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}