{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MzcwNjA1", "number": 51256, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozMToxM1rODZ37iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozNTo1OVrODZ4Ciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU3MzU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozMToxM1rOFggbNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozMToxM1rOFggbNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMDAwNw==", "bodyText": "I find this a bit more readable:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (snapshots == null || snapshots.entries().isEmpty()) {\n          \n          \n            \n                            if (snapshots != null && snapshots.entries().isEmpty() == false) {\n          \n          \n            \n                                    throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName, \" a snapshot is already running\");\n          \n          \n            \n                            }\n          \n          \n            \n                            // Store newSnapshot here to be processed in clusterStateProcessed\n          \n          \n            \n                            ...", "url": "https://github.com/elastic/elasticsearch/pull/51256#discussion_r369630007", "createdAt": "2020-01-22T15:31:13Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -268,90 +268,86 @@ public void createSnapshot(final CreateSnapshotRequest request, final ActionList\n         final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.snapshot());\n         validate(repositoryName, snapshotName);\n         final SnapshotId snapshotId = new SnapshotId(snapshotName, UUIDs.randomBase64UUID()); // new UUID for the snapshot\n-        final StepListener<RepositoryData> repositoryDataListener = new StepListener<>();\n-        repositoriesService.repository(repositoryName).getRepositoryData(repositoryDataListener);\n-        repositoryDataListener.whenComplete(repositoryData -> {\n-            final boolean hasOldFormatSnapshots = hasOldVersionSnapshots(repositoryName, repositoryData, null);\n-            clusterService.submitStateUpdateTask(\"create_snapshot [\" + snapshotName + ']', new ClusterStateUpdateTask() {\n-\n-                private SnapshotsInProgress.Entry newSnapshot = null;\n-\n-                @Override\n-                public ClusterState execute(ClusterState currentState) {\n-                    validate(repositoryName, snapshotName, currentState);\n-                    SnapshotDeletionsInProgress deletionsInProgress = currentState.custom(SnapshotDeletionsInProgress.TYPE);\n-                    if (deletionsInProgress != null && deletionsInProgress.hasDeletionsInProgress()) {\n-                        throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n-                            \"cannot snapshot while a snapshot deletion is in-progress in [\" + deletionsInProgress + \"]\");\n-                    }\n-                    final RepositoryCleanupInProgress repositoryCleanupInProgress = currentState.custom(RepositoryCleanupInProgress.TYPE);\n-                    if (repositoryCleanupInProgress != null && repositoryCleanupInProgress.hasCleanupInProgress()) {\n-                        throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n-                            \"cannot snapshot while a repository cleanup is in-progress in [\" + repositoryCleanupInProgress + \"]\");\n-                    }\n-                    SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE);\n-                    if (snapshots == null || snapshots.entries().isEmpty()) {\n-                        // Store newSnapshot here to be processed in clusterStateProcessed\n-                        List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                            request.indicesOptions(), request.indices()));\n-                        logger.trace(\"[{}][{}] creating snapshot for indices [{}]\", repositoryName, snapshotName, indices);\n-                        List<IndexId> snapshotIndices = repositoryData.resolveNewIndices(indices);\n-                        newSnapshot = new SnapshotsInProgress.Entry(\n-                            new Snapshot(repositoryName, snapshotId),\n-                            request.includeGlobalState(), request.partial(),\n-                            State.INIT,\n-                            snapshotIndices,\n-                            threadPool.absoluteTimeInMillis(),\n-                            repositoryData.getGenId(),\n-                            null,\n-                            request.userMetadata(),\n-                            hasOldFormatSnapshots == false &&\n-                                clusterService.state().nodes().getMinNodeVersion().onOrAfter(SHARD_GEN_IN_REPO_DATA_VERSION));\n-                        initializingSnapshots.add(newSnapshot.snapshot());\n-                        snapshots = new SnapshotsInProgress(newSnapshot);\n-                    } else {\n-                        throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName, \" a snapshot is already running\");\n-                    }\n-                    return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, snapshots).build();\n+        clusterService.submitStateUpdateTask(\"create_snapshot [\" + snapshotName + ']', new ClusterStateUpdateTask() {\n+\n+            private SnapshotsInProgress.Entry newSnapshot = null;\n+\n+            private List<String> indices;\n+\n+            @Override\n+            public ClusterState execute(ClusterState currentState) {\n+                validate(repositoryName, snapshotName, currentState);\n+                SnapshotDeletionsInProgress deletionsInProgress = currentState.custom(SnapshotDeletionsInProgress.TYPE);\n+                if (deletionsInProgress != null && deletionsInProgress.hasDeletionsInProgress()) {\n+                    throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n+                        \"cannot snapshot while a snapshot deletion is in-progress in [\" + deletionsInProgress + \"]\");\n                 }\n+                final RepositoryCleanupInProgress repositoryCleanupInProgress = currentState.custom(RepositoryCleanupInProgress.TYPE);\n+                if (repositoryCleanupInProgress != null && repositoryCleanupInProgress.hasCleanupInProgress()) {\n+                    throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n+                        \"cannot snapshot while a repository cleanup is in-progress in [\" + repositoryCleanupInProgress + \"]\");\n+                }\n+                SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE);\n+                if (snapshots == null || snapshots.entries().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca5ef3d193a2bb5d45085ed085169d562b604d5"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU5MTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozNTo1OVrOFggmnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozNTo1OVrOFggmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMjkyNQ==", "bodyText": "Maybe add a comment on why the list is empty here? Something like\n// list of snapshot indices will be resolved later", "url": "https://github.com/elastic/elasticsearch/pull/51256#discussion_r369632925", "createdAt": "2020-01-22T15:35:59Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -268,90 +268,86 @@ public void createSnapshot(final CreateSnapshotRequest request, final ActionList\n         final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.snapshot());\n         validate(repositoryName, snapshotName);\n         final SnapshotId snapshotId = new SnapshotId(snapshotName, UUIDs.randomBase64UUID()); // new UUID for the snapshot\n-        final StepListener<RepositoryData> repositoryDataListener = new StepListener<>();\n-        repositoriesService.repository(repositoryName).getRepositoryData(repositoryDataListener);\n-        repositoryDataListener.whenComplete(repositoryData -> {\n-            final boolean hasOldFormatSnapshots = hasOldVersionSnapshots(repositoryName, repositoryData, null);\n-            clusterService.submitStateUpdateTask(\"create_snapshot [\" + snapshotName + ']', new ClusterStateUpdateTask() {\n-\n-                private SnapshotsInProgress.Entry newSnapshot = null;\n-\n-                @Override\n-                public ClusterState execute(ClusterState currentState) {\n-                    validate(repositoryName, snapshotName, currentState);\n-                    SnapshotDeletionsInProgress deletionsInProgress = currentState.custom(SnapshotDeletionsInProgress.TYPE);\n-                    if (deletionsInProgress != null && deletionsInProgress.hasDeletionsInProgress()) {\n-                        throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n-                            \"cannot snapshot while a snapshot deletion is in-progress in [\" + deletionsInProgress + \"]\");\n-                    }\n-                    final RepositoryCleanupInProgress repositoryCleanupInProgress = currentState.custom(RepositoryCleanupInProgress.TYPE);\n-                    if (repositoryCleanupInProgress != null && repositoryCleanupInProgress.hasCleanupInProgress()) {\n-                        throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n-                            \"cannot snapshot while a repository cleanup is in-progress in [\" + repositoryCleanupInProgress + \"]\");\n-                    }\n-                    SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE);\n-                    if (snapshots == null || snapshots.entries().isEmpty()) {\n-                        // Store newSnapshot here to be processed in clusterStateProcessed\n-                        List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                            request.indicesOptions(), request.indices()));\n-                        logger.trace(\"[{}][{}] creating snapshot for indices [{}]\", repositoryName, snapshotName, indices);\n-                        List<IndexId> snapshotIndices = repositoryData.resolveNewIndices(indices);\n-                        newSnapshot = new SnapshotsInProgress.Entry(\n-                            new Snapshot(repositoryName, snapshotId),\n-                            request.includeGlobalState(), request.partial(),\n-                            State.INIT,\n-                            snapshotIndices,\n-                            threadPool.absoluteTimeInMillis(),\n-                            repositoryData.getGenId(),\n-                            null,\n-                            request.userMetadata(),\n-                            hasOldFormatSnapshots == false &&\n-                                clusterService.state().nodes().getMinNodeVersion().onOrAfter(SHARD_GEN_IN_REPO_DATA_VERSION));\n-                        initializingSnapshots.add(newSnapshot.snapshot());\n-                        snapshots = new SnapshotsInProgress(newSnapshot);\n-                    } else {\n-                        throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName, \" a snapshot is already running\");\n-                    }\n-                    return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, snapshots).build();\n+        clusterService.submitStateUpdateTask(\"create_snapshot [\" + snapshotName + ']', new ClusterStateUpdateTask() {\n+\n+            private SnapshotsInProgress.Entry newSnapshot = null;\n+\n+            private List<String> indices;\n+\n+            @Override\n+            public ClusterState execute(ClusterState currentState) {\n+                validate(repositoryName, snapshotName, currentState);\n+                SnapshotDeletionsInProgress deletionsInProgress = currentState.custom(SnapshotDeletionsInProgress.TYPE);\n+                if (deletionsInProgress != null && deletionsInProgress.hasDeletionsInProgress()) {\n+                    throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n+                        \"cannot snapshot while a snapshot deletion is in-progress in [\" + deletionsInProgress + \"]\");\n                 }\n+                final RepositoryCleanupInProgress repositoryCleanupInProgress = currentState.custom(RepositoryCleanupInProgress.TYPE);\n+                if (repositoryCleanupInProgress != null && repositoryCleanupInProgress.hasCleanupInProgress()) {\n+                    throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n+                        \"cannot snapshot while a repository cleanup is in-progress in [\" + repositoryCleanupInProgress + \"]\");\n+                }\n+                SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE);\n+                if (snapshots == null || snapshots.entries().isEmpty()) {\n+                    // Store newSnapshot here to be processed in clusterStateProcessed\n+                    indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n+                        request.indicesOptions(), request.indices()));\n+                    logger.trace(\"[{}][{}] creating snapshot for indices [{}]\", repositoryName, snapshotName, indices);\n+                    newSnapshot = new SnapshotsInProgress.Entry(\n+                        new Snapshot(repositoryName, snapshotId),\n+                        request.includeGlobalState(), request.partial(),\n+                        State.INIT,\n+                        Collections.emptyList(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca5ef3d193a2bb5d45085ed085169d562b604d5"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4401, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}