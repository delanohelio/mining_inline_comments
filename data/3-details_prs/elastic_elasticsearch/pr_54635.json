{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTE1NTQz", "number": 54635, "title": "HLRC support for Component Templates APIs", "bodyText": "This change adds High Level Rest Client support for Component Templates.\nRelates to #53101\nAdded >non-issue label as component templates are still behind feature flag", "createdAt": "2020-04-02T11:21:07Z", "url": "https://github.com/elastic/elasticsearch/pull/54635", "merged": true, "mergeCommit": {"oid": "ad8590e190efe5858e9171ee67a4eb592a51b2e5"}, "closed": true, "closedAt": "2020-04-06T16:52:25Z", "author": {"login": "probakowski"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTqZDKgH2gAyMzk3NTE1NTQzOmY1NWYyZDZkMmFjN2Y1NmUzNWY0MmUxZmIxYWI5N2FhNDcyZmVmOGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVAvlaAH2gAyMzk3NTE1NTQzOmU5ZTRiNDU2NDBlOTViMjJmZDE0NDA5Y2FlMWFiZDI0MmVmYjE3ZTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f55f2d6d2ac7f56e35f42e1fb1ab97aa472fef8b", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/f55f2d6d2ac7f56e35f42e1fb1ab97aa472fef8b", "committedDate": "2020-04-02T11:14:01Z", "message": "HLRC support for Component Templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e904d03b3f38373fe06d195118339e38f4b6481", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/6e904d03b3f38373fe06d195118339e38f4b6481", "committedDate": "2020-04-02T11:14:01Z", "message": "hlrc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71ea5f164de1e689ce112a00b15330436b984c5f", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/71ea5f164de1e689ce112a00b15330436b984c5f", "committedDate": "2020-04-02T11:15:12Z", "message": "hlrc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5173feb20349feb97ca0d51f4531233dd862ef", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/7f5173feb20349feb97ca0d51f4531233dd862ef", "committedDate": "2020-04-02T11:15:49Z", "message": "merge fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d433c1da3364dd63dd21aa9f79125ff7ab4fcf11", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/d433c1da3364dd63dd21aa9f79125ff7ab4fcf11", "committedDate": "2020-04-02T13:05:46Z", "message": "removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b48a5268a0687937d0b6e96f2f3b1ef6d5ef783", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/0b48a5268a0687937d0b6e96f2f3b1ef6d5ef783", "committedDate": "2020-04-02T13:13:01Z", "message": "checkstyle fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ae2320638201b56c17626d974c58a70f7ce1ad", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/10ae2320638201b56c17626d974c58a70f7ce1ad", "committedDate": "2020-04-02T14:05:22Z", "message": "metaData -> metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e12c371ce9242e2a6f6eb8fd27438e167b10093d", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/e12c371ce9242e2a6f6eb8fd27438e167b10093d", "committedDate": "2020-04-02T16:00:58Z", "message": "move to ClusterClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23578ebeeba6a05149e9133c53c5a5e613beed7a", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/23578ebeeba6a05149e9133c53c5a5e613beed7a", "committedDate": "2020-04-02T16:10:45Z", "message": "checkstyle fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c86328b6d162c0cc846b3c8c7474b7109f76e8", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/03c86328b6d162c0cc846b3c8c7474b7109f76e8", "committedDate": "2020-04-02T16:11:41Z", "message": "checkstyle fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f32ee49784d007870fb048e16317911c410f175", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/4f32ee49784d007870fb048e16317911c410f175", "committedDate": "2020-04-02T16:12:25Z", "message": "checkstyle fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce7cbc5c06ad162c9f63ffdd6a4d06b65674f4df", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/ce7cbc5c06ad162c9f63ffdd6a4d06b65674f4df", "committedDate": "2020-04-02T16:13:18Z", "message": "method in spec fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/23af6dc079fbd62f790fde1ee03e6664c7f8fac0", "committedDate": "2020-04-02T16:31:47Z", "message": "Merge branch 'master' into hlrc-component-template"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjA0MTU1", "url": "https://github.com/elastic/elasticsearch/pull/54635#pullrequestreview-386604155", "createdAt": "2020-04-02T16:39:56Z", "commit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozOTo1NlrOF_z3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NToyOVrOF_0fOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NDM1OQ==", "bodyText": "Just curious, but what was different that changed the indentation here?", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402454359", "createdAt": "2020-04-02T16:39:56Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java", "diffHunk": "@@ -169,4 +175,119 @@ public Cancellable remoteInfoAsync(RemoteInfoRequest request, RequestOptions opt\n         return restHighLevelClient.performRequestAsyncAndParseEntity(request, ClusterRequestConverters::remoteInfo, options,\n                 RemoteInfoResponse::fromXContent, listener, singleton(RestStatus.REQUEST_TIMEOUT.getStatus()));\n     }\n+\n+    /**\n+     * Delete a component template using the Component Templates API\n+     *\n+     * @param req the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse deleteComponentTemplate(DeleteComponentTemplateRequest req, RequestOptions options) throws IOException {\n+        return restHighLevelClient.performRequestAndParseEntity(req, ClusterRequestConverters::deleteComponentTemplate,\n+            options, AcknowledgedResponse::fromXContent, emptySet());\n+    }\n+\n+    /**\n+     * Asynchronously delete a component template using the Component Templates API\n+     *\n+     * @param request  the request\n+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @param listener the listener to be notified upon request completion\n+     * @return cancellable that may be used to cancel the request\n+     */\n+    public Cancellable deleteComponentTemplateAsync(DeleteComponentTemplateRequest request, RequestOptions options,\n+                                                    ActionListener<AcknowledgedResponse> listener) {\n+        return restHighLevelClient.performRequestAsyncAndParseEntity(request, ClusterRequestConverters::deleteComponentTemplate,\n+            options, AcknowledgedResponse::fromXContent, listener, emptySet());\n+    }\n+\n+    /**\n+     * Puts a component template using the Component Templates API.\n+     *\n+     * @param putComponentTemplateRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return the response\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse putComponentTemplate(\n+        PutComponentTemplateRequest putComponentTemplateRequest,\n+        RequestOptions options) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NTkyMg==", "bodyText": "So with our discussion earlier this week, we decided to limit the get API to a single name or wildcard (instead of comma-separated), so this should stick with a single name I think", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402455922", "createdAt": "2020-04-02T16:42:17Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/ComponentTemplatesExistRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * A request to check for the existence of component templates\n+ */\n+public class ComponentTemplatesExistRequest extends GetComponentTemplatesRequest {\n+\n+    /**\n+     * Create a request to check for the existence of component templates. At least one template index name must be provided\n+     *\n+     * @param names the names of templates to check for the existence of\n+     */\n+    public ComponentTemplatesExistRequest(String... names) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzAyMA==", "bodyText": "Is there a reason to use LinkedHashMap for ordered operations here?", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402457020", "createdAt": "2020-04-02T16:43:59Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetComponentTemplatesResponse.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+\n+public class GetComponentTemplatesResponse {\n+\n+    public static final ParseField NAME = new ParseField(\"name\");\n+    public static final ParseField COMPONENT_TEMPLATES = new ParseField(\"component_templates\");\n+    public static final ParseField COMPONENT_TEMPLATE = new ParseField(\"component_template\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<Map<String, ComponentTemplate>, Void> PARSER =\n+        new ConstructingObjectParser<>(\"component_templates\", false,\n+            a -> ((List<NamedComponentTemplate>) a[0]).stream().collect(Collectors.toMap(n -> n.name, n -> n.componentTemplate,\n+                (n1, n2) -> n1, LinkedHashMap::new)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzY1Ng==", "bodyText": "We tend to shy away from single value if statements, can you change these to the regular {} version?", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402457656", "createdAt": "2020-04-02T16:44:53Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetComponentTemplatesResponse.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+\n+public class GetComponentTemplatesResponse {\n+\n+    public static final ParseField NAME = new ParseField(\"name\");\n+    public static final ParseField COMPONENT_TEMPLATES = new ParseField(\"component_templates\");\n+    public static final ParseField COMPONENT_TEMPLATE = new ParseField(\"component_template\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<Map<String, ComponentTemplate>, Void> PARSER =\n+        new ConstructingObjectParser<>(\"component_templates\", false,\n+            a -> ((List<NamedComponentTemplate>) a[0]).stream().collect(Collectors.toMap(n -> n.name, n -> n.componentTemplate,\n+                (n1, n2) -> n1, LinkedHashMap::new)));\n+\n+    private static final ConstructingObjectParser<NamedComponentTemplate, Void> INNER_PARSER =\n+        new ConstructingObjectParser<>(\"named_component_template\", false,\n+            a -> new NamedComponentTemplate((String) a[0], (ComponentTemplate) a[1]));\n+\n+    static {\n+        INNER_PARSER.declareString(ConstructingObjectParser.constructorArg(), NAME);\n+        INNER_PARSER.declareObject(ConstructingObjectParser.constructorArg(), ComponentTemplate.PARSER, COMPONENT_TEMPLATE);\n+        PARSER.declareObjectArray(ConstructingObjectParser.constructorArg(), INNER_PARSER, COMPONENT_TEMPLATES);\n+    }\n+\n+    private static class NamedComponentTemplate {\n+        String name;\n+        ComponentTemplate componentTemplate;\n+\n+        private NamedComponentTemplate(String name, ComponentTemplate componentTemplate) {\n+            this.name = name;\n+            this.componentTemplate = componentTemplate;\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"GetIndexTemplatesResponse [indexTemplates=\" + componentTemplates + \"]\";\n+    }\n+\n+    private final Map<String, ComponentTemplate> componentTemplates;\n+\n+    GetComponentTemplatesResponse() {\n+        componentTemplates = Collections.emptyMap();\n+    }\n+\n+    GetComponentTemplatesResponse(Map<String, ComponentTemplate> componentTemplates) {\n+        this.componentTemplates = Collections.unmodifiableMap(new LinkedHashMap<>(componentTemplates));\n+    }\n+\n+    public Map<String, ComponentTemplate> getComponentTemplates() {\n+        return componentTemplates;\n+    }\n+\n+\n+    public static GetComponentTemplatesResponse fromXContent(XContentParser parser) throws IOException {\n+        return new GetComponentTemplatesResponse(PARSER.apply(parser, null));\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(componentTemplates);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODMxOA==", "bodyText": "Super minor nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"Name cannot be null\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"name cannot be null\");", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402458318", "createdAt": "2020-04-02T16:45:56Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.ElasticsearchParseException;\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutComponentTemplateRequest extends TimedRequest implements ToXContentFragment {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private ComponentTemplate componentTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutComponentTemplateRequest name(String name) {\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"Name cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODc0Ng==", "bodyText": "another super minor nit (all our exceptions should be lowercase)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"Failed to build json for template request\", e);\n          \n          \n            \n                        throw new IllegalArgumentException(\"failed to build json for template request\", e);", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402458746", "createdAt": "2020-04-02T16:46:39Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.ElasticsearchParseException;\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutComponentTemplateRequest extends TimedRequest implements ToXContentFragment {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private ComponentTemplate componentTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutComponentTemplateRequest name(String name) {\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"Name cannot be null\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already\n+     * exists, it will fail with an {@link IllegalArgumentException}.\n+     */\n+    public PutComponentTemplateRequest create(boolean create) {\n+        this.create = create;\n+        return this;\n+    }\n+\n+    public boolean create() {\n+        return create;\n+    }\n+\n+    /**\n+     * The component template to create.\n+     */\n+    public PutComponentTemplateRequest componentTemplate(ComponentTemplate componentTemplate) {\n+        this.componentTemplate = componentTemplate;\n+        return this;\n+    }\n+\n+    /**\n+     * The cause for this component template creation.\n+     */\n+    public PutComponentTemplateRequest cause(String cause) {\n+        this.cause = cause;\n+        return this;\n+    }\n+\n+    public String cause() {\n+        return this.cause;\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(XContentBuilder templateBuilder) {\n+        try {\n+            return source(BytesReference.bytes(templateBuilder), templateBuilder.contentType());\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to build json for template request\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ElasticsearchParseException(\"Failed to parse content to map\", e);\n          \n          \n            \n                        throw new ElasticsearchParseException(\"failed to parse content to map\", e);", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402458881", "createdAt": "2020-04-02T16:46:50Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.ElasticsearchParseException;\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutComponentTemplateRequest extends TimedRequest implements ToXContentFragment {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private ComponentTemplate componentTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutComponentTemplateRequest name(String name) {\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"Name cannot be null\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already\n+     * exists, it will fail with an {@link IllegalArgumentException}.\n+     */\n+    public PutComponentTemplateRequest create(boolean create) {\n+        this.create = create;\n+        return this;\n+    }\n+\n+    public boolean create() {\n+        return create;\n+    }\n+\n+    /**\n+     * The component template to create.\n+     */\n+    public PutComponentTemplateRequest componentTemplate(ComponentTemplate componentTemplate) {\n+        this.componentTemplate = componentTemplate;\n+        return this;\n+    }\n+\n+    /**\n+     * The cause for this component template creation.\n+     */\n+    public PutComponentTemplateRequest cause(String cause) {\n+        this.cause = cause;\n+        return this;\n+    }\n+\n+    public String cause() {\n+        return this.cause;\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(XContentBuilder templateBuilder) {\n+        try {\n+            return source(BytesReference.bytes(templateBuilder), templateBuilder.contentType());\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to build json for template request\", e);\n+        }\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(String templateSource, XContentType xContentType) {\n+        try (XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY,\n+            DeprecationHandler.THROW_UNSUPPORTED_OPERATION, templateSource)) {\n+            return componentTemplate(ComponentTemplate.parse(parser));\n+        } catch (IOException e) {\n+            throw new ElasticsearchParseException(\"Failed to parse content to map\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MDY2OA==", "bodyText": "It looks like the precedent for source or fromXContent methods is to annotate the method with throws IOException rather than catching the exception and rewrapping, if possible, can we stick with doing that here (and in the other parsing methods)?", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402460668", "createdAt": "2020-04-02T16:49:24Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.ElasticsearchParseException;\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutComponentTemplateRequest extends TimedRequest implements ToXContentFragment {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private ComponentTemplate componentTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutComponentTemplateRequest name(String name) {\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"Name cannot be null\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already\n+     * exists, it will fail with an {@link IllegalArgumentException}.\n+     */\n+    public PutComponentTemplateRequest create(boolean create) {\n+        this.create = create;\n+        return this;\n+    }\n+\n+    public boolean create() {\n+        return create;\n+    }\n+\n+    /**\n+     * The component template to create.\n+     */\n+    public PutComponentTemplateRequest componentTemplate(ComponentTemplate componentTemplate) {\n+        this.componentTemplate = componentTemplate;\n+        return this;\n+    }\n+\n+    /**\n+     * The cause for this component template creation.\n+     */\n+    public PutComponentTemplateRequest cause(String cause) {\n+        this.cause = cause;\n+        return this;\n+    }\n+\n+    public String cause() {\n+        return this.cause;\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(XContentBuilder templateBuilder) {\n+        try {\n+            return source(BytesReference.bytes(templateBuilder), templateBuilder.contentType());\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to build json for template request\", e);\n+        }\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(String templateSource, XContentType xContentType) {\n+        try (XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY,\n+            DeprecationHandler.THROW_UNSUPPORTED_OPERATION, templateSource)) {\n+            return componentTemplate(ComponentTemplate.parse(parser));\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDU2OA==", "bodyText": "All our other Request objects don't usually implement methods to read from xcontent, I'm not sure at all that we need to specify all of these source methods with a bunch of different ways to read in a ComponentTemplate, it would be better to either specify a template (like you already have a method for), or add a builder to construct a ComponentTemplate without reading one from JSON", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r402464568", "createdAt": "2020-04-02T16:55:29Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.ElasticsearchParseException;\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutComponentTemplateRequest extends TimedRequest implements ToXContentFragment {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private ComponentTemplate componentTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutComponentTemplateRequest name(String name) {\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"Name cannot be null\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already\n+     * exists, it will fail with an {@link IllegalArgumentException}.\n+     */\n+    public PutComponentTemplateRequest create(boolean create) {\n+        this.create = create;\n+        return this;\n+    }\n+\n+    public boolean create() {\n+        return create;\n+    }\n+\n+    /**\n+     * The component template to create.\n+     */\n+    public PutComponentTemplateRequest componentTemplate(ComponentTemplate componentTemplate) {\n+        this.componentTemplate = componentTemplate;\n+        return this;\n+    }\n+\n+    /**\n+     * The cause for this component template creation.\n+     */\n+    public PutComponentTemplateRequest cause(String cause) {\n+        this.cause = cause;\n+        return this;\n+    }\n+\n+    public String cause() {\n+        return this.cause;\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(XContentBuilder templateBuilder) {\n+        try {\n+            return source(BytesReference.bytes(templateBuilder), templateBuilder.contentType());\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to build json for template request\", e);\n+        }\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(String templateSource, XContentType xContentType) {\n+        try (XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY,\n+            DeprecationHandler.THROW_UNSUPPORTED_OPERATION, templateSource)) {\n+            return componentTemplate(ComponentTemplate.parse(parser));\n+        } catch (IOException e) {\n+            throw new ElasticsearchParseException(\"Failed to parse content to map\", e);\n+        }\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(byte[] source, XContentType xContentType) {\n+        return source(source, 0, source.length, xContentType);\n+    }\n+\n+    /**\n+     * The template source definition.\n+     */\n+    public PutComponentTemplateRequest source(byte[] source, int offset, int length, XContentType xContentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23af6dc079fbd62f790fde1ee03e6664c7f8fac0"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cffe8a2c23ffd0e535e622863503a41acc7c28e", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/6cffe8a2c23ffd0e535e622863503a41acc7c28e", "committedDate": "2020-04-03T17:29:06Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25d7134b2d2627ed8fbdc861e1a6f3328050ee0e", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/25d7134b2d2627ed8fbdc861e1a6f3328050ee0e", "committedDate": "2020-04-03T17:33:43Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43562eeaca662234c35d18ab1344f87cc60de281", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/43562eeaca662234c35d18ab1344f87cc60de281", "committedDate": "2020-04-03T17:35:06Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15ee13633bcea317fbdcab3862d4df4006c72cd5", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/15ee13633bcea317fbdcab3862d4df4006c72cd5", "committedDate": "2020-04-03T17:45:56Z", "message": "unused imports fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTcxNzcy", "url": "https://github.com/elastic/elasticsearch/pull/54635#pullrequestreview-387571772", "createdAt": "2020-04-03T20:50:11Z", "commit": {"oid": "15ee13633bcea317fbdcab3862d4df4006c72cd5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo1MDoxMVrOGApDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo1MDoxMVrOGApDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyNTc1Mg==", "bodyText": "You can change this to extend ToXContentObject (instead of ToXContentFragment) and then this method can be removed", "url": "https://github.com/elastic/elasticsearch/pull/54635#discussion_r403325752", "createdAt": "2020-04-03T20:50:11Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/PutComponentTemplateRequest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.TimedRequest;\n+import org.elasticsearch.cluster.metadata.ComponentTemplate;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A request to create an component template.\n+ */\n+public class PutComponentTemplateRequest extends TimedRequest implements ToXContentFragment {\n+\n+    private String name;\n+\n+    private String cause = \"\";\n+\n+    private boolean create;\n+\n+    private ComponentTemplate componentTemplate;\n+\n+    /**\n+     * Sets the name of the component template.\n+     */\n+    public PutComponentTemplateRequest name(String name) {\n+        if (Strings.isNullOrEmpty(name)) {\n+            throw new IllegalArgumentException(\"name cannot be null or empty\");\n+        }\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * The name of the component template.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set to {@code true} to force only creation, not an update of an component template. If it already\n+     * exists, it will fail with an {@link IllegalArgumentException}.\n+     */\n+    public PutComponentTemplateRequest create(boolean create) {\n+        this.create = create;\n+        return this;\n+    }\n+\n+    public boolean create() {\n+        return create;\n+    }\n+\n+    /**\n+     * The component template to create.\n+     */\n+    public PutComponentTemplateRequest componentTemplate(ComponentTemplate componentTemplate) {\n+        this.componentTemplate = componentTemplate;\n+        return this;\n+    }\n+\n+    /**\n+     * The cause for this component template creation.\n+     */\n+    public PutComponentTemplateRequest cause(String cause) {\n+        this.cause = cause;\n+        return this;\n+    }\n+\n+    public String cause() {\n+        return this.cause;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        if (componentTemplate != null) {\n+            componentTemplate.toXContent(builder, params);\n+        }\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean isFragment() {\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ee13633bcea317fbdcab3862d4df4006c72cd5"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "579bea4d6a0091531f3fd9027d4e90dbb6e40caf", "author": {"user": {"login": "probakowski", "name": "Przemko Robakowski"}}, "url": "https://github.com/elastic/elasticsearch/commit/579bea4d6a0091531f3fd9027d4e90dbb6e40caf", "committedDate": "2020-04-03T21:19:37Z", "message": "review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55c96aa3080af6db2ff1cab9c572610045cc4769", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/55c96aa3080af6db2ff1cab9c572610045cc4769", "committedDate": "2020-04-03T21:43:23Z", "message": "Merge branch 'master' into hlrc-component-template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e4b45640e95b22fd14409cae1abd242efb17e1", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/e9e4b45640e95b22fd14409cae1abd242efb17e1", "committedDate": "2020-04-06T15:50:28Z", "message": "Merge branch 'master' into hlrc-component-template"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1288, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}