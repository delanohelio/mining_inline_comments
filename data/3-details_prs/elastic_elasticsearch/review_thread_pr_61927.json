{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Njk4Nzgw", "number": 61927, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNzozNlrOEgCPvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxMjo0OVrOEjHnQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDI2Njg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNzozNlrOHMrHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNzozNlrOHMrHoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MTQyNA==", "bodyText": "I pulled this function into the superclass because it the \"for query\" version of it is tricky. We could probably avoid the type parameter if we really wanted to by being a bit more tricky, but I'm not sure it is worth it.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r483051424", "createdAt": "2020-09-03T15:07:36Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -61,6 +71,26 @@ public final boolean isAggregatable() {\n         return true;\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDI2ODM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNzo1M1rOHMrIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNzo1M1rOHMrIlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MTY3MQ==", "bodyText": "Missing this was a bug that causes regexes not to work at all!", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r483051671", "createdAt": "2020-09-03T15:07:53Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -102,38 +133,47 @@ public Query fuzzyQuery(\n         throw new IllegalArgumentException(unsupported(\"fuzzy\", \"keyword and text\"));\n     }\n \n+    @Override\n     public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n         throw new IllegalArgumentException(unsupported(\"prefix\", \"keyword, text and wildcard\"));\n     }\n \n+    @Override\n     public Query wildcardQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n         throw new IllegalArgumentException(unsupported(\"wildcard\", \"keyword, text and wildcard\"));\n     }\n \n+    @Override\n     public Query regexpQuery(\n         String value,\n-        int flags,\n+        int syntaxFlags,\n+        int matchFlags,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDI3MTc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptIpMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowODo0MlrOHMrKxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1NToxNlrOHSLF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjIzMQ==", "bodyText": "This was a bug!", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r483052231", "createdAt": "2020-09-03T15:08:42Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptIpMappedFieldType.java", "diffHunk": "@@ -119,14 +109,18 @@ public Query rangeQuery(\n     public Query termQuery(Object value, QueryShardContext context) {\n         checkAllowExpensiveQueries(context);\n         if (value instanceof InetAddress) {\n-            return InetAddressPoint.newExactQuery(name(), (InetAddress) value);\n+            return inetAddressQuery((InetAddress) value, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3Mzk3Nw==", "bodyText": "should we push this separately?", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488473977", "createdAt": "2020-09-15T08:14:08Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptIpMappedFieldType.java", "diffHunk": "@@ -119,14 +109,18 @@ public Query rangeQuery(\n     public Query termQuery(Object value, QueryShardContext context) {\n         checkAllowExpensiveQueries(context);\n         if (value instanceof InetAddress) {\n-            return InetAddressPoint.newExactQuery(name(), (InetAddress) value);\n+            return inetAddressQuery((InetAddress) value, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjIzMQ=="}, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODE2MQ==", "bodyText": "I'm ok pushing it as part of this because this is ready.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488818161", "createdAt": "2020-09-15T16:55:16Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptIpMappedFieldType.java", "diffHunk": "@@ -119,14 +109,18 @@ public Query rangeQuery(\n     public Query termQuery(Object value, QueryShardContext context) {\n         checkAllowExpensiveQueries(context);\n         if (value instanceof InetAddress) {\n-            return InetAddressPoint.newExactQuery(name(), (InetAddress) value);\n+            return inetAddressQuery((InetAddress) value, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjIzMQ=="}, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDI3Mjk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowOTowMlrOHMrLkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowMToyNlrOHSLVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjQzNQ==", "bodyText": "I'd like to leave this for later.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r483052435", "createdAt": "2020-09-03T15:09:02Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -127,32 +117,37 @@ public Query rangeQuery(\n     }\n \n     @Override\n-    public Query regexpQuery(String value, int flags, int maxDeterminizedStates, RewriteMethod method, QueryShardContext context) {\n+    public Query regexpQuery(\n+        String value,\n+        int syntaxFlags,\n+        int matchFlags,\n+        int maxDeterminizedStates,\n+        RewriteMethod method,\n+        QueryShardContext context\n+    ) {\n         checkAllowExpensiveQueries(context);\n-        return new StringScriptFieldRegexpQuery(script, leafFactory(context.lookup()), name(), value, flags, maxDeterminizedStates);\n+        if (matchFlags != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3NTE3OA==", "bodyText": "I am no longer sure what is left to do here. Do we need an issue for it? Didn't you push the regex changes separately?", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488475178", "createdAt": "2020-09-15T08:15:58Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -127,32 +117,37 @@ public Query rangeQuery(\n     }\n \n     @Override\n-    public Query regexpQuery(String value, int flags, int maxDeterminizedStates, RewriteMethod method, QueryShardContext context) {\n+    public Query regexpQuery(\n+        String value,\n+        int syntaxFlags,\n+        int matchFlags,\n+        int maxDeterminizedStates,\n+        RewriteMethod method,\n+        QueryShardContext context\n+    ) {\n         checkAllowExpensiveQueries(context);\n-        return new StringScriptFieldRegexpQuery(script, leafFactory(context.lookup()), name(), value, flags, maxDeterminizedStates);\n+        if (matchFlags != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjQzNQ=="}, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODY0OQ==", "bodyText": "@markharwood is working on a change that'll take the matchFlags into account.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488818649", "createdAt": "2020-09-15T16:56:04Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -127,32 +117,37 @@ public Query rangeQuery(\n     }\n \n     @Override\n-    public Query regexpQuery(String value, int flags, int maxDeterminizedStates, RewriteMethod method, QueryShardContext context) {\n+    public Query regexpQuery(\n+        String value,\n+        int syntaxFlags,\n+        int matchFlags,\n+        int maxDeterminizedStates,\n+        RewriteMethod method,\n+        QueryShardContext context\n+    ) {\n         checkAllowExpensiveQueries(context);\n-        return new StringScriptFieldRegexpQuery(script, leafFactory(context.lookup()), name(), value, flags, maxDeterminizedStates);\n+        if (matchFlags != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjQzNQ=="}, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMTg2Nw==", "bodyText": "I'm not sure why this isn't a noop - I thought I pushed this exact change separately.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488821867", "createdAt": "2020-09-15T17:01:01Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -127,32 +117,37 @@ public Query rangeQuery(\n     }\n \n     @Override\n-    public Query regexpQuery(String value, int flags, int maxDeterminizedStates, RewriteMethod method, QueryShardContext context) {\n+    public Query regexpQuery(\n+        String value,\n+        int syntaxFlags,\n+        int matchFlags,\n+        int maxDeterminizedStates,\n+        RewriteMethod method,\n+        QueryShardContext context\n+    ) {\n         checkAllowExpensiveQueries(context);\n-        return new StringScriptFieldRegexpQuery(script, leafFactory(context.lookup()), name(), value, flags, maxDeterminizedStates);\n+        if (matchFlags != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjQzNQ=="}, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMjEzNA==", "bodyText": "Ah, not it is a noop.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488822134", "createdAt": "2020-09-15T17:01:26Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptKeywordMappedFieldType.java", "diffHunk": "@@ -127,32 +117,37 @@ public Query rangeQuery(\n     }\n \n     @Override\n-    public Query regexpQuery(String value, int flags, int maxDeterminizedStates, RewriteMethod method, QueryShardContext context) {\n+    public Query regexpQuery(\n+        String value,\n+        int syntaxFlags,\n+        int matchFlags,\n+        int maxDeterminizedStates,\n+        RewriteMethod method,\n+        QueryShardContext context\n+    ) {\n         checkAllowExpensiveQueries(context);\n-        return new StringScriptFieldRegexpQuery(script, leafFactory(context.lookup()), name(), value, flags, maxDeterminizedStates);\n+        if (matchFlags != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MjQzNQ=="}, "originalCommit": {"oid": "c39360adba1bf94fa9aaec438f93ad91b23b1abd"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODE1MjAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo1ODo0NVrOHPORbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxOToyM1rOHQGINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcyNDUyNw==", "bodyText": "I've seen this popup in this and some other PR, can we merge this fix separately?", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r485724527", "createdAt": "2020-09-09T15:58:45Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -102,38 +133,47 @@ public Query fuzzyQuery(\n         throw new IllegalArgumentException(unsupported(\"fuzzy\", \"keyword and text\"));\n     }\n \n+    @Override\n     public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n         throw new IllegalArgumentException(unsupported(\"prefix\", \"keyword, text and wildcard\"));\n     }\n \n+    @Override\n     public Query wildcardQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n         throw new IllegalArgumentException(unsupported(\"wildcard\", \"keyword, text and wildcard\"));\n     }\n \n+    @Override\n     public Query regexpQuery(\n         String value,\n-        int flags,\n+        int syntaxFlags,\n+        int matchFlags,\n         int maxDeterminizedStates,\n-        MultiTermQuery.RewriteMethod method,\n+        RewriteMethod method,\n         QueryShardContext context\n     ) {\n         throw new IllegalArgumentException(unsupported(\"regexp\", \"keyword and text\"));\n     }\n \n+    @Override\n     public abstract Query existsQuery(QueryShardContext context);\n \n+    @Override\n     public Query phraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {\n         throw new IllegalArgumentException(unsupported(\"phrase\", \"text\"));\n     }\n \n+    @Override\n     public Query multiPhraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {\n         throw new IllegalArgumentException(unsupported(\"phrase\", \"text\"));\n     }\n \n+    @Override\n     public Query phrasePrefixQuery(TokenStream stream, int slop, int maxExpansions) throws IOException {\n         throw new IllegalArgumentException(unsupported(\"phrase prefix\", \"text\"));\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0716b27f5ee3dc8572f0d34ca5092c9a93b45f70"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzOTY3MQ==", "bodyText": "I've pushed a fix for this to master and 7.x. I'll merge that into this branch now.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r486639671", "createdAt": "2020-09-10T21:19:23Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -102,38 +133,47 @@ public Query fuzzyQuery(\n         throw new IllegalArgumentException(unsupported(\"fuzzy\", \"keyword and text\"));\n     }\n \n+    @Override\n     public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n         throw new IllegalArgumentException(unsupported(\"prefix\", \"keyword, text and wildcard\"));\n     }\n \n+    @Override\n     public Query wildcardQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {\n         throw new IllegalArgumentException(unsupported(\"wildcard\", \"keyword, text and wildcard\"));\n     }\n \n+    @Override\n     public Query regexpQuery(\n         String value,\n-        int flags,\n+        int syntaxFlags,\n+        int matchFlags,\n         int maxDeterminizedStates,\n-        MultiTermQuery.RewriteMethod method,\n+        RewriteMethod method,\n         QueryShardContext context\n     ) {\n         throw new IllegalArgumentException(unsupported(\"regexp\", \"keyword and text\"));\n     }\n \n+    @Override\n     public abstract Query existsQuery(QueryShardContext context);\n \n+    @Override\n     public Query phraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {\n         throw new IllegalArgumentException(unsupported(\"phrase\", \"text\"));\n     }\n \n+    @Override\n     public Query multiPhraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {\n         throw new IllegalArgumentException(unsupported(\"phrase\", \"text\"));\n     }\n \n+    @Override\n     public Query phrasePrefixQuery(TokenStream stream, int slop, int maxExpansions) throws IOException {\n         throw new IllegalArgumentException(unsupported(\"phrase prefix\", \"text\"));\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcyNDUyNw=="}, "originalCommit": {"oid": "0716b27f5ee3dc8572f0d34ca5092c9a93b45f70"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIzMTY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/90_loops.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxNzo1MlrOHPYzwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoxNTowMVrOHR2Hmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NzE1Mg==", "bodyText": "do you mind adding one test here also for loops around queries? I know you wrote a lot of those above (thanks) but I would find this yaml suite more complete if we also covered loops for queries (I did not add specific tests in the first place because I knew they would fail)", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r485897152", "createdAt": "2020-09-09T20:17:52Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/90_loops.yml", "diffHunk": "@@ -183,6 +183,7 @@ setup:\n             loop:\n              terms:\n                field: over_max_depth", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0716b27f5ee3dc8572f0d34ca5092c9a93b45f70"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMTY4Mg==", "bodyText": "I've added some in the last commit I pushed.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r487901682", "createdAt": "2020-09-14T13:14:02Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/90_loops.yml", "diffHunk": "@@ -183,6 +183,7 @@ setup:\n             loop:\n              terms:\n                field: over_max_depth", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NzE1Mg=="}, "originalCommit": {"oid": "0716b27f5ee3dc8572f0d34ca5092c9a93b45f70"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3NDUyMw==", "bodyText": "thanks!", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488474523", "createdAt": "2020-09-15T08:15:01Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/90_loops.yml", "diffHunk": "@@ -183,6 +183,7 @@ setup:\n             loop:\n              terms:\n                field: over_max_depth", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NzE1Mg=="}, "originalCommit": {"oid": "0716b27f5ee3dc8572f0d34ca5092c9a93b45f70"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjYwMDIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxMTo1NlrOHRTE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoxMzowOVrOHR2DAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMDM3Mw==", "bodyText": "This is something I bumped into while working on this. Just had the old name left over.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r487900373", "createdAt": "2020-09-14T13:11:56Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -149,7 +179,7 @@ public SpanQuery spanPrefixQuery(String value, SpanMultiTermQueryWrapper.SpanRew\n     }\n \n     private String unsupported(String query, String supported) {\n-        String thisField = \"[\" + name() + \"] which is of type [script] with runtime_type [\" + runtimeType() + \"]\";\n+        String thisField = \"[\" + name() + \"] which is of type [runtime] with runtime_type [\" + runtimeType() + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f780a42b36f5bf07e4a89722cbc28dfd2e15f588"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3MzM0NA==", "bodyText": "use the constant, then renaming is much easier.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r488473344", "createdAt": "2020-09-15T08:13:09Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptMappedFieldType.java", "diffHunk": "@@ -149,7 +179,7 @@ public SpanQuery spanPrefixQuery(String value, SpanMultiTermQueryWrapper.SpanRew\n     }\n \n     private String unsupported(String query, String supported) {\n-        String thisField = \"[\" + name() + \"] which is of type [script] with runtime_type [\" + runtimeType() + \"]\";\n+        String thisField = \"[\" + name() + \"] which is of type [runtime] with runtime_type [\" + runtimeType() + \"]\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMDM3Mw=="}, "originalCommit": {"oid": "f780a42b36f5bf07e4a89722cbc28dfd2e15f588"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjYwMzUyOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractNonTextScriptMappedFieldTypeTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxMjo0OVrOHRTG9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxMjo0OVrOHRTG9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMDkxOQ==", "bodyText": "This is the other half of the \"old name\" bug I fixed way above.", "url": "https://github.com/elastic/elasticsearch/pull/61927#discussion_r487900919", "createdAt": "2020-09-14T13:12:49Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractNonTextScriptMappedFieldTypeTestCase.java", "diffHunk": "@@ -43,7 +43,7 @@ private void assertQueryOnlyOnTextAndKeyword(String queryName, ThrowingRunnable\n             equalTo(\n                 \"Can only use \"\n                     + queryName\n-                    + \" queries on keyword and text fields - not on [test] which is of type [script] with runtime_type [\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f780a42b36f5bf07e4a89722cbc28dfd2e15f588"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1710, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}