{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTkyMDAz", "number": 63121, "title": "EQL: Introduce case-insensitive equality", "bodyText": "Introduce : and !: operator for doing case insensitive string\ncomparisons. When dealing with non-string, the operator gets optimized\nto regular equals/not equals (== and !=) so that it can be combined\nwith other operators (such as >).\nRelates #62941", "createdAt": "2020-10-01T11:41:52Z", "url": "https://github.com/elastic/elasticsearch/pull/63121", "merged": true, "mergeCommit": {"oid": "201e577e65f26a9b958a6197fe6c7268da39de29"}, "closed": true, "closedAt": "2020-10-01T21:20:00Z", "author": {"login": "costin"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOP9wGAH2gAyNDk2MTkyMDAzOjA1N2ViZDdkNzk0ZGY1NDk0NDllZDVlYzcyMzE3ODAzOTNmNjU4OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOXbv5AH2gAyNDk2MTkyMDAzOmUwYjFhYjcxNmNiYTYxNGM3ZTUxMmJmMjQ5NzdkM2E2NWY3OTNlMzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "057ebd7d794df549449ed5ec7231780393f6588b", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/057ebd7d794df549449ed5ec7231780393f6588b", "committedDate": "2020-10-01T11:48:12Z", "message": "EQL: Introduce case-sensitive equality\n\nIntroduce : and !: operator for doing case insensitive string\ncomparisons. When dealing with non-string, the operator gets optimized\nto usual equality checks so that it can be combined with other\noperators.\n\nRelates #62941"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20171d9d9d156aaa741cb14fdd609f9c785f39a0", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/20171d9d9d156aaa741cb14fdd609f9c785f39a0", "committedDate": "2020-10-01T11:38:56Z", "message": "EQL: Introduce case-sensitive equality\n\nIntroduce : and !: operator for doing case insensitive string\ncomparisons. When dealing with non-string, the operator gets optimized\nto usual equality checks so that it can be combined with other\noperators.\n\nRelates #62941"}, "afterCommit": {"oid": "057ebd7d794df549449ed5ec7231780393f6588b", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/057ebd7d794df549449ed5ec7231780393f6588b", "committedDate": "2020-10-01T11:48:12Z", "message": "EQL: Introduce case-sensitive equality\n\nIntroduce : and !: operator for doing case insensitive string\ncomparisons. When dealing with non-string, the operator gets optimized\nto usual equality checks so that it can be combined with other\noperators.\n\nRelates #62941"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/b17b485242d5bc5c6ca5b98f505c083baaa7b0ca", "committedDate": "2020-10-01T12:06:13Z", "message": "Preserve the equals null semantics in :\nAdd test for wildcard being applied on literals too"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzgzODUx", "url": "https://github.com/elastic/elasticsearch/pull/63121#pullrequestreview-500383851", "createdAt": "2020-10-01T14:06:12Z", "commit": {"oid": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDowNjoxMlrOHbMEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDowNjoxMlrOHbMEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3MTM3Mw==", "bodyText": "Does it make sense to test String against numeric?", "url": "https://github.com/elastic/elasticsearch/pull/63121#discussion_r498271373", "createdAt": "2020-10-01T14:06:12Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/predicate/operator/comparison/InsensitiveBinaryComparisonProcessorTests.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.predicate.operator.comparison;\n+\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.io.stream.Writeable.Reader;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+import org.elasticsearch.xpack.ql.TestUtils;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.ConstantProcessor;\n+import org.elasticsearch.xpack.ql.expression.processor.Processors;\n+\n+import static org.elasticsearch.xpack.eql.EqlTestUtils.seq;\n+import static org.elasticsearch.xpack.eql.EqlTestUtils.sneq;\n+import static org.elasticsearch.xpack.ql.tree.Source.EMPTY;\n+\n+public class InsensitiveBinaryComparisonProcessorTests extends AbstractWireSerializingTestCase<InsensitiveBinaryComparisonProcessor> {\n+    public static InsensitiveBinaryComparisonProcessor randomProcessor() {\n+        return new InsensitiveBinaryComparisonProcessor(\n+            new ConstantProcessor(randomLong()),\n+            new ConstantProcessor(randomLong()),\n+            randomFrom(InsensitiveBinaryComparisonProcessor.InsensitiveBinaryComparisonOperation.values()));\n+    }\n+\n+    @Override\n+    protected InsensitiveBinaryComparisonProcessor createTestInstance() {\n+        return randomProcessor();\n+    }\n+\n+    @Override\n+    protected Reader<InsensitiveBinaryComparisonProcessor> instanceReader() {\n+        return InsensitiveBinaryComparisonProcessor::new;\n+    }\n+\n+    @Override\n+    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n+        return new NamedWriteableRegistry(Processors.getNamedWriteables());\n+    }\n+\n+    public void testStringEq() {\n+        assertEquals(true, p(seq(l(\"a\"), l(\"a\"))));\n+        assertEquals(true, p(seq(l(\"A\"), l(\"a\"))));\n+        assertEquals(true, p(seq(l(\"aBcD\"), l(\"AbCd\"))));\n+        assertEquals(true, p(seq(l(\"abc\"), l(\"abc\"))));\n+\n+        assertEquals(false, p(seq(l(\"abc\"), l(\"cba\"))));\n+    }\n+\n+    public void testRegularEquals() {\n+        assertEquals(true, p(seq(l(12), l(12))));\n+        assertEquals(true, p(seq(l(2f), l(2f))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDgyNTI0", "url": "https://github.com/elastic/elasticsearch/pull/63121#pullrequestreview-500482524", "createdAt": "2020-10-01T15:43:37Z", "commit": {"oid": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo0MzozN1rOHbQhpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo0NDoyOVrOHbQkEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDM1OQ==", "bodyText": "Only if you make any other changes to this PR, I think this method should be placed after doTranslate.", "url": "https://github.com/elastic/elasticsearch/pull/63121#discussion_r498344359", "createdAt": "2020-10-01T15:43:37Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -64,6 +72,50 @@ public static Query toQuery(Expression e, TranslatorHandler handler) {\n         throw new QlIllegalArgumentException(\"Don't know how to translate {} {}\", e.nodeName(), e);\n     }\n \n+    public static class InsensitiveBinaryComparisons extends ExpressionTranslator<InsensitiveBinaryComparison> {\n+\n+        @Override\n+        protected Query asQuery(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            return doTranslate(bc, handler);\n+        }\n+\n+        public static void checkInsensitiveComparison(InsensitiveBinaryComparison bc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDk3Ng==", "bodyText": "Query query = new TermQuery..... (meaning, these two lines should be placed on a single one instead.", "url": "https://github.com/elastic/elasticsearch/pull/63121#discussion_r498344976", "createdAt": "2020-10-01T15:44:29Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -64,6 +72,50 @@ public static Query toQuery(Expression e, TranslatorHandler handler) {\n         throw new QlIllegalArgumentException(\"Don't know how to translate {} {}\", e.nodeName(), e);\n     }\n \n+    public static class InsensitiveBinaryComparisons extends ExpressionTranslator<InsensitiveBinaryComparison> {\n+\n+        @Override\n+        protected Query asQuery(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            return doTranslate(bc, handler);\n+        }\n+\n+        public static void checkInsensitiveComparison(InsensitiveBinaryComparison bc) {\n+            Check.isTrue(bc.right().foldable(),\n+                \"Line {}:{}: Comparisons against fields are not (currently) supported; offender [{}] in [{}]\",\n+                bc.right().sourceLocation().getLineNumber(), bc.right().sourceLocation().getColumnNumber(),\n+                Expressions.name(bc.right()), bc.symbol());\n+        }\n+\n+        public static Query doTranslate(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            checkInsensitiveComparison(bc);\n+            return handler.wrapFunctionQuery(bc, bc.left(), translate(bc, handler));\n+        }\n+\n+        private static Query translate(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            Source source = bc.source();\n+            String name = handler.nameOf(bc.left());\n+            Object value = valueOf(bc.right());\n+\n+            if (bc instanceof InsensitiveEquals || bc instanceof InsensitiveNotEquals) {\n+                if (bc.left() instanceof FieldAttribute) {\n+                    // equality should always be against an exact match\n+                    // (which is important for strings)\n+                    name = ((FieldAttribute) bc.left()).exactAttribute().name();\n+                }\n+                Query query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b3af791d003015f218dd28c1a878c1a4af0438", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7b3af791d003015f218dd28c1a878c1a4af0438", "committedDate": "2020-10-01T17:03:11Z", "message": "Remove !:\nRestrict : usage to strings only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7320428cf2b88cc1bd77b068a392679031ef986a", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/7320428cf2b88cc1bd77b068a392679031ef986a", "committedDate": "2020-10-01T17:04:21Z", "message": "Merge branch 'master' into fix/62941"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e1154230a7339fc6c7c40e2ad7f735073b8f49d", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/7e1154230a7339fc6c7c40e2ad7f735073b8f49d", "committedDate": "2020-10-01T17:56:50Z", "message": "Restrict : operator only to strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0b1ab716cba614c7e512bf24977d3a65f793e38", "author": {"user": {"login": "costin", "name": "Costin Leau"}}, "url": "https://github.com/elastic/elasticsearch/commit/e0b1ab716cba614c7e512bf24977d3a65f793e38", "committedDate": "2020-10-01T20:30:18Z", "message": "Address feedback\nAdd more tests + minor formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4456, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}