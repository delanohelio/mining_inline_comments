{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzY1MDYx", "number": 55544, "title": "Change default hashing algorithm for FIPS 140", "bodyText": "Currently we disallow(via a startup check) any algorithm families\nother than PBKDF2 when we expect Elasticsearch to run in a JVM in\nFIPS 140 approved mode. However we do not change the default\nhashing algorithm, which remains BCRYPT and that means that the\nuser needs to explicitly set the password hashing algorithm to\nsomething compliant.\nWe know though, via the use of fips_mode.enabled, whether we\nexpect to run on a FIPS 140 JVM and we can change the default\nhashing algorithm to one from the PBKDF family in that case.\nThis commit changes our default behavior and sets the password\nhashing algorithm to PBKDF2 with a cost factor(no of iters)of 10000\nwhen fips_mode.enabled is set to true.", "createdAt": "2020-04-21T16:25:51Z", "url": "https://github.com/elastic/elasticsearch/pull/55544", "merged": true, "mergeCommit": {"oid": "ca24864f367152f61aa362bec2a732effc70d208"}, "closed": true, "closedAt": "2020-04-22T18:31:12Z", "author": {"login": "jkakavas"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ2GF5gH2gAyNDA2NzY1MDYxOjZmZWNmYjU2NDcyNjJlNjUyMjlmNmIyODY5N2JiYzI4NTY2YTVhMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaFKDQgH2gAyNDA2NzY1MDYxOmU0YTdmZTM4ODQxNWZkYjg0MGFhZWMwN2VmOTZhOWMwNzJkZWJlZDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6fecfb5647262e65229f6b28697bbc28566a5a0e", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/6fecfb5647262e65229f6b28697bbc28566a5a0e", "committedDate": "2020-04-21T16:15:43Z", "message": "Change default hashing algorithm for FIPS 140\n\nCurrently we disallow(via a startup check) any algorithm families\nother than PBKDF2 when we expect Elasticsearch to run in a JVM in\nFIPS 140 approved mode. However we do not change the default\nhashing algorithm, which remains BCRYPT and that means that the\nuser needs to explicitly set the password hashing algorithm to\nsomething compliant.\nWe know though, via the use of fips_mode.enabled, whether we\nexpect to run on a FIPS 140 JVM and we can change the default\nhashing algorithm to one from the PBKDF family in that case.\n\nThis commit changes our default behavior and sets the password\nhashing algorithm to PBKDF2 with a cost factor(no of iters)of 10000\nwhen `fips_mode.enabled` is set to true."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be3c6eb2aaab7707d930328e690c82b95e94a20", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/9be3c6eb2aaab7707d930328e690c82b95e94a20", "committedDate": "2020-04-21T16:36:40Z", "message": "unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/db98a546850b6ef79e8fa10416914e5b35e122b3", "committedDate": "2020-04-21T17:58:53Z", "message": "Merge branch 'master' into default-hashing-algo-fips"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODM1Mjgw", "url": "https://github.com/elastic/elasticsearch/pull/55544#pullrequestreview-397835280", "createdAt": "2020-04-22T04:29:07Z", "commit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDoyOTowN1rOGJi0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDo0MzowMlrOGJjF2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDg3MA==", "bodyText": "Why do we check both existence and actual value here? This is necessary when we want check something like \"security is explicitly enabled, not implicilty enabled\". Is this a similar situation here?", "url": "https://github.com/elastic/elasticsearch/pull/55544#discussion_r412660870", "createdAt": "2020-04-22T04:29:07Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "diffHunk": "@@ -170,20 +170,29 @@ private XPackSettings() {\n      * Do not allow insecure hashing algorithms to be used for password hashing\n      */\n     public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(\n-        \"xpack.security.authc.password_hashing.algorithm\", \"bcrypt\", Function.identity(), v -> {\n-        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n-            throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n-                Hasher.getAvailableAlgoStoredHash().toString());\n-        } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n-            try {\n-                SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");\n-            } catch (NoSuchAlgorithmException e) {\n-                throw new IllegalArgumentException(\n-                    \"Support for PBKDF2WithHMACSHA512 must be available in order to use any of the \" +\n-                        \"PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.\", e);\n+        new Setting.SimpleKey(\"xpack.security.authc.password_hashing.algorithm\"),\n+        (s) -> {\n+            if (XPackSettings.FIPS_MODE_ENABLED.exists(s) && XPackSettings.FIPS_MODE_ENABLED.get(s)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2NTMwNw==", "bodyText": "Why is this check necessary? Is this our own requirement or imposed by JDK?", "url": "https://github.com/elastic/elasticsearch/pull/55544#discussion_r412665307", "createdAt": "2020-04-22T04:43:02Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java", "diffHunk": "@@ -170,20 +170,29 @@ private XPackSettings() {\n      * Do not allow insecure hashing algorithms to be used for password hashing\n      */\n     public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(\n-        \"xpack.security.authc.password_hashing.algorithm\", \"bcrypt\", Function.identity(), v -> {\n-        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n-            throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n-                Hasher.getAvailableAlgoStoredHash().toString());\n-        } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n-            try {\n-                SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");\n-            } catch (NoSuchAlgorithmException e) {\n-                throw new IllegalArgumentException(\n-                    \"Support for PBKDF2WithHMACSHA512 must be available in order to use any of the \" +\n-                        \"PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.\", e);\n+        new Setting.SimpleKey(\"xpack.security.authc.password_hashing.algorithm\"),\n+        (s) -> {\n+            if (XPackSettings.FIPS_MODE_ENABLED.exists(s) && XPackSettings.FIPS_MODE_ENABLED.get(s)) {\n+                return \"PBKDF2\";\n+            } else {\n+                return \"BCRYPT\";\n             }\n-        }\n-    }, Setting.Property.NodeScope);\n+        },\n+        Function.identity(),\n+        v -> {\n+            if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {\n+                throw new IllegalArgumentException(\"Invalid algorithm: \" + v + \". Valid values for password hashing are \" +\n+                    Hasher.getAvailableAlgoStoredHash().toString());\n+            } else if (v.regionMatches(true, 0, \"pbkdf2\", 0, \"pbkdf2\".length())) {\n+                try {\n+                    SecretKeyFactory.getInstance(\"PBKDF2withHMACSHA512\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODU5NDM4", "url": "https://github.com/elastic/elasticsearch/pull/55544#pullrequestreview-397859438", "createdAt": "2020-04-22T05:45:46Z", "commit": {"oid": "db98a546850b6ef79e8fa10416914e5b35e122b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f1c0bf615510fd22a349a046d0edbd726c744e8", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/3f1c0bf615510fd22a349a046d0edbd726c744e8", "committedDate": "2020-04-22T09:05:11Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4a7fe388415fdb840aaec07ef96a9c072debed7", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e4a7fe388415fdb840aaec07ef96a9c072debed7", "committedDate": "2020-04-22T09:48:37Z", "message": "Merge remote-tracking branch 'origin/master' into default-hashing-algo-fips"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 634, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}