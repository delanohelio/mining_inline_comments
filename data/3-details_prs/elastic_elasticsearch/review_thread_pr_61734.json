{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MzQ3NzQx", "number": 61734, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0Mjo1MlrOEfOc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1ODoyNFrOEhFJUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTc4MTEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0Mjo1M1rOHLXTig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1MTozMVrOHNQqrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY3ODIxOA==", "bodyText": "Is there a reason you opted to update the failure handler in the authentication service rather than update the headers inside the failure handler?\nI was expecting something more like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        getLicenseState().addListener(() -> {\n          \n          \n            \n                            authcService.get().setFailureHeandler(new DefaultAuthenticationFailureHandler(headersSupplier.get()));\n          \n          \n            \n                        });\n          \n          \n            \n                        getLicenseState().addListener(() -> {\n          \n          \n            \n                            failureHeandler.setHeaders(headersSupplier.get());\n          \n          \n            \n                        });", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r481678218", "createdAt": "2020-09-02T04:42:53Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "diffHunk": "@@ -542,32 +542,39 @@ private AuthenticationFailureHandler createAuthenticationFailureHandler(final Re\n         }\n         if (failureHandler == null) {\n             logger.debug(\"Using default authentication failure handler\");\n-            final Map<String, List<String>> defaultFailureResponseHeaders = new HashMap<>();\n-            realms.asList().stream().forEach((realm) -> {\n-                Map<String, List<String>> realmFailureHeaders = realm.getAuthenticationFailureHeaders();\n-                realmFailureHeaders.entrySet().stream().forEach((e) -> {\n-                    String key = e.getKey();\n-                    e.getValue().stream()\n-                            .filter(v -> defaultFailureResponseHeaders.computeIfAbsent(key, x -> new ArrayList<>()).contains(v) == false)\n-                            .forEach(v -> defaultFailureResponseHeaders.get(key).add(v));\n+            Supplier<Map<String, List<String>>> headersSupplier = () -> {\n+                final Map<String, List<String>> defaultFailureResponseHeaders = new HashMap<>();\n+                realms.asList().stream().forEach((realm) -> {\n+                    Map<String, List<String>> realmFailureHeaders = realm.getAuthenticationFailureHeaders();\n+                    realmFailureHeaders.entrySet().stream().forEach((e) -> {\n+                        String key = e.getKey();\n+                        e.getValue().stream()\n+                                .filter(v -> defaultFailureResponseHeaders.computeIfAbsent(key, x -> new ArrayList<>()).contains(v)\n+                                    == false)\n+                                .forEach(v -> defaultFailureResponseHeaders.get(key).add(v));\n+                    });\n                 });\n-            });\n \n-            if (TokenService.isTokenServiceEnabled(settings)) {\n-                String bearerScheme = \"Bearer realm=\\\"\" + XPackField.SECURITY + \"\\\"\";\n-                if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n-                        .contains(bearerScheme) == false) {\n-                    defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(bearerScheme);\n+                if (TokenService.isTokenServiceEnabled(settings)) {\n+                    String bearerScheme = \"Bearer realm=\\\"\" + XPackField.SECURITY + \"\\\"\";\n+                    if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n+                            .contains(bearerScheme) == false) {\n+                        defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(bearerScheme);\n+                    }\n                 }\n-            }\n-            if (API_KEY_SERVICE_ENABLED_SETTING.get(settings)) {\n-                final String apiKeyScheme = \"ApiKey\";\n-                if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n-                    .contains(apiKeyScheme) == false) {\n-                    defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(apiKeyScheme);\n+                if (API_KEY_SERVICE_ENABLED_SETTING.get(settings)) {\n+                    final String apiKeyScheme = \"ApiKey\";\n+                    if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n+                        .contains(apiKeyScheme) == false) {\n+                        defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(apiKeyScheme);\n+                    }\n                 }\n-            }\n-            failureHandler = new DefaultAuthenticationFailureHandler(defaultFailureResponseHeaders);\n+                return defaultFailureResponseHeaders;\n+            };\n+            failureHandler = new DefaultAuthenticationFailureHandler(headersSupplier.get());\n+            getLicenseState().addListener(() -> {\n+                authcService.get().setFailureHeandler(new DefaultAuthenticationFailureHandler(headersSupplier.get()));\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fdec7000c67a07a7dfd607b546bd766c480047e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2NjYwNQ==", "bodyText": "Just updated and added test", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r483666605", "createdAt": "2020-09-04T14:51:31Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "diffHunk": "@@ -542,32 +542,39 @@ private AuthenticationFailureHandler createAuthenticationFailureHandler(final Re\n         }\n         if (failureHandler == null) {\n             logger.debug(\"Using default authentication failure handler\");\n-            final Map<String, List<String>> defaultFailureResponseHeaders = new HashMap<>();\n-            realms.asList().stream().forEach((realm) -> {\n-                Map<String, List<String>> realmFailureHeaders = realm.getAuthenticationFailureHeaders();\n-                realmFailureHeaders.entrySet().stream().forEach((e) -> {\n-                    String key = e.getKey();\n-                    e.getValue().stream()\n-                            .filter(v -> defaultFailureResponseHeaders.computeIfAbsent(key, x -> new ArrayList<>()).contains(v) == false)\n-                            .forEach(v -> defaultFailureResponseHeaders.get(key).add(v));\n+            Supplier<Map<String, List<String>>> headersSupplier = () -> {\n+                final Map<String, List<String>> defaultFailureResponseHeaders = new HashMap<>();\n+                realms.asList().stream().forEach((realm) -> {\n+                    Map<String, List<String>> realmFailureHeaders = realm.getAuthenticationFailureHeaders();\n+                    realmFailureHeaders.entrySet().stream().forEach((e) -> {\n+                        String key = e.getKey();\n+                        e.getValue().stream()\n+                                .filter(v -> defaultFailureResponseHeaders.computeIfAbsent(key, x -> new ArrayList<>()).contains(v)\n+                                    == false)\n+                                .forEach(v -> defaultFailureResponseHeaders.get(key).add(v));\n+                    });\n                 });\n-            });\n \n-            if (TokenService.isTokenServiceEnabled(settings)) {\n-                String bearerScheme = \"Bearer realm=\\\"\" + XPackField.SECURITY + \"\\\"\";\n-                if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n-                        .contains(bearerScheme) == false) {\n-                    defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(bearerScheme);\n+                if (TokenService.isTokenServiceEnabled(settings)) {\n+                    String bearerScheme = \"Bearer realm=\\\"\" + XPackField.SECURITY + \"\\\"\";\n+                    if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n+                            .contains(bearerScheme) == false) {\n+                        defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(bearerScheme);\n+                    }\n                 }\n-            }\n-            if (API_KEY_SERVICE_ENABLED_SETTING.get(settings)) {\n-                final String apiKeyScheme = \"ApiKey\";\n-                if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n-                    .contains(apiKeyScheme) == false) {\n-                    defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(apiKeyScheme);\n+                if (API_KEY_SERVICE_ENABLED_SETTING.get(settings)) {\n+                    final String apiKeyScheme = \"ApiKey\";\n+                    if (defaultFailureResponseHeaders.computeIfAbsent(\"WWW-Authenticate\", x -> new ArrayList<>())\n+                        .contains(apiKeyScheme) == false) {\n+                        defaultFailureResponseHeaders.get(\"WWW-Authenticate\").add(apiKeyScheme);\n+                    }\n                 }\n-            }\n-            failureHandler = new DefaultAuthenticationFailureHandler(defaultFailureResponseHeaders);\n+                return defaultFailureResponseHeaders;\n+            };\n+            failureHandler = new DefaultAuthenticationFailureHandler(headersSupplier.get());\n+            getLicenseState().addListener(() -> {\n+                authcService.get().setFailureHeandler(new DefaultAuthenticationFailureHandler(headersSupplier.get()));\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY3ODIxOA=="}, "originalCommit": {"oid": "1fdec7000c67a07a7dfd607b546bd766c480047e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTc4MzIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0MzoxNlrOHLXU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0MzoxNlrOHLXU2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY3ODU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setFailureHeandler(AuthenticationFailureHandler failureHandler){\n          \n          \n            \n                public void setFailureHandler(AuthenticationFailureHandler failureHandler) {", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r481678553", "createdAt": "2020-09-02T04:43:16Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -207,6 +208,10 @@ public void onSecurityIndexStateChange(SecurityIndexManager.State previousState,\n         }\n     }\n \n+    public void setFailureHeandler(AuthenticationFailureHandler failureHandler){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fdec7000c67a07a7dfd607b546bd766c480047e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIxODgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/AuthenticationFailureHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1MzowNlrOHOMnig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxNzozNFrOHOmxlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0ODg0Mg==", "bodyText": "I don't think we want to add this to the interface, because we actually only call it on the DefaultAuthenticationFailureHandler.\nInstead we need to rework the code Security.java so that the final handler is the correct type.", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r484648842", "createdAt": "2020-09-08T04:53:06Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/AuthenticationFailureHandler.java", "diffHunk": "@@ -106,4 +109,11 @@ ElasticsearchSecurityException failedAuthentication(TransportMessage message, Au\n      * @return ElasticsearchSecurityException with the appropriate headers and message\n      */\n     ElasticsearchSecurityException authenticationRequired(String action, ThreadContext context);\n+\n+    /**\n+     * This method is called when failureResponseHeaders need to be set (at startup) or updated (if license state changes)\n+     *\n+     * @param failureResponseHeaders the Map of failure response heaers to be set\n+     */\n+    void setHeaders(Map<String, List<String>> failureResponseHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NzM5Nw==", "bodyText": "Just changed", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r485077397", "createdAt": "2020-09-08T17:17:34Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/AuthenticationFailureHandler.java", "diffHunk": "@@ -106,4 +109,11 @@ ElasticsearchSecurityException failedAuthentication(TransportMessage message, Au\n      * @return ElasticsearchSecurityException with the appropriate headers and message\n      */\n     ElasticsearchSecurityException authenticationRequired(String action, ThreadContext context);\n+\n+    /**\n+     * This method is called when failureResponseHeaders need to be set (at startup) or updated (if license state changes)\n+     *\n+     * @param failureResponseHeaders the Map of failure response heaers to be set\n+     */\n+    void setHeaders(Map<String, List<String>> failureResponseHeaders);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0ODg0Mg=="}, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIyNTI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1Njo1MVrOHOMrIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxODoxOFrOHOmzBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTc2Mw==", "bodyText": "We need to verify the correct headers are set here. That is, that it includes a WWW-Authenticate: Basic realm=\"security\" charset=\"UTF-8\" header.", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r484649763", "createdAt": "2020-09-08T04:56:51Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "diffHunk": "@@ -462,4 +482,36 @@ public void testValidateForFipsNoErrorsForDefaultSettings() {\n         Security.validateForFips(settings);\n         // no exception thrown\n     }\n+\n+    public void testLicenseUpdateFailureHandlerUpdate() throws Exception {\n+        Settings settings = Settings.builder().\n+            put(\"xpack.security.authc.api_key.enabled\", \"true\").\n+            build();\n+        Collection<Object> components = createComponentsWithSecurityNotExplicitlyEnabled(settings);\n+        AuthenticationService service = findComponent(AuthenticationService.class, components);\n+        assertNotNull(service);\n+        RestRequest request = new FakeRestRequest();\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::logAndFail));\n+        assertTrue(completed.compareAndSet(true, false));\n+        threadContext.stashContext();\n+        licenseState.update(\n+            randomFrom(License.OperationMode.GOLD, License.OperationMode.ENTERPRISE, License.OperationMode.PLATINUM),\n+            true, null);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::VerifyMissingAuthenticationException));\n+        if(completed.get()){\n+            fail(\"authentication succeeded but it shouldn't\");\n+        }\n+    }\n+\n+    private void logAndFail(Exception e) {\n+        logger.error(\"unexpected exception\", e);\n+        fail(\"unexpected exception \" + e.getMessage());\n+    }\n+\n+    private void VerifyMissingAuthenticationException(Exception e) {\n+        assertThat(e.getMessage(), containsString(\"missing authentication credentials for REST request\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3Nzc2Nw==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r485077767", "createdAt": "2020-09-08T17:18:18Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "diffHunk": "@@ -462,4 +482,36 @@ public void testValidateForFipsNoErrorsForDefaultSettings() {\n         Security.validateForFips(settings);\n         // no exception thrown\n     }\n+\n+    public void testLicenseUpdateFailureHandlerUpdate() throws Exception {\n+        Settings settings = Settings.builder().\n+            put(\"xpack.security.authc.api_key.enabled\", \"true\").\n+            build();\n+        Collection<Object> components = createComponentsWithSecurityNotExplicitlyEnabled(settings);\n+        AuthenticationService service = findComponent(AuthenticationService.class, components);\n+        assertNotNull(service);\n+        RestRequest request = new FakeRestRequest();\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::logAndFail));\n+        assertTrue(completed.compareAndSet(true, false));\n+        threadContext.stashContext();\n+        licenseState.update(\n+            randomFrom(License.OperationMode.GOLD, License.OperationMode.ENTERPRISE, License.OperationMode.PLATINUM),\n+            true, null);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::VerifyMissingAuthenticationException));\n+        if(completed.get()){\n+            fail(\"authentication succeeded but it shouldn't\");\n+        }\n+    }\n+\n+    private void logAndFail(Exception e) {\n+        logger.error(\"unexpected exception\", e);\n+        fail(\"unexpected exception \" + e.getMessage());\n+    }\n+\n+    private void VerifyMissingAuthenticationException(Exception e) {\n+        assertThat(e.getMessage(), containsString(\"missing authentication credentials for REST request\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTc2Mw=="}, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIyNzEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1Nzo1N1rOHOMsLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1Nzo1N1rOHOMsLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MDAyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void VerifyMissingAuthenticationException(Exception e) {\n          \n          \n            \n                private void verifyMissingAuthenticationException(Exception e) {", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r484650029", "createdAt": "2020-09-08T04:57:57Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "diffHunk": "@@ -462,4 +482,36 @@ public void testValidateForFipsNoErrorsForDefaultSettings() {\n         Security.validateForFips(settings);\n         // no exception thrown\n     }\n+\n+    public void testLicenseUpdateFailureHandlerUpdate() throws Exception {\n+        Settings settings = Settings.builder().\n+            put(\"xpack.security.authc.api_key.enabled\", \"true\").\n+            build();\n+        Collection<Object> components = createComponentsWithSecurityNotExplicitlyEnabled(settings);\n+        AuthenticationService service = findComponent(AuthenticationService.class, components);\n+        assertNotNull(service);\n+        RestRequest request = new FakeRestRequest();\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::logAndFail));\n+        assertTrue(completed.compareAndSet(true, false));\n+        threadContext.stashContext();\n+        licenseState.update(\n+            randomFrom(License.OperationMode.GOLD, License.OperationMode.ENTERPRISE, License.OperationMode.PLATINUM),\n+            true, null);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::VerifyMissingAuthenticationException));\n+        if(completed.get()){\n+            fail(\"authentication succeeded but it shouldn't\");\n+        }\n+    }\n+\n+    private void logAndFail(Exception e) {\n+        logger.error(\"unexpected exception\", e);\n+        fail(\"unexpected exception \" + e.getMessage());\n+    }\n+\n+    private void VerifyMissingAuthenticationException(Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIyNzI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1ODowM1rOHOMsQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxNzo1OFrOHOmyYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MDA0OA==", "bodyText": "Our typical style is:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n          \n          \n            \n                                                                                }, this::logAndFail));\n          \n          \n            \n                    service.authenticate(request, ActionListener.wrap(result -> {\n          \n          \n            \n                        assertTrue(completed.compareAndSet(false, true));\n          \n          \n            \n                    }, this::logAndFail));", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r484650048", "createdAt": "2020-09-08T04:58:03Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "diffHunk": "@@ -462,4 +482,36 @@ public void testValidateForFipsNoErrorsForDefaultSettings() {\n         Security.validateForFips(settings);\n         // no exception thrown\n     }\n+\n+    public void testLicenseUpdateFailureHandlerUpdate() throws Exception {\n+        Settings settings = Settings.builder().\n+            put(\"xpack.security.authc.api_key.enabled\", \"true\").\n+            build();\n+        Collection<Object> components = createComponentsWithSecurityNotExplicitlyEnabled(settings);\n+        AuthenticationService service = findComponent(AuthenticationService.class, components);\n+        assertNotNull(service);\n+        RestRequest request = new FakeRestRequest();\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::logAndFail));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NzYwMA==", "bodyText": "Changed", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r485077600", "createdAt": "2020-09-08T17:17:58Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "diffHunk": "@@ -462,4 +482,36 @@ public void testValidateForFipsNoErrorsForDefaultSettings() {\n         Security.validateForFips(settings);\n         // no exception thrown\n     }\n+\n+    public void testLicenseUpdateFailureHandlerUpdate() throws Exception {\n+        Settings settings = Settings.builder().\n+            put(\"xpack.security.authc.api_key.enabled\", \"true\").\n+            build();\n+        Collection<Object> components = createComponentsWithSecurityNotExplicitlyEnabled(settings);\n+        AuthenticationService service = findComponent(AuthenticationService.class, components);\n+        assertNotNull(service);\n+        RestRequest request = new FakeRestRequest();\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::logAndFail));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MDA0OA=="}, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIyNzY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1ODoyNFrOHOMshQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxOTowNlrOHOm0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MDExNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n          \n          \n            \n                                                                                }, this::VerifyMissingAuthenticationException));\n          \n          \n            \n                    service.authenticate(request, ActionListener.wrap(result -> {\n          \n          \n            \n                        assertTrue(completed.compareAndSet(false, true));\n          \n          \n            \n                    }, this::VerifyMissingAuthenticationException));", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r484650117", "createdAt": "2020-09-08T04:58:24Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "diffHunk": "@@ -462,4 +482,36 @@ public void testValidateForFipsNoErrorsForDefaultSettings() {\n         Security.validateForFips(settings);\n         // no exception thrown\n     }\n+\n+    public void testLicenseUpdateFailureHandlerUpdate() throws Exception {\n+        Settings settings = Settings.builder().\n+            put(\"xpack.security.authc.api_key.enabled\", \"true\").\n+            build();\n+        Collection<Object> components = createComponentsWithSecurityNotExplicitlyEnabled(settings);\n+        AuthenticationService service = findComponent(AuthenticationService.class, components);\n+        assertNotNull(service);\n+        RestRequest request = new FakeRestRequest();\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::logAndFail));\n+        assertTrue(completed.compareAndSet(true, false));\n+        threadContext.stashContext();\n+        licenseState.update(\n+            randomFrom(License.OperationMode.GOLD, License.OperationMode.ENTERPRISE, License.OperationMode.PLATINUM),\n+            true, null);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::VerifyMissingAuthenticationException));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODE5Mw==", "bodyText": "Changed", "url": "https://github.com/elastic/elasticsearch/pull/61734#discussion_r485078193", "createdAt": "2020-09-08T17:19:06Z", "author": {"login": "BigPandaToo"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java", "diffHunk": "@@ -462,4 +482,36 @@ public void testValidateForFipsNoErrorsForDefaultSettings() {\n         Security.validateForFips(settings);\n         // no exception thrown\n     }\n+\n+    public void testLicenseUpdateFailureHandlerUpdate() throws Exception {\n+        Settings settings = Settings.builder().\n+            put(\"xpack.security.authc.api_key.enabled\", \"true\").\n+            build();\n+        Collection<Object> components = createComponentsWithSecurityNotExplicitlyEnabled(settings);\n+        AuthenticationService service = findComponent(AuthenticationService.class, components);\n+        assertNotNull(service);\n+        RestRequest request = new FakeRestRequest();\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::logAndFail));\n+        assertTrue(completed.compareAndSet(true, false));\n+        threadContext.stashContext();\n+        licenseState.update(\n+            randomFrom(License.OperationMode.GOLD, License.OperationMode.ENTERPRISE, License.OperationMode.PLATINUM),\n+            true, null);\n+        service.authenticate(request, ActionListener.wrap(result -> {assertTrue(completed.compareAndSet(false, true));\n+                                                                    }, this::VerifyMissingAuthenticationException));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MDExNw=="}, "originalCommit": {"oid": "f0d76164b1d9e4d0beb46156f37ef27dfe143ad1"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1877, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}