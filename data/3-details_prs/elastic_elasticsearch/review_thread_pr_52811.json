{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjE1OTY4", "number": 52811, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozNToyMlrODjW5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MTo0OFrODjXIvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDAxNzk4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/FeatureNotEnabledException.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozNToyMlrOFvHuuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNDo1NToyN1rOFyGZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDA0Mw==", "bodyText": "I wonder whether we should give Feature more attention to make it more formalized, because it seems to be an useful concept for other places as well. By formalization, I mean something like, have it in a separate class, place it in a shared package which is more accessible, name each feature more consistently (more on this below).\nIncluding Feature, we now have three different but related concepts: Feature, Setting, Plugin. Plugin seems to be the highest level, in that it provides one or multiple Features and Settings. I am not sure whether Feature has an 1-to-1 relationship with a Setting. If so, I feel the associated Setting should be reflected in this class and this could be useful for users to act accordingly.\nIf the relationship between Feature and Setting is more complex, e.g. a feature corresponds to multiple Settings working together, it may need to be more carefully defined and promoted to be a first level concept. I am a bit surprised that Feature is not already an existing concept since both Setting and Plugin sound too technical when talking to users, while Feature seem to be a more accessible term.\nI am aware that it is not something inherent to this PR so we don't need to solve it all with this PR. One possible actionable item is to move this class to a more common package for reuse by places other than security.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384954043", "createdAt": "2020-02-27T07:35:22Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/FeatureNotEnabledException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.rest.RestStatus;\n+\n+public class FeatureNotEnabledException extends ElasticsearchException {\n+\n+    public static final String DISABLED_FEATURE_METADATA = \"es.disabled.feature\";\n+\n+    /**\n+     * The features names here are constants that form part of our API contract.\n+     * Callers (e.g. Kibana) may be dependent on these strings. Do not change them without consideration of BWC.\n+     */\n+    public enum Feature {\n+        TOKEN_SERVICE(\"security_tokens\"),\n+        API_KEY_SERVICE(\"api_keys\");\n+\n+        private final String featureName;\n+\n+        Feature(String featureName) {\n+            this.featureName = featureName;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNDk5MQ==", "bodyText": "Yes, no, maybe...\nWe do have \"feature\" concepts throughout the codebase. The obvious example being isXyzzyAllowed() on XPackLicenseState. Those are, roughly speaking, features.\nI can imagine a world when we had strong model of \"Feature\" and the license checks where all isFeatureAllowed(Feature feature), and elsewhere isFeatureEnabled(Feature), but we don't and I don't think anyone wants to.\nThe reason I added an enum here is\n\nSo that the feature names were static & defined in a single place, so that clients could rely on the names being a well defined set (at least, per version).\nI could have solved that with constant Strings, but then the exception constructor would have been (String, String, Object ...) and there would be ambiguity about which String was the feature name and which was the message.\n\nI think there's something to your suggestion, but progress over perfection - to me, this is a straight forward solution to the problem at hand, and we can evolve it into something else in the future if we need.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r385504991", "createdAt": "2020-02-28T04:41:54Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/FeatureNotEnabledException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.rest.RestStatus;\n+\n+public class FeatureNotEnabledException extends ElasticsearchException {\n+\n+    public static final String DISABLED_FEATURE_METADATA = \"es.disabled.feature\";\n+\n+    /**\n+     * The features names here are constants that form part of our API contract.\n+     * Callers (e.g. Kibana) may be dependent on these strings. Do not change them without consideration of BWC.\n+     */\n+    public enum Feature {\n+        TOKEN_SERVICE(\"security_tokens\"),\n+        API_KEY_SERVICE(\"api_keys\");\n+\n+        private final String featureName;\n+\n+        Feature(String featureName) {\n+            this.featureName = featureName;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDA0Mw=="}, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MTU3NQ==", "bodyText": "Enum is good (at least for now). I agree that we don't wanna stall on something that is not in scope of the problem at hand. My actual question is whether we should move this file to a more common module, e.g. the xpack core module for dependency sake, since I can see it being useful for other xpack modules besides security (similar to how license related files are in core).", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r385641575", "createdAt": "2020-02-28T11:18:41Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/FeatureNotEnabledException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.rest.RestStatus;\n+\n+public class FeatureNotEnabledException extends ElasticsearchException {\n+\n+    public static final String DISABLED_FEATURE_METADATA = \"es.disabled.feature\";\n+\n+    /**\n+     * The features names here are constants that form part of our API contract.\n+     * Callers (e.g. Kibana) may be dependent on these strings. Do not change them without consideration of BWC.\n+     */\n+    public enum Feature {\n+        TOKEN_SERVICE(\"security_tokens\"),\n+        API_KEY_SERVICE(\"api_keys\");\n+\n+        private final String featureName;\n+\n+        Feature(String featureName) {\n+            this.featureName = featureName;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDA0Mw=="}, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3NTM0NQ==", "bodyText": "My personal view, is that it's a false sense of \"reuse\".\nAs it stands:\n\nwe don't know if this would be useful elsewhere. We can imagine places, but we have no plans to change them\nbecause of (1), we also don't know which enum values would make sense in the future\nwe do know that future uses of it would be constrained by not being able to change it significantly because they'd risk breaking clients.\n\nBased on the above, I understand the temptation to put it in core, but there's no clear value, and 1 definite limitation, so it seems like something that feels good for reuse purposes, but actually isn't.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r388075345", "createdAt": "2020-03-05T04:42:14Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/FeatureNotEnabledException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.rest.RestStatus;\n+\n+public class FeatureNotEnabledException extends ElasticsearchException {\n+\n+    public static final String DISABLED_FEATURE_METADATA = \"es.disabled.feature\";\n+\n+    /**\n+     * The features names here are constants that form part of our API contract.\n+     * Callers (e.g. Kibana) may be dependent on these strings. Do not change them without consideration of BWC.\n+     */\n+    public enum Feature {\n+        TOKEN_SERVICE(\"security_tokens\"),\n+        API_KEY_SERVICE(\"api_keys\");\n+\n+        private final String featureName;\n+\n+        Feature(String featureName) {\n+            this.featureName = featureName;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDA0Mw=="}, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3Nzg3MQ==", "bodyText": "I was thinking about using it in the \"role template validation\" if we chose to issue warning instead of error out. Since we have decided it's ok to error out, I currently have no other idea where it could be re-used. So the current form is ok with me.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r388077871", "createdAt": "2020-03-05T04:55:27Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/FeatureNotEnabledException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.rest.RestStatus;\n+\n+public class FeatureNotEnabledException extends ElasticsearchException {\n+\n+    public static final String DISABLED_FEATURE_METADATA = \"es.disabled.feature\";\n+\n+    /**\n+     * The features names here are constants that form part of our API contract.\n+     * Callers (e.g. Kibana) may be dependent on these strings. Do not change them without consideration of BWC.\n+     */\n+    public enum Feature {\n+        TOKEN_SERVICE(\"security_tokens\"),\n+        API_KEY_SERVICE(\"api_keys\");\n+\n+        private final String featureName;\n+\n+        Feature(String featureName) {\n+            this.featureName = featureName;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDA0Mw=="}, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDA1MjE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyServiceTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo0OTozOFrOFvIDJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToyNTowOFrOFvx3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTI2OQ==", "bodyText": "nit: Maybe replace \"api_keys\" string literal with API_KEY_SERVICE.getFeatureName()(this needs adding the getFeatureName method as well). I generaly prefer to have less string literals.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384959269", "createdAt": "2020-02-27T07:49:38Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyServiceTests.java", "diffHunk": "@@ -435,6 +439,18 @@ public void testGetRolesForApiKey() throws Exception {\n         }\n     }\n \n+    public void testApiKeyServiceDisabled() throws Exception {\n+        final Settings settings = Settings.builder().put(XPackSettings.API_KEY_SERVICE_ENABLED_SETTING.getKey(), false).build();\n+        final ApiKeyService service = createApiKeyService(settings);\n+\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n+            () -> service.getApiKeys(randomAlphaOfLength(6), randomAlphaOfLength(8), null, null, new PlainActionFuture<>()));\n+\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e, throwableWithMessage(\"api keys are not enabled\"));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"api_keys\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNTIxNw==", "bodyText": "I did this intentionally because the contract for the client is the string, not the enum.\nThat is, I want to test that this actually has \"api_keys\" as the feature description, because that is what Kibana needs to see.\nPerhaps I can add a comment to that effect?", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r385505217", "createdAt": "2020-02-28T04:43:12Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyServiceTests.java", "diffHunk": "@@ -435,6 +439,18 @@ public void testGetRolesForApiKey() throws Exception {\n         }\n     }\n \n+    public void testApiKeyServiceDisabled() throws Exception {\n+        final Settings settings = Settings.builder().put(XPackSettings.API_KEY_SERVICE_ENABLED_SETTING.getKey(), false).build();\n+        final ApiKeyService service = createApiKeyService(settings);\n+\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n+            () -> service.getApiKeys(randomAlphaOfLength(6), randomAlphaOfLength(8), null, null, new PlainActionFuture<>()));\n+\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e, throwableWithMessage(\"api keys are not enabled\"));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"api_keys\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTI2OQ=="}, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NDM2NA==", "bodyText": "That's a good point and an interesting one. I haven't thought about that. A comment could be useful. Otherwise, I could be the next guy who refactor the enum name and also change the test here to match the refactor without aware of breaking client expectation. Thanks", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r385644364", "createdAt": "2020-02-28T11:25:08Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyServiceTests.java", "diffHunk": "@@ -435,6 +439,18 @@ public void testGetRolesForApiKey() throws Exception {\n         }\n     }\n \n+    public void testApiKeyServiceDisabled() throws Exception {\n+        final Settings settings = Settings.builder().put(XPackSettings.API_KEY_SERVICE_ENABLED_SETTING.getKey(), false).build();\n+        final ApiKeyService service = createApiKeyService(settings);\n+\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n+            () -> service.getApiKeys(randomAlphaOfLength(6), randomAlphaOfLength(8), null, null, new PlainActionFuture<>()));\n+\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e, throwableWithMessage(\"api keys are not enabled\"));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"api_keys\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTI2OQ=="}, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDA1NDk4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MDozNVrOFvIEyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MDozNVrOFvIEyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTY4OA==", "bodyText": "Similar nitpick for \"security_tokens\" as above.", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384959688", "createdAt": "2020-02-27T07:50:35Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java", "diffHunk": "@@ -560,20 +564,21 @@ public void testTokenServiceDisabled() throws Exception {\n                 .put(XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey(), false)\n                 .build(),\n             Clock.systemUTC(), client, licenseState, securityContext, securityMainIndex, securityTokensIndex, clusterService);\n-        IllegalStateException e = expectThrows(IllegalStateException.class,\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n             () -> tokenService.createOAuth2Tokens(null, null, null, true, null));\n-        assertEquals(\"security tokens are not enabled\", e.getMessage());\n+        assertThat(e, throwableWithMessage(\"security tokens are not enabled\"));\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"security_tokens\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDA1ODIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MTo0OFrOFvIGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MTo0OFrOFvIGpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDE2NQ==", "bodyText": "Again same nitpick here as well for \"security_token\".", "url": "https://github.com/elastic/elasticsearch/pull/52811#discussion_r384960165", "createdAt": "2020-02-27T07:51:48Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java", "diffHunk": "@@ -560,20 +564,21 @@ public void testTokenServiceDisabled() throws Exception {\n                 .put(XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey(), false)\n                 .build(),\n             Clock.systemUTC(), client, licenseState, securityContext, securityMainIndex, securityTokensIndex, clusterService);\n-        IllegalStateException e = expectThrows(IllegalStateException.class,\n+        ElasticsearchException e = expectThrows(ElasticsearchException.class,\n             () -> tokenService.createOAuth2Tokens(null, null, null, true, null));\n-        assertEquals(\"security tokens are not enabled\", e.getMessage());\n+        assertThat(e, throwableWithMessage(\"security tokens are not enabled\"));\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"security_tokens\"));\n \n         PlainActionFuture<UserToken> future = new PlainActionFuture<>();\n         tokenService.getAndValidateToken(null, future);\n         assertNull(future.get());\n \n-        e = expectThrows(IllegalStateException.class, () -> {\n-            PlainActionFuture<TokensInvalidationResult> invalidateFuture = new PlainActionFuture<>();\n-            tokenService.invalidateAccessToken((String) null, invalidateFuture);\n-            invalidateFuture.actionGet();\n-        });\n-        assertEquals(\"security tokens are not enabled\", e.getMessage());\n+        PlainActionFuture<TokensInvalidationResult> invalidateFuture = new PlainActionFuture<>();\n+        e = expectThrows(ElasticsearchException.class, () -> tokenService.invalidateAccessToken((String) null, invalidateFuture));\n+        assertThat(e, throwableWithMessage(\"security tokens are not enabled\"));\n+        assertThat(e, instanceOf(FeatureNotEnabledException.class));\n+        assertThat(e.getMetadata(FeatureNotEnabledException.DISABLED_FEATURE_METADATA), contains(\"security_tokens\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3caf0ea9c0d1ed68327f55f2c6cdee1658e30e9"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3508, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}