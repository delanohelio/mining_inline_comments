{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODU4OTkx", "number": 51864, "title": "Add enterprise mode and refactor", "bodyText": "Add enterprise operation mode to properly map enterprise license.\nAslo refactor XPackLicenstate class to consolidate license status and mode checks,\nwhich turns out to be the majority changes of this PR.\nThis class has many sychronised methods to check basically three things:\n\nminimum operation mode required\nwhether security is enabled\nwhether current license needs to be active\n\nDepends on the actual feature, either 1, 2 or all of above checks are performed. These are now consolidated in to 3 helper methods (2 of them are new).\nThere are also some other methods that also checks the same things but they are static method without synchronisation. Therefore they are left unchanged, e.g. isMachineLearningAllowedForOperationMode, isTransformAllowedForOperationMode.\nresolves: #51081", "createdAt": "2020-02-04T14:11:52Z", "url": "https://github.com/elastic/elasticsearch/pull/51864", "merged": true, "mergeCommit": {"oid": "4ab16c67115342e47d1ae9138f90c579140f3b5e"}, "closed": true, "closedAt": "2020-02-09T22:12:53Z", "author": {"login": "ywangd"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBBvafAH2gAyMzcwODU4OTkxOjU4OGFjZjhhOGRhZTU5MGRjZmQ2NmY2NWNlNGViZWQwMTA4MmNlYWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCx5EmgFqTM1NTY0NTE5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/588acf8a8dae590dcfd66f65ce4ebed01082ceaf", "committedDate": "2020-02-04T13:41:42Z", "message": "Add enterprise mode and refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDA0NTIw", "url": "https://github.com/elastic/elasticsearch/pull/51864#pullrequestreview-353004520", "createdAt": "2020-02-04T14:13:03Z", "commit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxMzowM1rOFlVbMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxMzowM1rOFlVbMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MjY1OA==", "bodyText": "The allowTrial argument is always true for all usages. It can be dropped unless anyone can foresee some future usage.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r374692658", "createdAt": "2020-02-04T14:13:03Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +809,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    private synchronized boolean checkMinimumLicense(\n+        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "originalPosition": 396}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDA1NzE5", "url": "https://github.com/elastic/elasticsearch/pull/51864#pullrequestreview-353005719", "createdAt": "2020-02-04T14:14:36Z", "commit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxNDozNlrOFlVe0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxNDozNlrOFlVe0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MzU4Nw==", "bodyText": "It is possible to replace this method with just a call of checkMinimumLicense(MISSING, true, false, true). But I feel a separate method clears the intention and is more readable.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r374693587", "createdAt": "2020-02-04T14:14:36Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +809,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "originalPosition": 391}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDA2Mjc1", "url": "https://github.com/elastic/elasticsearch/pull/51864#pullrequestreview-353006275", "createdAt": "2020-02-04T14:15:19Z", "commit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxNToyMFrOFlVgWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoxNToyMFrOFlVgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5Mzk3Nw==", "bodyText": "isActive is an existing synchronized method.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r374693977", "createdAt": "2020-02-04T14:15:20Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -391,8 +372,8 @@ public synchronized boolean isAuditingAllowed() {\n      *\n      * @return true if the license allows for the stats and health APIs to be used.\n      */\n-    public synchronized boolean isStatsAndHealthAllowed() {\n-        return status.active;\n+    public boolean isStatsAndHealthAllowed() {\n+        return isActive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2622daf558fd3535e26700363887ef1adf7c305", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/e2622daf558fd3535e26700363887ef1adf7c305", "committedDate": "2020-02-04T14:30:46Z", "message": "Fix test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff12f9168f806663a7df8f26a8ac08cef5034c2d", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/ff12f9168f806663a7df8f26a8ac08cef5034c2d", "committedDate": "2020-02-05T00:06:56Z", "message": "Fix broken IT tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f311e7a6efc2a44fc3103685a9466600dd6ceac5", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/f311e7a6efc2a44fc3103685a9466600dd6ceac5", "committedDate": "2020-02-05T00:48:54Z", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5805cde25f08286633498d71c10cba9659b2c2d0", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/5805cde25f08286633498d71c10cba9659b2c2d0", "committedDate": "2020-02-05T01:38:19Z", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23e265e5cb807dc4ef13a62d92419f758293405a", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/23e265e5cb807dc4ef13a62d92419f758293405a", "committedDate": "2020-02-05T05:25:31Z", "message": "Fix more test failure due to missing enterprise handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25411e32eed4467c2627ffd39179c49d0d06eb98", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/25411e32eed4467c2627ffd39179c49d0d06eb98", "committedDate": "2020-02-05T05:34:26Z", "message": "Remove unnecessary javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b599f829b0fa6e096fa4f95c8cac0b1679ded911", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/b599f829b0fa6e096fa4f95c8cac0b1679ded911", "committedDate": "2020-02-05T05:34:44Z", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDc5Nzk5", "url": "https://github.com/elastic/elasticsearch/pull/51864#pullrequestreview-353479799", "createdAt": "2020-02-05T05:52:29Z", "commit": {"oid": "b599f829b0fa6e096fa4f95c8cac0b1679ded911"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTo1MjoyOVrOFlsfiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODoyMzoyNVrOFlvGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MDYwMQ==", "bodyText": "The name of the method threw me off while initially reading the code. I don't have a good suggestion that isn't too long for a method name, but can we add a line of javadoc explaining that this checks if the current license is at least minimumMode and the rest of the requirements are satisfied ?", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375070601", "createdAt": "2020-02-05T05:52:29Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +802,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    private synchronized boolean checkMinimumLicense(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b599f829b0fa6e096fa4f95c8cac0b1679ded911"}, "originalPosition": 539}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MTYzOA==", "bodyText": "I think we should leave this be. While this is currently the case, there is no guarantee that all features will be available in trial*, and having this as a parameter would help future implementations take this into account in license checks.\n* We do have differences in handling trial licenses already w.r.t. to functionality already, see #isTransportTlsRequired for instance", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375071638", "createdAt": "2020-02-05T05:57:18Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +809,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    private synchronized boolean checkMinimumLicense(\n+        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MjY1OA=="}, "originalCommit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5OTg2OA==", "bodyText": "We can probably remove this and expose an isFipsModeAllowed() method here. Happy with a followup but I think it makes sense for the current refactoring", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375099868", "createdAt": "2020-02-05T07:45:27Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -31,7 +31,7 @@\n public class XPackLicenseState {\n \n     public static final Set<OperationMode> FIPS_ALLOWED_LICENSE_OPERATION_MODES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b599f829b0fa6e096fa4f95c8cac0b1679ded911"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwOTI1Mw==", "bodyText": "It is possible to replace this method with just a call of checkMinimumLicense(MISSING, true, false, true)\n\nis it ? That wouldn't handle the intricacies of isSecurityExplicitlyEnabled vs isSecurityEnabled", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375109253", "createdAt": "2020-02-05T08:13:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +809,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MzU4Nw=="}, "originalCommit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "originalPosition": 391}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMTUxMQ==", "bodyText": "Could we make this generic too ? Something like isMinimumLicense(final OperationMode minimumMode, final OperationMode currentMode) ? The callers of this should know what the minimum allowed op mode is", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375111511", "createdAt": "2020-02-05T08:18:44Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -857,17 +780,16 @@ private static boolean isSecurityEnabled(final OperationMode mode, final boolean\n      *\n      * @return true is the license is compatible, otherwise false\n      */\n-    public synchronized boolean isCcrAllowed() {\n-        final Status currentStatus = status;\n-        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode);\n+    public boolean isCcrAllowed() {\n+        return checkMinimumLicense(OperationMode.PLATINUM, false, true, true);\n     }\n \n     public static boolean isCcrAllowedForOperationMode(final OperationMode operationMode) {\n-        return isPlatinumOrTrialOperationMode(operationMode);\n+        return isPlatinumPlusOrTrialOperationMode(operationMode);\n     }\n \n-    public static boolean isPlatinumOrTrialOperationMode(final OperationMode operationMode) {\n-        return operationMode == OperationMode.PLATINUM || operationMode == OperationMode.TRIAL;\n+    public static boolean isPlatinumPlusOrTrialOperationMode(final OperationMode operationMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b599f829b0fa6e096fa4f95c8cac0b1679ded911"}, "originalPosition": 525}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMzM3MQ==", "bodyText": "nit: I think we generally prefer separate calls for builder as it is clearer to read, or at least split them in different lines. Also maxResourceUnits can be called with a randomIntegerInRange", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375113371", "createdAt": "2020-02-05T08:23:25Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,17 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n         if (version == License.VERSION_START) {\n             builder.subscriptionType((type != null) ? type : randomFrom(\"dev\", \"gold\", \"platinum\", \"silver\"));\n             builder.feature(randomAlphaOfLength(10));\n         }\n+        if (\"enterprise\".equals(licenseType)) {\n+            builder.version(License.VERSION_ENTERPRISE).maxResourceUnits(5).maxNodes(-1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b599f829b0fa6e096fa4f95c8cac0b1679ded911"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/0fe8af17a000a5c5f976f33bc962dacbe201336e", "committedDate": "2020-02-05T14:09:14Z", "message": "Address feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/e6a1ac20e2bdb347815945523b6e10da00a18bbd", "committedDate": "2020-02-06T03:15:06Z", "message": "Address feedback to consolidate OperationMode logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0OTM1Njk2", "url": "https://github.com/elastic/elasticsearch/pull/51864#pullrequestreview-354935696", "createdAt": "2020-02-07T05:19:47Z", "commit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNToxOTo0N1rOFmyjqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTo0NToyM1rOFmy2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODUzOQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static boolean isAllowedByLicenseInfo(final XPackInfoResponse.LicenseInfo licenseInfo) {\n          \n          \n            \n                public static boolean isAllowedByLicense(final XPackInfoResponse.LicenseInfo licenseInfo) {", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218539", "createdAt": "2020-02-07T05:19:47Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java", "diffHunk": "@@ -138,9 +138,9 @@ public RemoteClusterLicenseChecker(final Client client, final Predicate<License.\n         this.predicate = predicate;\n     }\n \n-    public static boolean isLicensePlatinumOrTrial(final XPackInfoResponse.LicenseInfo licenseInfo) {\n+    public static boolean isAllowedByLicenseInfo(final XPackInfoResponse.LicenseInfo licenseInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODgwNA==", "bodyText": "nit: extra space", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218804", "createdAt": "2020-02-07T05:21:17Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,20 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODkyMA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        builder\n          \n          \n            \n                        builder.version(License.VERSION_ENTERPRISE)", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218920", "createdAt": "2020-02-07T05:21:57Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,20 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n         if (version == License.VERSION_START) {\n             builder.subscriptionType((type != null) ? type : randomFrom(\"dev\", \"gold\", \"platinum\", \"silver\"));\n             builder.feature(randomAlphaOfLength(10));\n         }\n+        if (\"enterprise\".equals(licenseType)) {\n+            builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODk1Nw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .version(License.VERSION_ENTERPRISE)", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218957", "createdAt": "2020-02-07T05:22:16Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,20 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n         if (version == License.VERSION_START) {\n             builder.subscriptionType((type != null) ? type : randomFrom(\"dev\", \"gold\", \"platinum\", \"silver\"));\n             builder.feature(randomAlphaOfLength(10));\n         }\n+        if (\"enterprise\".equals(licenseType)) {\n+            builder\n+                .version(License.VERSION_ENTERPRISE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTUyNA==", "bodyText": "The semantic of isTransportRequired method is a bit different from the isXxxAllowed methods. So I can see trial could be handled differently.\n\nagreed, I was just trying to make a point that it is not unheard of to have the need to treat trial differently.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376219524", "createdAt": "2020-02-07T05:25:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +809,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    private synchronized boolean checkMinimumLicense(\n+        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MjY1OA=="}, "originalCommit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMTM4NQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Test whether a feature is allowed by the status of current license and security config.\n          \n          \n            \n                 * Test whether a feature is allowed by the status of current license and security configuration.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376221385", "createdAt": "2020-02-07T05:35:45Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +805,32 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean isAllowedBySecurity() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    /**\n+     * Test whether a feature is allowed by the status of current license and security config.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd"}, "originalPosition": 567}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMzI0OQ==", "bodyText": "I agree with your reasoning that since status is not volatile, we can remove the local variables from here and other places ( I don't think there was an explicit reason this was not done in #33396 )", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376223249", "createdAt": "2020-02-07T05:45:23Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +805,32 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean isAllowedBySecurity() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    /**\n+     * Test whether a feature is allowed by the status of current license and security config.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needSecurity Whether security is required for feature to be allowed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    private synchronized boolean isAllowedByLicenseAndSecurity(\n+        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n+\n+        final Status localStatus = status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd"}, "originalPosition": 579}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/d413b0c961ab6a6566c05ed1c4452797e3c55f33", "committedDate": "2020-02-07T12:00:32Z", "message": "Address feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "540538ee23a30c308c81b2021581164579fc423e", "author": {"user": {"login": "ywangd", "name": "Yang Wang"}}, "url": "https://github.com/elastic/elasticsearch/commit/540538ee23a30c308c81b2021581164579fc423e", "committedDate": "2020-02-07T12:27:59Z", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjMzNjk4", "url": "https://github.com/elastic/elasticsearch/pull/51864#pullrequestreview-355633698", "createdAt": "2020-02-09T21:09:10Z", "commit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjQ1MTk2", "url": "https://github.com/elastic/elasticsearch/pull/51864#pullrequestreview-355645196", "createdAt": "2020-02-09T23:49:13Z", "commit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMzo0OToxM1rOFnXw_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMDoxOToxN1rOFnX7bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyODE1OQ==", "bodyText": "I'd prefer that we change this to either be < PLATINUM, or use methods on XPackLicenseState so that we don't have a bunch of code that assumes the set of licenses and their ordering.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376828159", "createdAt": "2020-02-09T23:49:13Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java", "diffHunk": "@@ -256,6 +256,7 @@ public void registerLicense(final PutLicenseRequest request, final ActionListene\n                         \"] license unless TLS is configured or security is disabled\");\n                 } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings)\n                     && newLicense.operationMode() != License.OperationMode.PLATINUM\n+                    && newLicense.operationMode() != License.OperationMode.ENTERPRISE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyOTE3Mg==", "bodyText": "I'd prefer a method name like allowForAllLicenses()\nMost of these isXYZAllowed() methods are added by people who deal with licensing questions very rarely. They just want to come in and implement a method in the most obvious way.\nThey don't know what \"active\" means (I forget what it means half the time), and their likely response here is \"I'll just copy one of these other methods and hope that it's right\". And it will be, but I'd rather we had something that was clearly correct to them, so that they don't need to hope. And that is a method that is named to be exactly in line with their requirement.\nThere's a good chance the PR reviewer isn't an expert on licensing either, so a method that copies this code isn't obviously correct to the reviewer - they need to look at how other methods are implemented to check. A method that has the equivalent of isMyFeatureAllowed() { return thisIsAllowedForAllLicenseTypes(); } is correct just from reading the diff.\nI'm very open to discussion on a preferred name, but I'm pretty keen for these to be readable in a literal sense.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376829172", "createdAt": "2020-02-10T00:01:21Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -391,8 +372,8 @@ public synchronized boolean isAuditingAllowed() {\n      *\n      * @return true if the license allows for the stats and health APIs to be used.\n      */\n-    public synchronized boolean isStatsAndHealthAllowed() {\n-        return status.active;\n+    public boolean isStatsAndHealthAllowed() {\n+        return isActive();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5Mzk3Nw=="}, "originalCommit": {"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyOTY3MA==", "bodyText": "This reads strangely to me.\nI realise that, in terms of readability, it's logically equivalent to the isAllowedByLicenseAndSecurity method, but here with no parameters, it just looks like a mistake.\nGiven this is the only place it's called, I would just replace it with isAllowedByLicenseAndSecurity(OperationMode.BASIC, true, false, true);", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376829670", "createdAt": "2020-02-10T00:07:24Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -449,51 +431,38 @@ public synchronized AllowedRealmType allowedRealmType() {\n     /**\n      * @return whether custom role providers are allowed based on the license {@link OperationMode}\n      */\n-    public synchronized boolean isCustomRoleProvidersAllowed() {\n-        final boolean isSecurityCurrentlyEnabled =\n-            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)\n-                && status.active;\n+    public boolean isCustomRoleProvidersAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.PLATINUM, true, true, true);\n     }\n \n     /**\n      * @return whether the Elasticsearch {@code TokenService} is allowed based on the license {@link OperationMode}\n      */\n-    public synchronized boolean isTokenServiceAllowed() {\n-        final OperationMode mode = status.mode;\n-        final boolean isSecurityCurrentlyEnabled = isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL);\n+    public boolean isTokenServiceAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.GOLD, true, false, true);\n     }\n \n     /**\n      * @return whether the Elasticsearch {@code ApiKeyService} is allowed based on the current node/cluster state\n      */\n-    public synchronized boolean isApiKeyServiceAllowed() {\n-        final OperationMode mode = status.mode;\n-        final boolean isSecurityCurrentlyEnabled = isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-        return isSecurityCurrentlyEnabled;\n+    public boolean isApiKeyServiceAllowed() {\n+        return isAllowedBySecurity();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDAyNQ==", "bodyText": "I don't like the version of this method that passes false for security.\nIt's calling a method named isAllowedBy___Security` and then says \"oh, but not really security\".\nReading this method, on its own, if you aren't intimately familiar with what isAllowedByLicenseAndSecurity does, and what those parameters mean, a reader is left:\n\nWondering why watcher cares about security (because it's in that method name).\nWhat all those parameters mean, and whether they're correct.\n\nPeople adding a new license check for paid functionality shouldn't be expected to make decisions about so many parameters. There should be one obvious method with the smallest set of parameters that they can use.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830025", "createdAt": "2020-02-10T00:10:49Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -509,31 +478,17 @@ public synchronized boolean isAuthorizationEngineAllowed() {\n      *\n      * @return {@code true} as long as the license is valid. Otherwise {@code false}.\n      */\n-    public synchronized boolean isWatcherAllowed() {\n-        Status localStatus = status;\n-\n-        if (localStatus.active == false) {\n-            return false;\n-        }\n-\n-        switch (localStatus.mode) {\n-            case TRIAL:\n-            case GOLD:\n-            case PLATINUM:\n-            case STANDARD:\n-                return true;\n-            default:\n-                return false;\n-        }\n+    public boolean isWatcherAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.STANDARD, false, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDI3MA==", "bodyText": "It bothers me that we have this method, and them re-implement the same OperationMode check for FIPS in LicenseService", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830270", "createdAt": "2020-02-10T00:13:18Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -593,197 +542,160 @@ public synchronized boolean isGraphAllowed() {\n      * @return {@code true} as long as the license is valid. Otherwise\n      *         {@code false}.\n      */\n-    public synchronized boolean isMachineLearningAllowed() {\n-        final Status currentStatus = status;\n-        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode);\n+    public boolean isMachineLearningAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.PLATINUM, false, true, true);\n     }\n \n     public static boolean isMachineLearningAllowedForOperationMode(final OperationMode operationMode) {\n-        return isPlatinumOrTrialOperationMode(operationMode);\n+        return isAllowedByOperationMode(operationMode, OperationMode.PLATINUM, true);\n     }\n \n     /**\n      * Transform is always available as long as there is a valid license\n      *\n      * @return true if the license is active\n      */\n-    public synchronized boolean isTransformAllowed() {\n-        return status.active;\n+    public boolean isTransformAllowed() {\n+        return isActive();\n     }\n \n     public static boolean isTransformAllowedForOperationMode(final OperationMode operationMode) {\n         // any license (basic and upwards)\n         return operationMode != License.OperationMode.MISSING;\n     }\n \n+    public static boolean isFipsAllowedForOperationMode(final OperationMode operationMode) {\n+        return isAllowedByOperationMode(operationMode, OperationMode.PLATINUM, true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDQ3Mg==", "bodyText": "I think we can just replace with with mode != MISSING.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830472", "createdAt": "2020-02-10T00:15:33Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -796,7 +708,7 @@ public synchronized boolean isTrialLicense() {\n     public synchronized boolean isSecurityAvailable() {\n         OperationMode mode = status.mode;\n         return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||\n-                mode == OperationMode.TRIAL || mode == OperationMode.BASIC;\n+                mode == OperationMode.TRIAL || mode == OperationMode.BASIC || mode == OperationMode.ENTERPRISE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "originalPosition": 542}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDgyOQ==", "bodyText": "Strictly speaking, this check is incorrect because there is a race condition between the 2 calls. I don't think we should be perpetuating this style of call, and should actually push it to a single call that passes in the licenseState object and checks both active and operation mode.", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830829", "createdAt": "2020-02-10T00:19:17Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -243,7 +243,8 @@ public boolean isAvailableWithLicense(XPackLicenseState licenseState) {\n         }\n \n         // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isActive() && XPackLicenseState.isPlatinumOrTrialOperationMode(licenseState.getOperationMode())) {\n+        if (licenseState.isActive() && XPackLicenseState.isAllowedByOperationMode(\n+            licenseState.getOperationMode(), License.OperationMode.PLATINUM, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540538ee23a30c308c81b2021581164579fc423e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3005, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}