{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzAzODEw", "number": 53410, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1NjozMVrODnFd5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1MzoyN1rODq91xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzEwNjI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1NjozMVrOF03_BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1NjozMVrOF03_BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4NzUyNA==", "bodyText": "This method is now only used for backwards-compatible deserialization, and doesn't need to be able to remove metrics anymore.", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r390987524", "createdAt": "2020-03-11T13:56:31Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +85,68 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n+     * Add collection of metrics\n      */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetrics(Collection<String> metrics) {\n+        if (Metric.allMetrics().containsAll(metrics) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metrics);\n+        }\n+        requestedMetrics.addAll(metrics);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n+     * Add String array of metrics\n      */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n-     */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(String... metrics) {\n+        addMetrics(Arrays.stream(metrics).collect(Collectors.toSet()));\n         return this;\n     }\n \n     /**\n-     * @return true if information about ingest is requested\n+     * Remove metric\n      */\n-    public boolean ingest() {\n-        return Metrics.INGEST.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about indices (currently just indexing buffers) be returned\n-     * @param indices true if you want info\n-     */\n-    public NodesInfoRequest indices(boolean indices) {\n-        addOrRemoveMetric(indices, Metrics.INDICES.metricName());\n+    public NodesInfoRequest removeMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.remove(metric);\n         return this;\n     }\n \n     /**\n-     * @return true if information about indices (currently just indexing buffers)\n-     */\n-    public boolean indices() {\n-        return Metrics.INDICES.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Helper method for adding and removing metrics.\n-     * @param includeMetric Whether or not to include a metric.\n+     * Helper method for adding and removing metrics. Used when deserializing\n+     * a NodesInfoRequest from an ordered list of booleans.\n+     *\n+     * @param addMetric Whether or not to include a metric.\n      * @param metricName Name of the metric to include or remove.\n      */\n-    private void addOrRemoveMetric(boolean includeMetric, String metricName) {\n-        if (includeMetric) {\n+    private void optionallyAddMetric(boolean addMetric, String metricName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c6c40d29d8b09fab0accc5375d8cc08b0a453a6"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTQyOTc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMTozNDoyN1rOF1OoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMTozNDoyN1rOF1OoOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1ODUyMA==", "bodyText": "Ah, this change leads to a bwc problem. I'm going to make a separate PR to handle the bwc aspects of this, for simplicity.", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r391358520", "createdAt": "2020-03-12T01:34:27Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -281,12 +176,12 @@ public void writeTo(StreamOutput out) throws IOException {\n      * from the nodes information endpoint. Eventually this list list will be\n      * pluggable.\n      */\n-    enum Metrics {\n+    public enum Metric {\n         SETTINGS(\"settings\"),\n         OS(\"os\"),\n         PROCESS(\"process\"),\n         JVM(\"jvm\"),\n-        THREAD_POOL(\"threadPool\"),\n+        THREAD_POOL(\"thread_pool\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c6c40d29d8b09fab0accc5375d8cc08b0a453a6"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODUwNjczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0MzowNlrOF1srFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo0NTo0NVrOF2EMqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MDc3Mw==", "bodyText": "Why do we need 2 variants of this method?", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r391850773", "createdAt": "2020-03-12T19:43:06Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +85,68 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n+     * Add collection of metrics\n      */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetrics(Collection<String> metrics) {\n+        if (Metric.allMetrics().containsAll(metrics) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metrics);\n+        }\n+        requestedMetrics.addAll(metrics);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n+     * Add String array of metrics\n      */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n-     */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(String... metrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c6c40d29d8b09fab0accc5375d8cc08b0a453a6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NDAzNg==", "bodyText": "This one made some of the invocations \"look cleaner\" to me, but it's not at all necessary and I'm fine with removing it.", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r391894036", "createdAt": "2020-03-12T21:07:02Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +85,68 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n+     * Add collection of metrics\n      */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetrics(Collection<String> metrics) {\n+        if (Metric.allMetrics().containsAll(metrics) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metrics);\n+        }\n+        requestedMetrics.addAll(metrics);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n+     * Add String array of metrics\n      */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n-     */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(String... metrics) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MDc3Mw=="}, "originalCommit": {"oid": "4c6c40d29d8b09fab0accc5375d8cc08b0a453a6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzNjIwMw==", "bodyText": "I've removed it.", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r392236203", "createdAt": "2020-03-13T13:45:45Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +85,68 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n+     * Add collection of metrics\n      */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetrics(Collection<String> metrics) {\n+        if (Metric.allMetrics().containsAll(metrics) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metrics);\n+        }\n+        requestedMetrics.addAll(metrics);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n+     * Add String array of metrics\n      */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n-     */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(String... metrics) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MDc3Mw=="}, "originalCommit": {"oid": "4c6c40d29d8b09fab0accc5375d8cc08b0a453a6"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODUxMjE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestNodesInfoAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0NDo1N1rOF1sufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowOTo1M1rOF1vZBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MTY0NA==", "bodyText": "Aren't unknown metrics an error case?", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r391851644", "createdAt": "2020-03-12T19:44:57Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestNodesInfoAction.java", "diffHunk": "@@ -108,16 +98,9 @@ static NodesInfoRequest prepareRequest(final RestRequest request) {\n             nodesInfoRequest.all();\n         } else {\n             nodesInfoRequest.clear();\n-            nodesInfoRequest.settings(metrics.contains(\"settings\"));\n-            nodesInfoRequest.os(metrics.contains(\"os\"));\n-            nodesInfoRequest.process(metrics.contains(\"process\"));\n-            nodesInfoRequest.jvm(metrics.contains(\"jvm\"));\n-            nodesInfoRequest.threadPool(metrics.contains(\"thread_pool\"));\n-            nodesInfoRequest.transport(metrics.contains(\"transport\"));\n-            nodesInfoRequest.http(metrics.contains(\"http\"));\n-            nodesInfoRequest.plugins(metrics.contains(\"plugins\"));\n-            nodesInfoRequest.ingest(metrics.contains(\"ingest\"));\n-            nodesInfoRequest.indices(metrics.contains(\"indices\"));\n+            // disregard unknown metrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c6c40d29d8b09fab0accc5375d8cc08b0a453a6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NTMwMA==", "bodyText": "The current behavior of the Nodes Info API is to silently disregard invalid metrics (or node ids). The Nodes Stats endpoint, on the other hand, will return an error if you request an unknown metric.\nArguably, the Nodes Info API should return an error for unknown metrics, but that would go beyond just refactoring.", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r391895300", "createdAt": "2020-03-12T21:09:53Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestNodesInfoAction.java", "diffHunk": "@@ -108,16 +98,9 @@ static NodesInfoRequest prepareRequest(final RestRequest request) {\n             nodesInfoRequest.all();\n         } else {\n             nodesInfoRequest.clear();\n-            nodesInfoRequest.settings(metrics.contains(\"settings\"));\n-            nodesInfoRequest.os(metrics.contains(\"os\"));\n-            nodesInfoRequest.process(metrics.contains(\"process\"));\n-            nodesInfoRequest.jvm(metrics.contains(\"jvm\"));\n-            nodesInfoRequest.threadPool(metrics.contains(\"thread_pool\"));\n-            nodesInfoRequest.transport(metrics.contains(\"transport\"));\n-            nodesInfoRequest.http(metrics.contains(\"http\"));\n-            nodesInfoRequest.plugins(metrics.contains(\"plugins\"));\n-            nodesInfoRequest.ingest(metrics.contains(\"ingest\"));\n-            nodesInfoRequest.indices(metrics.contains(\"indices\"));\n+            // disregard unknown metrics", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MTY0NA=="}, "originalCommit": {"oid": "4c6c40d29d8b09fab0accc5375d8cc08b0a453a6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjAwODY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMTowMVrOF2OUkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzozNTo1OFrOF2WB2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMjA2NQ==", "bodyText": "I liked having the variatic version. Is there a reason we need a collection version? It would make it easier to read in the rest of the code if the Set building part was isolated to the internals of this method.", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r392402065", "createdAt": "2020-03-13T18:31:01Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +85,60 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n-     */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n-     */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n+     * Add collection of metrics\n      */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(Collection<String> metrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24f252b8f292331b0eecbea49b7584650a13a00e"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyODM0Ng==", "bodyText": "That makes sense. I'll swap to the variatic version.", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r392528346", "createdAt": "2020-03-13T23:35:58Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +85,60 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n-     */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n-     */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n+     * Add collection of metrics\n      */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(Collection<String> metrics) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMjA2NQ=="}, "originalCommit": {"oid": "24f252b8f292331b0eecbea49b7584650a13a00e"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzE0NDM2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzowNTowNVrOF29u_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzowNTowNVrOF29u_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3ODg3OQ==", "bodyText": "TODO: Fix javadoc for accuracy", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r393178879", "createdAt": "2020-03-16T17:05:05Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +88,70 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n-     */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n-     */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n+     * Add collection of metrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8780fdc001683746b6544edff42f921f5f325cb"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzc5OTcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1MzoyN1rOF7Cp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1NDozMFrOF7CsSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1MzgxMw==", "bodyText": "This can be simplified in the same way I suggested in the response PR?", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r397453813", "createdAt": "2020-03-24T20:53:27Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +87,70 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n-     */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n-     */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n+     * Add multiple metrics\n      */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(String... metrics) {\n+        SortedSet<String> illegalMetrics = new TreeSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b13906cfcd46a945d451bd7c19005249e89e23"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NDQwOQ==", "bodyText": "Will do!", "url": "https://github.com/elastic/elasticsearch/pull/53410#discussion_r397454409", "createdAt": "2020-03-24T20:54:30Z", "author": {"login": "williamrandolph"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -84,174 +87,70 @@ public NodesInfoRequest clear() {\n      * Sets to return all the data.\n      */\n     public NodesInfoRequest all() {\n-        requestedMetrics.addAll(Metrics.allMetrics());\n+        requestedMetrics.addAll(Metric.allMetrics());\n         return this;\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Get the names of requested metrics\n      */\n-    public boolean settings() {\n-        return Metrics.SETTINGS.containedIn(requestedMetrics);\n+    public Set<String> requestedMetrics() {\n+        return Set.copyOf(requestedMetrics);\n     }\n \n     /**\n-     * Should the node settings be returned.\n+     * Add metric\n      */\n-    public NodesInfoRequest settings(boolean settings) {\n-        addOrRemoveMetric(settings, Metrics.SETTINGS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public boolean os() {\n-        return Metrics.OS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node OS be returned.\n-     */\n-    public NodesInfoRequest os(boolean os) {\n-        addOrRemoveMetric(os, Metrics.OS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public boolean process() {\n-        return Metrics.PROCESS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Process be returned.\n-     */\n-    public NodesInfoRequest process(boolean process) {\n-        addOrRemoveMetric(process, Metrics.PROCESS.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public boolean jvm() {\n-        return Metrics.JVM.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node JVM be returned.\n-     */\n-    public NodesInfoRequest jvm(boolean jvm) {\n-        addOrRemoveMetric(jvm, Metrics.JVM.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public boolean threadPool() {\n-        return Metrics.THREAD_POOL.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Thread Pool info be returned.\n-     */\n-    public NodesInfoRequest threadPool(boolean threadPool) {\n-        addOrRemoveMetric(threadPool, Metrics.THREAD_POOL.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public boolean transport() {\n-        return Metrics.TRANSPORT.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node Transport be returned.\n-     */\n-    public NodesInfoRequest transport(boolean transport) {\n-        addOrRemoveMetric(transport, Metrics.TRANSPORT.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public boolean http() {\n-        return Metrics.HTTP.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should the node HTTP be returned.\n-     */\n-    public NodesInfoRequest http(boolean http) {\n-        addOrRemoveMetric(http, Metrics.HTTP.metricName());\n-        return this;\n-    }\n-\n-    /**\n-     * Should information about plugins be returned\n-     * @param plugins true if you want info\n-     * @return The request\n-     */\n-    public NodesInfoRequest plugins(boolean plugins) {\n-        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n+    public NodesInfoRequest addMetric(String metric) {\n+        if (Metric.allMetrics().contains(metric) == false) {\n+            throw new IllegalStateException(\"Used an illegal metric: \" + metric);\n+        }\n+        requestedMetrics.add(metric);\n         return this;\n     }\n \n     /**\n-     * @return true if information about plugins is requested\n-     */\n-    public boolean plugins() {\n-        return Metrics.PLUGINS.containedIn(requestedMetrics);\n-    }\n-\n-    /**\n-     * Should information about ingest be returned\n-     * @param ingest true if you want info\n+     * Add multiple metrics\n      */\n-    public NodesInfoRequest ingest(boolean ingest) {\n-        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n+    public NodesInfoRequest addMetrics(String... metrics) {\n+        SortedSet<String> illegalMetrics = new TreeSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1MzgxMw=="}, "originalCommit": {"oid": "e3b13906cfcd46a945d451bd7c19005249e89e23"}, "originalPosition": 195}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3285, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}