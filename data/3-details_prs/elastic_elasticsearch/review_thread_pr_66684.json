{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNDAwNTQ5", "number": 66684, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNjowNzowMFrOFVCpRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDoxODo0NlrOFWGrQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NjA3NzQ5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/operator/OperatorPrivileges.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNjowNzowMFrOIdSgHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNjowNzowMFrOIdSgHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU4Mjc1MQ==", "bodyText": "The code always sets the value of skipOperatorOnly because:\n\nSimilar to other authorization decision, the value is computed and local to every node\nThe value is always set properly so that a transport client cannot override this field (it is not exposed to Rest)", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r567582751", "createdAt": "2021-02-01T06:07:00Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/operator/OperatorPrivileges.java", "diffHunk": "@@ -78,6 +84,12 @@ public ElasticsearchSecurityException check(String action, TransportRequest requ\n             return null;\n         }\n \n+        public void maybeInterceptRequest(ThreadContext threadContext, TransportRequest request) {\n+            if (request instanceof RestoreSnapshotRequest) {\n+                ((RestoreSnapshotRequest) request).skipOperatorOnly(shouldProcess());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80504794c19102a98006cd51c4d1e4734ecec78a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NjA3ODcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/operator/OperatorPrivileges.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNjowNzozNVrOIdSg1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNjowNzozNVrOIdSg1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU4MjkzMg==", "bodyText": "Similarly, this field is always set even when operator privileges are not enabled to retain the default behaviour. See also above.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r567582932", "createdAt": "2021-02-01T06:07:35Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/operator/OperatorPrivileges.java", "diffHunk": "@@ -92,5 +104,12 @@ public void maybeMarkOperatorUser(Authentication authentication, ThreadContext t\n         public ElasticsearchSecurityException check(String action, TransportRequest request, ThreadContext threadContext) {\n             return null;\n         }\n+\n+        @Override\n+        public void maybeInterceptRequest(ThreadContext threadContext, TransportRequest request) {\n+            if (request instanceof RestoreSnapshotRequest) {\n+                ((RestoreSnapshotRequest) request).skipOperatorOnly(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80504794c19102a98006cd51c4d1e4734ecec78a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NjM2OTQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNjozMzoxMFrOIey55w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNjozMzoxMFrOIey55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE2MjIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean skipOperatorOnly = false; // this field does not get serialised because it is always set locally by authz\n          \n          \n            \n                private boolean skipOperatorOnlyState = false; // this field does not get serialised because it is always set locally by authz\n          \n      \n    \n    \n  \n\nI think adding a suffix is helpful because it makes it clear that the \"only\" refers to operator, not \"skip\".\nBy itself, skipOperatorOnly could mean \"skip operator, but nothing else\" which doesn't make sense if you know what \"operator\" means, but is still a cognitive hurdle.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569162215", "createdAt": "2021-02-03T06:33:10Z", "author": {"login": "tvernum"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java", "diffHunk": "@@ -61,6 +61,7 @@\n     private boolean includeAliases = true;\n     private Settings indexSettings = EMPTY_SETTINGS;\n     private String[] ignoreIndexSettings = Strings.EMPTY_ARRAY;\n+    private boolean skipOperatorOnly = false; // this field does not get serialised because it is always set locally by authz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NjM4NjY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesSingleNodeTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNjozOTo1MlrOIezDpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwMzo0MTozOVrOIfhbzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE2NDcxMA==", "bodyText": "What value do we get from combining these into 1 test case? It seems more natural to have 2 separate cases for action and settings.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569164710", "createdAt": "2021-02-03T06:39:52Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesSingleNodeTests.java", "diffHunk": "@@ -63,20 +67,52 @@ protected Settings nodeSettings() {\n         return builder.build();\n     }\n \n-    public void testOutcomeOfSuperuserPerformingOperatorOnlyActionWillDependOnWhetherFeatureIsEnabled() {\n+    public void testOperatorOnlyActionOrSettingWillNotBeActionableByNormalSuperuser() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTkyNDU1Nw==", "bodyText": "No real value. I split it and also the corresponding one that test the operator user.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569924557", "createdAt": "2021-02-04T03:41:39Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesSingleNodeTests.java", "diffHunk": "@@ -63,20 +67,52 @@ protected Settings nodeSettings() {\n         return builder.build();\n     }\n \n-    public void testOutcomeOfSuperuserPerformingOperatorOnlyActionWillDependOnWhetherFeatureIsEnabled() {\n+    public void testOperatorOnlyActionOrSettingWillNotBeActionableByNormalSuperuser() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE2NDcxMA=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NjM5ODExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/settings/Setting.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNjo0NDoyNlrOIezKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwMzo0Nzo0MVrOIfhjIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE2NjM1OQ==", "bodyText": "I wonder whether this should just be isOperatorOnly()\nI think it would read better in OperatorOnlyRegistry.checkClusterUpdateSettings (because that code is really focused on \"is this an operator setting\" rather than \"is this dynamic, but only updateable by operators\")", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569166359", "createdAt": "2021-02-03T06:44:26Z", "author": {"login": "tvernum"}, "path": "server/src/main/java/org/elasticsearch/common/settings/Setting.java", "diffHunk": "@@ -295,7 +304,14 @@ public final Key getRawKey() {\n      * Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>\n      */\n     public final boolean isDynamic() {\n-        return properties.contains(Property.Dynamic);\n+        return properties.contains(Property.Dynamic) || properties.contains(Property.OperatorDynamic);\n+    }\n+\n+    /**\n+     * Returns <code>true</code> if this setting is dynamically updateable by operators, otherwise <code>false</code>\n+     */\n+    public final boolean isDynamicOperator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTkyNjQzNQ==", "bodyText": "It makes senses since operator settings must be dynamic in the first place, though this assumes some understanding of the concept. But overall I agree it reads better in the call sites.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569926435", "createdAt": "2021-02-04T03:47:41Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/common/settings/Setting.java", "diffHunk": "@@ -295,7 +304,14 @@ public final Key getRawKey() {\n      * Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>\n      */\n     public final boolean isDynamic() {\n-        return properties.contains(Property.Dynamic);\n+        return properties.contains(Property.Dynamic) || properties.contains(Property.OperatorDynamic);\n+    }\n+\n+    /**\n+     * Returns <code>true</code> if this setting is dynamically updateable by operators, otherwise <code>false</code>\n+     */\n+    public final boolean isDynamicOperator() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE2NjM1OQ=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4Njg4NjQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwOTowMjo1NlrOIe3pRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwMzo1MTozOVrOIfhnsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTIzOTg3Nw==", "bodyText": "I did not spot the place where this is needed, perhaps it can be removed or alternatively moved to the specific line?", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569239877", "createdAt": "2021-02-03T09:02:56Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "diffHunk": "@@ -100,4 +102,142 @@ public void testOperatorPrivilegesXpackUsage() throws IOException {\n         assertTrue((boolean) operatorPrivileges.get(\"available\"));\n         assertTrue((boolean) operatorPrivileges.get(\"enabled\"));\n     }\n+\n+    public void testUpdateOperatorSettings() throws IOException {\n+        final Map<String, Object> settings = new HashMap<>(\n+            Map.of(\"xpack.security.http.filter.enabled\", \"false\", \"xpack.security.transport.filter.enabled\", \"false\")\n+        );\n+        final boolean extraSettings = randomBoolean();\n+        if (extraSettings) {\n+            settings.put(\"search.allow_expensive_queries\", false);\n+        }\n+        final ResponseException responseException = expectThrows(ResponseException.class, () -> updateSettings(settings, null));\n+        assertThat(responseException.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        assertThat(responseException.getMessage(), containsString(\"is unauthorized for user\"));\n+        assertTrue(getPersistentSettings().isEmpty());\n+\n+        updateSettings(settings, OPERATOR_AUTH_HEADER);\n+\n+        Map<String, Object> persistentSettings = getPersistentSettings();\n+        assertThat(persistentSettings.get(\"xpack.security.http.filter.enabled\"), equalTo(\"false\"));\n+        assertThat(persistentSettings.get(\"xpack.security.transport.filter.enabled\"), equalTo(\"false\"));\n+        if (extraSettings) {\n+            assertThat(persistentSettings.get(\"search.allow_expensive_queries\"), equalTo(\"false\"));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTkyNzYwMQ==", "bodyText": "Good catch! It is indeed a copy/paste artifact ~~", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569927601", "createdAt": "2021-02-04T03:51:39Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "diffHunk": "@@ -100,4 +102,142 @@ public void testOperatorPrivilegesXpackUsage() throws IOException {\n         assertTrue((boolean) operatorPrivileges.get(\"available\"));\n         assertTrue((boolean) operatorPrivileges.get(\"enabled\"));\n     }\n+\n+    public void testUpdateOperatorSettings() throws IOException {\n+        final Map<String, Object> settings = new HashMap<>(\n+            Map.of(\"xpack.security.http.filter.enabled\", \"false\", \"xpack.security.transport.filter.enabled\", \"false\")\n+        );\n+        final boolean extraSettings = randomBoolean();\n+        if (extraSettings) {\n+            settings.put(\"search.allow_expensive_queries\", false);\n+        }\n+        final ResponseException responseException = expectThrows(ResponseException.class, () -> updateSettings(settings, null));\n+        assertThat(responseException.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        assertThat(responseException.getMessage(), containsString(\"is unauthorized for user\"));\n+        assertTrue(getPersistentSettings().isEmpty());\n+\n+        updateSettings(settings, OPERATOR_AUTH_HEADER);\n+\n+        Map<String, Object> persistentSettings = getPersistentSettings();\n+        assertThat(persistentSettings.get(\"xpack.security.http.filter.enabled\"), equalTo(\"false\"));\n+        assertThat(persistentSettings.get(\"xpack.security.transport.filter.enabled\"), equalTo(\"false\"));\n+        if (extraSettings) {\n+            assertThat(persistentSettings.get(\"search.allow_expensive_queries\"), equalTo(\"false\"));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTIzOTg3Nw=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4Njg5MjExOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwOTowNDoyMlrOIe3sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNToyODozMVrOIfjWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI0MDc3MQ==", "bodyText": "I think we may want the opposite test too - checking that without operator privileges enabled, we do restore properties marked as operator?", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569240771", "createdAt": "2021-02-03T09:04:22Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "diffHunk": "@@ -100,4 +102,142 @@ public void testOperatorPrivilegesXpackUsage() throws IOException {\n         assertTrue((boolean) operatorPrivileges.get(\"available\"));\n         assertTrue((boolean) operatorPrivileges.get(\"enabled\"));\n     }\n+\n+    public void testUpdateOperatorSettings() throws IOException {\n+        final Map<String, Object> settings = new HashMap<>(\n+            Map.of(\"xpack.security.http.filter.enabled\", \"false\", \"xpack.security.transport.filter.enabled\", \"false\")\n+        );\n+        final boolean extraSettings = randomBoolean();\n+        if (extraSettings) {\n+            settings.put(\"search.allow_expensive_queries\", false);\n+        }\n+        final ResponseException responseException = expectThrows(ResponseException.class, () -> updateSettings(settings, null));\n+        assertThat(responseException.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        assertThat(responseException.getMessage(), containsString(\"is unauthorized for user\"));\n+        assertTrue(getPersistentSettings().isEmpty());\n+\n+        updateSettings(settings, OPERATOR_AUTH_HEADER);\n+\n+        Map<String, Object> persistentSettings = getPersistentSettings();\n+        assertThat(persistentSettings.get(\"xpack.security.http.filter.enabled\"), equalTo(\"false\"));\n+        assertThat(persistentSettings.get(\"xpack.security.transport.filter.enabled\"), equalTo(\"false\"));\n+        if (extraSettings) {\n+            assertThat(persistentSettings.get(\"search.allow_expensive_queries\"), equalTo(\"false\"));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSnapshotRestoreBehaviourOfOperatorSettings() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk1NTk2Mw==", "bodyText": "I thought these would be covered by existing tests already, but I was wrong. The settings are from xpack and most snapshot related tests are in core. I added a new yml test to cover this and PUT _cluster/settings.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569955963", "createdAt": "2021-02-04T05:28:31Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "diffHunk": "@@ -100,4 +102,142 @@ public void testOperatorPrivilegesXpackUsage() throws IOException {\n         assertTrue((boolean) operatorPrivileges.get(\"available\"));\n         assertTrue((boolean) operatorPrivileges.get(\"enabled\"));\n     }\n+\n+    public void testUpdateOperatorSettings() throws IOException {\n+        final Map<String, Object> settings = new HashMap<>(\n+            Map.of(\"xpack.security.http.filter.enabled\", \"false\", \"xpack.security.transport.filter.enabled\", \"false\")\n+        );\n+        final boolean extraSettings = randomBoolean();\n+        if (extraSettings) {\n+            settings.put(\"search.allow_expensive_queries\", false);\n+        }\n+        final ResponseException responseException = expectThrows(ResponseException.class, () -> updateSettings(settings, null));\n+        assertThat(responseException.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        assertThat(responseException.getMessage(), containsString(\"is unauthorized for user\"));\n+        assertTrue(getPersistentSettings().isEmpty());\n+\n+        updateSettings(settings, OPERATOR_AUTH_HEADER);\n+\n+        Map<String, Object> persistentSettings = getPersistentSettings();\n+        assertThat(persistentSettings.get(\"xpack.security.http.filter.enabled\"), equalTo(\"false\"));\n+        assertThat(persistentSettings.get(\"xpack.security.transport.filter.enabled\"), equalTo(\"false\"));\n+        if (extraSettings) {\n+            assertThat(persistentSettings.get(\"search.allow_expensive_queries\"), equalTo(\"false\"));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSnapshotRestoreBehaviourOfOperatorSettings() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI0MDc3MQ=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NjkyMzY2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwOToxMTo0NlrOIe4ALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNToyODo1NFrOIfjXBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI0NTc0Mw==", "bodyText": "I think we want a test to validate that we can set operator settings when operator privileges are disabled too. Could also be in the single node test rather than rest test, if easier.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569245743", "createdAt": "2021-02-03T09:11:46Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "diffHunk": "@@ -100,4 +102,142 @@ public void testOperatorPrivilegesXpackUsage() throws IOException {\n         assertTrue((boolean) operatorPrivileges.get(\"available\"));\n         assertTrue((boolean) operatorPrivileges.get(\"enabled\"));\n     }\n+\n+    public void testUpdateOperatorSettings() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk1NjEwMQ==", "bodyText": "Added a yml test for it. See also above.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569956101", "createdAt": "2021-02-04T05:28:54Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/qa/operator-privileges-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/operator/OperatorPrivilegesIT.java", "diffHunk": "@@ -100,4 +102,142 @@ public void testOperatorPrivilegesXpackUsage() throws IOException {\n         assertTrue((boolean) operatorPrivileges.get(\"available\"));\n         assertTrue((boolean) operatorPrivileges.get(\"enabled\"));\n     }\n+\n+    public void testUpdateOperatorSettings() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI0NTc0Mw=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NzA3NDE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwOTo0NTo1N1rOIe5d_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNToxMDowNlrOIfjCCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI2OTc1OQ==", "bodyText": "nit: this is not included in toString, would be nice to add it for debugging purposes.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569269759", "createdAt": "2021-02-03T09:45:57Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java", "diffHunk": "@@ -61,6 +61,7 @@\n     private boolean includeAliases = true;\n     private Settings indexSettings = EMPTY_SETTINGS;\n     private String[] ignoreIndexSettings = Strings.EMPTY_ARRAY;\n+    private boolean skipOperatorOnly = false; // this field does not get serialised because it is always set locally by authz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk1MDczMA==", "bodyText": "The toString method relies on toXContent, which I intentionally left out for this new field. To support toString, I extracted the internals of the toXContent method into a new toXContentFragment method and use it for the string building.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569950730", "createdAt": "2021-02-04T05:10:06Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java", "diffHunk": "@@ -61,6 +61,7 @@\n     private boolean includeAliases = true;\n     private Settings indexSettings = EMPTY_SETTINGS;\n     private String[] ignoreIndexSettings = Strings.EMPTY_ARRAY;\n+    private boolean skipOperatorOnly = false; // this field does not get serialised because it is always set locally by authz", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI2OTc1OQ=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NzE4MTE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDowOTowNFrOIe6fow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNToxMjowNFrOIfjD_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI4NjU2Mw==", "bodyText": "Hopefully this never causes an issue, but I think this line should go below the modification of the settings below to ensure the updated settings are valid.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569286563", "createdAt": "2021-02-03T10:09:04Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -443,6 +445,22 @@ public ClusterState execute(ClusterState currentState) {\n                             if (metadata.persistentSettings() != null) {\n                                 Settings settings = metadata.persistentSettings();\n                                 clusterSettings.validateUpdate(settings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk1MTIyOA==", "bodyText": "A good catch, thanks! It may not cause real issue like you said, nevertheless it is better to be safe.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569951228", "createdAt": "2021-02-04T05:12:04Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -443,6 +445,22 @@ public ClusterState execute(ClusterState currentState) {\n                             if (metadata.persistentSettings() != null) {\n                                 Settings settings = metadata.persistentSettings();\n                                 clusterSettings.validateUpdate(settings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI4NjU2Mw=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NzIyMzY4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequestTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDoxODo0NlrOIe65kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNToyNjoxMVrOIfjTiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI5MzIwMA==", "bodyText": "I wonder if it was nicer to verify that toXContent gives same result regardless of the skipOperatorOnly flag? I.e., invoke it on two instances with different skipOperatorOnly flag and verify the maps are identical.", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569293200", "createdAt": "2021-02-03T10:18:46Z", "author": {"login": "henningandersen"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequestTests.java", "diffHunk": "@@ -134,4 +135,24 @@ public void testSource() throws IOException {\n \n         assertEquals(original, processed);\n     }\n+\n+    public void testSkipOperatorOnlyWillNotBeSerialised() throws IOException {\n+        RestoreSnapshotRequest original = createTestInstance();\n+        assertFalse(original.skipOperatorOnly()); // default is false\n+        if (randomBoolean()) {\n+            original.skipOperatorOnly(true);\n+        }\n+        // It is not serialised as xcontent\n+        XContentBuilder builder = original.toXContent(XContentFactory.jsonBuilder(), new ToXContent.MapParams(Collections.emptyMap()));\n+        XContentParser parser = XContentType.JSON.xContent().createParser(\n+            NamedXContentRegistry.EMPTY, null, BytesReference.bytes(builder).streamInput());\n+        Map<String, Object> map = parser.mapOrdered();\n+        assertFalse(map.containsKey(\"skip_operator_only\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk1NTIxMQ==", "bodyText": "Added", "url": "https://github.com/elastic/elasticsearch/pull/66684#discussion_r569955211", "createdAt": "2021-02-04T05:26:11Z", "author": {"login": "ywangd"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequestTests.java", "diffHunk": "@@ -134,4 +135,24 @@ public void testSource() throws IOException {\n \n         assertEquals(original, processed);\n     }\n+\n+    public void testSkipOperatorOnlyWillNotBeSerialised() throws IOException {\n+        RestoreSnapshotRequest original = createTestInstance();\n+        assertFalse(original.skipOperatorOnly()); // default is false\n+        if (randomBoolean()) {\n+            original.skipOperatorOnly(true);\n+        }\n+        // It is not serialised as xcontent\n+        XContentBuilder builder = original.toXContent(XContentFactory.jsonBuilder(), new ToXContent.MapParams(Collections.emptyMap()));\n+        XContentParser parser = XContentType.JSON.xContent().createParser(\n+            NamedXContentRegistry.EMPTY, null, BytesReference.bytes(builder).streamInput());\n+        Map<String, Object> map = parser.mapOrdered();\n+        assertFalse(map.containsKey(\"skip_operator_only\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI5MzIwMA=="}, "originalCommit": {"oid": "2b9aea91628183a5d072592cd89192539bef4d28"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4508, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}