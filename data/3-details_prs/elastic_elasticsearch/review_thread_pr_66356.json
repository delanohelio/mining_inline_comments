{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzEwNzc4", "number": 66356, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyODowOVrOFFrymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowODoxNVrOFGU9wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTA0NjY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/OpenFollowerIndexStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyODowOVrOIGUPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTozODo0OVrOIH7jIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5Mzk3Mw==", "bodyText": "I just realized that we could remove this step entirely in favor of the OpenIndexStep, because as far as I can see, they're identical. (definitely as a followup though)", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r543493973", "createdAt": "2020-12-15T16:28:09Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/OpenFollowerIndexStep.java", "diffHunk": "@@ -20,6 +20,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4NjU5NQ==", "bodyText": "Great spot! I'll make this change in a followup", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r545186595", "createdAt": "2020-12-17T15:38:49Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/OpenFollowerIndexStep.java", "diffHunk": "@@ -20,6 +20,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5Mzk3Mw=="}, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTc4NDgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/PauseFollowerIndexStep.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowNjoyOFrOIHSYkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMToyOVrOIIsEHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjE0NQ==", "bodyText": "Is there any way that we can check whether the pause has already happened and skip it here? Here's the scenario I'm concerned about:\n\nPause gets executed\nRequest is not acknowledged\nAssertion is thrown (I think I've seen users run with assertions enabled before)\nIndex enters the ERROR state\nRetries the pause\nBecause the pause has already occurred, the TransportPauseFollowAction throws an exception as pausing twice throws an exception\nNow we're stuck in an ERROR loop\n\nI think we should also handle the case where the index is manually paused and then the pause-follower-index step runs, it should skip the index.", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r544512145", "createdAt": "2020-12-16T18:06:28Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/PauseFollowerIndexStep.java", "diffHunk": "@@ -17,6 +17,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n     @Override\n     void innerPerformAction(String followerIndex, Listener listener) {\n         PauseFollowAction.Request request = new PauseFollowAction.Request(followerIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1NTgwNw==", "bodyText": "Yes, ++ on making them idempotent. I'll do that as part of this PR.\nI do wonder with regards to the isAcked check. I don't think it should be an assertion as it's something that can happen, so IMO, it should either be an exception or we shouldn't care about it? Given a majority of users run without enabled assertions I'd say we shouldn't care about it (also, an unacked operation is not a failed one). I believe that if we want to wait for all nodes (well, shards in this case) to ack an operation, we should have a step that waits for this condition.\nWhat do you think?", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r545255807", "createdAt": "2020-12-17T17:10:00Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/PauseFollowerIndexStep.java", "diffHunk": "@@ -17,6 +17,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n     @Override\n     void innerPerformAction(String followerIndex, Listener listener) {\n         PauseFollowAction.Request request = new PauseFollowAction.Request(followerIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjE0NQ=="}, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjI3OQ==", "bodyText": "I think it's mostly an assertion for our tests, so that the test will fail and we'll be able to figure out why. Especially in the case of an integration test, we would always want to know if something wasn't acknowledged.\nI think I'm good with keeping it, I know that most users don't run with assertions enabled (and I think we don't recommend that they do). The example above is pretty contrived (the assertion one), and I don't think it is important enough for us to need to remove the assertion.", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r545266279", "createdAt": "2020-12-17T17:25:11Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/PauseFollowerIndexStep.java", "diffHunk": "@@ -17,6 +17,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n     @Override\n     void innerPerformAction(String followerIndex, Listener listener) {\n         PauseFollowAction.Request request = new PauseFollowAction.Request(followerIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjE0NQ=="}, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2NTgzNA==", "bodyText": "@dakrone\nRe:acknowledged /unacknowledged - I agree we'd want to surface this situation if it's a problem. I guess we might view differently an assertion (which I view as expressing/sanity checking \"something that should never happen\"). A successful unacked operation is something that can happen quite often (?) (especially with larger cluster and many shards), so what I'm proposing is making this explicit (especially now that it'll be a retryable step) and explicitly fail the step if the response is unacked (regardless of assertions enabled/disabled).\nRe:idempotency. On a closer look, both UnfollowFollowerIndexStep and PauseFollowerIndexStep are already idempotent as the AbstractUnfollowIndexStep makes sure of this:\nMap<String, String> customIndexMetadata = indexMetadata.getCustomData(CCR_METADATA_KEY);\n        if (customIndexMetadata == null) {\n            listener.onResponse(true);\n            return;\n        }\n\nOn another note, I renamed UnfollowFollowIndexStep to UnfollowFollowerIndexStep as the former made my brain spagheti :)\nI'll merge this PR as is if you agree with the rename.", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r545965834", "createdAt": "2020-12-18T17:02:45Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/PauseFollowerIndexStep.java", "diffHunk": "@@ -17,6 +17,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n     @Override\n     void innerPerformAction(String followerIndex, Listener listener) {\n         PauseFollowAction.Request request = new PauseFollowAction.Request(followerIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjE0NQ=="}, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTQ3MQ==", "bodyText": "what I'm proposing is making this explicit (especially now that it'll be a retryable step) and explicitly fail the step if the response is unacked (regardless of assertions enabled/disabled).\n\nThat sounds good to me!\n\nOn a closer look, both UnfollowFollowerIndexStep and PauseFollowerIndexStep are already idempotent as the AbstractUnfollowIndexStep makes sure of this:\nif (customIndexMetadata == null) ...\n\nLooking at the TransportPauseFollowAction however, pausing an index doesn't actually remove the CCR_METADATA_KEY custom metadata. So the AbstractUnfollowIndexStep only makes sure that we skip indices that don't have any CCR configuration. If an index is a follower, then double pausing/unfollowing still throws this error:\n\n  \n    \n      elasticsearch/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPauseFollowAction.java\n    \n    \n         Line 77\n      in\n      ce30ac1\n    \n    \n    \n    \n\n        \n          \n           listener.onFailure(new IllegalArgumentException(\"no shard follow tasks for [\" + request.getFollowIndex() + \"]\")); \n        \n    \n  \n\n\n(Which is actually after a check of the same kind):\n\n  \n    \n      elasticsearch/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPauseFollowAction.java\n    \n    \n        Lines 57 to 60\n      in\n      ce30ac1\n    \n    \n    \n    \n\n        \n          \n           if (followerIMD.getCustomData(Ccr.CCR_CUSTOM_METADATA_KEY) == null) { \n        \n\n        \n          \n               listener.onFailure(new IllegalArgumentException(\"index [\" + request.getFollowIndex() + \"] is not a follower index\")); \n        \n\n        \n          \n               return; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nSo we still need to do additional checks to see if there are any follow tasks, basically doing this:\n\n  \n    \n      elasticsearch/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPauseFollowAction.java\n    \n    \n        Lines 61 to 74\n      in\n      ce30ac1\n    \n    \n    \n    \n\n        \n          \n           PersistentTasksCustomMetadata persistentTasksMetadata = state.metadata().custom(PersistentTasksCustomMetadata.TYPE); \n        \n\n        \n          \n           if (persistentTasksMetadata == null) { \n        \n\n        \n          \n               listener.onFailure(new IllegalArgumentException(\"no shard follow tasks found\")); \n        \n\n        \n          \n               return; \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           List<String> shardFollowTaskIds = persistentTasksMetadata.tasks().stream() \n        \n\n        \n          \n               .filter(persistentTask -> ShardFollowTask.NAME.equals(persistentTask.getTaskName())) \n        \n\n        \n          \n               .filter(persistentTask -> { \n        \n\n        \n          \n                   ShardFollowTask shardFollowTask = (ShardFollowTask) persistentTask.getParams(); \n        \n\n        \n          \n                   return shardFollowTask.getFollowShardId().getIndexName().equals(request.getFollowIndex()); \n        \n\n        \n          \n               }) \n        \n\n        \n          \n               .map(PersistentTasksCustomMetadata.PersistentTask::getId) \n        \n\n        \n          \n               .collect(Collectors.toList()); \n        \n    \n  \n\n\nand then checking if the list is empty (in which case we can be idempotent and do listener.onResponse(true, null) instead of calling the pause API a second time)", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r545981471", "createdAt": "2020-12-18T17:31:29Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/PauseFollowerIndexStep.java", "diffHunk": "@@ -17,6 +17,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n     @Override\n     void innerPerformAction(String followerIndex, Listener listener) {\n         PauseFollowAction.Request request = new PauseFollowAction.Request(followerIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjE0NQ=="}, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTc5MjY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UnfollowFollowIndexStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowODoxNVrOIHSc9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowODoxNVrOIHSc9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMzI2OA==", "bodyText": "Same comment here about skipping if the index is already unfollowed, a double unfollow throws an error so we'd just be retrying forever if it were executed after the index was already unfollowed", "url": "https://github.com/elastic/elasticsearch/pull/66356#discussion_r544513268", "createdAt": "2020-12-16T18:08:15Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UnfollowFollowIndexStep.java", "diffHunk": "@@ -23,6 +23,11 @@\n         super(key, nextStepKey, client);\n     }\n \n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n     @Override\n     void innerPerformAction(String followerIndex, Listener listener) {\n         UnfollowAction.Request request = new UnfollowAction.Request(followerIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8340a1f40c8918c8b7bc3243e5ca763387211f9"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4622, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}