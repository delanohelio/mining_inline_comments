{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTQwOTYx", "number": 59176, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzoxNToyNlrOEMRlNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzowMTowMlrOEN6DWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzA2NDIwOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ClassNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzoxNToyNlrOGuSwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjowNTowNVrOGxamGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE5NTA2Ng==", "bodyText": "How did this pass style checking?", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r451195066", "createdAt": "2020-07-07T23:15:26Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ClassNode.java", "diffHunk": "@@ -24,8 +24,8 @@\n import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.ScriptClassInfo;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n-import org.elasticsearch.painless.symbol.WriteScope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2OTE0Nw==", "bodyText": "I don't think we check order. I \"optimized\" imports for all the files in Intellij so hopefully it picks this up.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r454469147", "createdAt": "2020-07-14T16:05:05Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ClassNode.java", "diffHunk": "@@ -24,8 +24,8 @@\n import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.ScriptClassInfo;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n-import org.elasticsearch.painless.symbol.WriteScope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE5NTA2Ng=="}, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDExOTE2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/InstanceofNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0NDo0OFrOGww44A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjowODozMlrOGxauqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NTgyNA==", "bodyText": "Fix this ws issue.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r453785824", "createdAt": "2020-07-13T16:44:48Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/InstanceofNode.java", "diffHunk": "@@ -22,50 +22,28 @@\n import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.def;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n-import org.objectweb.asm.Type;\n \n public class InstanceofNode extends UnaryNode {\n     \n     /* ---- begin node data ---- */\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3MTMzOA==", "bodyText": "Fixed for consistency with all the other nodes based on existing blanks lines and sections delineated by comments.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r454471338", "createdAt": "2020-07-14T16:08:32Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/InstanceofNode.java", "diffHunk": "@@ -22,50 +22,28 @@\n import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.def;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n-import org.objectweb.asm.Type;\n \n public class InstanceofNode extends UnaryNode {\n     \n     /* ---- begin node data ---- */\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NTgyNA=="}, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDEyODYwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0NzoxM1rOGww-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjowODo1NFrOGxavfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NzI3Nw==", "bodyText": "Note: Node now decorated with cast.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r453787277", "createdAt": "2020-07-13T16:47:13Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java", "diffHunk": "@@ -91,20 +79,12 @@ public PainlessCast cast(SemanticScope semanticScope) {\n         boolean isExplicitCast = semanticScope.getCondition(this, Explicit.class);\n         boolean isInternalCast = semanticScope.getCondition(this, Internal.class);\n \n-        return AnalyzerCaster.getLegalCast(getLocation(), valueType, targetType, isExplicitCast, isInternalCast);\n-    }\n+        PainlessCast painlessCast = AnalyzerCaster.getLegalCast(getLocation(), valueType, targetType, isExplicitCast, isInternalCast);\n \n-    static ExpressionNode cast(ExpressionNode expressionNode, PainlessCast painlessCast) {\n-        if (painlessCast == null) {\n-            return expressionNode;\n+        if (painlessCast != null) {\n+            semanticScope.putDecoration(this, new ExpressionPainlessCast(painlessCast));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3MTU1MA==", "bodyText": "Note for @stu-elastic", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r454471550", "createdAt": "2020-07-14T16:08:54Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java", "diffHunk": "@@ -91,20 +79,12 @@ public PainlessCast cast(SemanticScope semanticScope) {\n         boolean isExplicitCast = semanticScope.getCondition(this, Explicit.class);\n         boolean isInternalCast = semanticScope.getCondition(this, Internal.class);\n \n-        return AnalyzerCaster.getLegalCast(getLocation(), valueType, targetType, isExplicitCast, isInternalCast);\n-    }\n+        PainlessCast painlessCast = AnalyzerCaster.getLegalCast(getLocation(), valueType, targetType, isExplicitCast, isInternalCast);\n \n-    static ExpressionNode cast(ExpressionNode expressionNode, PainlessCast painlessCast) {\n-        if (painlessCast == null) {\n-            return expressionNode;\n+        if (painlessCast != null) {\n+            semanticScope.putDecoration(this, new ExpressionPainlessCast(painlessCast));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NzI3Nw=="}, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDE0ODE1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo1MjozM1rOGwxKzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjowNzowOFrOGxarcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDQxMg==", "bodyText": "Rename to EBoolComparison or similar", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r453790412", "createdAt": "2020-07-13T16:52:33Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBool.java", "diffHunk": "@@ -21,9 +21,6 @@\n \n import org.elasticsearch.painless.Location;\n import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.ir.BooleanNode;\n-import org.elasticsearch.painless.ir.ClassNode;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n import org.elasticsearch.painless.phase.UserTreeVisitor;\n import org.elasticsearch.painless.symbol.Decorations.Read;\n import org.elasticsearch.painless.symbol.Decorations.TargetType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3MDUxNA==", "bodyText": "Changed.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r454470514", "createdAt": "2020-07-14T16:07:08Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBool.java", "diffHunk": "@@ -21,9 +21,6 @@\n \n import org.elasticsearch.painless.Location;\n import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.ir.BooleanNode;\n-import org.elasticsearch.painless.ir.ClassNode;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n import org.elasticsearch.painless.phase.UserTreeVisitor;\n import org.elasticsearch.painless.symbol.Decorations.Read;\n import org.elasticsearch.painless.symbol.Decorations.TargetType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDQxMg=="}, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDE0OTE1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBoolean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo1Mjo0N1rOGwxLaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjowNzoxM1rOGxarow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDU3MQ==", "bodyText": "Rename to EBoolConst on similar.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r453790571", "createdAt": "2020-07-13T16:52:47Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBoolean.java", "diffHunk": "@@ -20,10 +20,9 @@\n package org.elasticsearch.painless.node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3MDU2Mw==", "bodyText": "Changed.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r454470563", "createdAt": "2020-07-14T16:07:13Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBoolean.java", "diffHunk": "@@ -20,10 +20,9 @@\n package org.elasticsearch.painless.node;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDU3MQ=="}, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDE4MDczOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ERegex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzowMTowMlrOGwxfIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjowNzoyN1rOGxasLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5NTYxNg==", "bodyText": "Note: Moved to IR generation.", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r453795616", "createdAt": "2020-07-13T17:01:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ERegex.java", "diffHunk": "@@ -105,87 +91,7 @@ Output analyze(ClassNode classNode, SemanticScope semanticScope) {\n         }\n \n         semanticScope.putDecoration(this, new ValueType(Pattern.class));\n-\n-        String name = semanticScope.getScriptScope().getNextSyntheticName(\"regex\");\n-\n-        FieldNode fieldNode = new FieldNode();\n-        fieldNode.setLocation(getLocation());\n-        fieldNode.setModifiers(Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE);\n-        fieldNode.setFieldType(Pattern.class);\n-        fieldNode.setName(name);\n-\n-        classNode.addFieldNode(fieldNode);\n-\n-        try {\n-            StatementExpressionNode statementExpressionNode = new StatementExpressionNode();\n-            statementExpressionNode.setLocation(getLocation());\n-\n-            BlockNode blockNode = classNode.getClinitBlockNode();\n-            blockNode.addStatementNode(statementExpressionNode);\n-\n-            MemberFieldStoreNode memberFieldStoreNode = new MemberFieldStoreNode();\n-            memberFieldStoreNode.setLocation(getLocation());\n-            memberFieldStoreNode.setExpressionType(void.class);\n-            memberFieldStoreNode.setFieldType(Pattern.class);\n-            memberFieldStoreNode.setName(name);\n-            memberFieldStoreNode.setStatic(true);\n-\n-            statementExpressionNode.setExpressionNode(memberFieldStoreNode);\n-\n-            CallNode callNode = new CallNode();\n-            callNode.setLocation(getLocation());\n-            callNode.setExpressionType(Pattern.class);\n-\n-            memberFieldStoreNode.setChildNode(callNode);\n-\n-            StaticNode staticNode = new StaticNode();\n-            staticNode.setLocation(getLocation());\n-            staticNode.setExpressionType(Pattern.class);\n-\n-            callNode.setLeftNode(staticNode);\n-\n-            CallSubNode callSubNode = new CallSubNode();\n-            callSubNode.setLocation(getLocation());\n-            callSubNode.setExpressionType(Pattern.class);\n-            callSubNode.setBox(Pattern.class);\n-            callSubNode.setMethod(new PainlessMethod(\n-                    Pattern.class.getMethod(\"compile\", String.class, int.class),\n-                    Pattern.class,\n-                    Pattern.class,\n-                    Arrays.asList(String.class, int.class),\n-                    null,\n-                    null,\n-                    null\n-                    )\n-            );\n-\n-            callNode.setRightNode(callSubNode);\n-\n-            ConstantNode constantNode = new ConstantNode();\n-            constantNode.setLocation(getLocation());\n-            constantNode.setExpressionType(String.class);\n-            constantNode.setConstant(pattern);\n-\n-            callSubNode.addArgumentNode(constantNode);\n-\n-            constantNode = new ConstantNode();\n-            constantNode.setLocation(getLocation());\n-            constantNode.setExpressionType(int.class);\n-            constantNode.setConstant(flags);\n-\n-            callSubNode.addArgumentNode(constantNode);\n-        } catch (Exception exception) {\n-            throw createError(new IllegalStateException(\"could not generate regex constant [\" + pattern + \"/\" + flags +\"] in clinit\"));\n-        }\n-\n-        MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n-        memberFieldLoadNode.setLocation(getLocation());\n-        memberFieldLoadNode.setExpressionType(Pattern.class);\n-        memberFieldLoadNode.setName(name);\n-        memberFieldLoadNode.setStatic(true);\n-        output.expressionNode = memberFieldLoadNode;\n-\n-        return output;\n+        semanticScope.putDecoration(this, new StandardConstant(flags));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3MDcwMQ==", "bodyText": "Note for @stu-elastic", "url": "https://github.com/elastic/elasticsearch/pull/59176#discussion_r454470701", "createdAt": "2020-07-14T16:07:27Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ERegex.java", "diffHunk": "@@ -105,87 +91,7 @@ Output analyze(ClassNode classNode, SemanticScope semanticScope) {\n         }\n \n         semanticScope.putDecoration(this, new ValueType(Pattern.class));\n-\n-        String name = semanticScope.getScriptScope().getNextSyntheticName(\"regex\");\n-\n-        FieldNode fieldNode = new FieldNode();\n-        fieldNode.setLocation(getLocation());\n-        fieldNode.setModifiers(Modifier.FINAL | Modifier.STATIC | Modifier.PRIVATE);\n-        fieldNode.setFieldType(Pattern.class);\n-        fieldNode.setName(name);\n-\n-        classNode.addFieldNode(fieldNode);\n-\n-        try {\n-            StatementExpressionNode statementExpressionNode = new StatementExpressionNode();\n-            statementExpressionNode.setLocation(getLocation());\n-\n-            BlockNode blockNode = classNode.getClinitBlockNode();\n-            blockNode.addStatementNode(statementExpressionNode);\n-\n-            MemberFieldStoreNode memberFieldStoreNode = new MemberFieldStoreNode();\n-            memberFieldStoreNode.setLocation(getLocation());\n-            memberFieldStoreNode.setExpressionType(void.class);\n-            memberFieldStoreNode.setFieldType(Pattern.class);\n-            memberFieldStoreNode.setName(name);\n-            memberFieldStoreNode.setStatic(true);\n-\n-            statementExpressionNode.setExpressionNode(memberFieldStoreNode);\n-\n-            CallNode callNode = new CallNode();\n-            callNode.setLocation(getLocation());\n-            callNode.setExpressionType(Pattern.class);\n-\n-            memberFieldStoreNode.setChildNode(callNode);\n-\n-            StaticNode staticNode = new StaticNode();\n-            staticNode.setLocation(getLocation());\n-            staticNode.setExpressionType(Pattern.class);\n-\n-            callNode.setLeftNode(staticNode);\n-\n-            CallSubNode callSubNode = new CallSubNode();\n-            callSubNode.setLocation(getLocation());\n-            callSubNode.setExpressionType(Pattern.class);\n-            callSubNode.setBox(Pattern.class);\n-            callSubNode.setMethod(new PainlessMethod(\n-                    Pattern.class.getMethod(\"compile\", String.class, int.class),\n-                    Pattern.class,\n-                    Pattern.class,\n-                    Arrays.asList(String.class, int.class),\n-                    null,\n-                    null,\n-                    null\n-                    )\n-            );\n-\n-            callNode.setRightNode(callSubNode);\n-\n-            ConstantNode constantNode = new ConstantNode();\n-            constantNode.setLocation(getLocation());\n-            constantNode.setExpressionType(String.class);\n-            constantNode.setConstant(pattern);\n-\n-            callSubNode.addArgumentNode(constantNode);\n-\n-            constantNode = new ConstantNode();\n-            constantNode.setLocation(getLocation());\n-            constantNode.setExpressionType(int.class);\n-            constantNode.setConstant(flags);\n-\n-            callSubNode.addArgumentNode(constantNode);\n-        } catch (Exception exception) {\n-            throw createError(new IllegalStateException(\"could not generate regex constant [\" + pattern + \"/\" + flags +\"] in clinit\"));\n-        }\n-\n-        MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n-        memberFieldLoadNode.setLocation(getLocation());\n-        memberFieldLoadNode.setExpressionType(Pattern.class);\n-        memberFieldLoadNode.setName(name);\n-        memberFieldLoadNode.setStatic(true);\n-        output.expressionNode = memberFieldLoadNode;\n-\n-        return output;\n+        semanticScope.putDecoration(this, new StandardConstant(flags));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5NTYxNg=="}, "originalCommit": {"oid": "4db342843635c2138faad1b89ab80c66be59c512"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1995, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}