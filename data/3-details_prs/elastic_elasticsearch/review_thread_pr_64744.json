{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTgyNzcw", "number": 64744, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1Njo1OFrOE2oBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1OTozMFrOE2oDqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzE0Mjg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/LongHash.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1Njo1OFrOHvg7IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNToyMlrOHvxOsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NDU0NA==", "bodyText": "Maybe it is worthy a comment explaining that the parent class allocates a BigArray and therefore if this allocation fails, we need to make sure we release objects of the parent class?", "url": "https://github.com/elastic/elasticsearch/pull/64744#discussion_r519584544", "createdAt": "2020-11-09T06:56:58Z", "author": {"login": "iverase"}, "path": "server/src/main/java/org/elasticsearch/common/util/LongHash.java", "diffHunk": "@@ -41,7 +41,13 @@ public LongHash(long capacity, BigArrays bigArrays) {\n     //Constructor with configurable capacity and load factor.\n     public LongHash(long capacity, float maxLoadFactor, BigArrays bigArrays) {\n         super(capacity, maxLoadFactor, bigArrays);\n-        keys = bigArrays.newLongArray(capacity, false);\n+        try {\n+            keys = bigArrays.newLongArray(capacity, false);\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c9a8281fc8dd42f58f67c8efa0577604508d6f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MTY5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/64744#discussion_r519851698", "createdAt": "2020-11-09T14:25:22Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/util/LongHash.java", "diffHunk": "@@ -41,7 +41,13 @@ public LongHash(long capacity, BigArrays bigArrays) {\n     //Constructor with configurable capacity and load factor.\n     public LongHash(long capacity, float maxLoadFactor, BigArrays bigArrays) {\n         super(capacity, maxLoadFactor, bigArrays);\n-        keys = bigArrays.newLongArray(capacity, false);\n+        try {\n+            keys = bigArrays.newLongArray(capacity, false);\n+        } finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NDU0NA=="}, "originalCommit": {"oid": "f6c9a8281fc8dd42f58f67c8efa0577604508d6f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzE0MzY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/util/LongLongHash.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1NzoxMlrOHvg7hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNToyN1rOHvxO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NDY0NA==", "bodyText": "Same as above", "url": "https://github.com/elastic/elasticsearch/pull/64744#discussion_r519584644", "createdAt": "2020-11-09T06:57:12Z", "author": {"login": "iverase"}, "path": "server/src/main/java/org/elasticsearch/common/util/LongLongHash.java", "diffHunk": "@@ -48,7 +48,13 @@ public LongLongHash(long capacity, BigArrays bigArrays) {\n     //Constructor with configurable capacity and load factor.\n     public LongLongHash(long capacity, float maxLoadFactor, BigArrays bigArrays) {\n         super(capacity, maxLoadFactor, bigArrays);\n-        keys = bigArrays.newLongArray(2 * capacity, false);\n+        try {\n+            keys = bigArrays.newLongArray(2 * capacity, false);\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c9a8281fc8dd42f58f67c8efa0577604508d6f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MTc1NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/64744#discussion_r519851754", "createdAt": "2020-11-09T14:25:27Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/util/LongLongHash.java", "diffHunk": "@@ -48,7 +48,13 @@ public LongLongHash(long capacity, BigArrays bigArrays) {\n     //Constructor with configurable capacity and load factor.\n     public LongLongHash(long capacity, float maxLoadFactor, BigArrays bigArrays) {\n         super(capacity, maxLoadFactor, bigArrays);\n-        keys = bigArrays.newLongArray(2 * capacity, false);\n+        try {\n+            keys = bigArrays.newLongArray(2 * capacity, false);\n+        } finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NDY0NA=="}, "originalCommit": {"oid": "f6c9a8281fc8dd42f58f67c8efa0577604508d6f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzE0ODU5OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/common/util/MockBigArrays.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNjo1OTozMFrOHvg-XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNTowM1rOHvzC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NTM3Mw==", "bodyText": "great test, I am wondering if it would be better to have a specific class to test allocations instead of a static method here? The point is that it is difficult to find out which BigArrays implementation are actually tested. It can be done in a follow up PR or I might be wrong.", "url": "https://github.com/elastic/elasticsearch/pull/64744#discussion_r519585373", "createdAt": "2020-11-09T06:59:30Z", "author": {"login": "iverase"}, "path": "test/framework/src/main/java/org/elasticsearch/common/util/MockBigArrays.java", "diffHunk": "@@ -37,12 +46,50 @@\n import java.util.Random;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n \n import static org.elasticsearch.test.ESTestCase.assertBusy;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class MockBigArrays extends BigArrays {\n+    private static final Logger logger = LogManager.getLogger(MockBigArrays.class);\n+\n+    /**\n+     * Assert that a function returning a {@link Releasable} runs to completion\n+     * when allocated a breaker with that breaks when it uses more than {@code max}\n+     * bytes <strong>and</strong> that the function doesn't leak any\n+     * {@linkplain BigArray}s if it is given a breaker that allows fewer bytes.\n+     */\n+    public static void assertFitsIn(ByteSizeValue max, Function<BigArrays, Releasable> run) {\n+        long maxBytes = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c9a8281fc8dd42f58f67c8efa0577604508d6f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1Njg3NA==", "bodyText": "I'm not sure! I didn't go with the superclass because I wasn't sure that every unit test where I make the method just extends ESTestCase now. They all do it right now but I was thinking \"I'm going to want this in a bunch of spots.\" so I wasn't sure if it'd be safe to keep it in a superclass. So, I guess what I'm saying is, yeah, I think its a good idea but I'd prefer to do it in a follow up after I get a little more experience using this method.", "url": "https://github.com/elastic/elasticsearch/pull/64744#discussion_r519856874", "createdAt": "2020-11-09T14:32:25Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/common/util/MockBigArrays.java", "diffHunk": "@@ -37,12 +46,50 @@\n import java.util.Random;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n \n import static org.elasticsearch.test.ESTestCase.assertBusy;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class MockBigArrays extends BigArrays {\n+    private static final Logger logger = LogManager.getLogger(MockBigArrays.class);\n+\n+    /**\n+     * Assert that a function returning a {@link Releasable} runs to completion\n+     * when allocated a breaker with that breaks when it uses more than {@code max}\n+     * bytes <strong>and</strong> that the function doesn't leak any\n+     * {@linkplain BigArray}s if it is given a breaker that allows fewer bytes.\n+     */\n+    public static void assertFitsIn(ByteSizeValue max, Function<BigArrays, Releasable> run) {\n+        long maxBytes = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NTM3Mw=="}, "originalCommit": {"oid": "f6c9a8281fc8dd42f58f67c8efa0577604508d6f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MTQzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/64744#discussion_r519881431", "createdAt": "2020-11-09T15:05:03Z", "author": {"login": "iverase"}, "path": "test/framework/src/main/java/org/elasticsearch/common/util/MockBigArrays.java", "diffHunk": "@@ -37,12 +46,50 @@\n import java.util.Random;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n \n import static org.elasticsearch.test.ESTestCase.assertBusy;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class MockBigArrays extends BigArrays {\n+    private static final Logger logger = LogManager.getLogger(MockBigArrays.class);\n+\n+    /**\n+     * Assert that a function returning a {@link Releasable} runs to completion\n+     * when allocated a breaker with that breaks when it uses more than {@code max}\n+     * bytes <strong>and</strong> that the function doesn't leak any\n+     * {@linkplain BigArray}s if it is given a breaker that allows fewer bytes.\n+     */\n+    public static void assertFitsIn(ByteSizeValue max, Function<BigArrays, Releasable> run) {\n+        long maxBytes = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NTM3Mw=="}, "originalCommit": {"oid": "f6c9a8281fc8dd42f58f67c8efa0577604508d6f"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3125, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}