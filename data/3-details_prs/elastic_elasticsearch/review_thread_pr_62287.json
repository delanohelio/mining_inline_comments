{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzI2NTY0", "number": 62287, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzoxMzozMFrOElptwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0OToyMVrOElqvWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTE2MjI2OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/security-example-spi-extension/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzoxMzozMFrOHVPW5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzoxMzozMFrOHVPW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAzMzc2Nw==", "bodyText": "This is not new in this PR. But I find the repetition of custom confusing as well. Probably better to have something like custom.custom1 or custom.default_custom.", "url": "https://github.com/elastic/elasticsearch/pull/62287#discussion_r492033767", "createdAt": "2020-09-21T13:13:30Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/security-example-spi-extension/build.gradle", "diffHunk": "@@ -25,6 +25,9 @@ testClusters.all {\n \n   setting 'xpack.security.authc.realms.custom.custom.order', '0'\n   setting 'xpack.security.authc.realms.custom.custom.filtered_setting', 'should be filtered'\n+  setting 'xpack.security.authc.realms.custom.custom.username', 'test_user'\n+  keystore 'xpack.security.authc.realms.custom.custom.password', 'secret_password'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5101a1573891df47b36fe644b965c0cb9cdb0286"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTIyMjU0OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/security-example-spi-extension/src/test/java/org/elasticsearch/example/realm/CustomRealmTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzoyNzoxOVrOHVP71A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjowNjoyNlrOHcOnpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA0MzIyMA==", "bodyText": "Unless you are intentionally showing that password here can bypass the \"at last 6-chars\" policy, I'd prefer it to be compliant for consistency.", "url": "https://github.com/elastic/elasticsearch/pull/62287#discussion_r492043220", "createdAt": "2020-09-21T13:27:19Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/security-example-spi-extension/src/test/java/org/elasticsearch/example/realm/CustomRealmTests.java", "diffHunk": "@@ -17,26 +18,56 @@\n import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n import org.elasticsearch.xpack.core.security.user.User;\n \n+import java.util.List;\n+\n import static org.elasticsearch.xpack.core.security.authc.RealmSettings.getFullSettingKey;\n+import static org.hamcrest.Matchers.arrayContaining;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.notNullValue;\n \n public class CustomRealmTests extends ESTestCase {\n-    public void testAuthenticate() {\n+\n+    public void testAuthenticateDefaultConfig() {\n         Settings globalSettings = Settings.builder().put(\"path.home\", createTempDir()).build();\n         final RealmConfig.RealmIdentifier realmIdentifier = new RealmConfig.RealmIdentifier(CustomRealm.TYPE, \"test\");\n         CustomRealm realm = new CustomRealm(new RealmConfig(\n             realmIdentifier,\n             Settings.builder().put(globalSettings).put(getFullSettingKey(realmIdentifier, RealmSettings.ORDER_SETTING), 0).build(),\n             TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)));\n-        SecureString password = CustomRealm.KNOWN_PW.clone();\n-        UsernamePasswordToken token = new UsernamePasswordToken(CustomRealm.KNOWN_USER, password);\n+        SecureString password = CustomRealm.DEFAULT_KNOWN_PW.clone();\n+        UsernamePasswordToken token = new UsernamePasswordToken(CustomRealm.DEFAULT_KNOWN_USER, password);\n+        PlainActionFuture<AuthenticationResult> plainActionFuture = new PlainActionFuture<>();\n+        realm.authenticate(token, plainActionFuture);\n+        User user = plainActionFuture.actionGet().getUser();\n+        assertThat(user, notNullValue());\n+        assertThat(List.of(user.roles()), equalTo(CustomRealm.DEFAULT_ROLES));\n+        assertThat(user.principal(), equalTo(CustomRealm.DEFAULT_KNOWN_USER));\n+    }\n+\n+    public void testAuthenticateCustomConfig() {\n+        final RealmConfig.RealmIdentifier realmIdentifier = new RealmConfig.RealmIdentifier(CustomRealm.TYPE, \"test\");\n+        MockSecureSettings secureSettings = new MockSecureSettings();\n+        secureSettings.setString(getFullSettingKey(realmIdentifier.getName(), CustomRealm.PASSWORD_SETTING), \"12345\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5101a1573891df47b36fe644b965c0cb9cdb0286"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MTcwMQ==", "bodyText": "I'm disappointed that my film references are being lost here, but will do.", "url": "https://github.com/elastic/elasticsearch/pull/62287#discussion_r499361701", "createdAt": "2020-10-05T06:06:26Z", "author": {"login": "tvernum"}, "path": "x-pack/qa/security-example-spi-extension/src/test/java/org/elasticsearch/example/realm/CustomRealmTests.java", "diffHunk": "@@ -17,26 +18,56 @@\n import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n import org.elasticsearch.xpack.core.security.user.User;\n \n+import java.util.List;\n+\n import static org.elasticsearch.xpack.core.security.authc.RealmSettings.getFullSettingKey;\n+import static org.hamcrest.Matchers.arrayContaining;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.notNullValue;\n \n public class CustomRealmTests extends ESTestCase {\n-    public void testAuthenticate() {\n+\n+    public void testAuthenticateDefaultConfig() {\n         Settings globalSettings = Settings.builder().put(\"path.home\", createTempDir()).build();\n         final RealmConfig.RealmIdentifier realmIdentifier = new RealmConfig.RealmIdentifier(CustomRealm.TYPE, \"test\");\n         CustomRealm realm = new CustomRealm(new RealmConfig(\n             realmIdentifier,\n             Settings.builder().put(globalSettings).put(getFullSettingKey(realmIdentifier, RealmSettings.ORDER_SETTING), 0).build(),\n             TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)));\n-        SecureString password = CustomRealm.KNOWN_PW.clone();\n-        UsernamePasswordToken token = new UsernamePasswordToken(CustomRealm.KNOWN_USER, password);\n+        SecureString password = CustomRealm.DEFAULT_KNOWN_PW.clone();\n+        UsernamePasswordToken token = new UsernamePasswordToken(CustomRealm.DEFAULT_KNOWN_USER, password);\n+        PlainActionFuture<AuthenticationResult> plainActionFuture = new PlainActionFuture<>();\n+        realm.authenticate(token, plainActionFuture);\n+        User user = plainActionFuture.actionGet().getUser();\n+        assertThat(user, notNullValue());\n+        assertThat(List.of(user.roles()), equalTo(CustomRealm.DEFAULT_ROLES));\n+        assertThat(user.principal(), equalTo(CustomRealm.DEFAULT_KNOWN_USER));\n+    }\n+\n+    public void testAuthenticateCustomConfig() {\n+        final RealmConfig.RealmIdentifier realmIdentifier = new RealmConfig.RealmIdentifier(CustomRealm.TYPE, \"test\");\n+        MockSecureSettings secureSettings = new MockSecureSettings();\n+        secureSettings.setString(getFullSettingKey(realmIdentifier.getName(), CustomRealm.PASSWORD_SETTING), \"12345\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA0MzIyMA=="}, "originalCommit": {"oid": "5101a1573891df47b36fe644b965c0cb9cdb0286"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTMzMDE2OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/security-example-spi-extension/src/javaRestTest/java/org/elasticsearch/example/realm/CustomRealmIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0OToyMVrOHVQ8bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjoxMzowM1rOHcOufQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1OTc1Nw==", "bodyText": "This is rather a question for my learning. Why are these needed here? This configures the threadContext to always contain the right headers of username and password. Does that mean transport client can always connect without providing credentials?", "url": "https://github.com/elastic/elasticsearch/pull/62287#discussion_r492059757", "createdAt": "2020-09-21T13:49:21Z", "author": {"login": "ywangd"}, "path": "x-pack/qa/security-example-spi-extension/src/javaRestTest/java/org/elasticsearch/example/realm/CustomRealmIT.java", "diffHunk": "@@ -23,12 +23,16 @@\n  */\n public class CustomRealmIT extends ESRestTestCase {\n \n+    // These are configured in build.gradle\n+    public static final String USERNAME= \"test_user\";\n+    public static final String PASSWORD = \"secret_password\";\n+\n     @Override\n     protected Settings restClientSettings() {\n         return Settings.builder()\n-                .put(ThreadContext.PREFIX + \".\" + CustomRealm.USER_HEADER, CustomRealm.KNOWN_USER)\n-                .put(ThreadContext.PREFIX + \".\" + CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW.toString())\n-                .build();\n+            .put(ThreadContext.PREFIX + \".\" + CustomRealm.USER_HEADER, USERNAME)\n+            .put(ThreadContext.PREFIX + \".\" + CustomRealm.PW_HEADER, PASSWORD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5101a1573891df47b36fe644b965c0cb9cdb0286"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MzQ1Mw==", "bodyText": "This is for rest client not transport client, but it follow the same patterns as transport client (so it's a bit confusing).\nIn ESRestTestCase, rather than configure a client in code, the pattern is to configure the headers in a Settings object that is used to configure the client.\nThis is setting the username & password that the default client uses so that it can connect to the external cluster.", "url": "https://github.com/elastic/elasticsearch/pull/62287#discussion_r499363453", "createdAt": "2020-10-05T06:13:03Z", "author": {"login": "tvernum"}, "path": "x-pack/qa/security-example-spi-extension/src/javaRestTest/java/org/elasticsearch/example/realm/CustomRealmIT.java", "diffHunk": "@@ -23,12 +23,16 @@\n  */\n public class CustomRealmIT extends ESRestTestCase {\n \n+    // These are configured in build.gradle\n+    public static final String USERNAME= \"test_user\";\n+    public static final String PASSWORD = \"secret_password\";\n+\n     @Override\n     protected Settings restClientSettings() {\n         return Settings.builder()\n-                .put(ThreadContext.PREFIX + \".\" + CustomRealm.USER_HEADER, CustomRealm.KNOWN_USER)\n-                .put(ThreadContext.PREFIX + \".\" + CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW.toString())\n-                .build();\n+            .put(ThreadContext.PREFIX + \".\" + CustomRealm.USER_HEADER, USERNAME)\n+            .put(ThreadContext.PREFIX + \".\" + CustomRealm.PW_HEADER, PASSWORD)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1OTc1Nw=="}, "originalCommit": {"oid": "5101a1573891df47b36fe644b965c0cb9cdb0286"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1527, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}