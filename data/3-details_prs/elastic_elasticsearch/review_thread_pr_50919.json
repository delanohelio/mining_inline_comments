{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTM2MDM0", "number": 50919, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo0Mjo0M1rODXlWMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMjo1OFrODbp9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDU1NzI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo0Mjo0M1rOFc9MLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo1Mjo1OVrOFc9iZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNjk4OQ==", "bodyText": "there is an assumption that all the settings here are dynamic cluster settings.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r365906989", "createdAt": "2020-01-13T16:42:43Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -868,6 +892,7 @@ public void doClose() {\n     public static List<Setting.AffixSetting<?>> getSettings() {\n         return Arrays.asList(HOST_SETTING, TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING, AUTH_PASSWORD_SETTING, AUTH_USERNAME_SETTING,\n                 BULK_TIMEOUT_SETTING, CONNECTION_READ_TIMEOUT_SETTING, CONNECTION_TIMEOUT_SETTING, PIPELINE_CHECK_TIMEOUT_SETTING,\n-                PROXY_BASE_PATH_SETTING, SNIFF_ENABLED_SETTING, TEMPLATE_CHECK_TIMEOUT_SETTING, SSL_SETTING, HEADERS_SETTING);\n+                PROXY_BASE_PATH_SETTING, SNIFF_ENABLED_SETTING, TEMPLATE_CHECK_TIMEOUT_SETTING, SSL_SETTING, HEADERS_SETTING,\n+                SECURE_AUTH_PASSWORD_SETTING);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f3d348fa1ca74558526d98cfe58a67a4f74ed2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMjY3Nw==", "bodyText": "Ah, that explains it. Thank you, @albertzaharovits.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r365912677", "createdAt": "2020-01-13T16:52:59Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -868,6 +892,7 @@ public void doClose() {\n     public static List<Setting.AffixSetting<?>> getSettings() {\n         return Arrays.asList(HOST_SETTING, TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING, AUTH_PASSWORD_SETTING, AUTH_USERNAME_SETTING,\n                 BULK_TIMEOUT_SETTING, CONNECTION_READ_TIMEOUT_SETTING, CONNECTION_TIMEOUT_SETTING, PIPELINE_CHECK_TIMEOUT_SETTING,\n-                PROXY_BASE_PATH_SETTING, SNIFF_ENABLED_SETTING, TEMPLATE_CHECK_TIMEOUT_SETTING, SSL_SETTING, HEADERS_SETTING);\n+                PROXY_BASE_PATH_SETTING, SNIFF_ENABLED_SETTING, TEMPLATE_CHECK_TIMEOUT_SETTING, SSL_SETTING, HEADERS_SETTING,\n+                SECURE_AUTH_PASSWORD_SETTING);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNjk4OQ=="}, "originalCommit": {"oid": "11f3d348fa1ca74558526d98cfe58a67a4f74ed2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTk1ODEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoyMDoxMFrOFgHjsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMTo1OVrOFgmOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMjU3OA==", "bodyText": "Can you use a ConcurrentHashMap instead of explicit synchronization ?  perhaps : https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#replace-K-V- ?", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369222578", "createdAt": "2020-01-21T20:20:10Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -689,6 +694,29 @@ private static void configureTimeouts(final RestClientBuilder builder, final Con\n         builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout));\n     }\n \n+\n+    /**\n+     * Caches secure settings for use when dynamically configuring HTTP exporters\n+     * @param settings settings used for configuring HTTP exporter\n+     * @return names of HTTP exporters whose secure settings changed, if any\n+     */\n+    public static List<String> loadSettings(Settings settings) {\n+        final List<String> changedExporters = new ArrayList<>();\n+        for (final String namespace : SECURE_AUTH_PASSWORD_SETTING.getNamespaces(settings)) {\n+            final Setting<?> s = SECURE_AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(namespace);\n+            final String password = s.get(settings).toString();\n+            String existingPassword;\n+            synchronized (SECURE_AUTH_PASSWORDS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5OTYyMw==", "bodyText": "I tried using ConcurrentHashMap to avoid explicit locking but ConcurrentHashMap::replace() works only if there is an existing entry for the specified key. I need the K-V entry to be set whether there was an existing entry or not.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369699623", "createdAt": "2020-01-22T17:29:31Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -689,6 +694,29 @@ private static void configureTimeouts(final RestClientBuilder builder, final Con\n         builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout));\n     }\n \n+\n+    /**\n+     * Caches secure settings for use when dynamically configuring HTTP exporters\n+     * @param settings settings used for configuring HTTP exporter\n+     * @return names of HTTP exporters whose secure settings changed, if any\n+     */\n+    public static List<String> loadSettings(Settings settings) {\n+        final List<String> changedExporters = new ArrayList<>();\n+        for (final String namespace : SECURE_AUTH_PASSWORD_SETTING.getNamespaces(settings)) {\n+            final Setting<?> s = SECURE_AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(namespace);\n+            final String password = s.get(settings).toString();\n+            String existingPassword;\n+            synchronized (SECURE_AUTH_PASSWORDS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMjU3OA=="}, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMDI4Ng==", "bodyText": "Simple ConcurrentHashMap::put() should work here - it does return previous value and sets entry whether there was one before or not", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369720286", "createdAt": "2020-01-22T18:11:43Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -689,6 +694,29 @@ private static void configureTimeouts(final RestClientBuilder builder, final Con\n         builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout));\n     }\n \n+\n+    /**\n+     * Caches secure settings for use when dynamically configuring HTTP exporters\n+     * @param settings settings used for configuring HTTP exporter\n+     * @return names of HTTP exporters whose secure settings changed, if any\n+     */\n+    public static List<String> loadSettings(Settings settings) {\n+        final List<String> changedExporters = new ArrayList<>();\n+        for (final String namespace : SECURE_AUTH_PASSWORD_SETTING.getNamespaces(settings)) {\n+            final Setting<?> s = SECURE_AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(namespace);\n+            final String password = s.get(settings).toString();\n+            String existingPassword;\n+            synchronized (SECURE_AUTH_PASSWORDS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMjU3OA=="}, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTEyNA==", "bodyText": "Ah, right, that will work here.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369725124", "createdAt": "2020-01-22T18:21:59Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -689,6 +694,29 @@ private static void configureTimeouts(final RestClientBuilder builder, final Con\n         builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout));\n     }\n \n+\n+    /**\n+     * Caches secure settings for use when dynamically configuring HTTP exporters\n+     * @param settings settings used for configuring HTTP exporter\n+     * @return names of HTTP exporters whose secure settings changed, if any\n+     */\n+    public static List<String> loadSettings(Settings settings) {\n+        final List<String> changedExporters = new ArrayList<>();\n+        for (final String namespace : SECURE_AUTH_PASSWORD_SETTING.getNamespaces(settings)) {\n+            final Setting<?> s = SECURE_AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(namespace);\n+            final String password = s.get(settings).toString();\n+            String existingPassword;\n+            synchronized (SECURE_AUTH_PASSWORDS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMjU3OA=="}, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjAwNTY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDozNzoxOVrOFgIA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDozNzoxOVrOFgIA_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMDA3OQ==", "bodyText": "If you use a ConcurrentHashMap for SECURE_AUTH_PASSWORDS you should be able to use getOrDefault instead of explicit synchronization.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369230079", "createdAt": "2020-01-21T20:37:19Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -700,7 +728,13 @@ private static void configureTimeouts(final RestClientBuilder builder, final Con\n     @Nullable\n     private static CredentialsProvider createCredentialsProvider(final Config config) {\n         final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings());\n-        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings());\n+\n+        String password;\n+        synchronized (SECURE_AUTH_PASSWORDS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjAzNzAyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo0ODozNFrOFgIUgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzozODoyMVrOFgk8uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzNTA3NA==", "bodyText": "Passwords as String should be avoided where possible due to help avoid leaking to heap since gc happens when ever it feel like it. I think you can use SecureString instead and then close it out to ensure it zero'd out when you are done.\nAlso since it looks like you are using this for equality, can you just hash it and store the hash in the map ?", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369235074", "createdAt": "2020-01-21T20:48:34Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -401,6 +405,7 @@ public void validate(String password, Map<Setting<?>, Object> settings) {\n      */\n     private final AtomicBoolean clusterAlertsAllowed = new AtomicBoolean(false);\n \n+    private static final Map<String, String> SECURE_AUTH_PASSWORDS = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwNDEyMA==", "bodyText": "I could change it to a Map<String, SecureString> but I couldn't close any of the SecureString instances because the HTTP exporter has to be recreated (so I need the full value, not just an equality check) any time any of its settings, whether secure or not, change. Unfortunately, this is unavoidable for settings that are both secure and reloadable since the keystore itself is not accessible outside of node startup and reload events. The security folks directed me to\n\n  \n    \n      elasticsearch/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/NotificationService.java\n    \n    \n        Lines 167 to 225\n      in\n      c3b5f71\n    \n    \n    \n    \n\n        \n          \n                * Extracts the {@link SecureSettings}` out of the passed in {@link Settings} object. The {@code Setting} argument has to have the \n        \n\n        \n          \n                * {@code SecureSettings} open/available. Normally {@code SecureSettings} are available only under specific callstacks (eg. during node \n        \n\n        \n          \n                * initialization or during a `reload` call). The returned copy can be reused freely as it will never be closed (this is a bit of \n        \n\n        \n          \n                * cheating, but it is necessary in this specific circumstance). Only works for secure settings of type string (not file). \n        \n\n        \n          \n                *  \n        \n\n        \n          \n                * @param source \n        \n\n        \n          \n                *            A {@code Settings} object with its {@code SecureSettings} open/available. \n        \n\n        \n          \n                * @param securePluginSettings \n        \n\n        \n          \n                *            The list of settings to copy. \n        \n\n        \n          \n                * @return A copy of the {@code SecureSettings} of the passed in {@code Settings} argument. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               private static SecureSettings extractSecureSettings(Settings source, List<Setting<?>> securePluginSettings) \n        \n\n        \n          \n                       throws GeneralSecurityException { \n        \n\n        \n          \n                   // get the secure settings out \n        \n\n        \n          \n                   final SecureSettings sourceSecureSettings = Settings.builder().put(source, true).getSecureSettings(); \n        \n\n        \n          \n                   // filter and cache them... \n        \n\n        \n          \n                   final Map<String, Tuple<SecureString, byte[]>> cache = new HashMap<>(); \n        \n\n        \n          \n                   if (sourceSecureSettings != null && securePluginSettings != null) { \n        \n\n        \n          \n                       for (final String settingKey : sourceSecureSettings.getSettingNames()) { \n        \n\n        \n          \n                           for (final Setting<?> secureSetting : securePluginSettings) { \n        \n\n        \n          \n                               if (secureSetting.match(settingKey)) { \n        \n\n        \n          \n                                   cache.put(settingKey, \n        \n\n        \n          \n                                           new Tuple<>(sourceSecureSettings.getString(settingKey), sourceSecureSettings.getSHA256Digest(settingKey))); \n        \n\n        \n          \n                               } \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   return new SecureSettings() { \n        \n\n        \n          \n            \n        \n\n        \n          \n                       @Override \n        \n\n        \n          \n                       public boolean isLoaded() { \n        \n\n        \n          \n                           return true; \n        \n\n        \n          \n                       } \n        \n\n        \n          \n            \n        \n\n        \n          \n                       @Override \n        \n\n        \n          \n                       public SecureString getString(String setting) { \n        \n\n        \n          \n                           return cache.get(setting).v1(); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n            \n        \n\n        \n          \n                       @Override \n        \n\n        \n          \n                       public Set<String> getSettingNames() { \n        \n\n        \n          \n                           return cache.keySet(); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n            \n        \n\n        \n          \n                       @Override \n        \n\n        \n          \n                       public InputStream getFile(String setting) { \n        \n\n        \n          \n                           throw new IllegalStateException(\"A NotificationService setting cannot be File.\"); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n            \n        \n\n        \n          \n                       @Override \n        \n\n        \n          \n                       public byte[] getSHA256Digest(String setting) { \n        \n\n        \n          \n                           return cache.get(setting).v2(); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n            \n        \n\n        \n          \n                       @Override \n        \n\n        \n          \n                       public void close() throws IOException { \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   }; \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nwhere they did essentially the same thing for the secure settings in watcher notifications.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369704120", "createdAt": "2020-01-22T17:38:21Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -401,6 +405,7 @@ public void validate(String password, Map<Setting<?>, Object> settings) {\n      */\n     private final AtomicBoolean clusterAlertsAllowed = new AtomicBoolean(false);\n \n+    private static final Map<String, String> SECURE_AUTH_PASSWORDS = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzNTA3NA=="}, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA2MDY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo1NzoxNFrOFgIjHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo1NzoxNFrOFgIjHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzODgxNA==", "bodyText": "Can you leave a quick comment here (maybe with a GH issue link?) to why you can not validate the password is set ?", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369238814", "createdAt": "2020-01-21T20:57:14Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -232,8 +227,7 @@ public void validate(final String username, final Map<Setting<?>, Object> settin\n                                         HttpExporter.AUTH_USERNAME_SETTING.getConcreteSetting(key));\n \n                                 final List<Setting<?>> settings = List.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA2MTc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo1NzozN1rOFgIj0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo1NzozN1rOFgIj0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzODk5NQ==", "bodyText": "ditto about SecureString", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369238995", "createdAt": "2020-01-21T20:57:37Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporter.java", "diffHunk": "@@ -689,6 +694,29 @@ private static void configureTimeouts(final RestClientBuilder builder, final Con\n         builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout));\n     }\n \n+\n+    /**\n+     * Caches secure settings for use when dynamically configuring HTTP exporters\n+     * @param settings settings used for configuring HTTP exporter\n+     * @return names of HTTP exporters whose secure settings changed, if any\n+     */\n+    public static List<String> loadSettings(Settings settings) {\n+        final List<String> changedExporters = new ArrayList<>();\n+        for (final String namespace : SECURE_AUTH_PASSWORD_SETTING.getNamespaces(settings)) {\n+            final Setting<?> s = SECURE_AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(namespace);\n+            final String password = s.get(settings).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA4MDk4OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/monitoring-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNDozMFrOFgIvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNDozMFrOFgIvlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MjAwNQ==", "bodyText": "would auth.secure_password be more inline with other secure settings ?", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369242005", "createdAt": "2020-01-21T21:04:30Z", "author": {"login": "jakelandis"}, "path": "docs/reference/settings/monitoring-settings.asciidoc", "diffHunk": "@@ -200,9 +200,14 @@ xpack.monitoring.exporters:\n \n The username is required if a `auth.password` is supplied.\n \n+`secure_auth.password` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n+\n+The password for the `auth.username`. May not be specified with `auth.password`.\n+\n `auth.password`::\n \n-The password for the `auth.username`.\n+The password for the `auth.username`. May not be specified with `secure_auth.password`. This setting is deprecated[7.6.0, Use\n+`secure_auth.password` instead.].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE3NTA4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozOTo1OVrOFgJrMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo0Mjo0N1rOFglFSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzI2Nw==", "bodyText": "Do plugins get reloaded when the secure settings change ?", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369257267", "createdAt": "2020-01-21T21:39:59Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java", "diffHunk": "@@ -178,4 +180,13 @@ boolean isEnabled() {\n         final String exportersKey = \"xpack.monitoring.exporters.\";\n         return List.of(exportersKey + \"*.auth.*\", exportersKey + \"*.ssl.*\");\n     }\n+\n+    @Override\n+    public void reload(Settings settings) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwNjMxMw==", "bodyText": "Plugins that implement ReloadablePlugin have their reload methods called any time the reload_secure_settings endpoint is called.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369706313", "createdAt": "2020-01-22T17:42:47Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java", "diffHunk": "@@ -178,4 +180,13 @@ boolean isEnabled() {\n         final String exportersKey = \"xpack.monitoring.exporters.\";\n         return List.of(exportersKey + \"*.auth.*\", exportersKey + \"*.ssl.*\");\n     }\n+\n+    @Override\n+    public void reload(Settings settings) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzI2Nw=="}, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjIxNjk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporterTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1NToyNVrOFgKF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1NToyNVrOFgKF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NDA4MQ==", "bodyText": "Could you add some unit tests for changing the secure setting and ensure it is changed (or no-op) as well as trying to set this for a non-http type setting ? See org.elasticsearch.xpack.watcher.notification.NotificationService for some examples.\nIdeally, we would also have Integration tests, but I didn't see any framework already setup to read from the keystore for a Integration tests (and an almost complete lack of Rest tests) :(", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r369264081", "createdAt": "2020-01-21T21:55:25Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporterTests.java", "diffHunk": "@@ -346,6 +349,10 @@ public void testCreateRestClient() throws IOException {\n \n         // doesn't explode\n         HttpExporter.createRestClient(config, sslService, listener).close();\n+        if (useBasicAuth) {\n+            assertWarnings(\"[xpack.monitoring.exporters._http.auth.password] setting was deprecated in Elasticsearch and will be \" +\n+                \"removed in a future release! See the breaking changes documentation for the next major version.\");\n+        }\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99811a2354763be25ce85ea5c7b8bd5bb933b654"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzIzNjYzOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/monitoring-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoxNzoxNVrOFjQu4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMDoyM1rOFjQ1Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxODYyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `auth.secure_password` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n          \n          \n            \n            `auth.secure_password` (<<secure-settings,Secure>>, <<reloadable-secure-settings,reloadable>>)::", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r372518627", "createdAt": "2020-01-29T17:17:15Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/monitoring-settings.asciidoc", "diffHunk": "@@ -198,11 +198,16 @@ xpack.monitoring.exporters:\n \n `auth.username`::\n \n-The username is required if a `auth.password` is supplied.\n+The username is required if `auth.secure_password` or `auth.password` is supplied.\n+\n+`auth.secure_password` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7974e774aa4a974eaeadeadda7d65b82e5f548e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMDI4Ng==", "bodyText": "A link to this page should also be added in the list at the bottom of https://www.elastic.co/guide/en/elasticsearch/reference/master/secure-settings.html#reloadable-secure-settings", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r372520286", "createdAt": "2020-01-29T17:20:23Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/monitoring-settings.asciidoc", "diffHunk": "@@ -198,11 +198,16 @@ xpack.monitoring.exporters:\n \n `auth.username`::\n \n-The username is required if a `auth.password` is supplied.\n+The username is required if `auth.secure_password` or `auth.password` is supplied.\n+\n+`auth.secure_password` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxODYyNw=="}, "originalCommit": {"oid": "a7974e774aa4a974eaeadeadda7d65b82e5f548e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzI1NTM3OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/monitoring-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMjo1OFrOFjQ6pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMjo1OFrOFjQ6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMTYzNw==", "bodyText": "In general, we put the conditional part of the sentence at the beginning so folks can stop reading if it doesn't apply to them.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The password for the `auth.username`. This setting is ignored if `auth.secure_password` is also specified. This setting is\n          \n          \n            \n            The password for the `auth.username`. If `auth.secure_password` is also specified, this setting is ignored.", "url": "https://github.com/elastic/elasticsearch/pull/50919#discussion_r372521637", "createdAt": "2020-01-29T17:22:58Z", "author": {"login": "lcawl"}, "path": "docs/reference/settings/monitoring-settings.asciidoc", "diffHunk": "@@ -198,11 +198,16 @@ xpack.monitoring.exporters:\n \n `auth.username`::\n \n-The username is required if a `auth.password` is supplied.\n+The username is required if `auth.secure_password` or `auth.password` is supplied.\n+\n+`auth.secure_password` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n+\n+The password for the `auth.username`. Takes precedence over `auth.password` if it is also specified.\n \n `auth.password`::\n \n-The password for the `auth.username`.\n+The password for the `auth.username`. This setting is ignored if `auth.secure_password` is also specified. This setting is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7974e774aa4a974eaeadeadda7d65b82e5f548e"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4663, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}