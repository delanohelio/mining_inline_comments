{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDQzMDgz", "number": 62653, "title": "[DOCS] Add docs for runtime fields", "bodyText": "Adding a new documentation page for runtime fields. Also adding a short description of runtime fields on the field data type page.\nRelates to #59332", "createdAt": "2020-09-18T17:17:21Z", "url": "https://github.com/elastic/elasticsearch/pull/62653", "merged": true, "mergeCommit": {"oid": "bce1081c73c456c505421ef496d1ee140873bfa6"}, "closed": true, "closedAt": "2020-12-09T22:54:59Z", "author": {"login": "lockewritesdocs"}, "timelineItems": {"totalCount": 68, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI6NTLgH2gAyNDg5NDQzMDgzOjFlZWJlODQ2MjAzODZiMGQwNTBkMGVkZjJmMmIwNGJlZjI1OTliMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkmouXgH2gAyNDg5NDQzMDgzOmMxYjYxZWUxZDcwOWZhMGI2NDY5OWU4ODg2M2JmNDg1ODY1MTI3NmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1eebe84620386b0d050d0edf2f2b04bef2599b08", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/1eebe84620386b0d050d0edf2f2b04bef2599b08", "committedDate": "2020-09-14T21:37:39Z", "message": "First steps in docs for runtime fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1c042704be7393445f1a985916aee7abedcdd41", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/e1c042704be7393445f1a985916aee7abedcdd41", "committedDate": "2020-09-14T21:38:51Z", "message": "Adding new page for runtime fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47bb110f54f6f8e331b2a07981e24a1e19b55f1c", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/47bb110f54f6f8e331b2a07981e24a1e19b55f1c", "committedDate": "2020-09-15T14:21:25Z", "message": "Adding page for runtime fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c97b926552d746d227b8b77b1622a9238c71da6", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c97b926552d746d227b8b77b1622a9238c71da6", "committedDate": "2020-09-17T21:28:29Z", "message": "Adding more to the runtime fields topic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee8a16fe17d775bd068467ccaa05ed1bf3e63dac", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/ee8a16fe17d775bd068467ccaa05ed1bf3e63dac", "committedDate": "2020-09-18T17:15:57Z", "message": "Adding parameters and retrieval options for runtime fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7", "committedDate": "2020-09-18T17:51:50Z", "message": "Adding TESTSETUP for index creation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjQxNjU1", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-492641655", "createdAt": "2020-09-21T14:08:53Z", "commit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowODo1M1rOHVR0TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozMzowM1rOHVZPXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NDA2MA==", "bodyText": "I feel like talking about \"Lucene\" and doc_values is very technical for a high level description.\nI wonder if it'd be better to say that we don't build any fancy data structures for them up front but that we still support searching and aggregating on them. Saying that there is a performance cost at search time for this. Interestingly that performance cost varies in very unique and interesting ways, so it might be good to be fairly vague about it.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492074060", "createdAt": "2020-09-21T14:08:53Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -124,6 +125,23 @@ the <<analysis-standard-analyzer,`standard` analyzer>>, the\n This is the purpose of _multi-fields_. Most field types support multi-fields\n via the <<multi-fields>> parameter.\n \n+[discrete]\n+=== Runtime\n+Oftentimes, you just want to make your data available to {es} without indexing\n+or preprocessing. _Runtime fields_ extend the flexibility of the\n+<<search-search,search API>> to quickly make data searchable, even with minimal\n+structure.\n+\n+// tag::runtime-fields-description[]\n+Runtime fields are not indexed and do have <<doc-values,doc_values>>, meaning\n+Lucene is unaware of their existence. However, runtime fields are accessible\n+from the search API like any other field that has `doc_values` and is\n+searchable. You can retrieve and query these fields, as well as aggregate and\n+sort on them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5MDc5MQ==", "bodyText": "They do have access.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492190791", "createdAt": "2020-09-21T16:25:32Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,94 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+include::{es-ref-dir}/mapping/types.asciidoc[tag=runtime-fields-description]\n+\n+// Each runtime field is of the `runtime` data type, and has its own\n+// <<mapping-types,field type>>, such as `boolean`, `long`, or `keyword`. The\n+// field type identifies the data type In\n+// the following example, the data type is `runtime` and the runtime field type is\n+// `keyword`.\n+\n+==== Specifying runtime fields\n+Runtime fields do not have access to the\n+<<mapping-source-field,`_source` field>>. You specify runtime fields in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5MTc1Mw==", "bodyText": "This is true, but it might not be the right time to talk about it. To be honest we'd prefer folks use the doc way of accessing fields if at all possible and only reach for _source if it is, like, their only choice.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492191753", "createdAt": "2020-09-21T16:27:01Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,94 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+include::{es-ref-dir}/mapping/types.asciidoc[tag=runtime-fields-description]\n+\n+// Each runtime field is of the `runtime` data type, and has its own\n+// <<mapping-types,field type>>, such as `boolean`, `long`, or `keyword`. The\n+// field type identifies the data type In\n+// the following example, the data type is `runtime` and the runtime field type is\n+// `keyword`.\n+\n+==== Specifying runtime fields\n+Runtime fields do not have access to the\n+<<mapping-source-field,`_source` field>>. You specify runtime fields in the\n+mapping by <<modules-scripting-using,defining a script>>, which always has\n+access to the `source` field. At search time, the script runs and generates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5MjM0Nw==", "bodyText": "Runtime fields with the runtime_type of date can accept format parameter that functions exactly as the format parameter does on the date field type.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492192347", "createdAt": "2020-09-21T16:27:57Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,94 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+include::{es-ref-dir}/mapping/types.asciidoc[tag=runtime-fields-description]\n+\n+// Each runtime field is of the `runtime` data type, and has its own\n+// <<mapping-types,field type>>, such as `boolean`, `long`, or `keyword`. The\n+// field type identifies the data type In\n+// the following example, the data type is `runtime` and the runtime field type is\n+// `keyword`.\n+\n+==== Specifying runtime fields\n+Runtime fields do not have access to the\n+<<mapping-source-field,`_source` field>>. You specify runtime fields in the\n+mapping by <<modules-scripting-using,defining a script>>, which always has\n+access to the `source` field. At search time, the script runs and generates\n+values for each scripted field.\n+\n+The script in the following request extracts the day of the week from the\n+`timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index/_mappings\n+{\n+  \"properties\" : {\n+    \"day_of_week\" : {\n+      \"type\" : \"runtime\", <1>\n+      \"runtime_type\" : \"keyword\", <2>\n+      \"script\" : {\n+        \"source\" : \"emit(doc['timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-params]]\n+==== Parameters for `runtime` fields\n+Runtime fields accept the following parameters:\n+\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NDM3NA==", "bodyText": "I think it might be more compelling to say something more active like, \"Use the fields parameter on the _search API to fetch the values of runtime fields. This API works for all fields, even those that were not sent as part of the original _source.\"", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492194374", "createdAt": "2020-09-21T16:30:54Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,94 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+include::{es-ref-dir}/mapping/types.asciidoc[tag=runtime-fields-description]\n+\n+// Each runtime field is of the `runtime` data type, and has its own\n+// <<mapping-types,field type>>, such as `boolean`, `long`, or `keyword`. The\n+// field type identifies the data type In\n+// the following example, the data type is `runtime` and the runtime field type is\n+// `keyword`.\n+\n+==== Specifying runtime fields\n+Runtime fields do not have access to the\n+<<mapping-source-field,`_source` field>>. You specify runtime fields in the\n+mapping by <<modules-scripting-using,defining a script>>, which always has\n+access to the `source` field. At search time, the script runs and generates\n+values for each scripted field.\n+\n+The script in the following request extracts the day of the week from the\n+`timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index/_mappings\n+{\n+  \"properties\" : {\n+    \"day_of_week\" : {\n+      \"type\" : \"runtime\", <1>\n+      \"runtime_type\" : \"keyword\", <2>\n+      \"script\" : {\n+        \"source\" : \"emit(doc['timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-params]]\n+==== Parameters for `runtime` fields\n+Runtime fields accept the following parameters:\n+\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n+\n+==== Retrieving runtime fields\n+Because runtime fields are not part of the `_source` field, they are not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTY3Nw==", "bodyText": "I'm not sure I'd add this paragraph to the docs at all, or at least, not with \"retrieving\". It is an important bit of information if you are building an application that consumes Elasticsearch and is super general. I think that is, mostly Kibana. My gut feeling is that most applications that consume Elasticsearch manage the mapping themselves and don't typically use the field capabilities API at all. If that is true, then I think this bit of information belongs as a note on the field caps api page.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492195677", "createdAt": "2020-09-21T16:33:03Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,94 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+include::{es-ref-dir}/mapping/types.asciidoc[tag=runtime-fields-description]\n+\n+// Each runtime field is of the `runtime` data type, and has its own\n+// <<mapping-types,field type>>, such as `boolean`, `long`, or `keyword`. The\n+// field type identifies the data type In\n+// the following example, the data type is `runtime` and the runtime field type is\n+// `keyword`.\n+\n+==== Specifying runtime fields\n+Runtime fields do not have access to the\n+<<mapping-source-field,`_source` field>>. You specify runtime fields in the\n+mapping by <<modules-scripting-using,defining a script>>, which always has\n+access to the `source` field. At search time, the script runs and generates\n+values for each scripted field.\n+\n+The script in the following request extracts the day of the week from the\n+`timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index/_mappings\n+{\n+  \"properties\" : {\n+    \"day_of_week\" : {\n+      \"type\" : \"runtime\", <1>\n+      \"runtime_type\" : \"keyword\", <2>\n+      \"script\" : {\n+        \"source\" : \"emit(doc['timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-params]]\n+==== Parameters for `runtime` fields\n+Runtime fields accept the following parameters:\n+\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n+\n+==== Retrieving runtime fields\n+Because runtime fields are not part of the `_source` field, they are not\n+returned in search hits by default. You can request runtime fields by using the\n+<<search-fields,`fields`>> parameter, or by using the\n+<<docvalue-fields,`docvalue_fields`>> parameter to return `doc_values` for one\n+or more fields in the search response.\n+\n+Use the <<search-field-caps,field capabilities API>> to return runtime fields\n+like any other field. For example, a runtime field with a `runtime_type` of\n+`keyword` returns as any other field that belongs to the `keyword` family.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/bb822841debbcb14d0cd43b5ed38e989d6fc82f9", "committedDate": "2020-09-21T21:50:02Z", "message": "Incorporating review feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODgwODQ5", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-492880849", "createdAt": "2020-09-21T18:36:49Z", "commit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozNjo0OVrOHVdoJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjowNjowNlrOHVkCXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NzU1OA==", "bodyText": "What's the reasoning for the change here?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492267558", "createdAt": "2020-09-21T18:36:49Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -108,11 +108,12 @@ as-you-type completion.\n === Arrays\n In {es}, arrays do not require a dedicated field data type. Any field can contain\n zero or more values by default, however, all values in the array must be of the\n-same field type. See <<array>>.\n+same field type.\n+\n+See <<array>> to learn more.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NzU2Ng==", "bodyText": "We need an explicit anchor ID here.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492267566", "createdAt": "2020-09-21T18:36:50Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -124,6 +125,23 @@ the <<analysis-standard-analyzer,`standard` analyzer>>, the\n This is the purpose of _multi-fields_. Most field types support multi-fields\n via the <<multi-fields>> parameter.\n \n+[discrete]\n+=== Runtime", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56bde04baa1f7e8b9e4a1769b6dc9ad7a8194b7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2NzY2NQ==", "bodyText": "I feel like this is too technical. From a high level, what are the problems runtime fields solve? Here's a quick draft to give you an idea of what I'm talking about. You probably shouldn't use it without significant refinement and more context.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Oftentimes, you just want to make your data available to {es} without indexing\n          \n          \n            \n            or preprocessing. _Runtime fields_ extend the flexibility of the\n          \n          \n            \n            <<search-search,search API>> to quickly make data searchable, even with minimal\n          \n          \n            \n            structure.\n          \n          \n            \n            \n          \n          \n            \n            Instead of indexing all of your data, you can use runtime fields to\n          \n          \n            \n            search and aggregate on your data at query time. Runtime fields can incur\n          \n          \n            \n            performance costs at runtime depending on the runtime type, but don't use the\n          \n          \n            \n            disk space that is typically required to index your data. By removing the\n          \n          \n            \n            requirement to index everything, you gain the flexibility of choosing which\n          \n          \n            \n            fields to index.\n          \n          \n            \n            \n          \n          \n            \n            See <<runtime>> to learn more.\n          \n          \n            \n            {es} indexes most field types by default. This allows for faster searches, but\n          \n          \n            \n            it can slow ingest and uses more disk space.\n          \n          \n            \n            \n          \n          \n            \n            If you rarely run searches or aren't sure what fields you'll need to search, you\n          \n          \n            \n            can disable indexing and use runtime fields instead. Runtime fields use a script\n          \n          \n            \n            to extract or compute field values from your unindexed data at search time. Runtime\n          \n          \n            \n            fields use less disk space and increase the flexibility of your data at the\n          \n          \n            \n            cost of search performance. See <<runtime>>.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492367665", "createdAt": "2020-09-21T21:54:33Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -124,6 +125,22 @@ the <<analysis-standard-analyzer,`standard` analyzer>>, the\n This is the purpose of _multi-fields_. Most field types support multi-fields\n via the <<multi-fields>> parameter.\n \n+[discrete]\n+=== Runtime\n+Oftentimes, you just want to make your data available to {es} without indexing\n+or preprocessing. _Runtime fields_ extend the flexibility of the\n+<<search-search,search API>> to quickly make data searchable, even with minimal\n+structure.\n+\n+Instead of indexing all of your data, you can use runtime fields to\n+search and aggregate on your data at query time. Runtime fields can incur\n+performance costs at runtime depending on the runtime type, but don't use the\n+disk space that is typically required to index your data. By removing the\n+requirement to index everything, you gain the flexibility of choosing which\n+fields to index.\n+\n+See <<runtime>> to learn more.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3MDQ4OQ==", "bodyText": "Two concerns here:\n\nThis shouldn't be a rehash of the field type description. That's just a quick, condensed preview. On this page, you should take some space to better lay out the problem, give more specific use cases, and cover considerations.\nThe info hierarchy is a little off. Here's how I'd tackle it in order:\n\n\nWhat problems do runtime fields solve? How?\nWhat are the tradeoffs of using runtime fields? E.g., lower storage costs, faster indexing vs. slower search\nWhen are runtime fields commonly used? What use cases? E.g., time series data, logging, etc.\nWhat are some interesting ways I could use it? Examples?\nWhat are some considerations before I use it? Are there fields I should not use as runtime fields?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492370489", "createdAt": "2020-09-21T22:01:30Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,90 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+Runtime fields are not indexed, but are accessible from the search API like any\n+other field that has <<doc-values,doc_values>> and is searchable. You can\n+retrieve and query these fields, as well as aggregate and\n+sort on them.\n+\n+NOTE: Runtime fields can be incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3MTM3OQ==", "bodyText": "We typically call this \"mapping a field.\" \"Specifying\" doesn't feel right.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492371379", "createdAt": "2020-09-21T22:03:24Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,90 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+Runtime fields are not indexed, but are accessible from the search API like any\n+other field that has <<doc-values,doc_values>> and is searchable. You can\n+retrieve and query these fields, as well as aggregate and\n+sort on them.\n+\n+NOTE: Runtime fields can be incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>.\n+\n+==== Specifying runtime fields\n+You specify runtime fields in the mapping by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3MTM4OA==", "bodyText": "Mapping for other field types is almost always done upfront. You typically create a mapping as part of an index template or when you create an index. That means it happens before you start indexing data. To be useful, runtime fields are mapped after you start indexing data.\nI think it'd be useful to show the user how the raw data is typically stored in ES before the runtime field is created. An in-depth example would be good. It may also be helpful to show an example of how a runtime field could replace an existing ingest pipeline, etc.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492371388", "createdAt": "2020-09-21T22:03:25Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,90 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+Runtime fields are not indexed, but are accessible from the search API like any\n+other field that has <<doc-values,doc_values>> and is searchable. You can\n+retrieve and query these fields, as well as aggregate and\n+sort on them.\n+\n+NOTE: Runtime fields can be incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>.\n+\n+==== Specifying runtime fields\n+You specify runtime fields in the mapping by\n+<<modules-scripting-using,defining a script>>. At search time, the script runs\n+and generates values for each scripted field.\n+\n+The script in the following request extracts the day of the week from the\n+`timestamp` field, which is defined as a `date` data type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3MTY4MA==", "bodyText": "I'd move this up as part of the example.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492371680", "createdAt": "2020-09-21T22:04:04Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,90 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+Runtime fields are not indexed, but are accessible from the search API like any\n+other field that has <<doc-values,doc_values>> and is searchable. You can\n+retrieve and query these fields, as well as aggregate and\n+sort on them.\n+\n+NOTE: Runtime fields can be incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>.\n+\n+==== Specifying runtime fields\n+You specify runtime fields in the mapping by\n+<<modules-scripting-using,defining a script>>. At search time, the script runs\n+and generates values for each scripted field.\n+\n+The script in the following request extracts the day of the week from the\n+`timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index/_mappings\n+{\n+  \"properties\" : {\n+    \"day_of_week\" : {\n+      \"type\" : \"runtime\", <1>\n+      \"runtime_type\" : \"keyword\", <2>\n+      \"script\" : {\n+        \"source\" : \"emit(doc['timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-params]]\n+==== Parameters for `runtime` fields\n+Runtime fields accept the following parameters:\n+\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+==== Retrieving runtime fields\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. This API works for all fields, even those that\n+were not sent as part of the original `_source`.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that the previous request defined in the mapping.\n+\n+[source,console]\n+----\n+GET /my-index/_search\n+{\n+  \"aggs\": {\n+    \"days_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3MjQ2OA==", "bodyText": "Needs an explicit anchor ID.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492372468", "createdAt": "2020-09-21T22:05:52Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,90 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+Runtime fields are not indexed, but are accessible from the search API like any\n+other field that has <<doc-values,doc_values>> and is searchable. You can\n+retrieve and query these fields, as well as aggregate and\n+sort on them.\n+\n+NOTE: Runtime fields can be incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>.\n+\n+==== Specifying runtime fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3MjU3NQ==", "bodyText": "Need an explicit anchor ID.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r492372575", "createdAt": "2020-09-21T22:06:06Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,90 @@\n+[[runtime]]\n+=== Runtime\n+\n+////\n+[source,console]\n+----\n+PUT /my-index\n+----\n+// TESTSETUP\n+////\n+\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at runtime without indexing your data. This\n+flexibility allows you to more quickly ingest raw data into the Elastic Stack\n+and immediately access it. By dynamically evaluating runtime fields at query\n+time, you can choose which fields to index and optimize disk space.\n+\n+Runtime fields are not indexed, but are accessible from the search API like any\n+other field that has <<doc-values,doc_values>> and is searchable. You can\n+retrieve and query these fields, as well as aggregate and\n+sort on them.\n+\n+NOTE: Runtime fields can be incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>.\n+\n+==== Specifying runtime fields\n+You specify runtime fields in the mapping by\n+<<modules-scripting-using,defining a script>>. At search time, the script runs\n+and generates values for each scripted field.\n+\n+The script in the following request extracts the day of the week from the\n+`timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index/_mappings\n+{\n+  \"properties\" : {\n+    \"day_of_week\" : {\n+      \"type\" : \"runtime\", <1>\n+      \"runtime_type\" : \"keyword\", <2>\n+      \"script\" : {\n+        \"source\" : \"emit(doc['timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-params]]\n+==== Parameters for `runtime` fields\n+Runtime fields accept the following parameters:\n+\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+==== Retrieving runtime fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb822841debbcb14d0cd43b5ed38e989d6fc82f9"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2cbf0a7f99b604fa825ab1ffc7cb4360793cbe5", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/b2cbf0a7f99b604fa825ab1ffc7cb4360793cbe5", "committedDate": "2020-09-22T21:16:51Z", "message": "Incorporating reviewer feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d119cbd38e00cf698d5f3d675644c215d85e16c4", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d119cbd38e00cf698d5f3d675644c215d85e16c4", "committedDate": "2020-09-23T20:50:58Z", "message": "Adding examples for runtime fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a287895592edf4a5bb9c2a2033eb7a6080c2997b", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/a287895592edf4a5bb9c2a2033eb7a6080c2997b", "committedDate": "2020-09-24T20:32:08Z", "message": "Adding more context and simplifying the example."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce0fcdd44bce577483856dbacfa83cbded7d33a6", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/ce0fcdd44bce577483856dbacfa83cbded7d33a6", "committedDate": "2020-09-28T14:50:41Z", "message": "Merge branch 'master' into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b533f7a25ed53d78123f83164cf493555f72072", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b533f7a25ed53d78123f83164cf493555f72072", "committedDate": "2020-09-28T15:09:01Z", "message": "Changing timestamp to @timestamp throughout."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d8551ced48c4f162889fa7b633d2ba76d6d311", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d2d8551ced48c4f162889fa7b633d2ba76d6d311", "committedDate": "2020-09-28T17:08:29Z", "message": "Removing duplicate @timestamp field."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "282a77756fac10932ad7239da5135edca3567dca", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/282a77756fac10932ad7239da5135edca3567dca", "committedDate": "2020-09-28T17:25:13Z", "message": "Expanding example to hopefully fix CI builds."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50a30f68035da0c6c253df268f0d31f6cd708357", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/50a30f68035da0c6c253df268f0d31f6cd708357", "committedDate": "2020-09-28T18:21:46Z", "message": "Adding skip test for result."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4c6c7e5d7012504b27ebf3ac80980c70b2debf", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/eb4c6c7e5d7012504b27ebf3ac80980c70b2debf", "committedDate": "2020-09-28T18:32:02Z", "message": "Merge branch 'master' into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a3d503c655ecaa2736b816e4e316fd3885a70e", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8a3d503c655ecaa2736b816e4e316fd3885a70e", "committedDate": "2020-09-28T18:41:09Z", "message": "Adding missing callout."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796a10f6c824fa781c53712baf9fb8bcfb18e832", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/796a10f6c824fa781c53712baf9fb8bcfb18e832", "committedDate": "2020-09-28T18:41:35Z", "message": "Merge branch 'docs__add-runtime-fields' of github.com:lockewritesdocs/elasticsearch into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "301abd19191c4de27ab94ec0f489720eef46bb4e", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/301abd19191c4de27ab94ec0f489720eef46bb4e", "committedDate": "2020-09-28T21:12:11Z", "message": "Adding TESTRESPONSEs, which are currently broken."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/62a5393d1ffdb422169e7e8feabeeda10856fae4", "committedDate": "2020-09-29T12:58:39Z", "message": "Fixing TESTRESPONSEs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDc4MzY0", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-498478364", "createdAt": "2020-09-29T13:38:34Z", "commit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozODozNFrOHZtnxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1MDozMVrOHZuNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMzkxMA==", "bodyText": "I would expect runtime fields to be computed from doc_values, and I would read unindexed data as reading from _source, so maybe I would try to rephrase this. \"from existing fields, either runtime or ordinary\" ?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496723910", "createdAt": "2020-09-29T13:38:34Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -126,6 +126,31 @@ the <<analysis-standard-analyzer,`standard` analyzer>>, the\n This is the purpose of _multi-fields_. Most field types support multi-fields\n via the <<multi-fields>> parameter.\n \n+[discrete]\n+[[types-runtime]]\n+=== Runtime\n+{es} indexes most field types by default to promote faster search. However,\n+indexing all of your data can be slow and requires more disk space. If you're\n+experimenting with your data or are unsure which fields you need for search,\n+use _runtime fields_.\n+\n+{es} treats runtime fields like any other field, except that their values are\n+only extracted or computed at search time. When mapping a runtime field, you\n+define a script that determines how to extract or compute field values from\n+your unindexed data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNTQyMQ==", "bodyText": "you can also sort on them: shall we rather say they can be used like any other field that is indexed and has doc_values? Or maybe without even mentioning doc_values or index, but rather mention field_caps returns: they are searchable and agregatable.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496725421", "createdAt": "2020-09-29T13:40:24Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNzE3OA==", "bodyText": "overriding is only a dream, for now, because you can't define a runtime field with the same name as a concrete field, today. It's more like you would do with multi fields, where you expose a new field that is the correct version of the other existing field.\nwe are though discussing the possible introduction of a runtime section in the mappings that would address this limitation.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496727178", "createdAt": "2020-09-29T13:42:42Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNzczNg==", "bodyText": "removing a runtime field is not possible today.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496727736", "createdAt": "2020-09-29T13:43:19Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyODU3NQ==", "bodyText": "indexing is disabled by default sounds weird to me. indexing is not a thing for runtime fields, at least at the moment.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496728575", "createdAt": "2020-09-29T13:44:18Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain\n+faster search speed.\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+When mapping a runtime field, indexing is disabled by default. You map runtime", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyODk1Ng==", "bodyText": "what do you mean by the entire context of a document?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496728956", "createdAt": "2020-09-29T13:44:48Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain\n+faster search speed.\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+When mapping a runtime field, indexing is disabled by default. You map runtime\n+fields by <<modules-scripting-using,defining a painless script>>. At search\n+time, the script runs and generates values for each scripted field. Runtime\n+scripts have access to the entire context of a document, the original", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyOTc2MQ==", "bodyText": "we should probably expand this and explain why: each shard may see the old or the new version of the script, depending on when the mapping change becomes effective.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496729761", "createdAt": "2020-09-29T13:45:47Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain\n+faster search speed.\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+When mapping a runtime field, indexing is disabled by default. You map runtime\n+fields by <<modules-scripting-using,defining a painless script>>. At search\n+time, the script runs and generates values for each scripted field. Runtime\n+scripts have access to the entire context of a document, the original\n+`_source`, and the mapped field plus its values (`doc_values`).\n+\n+IMPORTANT: Updating a script while a query that relies on the script is running\n+can return inconsistent results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMDEyOQ==", "bodyText": "that seems scary, but users will wonder why and how?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496730129", "createdAt": "2020-09-29T13:46:15Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain\n+faster search speed.\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+When mapping a runtime field, indexing is disabled by default. You map runtime\n+fields by <<modules-scripting-using,defining a painless script>>. At search\n+time, the script runs and generates values for each scripted field. Runtime\n+scripts have access to the entire context of a document, the original\n+`_source`, and the mapped field plus its values (`doc_values`).\n+\n+IMPORTANT: Updating a script while a query that relies on the script is running\n+can return inconsistent results.\n++\n+Additionally, existing queries or visualizations that rely on runtime fields\n+can break if scripts are updated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMDkxNg==", "bodyText": "should we expand on why?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496730916", "createdAt": "2020-09-29T13:47:13Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain\n+faster search speed.\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+When mapping a runtime field, indexing is disabled by default. You map runtime\n+fields by <<modules-scripting-using,defining a painless script>>. At search\n+time, the script runs and generates values for each scripted field. Runtime\n+scripts have access to the entire context of a document, the original\n+`_source`, and the mapped field plus its values (`doc_values`).\n+\n+IMPORTANT: Updating a script while a query that relies on the script is running\n+can return inconsistent results.\n++\n+Additionally, existing queries or visualizations that rely on runtime fields\n+can break if scripts are updated.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"day_of_week\": {\n+        \"type\": \"runtime\", <1>\n+        \"runtime_type\": \"keyword\", <2>\n+        \"script\": {\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. This API works for all fields, even those that\n+were not sent as part of the original `_source`.\n+\n+NOTE: We highly recommended using the <<async-search,asynchronous search API>>\n+to run searches that use runtime fields.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMTQ2NQ==", "bodyText": "is the script missing here in the list of supported parameters?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496731465", "createdAt": "2020-09-29T13:47:52Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain\n+faster search speed.\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+When mapping a runtime field, indexing is disabled by default. You map runtime\n+fields by <<modules-scripting-using,defining a painless script>>. At search\n+time, the script runs and generates values for each scripted field. Runtime\n+scripts have access to the entire context of a document, the original\n+`_source`, and the mapped field plus its values (`doc_values`).\n+\n+IMPORTANT: Updating a script while a query that relies on the script is running\n+can return inconsistent results.\n++\n+Additionally, existing queries or visualizations that rely on runtime fields\n+can break if scripts are updated.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"day_of_week\": {\n+        \"type\": \"runtime\", <1>\n+        \"runtime_type\": \"keyword\", <2>\n+        \"script\": {\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. This API works for all fields, even those that\n+were not sent as part of the original `_source`.\n+\n+NOTE: We highly recommended using the <<async-search,asynchronous search API>>\n+to run searches that use runtime fields.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that the previous request defined in the mapping.\n+\n+[source,console]\n+----\n+GET /my-index/_search\n+{\n+  \"aggs\": {\n+    \"days_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-params]]\n+==== Parameters for `runtime` fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMzYxNw==", "bodyText": "maybe you meant without reindexing the document and adding the day_of_week to it?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r496733617", "createdAt": "2020-09-29T13:50:31Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,365 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With runtime fields, you can explicitly define a field\n+in the mapping and access it at search time without indexing your data during\n+ingest time.\n+\n+Runtime fields beta[] are accessible from the search API like any other field that has\n+<<doc-values,doc_values>> and is searchable. You can retrieve and query these\n+fields, as well as aggregate on them.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain search time performance\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and immediately access it. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. You can also fix errors in indexed fields by overriding them\n+with runtime fields, rather than reindexing all of your data. If you later\n+decide that a runtime field is increasingly used for filtering or aggregation,\n+you can remove the runtime field from the mapping and index the field to gain\n+faster search speed.\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+When mapping a runtime field, indexing is disabled by default. You map runtime\n+fields by <<modules-scripting-using,defining a painless script>>. At search\n+time, the script runs and generates values for each scripted field. Runtime\n+scripts have access to the entire context of a document, the original\n+`_source`, and the mapped field plus its values (`doc_values`).\n+\n+IMPORTANT: Updating a script while a query that relies on the script is running\n+can return inconsistent results.\n++\n+Additionally, existing queries or visualizations that rely on runtime fields\n+can break if scripts are updated.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"day_of_week\": {\n+        \"type\": \"runtime\", <1>\n+        \"runtime_type\": \"keyword\", <2>\n+        \"script\": {\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are of the `runtime` data type.\n+<2> Each runtime has its own field type, defined by `runtime_type`.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. This API works for all fields, even those that\n+were not sent as part of the original `_source`.\n+\n+NOTE: We highly recommended using the <<async-search,asynchronous search API>>\n+to run searches that use runtime fields.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that the previous request defined in the mapping.\n+\n+[source,console]\n+----\n+GET /my-index/_search\n+{\n+  \"aggs\": {\n+    \"days_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-params]]\n+==== Parameters for `runtime` fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+[[runtime-examples]]\n+==== Examples\n+Consider a large set of log data that you want to extract fields from.\n+Indexing the data is time consuming and uses a lot of disk space, and you just\n+want to explore the data structure without committing to a schema up front.\n+\n+You know that your log data contains specific fields that you want to extract.\n+By using runtime fields, you can define scripts to calculate values at search\n+time for these fields.\n+\n+You can start with a simple example by adding the `@timestamp` and `message`\n+fields to the `my-index` mapping. To remain flexible, use `wildcard` as the\n+field type for `message`.\n+\n+[source,console]\n+----\n+PUT /my-index/\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"@timestamp\": {\n+        \"format\": \"strict_date_optional_time||epoch_second\",\n+        \"type\": \"date\"\n+      },\n+      \"message\": {\n+        \"type\": \"wildcard\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+After mapping the fields you want to retrieve, index a few records from\n+your log data into {es}. The following request uses the <<docs-bulk,bulk API>>\n+to index raw log data into `my-index`. Instead of indexing all of your log\n+data, you can use a small sample to experiment with runtime fields.\n+\n+[source,console]\n+----\n+POST /my-index/_bulk?refresh\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:17-05:00\", \"message\" : \"40.135.0.0 - - [2020-04-30T14:30:17-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:53-05:00\", \"message\" : \"232.0.0.0 - - [2020-04-30T14:30:53-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:12-05:00\", \"message\" : \"26.1.0.0 - - [2020-04-30T14:31:12-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:19-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:19-05:00] \\\"GET /french/splash_inet.html HTTP/1.0\\\" 200 3781\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:27-05:00\", \"message\" : \"252.0.0.0 - - [2020-04-30T14:31:27-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_brdl.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_arw.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:32-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:32-05:00] \\\"GET /images/nav_bg_top.gif HTTP/1.0\\\" 200 929\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:43-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:43-05:00] \\\"GET /french/images/nav_venue_off.gif HTTP/1.0\\\" 304 0\"}\n+----\n+// TEST[continued]\n+\n+At this point, you can view how {es} stores your raw data.\n+\n+[source,console]\n+----\n+GET /my-index\n+----\n+// TEST[continued]\n+\n+The mapping contains two fields: `@timestamp` and `message`.\n+\n+[source,console-result]\n+----\n+{\n+  \"my-index\" : {\n+    \"mappings\" : {\n+      \"properties\" : {\n+        \"@timestamp\" : {\n+          \"type\" : \"date\",\n+          \"format\" : \"strict_date_optional_time||epoch_second\"\n+        },\n+        \"message\" : {\n+          \"type\" : \"wildcard\"\n+        }\n+      }\n+    },\n+    ...\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\\.\\.\\./\"aliases\": $body.my-index.aliases, \"settings\": $body.my-index.settings/]\n+\n+If you want to retrieve results that include `clientip`, you can add that field\n+as a runtime field in the mapping. The runtime script operates on the `clientip`\n+field at runtime to calculate values for that field.\n+\n+[source,console]\n+----\n+PUT /my-index/_mappings\n+{\n+  \"properties\": {\n+    \"clientip\": {\n+      \"type\": \"runtime\",\n+      \"runtime_type\": \"ip\",\n+      \"script\" : {\n+      \"source\" : \"String m = doc[\\\"message\\\"].value; int end = m.indexOf(\\\" \\\"); emit(m.substring(0, end));\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+Using the `clientip` runtime field, you can define a simple query to run a\n+search for a specific IP address and return all related fields.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"clientip\": \"211.11.9.0\"\n+    }\n+  },\n+  \"fields\" : [\"*\"]\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following result. Without building your data structure in\n+advance, you can search and explore your data in meaningful ways to experiment\n+and determine which fields to index.\n+\n+[source,console-result]\n+----\n+{\n+  \"took\" : 150,\n+  \"timed_out\" : false,\n+  \"_shards\" : {\n+    \"total\" : 1,\n+    \"successful\" : 1,\n+    \"skipped\" : 0,\n+    \"failed\" : 0\n+  },\n+  \"hits\" : {\n+    \"total\" : {\n+      \"value\" : 2,\n+      \"relation\" : \"eq\"\n+    },\n+    \"max_score\" : 1.0,\n+    \"hits\" : [\n+      {\n+        \"_index\" : \"my-index\",\n+        \"_id\" : \"8Jh81nQBp2DRDXdiOxVt\",\n+        \"_score\" : 1.0,\n+        \"_source\" : {\n+          \"@timestamp\" : \"2020-06-21T15:00:01-05:00\",\n+          \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+        },\n+        \"fields\" : {\n+          \"clientip\" : [\n+            \"211.11.9.0\"\n+          ],\n+          \"message\" : [\n+            \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+          ],\n+          \"@timestamp\" : [\n+            \"2020-06-21T20:00:01.000Z\"\n+          ]\n+        }\n+      },\n+      {\n+        \"_index\" : \"my-index\",\n+        \"_id\" : \"8Zh81nQBp2DRDXdiOxVu\",\n+        \"_score\" : 1.0,\n+        \"_source\" : {\n+          \"@timestamp\" : \"2020-06-21T15:00:01-05:00\",\n+          \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+        },\n+        \"fields\" : {\n+          \"clientip\" : [\n+            \"211.11.9.0\"\n+          ],\n+          \"message\" : [\n+            \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+          ],\n+          \"@timestamp\" : [\n+            \"2020-06-21T20:00:01.000Z\"\n+          ]\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\"took\" : 150/\"took\": $body.took/]\n+// TESTRESPONSE[s/\"_id\" : \"8Jh81nQBp2DRDXdiOxVt\"/\"_id\": $body.hits.hits.0._id/]\n+// TESTRESPONSE[s/\"_id\" : \"8Zh81nQBp2DRDXdiOxVu\"/\"_id\": $body.hits.hits.1._id/]\n+\n+If you add the `day_of_week` field to the mapping using the request in\n+<<runtime-mapping-fields,mapping a runtime field>>, you can re-run the previous\n+search request and also retrieve the day of the week based on the `@timestamp`\n+field.\n+\n+The value for this field was never indexed, and is calculated dynamically at\n+runtime. This flexibility allows you to modify the mapping without changing\n+any field values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a5393d1ffdb422169e7e8feabeeda10856fae4"}, "originalPosition": 340}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36c92442308f8430dbeb881729c542b0fafde793", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/36c92442308f8430dbeb881729c542b0fafde793", "committedDate": "2020-09-29T21:40:47Z", "message": "Incorporating review feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804f10f5f0e51da6d4905c0f3c09f38dca43ae4e", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/804f10f5f0e51da6d4905c0f3c09f38dca43ae4e", "committedDate": "2020-09-30T21:21:55Z", "message": "Several clarifications, better test cases, and other changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "875713c0c86eca35f1282c9dce94ffa5f3b9c0e3", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/875713c0c86eca35f1282c9dce94ffa5f3b9c0e3", "committedDate": "2020-10-01T14:21:10Z", "message": "Adding missing callout in example."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54d529adfd526d9f84d709328ecade6617517ded", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/54d529adfd526d9f84d709328ecade6617517ded", "committedDate": "2020-10-01T15:17:09Z", "message": "Adding substitutions to TESTRESPONSE for shorter results shown."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1a7e084ffb94e89d0264c0fdc3fa0a55d3d376", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/7c1a7e084ffb94e89d0264c0fdc3fa0a55d3d376", "committedDate": "2020-10-26T21:08:09Z", "message": "Shuffling some information and adding link to script-fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f3e4bae0b42e99dcc0816e64f22a910ad7011e", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d3f3e4bae0b42e99dcc0816e64f22a910ad7011e", "committedDate": "2020-10-26T21:43:05Z", "message": "Fixing typo."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fe154187217bd3f6d0f1450c1f567289685d9b7", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/3fe154187217bd3f6d0f1450c1f567289685d9b7", "committedDate": "2020-10-30T14:42:46Z", "message": "Updates for API redesign -- will break builds."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d158ded58f29e18934fdb685465bfd1d74d32eb", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/2d158ded58f29e18934fdb685465bfd1d74d32eb", "committedDate": "2020-11-19T16:45:27Z", "message": "Merge branch 'master' into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d495f024678e0ace4009169019da6bd9a13257f", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/6d495f024678e0ace4009169019da6bd9a13257f", "committedDate": "2020-11-23T22:00:50Z", "message": "Updating examples and including info about overriding fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e00f80f6424280c8c545f2a82e5244bdcca504c2", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/e00f80f6424280c8c545f2a82e5244bdcca504c2", "committedDate": "2020-11-24T15:09:46Z", "message": "Updating examples."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c631ce959e810f33c53c7c39f62c14b36b9c48d1", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/c631ce959e810f33c53c7c39f62c14b36b9c48d1", "committedDate": "2020-11-24T15:10:39Z", "message": "Merge branch 'master' into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8824beaf87b5399eb3e60491788a48b256b2e38b", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/8824beaf87b5399eb3e60491788a48b256b2e38b", "committedDate": "2020-11-24T20:56:58Z", "message": "Adding info for using runtime fields in the search request."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "282c2613d6e5d98c79a03ccc81d92cdc6cc02c9a", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/282c2613d6e5d98c79a03ccc81d92cdc6cc02c9a", "committedDate": "2020-11-24T20:57:35Z", "message": "Merge branch 'docs__add-runtime-fields' of github.com:lockewritesdocs/elasticsearch into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/72cf35429ec99c248e7b3f3e914931b0dc936a05", "committedDate": "2020-11-25T17:16:17Z", "message": "Adding that queries against runtime fields are expensive."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzk4Njk3", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-540798697", "createdAt": "2020-11-30T10:57:13Z", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDo1NzoxM1rOH711ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTowMjowOFrOH72BfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMDExNQ==", "bodyText": "runtime is no longer a field type, should it still go under mapping/types?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532510115", "createdAt": "2020-11-30T10:57:13Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMDkwNg==", "bodyText": "runtime_type no longer exists", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532510906", "createdAt": "2020-11-30T10:58:32Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMTkwMw==", "bodyText": "I think I see what you are after here, but I find this section slightly confusing, because the dot notation can also be used to specify fields that are not at the root level, regardless of whether they are also defined under properties.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532511903", "createdAt": "2020-11-30T11:00:05Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMjE1Mw==", "bodyText": "this no longer exists", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532512153", "createdAt": "2020-11-30T11:00:28Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+override fields in `_source` for the duration of the query without modifying\n+the field itself.\n+\n+The following request evaluates the `name.last` field and overrides the\n+`name.first` field in the search request based on the script valuation.\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+\n+[[runtime-params]]\n+==== Parameters for runtime fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMzAyMA==", "bodyText": "More than \"use the API to return runtime fields\", I would say \"the fiels caps API returns runtime fields like any ordinary field", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532513020", "createdAt": "2020-11-30T11:01:59Z", "author": {"login": "javanna"}, "path": "docs/reference/search/field-caps.asciidoc", "diffHunk": "@@ -34,6 +34,10 @@ GET /_field_caps?fields=rating\n The field capabilities API returns the information about the capabilities of\n fields among multiple indices.\n \n+Use the field capabilities API to return <<runtime,runtime fields>> like any", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMzE0OA==", "bodyText": "runtime_type no longer exists", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532513148", "createdAt": "2020-11-30T11:02:08Z", "author": {"login": "javanna"}, "path": "docs/reference/search/field-caps.asciidoc", "diffHunk": "@@ -34,6 +34,10 @@ GET /_field_caps?fields=rating\n The field capabilities API returns the information about the capabilities of\n fields among multiple indices.\n \n+Use the field capabilities API to return <<runtime,runtime fields>> like any\n+other field. For example, a runtime field with a `runtime_type` of\n+`keyword` returns as any other field that belongs to the `keyword` family.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTEzNjg1", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-541113685", "createdAt": "2020-11-30T17:06:07Z", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNjowOFrOH8E1KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNjowOFrOH8E1KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NTc1Mw==", "bodyText": "In most scenarios the best way to use data in {es} is to index it in a schema, because indexing will provide the best query time performance. However, sometimes users want the flexibility to add fields after the documents were already ingested into {es}. Runtime fields enables users to add fields to documents that are already in {es} without needing to re-index. A runtime field includes instructions for calculating its value, and the value itself is calculated only at the time a query requires it. Runtime fields do not increase the index size and allow for faster ingest process, because a runtime field is not indexed.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532755753", "createdAt": "2020-11-30T17:06:08Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -126,6 +126,31 @@ the <<analysis-standard-analyzer,`standard` analyzer>>, the\n This is the purpose of _multi-fields_. Most field types support multi-fields\n via the <<multi-fields>> parameter.\n \n+[discrete]\n+[[types-runtime]]\n+=== Runtime\n+{es} indexes most field types by default to promote faster search. However,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTM5MDA3", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-541139007", "createdAt": "2020-11-30T17:35:18Z", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNToxOFrOH8GEDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0OTo0NlrOH8Gpfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTk0OQ==", "bodyText": "I think these might be better in recipe form at the end of the page. More work to build all the examples, but maybe easier to follow why we're doing it.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532775949", "createdAt": "2020-11-30T17:35:18Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NjY4NA==", "bodyText": "I dunno if I'm normal but I feel like this is too much words without enough examples or headings. I don't read good on the best of days and I'm usually skimming pages for useful headings.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532776684", "createdAt": "2020-11-30T17:36:25Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NzYwMA==", "bodyText": "I'd flip this around, I think. Like \"we prefer indexing a single field that is commonly searched, usually a timestamp, because it will generally make search much fast\". Maybe we just show it in the examples and explain why later.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532777600", "createdAt": "2020-11-30T17:37:47Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3ODEzMw==", "bodyText": "I think a recipe for how to extract things from log data might be better at explaining it then a paragraph.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532778133", "createdAt": "2020-11-30T17:38:40Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3OTkyMQ==", "bodyText": "The _source and the doc values are pretty much the entire context of the document. So it might be more concise to just say \"doc values and _source.\"", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532779921", "createdAt": "2020-11-30T17:41:17Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MDc4MA==", "bodyText": "I think this might be missing a conjunction for it to make sense to me - runtime field are similar to script_fields but words words words.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532780780", "createdAt": "2020-11-30T17:42:37Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MTE3NQ==", "bodyText": "This'd be fine to move lower down. The sooner you get to an example the better.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532781175", "createdAt": "2020-11-30T17:43:13Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MTIzOQ==", "bodyText": "I think.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532781239", "createdAt": "2020-11-30T17:43:19Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MTE3NQ=="}, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjUwMQ==", "bodyText": "Maybe this should merge with the warning about async search?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532782501", "createdAt": "2020-11-30T17:45:12Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+override fields in `_source` for the duration of the query without modifying\n+the field itself.\n+\n+The following request evaluates the `name.last` field and overrides the\n+`name.first` field in the search request based on the script valuation.\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+\n+[[runtime-params]]\n+==== Parameters for runtime fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+[[runtime-params-script]]\n+`script`::\n+The <<modules-scripting-using,painless script>> that is evaluated at search\n+time to produce the value of the runtime field.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MzEzMQ==", "bodyText": "Also, it feels like it is in the wrong section. Retrieving the values isn't expensive. I mean, more expensive than _source access, but not terrible. But querying them can be.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532783131", "createdAt": "2020-11-30T17:46:06Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+override fields in `_source` for the duration of the query without modifying\n+the field itself.\n+\n+The following request evaluates the `name.last` field and overrides the\n+`name.first` field in the search request based on the script valuation.\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+\n+[[runtime-params]]\n+==== Parameters for runtime fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+[[runtime-params-script]]\n+`script`::\n+The <<modules-scripting-using,painless script>> that is evaluated at search\n+time to produce the value of the runtime field.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjUwMQ=="}, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MzQ2Mg==", "bodyText": "If you just want to document returning them then I wouldn't search in the same example.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532783462", "createdAt": "2020-11-30T17:46:37Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+override fields in `_source` for the duration of the query without modifying\n+the field itself.\n+\n+The following request evaluates the `name.last` field and overrides the\n+`name.first` field in the search request based on the script valuation.\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+\n+[[runtime-params]]\n+==== Parameters for runtime fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+[[runtime-params-script]]\n+`script`::\n+The <<modules-scripting-using,painless script>> that is evaluated at search\n+time to produce the value of the runtime field.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that the <<runtime-mapping-fields,previous request>> defined as a runtime field\n+in the mapping. The value for the `day_of_week` field is calculated dynamically\n+at search time, and the following search request retrieves any documents where\n+the calculated value is equal to `Thursday`.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"day_of_week\": \"Thursday\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NDI2MQ==", "bodyText": "Maybe remove the aliases line? I see you adding it with ....", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532784261", "createdAt": "2020-11-30T17:47:47Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+override fields in `_source` for the duration of the query without modifying\n+the field itself.\n+\n+The following request evaluates the `name.last` field and overrides the\n+`name.first` field in the search request based on the script valuation.\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+\n+[[runtime-params]]\n+==== Parameters for runtime fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+[[runtime-params-script]]\n+`script`::\n+The <<modules-scripting-using,painless script>> that is evaluated at search\n+time to produce the value of the runtime field.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that the <<runtime-mapping-fields,previous request>> defined as a runtime field\n+in the mapping. The value for the `day_of_week` field is calculated dynamically\n+at search time, and the following search request retrieves any documents where\n+the calculated value is equal to `Thursday`.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"day_of_week\": \"Thursday\"\n+    }\n+  },\n+  \"fields\": [\n+    \"@timestamp\", \"day_of_week\"\n+  ],\n+  \"_source\": false\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-examples]]\n+==== Examples\n+Consider a large set of log data that you want to extract fields from.\n+Indexing the data is time consuming and uses a lot of disk space, and you just\n+want to explore the data structure without committing to a schema up front.\n+\n+You know that your log data contains specific fields that you want to extract.\n+By using runtime fields, you can define scripts to calculate values at search\n+time for these fields.\n+\n+You can start with a simple example by adding the `@timestamp` and `message`\n+fields to the `my-index` mapping. To remain flexible, use `wildcard` as the\n+field type for `message`.\n+\n+[source,console]\n+----\n+PUT /my-index/\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"@timestamp\": {\n+        \"format\": \"strict_date_optional_time||epoch_second\",\n+        \"type\": \"date\"\n+      },\n+      \"message\": {\n+        \"type\": \"wildcard\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+After mapping the fields you want to retrieve, index a few records from\n+your log data into {es}. The following request uses the <<docs-bulk,bulk API>>\n+to index raw log data into `my-index`. Instead of indexing all of your log\n+data, you can use a small sample to experiment with runtime fields.\n+\n+[source,console]\n+----\n+POST /my-index/_bulk?refresh\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:17-05:00\", \"message\" : \"40.135.0.0 - - [2020-04-30T14:30:17-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:53-05:00\", \"message\" : \"232.0.0.0 - - [2020-04-30T14:30:53-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:12-05:00\", \"message\" : \"26.1.0.0 - - [2020-04-30T14:31:12-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:19-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:19-05:00] \\\"GET /french/splash_inet.html HTTP/1.0\\\" 200 3781\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:27-05:00\", \"message\" : \"252.0.0.0 - - [2020-04-30T14:31:27-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_brdl.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_arw.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:32-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:32-05:00] \\\"GET /images/nav_bg_top.gif HTTP/1.0\\\" 200 929\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:43-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:43-05:00] \\\"GET /french/images/nav_venue_off.gif HTTP/1.0\\\" 304 0\"}\n+----\n+// TEST[continued]\n+\n+At this point, you can view how {es} stores your raw data.\n+\n+[source,console]\n+----\n+GET /my-index\n+----\n+// TEST[continued]\n+\n+The mapping contains two fields: `@timestamp` and `message`.\n+\n+[source,console-result]\n+----\n+{\n+  \"my-index\" : {\n+    \"aliases\" : { },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 320}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NDY5Mg==", "bodyText": "I think it'd be best if the example only returned a single line because it'd be a little smaller on the screen and still show everything.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532784692", "createdAt": "2020-11-30T17:48:28Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+override fields in `_source` for the duration of the query without modifying\n+the field itself.\n+\n+The following request evaluates the `name.last` field and overrides the\n+`name.first` field in the search request based on the script valuation.\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+\n+[[runtime-params]]\n+==== Parameters for runtime fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+[[runtime-params-script]]\n+`script`::\n+The <<modules-scripting-using,painless script>> that is evaluated at search\n+time to produce the value of the runtime field.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that the <<runtime-mapping-fields,previous request>> defined as a runtime field\n+in the mapping. The value for the `day_of_week` field is calculated dynamically\n+at search time, and the following search request retrieves any documents where\n+the calculated value is equal to `Thursday`.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"day_of_week\": \"Thursday\"\n+    }\n+  },\n+  \"fields\": [\n+    \"@timestamp\", \"day_of_week\"\n+  ],\n+  \"_source\": false\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-examples]]\n+==== Examples\n+Consider a large set of log data that you want to extract fields from.\n+Indexing the data is time consuming and uses a lot of disk space, and you just\n+want to explore the data structure without committing to a schema up front.\n+\n+You know that your log data contains specific fields that you want to extract.\n+By using runtime fields, you can define scripts to calculate values at search\n+time for these fields.\n+\n+You can start with a simple example by adding the `@timestamp` and `message`\n+fields to the `my-index` mapping. To remain flexible, use `wildcard` as the\n+field type for `message`.\n+\n+[source,console]\n+----\n+PUT /my-index/\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"@timestamp\": {\n+        \"format\": \"strict_date_optional_time||epoch_second\",\n+        \"type\": \"date\"\n+      },\n+      \"message\": {\n+        \"type\": \"wildcard\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+After mapping the fields you want to retrieve, index a few records from\n+your log data into {es}. The following request uses the <<docs-bulk,bulk API>>\n+to index raw log data into `my-index`. Instead of indexing all of your log\n+data, you can use a small sample to experiment with runtime fields.\n+\n+[source,console]\n+----\n+POST /my-index/_bulk?refresh\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:17-05:00\", \"message\" : \"40.135.0.0 - - [2020-04-30T14:30:17-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:53-05:00\", \"message\" : \"232.0.0.0 - - [2020-04-30T14:30:53-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:12-05:00\", \"message\" : \"26.1.0.0 - - [2020-04-30T14:31:12-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:19-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:19-05:00] \\\"GET /french/splash_inet.html HTTP/1.0\\\" 200 3781\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:27-05:00\", \"message\" : \"252.0.0.0 - - [2020-04-30T14:31:27-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_brdl.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_arw.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:32-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:32-05:00] \\\"GET /images/nav_bg_top.gif HTTP/1.0\\\" 200 929\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:43-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:43-05:00] \\\"GET /french/images/nav_venue_off.gif HTTP/1.0\\\" 304 0\"}\n+----\n+// TEST[continued]\n+\n+At this point, you can view how {es} stores your raw data.\n+\n+[source,console]\n+----\n+GET /my-index\n+----\n+// TEST[continued]\n+\n+The mapping contains two fields: `@timestamp` and `message`.\n+\n+[source,console-result]\n+----\n+{\n+  \"my-index\" : {\n+    \"aliases\" : { },\n+    \"mappings\" : {\n+      \"properties\" : {\n+        \"@timestamp\" : {\n+          \"type\" : \"date\",\n+          \"format\" : \"strict_date_optional_time||epoch_second\"\n+        },\n+        \"message\" : {\n+          \"type\" : \"wildcard\"\n+        }\n+      }\n+    },\n+    ...\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\\.\\.\\./\"aliases\": $body.my-index.aliases, \"settings\": $body.my-index.settings/]\n+\n+If you want to retrieve results that include `clientip`, you can add that field\n+as a runtime field in the mapping. The runtime script operates on the `clientip`\n+field at runtime to calculate values for that field.\n+\n+[source,console]\n+----\n+PUT /my-index/_mapping\n+{\n+  \"runtime\": {\n+    \"clientip\": {\n+      \"type\": \"ip\",\n+      \"script\" : {\n+      \"source\" : \"String m = doc[\\\"message\\\"].value; int end = m.indexOf(\\\" \\\"); emit(m.substring(0, end));\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+Using the `clientip` runtime field, you can define a simple query to run a\n+search for a specific IP address and return all related fields.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"clientip\": \"211.11.9.0\"\n+    }\n+  },\n+  \"fields\" : [\"*\"]\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following result. Without building your data structure in\n+advance, you can search and explore your data in meaningful ways to experiment\n+and determine which fields to index.\n+\n+[source,console-result]\n+----\n+{\n+  ...\n+  \"hits\" : {\n+    \"total\" : {\n+      \"value\" : 2,\n+      \"relation\" : \"eq\"\n+    },\n+    \"max_score\" : 1.0,\n+    \"hits\" : [\n+      {\n+        \"_index\" : \"my-index\",\n+        \"_id\" : \"8Jh81nQBp2DRDXdiOxVt\",\n+        \"_score\" : 1.0,\n+        \"_source\" : {\n+          \"@timestamp\" : \"2020-06-21T15:00:01-05:00\",\n+          \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+        },\n+        \"fields\" : {\n+          \"clientip\" : [\n+            \"211.11.9.0\"\n+          ],\n+          \"message\" : [\n+            \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+          ],\n+          \"@timestamp\" : [\n+            \"2020-06-21T20:00:01.000Z\"\n+          ]\n+        }\n+      },\n+      {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NTUzNA==", "bodyText": "I think you could show the actual mapping put to add day_of_week or whatever and keep the // TEST[continued] going.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532785534", "createdAt": "2020-11-30T17:49:46Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, the original `_source`, and the mapped field plus\n+its values (`doc_values`). At search time, the script runs and generates values\n+for each scripted field.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request. You can retrieve the results of running a script, but\n+also make the script results available for queries and aggregations.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the `runtime_type`. For example, a bar chart visualization\n+that uses a runtime field of `ip` will fail if the `runtime_type` is changed\n+to `boolean`.\n+\n+****\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` data type.\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+[[runtime-search-request]]\n+==== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You must specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-overriding-fields]]\n+===== Overriding fields in the search request\n+You can use the `runtime_mappings` section of the `_search` request to override\n+field values inside objects by naming the runtime fields with dot notation. For\n+example, index the following documents into `my-index`.\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+override fields in `_source` for the duration of the query without modifying\n+the field itself.\n+\n+The following request evaluates the `name.last` field and overrides the\n+`name.first` field in the search request based on the script valuation.\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+\n+[[runtime-params]]\n+==== Parameters for runtime fields\n+Runtime fields accept the following parameters:\n+\n+[[runtime-params-type]]\n+`type`::\n+The type of runtime computation to perform at query time. Currently, runtime\n+fields only support the `runtime` data type.\n+\n+[[runtime-params-runtime-type]]\n+`runtime_type`::\n+The <<mapping-types,field type>> for each scripted field. {es}\n+supports `boolean`, `date`, `double`, `ip`, `keyword`, and `long`.\n++\n+Runtime fields with a `runtime_type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+[[runtime-params-script]]\n+`script`::\n+The <<modules-scripting-using,painless script>> that is evaluated at search\n+time to produce the value of the runtime field.\n+\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that the <<runtime-mapping-fields,previous request>> defined as a runtime field\n+in the mapping. The value for the `day_of_week` field is calculated dynamically\n+at search time, and the following search request retrieves any documents where\n+the calculated value is equal to `Thursday`.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"day_of_week\": \"Thursday\"\n+    }\n+  },\n+  \"fields\": [\n+    \"@timestamp\", \"day_of_week\"\n+  ],\n+  \"_source\": false\n+}\n+----\n+// TEST[continued]\n+\n+[[runtime-examples]]\n+==== Examples\n+Consider a large set of log data that you want to extract fields from.\n+Indexing the data is time consuming and uses a lot of disk space, and you just\n+want to explore the data structure without committing to a schema up front.\n+\n+You know that your log data contains specific fields that you want to extract.\n+By using runtime fields, you can define scripts to calculate values at search\n+time for these fields.\n+\n+You can start with a simple example by adding the `@timestamp` and `message`\n+fields to the `my-index` mapping. To remain flexible, use `wildcard` as the\n+field type for `message`.\n+\n+[source,console]\n+----\n+PUT /my-index/\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"@timestamp\": {\n+        \"format\": \"strict_date_optional_time||epoch_second\",\n+        \"type\": \"date\"\n+      },\n+      \"message\": {\n+        \"type\": \"wildcard\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+After mapping the fields you want to retrieve, index a few records from\n+your log data into {es}. The following request uses the <<docs-bulk,bulk API>>\n+to index raw log data into `my-index`. Instead of indexing all of your log\n+data, you can use a small sample to experiment with runtime fields.\n+\n+[source,console]\n+----\n+POST /my-index/_bulk?refresh\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:17-05:00\", \"message\" : \"40.135.0.0 - - [2020-04-30T14:30:17-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:53-05:00\", \"message\" : \"232.0.0.0 - - [2020-04-30T14:30:53-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:12-05:00\", \"message\" : \"26.1.0.0 - - [2020-04-30T14:31:12-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:19-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:19-05:00] \\\"GET /french/splash_inet.html HTTP/1.0\\\" 200 3781\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:27-05:00\", \"message\" : \"252.0.0.0 - - [2020-04-30T14:31:27-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_brdl.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_arw.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:32-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:32-05:00] \\\"GET /images/nav_bg_top.gif HTTP/1.0\\\" 200 929\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:43-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:43-05:00] \\\"GET /french/images/nav_venue_off.gif HTTP/1.0\\\" 304 0\"}\n+----\n+// TEST[continued]\n+\n+At this point, you can view how {es} stores your raw data.\n+\n+[source,console]\n+----\n+GET /my-index\n+----\n+// TEST[continued]\n+\n+The mapping contains two fields: `@timestamp` and `message`.\n+\n+[source,console-result]\n+----\n+{\n+  \"my-index\" : {\n+    \"aliases\" : { },\n+    \"mappings\" : {\n+      \"properties\" : {\n+        \"@timestamp\" : {\n+          \"type\" : \"date\",\n+          \"format\" : \"strict_date_optional_time||epoch_second\"\n+        },\n+        \"message\" : {\n+          \"type\" : \"wildcard\"\n+        }\n+      }\n+    },\n+    ...\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\\.\\.\\./\"aliases\": $body.my-index.aliases, \"settings\": $body.my-index.settings/]\n+\n+If you want to retrieve results that include `clientip`, you can add that field\n+as a runtime field in the mapping. The runtime script operates on the `clientip`\n+field at runtime to calculate values for that field.\n+\n+[source,console]\n+----\n+PUT /my-index/_mapping\n+{\n+  \"runtime\": {\n+    \"clientip\": {\n+      \"type\": \"ip\",\n+      \"script\" : {\n+      \"source\" : \"String m = doc[\\\"message\\\"].value; int end = m.indexOf(\\\" \\\"); emit(m.substring(0, end));\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+Using the `clientip` runtime field, you can define a simple query to run a\n+search for a specific IP address and return all related fields.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"query\": {\n+    \"match\": {\n+      \"clientip\": \"211.11.9.0\"\n+    }\n+  },\n+  \"fields\" : [\"*\"]\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following result. Without building your data structure in\n+advance, you can search and explore your data in meaningful ways to experiment\n+and determine which fields to index.\n+\n+[source,console-result]\n+----\n+{\n+  ...\n+  \"hits\" : {\n+    \"total\" : {\n+      \"value\" : 2,\n+      \"relation\" : \"eq\"\n+    },\n+    \"max_score\" : 1.0,\n+    \"hits\" : [\n+      {\n+        \"_index\" : \"my-index\",\n+        \"_id\" : \"8Jh81nQBp2DRDXdiOxVt\",\n+        \"_score\" : 1.0,\n+        \"_source\" : {\n+          \"@timestamp\" : \"2020-06-21T15:00:01-05:00\",\n+          \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+        },\n+        \"fields\" : {\n+          \"clientip\" : [\n+            \"211.11.9.0\"\n+          ],\n+          \"message\" : [\n+            \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+          ],\n+          \"@timestamp\" : [\n+            \"2020-06-21T20:00:01.000Z\"\n+          ]\n+        }\n+      },\n+      {\n+        \"_index\" : \"my-index\",\n+        \"_id\" : \"8Zh81nQBp2DRDXdiOxVu\",\n+        \"_score\" : 1.0,\n+        \"_source\" : {\n+          \"@timestamp\" : \"2020-06-21T15:00:01-05:00\",\n+          \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+        },\n+        \"fields\" : {\n+          \"clientip\" : [\n+            \"211.11.9.0\"\n+          ],\n+          \"message\" : [\n+            \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+          ],\n+          \"@timestamp\" : [\n+            \"2020-06-21T20:00:01.000Z\"\n+          ]\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\\.\\.\\./\"took\" : $body.took,\"timed_out\" : $body.timed_out,\"_shards\" : $body._shards,/]\n+// TESTRESPONSE[s/\"_id\" : \"8Jh81nQBp2DRDXdiOxVt\"/\"_id\": $body.hits.hits.0._id/]\n+// TESTRESPONSE[s/\"_id\" : \"8Zh81nQBp2DRDXdiOxVu\"/\"_id\": $body.hits.hits.1._id/]\n+\n+If you add the `day_of_week` field to the mapping using the request in\n+<<runtime-mapping-fields,mapping a runtime field>>, you can re-run the previous\n+search request and also retrieve the day of the week based on the `@timestamp`\n+field.\n+\n+The value for this field is calculated dynamically at runtime without\n+reindexing the document or adding the `day_of_week` field. This flexibility\n+allows you to modify the mapping without changing any field values.\n+\n+////\n+[source,console]\n+----\n+PUT /my-index/\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"@timestamp\": {\n+        \"format\": \"strict_date_optional_time||epoch_second\",\n+        \"type\": \"date\"\n+      },\n+      \"message\": {\n+        \"type\": \"wildcard\"\n+      }\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 463}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTc0OTU4", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-541174958", "createdAt": "2020-11-30T18:21:25Z", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoyMToyNlrOH8H2HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoyMToyNlrOH8H2HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwNTE0OA==", "bodyText": "It is possible to include Painless script but it is also possible to relate to fields in _source without a script - see #64981", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532805148", "createdAt": "2020-11-30T18:21:26Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending\n+on the <<runtime-params-runtime-type,`runtime_type`>>. For example, let's say\n+you created an anomaly detection job that operates on the `@timestamp` field.\n+If the `@timestamp` field is a runtime field, the search cost would be extremely\n+high because the data isn't indexed and {es} must compute the value for each\n+document that matches the query.\n+\n+NOTE: Computing values for runtime fields in each document that might match a\n+query impacts search speed. Use the <<async-search,asynchronous search API>>\n+to run searches that include runtime fields.\n+\n+Runtime fields are useful when working with log data, especially when you're\n+unsure about the data structure. Your search speed decreases, but your index\n+size is much smaller and you can more quickly process logs without having to\n+index them.\n+\n+[[runtime-mapping-fields]]\n+==== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTc2MzA0", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-541176304", "createdAt": "2020-11-30T18:23:11Z", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoyMzoxMlrOH8H6bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoyMzoxMlrOH8H6bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwNjI1Mw==", "bodyText": "Still under evaluation. We may take release it in GA.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532806253", "createdAt": "2020-11-30T18:23:12Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -126,6 +126,31 @@ the <<analysis-standard-analyzer,`standard` analyzer>>, the\n This is the purpose of _multi-fields_. Most field types support multi-fields\n via the <<multi-fields>> parameter.\n \n+[discrete]\n+[[types-runtime]]\n+=== Runtime\n+{es} indexes most field types by default to promote faster search. However,\n+indexing all of your data can be slow and requires more disk space. If you're\n+experimenting with your data or are unsure which fields you need for search,\n+use _runtime fields_ beta[].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTk5ODcy", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-541199872", "createdAt": "2020-11-30T18:55:19Z", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1NToyMFrOH8JEuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1NToyMFrOH8JEuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNTI3Mg==", "bodyText": "Understanding you want to add a field after the documents are already indexed\nWanting to immediately start working on a new datastream, without fully understanding the data in it, and only while working on it (using runtime fields based on _source), understand what's the schema that will be most helpful and gradually adding it\nShadowing an indexed field with a runtime field to fix a mistake after the documents are indexed\nDefining fields that are only relevant for a particular context, e.g. a certain visualization, as ephemeral fields that are defined as part of the query, without influencing everyone's schema", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532825272", "createdAt": "2020-11-30T18:55:20Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjAzMzgz", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-541203383", "createdAt": "2020-11-30T18:59:56Z", "commit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1OTo1NlrOH8JPyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1OTo1NlrOH8JPyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyODEwNw==", "bodyText": "Consider discussing the correct choice instead, e.g. if you choose to index fields that you know you will filter, search and aggregate on, like timestamp, then Elasticsearch will automatically use these indexed fields first in the query execution process. The result will be that the system will end up calculating the value of the runtime fields for a relatively small subset of the documents, so although runtime fields are slower than indexed fields, the query performance degradation will be limited. Runtime fields and indexed fields complement each other and work best in tandem.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r532828107", "createdAt": "2020-11-30T18:59:56Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/types/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,585 @@\n+[[runtime]]\n+=== Runtime\n+Typically, you must index fields to {es} before they can be retrieved,\n+aggregated, or searched. With _runtime fields_ beta[], you can explicitly\n+define a field in the mapping and access it at search time without indexing\n+your data during ingest time.\n+\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. Runtime fields are accessible\n+from the search API like any other field. The <<search-field-caps,field capabilities API>> returns runtime fields as both searchable and aggregatable.\n+\n+By dynamically evaluating runtime fields at search time, you can optimize disk\n+space by choosing which fields to index. If you later decide that a runtime\n+field is increasingly used for filtering or aggregation, you can add the field\n+to `_source` to gain faster search speed.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or override field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+Runtime fields help to alleviate several common issues when using {es}:\n+\n+* Reindexing your data between development iterations is slow and can make\n+experimenting on large datasets difficult\n+* Indexing data before searching makes running one-off searches costly and\n+resource intensive\n+* Indexing all of your data instead of just the fields you want to search\n+requires more disk space to gain performance at search time\n+* Reindexing data for time-based indices to ensure that existing indices\n+include any new fields in the index template is slow\n+* Determining how a field is evaluated in {kib} at index or search time is\n+difficult for scripted fields because they have different needs based on where\n+they are implemented\n+\n+Runtime fields incur performance costs at search time, depending", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cf35429ec99c248e7b3f3e914931b0dc936a05"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d7b6a7a41c1af5395a7b2492445342cd6324c3", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/35d7b6a7a41c1af5395a7b2492445342cd6324c3", "committedDate": "2020-11-30T22:10:55Z", "message": "Incorporating feedback from reviewers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd5b20d1714587ca95f9719b89a86eea4c461a0", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/4cd5b20d1714587ca95f9719b89a86eea4c461a0", "committedDate": "2020-12-01T20:21:30Z", "message": "Minor changes from reviews."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2be37b9a1f3fdc8543d039e76d8146d8d752192", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/a2be37b9a1f3fdc8543d039e76d8146d8d752192", "committedDate": "2020-12-01T20:24:39Z", "message": "Merge branch 'master' into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b2720ff878a45b64e6b2fed0846ac7c3833bc5", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/99b2720ff878a45b64e6b2fed0846ac7c3833bc5", "committedDate": "2020-12-01T20:43:13Z", "message": "Adding alias for test case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43dd29d804c3a789fead62faae4bae5f337b173d", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/43dd29d804c3a789fead62faae4bae5f337b173d", "committedDate": "2020-12-01T20:55:28Z", "message": "Adding aliases to PUT example."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "994b1c22d7e388718cad56b47cfcc651115641e1", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/994b1c22d7e388718cad56b47cfcc651115641e1", "committedDate": "2020-12-01T21:52:33Z", "message": "Fixing test cases, for real this time."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38194b28817ba9d72ce119d86401347bb6ba661b", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/38194b28817ba9d72ce119d86401347bb6ba661b", "committedDate": "2020-12-01T22:42:27Z", "message": "Updating use cases and introducing overlay throughout."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a82e85987f974df55ace134e42b6f48a4da8d6", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/70a82e85987f974df55ace134e42b6f48a4da8d6", "committedDate": "2020-12-02T23:06:35Z", "message": "Edits, adding 'shadowing', and explaining shadowing better."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c27ce4c177f14774bcdc4d616ff530d12c977cfb", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/c27ce4c177f14774bcdc4d616ff530d12c977cfb", "committedDate": "2020-12-03T18:00:43Z", "message": "Streamlining tests and other changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/d9a927167824d778de20c5db84f6701406ec5893", "committedDate": "2020-12-03T19:45:25Z", "message": "Fix formatting in example for test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjM2MTM3", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-546236137", "createdAt": "2020-12-07T15:04:36Z", "commit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTowNDozN1rOIArIcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozOTo0MVrOIAs0uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3NzU4NQ==", "bodyText": "will this make user think that we do something magic with existing documents?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537577585", "createdAt": "2020-12-07T15:04:37Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3ODkyNQ==", "bodyText": "shadow existing fields? Shadowing is not specific to fields in _source, and actually from a search request you could even shadow an existing runtime field defined in the index mappings.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537578925", "createdAt": "2020-12-07T15:06:22Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MDI5Mw==", "bodyText": "why is runtime within double quotes? on purpose?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537580293", "createdAt": "2020-12-07T15:08:01Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MjI3Ng==", "bodyText": "(the mapped field plus its values) => which field do you mean? I guess you mean doc_values for all fields that have them?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537582276", "createdAt": "2020-12-07T15:10:35Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MzExNg==", "bodyText": "not for queries and aggregations, also sorting. Should rather say anywhere in a search request?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537583116", "createdAt": "2020-12-07T15:11:40Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MzgzNg==", "bodyText": "Each runtime field?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537583836", "createdAt": "2020-12-07T15:12:32Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NDEwMg==", "bodyText": "geo_point is missing", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537584102", "createdAt": "2020-12-07T15:12:52Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjYxMA==", "bodyText": "this makes it sound like a limitation, while it is not. I also don't understand the second part: you don't need to shadow, nor define the field in the search request if it is part of an object. I think that you are rather trying to explain that when you want to map a runtime field that is part of some object structure e.g. object.field , you don't need to recreate the object structure in the runtime field, but rather just define the leaf runtime field as object.field. Correct?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537586610", "createdAt": "2020-12-07T15:16:00Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+IMPORTANT: Objects are not supported in the `\"runtime\"` section under the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5Mjk2Mg==", "bodyText": "why is this section specifically on shadowing fields in the search request? Shadowing can also be done when defining runtime fields in the mappings, so I would expect shadowing to be documented as a feature of runtime fields in general", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537592962", "createdAt": "2020-12-07T15:24:03Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+IMPORTANT: Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. If you want to map a runtime field under an object, you\n+can\n+<<runtime-shadowing-fields,shadow the field value in the search request>>.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the field type. For example, a bar chart visualization\n+that uses a runtime field of type `ip` will fail if the type is changed\n+to `boolean`.\n+\n+****\n+\n+[discrete]\n+[[runtime-search-request]]\n+=== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-shadowing-fields]]\n+==== Shadowing fields in the search request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NDA4Nw==", "bodyText": "similar comment as above. Does it sound like a limitation? Defining fields that belong to an object, using the dot notation, does not necessarily mean that you are shadowing an existing field. It's two separate things.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537594087", "createdAt": "2020-12-07T15:25:33Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+IMPORTANT: Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. If you want to map a runtime field under an object, you\n+can\n+<<runtime-shadowing-fields,shadow the field value in the search request>>.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the field type. For example, a bar chart visualization\n+that uses a runtime field of type `ip` will fail if the type is changed\n+to `boolean`.\n+\n+****\n+\n+[discrete]\n+[[runtime-search-request]]\n+=== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-shadowing-fields]]\n+==== Shadowing fields in the search request\n+If you create a runtime field with the same name as a field that\n+already exists in the mapping, the runtime field shadows the mapped field. At\n+search time, {es} calculates the value of the runtime field and returns it as\n+part of the query. Because the runtime field shadows the mapped field, you can\n+modify the value returned in search without modifying the mapped field.\n+\n+Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. However, you can use the `runtime_mappings` section of the\n+`_search` request to shadow field values inside objects. For", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NTE4NA==", "bodyText": "I find this explanation too high-level: the field does not shadow field values in _source. It shadows most likely the indexed fields, depending on how they are mapped. It may be useful here to show the mappings to clarify what happens", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537595184", "createdAt": "2020-12-07T15:26:52Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+IMPORTANT: Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. If you want to map a runtime field under an object, you\n+can\n+<<runtime-shadowing-fields,shadow the field value in the search request>>.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the field type. For example, a bar chart visualization\n+that uses a runtime field of type `ip` will fail if the type is changed\n+to `boolean`.\n+\n+****\n+\n+[discrete]\n+[[runtime-search-request]]\n+=== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-shadowing-fields]]\n+==== Shadowing fields in the search request\n+If you create a runtime field with the same name as a field that\n+already exists in the mapping, the runtime field shadows the mapped field. At\n+search time, {es} calculates the value of the runtime field and returns it as\n+part of the query. Because the runtime field shadows the mapped field, you can\n+modify the value returned in search without modifying the mapped field.\n+\n+Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. However, you can use the `runtime_mappings` section of the\n+`_search` request to shadow field values inside objects. For\n+example, index the following documents into `my-index`:\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+shadow field values in `_source` for the duration of the query without", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NjcxMA==", "bodyText": "it does not evaluate the name.last field, but rather defines a runtime field that loads its values from its script and has logic around them.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537596710", "createdAt": "2020-12-07T15:28:43Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+IMPORTANT: Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. If you want to map a runtime field under an object, you\n+can\n+<<runtime-shadowing-fields,shadow the field value in the search request>>.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the field type. For example, a bar chart visualization\n+that uses a runtime field of type `ip` will fail if the type is changed\n+to `boolean`.\n+\n+****\n+\n+[discrete]\n+[[runtime-search-request]]\n+=== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-shadowing-fields]]\n+==== Shadowing fields in the search request\n+If you create a runtime field with the same name as a field that\n+already exists in the mapping, the runtime field shadows the mapped field. At\n+search time, {es} calculates the value of the runtime field and returns it as\n+part of the query. Because the runtime field shadows the mapped field, you can\n+modify the value returned in search without modifying the mapped field.\n+\n+Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. However, you can use the `runtime_mappings` section of the\n+`_search` request to shadow field values inside objects. For\n+example, index the following documents into `my-index`:\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+shadow field values in `_source` for the duration of the query without\n+modifying the field itself.\n+\n+The following request evaluates the `name.last` field and shadows the value for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NzgwNw==", "bodyText": "shadows the value for the name.first field in the search request: do you mean that the field defined in the search request shadows the field originally indexed as part of the execution of this search request?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537597807", "createdAt": "2020-12-07T15:29:58Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+IMPORTANT: Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. If you want to map a runtime field under an object, you\n+can\n+<<runtime-shadowing-fields,shadow the field value in the search request>>.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the field type. For example, a bar chart visualization\n+that uses a runtime field of type `ip` will fail if the type is changed\n+to `boolean`.\n+\n+****\n+\n+[discrete]\n+[[runtime-search-request]]\n+=== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-shadowing-fields]]\n+==== Shadowing fields in the search request\n+If you create a runtime field with the same name as a field that\n+already exists in the mapping, the runtime field shadows the mapped field. At\n+search time, {es} calculates the value of the runtime field and returns it as\n+part of the query. Because the runtime field shadows the mapped field, you can\n+modify the value returned in search without modifying the mapped field.\n+\n+Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. However, you can use the `runtime_mappings` section of the\n+`_search` request to shadow field values inside objects. For\n+example, index the following documents into `my-index`:\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+shadow field values in `_source` for the duration of the query without\n+modifying the field itself.\n+\n+The following request evaluates the `name.last` field and shadows the value for\n+the `name.first` field in the search request based on the script valuation:\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwMTg0Nw==", "bodyText": "should examples do more than just retrieving values for the field, to showcase the flexibility of runtime fields? We could for instance aggregate, filter docs etc.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537601847", "createdAt": "2020-12-07T15:35:13Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `\"runtime\"` section supports `boolean`, `date`, `double`, `ip`, `keyword`,\n+and `long` data types. Runtime fields with a `type` of `date` can accept the\n+<<mapping-date-format,`format`>> parameter exactly as the `date` field type.\n+\n+IMPORTANT: Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. If you want to map a runtime field under an object, you\n+can\n+<<runtime-shadowing-fields,shadow the field value in the search request>>.\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the field type. For example, a bar chart visualization\n+that uses a runtime field of type `ip` will fail if the type is changed\n+to `boolean`.\n+\n+****\n+\n+[discrete]\n+[[runtime-search-request]]\n+=== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-shadowing-fields]]\n+==== Shadowing fields in the search request\n+If you create a runtime field with the same name as a field that\n+already exists in the mapping, the runtime field shadows the mapped field. At\n+search time, {es} calculates the value of the runtime field and returns it as\n+part of the query. Because the runtime field shadows the mapped field, you can\n+modify the value returned in search without modifying the mapped field.\n+\n+Objects are not supported in the `\"runtime\"` section under the\n+mapping definition. However, you can use the `runtime_mappings` section of the\n+`_search` request to shadow field values inside objects. For\n+example, index the following documents into `my-index`:\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+shadow field values in `_source` for the duration of the query without\n+modifying the field itself.\n+\n+The following request evaluates the `name.last` field and shadows the value for\n+the `name.first` field in the search request based on the script valuation:\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-retrieving-fields]]\n+==== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that <<runtime-mapping-fields,this previous request>> defined as a runtime field\n+in the mapping. The value for the `day_of_week` field is calculated dynamically\n+at search time based on the evaluation of the defined script.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"fields\": [\n+    \"@timestamp\",\n+    \"day_of_week\"\n+  ],\n+  \"_source\": false\n+}\n+----\n+// TEST[continued]\n+\n+[discrete]\n+[[runtime-examples]]\n+=== Examples\n+Consider a large set of log data that you want to extract fields from.\n+Indexing the data is time consuming and uses a lot of disk space, and you just\n+want to explore the data structure without committing to a schema up front.\n+\n+You know that your log data contains specific fields that you want to extract.\n+By using runtime fields, you can define scripts to calculate values at search\n+time for these fields.\n+\n+You can start with a simple example by adding the `@timestamp` and `message`\n+fields to the `my-index` mapping. To remain flexible, use `wildcard` as the\n+field type for `message`:\n+\n+[source,console]\n+----\n+PUT /my-index/\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"@timestamp\": {\n+        \"format\": \"strict_date_optional_time||epoch_second\",\n+        \"type\": \"date\"\n+      },\n+      \"message\": {\n+        \"type\": \"wildcard\"\n+      }\n+    }\n+  }\n+}\n+----\n+\n+After mapping the fields you want to retrieve, index a few records from\n+your log data into {es}. The following request uses the <<docs-bulk,bulk API>>\n+to index raw log data into `my-index`. Instead of indexing all of your log\n+data, you can use a small sample to experiment with runtime fields.\n+\n+[source,console]\n+----\n+POST /my-index/_bulk?refresh\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-06-21T15:00:01-05:00\", \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:17-05:00\", \"message\" : \"40.135.0.0 - - [2020-04-30T14:30:17-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:30:53-05:00\", \"message\" : \"232.0.0.0 - - [2020-04-30T14:30:53-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:12-05:00\", \"message\" : \"26.1.0.0 - - [2020-04-30T14:31:12-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:19-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:19-05:00] \\\"GET /french/splash_inet.html HTTP/1.0\\\" 200 3781\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:27-05:00\", \"message\" : \"252.0.0.0 - - [2020-04-30T14:31:27-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_brdl.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:29-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:29-05:00] \\\"GET /images/hm_arw.gif HTTP/1.0\\\" 304 0\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:32-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:32-05:00] \\\"GET /images/nav_bg_top.gif HTTP/1.0\\\" 200 929\"}\n+{ \"index\": {}}\n+{ \"@timestamp\": \"2020-04-30T14:31:43-05:00\", \"message\" : \"247.37.0.0 - - [2020-04-30T14:31:43-05:00] \\\"GET /french/images/nav_venue_off.gif HTTP/1.0\\\" 304 0\"}\n+----\n+// TEST[continued]\n+\n+At this point, you can view how {es} stores your raw data.\n+\n+[source,console]\n+----\n+GET /my-index\n+----\n+// TEST[continued]\n+\n+The mapping contains two fields: `@timestamp` and `message`.\n+\n+[source,console-result]\n+----\n+{\n+  \"my-index\" : {\n+    \"aliases\" : { },\n+    \"mappings\" : {\n+      \"properties\" : {\n+        \"@timestamp\" : {\n+          \"type\" : \"date\",\n+          \"format\" : \"strict_date_optional_time||epoch_second\"\n+        },\n+        \"message\" : {\n+          \"type\" : \"wildcard\"\n+        }\n+      }\n+    },\n+    ...\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\\.\\.\\./\"settings\": $body.my-index.settings/]\n+\n+If you want to retrieve results that include `clientip`, you can add that field\n+as a runtime field in the mapping. The runtime script operates on the `clientip`\n+field at runtime to calculate values for that field.\n+\n+[source,console]\n+----\n+PUT /my-index/_mapping\n+{\n+  \"runtime\": {\n+    \"clientip\": {\n+      \"type\": \"ip\",\n+      \"script\" : {\n+      \"source\" : \"String m = doc[\\\"message\\\"].value; int end = m.indexOf(\\\" \\\"); emit(m.substring(0, end));\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+Using the `clientip` runtime field, you can define a simple query to run a\n+search for a specific IP address and return all related fields.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"size\": 1,\n+  \"query\": {\n+    \"match\": {\n+      \"clientip\": \"211.11.9.0\"\n+    }\n+  },\n+  \"fields\" : [\"*\"]\n+}\n+----\n+// TEST[continued]\n+\n+The API returns the following result. Without building your data structure in\n+advance, you can search and explore your data in meaningful ways to experiment\n+and determine which fields to index.\n+\n+[source,console-result]\n+----\n+{\n+  ...\n+  \"hits\" : {\n+    \"total\" : {\n+      \"value\" : 2,\n+      \"relation\" : \"eq\"\n+    },\n+    \"max_score\" : 1.0,\n+    \"hits\" : [\n+      {\n+        \"_index\" : \"my-index\",\n+        \"_id\" : \"oWs5KXYB-XyJbifr9mrz\",\n+        \"_score\" : 1.0,\n+        \"_source\" : {\n+          \"@timestamp\" : \"2020-06-21T15:00:01-05:00\",\n+          \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+        },\n+        \"fields\" : {\n+          \"@timestamp\" : [\n+            \"2020-06-21T20:00:01.000Z\"\n+          ],\n+          \"clientip\" : [\n+            \"211.11.9.0\"\n+          ],\n+          \"message\" : [\n+            \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+          ]\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\\.\\.\\./\"took\" : $body.took,\"timed_out\" : $body.timed_out,\"_shards\" : $body._shards,/]\n+// TESTRESPONSE[s/\"_id\" : \"oWs5KXYB-XyJbifr9mrz\"/\"_id\": $body.hits.hits.0._id/]\n+\n+You can add the `day_of_week` field to the mapping using the request from\n+<<runtime-mapping-fields,mapping a runtime field>>:\n+\n+[source,console]\n+----\n+PUT /my-index/_mapping\n+{\n+  \"runtime\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"properties\": {\n+    \"timestamp\": {\n+      \"type\": \"date\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+Then, you can re-run the previous search request and also retrieve the day of\n+the week based on the `@timestamp` field:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"size\": 1,\n+  \"query\": {\n+    \"match\": {\n+      \"clientip\": \"211.11.9.0\"\n+    }\n+  },\n+  \"fields\" : [\"*\"]\n+}\n+----\n+// TEST[continued]\n+\n+The value for this field is calculated dynamically at runtime without\n+reindexing the document or adding the `day_of_week` field. This flexibility\n+allows you to modify the mapping without changing any field values.\n+\n+[source,console-result]\n+----\n+{\n+  ...\n+  \"hits\" : {\n+    \"total\" : {\n+      \"value\" : 2,\n+      \"relation\" : \"eq\"\n+    },\n+    \"max_score\" : 1.0,\n+    \"hits\" : [\n+      {\n+        \"_index\" : \"my-index\",\n+        \"_id\" : \"oWs5KXYB-XyJbifr9mrz\",\n+        \"_score\" : 1.0,\n+        \"_source\" : {\n+          \"@timestamp\" : \"2020-06-21T15:00:01-05:00\",\n+          \"message\" : \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+        },\n+        \"fields\" : {\n+          \"@timestamp\" : [\n+            \"2020-06-21T20:00:01.000Z\"\n+          ],\n+          \"clientip\" : [\n+            \"211.11.9.0\"\n+          ],\n+          \"message\" : [\n+            \"211.11.9.0 - - [2020-06-21T15:00:01-05:00] \\\"GET /english/index.html HTTP/1.0\\\" 304 0\"\n+          ],\n+          \"day_of_week\" : [\n+            \"Sunday\" <1>\n+          ]\n+        }\n+      }\n+    ]\n+  }\n+}\n+----\n+// TESTRESPONSE[s/\\.\\.\\./\"took\" : $body.took,\"timed_out\" : $body.timed_out,\"_shards\" : $body._shards,/]\n+// TESTRESPONSE[s/\"_id\" : \"oWs5KXYB-XyJbifr9mrz\"/\"_id\": $body.hits.hits.0._id/]\n+// TESTRESPONSE[s/\"day_of_week\" : \\[\\n\\s+\"Sunday\"\\n\\s\\]/\"day_of_week\": $body.hits.hits.0.fields.day_of_week/]\n+\n+<1> This value was calculated at search time using the runtime script defined", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 517}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwMjMyMA==", "bodyText": "is returned?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537602320", "createdAt": "2020-12-07T15:35:52Z", "author": {"login": "javanna"}, "path": "docs/reference/search/field-caps.asciidoc", "diffHunk": "@@ -34,6 +34,10 @@ GET /_field_caps?fields=rating\n The field capabilities API returns the information about the capabilities of\n fields among multiple indices.\n \n+The field capabilities API returns <<runtime,runtime fields>> like any\n+other field. For example, a runtime field with a type of\n+`keyword` returns as any other field that belongs to the `keyword` family.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwMzI1Mw==", "bodyText": "This page is pretty long, would it make sense to split it into a couple of subpages/sections?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537603253", "createdAt": "2020-12-07T15:37:03Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwNTMwNw==", "bodyText": "I wonder if runtime fields should appear last on the right. Maybe they should be close to field data types and metadata fields? Also, mapping parameters does not apply to runtime fields, does it mean that maybe we need to restructure things a bit? I am not extremely sure what the answer is but i was curious if you had thought about how the overall mappings docs may evolve with the introduction of runtime fields. Before them, there were only indexed fields.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537605307", "createdAt": "2020-12-07T15:39:41Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping.asciidoc", "diffHunk": "@@ -262,3 +270,5 @@ include::mapping/fields.asciidoc[]\n include::mapping/params.asciidoc[]\n \n include::mapping/dynamic-mapping.asciidoc[]\n+\n+include::mapping/runtime.asciidoc[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDU5Njc2", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-546459676", "createdAt": "2020-12-07T19:20:04Z", "commit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOToyMDowNFrOIA2kNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTozMDozMFrOIA2-ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2NDkxOA==", "bodyText": "The key benefit of runtime fields is the ability to add fields to documents after these documents were already ingested into Elasticsearch. In addition to that, adding a runtime field does not increase the index size and runtime fields do not require indexing, so the ingest process performs better.\nA user can define a runtime field initially, and after working with it for a while can decide to change that runtime field into an indexed field in the template, to obtain better query performance. The result will be that this field will be indexed for any new document to any index that will be generated from this template. Queries that will refer to the runtime field will not need to change to refer to the indexed field, and in fact can refer to some indices in which the field is a runtime field and to other indices in which the field is an indexed field.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537764918", "createdAt": "2020-12-07T19:20:04Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2ODUyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            of computing values for runtime fields in each document containing that field.\n          \n          \n            \n            of computing values for runtime fields in each document containing that field, because the user will get results asynchronously if the query cannot return the result set synchronously.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537768526", "createdAt": "2020-12-07T19:25:46Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MDAxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            search time, the script runs and generates values for each scripted field.\n          \n          \n            \n            search time, the script runs and generates values for each scripted field that is required for the query.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537770017", "createdAt": "2020-12-07T19:28:01Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MTY0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> Each runtime has its own field type, just like any other field.\n          \n          \n            \n            <2> Each runtime field has its own field type, just like any other field.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r537771643", "createdAt": "2020-12-07T19:30:30Z", "author": {"login": "giladgal"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,518 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, you can more quickly ingest raw data\n+into the Elastic Stack and access it immediately. By dynamically evaluating\n+runtime fields at search time, you can optimize disk space by choosing which\n+fields to index. If you later decide that a runtime field is increasingly used\n+for filtering or aggregation, you can add the field to `_source` to gain faster\n+search speed.\n+\n+Instead of reindexing your data to add fields, add runtime fields to the\n+mapping definition. You can access runtime fields from the search API like any\n+other field, and {es} sees runtime fields no differently.\n+\n+Alternatively, you can specify a `runtime_mappings` section in a search request\n+to use runtime fields that exist only as part of the query. This\n+flexibility allows you to create or shadow field values in `_source` for the\n+duration of the query without modifying the field itself.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[discrete]\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `\"runtime\"` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+original `_source` and `doc_values` (the mapped field plus its values). At\n+search time, the script runs and generates values for each scripted field.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available for\n+queries and aggregations.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `\"runtime\"` section of the mapping\n+definition.\n+<2> Each runtime has its own field type, just like any other field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a927167824d778de20c5db84f6701406ec5893"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d5452d2840d25f9f0e1cf355bd14741c2a7c8f6", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/4d5452d2840d25f9f0e1cf355bd14741c2a7c8f6", "committedDate": "2020-12-07T22:36:42Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Gilad Gal <gilad.gal@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "817591707969001ef5b9982efdedfdacb485ad02", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/817591707969001ef5b9982efdedfdacb485ad02", "committedDate": "2020-12-07T23:44:58Z", "message": "Incorporating reviewer feedback 7 Dec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e7b0b816bf9d1e50e9af4affd58adfa165b949d", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/4e7b0b816bf9d1e50e9af4affd58adfa165b949d", "committedDate": "2020-12-08T14:05:11Z", "message": "Merge branch 'master' into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b732ae2997f8abd4b812960b440f3e095eb120d7", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/b732ae2997f8abd4b812960b440f3e095eb120d7", "committedDate": "2020-12-08T15:17:47Z", "message": "Shifting structure of mapping page to fix cross links."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ea874f6535f91cd21efa6b4b870f5b454305acb", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ea874f6535f91cd21efa6b4b870f5b454305acb", "committedDate": "2020-12-08T15:18:16Z", "message": "Merge branch 'docs__add-runtime-fields' of github.com:lockewritesdocs/elasticsearch into docs__add-runtime-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/8870aabdbe3f3bc1b519bf042c473b81a37d0dc0", "committedDate": "2020-12-08T23:17:12Z", "message": "Revisions for shadowing, overview, and other sections."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzI2NTg1", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-548326585", "createdAt": "2020-12-09T15:51:10Z", "commit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1MToxMVrOICbvug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjowMjo1N1rOICcYDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMjY1MA==", "bodyText": "you can add runtime fields ?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r539422650", "createdAt": "2020-12-09T15:51:11Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping.asciidoc", "diffHunk": "@@ -30,68 +30,34 @@ document. Each field has its own <<mapping-types, data type>>.\n NOTE: Before 7.0.0, the 'mappings' definition used to include a type name.\n For more details, please see <<removal-of-types>>.\n \n-[[mapping-limit-settings]]\n [discrete]\n-=== Settings to prevent mappings explosion\n-\n-Defining too many fields in an index can lead to a\n-mapping explosion, which can cause out of memory errors and difficult\n-situations to recover from.\n+[[mapping-limit-settings]]\n+== Settings to prevent mapping explosion\n+Defining too many fields in an index can lead to a mapping explosion, which can\n+cause out of memory errors and difficult situations to recover from.\n \n Consider a situation where every new document inserted\n introduces new fields, such as with <<dynamic-mapping,dynamic mapping>>.\n Each new field is added to the index mapping, which can become a\n problem as the mapping grows.\n \n-Use the following settings to limit the number of field mappings (created manually or dynamically) and prevent documents from causing a mapping explosion:\n-\n-`index.mapping.total_fields.limit`::\n-    The maximum number of fields in an index. Field and object mappings, as well as\n-    field aliases count towards this limit. The default value is `1000`.\n-+\n-[IMPORTANT]\n-====\n-The limit is in place to prevent mappings and searches from becoming too\n-large. Higher values can lead to performance degradations and memory issues,\n-especially in clusters with a high load or few resources.\n-\n-If you increase this setting, we recommend you also increase the\n-<<search-settings,`indices.query.bool.max_clause_count`>> setting, which\n-limits the maximum number of <<query-dsl-bool-query,boolean clauses>> in a query.\n-====\n-+\n-[TIP]\n-====\n-If your field mappings contain a large, arbitrary set of keys, consider using the <<flattened,flattened>> data type.\n-====\n-\n-`index.mapping.depth.limit`::\n-    The maximum depth for a field, which is measured as the number of inner\n-    objects. For instance, if all fields are defined at the root object level,\n-    then the depth is `1`. If there is one object mapping, then the depth is\n-    `2`, etc. Default is `20`.\n-\n-// tag::nested-fields-limit[]\n-`index.mapping.nested_fields.limit`::\n-    The maximum number of distinct `nested` mappings in an index. The `nested` type should only be used in special cases, when arrays of objects need to be queried independently of each other. To safeguard against poorly designed mappings, this setting\n-    limits the number of unique `nested` types per index. Default is `50`.\n-// end::nested-fields-limit[]\n-\n-// tag::nested-objects-limit[]\n-`index.mapping.nested_objects.limit`::\n-    The maximum number of nested JSON objects that a single document can contain across all\n-    `nested` types. This limit helps to prevent out of memory errors when a document contains too many nested\n-    objects. Default is `10000`.\n-// end::nested-objects-limit[]\n-\n-`index.mapping.field_name_length.limit`::\n-    Setting for the maximum length of a field name. This setting isn't really something that addresses\n-    mappings explosion but might still be useful if you want to limit the field length.\n-    It usually shouldn't be necessary to set this setting. The default is okay\n-    unless a user starts to add a huge number of fields with really long names. Default is\n-    `Long.MAX_VALUE` (no limit).\n+Use the <<mapping-settings-limit,mapping limit settings>> to limit the number\n+of field mappings (created manually or dynamically) and prevent documents from\n+causing a mapping explosion.\n+\n+[discrete]\n+[[runtime-fields]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents.\n+\n+<<runtime,Runtime fields>> are not indexed, which saves disk space and makes\n+data ingest faster. You can add fields to existing documents without reindexing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNjE5MA==", "bodyText": "Is it important to specify that within the section you define the runtime fields, each of which are made of a painless script? Does the current text make users think that they only have to stick a script in the runtime section?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r539426190", "createdAt": "2020-12-09T15:55:11Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,603 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+You access runtime fields from the search API like any other field, and {es}\n+sees runtime fields no differently.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, adding a runtime field doesn't increase\n+the index size. You define runtime fields directly in the index mapping, saving\n+storage costs and increasing ingestion speed. You can more quickly ingest\n+data into the Elastic Stack and access it right away.\n+\n+When you define a runtime field, you can immediately use it in search requests,\n+aggregations, filtering, and sorting. If you later decide that the runtime\n+field is increasingly used for filtering or aggregations, you can modify the\n+index template to make the runtime field an indexed field. You'll achieve better\n+query performance, and the field will be indexed for any new document matching\n+an index generated by the index template.\n+\n+If you make a runtime field an indexed field, you don't need to modify any\n+queries that refer to the runtime field. Better yet, you can refer to some\n+indices where the field is a runtime field, and other indices where the field\n+is an indexed field. You have the flexibility to choose which fields to index\n+and which ones to keep as runtime fields.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+If the query can't return the result set synchronously, you'll get results\n+asynchronously as they become available.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `runtime` section under the mapping\n+definition. Within that section, you", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNzExNA==", "bodyText": "missing comma after geo_point", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r539427114", "createdAt": "2020-12-09T15:56:11Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,603 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+You access runtime fields from the search API like any other field, and {es}\n+sees runtime fields no differently.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, adding a runtime field doesn't increase\n+the index size. You define runtime fields directly in the index mapping, saving\n+storage costs and increasing ingestion speed. You can more quickly ingest\n+data into the Elastic Stack and access it right away.\n+\n+When you define a runtime field, you can immediately use it in search requests,\n+aggregations, filtering, and sorting. If you later decide that the runtime\n+field is increasingly used for filtering or aggregations, you can modify the\n+index template to make the runtime field an indexed field. You'll achieve better\n+query performance, and the field will be indexed for any new document matching\n+an index generated by the index template.\n+\n+If you make a runtime field an indexed field, you don't need to modify any\n+queries that refer to the runtime field. Better yet, you can refer to some\n+indices where the field is a runtime field, and other indices where the field\n+is an indexed field. You have the flexibility to choose which fields to index\n+and which ones to keep as runtime fields.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+If the query can't return the result set synchronously, you'll get results\n+asynchronously as they become available.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `runtime` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, including the original `_source` and any mapped\n+fields plus their values. At search time, the script runs and generates values\n+for each scripted field that is required for the query.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available anywhere\n+in a search request.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime field has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `runtime` section supports `boolean`, `date`, `double`, `geo_point` `ip`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyOTk3Nw==", "bodyText": "is it clear that these two mappings examples are not equivalent, in that one defines company.name as a text indexed field, while the other one defines it as a runtime field? Is it worth shortening this to using keyword for the name instead of a multi_field in the example above? Or possibly not even showing that mappings, but rather say: given this document, say you want to map company.name as a runtime field, here is how you do it:", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r539429977", "createdAt": "2020-12-09T15:59:25Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,603 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+You access runtime fields from the search API like any other field, and {es}\n+sees runtime fields no differently.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, adding a runtime field doesn't increase\n+the index size. You define runtime fields directly in the index mapping, saving\n+storage costs and increasing ingestion speed. You can more quickly ingest\n+data into the Elastic Stack and access it right away.\n+\n+When you define a runtime field, you can immediately use it in search requests,\n+aggregations, filtering, and sorting. If you later decide that the runtime\n+field is increasingly used for filtering or aggregations, you can modify the\n+index template to make the runtime field an indexed field. You'll achieve better\n+query performance, and the field will be indexed for any new document matching\n+an index generated by the index template.\n+\n+If you make a runtime field an indexed field, you don't need to modify any\n+queries that refer to the runtime field. Better yet, you can refer to some\n+indices where the field is a runtime field, and other indices where the field\n+is an indexed field. You have the flexibility to choose which fields to index\n+and which ones to keep as runtime fields.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+If the query can't return the result set synchronously, you'll get results\n+asynchronously as they become available.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `runtime` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, including the original `_source` and any mapped\n+fields plus their values. At search time, the script runs and generates values\n+for each scripted field that is required for the query.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available anywhere\n+in a search request.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime field has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `runtime` section supports `boolean`, `date`, `double`, `geo_point` `ip`,\n+`keyword`, and `long` data types. Runtime fields with a `type` of `date` can\n+accept the <<mapping-date-format,`format`>> parameter exactly as the `date`\n+field type.\n+\n+You can define a runtime field that isn't at the top level of a document. If\n+you want to map a runtime field under an object, you can use dot notation\n+instead of recreating the entire object structure.\n+\n+For example, let's say you add the following document:\n+\n+[source, console]\n+----\n+POST my-index/_doc/1\n+{\n+  \"company\": {\n+    \"name\": \"Elastic\"\n+  }\n+}\n+----\n+\n+If you retrieve the mapping for that document, you'll see that the `name` field\n+is nested under the `company` object:\n+\n+[source, console]\n+----\n+GET my-index/_mapping\n+----\n+//TEST[continued]\n+\n+[source, console-result]\n+----\n+{\n+  \"my-index\" : {\n+    \"mappings\" : {\n+      \"properties\" : {\n+        \"company\" : {\n+          \"properties\" : {\n+            \"name\" : {\n+              \"type\" : \"text\",\n+              \"fields\" : {\n+                \"keyword\" : {\n+                  \"type\" : \"keyword\",\n+                  \"ignore_above\" : 256\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+----\n+//TEST[continued]\n+\n+You could create a runtime field in the mapping using `company.name` instead of\n+recreating the object structure for that field:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzMjk3Mg==", "bodyText": "shall we also add the response for this request, to show how the runtime field is returned? Or is that redundant?", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r539432972", "createdAt": "2020-12-09T16:02:57Z", "author": {"login": "javanna"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -0,0 +1,603 @@\n+[[runtime]]\n+== Runtime fields\n+Typically, you index data into {es} to promote faster search. However, indexing\n+can be slow and requires more disk space, and you have to reindex your data to\n+add fields to existing documents. With _runtime fields_, you can add\n+fields to documents already indexed to {es} without reindexing your data.\n+\n+You access runtime fields from the search API like any other field, and {es}\n+sees runtime fields no differently.\n+\n+[discrete]\n+[[runtime-benefits]]\n+=== Benefits\n+Because runtime fields aren't indexed, adding a runtime field doesn't increase\n+the index size. You define runtime fields directly in the index mapping, saving\n+storage costs and increasing ingestion speed. You can more quickly ingest\n+data into the Elastic Stack and access it right away.\n+\n+When you define a runtime field, you can immediately use it in search requests,\n+aggregations, filtering, and sorting. If you later decide that the runtime\n+field is increasingly used for filtering or aggregations, you can modify the\n+index template to make the runtime field an indexed field. You'll achieve better\n+query performance, and the field will be indexed for any new document matching\n+an index generated by the index template.\n+\n+If you make a runtime field an indexed field, you don't need to modify any\n+queries that refer to the runtime field. Better yet, you can refer to some\n+indices where the field is a runtime field, and other indices where the field\n+is an indexed field. You have the flexibility to choose which fields to index\n+and which ones to keep as runtime fields.\n+\n+[discrete]\n+[[runtime-use-cases]]\n+=== Use cases\n+Runtime fields are useful when working with log data\n+(see <<runtime-examples,examples>>), especially when you're unsure about the\n+data structure. Your search speed decreases, but your index size is much\n+smaller and you can more quickly process logs without having to index them.\n+\n+Runtime fields are especially useful in the following contexts:\n+\n+* Adding fields to documents that are already indexed without having to reindex\n+data\n+* Immediately begin working on a new data stream without fully understanding\n+the data it contains\n+* Shadowing an indexed field with a runtime field to fix a mistake after\n+indexing documents\n+* Defining fields that are only relevant for a particular context (such as a\n+visualization in {kib}) without influencing the underlying schema\n+\n+[discrete]\n+[[runtime-compromises]]\n+=== Compromises\n+Runtime fields use less disk space and provide flexibility in how you access\n+your data, but can impact search performance based on the computation defined in\n+the runtime script.\n+\n+To balance search performance and flexibility, index fields that you'll\n+commonly search for and filter on, such as a timestamp. {es} automatically uses\n+these indexed fields first when running a query, resulting in a fast response\n+time. You can then use runtime fields to limit the number of fields that {es}\n+needs to calculate values for. Using indexed fields in tandem with runtime\n+fields provides flexibility in the data that you index and how you define\n+queries for other fields.\n+\n+Use the <<async-search,asynchronous search API>> to run searches that include\n+runtime fields. This method of search helps to offset the performance impacts\n+of computing values for runtime fields in each document containing that field.\n+If the query can't return the result set synchronously, you'll get results\n+asynchronously as they become available.\n+\n+IMPORTANT: Queries against runtime fields are considered expensive. If\n+<<query-dsl-allow-expensive-queries,`search.allow_expensive_queries`>> is set\n+to `false`, expensive queries are not allowed and {es} will reject any queries\n+against runtime fields.\n+\n+[[runtime-mapping-fields]]\n+=== Mapping a runtime field\n+You map runtime fields by adding a `runtime` section under the mapping\n+definition. Within that section, you\n+<<modules-scripting-using,define a Painless script>>, which has access to the\n+entire context of a document, including the original `_source` and any mapped\n+fields plus their values. At search time, the script runs and generates values\n+for each scripted field that is required for the query.\n+\n+NOTE: You can define a runtime field in the mapping definition without a\n+script. {es} will look in `_source` for a field with the same name as the\n+runtime field and use values from that field at query time.\n+\n+Runtime fields are similar to the <<script-fields,`script_fields`>> parameter\n+of the `_search` request, but also make the script results available anywhere\n+in a search request.\n+\n+The script in the following request extracts the day of the week from the\n+`@timestamp` field, which is defined as a `date` type:\n+\n+[source,console]\n+----\n+PUT /my-index\n+{\n+  \"mappings\": {\n+    \"runtime\": { <1>\n+      \"day_of_week\": {\n+        \"type\": \"keyword\", <2>\n+        \"script\": { <3>\n+          \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+        }\n+      }\n+    },\n+    \"properties\": {\n+      \"timestamp\": {\"type\": \"date\"}\n+    }\n+  }\n+}\n+----\n+\n+<1> Runtime fields are defined in the `runtime` section of the mapping\n+definition.\n+<2> Each runtime field has its own field type, just like any other field.\n+<3> The script defines the evaluation to calculate at search time.\n+\n+The `runtime` section supports `boolean`, `date`, `double`, `geo_point` `ip`,\n+`keyword`, and `long` data types. Runtime fields with a `type` of `date` can\n+accept the <<mapping-date-format,`format`>> parameter exactly as the `date`\n+field type.\n+\n+You can define a runtime field that isn't at the top level of a document. If\n+you want to map a runtime field under an object, you can use dot notation\n+instead of recreating the entire object structure.\n+\n+For example, let's say you add the following document:\n+\n+[source, console]\n+----\n+POST my-index/_doc/1\n+{\n+  \"company\": {\n+    \"name\": \"Elastic\"\n+  }\n+}\n+----\n+\n+If you retrieve the mapping for that document, you'll see that the `name` field\n+is nested under the `company` object:\n+\n+[source, console]\n+----\n+GET my-index/_mapping\n+----\n+//TEST[continued]\n+\n+[source, console-result]\n+----\n+{\n+  \"my-index\" : {\n+    \"mappings\" : {\n+      \"properties\" : {\n+        \"company\" : {\n+          \"properties\" : {\n+            \"name\" : {\n+              \"type\" : \"text\",\n+              \"fields\" : {\n+                \"keyword\" : {\n+                  \"type\" : \"keyword\",\n+                  \"ignore_above\" : 256\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+----\n+//TEST[continued]\n+\n+You could create a runtime field in the mapping using `company.name` instead of\n+recreating the object structure for that field:\n+\n+[source,console]\n+----\n+PUT my-index/_mapping\n+{\n+  \"runtime\": {\n+    \"company.name\": {\n+      \"type\": \"keyword\"\n+    }\n+  }\n+}\n+----\n+//TEST[continued]\n+\n+[[runtime-updating-scripts]]\n+.Updating runtime scripts\n+****\n+\n+Updating a script while a dependent query is running can return\n+inconsistent results. Each shard might have access to different versions of the\n+script, depending on when the mapping change takes effect.\n+\n+Existing queries or visualizations in {kib} that rely on runtime fields can\n+fail if you change the field type. For example, a bar chart visualization\n+that uses a runtime field of type `ip` will fail if the type is changed\n+to `boolean`.\n+\n+****\n+\n+[[runtime-search-request]]\n+=== Defining runtime fields in a search request\n+You can specify a `runtime_mappings` section in a search request to create\n+runtime fields that exist only as part of the query. You specify a script\n+as part of the `runtime_mappings` section, just as you would if adding a\n+runtime field to the mappings.\n+\n+Fields defined in the search request take precedence over fields defined with\n+the same name in the index mappings. This flexibility allows you to shadow\n+existing fields and calculate a different value in the search request, without\n+modifying the field itself. If you made a mistake in your index mapping, you\n+can use runtime fields to calculate values that override values in the mapping\n+during the search request.\n+\n+In the following request, the values for the `day_of_week` field are calculated\n+dynamically, and only within the context of this search request:\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"day_of_week\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT))\"\n+      }\n+    }\n+  },\n+  \"aggs\": {\n+    \"day_of_week\": {\n+      \"terms\": {\n+        \"field\": \"day_of_week\"\n+      }\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+Defining a runtime field in a search request uses the same format as defining\n+a runtime field in the index mapping. That consistency means you can promote a\n+runtime field from a search request to the index mapping by moving the field\n+definition from `runtime_mappings` in the search request to the `runtime`\n+section of the index mapping.\n+\n+[[runtime-shadowing-fields]]\n+=== Shadowing fields\n+If you create a runtime field with the same name as a field that\n+already exists in the mapping, the runtime field shadows the mapped field. At\n+search time, {es} evaluates the runtime field, calculates a value based on the\n+script, and returns the value as part of the query. Because the runtime field\n+shadows the mapped field, you can modify the value returned in search without\n+modifying the mapped field.\n+\n+If you define a runtime field that does not include a script, {es} evaluates the\n+field at search time, looks at each document containing that field, retrieves\n+the `_source`, and returns a value if one exists.\n+\n+As mentioned in <<runtime-mapping-fields,mapping a runtime field>>, you can\n+shadow field values inside objects. For example, index the following documents into `my-index`:\n+\n+[source, console]\n+----\n+POST my-index/_bulk?refresh=true\n+{\"index\":{}}\n+{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"index\":{}}\n+{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+----\n+\n+In the `runtime_mappings` section of the `_search` request, you can define a\n+script that operates on the `name.first` field. The values you specify will\n+shadow field values in the index mapping for the duration of the query without\n+modifying the field itself.\n+\n+The following request defines a runtime field that retrieves values based on\n+the script valuation. The field defined in the search request shadows the\n+indexed `name.first` field and substitutes a value for that field based on the\n+logic defined in the script:\n+\n+[source,console]\n+----\n+POST my-index/_search\n+{\n+  \"runtime_mappings\": {\n+    \"name.first\": {\n+      \"type\": \"keyword\",\n+      \"script\": {\n+        \"source\": \"if (\\\"Hickman\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Guile\\\");} else if (\\\"Avila\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Anastasia\\\");}\"\n+      }\n+    }\n+  },\n+  \"query\": {\n+    \"match\": {\n+      \"name.first\": \"Anastasia\"\n+    }\n+  }\n+}\n+----\n+// TEST[continued]\n+\n+\n+[[runtime-retrieving-fields]]\n+=== Retrieving a runtime field\n+Use the <<search-fields,`fields`>> parameter on the `_search` API to retrieve\n+the values of runtime fields. Runtime fields won't display in `_source`, but\n+the `fields` API works for all fields, even those that were not sent as part of\n+the original `_source`.\n+\n+The following request uses the search API to retrieve the `day_of_week` field\n+that <<runtime-mapping-fields,this previous request>> defined as a runtime field\n+in the mapping. The value for the `day_of_week` field is calculated dynamically\n+at search time based on the evaluation of the defined script.\n+\n+[source,console]\n+----\n+GET my-index/_search\n+{\n+  \"fields\": [\n+    \"@timestamp\",\n+    \"day_of_week\"\n+  ],\n+  \"_source\": false\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0"}, "originalPosition": 333}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4Mzg5MDg1", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-548389085", "createdAt": "2020-12-09T16:51:22Z", "commit": {"oid": "8870aabdbe3f3bc1b519bf042c473b81a37d0dc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1475e9de11530dc2a7531ba86be7105919f43625", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/1475e9de11530dc2a7531ba86be7105919f43625", "committedDate": "2020-12-09T17:15:57Z", "message": "Removing dot notation section and incorporating review changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06241b7923628b7c4fc44728e86278afd770a920", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/06241b7923628b7c4fc44728e86278afd770a920", "committedDate": "2020-12-09T22:00:46Z", "message": "Adding updated example for shadowing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjQ5OTg5", "url": "https://github.com/elastic/elasticsearch/pull/62653#pullrequestreview-548649989", "createdAt": "2020-12-09T22:05:44Z", "commit": {"oid": "06241b7923628b7c4fc44728e86278afd770a920"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowNTo0NVrOICrpeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowNjo1M1rOICrr4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MzE5Mg==", "bodyText": "I'd make there be maybe 2 unique model_numbers, just to clarify that you get a lot of hits from one.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r539683192", "createdAt": "2020-12-09T22:05:45Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -193,48 +190,164 @@ script, and returns the value as part of the query. Because the runtime field\n shadows the mapped field, you can modify the value returned in search without\n modifying the mapped field.\n \n-For example, index the following documents into `my-index`:\n+For example, let's say you indexed the following documents into `my-index`:\n \n-[source, console]\n+[source,console]\n ----\n POST my-index/_bulk?refresh=true\n {\"index\":{}}\n-{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"timestamp\":1516729294000,\"model_number\":\"QVKC92Q\",\"measures\":{\"voltage\":5.2}}\n+{\"index\":{}}\n+{\"timestamp\":1516642894000,\"model_number\":\"PW83H7X\",\"measures\":{\"voltage\":5.8}}\n+{\"index\":{}}\n+{\"timestamp\":1516556494000,\"model_number\":\"ELF7YV2\",\"measures\":{\"voltage\":5.1}}\n+{\"index\":{}}\n+{\"timestamp\":1516470094000,\"model_number\":\"5NMDTMF\",\"measures\":{\"voltage\":5.6}}\n {\"index\":{}}\n-{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+{\"timestamp\":1516383694000,\"model_number\":\"1N0TH44\",\"measures\":{\"voltage\":4.2}}\n+{\"index\":{}}\n+{\"timestamp\":1516297294000,\"model_number\":\"HG537PU\",\"measures\":{\"voltage\":4.0}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06241b7923628b7c4fc44728e86278afd770a920"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MzgwOA==", "bodyText": "I'd say something like \"Those darned HG537PUs report 90% of the real voltage\" or something like that. Sounds kind of believable.", "url": "https://github.com/elastic/elasticsearch/pull/62653#discussion_r539683808", "createdAt": "2020-12-09T22:06:53Z", "author": {"login": "nik9000"}, "path": "docs/reference/mapping/runtime.asciidoc", "diffHunk": "@@ -193,48 +190,164 @@ script, and returns the value as part of the query. Because the runtime field\n shadows the mapped field, you can modify the value returned in search without\n modifying the mapped field.\n \n-For example, index the following documents into `my-index`:\n+For example, let's say you indexed the following documents into `my-index`:\n \n-[source, console]\n+[source,console]\n ----\n POST my-index/_bulk?refresh=true\n {\"index\":{}}\n-{\"name\":{\"first\":\"Jose\",\"last\":\"Hickman\"}}\n+{\"timestamp\":1516729294000,\"model_number\":\"QVKC92Q\",\"measures\":{\"voltage\":5.2}}\n+{\"index\":{}}\n+{\"timestamp\":1516642894000,\"model_number\":\"PW83H7X\",\"measures\":{\"voltage\":5.8}}\n+{\"index\":{}}\n+{\"timestamp\":1516556494000,\"model_number\":\"ELF7YV2\",\"measures\":{\"voltage\":5.1}}\n+{\"index\":{}}\n+{\"timestamp\":1516470094000,\"model_number\":\"5NMDTMF\",\"measures\":{\"voltage\":5.6}}\n {\"index\":{}}\n-{\"name\":{\"first\":\"India\",\"last\":\"Avila\",\"suffix\":\"II\"}}\n+{\"timestamp\":1516383694000,\"model_number\":\"1N0TH44\",\"measures\":{\"voltage\":4.2}}\n+{\"index\":{}}\n+{\"timestamp\":1516297294000,\"model_number\":\"HG537PU\",\"measures\":{\"voltage\":4.0}}\n ----\n \n-In the `runtime_mappings` section of the `_search` request, you can define a\n-script that operates on the `name.first` field. The values you specify will\n-shadow field values in the index mapping for the duration of the query without\n-modifying the field itself.\n+You later realize that the voltage for the sensor matching model number\n+`HG537PU` is incorrect. The indexed value is `4.0`, but is supposed to be 1.7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06241b7923628b7c4fc44728e86278afd770a920"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b61ee1d709fa0b64699e88863bf4858651276d", "author": {"user": {"login": "lockewritesdocs", "name": "Adam Locke"}}, "url": "https://github.com/elastic/elasticsearch/commit/c1b61ee1d709fa0b64699e88863bf4858651276d", "committedDate": "2020-12-09T22:39:23Z", "message": "Streamlining shadowing example and TESTRESPONSEs."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3572, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}