{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTQwMzQ4", "number": 65600, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoyNjoyN1rOE-pwVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTowNToyOVrOE-12SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTMxMjg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoyNjoyN1rOH76_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxMjowMVrOH8HgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NDUwNA==", "bodyText": "We have MappingVisitor which already implements some of this, although it looks in properties rather than runtime - might be worth extending or re-using some of that?", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532594504", "createdAt": "2020-11-30T13:26:27Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82979ec030e88234eaac340b22937dcbb2ba44fe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5ODI0MA==", "bodyText": "I am aware, those rely on standard field type structure also. To reuse the existing mappings visitor I should have made a runtime visitor that looks in the runtime section instead of properties, and also plugin a function to process fields differently for runtime fields, as we want to have additional stats for them. Also, the standard mappings visitor looks at multi fields recursively which is not something that we support for runtime fields. The only call to this visitor would be from the runtime fields usage api, hence I thought it's overkill. I believe it would be more lines added for the added flexibility than shared between the two implementations. What do you think?", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532598240", "createdAt": "2020-11-30T13:32:17Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NDUwNA=="}, "originalCommit": {"oid": "82979ec030e88234eaac340b22937dcbb2ba44fe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5OTU1OA==", "bodyText": "I figure if we see the need later we'll add a visitor but that this works fine for now.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532799558", "createdAt": "2020-11-30T18:12:01Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NDUwNA=="}, "originalCommit": {"oid": "82979ec030e88234eaac340b22937dcbb2ba44fe"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjYyNDc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/XPackUsageFeatureAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxMTowMFrOH8HdzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxMTowMFrOH8HdzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5ODkyNQ==", "bodyText": "\ud83d\udc4d\nWhile you are here could you make them one per line and alphabetical order? I know it is a pain but it'll push everyone who comes after you to be neat and tidy.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532798925", "createdAt": "2020-11-30T18:11:00Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/XPackUsageFeatureAction.java", "diffHunk": "@@ -47,17 +44,13 @@\n     public static final XPackUsageFeatureAction DATA_STREAMS = new XPackUsageFeatureAction(XPackField.DATA_STREAMS);\n     public static final XPackUsageFeatureAction DATA_TIERS = new XPackUsageFeatureAction(XPackField.DATA_TIERS);\n     public static final XPackUsageFeatureAction AGGREGATE_METRIC = new XPackUsageFeatureAction(XPackField.AGGREGATE_METRIC);\n+    public static final XPackUsageFeatureAction RUNTIME_FIELDS = new XPackUsageFeatureAction(XPackField.RUNTIME_FIELDS);\n \n-    public static final List<XPackUsageFeatureAction> ALL;\n-    static {\n-        final List<XPackUsageFeatureAction> actions = new ArrayList<>();\n-        actions.addAll(Arrays.asList(\n-            SECURITY, MONITORING, WATCHER, GRAPH, MACHINE_LEARNING, LOGSTASH, EQL, SQL, ROLLUP, INDEX_LIFECYCLE, SNAPSHOT_LIFECYCLE, CCR,\n-            TRANSFORM, VECTORS, VOTING_ONLY, FROZEN_INDICES, SPATIAL, ANALYTICS, DATA_STREAMS, SEARCHABLE_SNAPSHOTS, DATA_TIERS,\n-            AGGREGATE_METRIC\n-        ));\n-        ALL = Collections.unmodifiableList(actions);\n-    }\n+    static final List<XPackUsageFeatureAction> ALL = List.of(\n+        SECURITY, MONITORING, WATCHER, GRAPH, MACHINE_LEARNING, LOGSTASH, EQL, SQL, ROLLUP, INDEX_LIFECYCLE, SNAPSHOT_LIFECYCLE, CCR,\n+        TRANSFORM, VECTORS, VOTING_ONLY, FROZEN_INDICES, SPATIAL, ANALYTICS, DATA_STREAMS, SEARCHABLE_SNAPSHOTS, DATA_TIERS,\n+        AGGREGATE_METRIC, RUNTIME_FIELDS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjYzMjMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxMjo1NVrOH8HiaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxMTowMlrOH8fc7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMDEwNQ==", "bodyText": "If you cast to Map<?, ?> you don't need to suppress and .values will still return Object. You can't .put on the map but you don't need to.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532800105", "createdAt": "2020-11-30T18:12:55Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMDE2Nw==", "bodyText": "Just a sneaky way to save a line.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532800167", "createdAt": "2020-11-30T18:13:02Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMDEwNQ=="}, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MTkxOA==", "bodyText": "nice trick", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r533191918", "createdAt": "2020-12-01T09:11:02Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMDEwNQ=="}, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjYzODc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNDozNVrOH8HmNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNDozNVrOH8HmNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMTA3Ng==", "bodyText": "Is there any chance you could flip this so it continues if mappingMetadata is null. I find quick continues to be easier to short cut in my head when reading. With these indenting ifs I have to scroll down and check if there is an else.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532801076", "createdAt": "2020-11-30T18:14:35Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjY0MzE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNTozN1rOH8HotA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1MjoyM1rOH8LUXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMTcxNg==", "bodyText": "If script isn't an instanceof Map can it be a String? Would we get the short form here?", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532801716", "createdAt": "2020-11-30T18:15:37Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2MjA0NA==", "bodyText": "It is my understanding that regardless of how it was submitted, the script always gets outputted in the long form. I will double check though. That is also why I am using the Script class in the unit tests", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532862044", "createdAt": "2020-11-30T19:52:23Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMTcxNg=="}, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjY0NjU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNjoyOFrOH8Hquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjoyNjowMlrOH8QTPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMjIzNQ==", "bodyText": "Any reason not to use a List in the response? I know we sometimes use List and sometimes arrays but I've never been sure why.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532802235", "createdAt": "2020-11-30T18:16:28Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<String, Object> script = (Map<String, Object>) scriptObject;\n+                                    Object sourceObject = script.get(\"source\");\n+                                    if (sourceObject != null) {\n+                                        String scriptSource = sourceObject.toString();\n+                                        int chars = scriptSource.length();\n+                                        long lines = scriptSource.lines().count();\n+                                        int docUsages = countOccurrences(scriptSource, \"doc[\\\\[\\\\.]\");\n+                                        int sourceUsages = countOccurrences(scriptSource, \"params\\\\._source\");\n+                                        stats.update(chars, lines, sourceUsages, docUsages);\n+                                    }\n+                                    Object langObject = script.get(\"lang\");\n+                                    if (langObject != null) {\n+                                        stats.scriptLangs.add(langObject.toString());\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        RuntimeFieldStats[] runtimeFieldStats = fieldTypes.values().toArray(new RuntimeFieldStats[0]);\n+        Arrays.sort(runtimeFieldStats, Comparator.comparing(RuntimeFieldStats::type));\n+        return new RuntimeFieldsFeatureSetUsage(runtimeFieldStats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMDE4Mw==", "bodyText": "I generally use a list when elements need to be added, and an array otherwise. I guess you'd like to use a list because it can be made truly immutable?", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532900183", "createdAt": "2020-11-30T21:00:16Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<String, Object> script = (Map<String, Object>) scriptObject;\n+                                    Object sourceObject = script.get(\"source\");\n+                                    if (sourceObject != null) {\n+                                        String scriptSource = sourceObject.toString();\n+                                        int chars = scriptSource.length();\n+                                        long lines = scriptSource.lines().count();\n+                                        int docUsages = countOccurrences(scriptSource, \"doc[\\\\[\\\\.]\");\n+                                        int sourceUsages = countOccurrences(scriptSource, \"params\\\\._source\");\n+                                        stats.update(chars, lines, sourceUsages, docUsages);\n+                                    }\n+                                    Object langObject = script.get(\"lang\");\n+                                    if (langObject != null) {\n+                                        stats.scriptLangs.add(langObject.toString());\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        RuntimeFieldStats[] runtimeFieldStats = fieldTypes.values().toArray(new RuntimeFieldStats[0]);\n+        Arrays.sort(runtimeFieldStats, Comparator.comparing(RuntimeFieldStats::type));\n+        return new RuntimeFieldsFeatureSetUsage(runtimeFieldStats);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMjIzNQ=="}, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0MzY3Ng==", "bodyText": "Mostly because we accumulated a list so it feels like we may as well keep it that way. Either way is fine.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532943676", "createdAt": "2020-11-30T22:26:02Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<String, Object> script = (Map<String, Object>) scriptObject;\n+                                    Object sourceObject = script.get(\"source\");\n+                                    if (sourceObject != null) {\n+                                        String scriptSource = sourceObject.toString();\n+                                        int chars = scriptSource.length();\n+                                        long lines = scriptSource.lines().count();\n+                                        int docUsages = countOccurrences(scriptSource, \"doc[\\\\[\\\\.]\");\n+                                        int sourceUsages = countOccurrences(scriptSource, \"params\\\\._source\");\n+                                        stats.update(chars, lines, sourceUsages, docUsages);\n+                                    }\n+                                    Object langObject = script.get(\"lang\");\n+                                    if (langObject != null) {\n+                                        stats.scriptLangs.add(langObject.toString());\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        RuntimeFieldStats[] runtimeFieldStats = fieldTypes.values().toArray(new RuntimeFieldStats[0]);\n+        Arrays.sort(runtimeFieldStats, Comparator.comparing(RuntimeFieldStats::type));\n+        return new RuntimeFieldsFeatureSetUsage(runtimeFieldStats);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMjIzNQ=="}, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjY1MDE2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNzoyNVrOH8Hs7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1MzoyNFrOH8LZJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMjc5Ng==", "bodyText": "= 0 is the default, right?", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532802796", "createdAt": "2020-11-30T18:17:25Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<String, Object> script = (Map<String, Object>) scriptObject;\n+                                    Object sourceObject = script.get(\"source\");\n+                                    if (sourceObject != null) {\n+                                        String scriptSource = sourceObject.toString();\n+                                        int chars = scriptSource.length();\n+                                        long lines = scriptSource.lines().count();\n+                                        int docUsages = countOccurrences(scriptSource, \"doc[\\\\[\\\\.]\");\n+                                        int sourceUsages = countOccurrences(scriptSource, \"params\\\\._source\");\n+                                        stats.update(chars, lines, sourceUsages, docUsages);\n+                                    }\n+                                    Object langObject = script.get(\"lang\");\n+                                    if (langObject != null) {\n+                                        stats.scriptLangs.add(langObject.toString());\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        RuntimeFieldStats[] runtimeFieldStats = fieldTypes.values().toArray(new RuntimeFieldStats[0]);\n+        Arrays.sort(runtimeFieldStats, Comparator.comparing(RuntimeFieldStats::type));\n+        return new RuntimeFieldsFeatureSetUsage(runtimeFieldStats);\n+    }\n+\n+    private final RuntimeFieldStats[] stats;\n+\n+    RuntimeFieldsFeatureSetUsage(RuntimeFieldStats[] stats) {\n+        super(XPackField.RUNTIME_FIELDS, true, true);\n+        this.stats = stats;\n+    }\n+\n+    public RuntimeFieldsFeatureSetUsage(StreamInput in) throws IOException {\n+        super(in);\n+        this.stats = in.readArray(RuntimeFieldStats::new, RuntimeFieldStats[]::new);\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeArray(stats);\n+    }\n+\n+    RuntimeFieldStats[] getRuntimeFieldStats() {\n+        return stats;\n+    }\n+\n+    @Override\n+    protected void innerXContent(XContentBuilder builder, Params params) throws IOException {\n+        super.innerXContent(builder, params);\n+        builder.startArray(\"field_types\");\n+        for (RuntimeFieldStats stats : stats) {\n+            stats.toXContent(builder, params);\n+        }\n+        builder.endArray();\n+    }\n+\n+    @Override\n+    public Version getMinimalSupportedVersion() {\n+        return Version.V_7_11_0;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        RuntimeFieldsFeatureSetUsage that = (RuntimeFieldsFeatureSetUsage) o;\n+        return Arrays.equals(stats, that.stats);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Arrays.hashCode(stats);\n+    }\n+\n+    private static int countOccurrences(String script, String keyword) {\n+        int occurrences = 0;\n+        Pattern pattern = Pattern.compile(keyword);\n+        Matcher matcher = pattern.matcher(script);\n+        while (matcher.find()) {\n+            occurrences++;\n+        }\n+        return occurrences;\n+    }\n+\n+    static final class RuntimeFieldStats implements Writeable, ToXContentObject {\n+        private final String type;\n+        private int count = 0;\n+        private int indexCount = 0;\n+        private final Set<String> scriptLangs;\n+        private long scriptLessCount = 0;\n+        private long maxLines = 0;\n+        private long totalLines = 0;\n+        private long maxChars = 0;\n+        private long totalChars = 0;\n+        private long maxSourceUsages = 0;\n+        private long totalSourceUsages = 0;\n+        private long maxDocUsages = 0;\n+        private long totalDocUsages = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2MzI3MA==", "bodyText": "I guess, but I always forget.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532863270", "createdAt": "2020-11-30T19:53:24Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<String, Object> script = (Map<String, Object>) scriptObject;\n+                                    Object sourceObject = script.get(\"source\");\n+                                    if (sourceObject != null) {\n+                                        String scriptSource = sourceObject.toString();\n+                                        int chars = scriptSource.length();\n+                                        long lines = scriptSource.lines().count();\n+                                        int docUsages = countOccurrences(scriptSource, \"doc[\\\\[\\\\.]\");\n+                                        int sourceUsages = countOccurrences(scriptSource, \"params\\\\._source\");\n+                                        stats.update(chars, lines, sourceUsages, docUsages);\n+                                    }\n+                                    Object langObject = script.get(\"lang\");\n+                                    if (langObject != null) {\n+                                        stats.scriptLangs.add(langObject.toString());\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        RuntimeFieldStats[] runtimeFieldStats = fieldTypes.values().toArray(new RuntimeFieldStats[0]);\n+        Arrays.sort(runtimeFieldStats, Comparator.comparing(RuntimeFieldStats::type));\n+        return new RuntimeFieldsFeatureSetUsage(runtimeFieldStats);\n+    }\n+\n+    private final RuntimeFieldStats[] stats;\n+\n+    RuntimeFieldsFeatureSetUsage(RuntimeFieldStats[] stats) {\n+        super(XPackField.RUNTIME_FIELDS, true, true);\n+        this.stats = stats;\n+    }\n+\n+    public RuntimeFieldsFeatureSetUsage(StreamInput in) throws IOException {\n+        super(in);\n+        this.stats = in.readArray(RuntimeFieldStats::new, RuntimeFieldStats[]::new);\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeArray(stats);\n+    }\n+\n+    RuntimeFieldStats[] getRuntimeFieldStats() {\n+        return stats;\n+    }\n+\n+    @Override\n+    protected void innerXContent(XContentBuilder builder, Params params) throws IOException {\n+        super.innerXContent(builder, params);\n+        builder.startArray(\"field_types\");\n+        for (RuntimeFieldStats stats : stats) {\n+            stats.toXContent(builder, params);\n+        }\n+        builder.endArray();\n+    }\n+\n+    @Override\n+    public Version getMinimalSupportedVersion() {\n+        return Version.V_7_11_0;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        RuntimeFieldsFeatureSetUsage that = (RuntimeFieldsFeatureSetUsage) o;\n+        return Arrays.equals(stats, that.stats);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Arrays.hashCode(stats);\n+    }\n+\n+    private static int countOccurrences(String script, String keyword) {\n+        int occurrences = 0;\n+        Pattern pattern = Pattern.compile(keyword);\n+        Matcher matcher = pattern.matcher(script);\n+        while (matcher.find()) {\n+            occurrences++;\n+        }\n+        return occurrences;\n+    }\n+\n+    static final class RuntimeFieldStats implements Writeable, ToXContentObject {\n+        private final String type;\n+        private int count = 0;\n+        private int indexCount = 0;\n+        private final Set<String> scriptLangs;\n+        private long scriptLessCount = 0;\n+        private long maxLines = 0;\n+        private long totalLines = 0;\n+        private long maxChars = 0;\n+        private long totalChars = 0;\n+        private long maxSourceUsages = 0;\n+        private long totalSourceUsages = 0;\n+        private long maxDocUsages = 0;\n+        private long totalDocUsages = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMjc5Ng=="}, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzI5NDE2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTowNToyOVrOH8Nz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMToxMDo0NlrOH8N-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMjkwMg==", "bodyText": "I think its worth double checking if this matches stuff like doc\\. I never can remember the escaping rules for character classes.", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532902902", "createdAt": "2020-11-30T21:05:29Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<String, Object> script = (Map<String, Object>) scriptObject;\n+                                    Object sourceObject = script.get(\"source\");\n+                                    if (sourceObject != null) {\n+                                        String scriptSource = sourceObject.toString();\n+                                        int chars = scriptSource.length();\n+                                        long lines = scriptSource.lines().count();\n+                                        int docUsages = countOccurrences(scriptSource, \"doc[\\\\[\\\\.]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNTU5Mg==", "bodyText": "I think it's ok, but I am not sure I can be trusted, I will double check", "url": "https://github.com/elastic/elasticsearch/pull/65600#discussion_r532905592", "createdAt": "2020-11-30T21:10:46Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/runtimefields/RuntimeFieldsFeatureSetUsage.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.runtimefields;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.MappingMetadata;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.xpack.core.XPackFeatureSet;\n+import org.elasticsearch.xpack.core.XPackField;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RuntimeFieldsFeatureSetUsage extends XPackFeatureSet.Usage {\n+\n+    public static RuntimeFieldsFeatureSetUsage fromMetadata(Iterable<IndexMetadata> metadata) {\n+        Map<String, RuntimeFieldStats> fieldTypes = new HashMap<>();\n+        for (IndexMetadata indexMetadata : metadata) {\n+            if (indexMetadata.isSystem()) {\n+                // Don't include system indices in statistics about mappings, we care about the user's indices.\n+                continue;\n+            }\n+            Set<String> indexFieldTypes = new HashSet<>();\n+            MappingMetadata mappingMetadata = indexMetadata.mapping();\n+            if (mappingMetadata != null) {\n+                Object runtimeObject = mappingMetadata.getSourceAsMap().get(\"runtime\");\n+                if (runtimeObject instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> runtimeMappings = (Map<String, Object>) runtimeObject;\n+                    for (Object runtimeFieldMappingObject : runtimeMappings.values()) {\n+                        if (runtimeFieldMappingObject instanceof Map) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            Map<String, Object> runtimeFieldMapping = (Map<String, Object>) runtimeFieldMappingObject;\n+                            Object typeObject = runtimeFieldMapping.get(\"type\");\n+                            if (typeObject != null) {\n+                                String type = typeObject.toString();\n+                                RuntimeFieldStats stats = fieldTypes.computeIfAbsent(type, RuntimeFieldStats::new);\n+                                stats.count++;\n+                                if (indexFieldTypes.add(type)) {\n+                                    stats.indexCount++;\n+                                }\n+                                Object scriptObject = runtimeFieldMapping.get(\"script\");\n+                                if (scriptObject == null) {\n+                                    stats.scriptLessCount++;\n+                                } else if (scriptObject instanceof Map) {\n+                                    @SuppressWarnings(\"unchecked\")\n+                                    Map<String, Object> script = (Map<String, Object>) scriptObject;\n+                                    Object sourceObject = script.get(\"source\");\n+                                    if (sourceObject != null) {\n+                                        String scriptSource = sourceObject.toString();\n+                                        int chars = scriptSource.length();\n+                                        long lines = scriptSource.lines().count();\n+                                        int docUsages = countOccurrences(scriptSource, \"doc[\\\\[\\\\.]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMjkwMg=="}, "originalCommit": {"oid": "295826641939488e46074883d37582afb542e055"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1989, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}