{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTEzMTUx", "number": 61369, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxNDo0NlrOEalL0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo1ODowM1rOEamamg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA3NjY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxNDo0NlrOHEGZFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxNDo0NlrOHEGZFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2MTA3Ng==", "bodyText": "Nit: Since we're touching this anyway, we could move to the new formatting standard (which would put each param on a new line here)", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474061076", "createdAt": "2020-08-20T15:14:46Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -106,53 +107,61 @@ long extraLocalOffsetLookup() {\n                 return extraLocalOffsetLookup;\n             }\n         },\n-        DAY_OF_MONTH((byte) 5, ChronoField.DAY_OF_MONTH) {\n-            final long unitMillis = ChronoField.DAY_OF_MONTH.getBaseUnit().getDuration().toMillis();\n+        DAY_OF_MONTH((byte) 5, \"day\", ChronoField.DAY_OF_MONTH, true, ChronoField.DAY_OF_MONTH.getBaseUnit().getDuration().toMillis()) {\n             long roundFloor(long utcMillis) {\n-                return DateUtils.roundFloor(utcMillis, unitMillis);\n+                return DateUtils.roundFloor(utcMillis, this.ratio);\n             }\n \n             long extraLocalOffsetLookup() {\n-                return unitMillis;\n+                return ratio;\n             }\n         },\n-        HOUR_OF_DAY((byte) 6, ChronoField.HOUR_OF_DAY) {\n-            final long unitMillis = ChronoField.HOUR_OF_DAY.getBaseUnit().getDuration().toMillis();\n+        HOUR_OF_DAY((byte) 6, \"hour\", ChronoField.HOUR_OF_DAY, true, ChronoField.HOUR_OF_DAY.getBaseUnit().getDuration().toMillis()) {\n             long roundFloor(long utcMillis) {\n-                return DateUtils.roundFloor(utcMillis, unitMillis);\n+                return DateUtils.roundFloor(utcMillis, ratio);\n             }\n \n             long extraLocalOffsetLookup() {\n-                return unitMillis;\n+                return ratio;\n             }\n         },\n-        MINUTES_OF_HOUR((byte) 7, ChronoField.MINUTE_OF_HOUR) {\n-            final long unitMillis = ChronoField.MINUTE_OF_HOUR.getBaseUnit().getDuration().toMillis();\n+        MINUTES_OF_HOUR((byte) 7, \"minute\", ChronoField.MINUTE_OF_HOUR, true,\n+            ChronoField.MINUTE_OF_HOUR.getBaseUnit().getDuration().toMillis()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3955d2581bb49e5e7700596effea6d011477604"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzEyNjc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/InternalRate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyNjozM1rOHEG4aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyNjozM1rOHEG4aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2OTA5OQ==", "bodyText": "Nit: I think the technical term is divisor not divider.", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474069099", "createdAt": "2020-08-20T15:26:33Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/InternalRate.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.metrics.CompensatedSum;\n+import org.elasticsearch.search.aggregations.metrics.InternalNumericMetricsAggregation;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InternalRate extends InternalNumericMetricsAggregation.SingleValue implements Rate {\n+    final double sum;\n+    final double divider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3955d2581bb49e5e7700596effea6d011477604"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzE2NjIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNDowOVrOHEHSZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToyMTozNFrOHEP2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTc1MA==", "bodyText": "Note to self: LeafOnly shouldn't be generic over ValuesSource.  How did I miss that when I was removing generics? I'll clean that up in a separate PR.", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474075750", "createdAt": "2020-08-20T15:34:09Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class RateAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric, RateAggregationBuilder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3955d2581bb49e5e7700596effea6d011477604"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNTk4Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474215983", "createdAt": "2020-08-20T19:21:34Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class RateAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric, RateAggregationBuilder> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTc1MA=="}, "originalCommit": {"oid": "f3955d2581bb49e5e7700596effea6d011477604"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzIwMDc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozOTo0NFrOHEHpjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozOTo0NFrOHEHpjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4MTY3Nw==", "bodyText": "Nit: Formatting.  This is a new file, should just run the formatter on the whole thing.", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474081677", "createdAt": "2020-08-20T15:39:44Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class RateAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric, RateAggregationBuilder> {\n+    public static final String NAME = \"rate\";\n+    public static final ParseField UNIT_FIELD = new ParseField(\"unit\");\n+    public static final ValuesSourceRegistry.RegistryKey<RateAggregatorSupplier> REGISTRY_KEY = new ValuesSourceRegistry.RegistryKey<>(\n+        NAME,\n+        RateAggregatorSupplier.class\n+    );\n+    public static final ObjectParser<RateAggregationBuilder, String> PARSER = ObjectParser.fromBuilder(NAME, RateAggregationBuilder::new);\n+\n+    static {\n+        ValuesSourceAggregationBuilder.declareFields(PARSER, true, true, false, false);\n+        PARSER.declareString(RateAggregationBuilder::rateUnit, UNIT_FIELD);\n+    }\n+\n+    Rounding.DateTimeUnit rateUnit;\n+\n+    public static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n+        RateAggregatorFactory.registerAggregators(builder);\n+    }\n+\n+    public RateAggregationBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected RateAggregationBuilder(RateAggregationBuilder clone,\n+                                     AggregatorFactories.Builder factoriesBuilder,\n+                                     Map<String, Object> metadata) {\n+        super(clone, factoriesBuilder, metadata);\n+    }\n+\n+    @Override\n+    protected AggregationBuilder shallowCopy(AggregatorFactories.Builder factoriesBuilder, Map<String, Object> metadata) {\n+        return new RateAggregationBuilder(this, factoriesBuilder, metadata);\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public RateAggregationBuilder(StreamInput in) throws IOException {\n+        super(in);\n+        byte b = in.readByte();\n+        if (b > 0) {\n+            rateUnit = Rounding.DateTimeUnit.resolve(b);\n+        } else {\n+            rateUnit = null;\n+        }\n+    }\n+\n+    @Override\n+    protected ValuesSourceType defaultValueSourceType() {\n+        return CoreValuesSourceType.NUMERIC;\n+    }\n+\n+    @Override\n+    protected void innerWriteTo(StreamOutput out) throws IOException {\n+        if (rateUnit != null) {\n+            out.writeByte(rateUnit.getId());\n+        } else {\n+            out.writeByte((byte) 0);\n+        }\n+    }\n+\n+    @Override\n+    protected ValuesSourceRegistry.RegistryKey<?> getRegistryKey() {\n+        return REGISTRY_KEY;\n+    }\n+\n+    @Override\n+    protected RateAggregatorFactory innerBuild(QueryShardContext queryShardContext, ValuesSourceConfig config,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3955d2581bb49e5e7700596effea6d011477604"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzIzNTc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0Nzo1NVrOHEH_1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0Nzo1NVrOHEH_1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4NzM4MQ==", "bodyText": "We shouldn't be using this work-around in new aggregators.  Instead of using a null here, RateAggregatorFactory#createUnmapped should return an aggregator that uses a NO_OP_COLLECTOR, and we should rely on valuesSource being not null in this aggregator.", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474087381", "createdAt": "2020-08-20T15:47:55Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ScoreMode;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.DoubleArray;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.bucket.histogram.SizedBucketAggregator;\n+import org.elasticsearch.search.aggregations.metrics.CompensatedSum;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class RateAggregator extends NumericMetricsAggregator.SingleValue {\n+\n+    private final ValuesSource.Numeric valuesSource;\n+    private final DocValueFormat format;\n+    private final Rounding.DateTimeUnit rateUnit;\n+    private final SizedBucketAggregator sizedBucketAggregator;\n+\n+    private DoubleArray sums;\n+    private DoubleArray compensations;\n+\n+    public RateAggregator(\n+        String name,\n+        ValuesSourceConfig valuesSourceConfig,\n+        Rounding.DateTimeUnit rateUnit,\n+        SearchContext context,\n+        Aggregator parent,\n+        Map<String, Object> metadata\n+    ) throws IOException {\n+        super(name, context, parent, metadata);\n+        // TODO: stop expecting nulls here\n+        this.valuesSource = valuesSourceConfig.hasValues() ? (ValuesSource.Numeric) valuesSourceConfig.getValuesSource() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3955d2581bb49e5e7700596effea6d011477604"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzI3ODM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo1ODowM1rOHEIajQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo1ODowM1rOHEIajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NDIyMQ==", "bodyText": "Is there a use case for running Rate over a Date field?  I'm having a hard time imagining one. If there is a use case for it, let's leave a comment so we remember why we want it, and if not let's not support passing in Date fields.  It's much easier to add support later if we find a use case than it is to remove support for a supported data type, even if it only generates nonsense results.", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474094221", "createdAt": "2020-08-20T15:58:03Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.CardinalityUpperBound;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+class RateAggregatorFactory extends ValuesSourceAggregatorFactory {\n+\n+    private final Rounding.DateTimeUnit rateUnit;\n+\n+    RateAggregatorFactory(String name,\n+                          ValuesSourceConfig config,\n+                          Rounding.DateTimeUnit rateUnit,\n+                          QueryShardContext queryShardContext,\n+                          AggregatorFactory parent,\n+                          AggregatorFactories.Builder subFactoriesBuilder,\n+                          Map<String, Object> metadata) throws IOException {\n+        super(name, config, queryShardContext, parent, subFactoriesBuilder, metadata);\n+        this.rateUnit = rateUnit;\n+    }\n+\n+    static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n+        builder.register(RateAggregationBuilder.REGISTRY_KEY,\n+           List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.DATE, CoreValuesSourceType.BOOLEAN),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3955d2581bb49e5e7700596effea6d011477604"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 876, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}