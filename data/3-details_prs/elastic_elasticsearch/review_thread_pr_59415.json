{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjQ3NzUw", "number": 59415, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOEN3sMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOEN3sMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTc5Mzc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/stats/VerifierMetricsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOGwtv9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoxMjowMlrOGwvoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNDM5MA==", "bodyText": "It would be better to have an object that contains all the counters so moving them around doesn't affect the method signature and thus all calls of it.", "url": "https://github.com/elastic/elasticsearch/pull/59415#discussion_r453734390", "createdAt": "2020-07-13T15:28:29Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/stats/VerifierMetricsTests.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.stats;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.watcher.common.stats.Counters;\n+import org.elasticsearch.xpack.eql.EqlTestUtils;\n+import org.elasticsearch.xpack.eql.analysis.Analyzer;\n+import org.elasticsearch.xpack.eql.analysis.PreAnalyzer;\n+import org.elasticsearch.xpack.eql.analysis.Verifier;\n+import org.elasticsearch.xpack.eql.expression.function.EqlFunctionRegistry;\n+import org.elasticsearch.xpack.eql.optimizer.OptimizerTests;\n+import org.elasticsearch.xpack.eql.parser.EqlParser;\n+import org.elasticsearch.xpack.ql.index.IndexResolution;\n+\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.EVENT;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_ONE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_HEAD;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_TAIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_MAXSPAN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.FPREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.JOIN_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.KEYS_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.PIPES_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.SEQUENCE_PREFIX;\n+\n+public class VerifierMetricsTests extends ESTestCase {\n+    \n+    private EqlParser parser = new EqlParser();\n+    private PreAnalyzer preAnalyzer = new PreAnalyzer();\n+    private EqlFunctionRegistry eqlFunctionRegistry = new EqlFunctionRegistry();\n+    private IndexResolution index = OptimizerTests.loadIndexResolution(\"mapping-default.json\");\n+    protected static String FEATURES_KEYS_PREFIX = FPREFIX + KEYS_PREFIX;\n+    protected static String FEATURES_JOIN_PREFIX = FPREFIX + JOIN_PREFIX;\n+    protected static String FEATURES_SEQUENCE_PREFIX = FPREFIX + SEQUENCE_PREFIX;\n+    protected static String FEATURES_PIPES_PREFIX = FPREFIX + PIPES_PREFIX;\n+    \n+    public void testEventQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceQuery() {\n+        Counters c = eql(\"sequence\\r\\n\" + \n+            \"  [process where serial_event_id = 1]\\r\\n\" + \n+            \"  [process where serial_event_id = 2]\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+\n+    @AwaitsFix(bugUrl = \"waiting for the join implementation\")\n+    public void testJoinQuery() {\n+        Counters c = eql(\"join\\r\\n\" + \n+            \"  [file where file_name=\\\"*.exe\\\"] by ppid\\r\\n\" + \n+            \"  [file where file_name=\\\"*.com\\\"] by pid\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 1\");\n+        assertCounters(0, 0, 1L, 1L, 0, 0, 0, 1L, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testHeadQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | head 2\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testTailQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | tail 2\");\n+        assertCounters(0, 1L, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceMaxSpanQuery() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [process where opcode == 2] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithTwoQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithFiveQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithSevenQueries() {\n+        Counters c = eql(\"sequence by exit_code, user\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"]\\r\\n\" +\n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"| tail 1\");\n+        assertCounters(1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithFourKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, c);\n+    }\n+\n+    public void testSequenceWithFiveKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid, ppid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, c);\n+    }    \n+\n+    private void assertCounters(long sequence, long event, long join, long head, long tail, long seqMaxSpan, long seqUntil, long joinUntil,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9145a049f3e8e1e54a902f26cb38090e3dc9160c"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NTE0NQ==", "bodyText": "+1", "url": "https://github.com/elastic/elasticsearch/pull/59415#discussion_r453765145", "createdAt": "2020-07-13T16:12:02Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/stats/VerifierMetricsTests.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.stats;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.watcher.common.stats.Counters;\n+import org.elasticsearch.xpack.eql.EqlTestUtils;\n+import org.elasticsearch.xpack.eql.analysis.Analyzer;\n+import org.elasticsearch.xpack.eql.analysis.PreAnalyzer;\n+import org.elasticsearch.xpack.eql.analysis.Verifier;\n+import org.elasticsearch.xpack.eql.expression.function.EqlFunctionRegistry;\n+import org.elasticsearch.xpack.eql.optimizer.OptimizerTests;\n+import org.elasticsearch.xpack.eql.parser.EqlParser;\n+import org.elasticsearch.xpack.ql.index.IndexResolution;\n+\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.EVENT;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_ONE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_KEYS_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.JOIN_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_HEAD;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.PIPE_TAIL;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_MAXSPAN;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FIVE_OR_MORE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_FOUR;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_THREE;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_QUERIES_TWO;\n+import static org.elasticsearch.xpack.eql.stats.FeatureMetric.SEQUENCE_UNTIL;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.FPREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.JOIN_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.KEYS_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.PIPES_PREFIX;\n+import static org.elasticsearch.xpack.eql.stats.Metrics.SEQUENCE_PREFIX;\n+\n+public class VerifierMetricsTests extends ESTestCase {\n+    \n+    private EqlParser parser = new EqlParser();\n+    private PreAnalyzer preAnalyzer = new PreAnalyzer();\n+    private EqlFunctionRegistry eqlFunctionRegistry = new EqlFunctionRegistry();\n+    private IndexResolution index = OptimizerTests.loadIndexResolution(\"mapping-default.json\");\n+    protected static String FEATURES_KEYS_PREFIX = FPREFIX + KEYS_PREFIX;\n+    protected static String FEATURES_JOIN_PREFIX = FPREFIX + JOIN_PREFIX;\n+    protected static String FEATURES_SEQUENCE_PREFIX = FPREFIX + SEQUENCE_PREFIX;\n+    protected static String FEATURES_PIPES_PREFIX = FPREFIX + PIPES_PREFIX;\n+    \n+    public void testEventQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceQuery() {\n+        Counters c = eql(\"sequence\\r\\n\" + \n+            \"  [process where serial_event_id = 1]\\r\\n\" + \n+            \"  [process where serial_event_id = 2]\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+\n+    @AwaitsFix(bugUrl = \"waiting for the join implementation\")\n+    public void testJoinQuery() {\n+        Counters c = eql(\"join\\r\\n\" + \n+            \"  [file where file_name=\\\"*.exe\\\"] by ppid\\r\\n\" + \n+            \"  [file where file_name=\\\"*.com\\\"] by pid\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 1\");\n+        assertCounters(0, 0, 1L, 1L, 0, 0, 0, 1L, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testHeadQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | head 2\");\n+        assertCounters(0, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testTailQuery() {\n+        Counters c = eql(\"process where serial_event_id < 4 | tail 2\");\n+        assertCounters(0, 1L, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceMaxSpanQuery() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [process where opcode == 2] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithTwoQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"until [process where opcode=1] by ppid\\r\\n\" + \n+            \"| head 4\\r\\n\" + \n+            \"| tail 2\");\n+        assertCounters(1L, 0, 0, 1L, 1L, 1L, 1L, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithFiveQueries() {\n+        Counters c = eql(\"sequence with maxspan=1d\\r\\n\" + \n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"] by exit_code\\r\\n\" +\n+            \"  [process where serial_event_id < 4] by exit_code\\r\\n\" + \n+            \"  [process where opcode == 1] by user\\r\\n\" + \n+            \"| head 4\");\n+        assertCounters(1L, 0, 0, 1L, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithSevenQueries() {\n+        Counters c = eql(\"sequence by exit_code, user\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [file where parent_process_name == \\\"file_delete_event\\\"]\\r\\n\" +\n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"  [process where true]\\r\\n\" + \n+            \"| tail 1\");\n+        assertCounters(1L, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 1L, 0, 0, 0, c);\n+    }\n+    \n+    public void testSequenceWithThreeKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, 0, c);\n+    }\n+\n+    public void testSequenceWithFourKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, 0, c);\n+    }\n+\n+    public void testSequenceWithFiveKeys() {\n+        Counters c = eql(\"sequence by exit_code, user, serial_event_id, pid, ppid\\r\\n\" + \n+            \"  [process where serial_event_id < 4]\\r\\n\" + \n+            \"  [process where opcode == 1]\\r\\n\");\n+        assertCounters(1L, 0, 0, 1L, 0, 0, 0, 0, 1L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1L, c);\n+    }    \n+\n+    private void assertCounters(long sequence, long event, long join, long head, long tail, long seqMaxSpan, long seqUntil, long joinUntil,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNDM5MA=="}, "originalCommit": {"oid": "9145a049f3e8e1e54a902f26cb38090e3dc9160c"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2446, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}