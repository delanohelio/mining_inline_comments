{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNDE2NTQ4", "number": 56020, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzozNDoxMFrOD4C49Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MjozMVrOD4-EyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDk0MTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzozNDoxMFrOGOpfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzo0NjoxMlrOGOqBfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAxMjk0OQ==", "bodyText": "++ on this approach to getting a count of inference processors. It should fit more nicely into the ingest pipeline initialization process and be lighter weight than fully instantiating each pipeline.\nOne thing you might consider is that the config map for an ingest pipeline is a tree structure in which some nodes such as ForEach processors may contain child nodes. I do not know how inference processors are typically configured, but the code above will count them only if they're at the top level of the pipeline tree.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418012949", "createdAt": "2020-04-30T13:34:10Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,14 +200,21 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            if (TYPE.equals(entry.getKey())) {\n+                                count++;\n+                            }\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "380b459265e7bf74194da0bd325036d27c0f79b3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyMTc1Nw==", "bodyText": "@danhermann good point...I will have to traverse the tree.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418021757", "createdAt": "2020-04-30T13:46:12Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,14 +200,21 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            if (TYPE.equals(entry.getKey())) {\n+                                count++;\n+                            }\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAxMjk0OQ=="}, "originalCommit": {"oid": "380b459265e7bf74194da0bd325036d27c0f79b3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTUxNDUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0MzoxNFrOGOvNBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo1Mzo1MFrOGO0Itw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjYyOA==", "bodyText": "nit: you could use ForEachProcessor.TYPE", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418106628", "createdAt": "2020-04-30T15:43:14Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -165,6 +165,7 @@ public String getType() {\n \n     public static final class Factory implements Processor.Factory, Consumer<ClusterState> {\n \n+        private static final String FOREACH_PROCESSOR_NAME = \"foreach\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODkyNg==", "bodyText": "This would require adding the ingest-common module as a dependency to the ML plugin. Did not want to do that for a single string :/", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418168926", "createdAt": "2020-04-30T17:22:35Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -165,6 +165,7 @@ public String getType() {\n \n     public static final class Factory implements Processor.Factory, Consumer<ClusterState> {\n \n+        private static final String FOREACH_PROCESSOR_NAME = \"foreach\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjYyOA=="}, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NzQ0Nw==", "bodyText": "Ah, right. Definitely not worth it for a string.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418187447", "createdAt": "2020-04-30T17:53:50Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -165,6 +165,7 @@ public String getType() {\n \n     public static final class Factory implements Processor.Factory, Consumer<ClusterState> {\n \n+        private static final String FOREACH_PROCESSOR_NAME = \"foreach\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjYyOA=="}, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTg5MDcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMTo0MVrOGOy-cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo0ODozM1rOGO1_ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg==", "bodyText": "The for-each processor and the onFailure directive are the only scenarios I know of that result in child processors. Both of those can be nested to an indefinite number of levels. I'm not sure how far you want to go down that rabbit hole, though.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418168432", "createdAt": "2020-04-30T17:21:41Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -206,7 +207,18 @@ public void accept(ClusterState state) {\n                     for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n                         for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n                             if (TYPE.equals(entry.getKey())) {\n-                                count++;\n+                                ++count;\n+                            }\n+                            // Special handling as `foreach` processors allow a `processor` to be defined\n+                            if (FOREACH_PROCESSOR_NAME.equals(entry.getKey())) {\n+                                if (entry.getValue() instanceof Map<?, ?>) {\n+                                    Object processorDefinition = ((Map<?, ?>)entry.getValue()).get(\"processor\");\n+                                    if (processorDefinition instanceof Map<?, ?>) {\n+                                        if (((Map<?, ?>) processorDefinition).keySet().contains(TYPE)) {\n+                                            ++count;\n+                                        }\n+                                    }\n+                                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTY5NQ==", "bodyText": "Yeesh, yeah, thats right.\nUgh, I will do the recursion. But who on earth would have a foreach processor nested in a foreach processor :(", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418169695", "createdAt": "2020-04-30T17:23:58Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -206,7 +207,18 @@ public void accept(ClusterState state) {\n                     for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n                         for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n                             if (TYPE.equals(entry.getKey())) {\n-                                count++;\n+                                ++count;\n+                            }\n+                            // Special handling as `foreach` processors allow a `processor` to be defined\n+                            if (FOREACH_PROCESSOR_NAME.equals(entry.getKey())) {\n+                                if (entry.getValue() instanceof Map<?, ?>) {\n+                                    Object processorDefinition = ((Map<?, ?>)entry.getValue()).get(\"processor\");\n+                                    if (processorDefinition instanceof Map<?, ?>) {\n+                                        if (((Map<?, ?>) processorDefinition).keySet().contains(TYPE)) {\n+                                            ++count;\n+                                        }\n+                                    }\n+                                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4ODM3MA==", "bodyText": "Yep, hence the \ud83d\udc07 hole. \ud83d\ude03", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418188370", "createdAt": "2020-04-30T17:55:26Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -206,7 +207,18 @@ public void accept(ClusterState state) {\n                     for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n                         for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n                             if (TYPE.equals(entry.getKey())) {\n-                                count++;\n+                                ++count;\n+                            }\n+                            // Special handling as `foreach` processors allow a `processor` to be defined\n+                            if (FOREACH_PROCESSOR_NAME.equals(entry.getKey())) {\n+                                if (entry.getValue() instanceof Map<?, ?>) {\n+                                    Object processorDefinition = ((Map<?, ?>)entry.getValue()).get(\"processor\");\n+                                    if (processorDefinition instanceof Map<?, ?>) {\n+                                        if (((Map<?, ?>) processorDefinition).keySet().contains(TYPE)) {\n+                                            ++count;\n+                                        }\n+                                    }\n+                                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwNzY0MQ==", "bodyText": "Only allow recursion up to 10 layers. Handling on_failure and foreach. seems to work ok :D", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418207641", "createdAt": "2020-04-30T18:29:27Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -206,7 +207,18 @@ public void accept(ClusterState state) {\n                     for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n                         for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n                             if (TYPE.equals(entry.getKey())) {\n-                                count++;\n+                                ++count;\n+                            }\n+                            // Special handling as `foreach` processors allow a `processor` to be defined\n+                            if (FOREACH_PROCESSOR_NAME.equals(entry.getKey())) {\n+                                if (entry.getValue() instanceof Map<?, ?>) {\n+                                    Object processorDefinition = ((Map<?, ?>)entry.getValue()).get(\"processor\");\n+                                    if (processorDefinition instanceof Map<?, ?>) {\n+                                        if (((Map<?, ?>) processorDefinition).keySet().contains(TYPE)) {\n+                                            ++count;\n+                                        }\n+                                    }\n+                                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxNzg4Ng==", "bodyText": "Looks good to me. Thanks for making that change.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418217886", "createdAt": "2020-04-30T18:48:33Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -206,7 +207,18 @@ public void accept(ClusterState state) {\n                     for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n                         for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n                             if (TYPE.equals(entry.getKey())) {\n-                                count++;\n+                                ++count;\n+                            }\n+                            // Special handling as `foreach` processors allow a `processor` to be defined\n+                            if (FOREACH_PROCESSOR_NAME.equals(entry.getKey())) {\n+                                if (entry.getValue() instanceof Map<?, ?>) {\n+                                    Object processorDefinition = ((Map<?, ?>)entry.getValue()).get(\"processor\");\n+                                    if (processorDefinition instanceof Map<?, ?>) {\n+                                        if (((Map<?, ?>) processorDefinition).keySet().contains(TYPE)) {\n+                                            ++count;\n+                                        }\n+                                    }\n+                                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg=="}, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU1Mzg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNzoxOVrOGP9tew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoxNDowOFrOGP_shA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5Mjg5MQ==", "bodyText": "??\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n          \n          \n            \n                        if (level > 10) {", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419392891", "createdAt": "2020-05-04T12:17:19Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyNTQxMg==", "bodyText": "lulz, yeah, I goofed.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419425412", "createdAt": "2020-05-04T13:14:08Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5Mjg5MQ=="}, "originalCommit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDYzODgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MjozMVrOGP-hKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyMjoyN1rOGQACcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjEyMA==", "bodyText": "foreach can only have 1 processor so there is no need to iterate here.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419406120", "createdAt": "2020-05-04T12:42:31Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n+                return count;\n+            }\n+            if (processorType == null || processorDefinition == null) {\n+                return count;\n+            }\n+            if (TYPE.equals(processorType)) {\n+                count++;\n+            }\n+            if (FOREACH_PROCESSOR_NAME.equals(processorType)) {\n+                Map<String, Object> innerProcessor = (Map<String, Object>)processorDefinition.get(\"processor\");\n+                if (innerProcessor != null) {\n+                    for (Map.Entry<String, Object> innerProcessorWithName : innerProcessor.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyNjI0Mg==", "bodyText": "The iteration is just for simplicity. Otherwise I will have assert size is == 1 and then get first entry, etc. Iteration here is cleaner IMO.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419426242", "createdAt": "2020-05-04T13:15:24Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n+                return count;\n+            }\n+            if (processorType == null || processorDefinition == null) {\n+                return count;\n+            }\n+            if (TYPE.equals(processorType)) {\n+                count++;\n+            }\n+            if (FOREACH_PROCESSOR_NAME.equals(processorType)) {\n+                Map<String, Object> innerProcessor = (Map<String, Object>)processorDefinition.get(\"processor\");\n+                if (innerProcessor != null) {\n+                    for (Map.Entry<String, Object> innerProcessorWithName : innerProcessor.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjEyMA=="}, "originalCommit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMTAyNg==", "bodyText": "\ud83d\udc4d\nIt threw me because it is called the foreach processor and it looks like a misunderstanding, perhaps leave a comment", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419431026", "createdAt": "2020-05-04T13:22:27Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n+                return count;\n+            }\n+            if (processorType == null || processorDefinition == null) {\n+                return count;\n+            }\n+            if (TYPE.equals(processorType)) {\n+                count++;\n+            }\n+            if (FOREACH_PROCESSOR_NAME.equals(processorType)) {\n+                Map<String, Object> innerProcessor = (Map<String, Object>)processorDefinition.get(\"processor\");\n+                if (innerProcessor != null) {\n+                    for (Map.Entry<String, Object> innerProcessorWithName : innerProcessor.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjEyMA=="}, "originalCommit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2421, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}