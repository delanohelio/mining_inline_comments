{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTI0ODMy", "number": 66834, "title": "Avoid Needless Forking when Closing Transports", "bodyText": "No need to fork off in the changed spots if we block the calling thread anyway. All this does is make tests less deterministic and (in case of the fire and forget forking to GENERIC) introducing potential resource leaks if things are released in transport handlers.\nAlso, some other minor cleanups of dead code.", "createdAt": "2020-12-28T14:58:33Z", "url": "https://github.com/elastic/elasticsearch/pull/66834", "merged": true, "mergeCommit": {"oid": "0d54332f98e69c7a730fef5aed57363719379c06"}, "closed": true, "closedAt": "2021-09-10T09:58:56Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqnWsCAH2gAyNTQ2MTI0ODMyOjU5N2U2MDBkNjk4ZmFlZDFkYThjMzJlNDlhMWUyYjgzNzRiMDk5OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABe870W_AH2gAyNTQ2MTI0ODMyOjlkNzYxMGQ5YzYxYzBlMGQ1OTFlMTNhODk1OWM1MTRlYTY4MjY0NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/597e600d698faed1da8c32e49a1e2b8374b0998d", "committedDate": "2020-12-28T14:53:08Z", "message": "Avoid Needless Forking when Closing Transports\n\nNo need to fork off in the changed spots if we block the calling thread anyway.\nAlso, some other minor cleanups."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTc5MDI4", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-559179028", "createdAt": "2020-12-28T14:59:03Z", "commit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDo1OTowNFrOIL7UqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDo1OTowNFrOIL7UqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM3NzE5Mg==", "bodyText": "This was overridden by all but the adjusted test implementation.", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r549377192", "createdAt": "2020-12-28T14:59:04Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/transport/TcpTransport.java", "diffHunk": "@@ -173,10 +170,6 @@ public ThreadPool getThreadPool() {\n         return () -> circuitBreakerService.getBreaker(CircuitBreaker.IN_FLIGHT_REQUESTS);\n     }\n \n-    @Override\n-    protected void doStart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTc5MTM5", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-559179139", "createdAt": "2020-12-28T14:59:17Z", "commit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDo1OToxN1rOIL7VFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDo1OToxN1rOIL7VFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM3NzMwMQ==", "bodyText": "return was never used", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r549377301", "createdAt": "2020-12-28T14:59:17Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/transport/TcpTransport.java", "diffHunk": "@@ -279,8 +272,8 @@ public void openConnection(DiscoveryNode node, ConnectionProfile profile, Action\n         }\n     }\n \n-    private List<TcpChannel> initiateConnection(DiscoveryNode node, ConnectionProfile connectionProfile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTgwNTAy", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-559180502", "createdAt": "2020-12-28T15:02:48Z", "commit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTowMjo0OFrOIL7Zlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTowMjo0OFrOIL7Zlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM3ODQ1NQ==", "bodyText": "I added this check since we might dead-lock when coming from a transport thread (more of a docs thing, we couldn't call this from a transport thread anyway due to other assertions). Other than that, there is no point in forking off here as far as I can tell if we then block anyway. Just makes ITs use more threads and could theoretically dead-lock when called from an already maxed out generic pool.", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r549378455", "createdAt": "2020-12-28T15:02:48Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/transport/TcpTransport.java", "diffHunk": "@@ -550,42 +542,30 @@ protected final void doClose() {\n \n     @Override\n     protected final void doStop() {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        // make sure we run it on another thread than a possible IO handler thread\n-        assert threadPool.generic().isShutdown() == false : \"Must stop transport before terminating underlying threadpool\";\n-        threadPool.generic().execute(() -> {\n-            closeLock.writeLock().lock();\n-            try {\n-                keepAlive.close();\n+        assert Transports.assertNotTransportThread(\"Must not block transport thread that might be needed for closing channels below\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTgxNDUy", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-559181452", "createdAt": "2020-12-28T15:05:13Z", "commit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTowNToxM1rOIL7cqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTowNToxM1rOIL7cqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM3OTI0Mg==", "bodyText": "No point in forking off potentially multiple times here when we do all kinds of slow+blocking operations when closing the connection manager etc. above. All this does is potentially have tests fail when these tasks don't run before the threadpool is shut down and they do in fact release resources (which currently just works by accident).", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r549379242", "createdAt": "2020-12-28T15:05:13Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportService.java", "diffHunk": "@@ -252,34 +242,15 @@ protected void doStop() {\n         } finally {\n             // in case the transport is not connected to our local node (thus cleaned on node disconnect)\n             // make sure to clean any leftover on going handles\n-            for (final Transport.ResponseContext holderToNotify : responseHandlers.prune(h -> true)) {\n-                // callback that an exception happened, but on a different thread since we don't\n-                // want handlers to worry about stack overflows\n-                getExecutorService().execute(new AbstractRunnable() {\n-                    @Override\n-                    public void onRejection(Exception e) {\n-                        // if we get rejected during node shutdown we don't wanna bubble it up\n-                        logger.debug(\n-                            () -> new ParameterizedMessage(\n-                                \"failed to notify response handler on rejection, action: {}\",\n-                                holderToNotify.action()),\n-                            e);\n-                    }\n-                    @Override\n-                    public void onFailure(Exception e) {\n-                        logger.warn(\n-                            () -> new ParameterizedMessage(\n-                                \"failed to notify response handler on exception, action: {}\",\n-                                holderToNotify.action()),\n-                            e);\n-                    }\n-                    @Override\n-                    public void doRun() {\n-                        TransportException ex = new SendRequestTransportException(holderToNotify.connection().getNode(),\n+            for (final Transport.ResponseContext<?> holderToNotify : responseHandlers.prune(h -> true)) {\n+                try {\n+                    TransportException ex = new SendRequestTransportException(holderToNotify.connection().getNode(),\n                             holderToNotify.action(), new NodeClosedException(localNode));\n-                        holderToNotify.handler().handleException(ex);\n-                    }\n-                });\n+                    holderToNotify.handler().handleException(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTgxNjk4", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-559181698", "createdAt": "2020-12-28T15:05:51Z", "commit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTowNTo1MVrOIL7dYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTowNTo1MVrOIL7dYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM3OTQyNg==", "bodyText": "Mostly we don't have any open handlers here on close, no point forking off for an empty list.", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r549379426", "createdAt": "2020-12-28T15:05:51Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportService.java", "diffHunk": "@@ -1036,27 +1007,29 @@ private void checkForTimeout(long requestId) {\n \n     @Override\n     public void onConnectionClosed(Transport.Connection connection) {\n-        try {\n-            List<Transport.ResponseContext<? extends TransportResponse>> pruned =\n+        List<Transport.ResponseContext<? extends TransportResponse>> pruned =\n                 responseHandlers.prune(h -> h.connection().getCacheKey().equals(connection.getCacheKey()));\n+        if (pruned.isEmpty() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597e600d698faed1da8c32e49a1e2b8374b0998d"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/5db50c961594fc09ffd53c1a803329f164b4a935", "committedDate": "2021-09-09T15:43:19Z", "message": "Merge remote-tracking branch 'elastic/master' into less-forking-transport-close"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUwNjUyMDQ1", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-750652045", "createdAt": "2021-09-09T17:47:03Z", "commit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wOVQxNzo0NzowM1rOKg4ZYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wOVQxODoyNTowN1rOKg6Bbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTU2NzA3NQ==", "bodyText": "Seems a bit odd to use a MeanMetric for this and not for bytes written. Let's just use LongAdder for them all.", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r705567075", "createdAt": "2021-09-09T17:47:03Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/transport/StatsTracker.java", "diffHunk": "@@ -38,11 +38,6 @@ public long getMessagesReceived() {\n         return messagesReceived.sum();\n     }\n \n-\n-    public MeanMetric getWriteBytes() {\n-        return writeBytesMetric;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTU4NzQ0OQ==", "bodyText": "Should we keep this? Sounds like the sort of invariant we should check, we're probably assuming it in other places.", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r705587449", "createdAt": "2021-09-09T18:15:47Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/transport/TcpTransport.java", "diffHunk": "@@ -559,42 +551,30 @@ protected final void doClose() {\n \n     @Override\n     protected final void doStop() {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        // make sure we run it on another thread than a possible IO handler thread\n-        assert threadPool.generic().isShutdown() == false : \"Must stop transport before terminating underlying threadpool\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTU4OTA2MA==", "bodyText": "Related to the previous comment: if we know that the transport service is closed before the threadpool then can this be rejected? If not we should assert false in the rejection handler. Also while we're here let's use an AbstractRunnable rather than catching the EsRejectedExecutionException ourselves and assert that handling the NodeDisconnectedException doesn't throw I guess.", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r705589060", "createdAt": "2021-09-09T18:18:08Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportService.java", "diffHunk": "@@ -1023,12 +993,15 @@ private void checkForTimeout(long requestId) {\n \n     @Override\n     public void onConnectionClosed(Transport.Connection connection) {\n-        try {\n-            List<Transport.ResponseContext<? extends TransportResponse>> pruned =\n+        List<Transport.ResponseContext<? extends TransportResponse>> pruned =\n                 responseHandlers.prune(h -> h.connection().getCacheKey().equals(connection.getCacheKey()));\n+        if (pruned.isEmpty()) {\n+            return;\n+        }\n+        try {\n             // callback that an exception happened, but on a different thread since we don't\n             // want handlers to worry about stack overflows\n-            getExecutorService().execute(new Runnable() {\n+            threadPool.generic().execute(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTU4OTM1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r705589355", "createdAt": "2021-09-09T18:18:33Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportService.java", "diffHunk": "@@ -1023,12 +993,15 @@ private void checkForTimeout(long requestId) {\n \n     @Override\n     public void onConnectionClosed(Transport.Connection connection) {\n-        try {\n-            List<Transport.ResponseContext<? extends TransportResponse>> pruned =\n+        List<Transport.ResponseContext<? extends TransportResponse>> pruned =\n                 responseHandlers.prune(h -> h.connection().getCacheKey().equals(connection.getCacheKey()));\n+        if (pruned.isEmpty()) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTU4OTg2NQ==", "bodyText": "Can we assert false here too?", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r705589865", "createdAt": "2021-09-09T18:19:18Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportService.java", "diffHunk": "@@ -247,33 +237,13 @@ protected void doStop() {\n             // in case the transport is not connected to our local node (thus cleaned on node disconnect)\n             // make sure to clean any leftover on going handles\n             for (final Transport.ResponseContext<?> holderToNotify : responseHandlers.prune(h -> true)) {\n-                // callback that an exception happened, but on a different thread since we don't\n-                // want handlers to worry about stack overflows\n-                getExecutorService().execute(new AbstractRunnable() {\n-                    @Override\n-                    public void onRejection(Exception e) {\n-                        // if we get rejected during node shutdown we don't wanna bubble it up\n-                        logger.debug(\n-                            () -> new ParameterizedMessage(\n-                                \"failed to notify response handler on rejection, action: {}\",\n-                                holderToNotify.action()),\n-                            e);\n-                    }\n-                    @Override\n-                    public void onFailure(Exception e) {\n-                        logger.warn(\n-                            () -> new ParameterizedMessage(\n-                                \"failed to notify response handler on exception, action: {}\",\n-                                holderToNotify.action()),\n-                            e);\n-                    }\n-                    @Override\n-                    public void doRun() {\n-                        TransportException ex = new SendRequestTransportException(holderToNotify.connection().getNode(),\n-                            holderToNotify.action(), new NodeClosedException(localNode));\n-                        holderToNotify.handler().handleException(ex);\n-                    }\n-                });\n+                try {\n+                    holderToNotify.handler().handleException(new SendRequestTransportException(holderToNotify.connection().getNode(),\n+                            holderToNotify.action(), new NodeClosedException(localNode)));\n+                } catch (Exception e) {\n+                    logger.warn(() -> new ParameterizedMessage(\"failed to notify response handler on exception, action: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTU5MzcxMA==", "bodyText": "I was wondering if we should respect handler().executor() but then I looked at other call sites and it seems that we almost never do. Except sometimes. That might bite us one day.", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r705593710", "createdAt": "2021-09-09T18:25:07Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportService.java", "diffHunk": "@@ -247,33 +237,13 @@ protected void doStop() {\n             // in case the transport is not connected to our local node (thus cleaned on node disconnect)\n             // make sure to clean any leftover on going handles\n             for (final Transport.ResponseContext<?> holderToNotify : responseHandlers.prune(h -> true)) {\n-                // callback that an exception happened, but on a different thread since we don't\n-                // want handlers to worry about stack overflows\n-                getExecutorService().execute(new AbstractRunnable() {\n-                    @Override\n-                    public void onRejection(Exception e) {\n-                        // if we get rejected during node shutdown we don't wanna bubble it up\n-                        logger.debug(\n-                            () -> new ParameterizedMessage(\n-                                \"failed to notify response handler on rejection, action: {}\",\n-                                holderToNotify.action()),\n-                            e);\n-                    }\n-                    @Override\n-                    public void onFailure(Exception e) {\n-                        logger.warn(\n-                            () -> new ParameterizedMessage(\n-                                \"failed to notify response handler on exception, action: {}\",\n-                                holderToNotify.action()),\n-                            e);\n-                    }\n-                    @Override\n-                    public void doRun() {\n-                        TransportException ex = new SendRequestTransportException(holderToNotify.connection().getNode(),\n-                            holderToNotify.action(), new NodeClosedException(localNode));\n-                        holderToNotify.handler().handleException(ex);\n-                    }\n-                });\n+                try {\n+                    holderToNotify.handler().handleException(new SendRequestTransportException(holderToNotify.connection().getNode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db50c961594fc09ffd53c1a803329f164b4a935"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3947963db381aa81294ded06ebfc693810d87a9", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/b3947963db381aa81294ded06ebfc693810d87a9", "committedDate": "2021-09-10T04:23:30Z", "message": "Merge remote-tracking branch 'elastic/master' into less-forking-transport-close"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66b9e6f72317d4209c76bc7cff466368ace11058", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/66b9e6f72317d4209c76bc7cff466368ace11058", "committedDate": "2021-09-10T04:46:31Z", "message": "CR: comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUxMDYwMzIx", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-751060321", "createdAt": "2021-09-10T05:32:43Z", "commit": {"oid": "66b9e6f72317d4209c76bc7cff466368ace11058"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xMFQwNTozMjo0M1rOKhNIIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xMFQwNTozMjo0M1rOKhNIIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTkwNjcyMg==", "bodyText": "I wonder if this adds risk that a slow shutdown of networking results in a delayed termination of the host in production?", "url": "https://github.com/elastic/elasticsearch/pull/66834#discussion_r705906722", "createdAt": "2021-09-10T05:32:43Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/transport/TcpTransport.java", "diffHunk": "@@ -559,42 +551,31 @@ protected final void doClose() {\n \n     @Override\n     protected final void doStop() {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        // make sure we run it on another thread than a possible IO handler thread\n+        assert Transports.assertNotTransportThread(\"Must not block transport thread that might be needed for closing channels below\");\n         assert threadPool.generic().isShutdown() == false : \"Must stop transport before terminating underlying threadpool\";\n-        threadPool.generic().execute(() -> {\n-            closeLock.writeLock().lock();\n-            try {\n-                keepAlive.close();\n+        closeLock.writeLock().lock();\n+        try {\n+            keepAlive.close();\n \n-                // first stop to accept any incoming connections so nobody can connect to this transport\n-                for (Map.Entry<String, List<TcpServerChannel>> entry : serverChannels.entrySet()) {\n-                    String profile = entry.getKey();\n-                    List<TcpServerChannel> channels = entry.getValue();\n-                    ActionListener<Void> closeFailLogger = ActionListener.wrap(c -> {\n+            // first stop to accept any incoming connections so nobody can connect to this transport\n+            for (Map.Entry<String, List<TcpServerChannel>> entry : serverChannels.entrySet()) {\n+                String profile = entry.getKey();\n+                List<TcpServerChannel> channels = entry.getValue();\n+                ActionListener<Void> closeFailLogger = ActionListener.wrap(c -> {\n                         },\n                         e -> logger.warn(() -> new ParameterizedMessage(\"Error closing serverChannel for profile [{}]\", profile), e));\n-                    channels.forEach(c -> c.addCloseListener(closeFailLogger));\n-                    CloseableChannel.closeChannels(channels, true);\n-                }\n-                serverChannels.clear();\n-\n-                // close all of the incoming channels. The closeChannels method takes a list so we must convert the set.\n-                CloseableChannel.closeChannels(new ArrayList<>(acceptedChannels), true);\n-                acceptedChannels.clear();\n-\n-                stopInternal();\n-            } finally {\n-                closeLock.writeLock().unlock();\n-                latch.countDown();\n+                channels.forEach(c -> c.addCloseListener(closeFailLogger));\n+                CloseableChannel.closeChannels(channels, true);\n             }\n-        });\n+            serverChannels.clear();\n \n-        try {\n-            latch.await(30, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b9e6f72317d4209c76bc7cff466368ace11058"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUxMTQ0NTU3", "url": "https://github.com/elastic/elasticsearch/pull/66834#pullrequestreview-751144557", "createdAt": "2021-09-10T07:57:04Z", "commit": {"oid": "66b9e6f72317d4209c76bc7cff466368ace11058"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ba4901120869a4b16ccd1f18e10266b7733969", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/25ba4901120869a4b16ccd1f18e10266b7733969", "committedDate": "2021-09-10T08:35:57Z", "message": "revert long adder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7610d9c61c0e0d591e13a8959c514ea6826442", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/9d7610d9c61c0e0d591e13a8959c514ea6826442", "committedDate": "2021-09-10T09:05:26Z", "message": "Merge branch 'master' into less-forking-transport-close"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4249, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}