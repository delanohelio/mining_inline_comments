{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjYyOTAx", "number": 54729, "title": "Trigger explicit loading of blob container and snapshot in the pre-recovery hook", "bodyText": "In #53961 we defer the construction of Searchable Snapshot Directory's BlobContainer and a\nBlobStoreIndexShardSnapshot instances so that these objects are created when they are first accessed, which we expect to be during the recovery process. At the same time, assertions were added to ensure that the construction is effectively executed under a generic or snapshot thread.\nSadly, this is not always the case because there is always a short window of time between the creation of the IndexShard  and the time the objects are created during the recovery process. It is also possible that other components of Elasticsearch trigger the creation of the blob container and snapshot.\nWe identified the following places:\n\ncomputing avg shard size of index shards in IndexService.createShard() (this is triggered when relocating a primary shard under the cluster state applier thread)\ncomputing indices stats in TransportIndicesStatsAction which calls indexShard.storeStats() which calls estimateSizeInBytes() (this is triggered by InternalClusterInfoService under the management thread pool)\ncomputing shard store metadata in IndexShard.snapshotStoreMetadata while calls failIfCorrupted(Directory) (this is triggered by TransportNodesListShardStoreMetadata, executed under the fetch_shard_store thread pool)\nTransportNodesListGatewayStartedShards should also use failIfCorrupted(Directory) at some point (triggered by the GatewayAllocator and executed under the fetch_shard_started thread pool)\n\nThis commit changes the way BlobContainer and a BlobStoreIndexShardSnapshot instances are created so that it does not happen on first access anymore but the objects are now created using a specific loadSnapshot() method.\nThis method is explicitly called during the pre-recovery phase.\nUntil this method is called, the SearchableSnapshotDirectory acts as if it was empty: the listAll() method returns an empty array. Having this behavior allows the identified access points to not fail and not trigger the snapshot loading before we explicitly load it in the pre-recovery hook.", "createdAt": "2020-04-03T16:13:41Z", "url": "https://github.com/elastic/elasticsearch/pull/54729", "merged": true, "mergeCommit": {"oid": "104ba40945d051c5fd3d16aed289101652b015cb"}, "closed": true, "closedAt": "2020-04-06T10:25:47Z", "author": {"login": "tlrx"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUDFIKgH2gAyMzk4MjYyOTAxOjFjZTQ1ZDZhZTM3NmQ0MTdmZmJmY2I2YWI3ZjU1OGZhM2YyYTg3MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcU70G-gFqTM4ODEwNDk4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ce45d6ae376d417ffbfcb6ab7f558fa3f2a8714", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ce45d6ae376d417ffbfcb6ab7f558fa3f2a8714", "committedDate": "2020-04-03T15:59:53Z", "message": "Load snapshot in pre-recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa", "committedDate": "2020-04-06T07:56:34Z", "message": "Merge branch 'feature/searchable-snapshots' into load-snapshot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDUwNDgz", "url": "https://github.com/elastic/elasticsearch/pull/54729#pullrequestreview-388050483", "createdAt": "2020-04-06T08:51:42Z", "commit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1MTo0M1rOGBN0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1Njo1OFrOGBOBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODI0MQ==", "bodyText": "Technically ok, but I think a logical XOR is clearer than a bitwise XOR:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert loaded ^ snapshot == null;\n          \n          \n            \n                    assert loaded != (snapshot == null);", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403928241", "createdAt": "2020-04-06T08:51:43Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODQxMw==", "bodyText": "Technically ok, but I think a logical XOR is clearer than a bitwise XOR:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert loaded ^ blobContainer == null;\n          \n          \n            \n                    assert loaded != (blobContainer == null);", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403928413", "createdAt": "2020-04-06T08:51:58Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDcwOA==", "bodyText": "Can we keep this assertion, and instead only call this method after checking loaded?", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403930708", "createdAt": "2020-04-06T08:55:35Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDc2NA==", "bodyText": "Can we keep this assertion, and instead only call this method after checking loaded?", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403930764", "createdAt": "2020-04-06T08:55:39Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();\n         return blobContainer;\n     }\n \n+    @Nullable\n     public BlobStoreIndexShardSnapshot snapshot() {\n-        final BlobStoreIndexShardSnapshot snapshot = this.snapshot.get();\n-        assert snapshot != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTE3OQ==", "bodyText": "I don't think we need to assert this here since we're not changing any state?", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403931179", "createdAt": "2020-04-06T08:56:19Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTIyNw==", "bodyText": "I don't think we need to assert this here since we're not changing any state?", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403931227", "createdAt": "2020-04-06T08:56:24Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();\n         return blobContainer;\n     }\n \n+    @Nullable\n     public BlobStoreIndexShardSnapshot snapshot() {\n-        final BlobStoreIndexShardSnapshot snapshot = this.snapshot.get();\n-        assert snapshot != null;\n+        final BlobStoreIndexShardSnapshot snapshot = this.snapshot;\n+        assert invariant();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTU4Mw==", "bodyText": "Relates my earlier comment - let's return an empty list if loaded == false, then we can be sure that snapshot() will return non-null.", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403931583", "createdAt": "2020-04-06T08:56:58Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;\n+        final BlobContainer blobContainer = this.blobContainer;\n+        assert invariant();\n         return blobContainer;\n     }\n \n+    @Nullable\n     public BlobStoreIndexShardSnapshot snapshot() {\n-        final BlobStoreIndexShardSnapshot snapshot = this.snapshot.get();\n-        assert snapshot != null;\n+        final BlobStoreIndexShardSnapshot snapshot = this.snapshot;\n+        assert invariant();\n         return snapshot;\n     }\n \n+    private List<BlobStoreIndexShardSnapshot.FileInfo> files() {\n+        final BlobStoreIndexShardSnapshot snapshot = snapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c788c20e416898feefc51c90f4075ef194c5bf2", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/6c788c20e416898feefc51c90f4075ef194c5bf2", "committedDate": "2020-04-06T09:38:52Z", "message": "apply feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTA0OTg0", "url": "https://github.com/elastic/elasticsearch/pull/54729#pullrequestreview-388104984", "createdAt": "2020-04-06T10:05:05Z", "commit": {"oid": "6c788c20e416898feefc51c90f4075ef194c5bf2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowNTowNVrOGBQmNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDowNTowNVrOGBQmNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3MzY4Nw==", "bodyText": "\ud83d\udc4d yes, I meant that callers should be careful only to call this if loaded. This is good.", "url": "https://github.com/elastic/elasticsearch/pull/54729#discussion_r403973687", "createdAt": "2020-04-06T10:05:05Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -109,20 +117,72 @@ public SearchableSnapshotDirectory(\n         this.useCache = SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings);\n         this.excludedFileTypes = new HashSet<>(SNAPSHOT_CACHE_EXCLUDED_FILE_TYPES_SETTING.get(indexSettings));\n         this.uncachedChunkSize = SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.get(indexSettings).getBytes();\n+        this.loaded = false;\n+        assert invariant();\n+    }\n+\n+    private synchronized boolean invariant() {\n+        assert loaded ^ snapshot == null;\n+        assert loaded ^ blobContainer == null;\n+        return true;\n+    }\n+\n+    protected final boolean assertCurrentThreadMayLoadSnapshot() {\n+        final String threadName = Thread.currentThread().getName();\n+        assert threadName.contains('[' + ThreadPool.Names.GENERIC + ']')\n+            // Unit tests access the blob store on the main test thread; simplest just to permit this rather than have them override this\n+            // method somehow.\n+            || threadName.startsWith(\"TEST-\") : \"current thread [\" + Thread.currentThread() + \"] may not load \" + snapshotId;\n+        return true;\n+    }\n+\n+    /**\n+     * Loads the snapshot if and only if it the snapshot is not loaded yet.\n+     *\n+     * @return true if the snapshot was loaded by executing this method, false otherwise\n+     */\n+    public boolean loadSnapshot() {\n+        boolean alreadyLoaded = this.loaded;\n+        if (alreadyLoaded == false) {\n+            synchronized (this) {\n+                alreadyLoaded = this.loaded;\n+                if (alreadyLoaded == false) {\n+                    this.blobContainer = blobContainerSupplier.get();\n+                    this.snapshot = snapshotSupplier.get();\n+                    this.loaded = true;\n+                }\n+            }\n+        }\n+        assert assertCurrentThreadMayLoadSnapshot();\n+        assert invariant();\n+        return alreadyLoaded == false;\n     }\n \n+    @Nullable\n     public BlobContainer blobContainer() {\n-        final BlobContainer blobContainer = this.blobContainer.get();\n-        assert blobContainer != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMDcwOA=="}, "originalCommit": {"oid": "9ee6ab2c8a6a09d7dbb70f251b18052dcc5b1ffa"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3803, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}