{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDMyMTMy", "number": 53450, "title": "Decouple AuditTrailService from AuditTrail", "bodyText": "The AuditTrailService has historically been an AuditTrail itself, acting\nas a composite of the configured audit trails. This commit removes that\ninterface from the service and instead builds a composite delegating\nimplementation internally. The service now has a single get() method to\nget an AuditTrail implementation which may be called. If auditing is not\nallowed by the license, an empty noop version is returned.", "createdAt": "2020-03-12T04:22:29Z", "url": "https://github.com/elastic/elasticsearch/pull/53450", "merged": true, "mergeCommit": {"oid": "9467dbf1208970b7e8e60d3650b53dc0e6151514"}, "closed": true, "closedAt": "2020-03-18T19:43:16Z", "author": {"login": "rjernst"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMz3xbgH2gAyMzg3MDMyMTMyOmVmZDE2MmIyY2NlNmM4Mzc2NzU2OTUxNzY5ZGI0ZDcyNmRjOTJlMGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO5k3ugFqTM3NzAxMzU3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "efd162b2cce6c8376756951769db4d726dc92e0b", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/efd162b2cce6c8376756951769db4d726dc92e0b", "committedDate": "2020-03-12T04:19:15Z", "message": "Decouple AuditTrailService from AuditTrail\n\nThe AuditTrailService has historically been an AuditTrail itself, acting\nas a composite of the configured audit trails. This commit removes that\ninterface from the service and instead builds a composite delegating\nimplementation internally. The service now has a single get() method to\nget an AuditTrail implementation which may be called. If auditing is not\nallowed by the license, an empty noop version is returned."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18753d494d7734480f544b36763321d402191336", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/18753d494d7734480f544b36763321d402191336", "committedDate": "2020-03-12T05:02:58Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa47d40528eff87ffd534ef0b8574f8ba1769943", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/aa47d40528eff87ffd534ef0b8574f8ba1769943", "committedDate": "2020-03-12T05:18:08Z", "message": "more checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1165130919105fc49eeae05509071c79aa9bd2", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd1165130919105fc49eeae05509071c79aa9bd2", "committedDate": "2020-03-12T06:02:55Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NTI1Mjg4", "url": "https://github.com/elastic/elasticsearch/pull/53450#pullrequestreview-374525288", "createdAt": "2020-03-13T18:30:08Z", "commit": {"oid": "fd1165130919105fc49eeae05509071c79aa9bd2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDowOFrOF2OSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMDo1N1rOF2OUYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMTYwMA==", "bodyText": "For readability can a isEmpty method be added on the CompositeAuditTrail so that this would change to compositeAuditTrail.isEmpty()?", "url": "https://github.com/elastic/elasticsearch/pull/53450#discussion_r392401600", "createdAt": "2020-03-13T18:30:08Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "diffHunk": "@@ -19,219 +19,276 @@\n import java.util.Collections;\n import java.util.List;\n \n-public class AuditTrailService implements AuditTrail {\n+public class AuditTrailService {\n \n+    private static final AuditTrail NOOP_AUDIT_TRAIL = new NoopAuditTrail();\n+    private final CompositeAuditTrail compositeAuditTrail;\n     private final XPackLicenseState licenseState;\n-    private final List<AuditTrail> auditTrails;\n-\n-    @Override\n-    public String name() {\n-        return \"service\";\n-    }\n \n     public AuditTrailService(List<AuditTrail> auditTrails, XPackLicenseState licenseState) {\n-        this.auditTrails = Collections.unmodifiableList(auditTrails);\n+        this.compositeAuditTrail = new CompositeAuditTrail(Collections.unmodifiableList(auditTrails));\n         this.licenseState = licenseState;\n     }\n \n-    /** Returns the audit trail implementations that this service delegates to. */\n+    public AuditTrail get() {\n+        if (compositeAuditTrail.auditTrails.isEmpty() == false && licenseState.isAuditingAllowed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1165130919105fc49eeae05509071c79aa9bd2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMjAxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private List<AuditTrail> auditTrails;\n          \n          \n            \n                    private final List<AuditTrail> auditTrails;", "url": "https://github.com/elastic/elasticsearch/pull/53450#discussion_r392402016", "createdAt": "2020-03-13T18:30:57Z", "author": {"login": "jaymode"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "diffHunk": "@@ -19,219 +19,276 @@\n import java.util.Collections;\n import java.util.List;\n \n-public class AuditTrailService implements AuditTrail {\n+public class AuditTrailService {\n \n+    private static final AuditTrail NOOP_AUDIT_TRAIL = new NoopAuditTrail();\n+    private final CompositeAuditTrail compositeAuditTrail;\n     private final XPackLicenseState licenseState;\n-    private final List<AuditTrail> auditTrails;\n-\n-    @Override\n-    public String name() {\n-        return \"service\";\n-    }\n \n     public AuditTrailService(List<AuditTrail> auditTrails, XPackLicenseState licenseState) {\n-        this.auditTrails = Collections.unmodifiableList(auditTrails);\n+        this.compositeAuditTrail = new CompositeAuditTrail(Collections.unmodifiableList(auditTrails));\n         this.licenseState = licenseState;\n     }\n \n-    /** Returns the audit trail implementations that this service delegates to. */\n+    public AuditTrail get() {\n+        if (compositeAuditTrail.auditTrails.isEmpty() == false && licenseState.isAuditingAllowed()) {\n+            return compositeAuditTrail;\n+        } else {\n+            return NOOP_AUDIT_TRAIL;\n+        }\n+    }\n+\n+    // TODO: this method only exists for access to LoggingAuditTrail in a Node for testing.\n+    // DO NOT USE IT, IT WILL BE REMOVED IN THE FUTURE\n     public List<AuditTrail> getAuditTrails() {\n-        return auditTrails;\n+        return compositeAuditTrail.auditTrails;\n+    }\n+\n+    private static class NoopAuditTrail implements AuditTrail {\n+\n+        @Override\n+        public String name() {\n+            return \"noop\";\n+        }\n+\n+        @Override\n+        public void authenticationSuccess(String requestId, String realm, User user, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationSuccess(String requestId, String realm, User user, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void anonymousAccessDenied(String requestId, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void anonymousAccessDenied(String requestId, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, AuthenticationToken token, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, AuthenticationToken token, RestRequest request) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, String realm, AuthenticationToken token,\n+                                         String action, TransportMessage message) {}\n+\n+        @Override\n+        public void authenticationFailed(String requestId, String realm, AuthenticationToken token, RestRequest request) {}\n+\n+        @Override\n+        public void accessGranted(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                  AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void accessDenied(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                 AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void tamperedRequest(String requestId, RestRequest request) {}\n+\n+        @Override\n+        public void tamperedRequest(String requestId, String action, TransportMessage message) {}\n+\n+        @Override\n+        public void tamperedRequest(String requestId, User user, String action, TransportMessage request) {}\n+\n+        @Override\n+        public void connectionGranted(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {}\n+\n+        @Override\n+        public void connectionDenied(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {}\n+\n+        @Override\n+        public void runAsGranted(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                 AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void runAsDenied(String requestId, Authentication authentication, String action, TransportMessage message,\n+                                AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void runAsDenied(String requestId, Authentication authentication, RestRequest request,\n+                                AuthorizationInfo authorizationInfo) {}\n+\n+        @Override\n+        public void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication,\n+                                             String action, String indices, String requestName, TransportAddress remoteAddress,\n+                                             AuthorizationInfo authorizationInfo) {}\n     }\n \n-    @Override\n-    public void authenticationSuccess(String requestId, String realm, User user, RestRequest request) {\n-        if (licenseState.isAuditingAllowed()) {\n+    private static class CompositeAuditTrail implements AuditTrail {\n+\n+        private List<AuditTrail> auditTrails;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1165130919105fc49eeae05509071c79aa9bd2"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4cd86d48fc5fac3be2db34b80311e8c78ce982", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/9c4cd86d48fc5fac3be2db34b80311e8c78ce982", "committedDate": "2020-03-17T17:15:58Z", "message": "Merge branch 'master' into refactor_license3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd52fc261b07b526d04f5652c570b41c84b79f61", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd52fc261b07b526d04f5652c570b41c84b79f61", "committedDate": "2020-03-17T17:24:50Z", "message": "address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDEzNTcz", "url": "https://github.com/elastic/elasticsearch/pull/53450#pullrequestreview-377013573", "createdAt": "2020-03-18T16:05:53Z", "commit": {"oid": "fd52fc261b07b526d04f5652c570b41c84b79f61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1516, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}