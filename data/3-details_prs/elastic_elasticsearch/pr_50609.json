{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MDMwMDcz", "number": 50609, "title": "Support offset in composite aggs", "bodyText": "Adds support for the offset parameter to the date_histogram source\nof composite aggs. The offset parameter is supported by the normal\ndate_histogram aggregation and is useful for folks that need to\nmeasure things from, say, 6am one day to 6am the next day.\nThis is implemented by creating a new Rounding that knows how to\nhandle offsets and delegates to other rounding implementations. That\nimplementation doesn't fully implement the Rounding contract, namely\nnextRoundingValue. That method isn't used by composite aggs so I can't\nbe sure that any implementation that I add will be correct. I propose to\nleave it throwing UnsupportedOperationException until I need it.\nCloses #48757", "createdAt": "2020-01-03T15:41:17Z", "url": "https://github.com/elastic/elasticsearch/pull/50609", "merged": true, "mergeCommit": {"oid": "326d696d9ade969717cb08050c7a98d428560f82"}, "closed": true, "closedAt": "2020-01-07T19:49:10Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2wQbzAH2gAyMzU5MDMwMDczOjMwMzJkNjJhOWYyM2M3NjUwZjQwMDkwODIzZjVlNDU2MDk0ZjA3ODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4FeFAAH2gAyMzU5MDMwMDczOmZjNzdlMzRiN2Q3MGY5Mzc2MTMyMGYwNGE5Zjc0ZGZhY2FkOGY3NjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3032d62a9f23c7650f40090823f5e456094f0782", "committedDate": "2020-01-03T15:40:14Z", "message": "Support offset in composite aggs\n\nAdds support for the `offset` parameter to the `date_histogram` source\nof composite aggs. The `offset` parameter is supported by the normal\n`date_histogram` aggregation and is useful for folks that need to\nmeasure things from, say, 6am one day to 6am the next day.\n\nThis is implemented by creating a new `Rounding` that knows how to\nhandle offsets and delegates to other rounding implementations. That\nimplementation doesn't fully implement the `Rounding` contract, namely\n`nextRoundingValue`. That method isn't used by composite aggs so I can't\nbe sure that any implementation that I add will be correct. I propose to\nleave it throwing `UnsupportedOperationException` until I need it.\n\nCloses #48757"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTM5MjI4", "url": "https://github.com/elastic/elasticsearch/pull/50609#pullrequestreview-338139228", "createdAt": "2020-01-03T15:43:09Z", "commit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0MzowOVrOFaC7NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0NToyOVrOFaC-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTIyMQ==", "bodyText": "We don't actually serialize this Rounding but I believe I've got this bit right so I kept it. I'd like to move the other offset code over to this Rounding which means that we will eventually serialize it. At that point we'll get exhaustive tests for this code.", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362855221", "createdAt": "2020-01-03T15:43:09Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            delegate = Rounding.read(in);\n+            offset = in.readLong();\n+        }\n+\n+        @Override\n+        public void innerWriteTo(StreamOutput out) throws IOException {\n+            if (out.getVersion().before(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTk2Ng==", "bodyText": "I think this is the way to do this, but it has been a long time. I want to land this change in master and 7.x, but these tests have no change of passing the bwc tests until I backport it.\nNow that I think about it, maybe this version check should be V_7_6_0 actually. Help!", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362855966", "createdAt": "2020-01-03T15:45:06Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/DateHistogramValuesSourceBuilder.java", "diffHunk": "@@ -80,12 +91,18 @@ protected DateHistogramValuesSourceBuilder(StreamInput in) throws IOException {\n         super(in);\n         dateHistogramInterval = new DateIntervalWrapper(in);\n         timeZone = in.readOptionalZoneId();\n+        if (in.getVersion().after(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjEwMQ==", "bodyText": "Modulo the version check which I discuss below.", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362856101", "createdAt": "2020-01-03T15:45:29Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            delegate = Rounding.read(in);\n+            offset = in.readLong();\n+        }\n+\n+        @Override\n+        public void innerWriteTo(StreamOutput out) throws IOException {\n+            if (out.getVersion().before(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTIyMQ=="}, "originalCommit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTQxMDIy", "url": "https://github.com/elastic/elasticsearch/pull/50609#pullrequestreview-338141022", "createdAt": "2020-01-03T15:46:49Z", "commit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0Njo0OVrOFaDAjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0Njo0OVrOFaDAjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjU4OA==", "bodyText": "I figured because the option is the same I should just include the docs from the normal date histogram.", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362856588", "createdAt": "2020-01-03T15:46:49Z", "author": {"login": "nik9000"}, "path": "docs/reference/aggregations/bucket/composite-aggregation.asciidoc", "diffHunk": "@@ -287,6 +287,72 @@ Time zones may either be specified as an ISO 8601 UTC offset (e.g. `+01:00` or\n `-08:00`)  or as a timezone id, an identifier used in the TZ database like\n `America/Los_Angeles`.\n \n+*Offset*\n+\n+include::datehistogram-aggregation.asciidoc[tag=offset-explanation]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8f692ec7df6f769fac0111e6fa7dee80485d630", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/b8f692ec7df6f769fac0111e6fa7dee80485d630", "committedDate": "2020-01-03T16:47:00Z", "message": "version checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95da5cb0db5008174298d6ff3980246b2426f209", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/95da5cb0db5008174298d6ff3980246b2426f209", "committedDate": "2020-01-03T18:08:39Z", "message": "use 8.0.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7eea38b250a21ac61498c07c2b1399efbd239a7", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/e7eea38b250a21ac61498c07c2b1399efbd239a7", "committedDate": "2020-01-03T18:11:53Z", "message": "Revert \"use 8.0.0\"\n\nThis reverts commit 95da5cb0db5008174298d6ff3980246b2426f209."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/393388c25dc4bbdda70d8e4ac20f3b735e8b582d", "committedDate": "2020-01-03T18:15:19Z", "message": "Disable bwc tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjEwOTgx", "url": "https://github.com/elastic/elasticsearch/pull/50609#pullrequestreview-338210981", "createdAt": "2020-01-03T18:25:46Z", "commit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxODoyNTo0NlrOFaGWLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxOTowNDoyOVrOFaHHsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMTI3OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362911278", "createdAt": "2020-01-03T18:25:46Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/bucket/composite-aggregation.asciidoc", "diffHunk": "@@ -287,6 +287,72 @@ Time zones may either be specified as an ISO 8601 UTC offset (e.g. `+01:00` or\n `-08:00`)  or as a timezone id, an identifier used in the TZ database like\n `America/Los_Angeles`.\n \n+*Offset*\n+\n+include::datehistogram-aggregation.asciidoc[tag=offset-explanation]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjU4OA=="}, "originalCommit": {"oid": "3032d62a9f23c7650f40090823f5e456094f0782"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxOTgzOQ==", "bodyText": "Is the intention to migrate the existing users of offsets (regular date histo agg, etc) over to this wrapper?  E.g. it seems a bit heavyweight to create a whole new rounding, but if the idea is to followup with changes to the existing users of offset (rather than baking the logic into the aggs) it makes sense to me.", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362919839", "createdAt": "2020-01-03T18:52:00Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDA2OA==", "bodyText": "maybe read/write ZLong instead?  I suspect offsets will be small-to-medium'ish sized and either positive or negative, so zlong might be a win?", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362920068", "createdAt": "2020-01-03T18:52:44Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            delegate = Rounding.read(in);\n+            offset = in.readLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDIwMw==", "bodyText": "Also, we should probably add a javadoc explaining why/when to use this class", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362920203", "createdAt": "2020-01-03T18:53:11Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxOTgzOQ=="}, "originalCommit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDU1NQ==", "bodyText": "\ud83d\ude4f for the cleanup here :)", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362920555", "createdAt": "2020-01-03T18:54:14Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -556,19 +567,73 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            delegate = Rounding.read(in);\n+            offset = in.readLong();\n+        }\n+\n+        @Override\n+        public void innerWriteTo(StreamOutput out) throws IOException {\n+            if (out.getVersion().onOrAfter(Version.V_7_6_0)) {\n+                throw new IllegalArgumentException(\"Offset rounding not supported before 8.0.0\");\n+            }\n+            delegate.writeTo(out);\n+            out.writeLong(offset);\n+        }\n+\n+        @Override\n+        public byte id() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public long round(long value) {\n+            return delegate.round(value - offset) + offset;\n+        }\n+\n+        @Override\n+        public long nextRoundingValue(long value) {\n+            // This isn't needed by the current users. We'll implement it when we migrate other users to it.\n+            throw new UnsupportedOperationException(\"not yet supported\");\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(delegate, offset);\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null || getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            OffsetRounding other = (OffsetRounding) obj;\n+            return delegate.equals(other.delegate) && offset == other.offset;\n+        }\n+    }\n+\n     public static Rounding read(StreamInput in) throws IOException {\n-        Rounding rounding;\n         byte id = in.readByte();\n         switch (id) {\n             case TimeUnitRounding.ID:\n-                rounding = new TimeUnitRounding(in);\n-                break;\n+                return new TimeUnitRounding(in);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzczNA==", "bodyText": "Hmm, do you know if we have any serialization tests for Rounding?  I was looking to see if we test that the id() bytes are correct and don't accidentally change (similar to what we do with AbstractWriteableEnumTestCase enum tests)... but couldn't find any serialization tests at all.\nIf we have them somewhere, let's add a test for the id byte.  If not, probably too much to add to this PR but we should file a ticket so we don't forget to add some tests... makes me uneasy that such a widespread class doesn't have serialization tests :)", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362923734", "createdAt": "2020-01-03T19:03:49Z", "author": {"login": "polyfractal"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -195,6 +195,16 @@ public void testTimeUnitRoundingDST() {\n         assertThat(tzRounding_chg.round(time(\"2014-11-02T06:01:01\", chg)), isDate(time(\"2014-11-02T06:00:00\", chg), chg));\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzk1NQ==", "bodyText": "Let's add another test that does negative offsets too?", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362923955", "createdAt": "2020-01-03T19:04:29Z", "author": {"login": "polyfractal"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -195,6 +195,16 @@ public void testTimeUnitRoundingDST() {\n         assertThat(tzRounding_chg.round(time(\"2014-11-02T06:01:01\", chg)), isDate(time(\"2014-11-02T06:00:00\", chg), chg));\n     }\n \n+    public void testOffsetRounding() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "393388c25dc4bbdda70d8e4ac20f3b735e8b582d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14de4c85993d581ccad7a82fd4ac83237ff88014", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/14de4c85993d581ccad7a82fd4ac83237ff88014", "committedDate": "2020-01-03T19:43:00Z", "message": "Merge branch 'master' into composite_date_offset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b271143d03877df8c95381abc8f43f5656f091e1", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/b271143d03877df8c95381abc8f43f5656f091e1", "committedDate": "2020-01-03T20:40:36Z", "message": "Rework public interface and add wire tests\n\nThe serialization was subtly wrong, particularly in the Eire time zone."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08fc2672277730ed1bef85db450f61dbf3b6b70c", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/08fc2672277730ed1bef85db450f61dbf3b6b70c", "committedDate": "2020-01-03T20:42:46Z", "message": "zlong"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjY4MTQ5", "url": "https://github.com/elastic/elasticsearch/pull/50609#pullrequestreview-338268149", "createdAt": "2020-01-03T20:47:30Z", "commit": {"oid": "08fc2672277730ed1bef85db450f61dbf3b6b70c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDo0NzozMFrOFaJE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDo0NzozMFrOFaJE1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NTk4OQ==", "bodyText": "I'll revert this change. It snuck in because I thought the comparison was wrong.", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362955989", "createdAt": "2020-01-03T20:47:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -418,24 +434,16 @@ public boolean equals(Object obj) {\n                 return false;\n             }\n             TimeUnitRounding other = (TimeUnitRounding) obj;\n-            return Objects.equals(unit, other.unit) && Objects.equals(timeZone, other.timeZone);\n+            return unit == other.unit && timeZone.equals(other.timeZone);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fc2672277730ed1bef85db450f61dbf3b6b70c"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2113c0ebd9c4c750fb760bae1144838e89b3ce81", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/2113c0ebd9c4c750fb760bae1144838e89b3ce81", "committedDate": "2020-01-03T20:48:30Z", "message": "Revert equals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjY4NzY5", "url": "https://github.com/elastic/elasticsearch/pull/50609#pullrequestreview-338268769", "createdAt": "2020-01-03T20:49:18Z", "commit": {"oid": "08fc2672277730ed1bef85db450f61dbf3b6b70c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDo0OToxOFrOFaJGvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDo0OToxOFrOFaJGvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NjQ3OA==", "bodyText": "The toString implementations weren't consistent which made reading the error messages hard. So I changed them.", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r362956478", "createdAt": "2020-01-03T20:49:18Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -552,23 +560,88 @@ public boolean equals(Object obj) {\n                 return false;\n             }\n             TimeIntervalRounding other = (TimeIntervalRounding) obj;\n-            return Objects.equals(interval, other.interval) && Objects.equals(timeZone, other.timeZone);\n+            return interval == other.interval && timeZone.equals(other.timeZone);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Rounding[\" + interval + \" in \" + timeZone + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fc2672277730ed1bef85db450f61dbf3b6b70c"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2256e203c411a11cedddb7b27f37dd26122c570", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/c2256e203c411a11cedddb7b27f37dd26122c570", "committedDate": "2020-01-03T21:52:26Z", "message": "Fix up test case\n\nLooks like I never ran it!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f53edcd9b13ed659408d432b77a50eb7bbf448", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/54f53edcd9b13ed659408d432b77a50eb7bbf448", "committedDate": "2020-01-05T21:46:42Z", "message": "Disable some more bwc tests for the backport"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzE0MTEy", "url": "https://github.com/elastic/elasticsearch/pull/50609#pullrequestreview-339314112", "createdAt": "2020-01-07T15:35:15Z", "commit": {"oid": "54f53edcd9b13ed659408d432b77a50eb7bbf448"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozNToxNVrOFa8--g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozNToxNVrOFa8--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwNjQ1OA==", "bodyText": "I'm a nervous nellie... would it be possible to explicitly test the \"short\" deprecated TZs from DateUtils, just to make sure we aren't breaking them?", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363806458", "createdAt": "2020-01-07T15:35:15Z", "author": {"login": "polyfractal"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingWireTests.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common;\n+\n+import org.elasticsearch.common.Rounding.DateTimeUnit;\n+import org.elasticsearch.common.io.stream.Writeable.Reader;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+public class RoundingWireTests extends AbstractWireSerializingTestCase<Rounding> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f53edcd9b13ed659408d432b77a50eb7bbf448"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d3c3547a9efb39b3a8bc738fec6a072acb5bbd2", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/9d3c3547a9efb39b3a8bc738fec6a072acb5bbd2", "committedDate": "2020-01-07T16:12:49Z", "message": "Merge branch 'master' into composite_date_offset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NTEyNjI2", "url": "https://github.com/elastic/elasticsearch/pull/50609#pullrequestreview-338512626", "createdAt": "2020-01-06T08:16:36Z", "commit": {"oid": "54f53edcd9b13ed659408d432b77a50eb7bbf448"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwODoxNjozN1rOFaXl1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0MDoxNlrOFbCLeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MzgxNQ==", "bodyText": "Let's use the new format, this option should be removed soon.", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363193815", "createdAt": "2020-01-06T08:16:37Z", "author": {"login": "jimczi"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml", "diffHunk": "@@ -367,6 +367,40 @@ setup:\n   - match: { aggregations.test.buckets.0.key.date: \"2017-10-21\" }\n   - match: { aggregations.test.buckets.0.doc_count: 1 }\n \n+---\n+\"Composite aggregation with date_histogram offset\":\n+  - skip:\n+      version: \" - 7.99.99\" # after BWC merged revert to 7.5.99\n+      reason:  offset introduced in 8.0.0\n+\n+  - do:\n+      search:\n+        rest_total_hits_as_int: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f53edcd9b13ed659408d432b77a50eb7bbf448"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MTU3Ng==", "bodyText": "should the message be before 7.6.0 ?", "url": "https://github.com/elastic/elasticsearch/pull/50609#discussion_r363891576", "createdAt": "2020-01-07T18:40:16Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -554,21 +562,86 @@ public boolean equals(Object obj) {\n             TimeIntervalRounding other = (TimeIntervalRounding) obj;\n             return Objects.equals(interval, other.interval) && Objects.equals(timeZone, other.timeZone);\n         }\n+\n+        @Override\n+        public String toString() {\n+            return \"Rounding[\" + interval + \" in \" + timeZone + \"]\";\n+        }\n+    }\n+\n+    static class OffsetRounding extends Rounding {\n+        static final byte ID = 3;\n+\n+        private final Rounding delegate;\n+        private final long offset;\n+\n+        OffsetRounding(Rounding delegate, long offset) {\n+            this.delegate = delegate;\n+            this.offset = offset;\n+        }\n+\n+        OffsetRounding(StreamInput in) throws IOException {\n+            // Versions before 7.6.0 will never send this type of rounding.\n+            delegate = Rounding.read(in);\n+            offset = in.readZLong();\n+        }\n+\n+        @Override\n+        public void innerWriteTo(StreamOutput out) throws IOException {\n+            if (out.getVersion().before(Version.V_7_6_0)) {\n+                throw new IllegalArgumentException(\"Offset rounding not supported before 8.0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f53edcd9b13ed659408d432b77a50eb7bbf448"}, "originalPosition": 166}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc77e34b7d70f93761320f04a9f74dfacad8f766", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/fc77e34b7d70f93761320f04a9f74dfacad8f766", "committedDate": "2020-01-07T18:57:04Z", "message": "Fix from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3977, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}