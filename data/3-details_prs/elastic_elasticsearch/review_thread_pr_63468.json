{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5ODc1NzM4", "number": 63468, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDowNlrOErvqWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDo0OTowMFrOEsqhJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA1MTE0OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDowNlrOHer0sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTo1NToyMFrOHexw4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzMzMA==", "bodyText": "This feels more like a breaking change to me. @gwbrown Do you have any thoughts?", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501937330", "createdAt": "2020-10-08T18:44:06Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,154 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax-comparison-operators.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+=== Deprecating REST API access to system indices\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb45e04d691aaeecbcb40bd8bba910d0f9dc322"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5MzQ0Ng==", "bodyText": "While it doesn't actually \"break\" anything, that may be a better place to put it. My main concern is that it goes somewhere highly visible.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501993446", "createdAt": "2020-10-08T20:29:17Z", "author": {"login": "gwbrown"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,154 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax-comparison-operators.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+=== Deprecating REST API access to system indices\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzMzMA=="}, "originalCommit": {"oid": "bbb45e04d691aaeecbcb40bd8bba910d0f9dc322"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDY1Nw==", "bodyText": "I agree. I'll leave this here and add a related item to #63479.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r502034657", "createdAt": "2020-10-08T21:55:20Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,154 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax-comparison-operators.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+=== Deprecating REST API access to system indices\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzMzMA=="}, "originalCommit": {"oid": "bbb45e04d691aaeecbcb40bd8bba910d0f9dc322"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA1MTE3OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDowN1rOHer0tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDowN1rOHer0tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzMzNQ==", "bodyText": "@jaymode I made some changes here. Do you mind reviewing to ensure everything looks good to you?", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501937335", "createdAt": "2020-10-08T18:44:07Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,154 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax-comparison-operators.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+=== Deprecating REST API access to system indices\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage memory for\n+read operations performed by system indices. Similarly, `system_write` is a\n+`fixed` thread pool used to manage memory for write operations performed by\n+system indices. Both have a maximum number of threads equal to `5`\n+or half of the available processors, whichever is smaller.\n+\n+[discrete]\n+[[metadata-flag-system-indices]]\n+=== New metadata flag for system indices\n+\n+To prevent performance issues related to searches that accidentally target\n+system indices, we've added a new metadata flag to mark system and non-system\n+indices. {es} will automatically add this flag to an existing system indices\n+during upgrade.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb45e04d691aaeecbcb40bd8bba910d0f9dc322"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA1MzQ5OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDo0NVrOHer2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDo0NVrOHer2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzcxNg==", "bodyText": "This one was pretty outdated originally. @costin let me know if there are any other items we want to highlight here.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501937716", "createdAt": "2020-10-08T18:44:45Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,154 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax-comparison-operators.html[EQL\n+syntax documentation].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb45e04d691aaeecbcb40bd8bba910d0f9dc322"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA2MTcyOnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NzoxM1rOHer7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NzoxM1rOHer7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTA4OA==", "bodyText": "@dnhatn @jimczi You mind reviewing this section?", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501939088", "createdAt": "2020-10-08T18:47:13Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,156 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e21a06194ec8815cd32f02be7b294f7f63821056"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE0NDg2OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowOTo1MlrOHesuSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowOTo1MlrOHesuSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1MjA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To prevent performance issues related to searches that accidentally target\n          \n          \n            \n            To prevent performance issues related to searches that target", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501952072", "createdAt": "2020-10-08T19:09:52Z", "author": {"login": "jaymode"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,156 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is now deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage memory for\n+read operations performed by system indices. Similarly, `system_write` is a\n+`fixed` thread pool used to manage memory for write operations performed by\n+system indices. Both have a maximum number of threads equal to `5`\n+or half of the available processors, whichever is smaller.\n+\n+[discrete]\n+[[metadata-flag-system-indices]]\n+=== New metadata flag for system indices\n+\n+To prevent performance issues related to searches that accidentally target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e976ff0d27acb62948bf8b8471b98cffe819618f"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE0NjYzOnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxMDoyMFrOHesvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxMDoyMFrOHesvSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1MjMzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `system_write`. `system_read` is a `fixed` thread pool used to manage memory for\n          \n          \n            \n            `system_write`. `system_read` is a `fixed` thread pool used to manage resources for", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501952330", "createdAt": "2020-10-08T19:10:20Z", "author": {"login": "jaymode"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,156 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is now deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage memory for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e976ff0d27acb62948bf8b8471b98cffe819618f"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE0ODQwOnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxMDo1MVrOHeswVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxMDo1MVrOHeswVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1MjU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `fixed` thread pool used to manage memory for write operations performed by\n          \n          \n            \n            `fixed` thread pool used to manage resources for write operations targeting", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501952598", "createdAt": "2020-10-08T19:10:51Z", "author": {"login": "jaymode"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,156 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is now deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage memory for\n+read operations performed by system indices. Similarly, `system_write` is a\n+`fixed` thread pool used to manage memory for write operations performed by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e976ff0d27acb62948bf8b8471b98cffe819618f"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE0OTM1OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxMTowNVrOHesw8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxMTowNVrOHesw8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1Mjc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            read operations performed by system indices. Similarly, `system_write` is a\n          \n          \n            \n            read operations targeting system indices. Similarly, `system_write` is a", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501952754", "createdAt": "2020-10-08T19:11:05Z", "author": {"login": "jaymode"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,156 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\windows\\\\system32\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is now deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n+\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage memory for\n+read operations performed by system indices. Similarly, `system_write` is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e976ff0d27acb62948bf8b8471b98cffe819618f"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzQwNzk1OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoyOToxOVrOHevQAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTozNTozMlrOHexP9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5MzQ3Mw==", "bodyText": "These lines are incorrect and should be removed.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r501993473", "createdAt": "2020-10-08T20:29:19Z", "author": {"login": "gwbrown"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,156 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is now deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715955dcd7e8f28269060362fca16467ac51de4"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyNjIzMA==", "bodyText": "Thanks @gwbrown. Removed with d607c79.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r502026230", "createdAt": "2020-10-08T21:35:32Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -24,18 +24,156 @@ Other versions:\n | {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]\n \n \n-\n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n // tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is now deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future major version, direct access to system indices will be prevented by default\n+----\n+\n+To allow projects external to {es} additional time to adjust their access\n+patterns, these warnings are currently enabled for snapshot builds only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5MzQ3Mw=="}, "originalCommit": {"oid": "f715955dcd7e8f28269060362fca16467ac51de4"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTk5MTAxOnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo0NToyNFrOHf7RYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo0NToyNFrOHf7RYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIzOTAxMA==", "bodyText": "This is correct but I wonder if we should instead highlight the use-case of splitting the top-hits and aggs requests, which is new functionality, while pagination as described here only explains how _search_after can now do the same thing as _scroll.\nHere is a suggestion (which probably needs improvement, but to show what I mean):\nPITs are especially useful to improve end-user experience by making UIs more reactive.\nIf a search request asks for both top hits and aggregations, it will only return once everything\nhas been computed. However aggregations are usually more expensive to compute than top\nhits, so by splitting a request into two separate requests: one for top hits and another one for\naggregations, the UI can start displaying top hits quickly and only load facets as the request\nthat included aggregations returns. PITs help make sure that both requests operate on the\nexact same point-in-time view of the data.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r503239010", "createdAt": "2020-10-12T11:45:24Z", "author": {"login": "jpountz"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -43,19 +43,154 @@ Newly created indices abstracted by a <<data-streams,data stream>> will be alloc\n the `data_hot` tier automatically, while standalone indices will be allocated to\n the `data_content` tier automatically. Nodes with the pre-existing `data` role are \n considered to be part of all tiers.\n-// end::notable-highlights[]\n \n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n-// tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82c3e91f9009a68b65794d9c24d96a5e908862f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjAwMTQzOnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo0ODo1M1rOHf7YDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo0ODo1M1rOHf7YDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MDcxNg==", "bodyText": "A common source of confusion with scrolls is that keep_alive is only about the time between requests, not the entire lifetime of the scroll object, so I wonder if we should be extra clear about this here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n          \n          \n            \n            in the `keep_alive` query parameter.\n          \n          \n            \n            {ref}/point-in-time-api.html[open PIT API]. PITs get automatically garbage-collected\n          \n          \n            \n            after `keep_alive` if no follow-up request extends their duration.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r503240716", "createdAt": "2020-10-12T11:48:53Z", "author": {"login": "jpountz"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -43,19 +43,154 @@ Newly created indices abstracted by a <<data-streams,data stream>> will be alloc\n the `data_hot` tier automatically, while standalone indices will be allocated to\n the `data_content` tier automatically. Nodes with the pre-existing `data` role are \n considered to be part of all tiers.\n-// end::notable-highlights[]\n \n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n-// tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82c3e91f9009a68b65794d9c24d96a5e908862f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjAyNDM4OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo1NjowMlrOHf7l2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo1NjowMlrOHf7l2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0NDI1MQ==", "bodyText": "This suggestion aims at clarifying that the lifespan of the PIT gets extended even if no keep_alive is provided.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            extend your PIT's lifespan using the search request's `keep_alive` parameter.\n          \n          \n            \n            configure by how long to extend your PIT's lifespan using the search request's\n          \n          \n            \n            `keep_alive` parameter.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r503244251", "createdAt": "2020-10-12T11:56:02Z", "author": {"login": "jpountz"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -43,19 +43,154 @@ Newly created indices abstracted by a <<data-streams,data stream>> will be alloc\n the `data_hot` tier automatically, while standalone indices will be allocated to\n the `data_content` tier automatically. Nodes with the pre-existing `data` role are \n considered to be part of all tiers.\n-// end::notable-highlights[]\n \n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n-// tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82c3e91f9009a68b65794d9c24d96a5e908862f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjYxNjE0OnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDozMDoyNlrOHgBL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDozMDoyNlrOHgBL_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzNTkzMg==", "bodyText": "Maybe we should focus more on the user-facing value, along the lines of \"This helps make sure that system indices that are critical to the Elastic Stack like security or kibana indices remain somewhat responsive when the cluster is under heavy query or indexing load.\"", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r503335932", "createdAt": "2020-10-12T14:30:26Z", "author": {"login": "jpountz"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -43,19 +43,154 @@ Newly created indices abstracted by a <<data-streams,data stream>> will be alloc\n the `data_hot` tier automatically, while standalone indices will be allocated to\n the `data_content` tier automatically. Nodes with the pre-existing `data` role are \n considered to be part of all tiers.\n-// end::notable-highlights[]\n \n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n-// tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n+\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future\n+major version, direct access to system indices will be prevented by default\n+----\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage resources for\n+read operations targeting system indices. Similarly, `system_write` is a\n+`fixed` thread pool used to manage resources for write operations targeting\n+system indices. Both have a maximum number of threads equal to `5`\n+or half of the available processors, whichever is smaller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82c3e91f9009a68b65794d9c24d96a5e908862f"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjY5NDEzOnYy", "diffSide": "RIGHT", "path": "docs/reference/release-notes/highlights.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDo0OTowMFrOHgB7JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToyNzoyMFrOHgDYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0ODAwNA==", "bodyText": "How does adding a flag help prevent performance issues?", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r503348004", "createdAt": "2020-10-12T14:49:00Z", "author": {"login": "jpountz"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -43,19 +43,154 @@ Newly created indices abstracted by a <<data-streams,data stream>> will be alloc\n the `data_hot` tier automatically, while standalone indices will be allocated to\n the `data_content` tier automatically. Nodes with the pre-existing `data` role are \n considered to be part of all tiers.\n-// end::notable-highlights[]\n \n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n-// tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n+\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future\n+major version, direct access to system indices will be prevented by default\n+----\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage resources for\n+read operations targeting system indices. Similarly, `system_write` is a\n+`fixed` thread pool used to manage resources for write operations targeting\n+system indices. Both have a maximum number of threads equal to `5`\n+or half of the available processors, whichever is smaller.\n+\n+[discrete]\n+[[metadata-flag-system-indices]]\n+=== New metadata flag for system indices\n+\n+To prevent performance issues related to searches that target\n+system indices, we've added a new metadata flag to mark system and non-system", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82c3e91f9009a68b65794d9c24d96a5e908862f"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3MTg3Nw==", "bodyText": "This is a good question. I think the answer is that we prevent requests that target system indices, which could inadvertently slow searches.\nThat said, I think this may be better combined with the REST API access to system indices is deprecated section.", "url": "https://github.com/elastic/elasticsearch/pull/63468#discussion_r503371877", "createdAt": "2020-10-12T15:27:20Z", "author": {"login": "jrodewig"}, "path": "docs/reference/release-notes/highlights.asciidoc", "diffHunk": "@@ -43,19 +43,154 @@ Newly created indices abstracted by a <<data-streams,data stream>> will be alloc\n the `data_hot` tier automatically, while standalone indices will be allocated to\n the `data_content` tier automatically. Nodes with the pre-existing `data` role are \n considered to be part of all tiers.\n-// end::notable-highlights[]\n \n-// Use the notable-highlights tag to mark entries that\n-// should be featured in the Stack Installation and Upgrade Guide:\n-// tag::notable-highlights[]\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n-// end::notable-highlights[]\n+[discrete]\n+[[points-in-time-for-search]]\n+=== Points in time (PITs) for search\n+\n+In 7.10, we're introducing points in time (PITs), a lightweight way to preserve\n+index state over searches. If you're\n+{ref}/paginate-search-results.html#search-after[using `search_after` to paginate\n+search results] over multiple requests, a refresh could change the order of your\n+results and cause inconsistent results across pages. To prevent this, you can\n+now create a PIT to maintain the same index state over multiple searches.\n+\n+To use a PIT in a search, you must first explicitly create the PIT using the new\n+{ref}/point-in-time-api.html[open PIT API]. PITs last for the duration provided\n+in the `keep_alive` query parameter.\n+\n+[source,console]\n+----\n+POST /my-index-000001/_pit?keep_alive=1m\n+----\n+// TEST[setup:my_index]\n+\n+The API returns a PIT ID you can use in search requests. You can also\n+extend your PIT's lifespan using the search request's `keep_alive` parameter.\n+\n+[source,console]\n+----\n+POST /_search\n+{\n+    \"size\": 100,\n+    \"query\": {\n+        \"match\" : {\n+            \"title\" : \"elasticsearch\"\n+        }\n+    },\n+    \"pit\": {\n+\t    \"id\":  \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==\",\n+\t    \"keep_alive\": \"1m\"\n+    }\n+}\n+----\n+// TEST[catch:missing]\n+\n+PITs automatically close when their `keep_alive` period ends. You can\n+also manually close PITs you no longer need using the\n+{ref}/point-in-time-api.html[close PIT API]. Closing a PIT releases the\n+resources needed to maintain the PIT's index state.\n+\n+[source,console]\n+----\n+DELETE /_pit\n+{\n+    \"id\" : \"46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA=\"\n+}\n+----\n+// TEST[catch:missing]\n+\n+For more information about using PITs in search, see\n+{ref}/paginate-search-results.html#search-after[Paginate search results with\n+`search_after`] or the {ref}/point-in-time-api.html[PIT API documentation].\n+\n+[discrete]\n+[[support-for-request-level-circuit-breakers]]\n+=== Request-level circuit breakers on coordinating nodes\n+\n+You can now use a coordinating node to account for memory used to perform\n+partial and final reduce of aggregations in the request circuit breaker. The\n+search coordinator adds the memory that it used to save and reduce the results\n+of shard aggregations in the request circuit breaker. Before any partial or\n+final reduce, the memory needed to reduce the aggregations is estimated and a\n+CircuitBreakingException is thrown if exceeds the maximum memory allowed in this\n+breaker.\n+\n+This size is estimated as roughly 1.5 times the size of the serialized\n+aggregations that need to be reduced. This estimation can be completely off for\n+some aggregations but it is corrected with the real size after the reduce\n+completes. If the reduce is successful, we update the circuit breaker to remove\n+the size of the source aggregations and replace the estimation with the\n+serialized size of the newly reduced result.\n+\n+[discrete]\n+[[eql-case-sensitivity-operator]]\n+=== EQL: Case-sensitivity and the `:` operator\n+\n+In 7.10, we made most EQL operators and functions case-sensitive by default.\n+We've also added `:`, a new case-insensitive equal operator. Designed for\n+security use cases, you can use the `:` operator to search for strings in\n+Windows event logs and other event data containing a mix of letter cases.\n+\n+[source,console]\n+----\n+GET /my-index-000001/_eql/search\n+{\n+  \"query\": \"\"\"\n+    process where process.executable : \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\cmd.exe\"\n+  \"\"\"\n+}\n+----\n+// TEST[setup:sec_logs]\n+\n+For more information, see the {ref}/eql-syntax.html[EQL\n+syntax documentation].\n+\n+[discrete]\n+[[deprecate-rest-api-access-to-system-indices]]\n+=== REST API access to system indices is deprecated\n+\n+We are deprecating REST API access to system indices. Most REST API requests\n+that attempt to access system indices will return the following deprecation\n+warning:\n+\n+[source,text]\n+----\n+this request accesses system indices: [.system_index_name], but in a future\n+major version, direct access to system indices will be prevented by default\n+----\n+\n+The following REST API endpoints access system indices as part of their\n+implementation and will not return the deprecation warning:\n \n-// Omit the notable highlights tag for entries that only need to appear in the ES ref:\n-// [discrete]\n-// === Heading\n-//\n-// Description.\n+* `GET _cluster/health`\n+* `GET {index}/_recovery`\n+* `GET _cluster/allocation/explain`\n+* `GET _cluster/state`\n+* `POST _cluster/reroute`\n+* `GET {index}/_stats`\n+* `GET {index}/_segments`\n+* `GET {index}/_shard_stores`\n+* `GET _cat/[indices,aliases,health,recovery,shards,segments]`\n+\n+[discrete]\n+[[add-system-read-thread-pool]]\n+=== New thread pools for system indices\n+\n+We've added two new thread pools for system indices: `system_read` and\n+`system_write`. `system_read` is a `fixed` thread pool used to manage resources for\n+read operations targeting system indices. Similarly, `system_write` is a\n+`fixed` thread pool used to manage resources for write operations targeting\n+system indices. Both have a maximum number of threads equal to `5`\n+or half of the available processors, whichever is smaller.\n+\n+[discrete]\n+[[metadata-flag-system-indices]]\n+=== New metadata flag for system indices\n+\n+To prevent performance issues related to searches that target\n+system indices, we've added a new metadata flag to mark system and non-system", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0ODAwNA=="}, "originalCommit": {"oid": "b82c3e91f9009a68b65794d9c24d96a5e908862f"}, "originalPosition": 173}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3048, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}