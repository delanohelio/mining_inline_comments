{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDIyMjU1", "number": 53934, "title": "Introduce autoscaling decisions", "bodyText": "This is the first in a series of commits that will introduce the autoscaling deciders framework. This commit introduces the basic framework for representing autoscaling decisions.", "createdAt": "2020-03-22T15:18:41Z", "url": "https://github.com/elastic/elasticsearch/pull/53934", "merged": true, "mergeCommit": {"oid": "94e81b0aa0be5bab9ea2b77f9a9b101e979b8350"}, "closed": true, "closedAt": "2020-03-24T02:53:52Z", "author": {"login": "jasontedor"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQLQNiAH2gAyMzkyMDIyMjU1OjYwYzM1NzhiYWE2ODUyZTc0ZjQzMTY2ZDBlYWM1ZDcxM2IzMmViNWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQojxqgH2gAyMzkyMDIyMjU1Ojk0Zjk3MTM2OGYzNmIwODc0YWE2NmI2YWUxZmY5ODU5M2UzOWYwZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "60c3578baa6852e74f43166d0eac5d713b32eb5f", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/60c3578baa6852e74f43166d0eac5d713b32eb5f", "committedDate": "2020-03-22T15:15:32Z", "message": "Introduce autoscaling decisions\n\nThis is the first in a series of commits that will introduce the\nautoscaling deciders framework. This commit introduces the basic\nframework for representing autoscaling decisions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzM2NTQ0", "url": "https://github.com/elastic/elasticsearch/pull/53934#pullrequestreview-379336544", "createdAt": "2020-03-23T11:19:45Z", "commit": {"oid": "60c3578baa6852e74f43166d0eac5d713b32eb5f"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxOTo0NVrOF6A_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTozNzoxMFrOF6BjUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3Nzk1MQ==", "bodyText": "I would prefer to not extend AutoscalingDecision. This could let AutoscalingDecision be a final class and we avoid throwing UnsupportedOperationException below (and remove decisions() from single decision).\nAutoscaling deciders should not really have to choose between using a single or multi decision. The multi-decision is only for the \"framework\". MultipleAutoscalingDecision could be an inner class to AutoscalingService or co-located with the service.\nI know this is contrary to lots of other code, so please consider this optional.", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396377951", "createdAt": "2020-03-23T11:19:45Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecision.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public abstract class AutoscalingDecision implements ToXContent, Writeable {\n+\n+    public abstract String name();\n+\n+    public abstract Type type();\n+\n+    public abstract String reason();\n+\n+    public abstract Collection<? extends AutoscalingDecision> decisions();\n+\n+    public static class SingleAutoscalingDecision extends AutoscalingDecision {\n+\n+        private final String name;\n+\n+        @Override\n+        public String name() {\n+            return name;\n+        }\n+\n+        private final Type type;\n+\n+        @Override\n+        public Type type() {\n+            return type;\n+        }\n+\n+        private final String reason;\n+\n+        @Override\n+        public String reason() {\n+            return reason;\n+        }\n+\n+        @Override\n+        public Collection<? extends AutoscalingDecision> decisions() {\n+            return List.of(this);\n+        }\n+\n+        public SingleAutoscalingDecision(final String name, final Type type, final String reason) {\n+            this.name = Objects.requireNonNull(name);\n+            this.type = Objects.requireNonNull(type);\n+            this.reason = Objects.requireNonNull(reason);\n+        }\n+\n+        public SingleAutoscalingDecision(final StreamInput in) throws IOException {\n+            this.name = in.readString();\n+            this.type = Type.readFrom(in);\n+            this.reason = in.readString();\n+        }\n+\n+        @Override\n+        public void writeTo(final StreamOutput out) throws IOException {\n+            out.writeString(name);\n+            type.writeTo(out);\n+            out.writeString(reason);\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {\n+            builder.startObject();\n+            {\n+                builder.field(\"name\", name);\n+                builder.field(\"type\", type);\n+                builder.field(\"reason\", reason);\n+            }\n+            builder.endObject();\n+            return builder;\n+        }\n+\n+        @Override\n+        public boolean equals(final Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            final SingleAutoscalingDecision that = (SingleAutoscalingDecision) o;\n+            return name.equals(that.name) && type == that.type && reason.equals(that.reason);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(name, type, reason);\n+        }\n+\n+    }\n+\n+    public static class MultipleAutoscalingDecision extends AutoscalingDecision {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c3578baa6852e74f43166d0eac5d713b32eb5f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4MTM0Mw==", "bodyText": "I think this should be just two fields \"id\" and \"decision\"? AFAICS, this will result in:\ndecisions : [\n  {\n     \"key1\" : { ... decision1 ... }\n  },\n  {\n     \"key2\" : { ... decision2 ... }\n  }\n]\n\nwhich seems to follow both the array and map pattern?", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396381343", "createdAt": "2020-03-23T11:25:57Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/GetAutoscalingDecisionAction.java", "diffHunk": "@@ -60,24 +65,37 @@ public XContentBuilder toXContent(final XContentBuilder builder, final Params pa\n \n     public static class Response extends ActionResponse implements ToXContentObject {\n \n-        public Response() {\n+        private final SortedMap<String, AutoscalingDecision.MultipleAutoscalingDecision> decisions;\n \n+        public Response(final SortedMap<String, AutoscalingDecision.MultipleAutoscalingDecision> decisions) {\n+            this.decisions = Objects.requireNonNull(decisions);\n         }\n \n         public Response(final StreamInput in) throws IOException {\n             super(in);\n+            decisions = new TreeMap<>(in.readMap(StreamInput::readString, AutoscalingDecision.MultipleAutoscalingDecision::new));\n         }\n \n         @Override\n-        public void writeTo(final StreamOutput out) {\n-\n+        public void writeTo(final StreamOutput out) throws IOException {\n+            out.writeMap(decisions, StreamOutput::writeString, (o, decision) -> decision.writeTo(o));\n         }\n \n         @Override\n         public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {\n             builder.startObject();\n             {\n-\n+                builder.startArray(\"decisions\");\n+                {\n+                    for (final Map.Entry<String, AutoscalingDecision.MultipleAutoscalingDecision> decision : decisions.entrySet()) {\n+                        builder.startObject();\n+                        {\n+                            builder.field(decision.getKey(), decision.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c3578baa6852e74f43166d0eac5d713b32eb5f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4Njk2OQ==", "bodyText": "I think the names were swapped between this and the \"down\" test?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testMultipleAutoscalingDecisionTypeUp() {\n          \n          \n            \n                public void testMultipleAutoscalingDecisionTypeDown() {", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396386969", "createdAt": "2020-03-23T11:36:45Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.common.Randomness;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingDecision.SingleAutoscalingDecision;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class AutoscalingDecisionTests extends AutoscalingTestCase {\n+\n+    public void testSingleAutoscalingDecisionType() {\n+        final AutoscalingDecision.Type type = randomFrom(AutoscalingDecision.Type.values());\n+        final SingleAutoscalingDecision decision = randomAutoscalingDecisionOfType(type);\n+        assertThat(decision.type(), equalTo(type));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeUp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c3578baa6852e74f43166d0eac5d713b32eb5f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NzE1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testMultipleAutoscalingDecisionTypeDown() {\n          \n          \n            \n                public void testMultipleAutoscalingDecisionTypeUp() {", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396387153", "createdAt": "2020-03-23T11:37:10Z", "author": {"login": "henningandersen"}, "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.common.Randomness;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingDecision.SingleAutoscalingDecision;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class AutoscalingDecisionTests extends AutoscalingTestCase {\n+\n+    public void testSingleAutoscalingDecisionType() {\n+        final AutoscalingDecision.Type type = randomFrom(AutoscalingDecision.Type.values());\n+        final SingleAutoscalingDecision decision = randomAutoscalingDecisionOfType(type);\n+        assertThat(decision.type(), equalTo(type));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeUp() {\n+        final int numberOfDecisions = 1 + randomIntBetween(1, 8);\n+        final List<SingleAutoscalingDecision> decisions = new ArrayList<>(numberOfDecisions);\n+        for (int i = 0; i < numberOfDecisions; i++) {\n+            decisions.add(randomAutoscalingDecisionOfType(AutoscalingDecision.Type.SCALE_DOWN));\n+        }\n+        final AutoscalingDecision.MultipleAutoscalingDecision decision = new AutoscalingDecision.MultipleAutoscalingDecision(decisions);\n+        assertThat(decision.type(), equalTo(AutoscalingDecision.Type.SCALE_DOWN));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeNo() {\n+        final int numberOfDownDecisions = randomIntBetween(0, 8);\n+        final int numberOfNoDecisions = randomIntBetween(1, 8);\n+        final List<SingleAutoscalingDecision> decisions = new ArrayList<>(numberOfDownDecisions + numberOfNoDecisions);\n+        for (int i = 0; i < numberOfDownDecisions; i++) {\n+            decisions.add(randomAutoscalingDecisionOfType(AutoscalingDecision.Type.SCALE_DOWN));\n+        }\n+        for (int i = 0; i < numberOfNoDecisions; i++) {\n+            decisions.add(randomAutoscalingDecisionOfType(AutoscalingDecision.Type.NO_SCALE));\n+        }\n+        Randomness.shuffle(decisions);\n+        final AutoscalingDecision.MultipleAutoscalingDecision decision = new AutoscalingDecision.MultipleAutoscalingDecision(decisions);\n+        assertThat(decision.type(), equalTo(AutoscalingDecision.Type.NO_SCALE));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeDown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c3578baa6852e74f43166d0eac5d713b32eb5f"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf3d389f75457eb05cb7717aad1160f3eb898eb", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/4bf3d389f75457eb05cb7717aad1160f3eb898eb", "committedDate": "2020-03-23T21:13:40Z", "message": "Update x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n\nCo-Authored-By: Henning Andersen <33268011+henningandersen@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "737ca962f2287dad933f4c6edad9ce2cbb0705d8", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/737ca962f2287dad933f4c6edad9ce2cbb0705d8", "committedDate": "2020-03-23T21:13:47Z", "message": "Update x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n\nCo-Authored-By: Henning Andersen <33268011+henningandersen@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58c00f0e5488920e8bf6b739b931be0b61d5cdb", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/f58c00f0e5488920e8bf6b739b931be0b61d5cdb", "committedDate": "2020-03-23T21:56:23Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "819694b96e19509b1388719915390fae961afb66", "author": {"user": {"login": "jasontedor", "name": "Jason Tedor"}}, "url": "https://github.com/elastic/elasticsearch/commit/819694b96e19509b1388719915390fae961afb66", "committedDate": "2020-03-23T22:31:41Z", "message": "Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94f971368f36b0874aa66b6ae1ff98593e39f0d0", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/94f971368f36b0874aa66b6ae1ff98593e39f0d0", "committedDate": "2020-03-24T01:24:09Z", "message": "Merge branch 'master' into autoscaling-decisions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1759, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}