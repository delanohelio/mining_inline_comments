{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NTc3NTI0", "number": 64762, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNTo1NTozNlrOE4-Mgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNjowMjoxN1rOE4-OmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTc0NzIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNTo1NTozNlrOHzL2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTo1Nzo0MlrOHzpH5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQzMzU0NQ==", "bodyText": "++ to not having a non-void method that is also passed an ActionListener. Maybe wrap Exception with an Optional<> ? Nothing much changes but I think it captures the fact that the Tuple.v2() might contain an exception  better?", "url": "https://github.com/elastic/elasticsearch/pull/64762#discussion_r523433545", "createdAt": "2020-11-14T15:55:36Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenAction.java", "diffHunk": "@@ -101,23 +107,23 @@ private void authenticateAndCreateToken(GrantType grantType, CreateTokenRequest\n         }\n     }\n \n-    private AuthenticationToken extractAuthenticationToken(GrantType grantType, CreateTokenRequest request,\n-            ActionListener<CreateTokenResponse> listener) {\n+    private Tuple<AuthenticationToken, Exception> extractAuthenticationToken(GrantType grantType, CreateTokenRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6d262bfed38e5e6a3ebc65eb47dbe996e5a8af"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkxMzE5MQ==", "bodyText": "Updated to wrap the exception in an Optional.", "url": "https://github.com/elastic/elasticsearch/pull/64762#discussion_r523913191", "createdAt": "2020-11-16T05:57:42Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenAction.java", "diffHunk": "@@ -101,23 +107,23 @@ private void authenticateAndCreateToken(GrantType grantType, CreateTokenRequest\n         }\n     }\n \n-    private AuthenticationToken extractAuthenticationToken(GrantType grantType, CreateTokenRequest request,\n-            ActionListener<CreateTokenResponse> listener) {\n+    private Tuple<AuthenticationToken, Exception> extractAuthenticationToken(GrantType grantType, CreateTokenRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQzMzU0NQ=="}, "originalCommit": {"oid": "bd6d262bfed38e5e6a3ebc65eb47dbe996e5a8af"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTc1MDMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenActionTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNTo1OTozOFrOHzL3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTo1ODo1NFrOHzpI2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQzMzkxMA==", "bodyText": "Maybe a random short string here instead of hardcoding the string that this was reported with?", "url": "https://github.com/elastic/elasticsearch/pull/64762#discussion_r523433910", "createdAt": "2020-11-14T15:59:38Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenActionTests.java", "diffHunk": "@@ -267,4 +269,25 @@ public void testKerberosGrantTypeCreatesWithRefreshToken() throws Exception {\n             assertNotNull(sourceMap.get(\"refresh_token\"));\n         }\n     }\n+\n+    public void testKerberosGrantTypeWillFailOnBase64DecodeError() throws Exception {\n+        final TokenService tokenService = new TokenService(SETTINGS, Clock.systemUTC(), client, license, securityContext,\n+            securityIndex, securityIndex, clusterService);\n+        Authentication authentication = new Authentication(new User(\"joe\"), new Authentication.RealmRef(\"realm\", \"type\", \"node\"), null);\n+        authentication.writeToContext(threadPool.getThreadContext());\n+\n+        final TransportCreateTokenAction action = new TransportCreateTokenAction(threadPool,\n+            mock(TransportService.class), new ActionFilters(Collections.emptySet()), tokenService,\n+            authenticationService, securityContext);\n+        final CreateTokenRequest createTokenRequest = new CreateTokenRequest();\n+        createTokenRequest.setGrantType(\"_kerberos\");\n+        createTokenRequest.setKerberosTicket(new SecureString(\"(:I\".toCharArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6d262bfed38e5e6a3ebc65eb47dbe996e5a8af"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkxMzQzNA==", "bodyText": "It's a bit tricky to have a great randomness for an invalid base64 string. I took a simple approach to just random from all printable invalid base64 characters.", "url": "https://github.com/elastic/elasticsearch/pull/64762#discussion_r523913434", "createdAt": "2020-11-16T05:58:54Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenActionTests.java", "diffHunk": "@@ -267,4 +269,25 @@ public void testKerberosGrantTypeCreatesWithRefreshToken() throws Exception {\n             assertNotNull(sourceMap.get(\"refresh_token\"));\n         }\n     }\n+\n+    public void testKerberosGrantTypeWillFailOnBase64DecodeError() throws Exception {\n+        final TokenService tokenService = new TokenService(SETTINGS, Clock.systemUTC(), client, license, securityContext,\n+            securityIndex, securityIndex, clusterService);\n+        Authentication authentication = new Authentication(new User(\"joe\"), new Authentication.RealmRef(\"realm\", \"type\", \"node\"), null);\n+        authentication.writeToContext(threadPool.getThreadContext());\n+\n+        final TransportCreateTokenAction action = new TransportCreateTokenAction(threadPool,\n+            mock(TransportService.class), new ActionFilters(Collections.emptySet()), tokenService,\n+            authenticationService, securityContext);\n+        final CreateTokenRequest createTokenRequest = new CreateTokenRequest();\n+        createTokenRequest.setGrantType(\"_kerberos\");\n+        createTokenRequest.setKerberosTicket(new SecureString(\"(:I\".toCharArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQzMzkxMA=="}, "originalCommit": {"oid": "bd6d262bfed38e5e6a3ebc65eb47dbe996e5a8af"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTc1MjU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenActionTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNjowMjoxN1rOHzL4vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTo1OToxN1rOHzpJOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQzNDE3NQ==", "bodyText": "We could wrap this in an `assertListenerIsOnlyCalledOnce", "url": "https://github.com/elastic/elasticsearch/pull/64762#discussion_r523434175", "createdAt": "2020-11-14T16:02:17Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenActionTests.java", "diffHunk": "@@ -267,4 +269,25 @@ public void testKerberosGrantTypeCreatesWithRefreshToken() throws Exception {\n             assertNotNull(sourceMap.get(\"refresh_token\"));\n         }\n     }\n+\n+    public void testKerberosGrantTypeWillFailOnBase64DecodeError() throws Exception {\n+        final TokenService tokenService = new TokenService(SETTINGS, Clock.systemUTC(), client, license, securityContext,\n+            securityIndex, securityIndex, clusterService);\n+        Authentication authentication = new Authentication(new User(\"joe\"), new Authentication.RealmRef(\"realm\", \"type\", \"node\"), null);\n+        authentication.writeToContext(threadPool.getThreadContext());\n+\n+        final TransportCreateTokenAction action = new TransportCreateTokenAction(threadPool,\n+            mock(TransportService.class), new ActionFilters(Collections.emptySet()), tokenService,\n+            authenticationService, securityContext);\n+        final CreateTokenRequest createTokenRequest = new CreateTokenRequest();\n+        createTokenRequest.setGrantType(\"_kerberos\");\n+        createTokenRequest.setKerberosTicket(new SecureString(\"(:I\".toCharArray()));\n+\n+        PlainActionFuture<CreateTokenResponse> tokenResponseFuture = new PlainActionFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6d262bfed38e5e6a3ebc65eb47dbe996e5a8af"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkxMzUyOQ==", "bodyText": "Thanks. This is a nice addition to the assertions.", "url": "https://github.com/elastic/elasticsearch/pull/64762#discussion_r523913529", "createdAt": "2020-11-16T05:59:17Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenActionTests.java", "diffHunk": "@@ -267,4 +269,25 @@ public void testKerberosGrantTypeCreatesWithRefreshToken() throws Exception {\n             assertNotNull(sourceMap.get(\"refresh_token\"));\n         }\n     }\n+\n+    public void testKerberosGrantTypeWillFailOnBase64DecodeError() throws Exception {\n+        final TokenService tokenService = new TokenService(SETTINGS, Clock.systemUTC(), client, license, securityContext,\n+            securityIndex, securityIndex, clusterService);\n+        Authentication authentication = new Authentication(new User(\"joe\"), new Authentication.RealmRef(\"realm\", \"type\", \"node\"), null);\n+        authentication.writeToContext(threadPool.getThreadContext());\n+\n+        final TransportCreateTokenAction action = new TransportCreateTokenAction(threadPool,\n+            mock(TransportService.class), new ActionFilters(Collections.emptySet()), tokenService,\n+            authenticationService, securityContext);\n+        final CreateTokenRequest createTokenRequest = new CreateTokenRequest();\n+        createTokenRequest.setGrantType(\"_kerberos\");\n+        createTokenRequest.setKerberosTicket(new SecureString(\"(:I\".toCharArray()));\n+\n+        PlainActionFuture<CreateTokenResponse> tokenResponseFuture = new PlainActionFuture<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQzNDE3NQ=="}, "originalCommit": {"oid": "bd6d262bfed38e5e6a3ebc65eb47dbe996e5a8af"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3140, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}