{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ3MDI2MjM0", "number": 66895, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzoyNzo1MlrOFKIj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDowMDo0NFrOFKKWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTcwMzQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzoyNzo1MlrOIMxzNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzoyNzo1MlrOIMxzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2OTc1MA==", "bodyText": "Making AggregationContext Releasable lets us free the preallocated breaker after freeing all of the aggs without adding complexity to SearchContext.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550269750", "createdAt": "2020-12-30T17:27:52Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -63,7 +66,7 @@\n  * this is {@code abstract} so that tests can build it without creating the\n  * massing {@link QueryShardContext}.\n  */\n-public abstract class AggregationContext {\n+public abstract class AggregationContext implements Releasable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4835345d6ee3ce3e99aa22f599f9f00f974565"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTkyNjQyOnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/action/search/TransportSearchIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToyMzo0MlrOIMzwcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzo1OToxN1rOINypNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMTgxMA==", "bodyText": "Why do we change this to a null here?", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550301810", "createdAt": "2020-12-30T19:23:42Z", "author": {"login": "not-napoleon"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/action/search/TransportSearchIT.java", "diffHunk": "@@ -567,13 +572,13 @@ public Aggregator subAggregator(String name) {\n         @Override\n         public InternalAggregation[] buildAggregations(long[] owningBucketOrds) throws IOException {\n             return new InternalAggregation[] {\n-                new InternalMax(name(), Double.NaN, DocValueFormat.RAW, Collections.emptyMap())\n+                buildEmptyAggregation()\n             };\n         }\n \n         @Override\n         public InternalAggregation buildEmptyAggregation() {\n-            return new InternalMax(name(), Double.NaN, DocValueFormat.RAW, Collections.emptyMap());\n+            return new InternalMax(name(), Double.NaN, DocValueFormat.RAW, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzMjE1MQ==", "bodyText": "I don't think I had to and on reflection I'll change it back. null here is actually more like what we do in production. emptyMap is more like when I user sends an empty meta.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r551332151", "createdAt": "2021-01-04T13:59:17Z", "author": {"login": "nik9000"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/action/search/TransportSearchIT.java", "diffHunk": "@@ -567,13 +572,13 @@ public Aggregator subAggregator(String name) {\n         @Override\n         public InternalAggregation[] buildAggregations(long[] owningBucketOrds) throws IOException {\n             return new InternalAggregation[] {\n-                new InternalMax(name(), Double.NaN, DocValueFormat.RAW, Collections.emptyMap())\n+                buildEmptyAggregation()\n             };\n         }\n \n         @Override\n         public InternalAggregation buildEmptyAggregation() {\n-            return new InternalMax(name(), Double.NaN, DocValueFormat.RAW, Collections.emptyMap());\n+            return new InternalMax(name(), Double.NaN, DocValueFormat.RAW, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMTgxMA=="}, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTkyODY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToyNDo1NFrOIMzxvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToyNDo1NFrOIMzxvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMjE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Use this when you know you'll be allocating many small\n          \n          \n            \n             * Use this when you know you'll be allocating many small bits of memory.\n          \n      \n    \n    \n  \n\nor something like that.  Just a dangling sentence fragment right now.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550302142", "createdAt": "2020-12-30T19:24:54Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.breaker;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerStats;\n+\n+/**\n+ * {@link CircuitBreakerService} that preallocates some bytes on construction.\n+ * Use this when you know you'll be allocating many small", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTk0NzgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTozNDo0NlrOIMz8Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoxOTo0NlrOINzUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNDg0Mg==", "bodyText": "Isn't this always going to be true, since three lines previous, we checked that newUsed > preallocated?  Nothing involved is volatile, right?", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550304842", "createdAt": "2020-12-30T19:34:46Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.breaker;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerStats;\n+\n+/**\n+ * {@link CircuitBreakerService} that preallocates some bytes on construction.\n+ * Use this when you know you'll be allocating many small\n+ */\n+public class PreallocatedCircuitBreakerService extends CircuitBreakerService implements Releasable {\n+    private final CircuitBreakerService next;\n+    private final PreallocedCircuitBreaker preallocated;\n+\n+    public PreallocatedCircuitBreakerService(\n+        CircuitBreakerService next,\n+        String breakerToPreallocate,\n+        long bytesToPreallocate,\n+        String label\n+    ) {\n+        if (bytesToPreallocate <= 0) {\n+            throw new IllegalArgumentException(\"can't preallocate negative or zero bytes but got [\" + bytesToPreallocate + \"]\");\n+        }\n+        CircuitBreaker nextBreaker = next.getBreaker(breakerToPreallocate);\n+        nextBreaker.addEstimateBytesAndMaybeBreak(bytesToPreallocate, \"preallocate[\" + label + \"]\");\n+        this.next = next;\n+        this.preallocated = new PreallocedCircuitBreaker(nextBreaker, bytesToPreallocate);\n+    }\n+\n+    @Override\n+    public CircuitBreaker getBreaker(String name) {\n+        if (name.equals(preallocated.getName())) {\n+            return preallocated;\n+        }\n+        return next.getBreaker(name);\n+    }\n+\n+    @Override\n+    public AllCircuitBreakerStats stats() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public CircuitBreakerStats stats(String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void close() {\n+        preallocated.close();\n+    }\n+\n+    /**\n+     * The preallocated breaker.\n+     * <p>\n+     * This breaker operates in two states:\n+     * <ol>\n+     * <li>We've used fewer bytes than we've preallocated.\n+     * <li>We've used all of the preallocated bytes.\n+     * </ol>\n+     * <p>\n+     * If we're in the \"used fewer bytes\" state than we've allocated then\n+     * allocating new bytes just adds to\n+     * {@link PreallocedCircuitBreaker#preallocationUsed}, maxing out at\n+     * {@link PreallocedCircuitBreaker#preallocated}. If we max\n+     * out we irreversibly switch to \"used all\" state. In that state any\n+     * additional allocations are passed directly to the underlying breaker.\n+     * <p>\n+     * De-allocating is just allocating a negative number of bytes. De-allocating\n+     * can not transition us from the \"used all\" state back into the\n+     * \"used fewer bytes\" state. It is a one way trip. Once we're in the\n+     * \"used all\" state all de-allocates are done directly on the underlying\n+     * breaker. So well behaved callers will naturally de-allocate everything.\n+     * <p>\n+     * {@link PreallocedCircuitBreaker#close()} is only used to de-allocate\n+     * bytes from the underlying breaker if we're still in the \"used fewer bytes\"\n+     * state. There is nothing to de-allocate if we are in the \"used all\" state. \n+     */\n+    private static class PreallocedCircuitBreaker implements CircuitBreaker, Releasable {\n+        private final CircuitBreaker next;\n+        private final long preallocated;\n+        private long preallocationUsed;\n+        private boolean closed;\n+\n+        PreallocedCircuitBreaker(CircuitBreaker next, long preallocated) {\n+            this.next = next;\n+            this.preallocated = preallocated;\n+        }\n+\n+        @Override\n+        public void circuitBreak(String fieldName, long bytesNeeded) {\n+            next.circuitBreak(fieldName, bytesNeeded);\n+        }\n+\n+        @Override\n+        public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n+            if (closed) {\n+                throw new IllegalStateException(\"already closed\");\n+            }\n+            if (preallocationUsed == preallocated) {\n+                return next.addEstimateBytesAndMaybeBreak(bytes, label);\n+            }\n+            long newUsed = preallocationUsed + bytes;\n+            if (newUsed > preallocated) {\n+                preallocationUsed = preallocated;\n+                long toAllocate = newUsed - preallocated;\n+                if (toAllocate > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzMzgzMQ==", "bodyText": "Why did I have this........ Now I've got to reread and see what I was thinking.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r551333831", "createdAt": "2021-01-04T14:02:35Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.breaker;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerStats;\n+\n+/**\n+ * {@link CircuitBreakerService} that preallocates some bytes on construction.\n+ * Use this when you know you'll be allocating many small\n+ */\n+public class PreallocatedCircuitBreakerService extends CircuitBreakerService implements Releasable {\n+    private final CircuitBreakerService next;\n+    private final PreallocedCircuitBreaker preallocated;\n+\n+    public PreallocatedCircuitBreakerService(\n+        CircuitBreakerService next,\n+        String breakerToPreallocate,\n+        long bytesToPreallocate,\n+        String label\n+    ) {\n+        if (bytesToPreallocate <= 0) {\n+            throw new IllegalArgumentException(\"can't preallocate negative or zero bytes but got [\" + bytesToPreallocate + \"]\");\n+        }\n+        CircuitBreaker nextBreaker = next.getBreaker(breakerToPreallocate);\n+        nextBreaker.addEstimateBytesAndMaybeBreak(bytesToPreallocate, \"preallocate[\" + label + \"]\");\n+        this.next = next;\n+        this.preallocated = new PreallocedCircuitBreaker(nextBreaker, bytesToPreallocate);\n+    }\n+\n+    @Override\n+    public CircuitBreaker getBreaker(String name) {\n+        if (name.equals(preallocated.getName())) {\n+            return preallocated;\n+        }\n+        return next.getBreaker(name);\n+    }\n+\n+    @Override\n+    public AllCircuitBreakerStats stats() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public CircuitBreakerStats stats(String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void close() {\n+        preallocated.close();\n+    }\n+\n+    /**\n+     * The preallocated breaker.\n+     * <p>\n+     * This breaker operates in two states:\n+     * <ol>\n+     * <li>We've used fewer bytes than we've preallocated.\n+     * <li>We've used all of the preallocated bytes.\n+     * </ol>\n+     * <p>\n+     * If we're in the \"used fewer bytes\" state than we've allocated then\n+     * allocating new bytes just adds to\n+     * {@link PreallocedCircuitBreaker#preallocationUsed}, maxing out at\n+     * {@link PreallocedCircuitBreaker#preallocated}. If we max\n+     * out we irreversibly switch to \"used all\" state. In that state any\n+     * additional allocations are passed directly to the underlying breaker.\n+     * <p>\n+     * De-allocating is just allocating a negative number of bytes. De-allocating\n+     * can not transition us from the \"used all\" state back into the\n+     * \"used fewer bytes\" state. It is a one way trip. Once we're in the\n+     * \"used all\" state all de-allocates are done directly on the underlying\n+     * breaker. So well behaved callers will naturally de-allocate everything.\n+     * <p>\n+     * {@link PreallocedCircuitBreaker#close()} is only used to de-allocate\n+     * bytes from the underlying breaker if we're still in the \"used fewer bytes\"\n+     * state. There is nothing to de-allocate if we are in the \"used all\" state. \n+     */\n+    private static class PreallocedCircuitBreaker implements CircuitBreaker, Releasable {\n+        private final CircuitBreaker next;\n+        private final long preallocated;\n+        private long preallocationUsed;\n+        private boolean closed;\n+\n+        PreallocedCircuitBreaker(CircuitBreaker next, long preallocated) {\n+            this.next = next;\n+            this.preallocated = preallocated;\n+        }\n+\n+        @Override\n+        public void circuitBreak(String fieldName, long bytesNeeded) {\n+            next.circuitBreak(fieldName, bytesNeeded);\n+        }\n+\n+        @Override\n+        public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n+            if (closed) {\n+                throw new IllegalStateException(\"already closed\");\n+            }\n+            if (preallocationUsed == preallocated) {\n+                return next.addEstimateBytesAndMaybeBreak(bytes, label);\n+            }\n+            long newUsed = preallocationUsed + bytes;\n+            if (newUsed > preallocated) {\n+                preallocationUsed = preallocated;\n+                long toAllocate = newUsed - preallocated;\n+                if (toAllocate > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNDg0Mg=="}, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0MzI2Mw==", "bodyText": "Yeah. When I remove the if > 0 everything just works too. I imagine this is a left over from weird thinking. I mean, math works the way we think it does.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r551343263", "createdAt": "2021-01-04T14:19:46Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.breaker;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerStats;\n+\n+/**\n+ * {@link CircuitBreakerService} that preallocates some bytes on construction.\n+ * Use this when you know you'll be allocating many small\n+ */\n+public class PreallocatedCircuitBreakerService extends CircuitBreakerService implements Releasable {\n+    private final CircuitBreakerService next;\n+    private final PreallocedCircuitBreaker preallocated;\n+\n+    public PreallocatedCircuitBreakerService(\n+        CircuitBreakerService next,\n+        String breakerToPreallocate,\n+        long bytesToPreallocate,\n+        String label\n+    ) {\n+        if (bytesToPreallocate <= 0) {\n+            throw new IllegalArgumentException(\"can't preallocate negative or zero bytes but got [\" + bytesToPreallocate + \"]\");\n+        }\n+        CircuitBreaker nextBreaker = next.getBreaker(breakerToPreallocate);\n+        nextBreaker.addEstimateBytesAndMaybeBreak(bytesToPreallocate, \"preallocate[\" + label + \"]\");\n+        this.next = next;\n+        this.preallocated = new PreallocedCircuitBreaker(nextBreaker, bytesToPreallocate);\n+    }\n+\n+    @Override\n+    public CircuitBreaker getBreaker(String name) {\n+        if (name.equals(preallocated.getName())) {\n+            return preallocated;\n+        }\n+        return next.getBreaker(name);\n+    }\n+\n+    @Override\n+    public AllCircuitBreakerStats stats() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public CircuitBreakerStats stats(String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void close() {\n+        preallocated.close();\n+    }\n+\n+    /**\n+     * The preallocated breaker.\n+     * <p>\n+     * This breaker operates in two states:\n+     * <ol>\n+     * <li>We've used fewer bytes than we've preallocated.\n+     * <li>We've used all of the preallocated bytes.\n+     * </ol>\n+     * <p>\n+     * If we're in the \"used fewer bytes\" state than we've allocated then\n+     * allocating new bytes just adds to\n+     * {@link PreallocedCircuitBreaker#preallocationUsed}, maxing out at\n+     * {@link PreallocedCircuitBreaker#preallocated}. If we max\n+     * out we irreversibly switch to \"used all\" state. In that state any\n+     * additional allocations are passed directly to the underlying breaker.\n+     * <p>\n+     * De-allocating is just allocating a negative number of bytes. De-allocating\n+     * can not transition us from the \"used all\" state back into the\n+     * \"used fewer bytes\" state. It is a one way trip. Once we're in the\n+     * \"used all\" state all de-allocates are done directly on the underlying\n+     * breaker. So well behaved callers will naturally de-allocate everything.\n+     * <p>\n+     * {@link PreallocedCircuitBreaker#close()} is only used to de-allocate\n+     * bytes from the underlying breaker if we're still in the \"used fewer bytes\"\n+     * state. There is nothing to de-allocate if we are in the \"used all\" state. \n+     */\n+    private static class PreallocedCircuitBreaker implements CircuitBreaker, Releasable {\n+        private final CircuitBreaker next;\n+        private final long preallocated;\n+        private long preallocationUsed;\n+        private boolean closed;\n+\n+        PreallocedCircuitBreaker(CircuitBreaker next, long preallocated) {\n+            this.next = next;\n+            this.preallocated = preallocated;\n+        }\n+\n+        @Override\n+        public void circuitBreak(String fieldName, long bytesNeeded) {\n+            next.circuitBreak(fieldName, bytesNeeded);\n+        }\n+\n+        @Override\n+        public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n+            if (closed) {\n+                throw new IllegalStateException(\"already closed\");\n+            }\n+            if (preallocationUsed == preallocated) {\n+                return next.addEstimateBytesAndMaybeBreak(bytes, label);\n+            }\n+            long newUsed = preallocationUsed + bytes;\n+            if (newUsed > preallocated) {\n+                preallocationUsed = preallocated;\n+                long toAllocate = newUsed - preallocated;\n+                if (toAllocate > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNDg0Mg=="}, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTk1ODMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTo0MDoxNFrOIM0CDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDoxMzoyMlrOIM0iwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNjMxOA==", "bodyText": "...That is a terrifying comment.  Maybe let's open an issue to drop the return value from this method?", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550306318", "createdAt": "2020-12-30T19:40:14Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.breaker;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerStats;\n+\n+/**\n+ * {@link CircuitBreakerService} that preallocates some bytes on construction.\n+ * Use this when you know you'll be allocating many small\n+ */\n+public class PreallocatedCircuitBreakerService extends CircuitBreakerService implements Releasable {\n+    private final CircuitBreakerService next;\n+    private final PreallocedCircuitBreaker preallocated;\n+\n+    public PreallocatedCircuitBreakerService(\n+        CircuitBreakerService next,\n+        String breakerToPreallocate,\n+        long bytesToPreallocate,\n+        String label\n+    ) {\n+        if (bytesToPreallocate <= 0) {\n+            throw new IllegalArgumentException(\"can't preallocate negative or zero bytes but got [\" + bytesToPreallocate + \"]\");\n+        }\n+        CircuitBreaker nextBreaker = next.getBreaker(breakerToPreallocate);\n+        nextBreaker.addEstimateBytesAndMaybeBreak(bytesToPreallocate, \"preallocate[\" + label + \"]\");\n+        this.next = next;\n+        this.preallocated = new PreallocedCircuitBreaker(nextBreaker, bytesToPreallocate);\n+    }\n+\n+    @Override\n+    public CircuitBreaker getBreaker(String name) {\n+        if (name.equals(preallocated.getName())) {\n+            return preallocated;\n+        }\n+        return next.getBreaker(name);\n+    }\n+\n+    @Override\n+    public AllCircuitBreakerStats stats() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public CircuitBreakerStats stats(String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void close() {\n+        preallocated.close();\n+    }\n+\n+    /**\n+     * The preallocated breaker.\n+     * <p>\n+     * This breaker operates in two states:\n+     * <ol>\n+     * <li>We've used fewer bytes than we've preallocated.\n+     * <li>We've used all of the preallocated bytes.\n+     * </ol>\n+     * <p>\n+     * If we're in the \"used fewer bytes\" state than we've allocated then\n+     * allocating new bytes just adds to\n+     * {@link PreallocedCircuitBreaker#preallocationUsed}, maxing out at\n+     * {@link PreallocedCircuitBreaker#preallocated}. If we max\n+     * out we irreversibly switch to \"used all\" state. In that state any\n+     * additional allocations are passed directly to the underlying breaker.\n+     * <p>\n+     * De-allocating is just allocating a negative number of bytes. De-allocating\n+     * can not transition us from the \"used all\" state back into the\n+     * \"used fewer bytes\" state. It is a one way trip. Once we're in the\n+     * \"used all\" state all de-allocates are done directly on the underlying\n+     * breaker. So well behaved callers will naturally de-allocate everything.\n+     * <p>\n+     * {@link PreallocedCircuitBreaker#close()} is only used to de-allocate\n+     * bytes from the underlying breaker if we're still in the \"used fewer bytes\"\n+     * state. There is nothing to de-allocate if we are in the \"used all\" state. \n+     */\n+    private static class PreallocedCircuitBreaker implements CircuitBreaker, Releasable {\n+        private final CircuitBreaker next;\n+        private final long preallocated;\n+        private long preallocationUsed;\n+        private boolean closed;\n+\n+        PreallocedCircuitBreaker(CircuitBreaker next, long preallocated) {\n+            this.next = next;\n+            this.preallocated = preallocated;\n+        }\n+\n+        @Override\n+        public void circuitBreak(String fieldName, long bytesNeeded) {\n+            next.circuitBreak(fieldName, bytesNeeded);\n+        }\n+\n+        @Override\n+        public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n+            if (closed) {\n+                throw new IllegalStateException(\"already closed\");\n+            }\n+            if (preallocationUsed == preallocated) {\n+                return next.addEstimateBytesAndMaybeBreak(bytes, label);\n+            }\n+            long newUsed = preallocationUsed + bytes;\n+            if (newUsed > preallocated) {\n+                preallocationUsed = preallocated;\n+                long toAllocate = newUsed - preallocated;\n+                if (toAllocate > 0) {\n+                    return next.addEstimateBytesAndMaybeBreak(toAllocate, label);\n+                }\n+                return 0;\n+            }\n+            // This is the fast case. No volatile reads or writes here, ma!\n+            preallocationUsed = newUsed;\n+            // We return garbage here but callers never use the result for anything interesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMxNDY5MA==", "bodyText": "Yeah. I feel like there are several \"perspectives\" on CircuitBreaker which might be useful to split up. The \"I'm allocating and deallocating stuff\" one. The \"how much is used and how many times has this tripped?\" one. There is kind of also a \"testing\" one. And that one is where the caller uses the result here. Maybe tests could just read the result rather than look at the percent. I'll take another look.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550314690", "createdAt": "2020-12-30T20:13:22Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/PreallocatedCircuitBreakerService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.breaker;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+import org.elasticsearch.indices.breaker.CircuitBreakerStats;\n+\n+/**\n+ * {@link CircuitBreakerService} that preallocates some bytes on construction.\n+ * Use this when you know you'll be allocating many small\n+ */\n+public class PreallocatedCircuitBreakerService extends CircuitBreakerService implements Releasable {\n+    private final CircuitBreakerService next;\n+    private final PreallocedCircuitBreaker preallocated;\n+\n+    public PreallocatedCircuitBreakerService(\n+        CircuitBreakerService next,\n+        String breakerToPreallocate,\n+        long bytesToPreallocate,\n+        String label\n+    ) {\n+        if (bytesToPreallocate <= 0) {\n+            throw new IllegalArgumentException(\"can't preallocate negative or zero bytes but got [\" + bytesToPreallocate + \"]\");\n+        }\n+        CircuitBreaker nextBreaker = next.getBreaker(breakerToPreallocate);\n+        nextBreaker.addEstimateBytesAndMaybeBreak(bytesToPreallocate, \"preallocate[\" + label + \"]\");\n+        this.next = next;\n+        this.preallocated = new PreallocedCircuitBreaker(nextBreaker, bytesToPreallocate);\n+    }\n+\n+    @Override\n+    public CircuitBreaker getBreaker(String name) {\n+        if (name.equals(preallocated.getName())) {\n+            return preallocated;\n+        }\n+        return next.getBreaker(name);\n+    }\n+\n+    @Override\n+    public AllCircuitBreakerStats stats() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public CircuitBreakerStats stats(String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void close() {\n+        preallocated.close();\n+    }\n+\n+    /**\n+     * The preallocated breaker.\n+     * <p>\n+     * This breaker operates in two states:\n+     * <ol>\n+     * <li>We've used fewer bytes than we've preallocated.\n+     * <li>We've used all of the preallocated bytes.\n+     * </ol>\n+     * <p>\n+     * If we're in the \"used fewer bytes\" state than we've allocated then\n+     * allocating new bytes just adds to\n+     * {@link PreallocedCircuitBreaker#preallocationUsed}, maxing out at\n+     * {@link PreallocedCircuitBreaker#preallocated}. If we max\n+     * out we irreversibly switch to \"used all\" state. In that state any\n+     * additional allocations are passed directly to the underlying breaker.\n+     * <p>\n+     * De-allocating is just allocating a negative number of bytes. De-allocating\n+     * can not transition us from the \"used all\" state back into the\n+     * \"used fewer bytes\" state. It is a one way trip. Once we're in the\n+     * \"used all\" state all de-allocates are done directly on the underlying\n+     * breaker. So well behaved callers will naturally de-allocate everything.\n+     * <p>\n+     * {@link PreallocedCircuitBreaker#close()} is only used to de-allocate\n+     * bytes from the underlying breaker if we're still in the \"used fewer bytes\"\n+     * state. There is nothing to de-allocate if we are in the \"used all\" state. \n+     */\n+    private static class PreallocedCircuitBreaker implements CircuitBreaker, Releasable {\n+        private final CircuitBreaker next;\n+        private final long preallocated;\n+        private long preallocationUsed;\n+        private boolean closed;\n+\n+        PreallocedCircuitBreaker(CircuitBreaker next, long preallocated) {\n+            this.next = next;\n+            this.preallocated = preallocated;\n+        }\n+\n+        @Override\n+        public void circuitBreak(String fieldName, long bytesNeeded) {\n+            next.circuitBreak(fieldName, bytesNeeded);\n+        }\n+\n+        @Override\n+        public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n+            if (closed) {\n+                throw new IllegalStateException(\"already closed\");\n+            }\n+            if (preallocationUsed == preallocated) {\n+                return next.addEstimateBytesAndMaybeBreak(bytes, label);\n+            }\n+            long newUsed = preallocationUsed + bytes;\n+            if (newUsed > preallocated) {\n+                preallocationUsed = preallocated;\n+                long toAllocate = newUsed - preallocated;\n+                if (toAllocate > 0) {\n+                    return next.addEstimateBytesAndMaybeBreak(toAllocate, label);\n+                }\n+                return 0;\n+            }\n+            // This is the fast case. No volatile reads or writes here, ma!\n+            preallocationUsed = newUsed;\n+            // We return garbage here but callers never use the result for anything interesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNjMxOA=="}, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTk3MTE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTo0Njo1N1rOIM0I_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTo0NzozOVrOIM0JhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwODA5NA==", "bodyText": "this ternary shouldn't be necessary, right?", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550308094", "createdAt": "2020-12-30T19:46:57Z", "author": {"login": "DJRickyB"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -277,12 +277,25 @@ public ProductionAggregationContext(\n             Supplier<Boolean> isCancelled\n         ) {\n             this.context = context;\n-            this.breakerService = new PreallocatedCircuitBreakerService(\n-                context.bigArrays().breakerService(),\n-                CircuitBreaker.REQUEST,\n-                bytesToPreallocate\n-            );\n-            this.bigArrays = context.bigArrays().withBreakerService(breakerService).withCircuitBreaking();\n+            if (bytesToPreallocate == 0) {\n+                /*\n+                 * Its possible if a bit strange for the aggregations to ask\n+                 * to preallocate 0 bytes. Mostly this is for testing other\n+                 * things, but we should honor it and just not preallocate\n+                 * anything. Setting the breakerService reference to null will\n+                 * cause us to skip it when we close this context.\n+                 */\n+                this.breakerService = null;\n+                this.bigArrays = context.bigArrays().withCircuitBreaking();\n+            } else {\n+                this.breakerService = bytesToPreallocate == 0 ? null : new PreallocatedCircuitBreakerService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwODE5Nw==", "bodyText": "Correct! A leftover.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550308197", "createdAt": "2020-12-30T19:47:28Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -277,12 +277,25 @@ public ProductionAggregationContext(\n             Supplier<Boolean> isCancelled\n         ) {\n             this.context = context;\n-            this.breakerService = new PreallocatedCircuitBreakerService(\n-                context.bigArrays().breakerService(),\n-                CircuitBreaker.REQUEST,\n-                bytesToPreallocate\n-            );\n-            this.bigArrays = context.bigArrays().withBreakerService(breakerService).withCircuitBreaking();\n+            if (bytesToPreallocate == 0) {\n+                /*\n+                 * Its possible if a bit strange for the aggregations to ask\n+                 * to preallocate 0 bytes. Mostly this is for testing other\n+                 * things, but we should honor it and just not preallocate\n+                 * anything. Setting the breakerService reference to null will\n+                 * cause us to skip it when we close this context.\n+                 */\n+                this.breakerService = null;\n+                this.bigArrays = context.bigArrays().withCircuitBreaking();\n+            } else {\n+                this.breakerService = bytesToPreallocate == 0 ? null : new PreallocatedCircuitBreakerService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwODA5NA=="}, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwODIyOQ==", "bodyText": "I'll zap it.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550308229", "createdAt": "2020-12-30T19:47:39Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -277,12 +277,25 @@ public ProductionAggregationContext(\n             Supplier<Boolean> isCancelled\n         ) {\n             this.context = context;\n-            this.breakerService = new PreallocatedCircuitBreakerService(\n-                context.bigArrays().breakerService(),\n-                CircuitBreaker.REQUEST,\n-                bytesToPreallocate\n-            );\n-            this.bigArrays = context.bigArrays().withBreakerService(breakerService).withCircuitBreaking();\n+            if (bytesToPreallocate == 0) {\n+                /*\n+                 * Its possible if a bit strange for the aggregations to ask\n+                 * to preallocate 0 bytes. Mostly this is for testing other\n+                 * things, but we should honor it and just not preallocate\n+                 * anything. Setting the breakerService reference to null will\n+                 * cause us to skip it when we close this context.\n+                 */\n+                this.breakerService = null;\n+                this.bigArrays = context.bigArrays().withCircuitBreaking();\n+            } else {\n+                this.breakerService = bytesToPreallocate == 0 ? null : new PreallocatedCircuitBreakerService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwODA5NA=="}, "originalCommit": {"oid": "e7a64a8cbaed18d45f2f55c0a347001aa5292582"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTk5NTcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDowMDo0NFrOIM0WmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDowMDo0NFrOIM0WmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMxMTU3Nw==", "bodyText": "This is a great comment.  I was literally about to ask why it would ever be 0.", "url": "https://github.com/elastic/elasticsearch/pull/66895#discussion_r550311577", "createdAt": "2020-12-30T20:00:44Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -243,36 +251,55 @@ public final AggregationUsageService getUsageService() {\n      */\n     public static class ProductionAggregationContext extends AggregationContext {\n         private final QueryShardContext context;\n+        private final PreallocatedCircuitBreakerService breakerService;\n         private final BigArrays bigArrays;\n         private final Query topLevelQuery;\n         private final AggregationProfiler profiler;\n         private final MultiBucketConsumer multiBucketConsumer;\n         private final Supplier<SubSearchContext> subSearchContextBuilder;\n-        private final Consumer<Aggregator> addReleasable;\n         private final BitsetFilterCache bitsetFilterCache;\n         private final int randomSeed;\n         private final LongSupplier relativeTimeInMillis;\n         private final Supplier<Boolean> isCancelled;\n \n+        private final List<Aggregator> releaseMe = new ArrayList<>();\n+\n         public ProductionAggregationContext(\n             QueryShardContext context,\n+            long bytesToPreallocate,\n             Query topLevelQuery,\n             @Nullable AggregationProfiler profiler,\n             MultiBucketConsumer multiBucketConsumer,\n             Supplier<SubSearchContext> subSearchContextBuilder,\n-            Consumer<Aggregator> addReleasable,\n             BitsetFilterCache bitsetFilterCache,\n             int randomSeed,\n             LongSupplier relativeTimeInMillis,\n             Supplier<Boolean> isCancelled\n         ) {\n             this.context = context;\n-            this.bigArrays = context.bigArrays().withCircuitBreaking();  // We can break in searches.\n+            if (bytesToPreallocate == 0) {\n+                /*\n+                 * Its possible if a bit strange for the aggregations to ask\n+                 * to preallocate 0 bytes. Mostly this is for testing other\n+                 * things, but we should honor it and just not preallocate\n+                 * anything. Setting the breakerService reference to null will\n+                 * cause us to skip it when we close this context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd4bc56c468c56b54c565113151226bf09f88b1"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4395, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}