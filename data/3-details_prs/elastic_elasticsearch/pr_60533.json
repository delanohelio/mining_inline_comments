{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMjk2MzYw", "number": 60533, "title": "Implement runtime script ips", "bodyText": "This implements the ip typed runtime fields. They share a fair bit\nwith string runtime fields but we represent them as a BytesRef\ncontaining 128 bits so that the comparisons all happen in the same way\nas Lucene's InetAddressPoint.", "createdAt": "2020-07-31T16:27:06Z", "url": "https://github.com/elastic/elasticsearch/pull/60533", "merged": true, "mergeCommit": {"oid": "e98dfcc889379fac83c3a881843d72f2dc3b3277"}, "closed": true, "closedAt": "2020-08-05T21:19:04Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6WyCFgH2gAyNDYwMjk2MzYwOjNkZjIwNzE1MTdmYzJhYTNiMjA0MWJkOWJlMGMzN2VmYjE3YzhlZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8AwbVAH2gAyNDYwMjk2MzYwOjIyYmRiNWNjMDdlMmJjYzE5MzcyZDEyZDg1YWJkMjM3YmExNjgwMjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3df2071517fc2aa3b2041bd9be0c37efb17c8ef7", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3df2071517fc2aa3b2041bd9be0c37efb17c8ef7", "committedDate": "2020-07-31T16:26:15Z", "message": "Implement runtime script ips\n\nThis implements the `ip` typed runtime fields. They share a fair bit\nwith `string` runtime fields but we represent them as a `BytesRef`\ncontaining 128 bits so that the comparisons all happen in the same way\nas Lucene's `InetAddressPoint`."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzA0MzUz", "url": "https://github.com/elastic/elasticsearch/pull/60533#pullrequestreview-459304353", "createdAt": "2020-07-31T16:27:53Z", "commit": {"oid": "3df2071517fc2aa3b2041bd9be0c37efb17c8ef7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoyNzo1M1rOG6OlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoyNzo1M1rOG6OlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwOTU1Mg==", "bodyText": "I'd like to grab this in a follow up because it is going to take some hacking to pass.", "url": "https://github.com/elastic/elasticsearch/pull/60533#discussion_r463709552", "createdAt": "2020-07-31T16:27:53Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/50_ip.yml", "diffHunk": "@@ -0,0 +1,126 @@\n+---\n+setup:\n+  - do:\n+      indices.create:\n+        index: http_logs\n+        body:\n+          settings:\n+            number_of_shards: 1\n+            number_of_replicas: 0\n+          mappings:\n+            properties:\n+              timestamp:\n+                type: date\n+              message:\n+                type: keyword\n+              ip:\n+                type: runtime_script\n+                runtime_type: ip\n+                script:\n+                  source: |\n+                    String m = doc[\"message\"].value;\n+                    int end = m.indexOf(\" \");\n+                    stringValue(m.substring(0, end));\n+              # Test fetching from _source\n+              ip_from_source:\n+                type: runtime_script\n+                runtime_type: ip\n+                script:\n+                  source: |\n+                    String m = source[\"message\"];\n+                    int end = m.indexOf(\" \");\n+                    stringValue(m.substring(0, end));\n+              # Test emitting many values\n+              ip_many:\n+                type: runtime_script\n+                runtime_type: ip\n+                script:\n+                  source: |\n+                    String m = doc[\"message\"].value;\n+                    int end = m.indexOf(\" \");\n+                    end = m.lastIndexOf(\".\", end);\n+                    String stem = m.substring(0, end + 1);\n+                    for (int i = 0; i < 5; i++) {\n+                      stringValue(stem + i);\n+                    }\n+  - do:\n+      bulk:\n+        index: http_logs\n+        refresh: true\n+        body: |\n+          {\"index\":{}}\n+          {\"timestamp\": \"1998-04-30T14:30:17-05:00\", \"message\" : \"40.135.0.0 - - [1998-04-30T14:30:17-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+          {\"index\":{}}\n+          {\"timestamp\": \"1998-04-30T14:30:53-05:00\", \"message\" : \"232.0.0.0 - - [1998-04-30T14:30:53-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+          {\"index\":{}}\n+          {\"timestamp\": \"1998-04-30T14:31:12-05:00\", \"message\" : \"26.1.0.0 - - [1998-04-30T14:31:12-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+          {\"index\":{}}\n+          {\"timestamp\": \"1998-04-30T14:31:19-05:00\", \"message\" : \"247.37.0.0 - - [1998-04-30T14:31:19-05:00] \\\"GET /french/splash_inet.html HTTP/1.0\\\" 200 3781\"}\n+          {\"index\":{}}\n+          {\"timestamp\": \"1998-04-30T14:31:22-05:00\", \"message\" : \"247.37.0.0 - - [1998-04-30T14:31:22-05:00] \\\"GET /images/hm_nbg.jpg HTTP/1.0\\\" 304 0\"}\n+          {\"index\":{}}\n+          {\"timestamp\": \"1998-04-30T14:31:27-05:00\", \"message\" : \"252.0.0.0 - - [1998-04-30T14:31:27-05:00] \\\"GET /images/hm_bg.jpg HTTP/1.0\\\" 200 24736\"}\n+\n+\n+---\n+\"get mapping\":\n+  - do:\n+      indices.get_mapping:\n+        index: http_logs\n+  - match: {http_logs.mappings.properties.ip.type: runtime_script }\n+  - match: {http_logs.mappings.properties.ip.runtime_type: ip }\n+  - match:\n+      http_logs.mappings.properties.ip.script.source: |\n+        String m = doc[\"message\"].value;\n+        int end = m.indexOf(\" \");\n+        stringValue(m.substring(0, end));\n+  - match: {http_logs.mappings.properties.ip.script.lang: painless }\n+\n+---\n+\"docvalue_fields\":\n+  - do:\n+      search:\n+        index: http_logs\n+        body:\n+          sort: timestamp\n+          docvalue_fields: [ip, ip_from_source, ip_many]\n+  - match: {hits.total.value: 6}\n+  - match: {hits.hits.0.fields.ip: [\"40.135.0.0\"] }\n+  - match: {hits.hits.0.fields.ip_from_source: [\"40.135.0.0\"] }\n+  - match:\n+      hits.hits.0.fields.ip_many:\n+        - 40.135.0.0\n+        - 40.135.0.1\n+        - 40.135.0.2\n+        - 40.135.0.3\n+        - 40.135.0.4\n+\n+---\n+\"terms agg\":\n+  - do:\n+      search:\n+        index: http_logs\n+        body:\n+          aggs:\n+            ip:\n+              terms:\n+                field: ip\n+  - match: {hits.total.value: 6}\n+  - match: {aggregations.ip.buckets.0.key: 247.37.0.0}\n+  - match: {aggregations.ip.buckets.0.doc_count: 2}\n+  - match: {aggregations.ip.buckets.1.key: 26.1.0.0}\n+  - match: {aggregations.ip.buckets.1.doc_count: 1}\n+\n+---\n+\"term query\":\n+  - do:\n+      search:\n+        index: http_logs\n+        body:\n+          query:\n+            term:\n+              ip: 252.0.0.0\n+  - match: {hits.total.value: 1}\n+  - match: {hits.hits.0._source.timestamp: 1998-04-30T14:31:27-05:00}\n+\n+# TODO tests for using the ip in a script. there is almost certainly whitelist \"fun\" here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df2071517fc2aa3b2041bd9be0c37efb17c8ef7"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMzIzODAz", "url": "https://github.com/elastic/elasticsearch/pull/60533#pullrequestreview-460323803", "createdAt": "2020-08-03T20:36:55Z", "commit": {"oid": "3df2071517fc2aa3b2041bd9be0c37efb17c8ef7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDozNjo1NVrOG7H5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDo0MDozNlrOG7IAYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0ODYyMQ==", "bodyText": "been thinking about these static methods that we are sharing here and there: should we have a better way to formalize the fact that runtime fields share some bits with their corresponding concrete field? e.g. should they share some base class or something along those lines? Or would it make any sense for runtime field type to extend its corresponding concrete field type? probably both are bad ideas, but probably good to look into what the alternatives are.", "url": "https://github.com/elastic/elasticsearch/pull/60533#discussion_r464648621", "createdAt": "2020-08-03T20:36:55Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java", "diffHunk": "@@ -221,6 +222,26 @@ public Query termsQuery(List<?> values, QueryShardContext context) {\n         @Override\n         public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {\n             failIfNotIndexed();\n+            return rangeQuery(\n+                lowerTerm,\n+                upperTerm,\n+                includeLower,\n+                includeUpper,\n+                (lower, upper) -> InetAddressPoint.newRangeQuery(name(), lower, upper)\n+            );\n+        }\n+\n+        /**\n+         * Processes query bounds into {@code long}s and delegates the\n+         * provided {@code builder} to build a range query.\n+         */\n+        public static Query rangeQuery(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df2071517fc2aa3b2041bd9be0c37efb17c8ef7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0ODkyNQ==", "bodyText": "s/most/must ?", "url": "https://github.com/elastic/elasticsearch/pull/60533#discussion_r464648925", "createdAt": "2020-08-03T20:37:35Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/IpScriptFieldScript.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields;\n+\n+import org.apache.lucene.document.InetAddressPoint;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.util.ArrayUtil;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.index.mapper.IpFieldMapper;\n+import org.elasticsearch.painless.spi.Whitelist;\n+import org.elasticsearch.painless.spi.WhitelistLoader;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptFactory;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Script producing IP addresses. Unlike the other {@linkplain AbstractScriptFieldScript}s\n+ * which deal with their native java objects this converts its values to the same format\n+ * that Lucene uses to store its fields, {@link InetAddressPoint}. There are a few compelling\n+ * reasons to do this:\n+ * <ul>\n+ * <li>{@link Inet4Address}es and {@link Inet6Address} are not comparable with one another.\n+ * That is correct in some contexts, but not for our queries. Our queries most consider the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df2071517fc2aa3b2041bd9be0c37efb17c8ef7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDMzOA==", "bodyText": "double checking that this is the name you meant to use. I struggle to see what this class does", "url": "https://github.com/elastic/elasticsearch/pull/60533#discussion_r464650338", "createdAt": "2020-08-03T20:40:36Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/fielddata/ScriptIpScriptDocValues.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.fielddata;\n+\n+import org.apache.lucene.document.InetAddressPoint;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.xpack.runtimefields.IpScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+\n+public class ScriptIpScriptDocValues extends ScriptDocValues<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df2071517fc2aa3b2041bd9be0c37efb17c8ef7"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad406b7624a60d3cbfd441bdfb223ba744b887c", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/fad406b7624a60d3cbfd441bdfb223ba744b887c", "committedDate": "2020-08-05T19:29:48Z", "message": "Merge branch 'feature/runtime_fields' into script_field_ip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563bf0139d84032fabcfc7b50305ddf846e13923", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/563bf0139d84032fabcfc7b50305ddf846e13923", "committedDate": "2020-08-05T19:32:14Z", "message": "words are hard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81733cd638110162883abe037f624749920ee2f4", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/81733cd638110162883abe037f624749920ee2f4", "committedDate": "2020-08-05T19:52:08Z", "message": "Update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22bdb5cc07e2bcc19372d12d85abd237ba168025", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/22bdb5cc07e2bcc19372d12d85abd237ba168025", "committedDate": "2020-08-05T19:54:26Z", "message": "Test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3581, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}