{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjI0MDM3", "number": 50931, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozMToxNFrODYQS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozNDowMVrODYQWVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU5NDExOnYy", "diffSide": "RIGHT", "path": "x-pack/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozMToxNFrOFeAeQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozMToxNFrOFeAeQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwOTM0NA==", "bodyText": "you may want add metric=_all to include current and queued watches.\n/_watcher/stats?metric=_all", "url": "https://github.com/elastic/elasticsearch/pull/50931#discussion_r367009344", "createdAt": "2020-01-15T17:31:14Z", "author": {"login": "jakelandis"}, "path": "x-pack/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityIT.java", "diffHunk": "@@ -305,39 +305,58 @@ private ObjectPath getWatchHistoryEntry(String watchId) throws Exception {\n \n     private ObjectPath getWatchHistoryEntry(String watchId, String state) throws Exception {\n         final AtomicReference<ObjectPath> objectPathReference = new AtomicReference<>();\n-        assertBusy(() -> {\n-            client().performRequest(new Request(\"POST\", \"/.watcher-history-*/_refresh\"));\n-\n-            try (XContentBuilder builder = jsonBuilder()) {\n-                builder.startObject();\n-                builder.startObject(\"query\").startObject(\"bool\").startArray(\"must\");\n-                builder.startObject().startObject(\"term\").startObject(\"watch_id\").field(\"value\", watchId).endObject().endObject()\n+        try {\n+            assertBusy(() -> {\n+                client().performRequest(new Request(\"POST\", \"/.watcher-history-*/_refresh\"));\n+\n+                try (XContentBuilder builder = jsonBuilder()) {\n+                    builder.startObject();\n+                    builder.startObject(\"query\").startObject(\"bool\").startArray(\"must\");\n+                    builder.startObject().startObject(\"term\").startObject(\"watch_id\").field(\"value\", watchId).endObject().endObject()\n                         .endObject();\n-                if (Strings.isNullOrEmpty(state) == false) {\n-                    builder.startObject().startObject(\"term\").startObject(\"state\").field(\"value\", state).endObject().endObject()\n+                    if (Strings.isNullOrEmpty(state) == false) {\n+                        builder.startObject().startObject(\"term\").startObject(\"state\").field(\"value\", state).endObject().endObject()\n                             .endObject();\n-                }\n-                builder.endArray().endObject().endObject();\n-                builder.startArray(\"sort\").startObject().startObject(\"trigger_event.triggered_time\").field(\"order\", \"desc\").endObject()\n+                    }\n+                    builder.endArray().endObject().endObject();\n+                    builder.startArray(\"sort\").startObject().startObject(\"trigger_event.triggered_time\").field(\"order\", \"desc\").endObject()\n                         .endObject().endArray();\n-                builder.endObject();\n-\n-                Request searchRequest = new Request(\"POST\", \"/.watcher-history-*/_search\");\n-                searchRequest.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n-                searchRequest.setJsonEntity(Strings.toString(builder));\n-                Response response = client().performRequest(searchRequest);\n-                ObjectPath objectPath = ObjectPath.createFromResponse(response);\n-                int totalHits = objectPath.evaluate(\"hits.total\");\n-                assertThat(totalHits, is(greaterThanOrEqualTo(1)));\n-                String watchid = objectPath.evaluate(\"hits.hits.0._source.watch_id\");\n-                assertThat(watchid, is(watchId));\n-                objectPathReference.set(objectPath);\n-            } catch (ResponseException e) {\n-                final String err = \"Failed to perform search of watcher history\";\n-                logger.info(err, e);\n-                fail(err);\n+                    builder.endObject();\n+\n+                    Request searchRequest = new Request(\"POST\", \"/.watcher-history-*/_search\");\n+                    searchRequest.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n+                    searchRequest.setJsonEntity(Strings.toString(builder));\n+                    Response response = client().performRequest(searchRequest);\n+                    ObjectPath objectPath = ObjectPath.createFromResponse(response);\n+                    int totalHits = objectPath.evaluate(\"hits.total\");\n+                    assertThat(totalHits, is(greaterThanOrEqualTo(1)));\n+                    String watchid = objectPath.evaluate(\"hits.hits.0._source.watch_id\");\n+                    assertThat(watchid, is(watchId));\n+                    objectPathReference.set(objectPath);\n+                } catch (ResponseException e) {\n+                    final String err = \"Failed to perform search of watcher history\";\n+                    logger.info(err, e);\n+                    fail(err);\n+                }\n+            });\n+        } catch (AssertionError ae) {\n+            {\n+                Request request = new Request(\"GET\", \"/_watcher/stats\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61ce56319d954282bb67b0b91093fc14c3b207"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzYwMjc2OnYy", "diffSide": "RIGHT", "path": "x-pack/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozNDowMVrOFeAjiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozNDowMVrOFeAjiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxMDY5Nw==", "bodyText": "When this fails and is stuck for during the assertBusy, may result in alot of .watcher_history... should we increase the default size ?", "url": "https://github.com/elastic/elasticsearch/pull/50931#discussion_r367010697", "createdAt": "2020-01-15T17:34:01Z", "author": {"login": "jakelandis"}, "path": "x-pack/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityIT.java", "diffHunk": "@@ -305,39 +305,58 @@ private ObjectPath getWatchHistoryEntry(String watchId) throws Exception {\n \n     private ObjectPath getWatchHistoryEntry(String watchId, String state) throws Exception {\n         final AtomicReference<ObjectPath> objectPathReference = new AtomicReference<>();\n-        assertBusy(() -> {\n-            client().performRequest(new Request(\"POST\", \"/.watcher-history-*/_refresh\"));\n-\n-            try (XContentBuilder builder = jsonBuilder()) {\n-                builder.startObject();\n-                builder.startObject(\"query\").startObject(\"bool\").startArray(\"must\");\n-                builder.startObject().startObject(\"term\").startObject(\"watch_id\").field(\"value\", watchId).endObject().endObject()\n+        try {\n+            assertBusy(() -> {\n+                client().performRequest(new Request(\"POST\", \"/.watcher-history-*/_refresh\"));\n+\n+                try (XContentBuilder builder = jsonBuilder()) {\n+                    builder.startObject();\n+                    builder.startObject(\"query\").startObject(\"bool\").startArray(\"must\");\n+                    builder.startObject().startObject(\"term\").startObject(\"watch_id\").field(\"value\", watchId).endObject().endObject()\n                         .endObject();\n-                if (Strings.isNullOrEmpty(state) == false) {\n-                    builder.startObject().startObject(\"term\").startObject(\"state\").field(\"value\", state).endObject().endObject()\n+                    if (Strings.isNullOrEmpty(state) == false) {\n+                        builder.startObject().startObject(\"term\").startObject(\"state\").field(\"value\", state).endObject().endObject()\n                             .endObject();\n-                }\n-                builder.endArray().endObject().endObject();\n-                builder.startArray(\"sort\").startObject().startObject(\"trigger_event.triggered_time\").field(\"order\", \"desc\").endObject()\n+                    }\n+                    builder.endArray().endObject().endObject();\n+                    builder.startArray(\"sort\").startObject().startObject(\"trigger_event.triggered_time\").field(\"order\", \"desc\").endObject()\n                         .endObject().endArray();\n-                builder.endObject();\n-\n-                Request searchRequest = new Request(\"POST\", \"/.watcher-history-*/_search\");\n-                searchRequest.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n-                searchRequest.setJsonEntity(Strings.toString(builder));\n-                Response response = client().performRequest(searchRequest);\n-                ObjectPath objectPath = ObjectPath.createFromResponse(response);\n-                int totalHits = objectPath.evaluate(\"hits.total\");\n-                assertThat(totalHits, is(greaterThanOrEqualTo(1)));\n-                String watchid = objectPath.evaluate(\"hits.hits.0._source.watch_id\");\n-                assertThat(watchid, is(watchId));\n-                objectPathReference.set(objectPath);\n-            } catch (ResponseException e) {\n-                final String err = \"Failed to perform search of watcher history\";\n-                logger.info(err, e);\n-                fail(err);\n+                    builder.endObject();\n+\n+                    Request searchRequest = new Request(\"POST\", \"/.watcher-history-*/_search\");\n+                    searchRequest.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n+                    searchRequest.setJsonEntity(Strings.toString(builder));\n+                    Response response = client().performRequest(searchRequest);\n+                    ObjectPath objectPath = ObjectPath.createFromResponse(response);\n+                    int totalHits = objectPath.evaluate(\"hits.total\");\n+                    assertThat(totalHits, is(greaterThanOrEqualTo(1)));\n+                    String watchid = objectPath.evaluate(\"hits.hits.0._source.watch_id\");\n+                    assertThat(watchid, is(watchId));\n+                    objectPathReference.set(objectPath);\n+                } catch (ResponseException e) {\n+                    final String err = \"Failed to perform search of watcher history\";\n+                    logger.info(err, e);\n+                    fail(err);\n+                }\n+            });\n+        } catch (AssertionError ae) {\n+            {\n+                Request request = new Request(\"GET\", \"/_watcher/stats\");\n+                Response response = client().performRequest(request);\n+                logger.info(\"watcher_stats: {}\", EntityUtils.toString(response.getEntity()));\n             }\n-        });\n+            {\n+                Request request = new Request(\"GET\", \"/_cluster/state\");\n+                Response response = client().performRequest(request);\n+                logger.info(\"cluster_state: {}\", EntityUtils.toString(response.getEntity()));\n+            }\n+            {\n+                Request request = new Request(\"GET\", \"/.watcher-history-*/_search\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61ce56319d954282bb67b0b91093fc14c3b207"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4688, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}