{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NTU0MDIz", "number": 64606, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoxMDoxN1rOE2Kw-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo0NjozOFrOE_RLxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjM0OTM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/user/AsyncSearchUser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoxMDoxN1rOHu2ZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoxMDoxN1rOHu2ZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4Nzc1Mg==", "bodyText": "Hmm, does this meant that any async search user can now mess with templates. Does this really necessary?", "url": "https://github.com/elastic/elasticsearch/pull/64606#discussion_r518887752", "createdAt": "2020-11-06T17:10:17Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/user/AsyncSearchUser.java", "diffHunk": "@@ -16,7 +16,8 @@\n     public static final AsyncSearchUser INSTANCE = new AsyncSearchUser();\n     public static final String ROLE_NAME = UsernamesField.ASYNC_SEARCH_ROLE;\n     public static final Role ROLE = Role.builder(new RoleDescriptor(ROLE_NAME,\n-            null,\n+            // handles template registry for the .async-search index\n+            new String[] { \"manage_index_templates\" },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a53182dc732f41036ca21bf9cf204c8f8b8db9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzE2MDA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskTemplateRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDoyNTo1N1rOH8MiBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDoyNTo1N1rOH8MiBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MTkyNg==", "bodyText": "It looks like we are reusing this in snapshot as well. So I am ok with this approach. I am just not 100% sure of it needs a separate original and a separate role. Maybe ping somebody from security?", "url": "https://github.com/elastic/elasticsearch/pull/64606#discussion_r532881926", "createdAt": "2020-11-30T20:25:57Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskTemplateRegistry.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.async;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.template.IndexTemplateConfig;\n+import org.elasticsearch.xpack.core.template.IndexTemplateRegistry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * The {@link AsyncTaskTemplateRegistry} class sets up the index template for the .async-search index.\n+ */\n+public class AsyncTaskTemplateRegistry extends IndexTemplateRegistry {\n+    public static final int INDEX_TEMPLATE_VERSION = 0;\n+\n+    public static final String ASYNC_TASK_TEMPLATE_VERSION_VARIABLE = \"xpack.async_search.template.version\";\n+    public static final String ASYNC_SEARCH_TEMPLATE_NAME = \"async-search\";\n+\n+    public static final IndexTemplateConfig TEMPLATE_ASYNC_SEARCH = new IndexTemplateConfig(\n+        ASYNC_SEARCH_TEMPLATE_NAME,\n+        \"/async-search.json\",\n+        INDEX_TEMPLATE_VERSION,\n+        ASYNC_TASK_TEMPLATE_VERSION_VARIABLE\n+    );\n+\n+    public AsyncTaskTemplateRegistry(Settings nodeSettings, ClusterService clusterService,\n+                                     ThreadPool threadPool, Client client,\n+                                     NamedXContentRegistry xContentRegistry) {\n+        super(nodeSettings, clusterService, threadPool, client, xContentRegistry);\n+    }\n+\n+    @Override\n+    protected boolean requiresMasterNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected List<IndexTemplateConfig> getComposableTemplateConfigs() {\n+        return Collections.singletonList(TEMPLATE_ASYNC_SEARCH);\n+    }\n+\n+    @Override\n+    protected String getOrigin() {\n+        return ClientHelper.INDEX_LIFECYCLE_ORIGIN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383d030d1403105d49f8808cd920fca3f7967bd7"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzc3Mjg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo0NjozOFrOH84nkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo0NToxMFrOH9A_hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwNDI0MQ==", "bodyText": "Do we need to create an index in this case or this is for consistency?", "url": "https://github.com/elastic/elasticsearch/pull/64606#discussion_r533604241", "createdAt": "2020-12-01T17:46:38Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "diffHunk": "@@ -225,7 +227,7 @@ public void deleteResponse(AsyncExecutionId asyncExecutionId,\n                                ActionListener<DeleteResponse> listener) {\n         try {\n             DeleteRequest request = new DeleteRequest(index).id(asyncExecutionId.getDocId());\n-            client.delete(request, listener);\n+            createIndexIfNecessary(ActionListener.wrap(v -> client.delete(request, listener), listener::onFailure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5b3f0c2b96f97752920e7c7c88eaf25023ce62"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODgxMA==", "bodyText": "I pushed a273d92 to explain the reasoning.", "url": "https://github.com/elastic/elasticsearch/pull/64606#discussion_r533738810", "createdAt": "2020-12-01T21:40:09Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "diffHunk": "@@ -225,7 +227,7 @@ public void deleteResponse(AsyncExecutionId asyncExecutionId,\n                                ActionListener<DeleteResponse> listener) {\n         try {\n             DeleteRequest request = new DeleteRequest(index).id(asyncExecutionId.getDocId());\n-            client.delete(request, listener);\n+            createIndexIfNecessary(ActionListener.wrap(v -> client.delete(request, listener), listener::onFailure));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwNDI0MQ=="}, "originalCommit": {"oid": "df5b3f0c2b96f97752920e7c7c88eaf25023ce62"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTQ0Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/64606#discussion_r533741446", "createdAt": "2020-12-01T21:45:10Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java", "diffHunk": "@@ -225,7 +227,7 @@ public void deleteResponse(AsyncExecutionId asyncExecutionId,\n                                ActionListener<DeleteResponse> listener) {\n         try {\n             DeleteRequest request = new DeleteRequest(index).id(asyncExecutionId.getDocId());\n-            client.delete(request, listener);\n+            createIndexIfNecessary(ActionListener.wrap(v -> client.delete(request, listener), listener::onFailure));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwNDI0MQ=="}, "originalCommit": {"oid": "df5b3f0c2b96f97752920e7c7c88eaf25023ce62"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4073, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}