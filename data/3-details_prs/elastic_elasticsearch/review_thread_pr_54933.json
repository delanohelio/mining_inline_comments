{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTQ2NTgz", "number": 54933, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozNToyMlrODwEqhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDo0NTozNFrODwWnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzM0NjYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozNToyMlrOGC3eSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozNToyMlrOGC3eSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1OTIwOQ==", "bodyText": "Super minor nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(checkPriority == false || Objects.equals(priority, template.priority())) {\n          \n          \n            \n                            if (checkPriority == false || Objects.equals(priority, template.priority())) {", "url": "https://github.com/elastic/elasticsearch/pull/54933#discussion_r405659209", "createdAt": "2020-04-08T16:35:22Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -385,16 +400,27 @@ ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean c\n      */\n     static Map<String, List<String>> findConflictingV2Templates(final ClusterState state, final String candidateName,\n                                                                 final List<String> indexPatterns) {\n+        return findConflictingV2Templates(state, candidateName, indexPatterns, false, null);\n+    }\n+\n+    /**\n+     * Return a map of v2 template names to their index patterns for v2 templates that would overlap\n+     * with the given template's index patterns.\n+     */\n+    static Map<String, List<String>> findConflictingV2Templates(final ClusterState state, final String candidateName,\n+                                                                final List<String> indexPatterns, boolean checkPriority, Long priority) {\n         Automaton v1automaton = Regex.simpleMatchToAutomaton(indexPatterns.toArray(Strings.EMPTY_ARRAY));\n         Map<String, List<String>> overlappingTemplates = new HashMap<>();\n         for (Map.Entry<String, IndexTemplateV2> entry : state.metadata().templatesV2().entrySet()) {\n             String name = entry.getKey();\n             IndexTemplateV2 template = entry.getValue();\n             Automaton v2automaton = Regex.simpleMatchToAutomaton(template.indexPatterns().toArray(Strings.EMPTY_ARRAY));\n             if (Operations.isEmpty(Operations.intersection(v1automaton, v2automaton)) == false) {\n-                logger.debug(\"old template {} and index template {} would overlap: {} <=> {}\",\n-                    candidateName, name, indexPatterns, template.indexPatterns());\n-                overlappingTemplates.put(name, template.indexPatterns());\n+                if(checkPriority == false || Objects.equals(priority, template.priority())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9dcc7428c969ef8c5346e5a4cb552ca007a875"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzM1NTI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozNzo0MFrOGC3j5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNToyOVrOGDoKRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MDY0NQ==", "bodyText": "I think we can be a little more explicit with what the user needs to do, maybe something like:\nindex template [foo] has index patterns [bar*] matching patterns from existing templates [baz] with patterns (bar*) that have the same priority [5], multiple index templates may not match during index creation, please use a different priority\n\nWhat do you think?", "url": "https://github.com/elastic/elasticsearch/pull/54933#discussion_r405660645", "createdAt": "2020-04-08T16:37:40Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -305,7 +305,22 @@ ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean c\n             throw new IllegalArgumentException(\"index template [\" + name + \"] already exists\");\n         }\n \n-        Map<String, List<String>> overlaps = findConflictingV1Templates(currentState, name, template.indexPatterns());\n+        Map<String, List<String>> overlaps = findConflictingV2Templates(currentState, name, template.indexPatterns(), true,\n+            template.priority());\n+        if (overlaps.size() > 0) {\n+            String error = String.format(Locale.ROOT, \"index template [%s] has index patterns %s matching patterns from \" +\n+                    \"existing templates [%s] with patterns (%s) that have the same priority [%d]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9dcc7428c969ef8c5346e5a4cb552ca007a875"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NjkwMA==", "bodyText": "Good idea, I'll use that", "url": "https://github.com/elastic/elasticsearch/pull/54933#discussion_r406456900", "createdAt": "2020-04-09T20:25:29Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -305,7 +305,22 @@ ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean c\n             throw new IllegalArgumentException(\"index template [\" + name + \"] already exists\");\n         }\n \n-        Map<String, List<String>> overlaps = findConflictingV1Templates(currentState, name, template.indexPatterns());\n+        Map<String, List<String>> overlaps = findConflictingV2Templates(currentState, name, template.indexPatterns(), true,\n+            template.priority());\n+        if (overlaps.size() > 0) {\n+            String error = String.format(Locale.ROOT, \"index template [%s] has index patterns %s matching patterns from \" +\n+                    \"existing templates [%s] with patterns (%s) that have the same priority [%d]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MDY0NQ=="}, "originalCommit": {"oid": "ae9dcc7428c969ef8c5346e5a4cb552ca007a875"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzM2NzM1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0MDo0M1rOGC3raw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNToxN1rOGDoJ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MjU3MQ==", "bodyText": "It's suuuuper unlikely, but this might be better as:\nIndexTemplateV2 newTemplate = randomValueOtherThanMany(t -> Objects.equals(template.priority(), t.priority(), () -> IndexTemplateV2Tests.randomInstance());\nTo prevent generating a new template that accidentally has the same index patterns and priority (highly unlikely but not impossible)", "url": "https://github.com/elastic/elasticsearch/pull/54933#discussion_r405662571", "createdAt": "2020-04-08T16:40:43Z", "author": {"login": "dakrone"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java", "diffHunk": "@@ -301,12 +301,14 @@ public void testAddIndexTemplateV2() throws Exception {\n         assertNotNull(state.metadata().templatesV2().get(\"foo\"));\n         assertTemplatesEqual(state.metadata().templatesV2().get(\"foo\"), template);\n \n+        IndexTemplateV2 newTemplate = IndexTemplateV2Tests.randomInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9dcc7428c969ef8c5346e5a4cb552ca007a875"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NjgwMQ==", "bodyText": "Good idea, changed", "url": "https://github.com/elastic/elasticsearch/pull/54933#discussion_r406456801", "createdAt": "2020-04-09T20:25:17Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java", "diffHunk": "@@ -301,12 +301,14 @@ public void testAddIndexTemplateV2() throws Exception {\n         assertNotNull(state.metadata().templatesV2().get(\"foo\"));\n         assertTemplatesEqual(state.metadata().templatesV2().get(\"foo\"), template);\n \n+        IndexTemplateV2 newTemplate = IndexTemplateV2Tests.randomInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MjU3MQ=="}, "originalCommit": {"oid": "ae9dcc7428c969ef8c5346e5a4cb552ca007a875"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDI4ODMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDo0NTozNFrOGDTf6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozODowN1rOGDZGlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExODM3Nw==", "bodyText": "do we still need this? would we ever want to find the conflicting templates without checking the priority?", "url": "https://github.com/elastic/elasticsearch/pull/54933#discussion_r406118377", "createdAt": "2020-04-09T10:45:34Z", "author": {"login": "andreidan"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -385,16 +400,27 @@ ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean c\n      */\n     static Map<String, List<String>> findConflictingV2Templates(final ClusterState state, final String candidateName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0ba5f74577cdf8a0cf3c9e419a070d1005db29"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMDE5OQ==", "bodyText": "This is used when adding V1 templates, when any overlapping V2 template raises warning, despite its priority", "url": "https://github.com/elastic/elasticsearch/pull/54933#discussion_r406210199", "createdAt": "2020-04-09T13:38:07Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -385,16 +400,27 @@ ClusterState addIndexTemplateV2(final ClusterState currentState, final boolean c\n      */\n     static Map<String, List<String>> findConflictingV2Templates(final ClusterState state, final String candidateName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExODM3Nw=="}, "originalCommit": {"oid": "eb0ba5f74577cdf8a0cf3c9e419a070d1005db29"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1171, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}