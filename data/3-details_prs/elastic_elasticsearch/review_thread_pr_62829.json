{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzk4MjE1", "number": 62829, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0Nzo0NlrOEmo4ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1Njo0NFrOEmpKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUxMTQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0Nzo0NlrOHWySEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0Nzo0NlrOHWySEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NDU0Ng==", "bodyText": "this becomes the equivalent of a null check with the .orElse(\"\") above, maybe we can just leave it in an Optional<String> above and do availableDestinationTier.isPresent(), which I think is a bit clearer than checking for text (especially since we don't care what the text is)", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r493654546", "createdAt": "2020-09-23T14:47:46Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "diffHunk": "@@ -73,44 +70,49 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", getKey().getAction(), index.getName());\n             return new Result(false, null);\n         }\n-        String destinationTier = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String preferredTierConfiguration = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String availableDestinationTier = DataTierAllocationDecider.preferredAvailableTier(preferredTierConfiguration,\n+            clusterState.getNodes()).orElse(\"\");\n+\n         if (ActiveShardCount.ALL.enoughShardsActive(clusterState, index.getName()) == false) {\n-            if (Strings.isEmpty(destinationTier)) {\n+            if (Strings.isEmpty(preferredTierConfiguration)) {\n                 logger.debug(\"[{}] lifecycle action for index [{}] cannot make progress because not all shards are active\",\n                     getKey().getAction(), index.getName());\n             } else {\n-                logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n-                    getKey().getAction(), index.getName(), destinationTier);\n+                if (Strings.hasText(availableDestinationTier)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUxNDY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0ODoyNlrOHWyUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0ODoyNlrOHWyUMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NTA4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n          \n          \n            \n                                logger.debug(\"[{}] migration of index [{}] to the [{}] tier preference cannot progress, as not all shards are active\",", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r493655089", "createdAt": "2020-09-23T14:48:26Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "diffHunk": "@@ -73,44 +70,49 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", getKey().getAction(), index.getName());\n             return new Result(false, null);\n         }\n-        String destinationTier = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String preferredTierConfiguration = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String availableDestinationTier = DataTierAllocationDecider.preferredAvailableTier(preferredTierConfiguration,\n+            clusterState.getNodes()).orElse(\"\");\n+\n         if (ActiveShardCount.ALL.enoughShardsActive(clusterState, index.getName()) == false) {\n-            if (Strings.isEmpty(destinationTier)) {\n+            if (Strings.isEmpty(preferredTierConfiguration)) {\n                 logger.debug(\"[{}] lifecycle action for index [{}] cannot make progress because not all shards are active\",\n                     getKey().getAction(), index.getName());\n             } else {\n-                logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n-                    getKey().getAction(), index.getName(), destinationTier);\n+                if (Strings.hasText(availableDestinationTier)) {\n+                    logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUyOTExOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MTowN1rOHWydNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoxMjowMVrOHXTaxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NzM5OA==", "bodyText": "I think in this message we should include the original preference setting, or else I think users will be confused why their cold phase index is waiting to move to the data_warm tier (if they see preference [data_cold,data_warm,data_hot] in the message I hope it will be clearer to them)", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r493657398", "createdAt": "2020-09-23T14:51:07Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "diffHunk": "@@ -73,44 +70,49 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", getKey().getAction(), index.getName());\n             return new Result(false, null);\n         }\n-        String destinationTier = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String preferredTierConfiguration = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String availableDestinationTier = DataTierAllocationDecider.preferredAvailableTier(preferredTierConfiguration,\n+            clusterState.getNodes()).orElse(\"\");\n+\n         if (ActiveShardCount.ALL.enoughShardsActive(clusterState, index.getName()) == false) {\n-            if (Strings.isEmpty(destinationTier)) {\n+            if (Strings.isEmpty(preferredTierConfiguration)) {\n                 logger.debug(\"[{}] lifecycle action for index [{}] cannot make progress because not all shards are active\",\n                     getKey().getAction(), index.getName());\n             } else {\n-                logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n-                    getKey().getAction(), index.getName(), destinationTier);\n+                if (Strings.hasText(availableDestinationTier)) {\n+                    logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n+                        getKey().getAction(), index.getName(), preferredTierConfiguration);\n+                } else {\n+                    logger.debug(\"[{}] migration of index [{}] to the next tier cannot progress as there is no available tier for the \" +\n+                            \"configured preferred tiers [{}] and not all shards are active\", getKey().getAction(), index.getName(),\n+                        preferredTierConfiguration);\n+                }\n             }\n             return new Result(false, waitingForActiveShardsAllocationInfo(idxMeta.getNumberOfReplicas()));\n         }\n \n-        if (Strings.isEmpty(destinationTier)) {\n-            logger.debug(\"index [{}] has no data tier routing setting configured and all its shards are active. considering the [{}] \" +\n-                \"step condition met and continuing to the next step\", index.getName(), getKey().getName());\n+        if (Strings.isEmpty(preferredTierConfiguration)) {\n+            logger.debug(\"index [{}] has no data tier routing preference setting configured and all its shards are active. considering \" +\n+                \"the [{}] step condition met and continuing to the next step\", index.getName(), getKey().getName());\n             // the user removed the tier routing setting and all the shards are active so we'll cary on\n             return new Result(true, null);\n         }\n \n         int allocationPendingAllShards = getPendingAllocations(index, ALLOCATION_DECIDERS, clusterState);\n \n         if (allocationPendingAllShards > 0) {\n-            boolean targetTierNodeFound = false;\n-            for (DiscoveryNode node : clusterState.nodes()) {\n-                for (DiscoveryNodeRole role : node.getRoles()) {\n-                    if (role.roleName().equals(DATA_ROLE.roleName()) || role.roleName().equals(destinationTier)) {\n-                        targetTierNodeFound = true;\n-                        break;\n-                    }\n-                }\n+            String statusMessage;\n+            if (Strings.hasText(availableDestinationTier)) {\n+                statusMessage = String.format(Locale.ROOT, \"[%s] lifecycle action [%s] waiting for [%s] shards to be moved to the [%s] \" +\n+                    \"tier\", index.getName(), getKey().getAction(), allocationPendingAllShards, availableDestinationTier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NzQ0Nw==", "bodyText": "Great point, updating the message to include the preference. Thanks Lee", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r494197447", "createdAt": "2020-09-24T10:12:01Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "diffHunk": "@@ -73,44 +70,49 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", getKey().getAction(), index.getName());\n             return new Result(false, null);\n         }\n-        String destinationTier = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String preferredTierConfiguration = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String availableDestinationTier = DataTierAllocationDecider.preferredAvailableTier(preferredTierConfiguration,\n+            clusterState.getNodes()).orElse(\"\");\n+\n         if (ActiveShardCount.ALL.enoughShardsActive(clusterState, index.getName()) == false) {\n-            if (Strings.isEmpty(destinationTier)) {\n+            if (Strings.isEmpty(preferredTierConfiguration)) {\n                 logger.debug(\"[{}] lifecycle action for index [{}] cannot make progress because not all shards are active\",\n                     getKey().getAction(), index.getName());\n             } else {\n-                logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n-                    getKey().getAction(), index.getName(), destinationTier);\n+                if (Strings.hasText(availableDestinationTier)) {\n+                    logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n+                        getKey().getAction(), index.getName(), preferredTierConfiguration);\n+                } else {\n+                    logger.debug(\"[{}] migration of index [{}] to the next tier cannot progress as there is no available tier for the \" +\n+                            \"configured preferred tiers [{}] and not all shards are active\", getKey().getAction(), index.getName(),\n+                        preferredTierConfiguration);\n+                }\n             }\n             return new Result(false, waitingForActiveShardsAllocationInfo(idxMeta.getNumberOfReplicas()));\n         }\n \n-        if (Strings.isEmpty(destinationTier)) {\n-            logger.debug(\"index [{}] has no data tier routing setting configured and all its shards are active. considering the [{}] \" +\n-                \"step condition met and continuing to the next step\", index.getName(), getKey().getName());\n+        if (Strings.isEmpty(preferredTierConfiguration)) {\n+            logger.debug(\"index [{}] has no data tier routing preference setting configured and all its shards are active. considering \" +\n+                \"the [{}] step condition met and continuing to the next step\", index.getName(), getKey().getName());\n             // the user removed the tier routing setting and all the shards are active so we'll cary on\n             return new Result(true, null);\n         }\n \n         int allocationPendingAllShards = getPendingAllocations(index, ALLOCATION_DECIDERS, clusterState);\n \n         if (allocationPendingAllShards > 0) {\n-            boolean targetTierNodeFound = false;\n-            for (DiscoveryNode node : clusterState.nodes()) {\n-                for (DiscoveryNodeRole role : node.getRoles()) {\n-                    if (role.roleName().equals(DATA_ROLE.roleName()) || role.roleName().equals(destinationTier)) {\n-                        targetTierNodeFound = true;\n-                        break;\n-                    }\n-                }\n+            String statusMessage;\n+            if (Strings.hasText(availableDestinationTier)) {\n+                statusMessage = String.format(Locale.ROOT, \"[%s] lifecycle action [%s] waiting for [%s] shards to be moved to the [%s] \" +\n+                    \"tier\", index.getName(), getKey().getAction(), allocationPendingAllShards, availableDestinationTier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NzM5OA=="}, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUzNTM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MjoxOVrOHWyhGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MjoxOVrOHWyhGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODM5Mw==", "bodyText": "I think we could do something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[{}] migration of index [{}] to tier [{}] complete\", getKey().getAction(), index, availableDestinationTier);\n          \n          \n            \n                        logger.debug(\"[{}] migration of index [{}] to tier [{}] (preference [{}]) complete\", getKey().getAction(), index, availableDestinationTier, preferredTierConfiguration);\n          \n      \n    \n    \n  \n\nto make it a bit clearer", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r493658393", "createdAt": "2020-09-23T14:52:19Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/DataTierMigrationRoutedStep.java", "diffHunk": "@@ -73,44 +70,49 @@ public Result isConditionMet(Index index, ClusterState clusterState) {\n             logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", getKey().getAction(), index.getName());\n             return new Result(false, null);\n         }\n-        String destinationTier = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String preferredTierConfiguration = INDEX_ROUTING_PREFER_SETTING.get(idxMeta.getSettings());\n+        String availableDestinationTier = DataTierAllocationDecider.preferredAvailableTier(preferredTierConfiguration,\n+            clusterState.getNodes()).orElse(\"\");\n+\n         if (ActiveShardCount.ALL.enoughShardsActive(clusterState, index.getName()) == false) {\n-            if (Strings.isEmpty(destinationTier)) {\n+            if (Strings.isEmpty(preferredTierConfiguration)) {\n                 logger.debug(\"[{}] lifecycle action for index [{}] cannot make progress because not all shards are active\",\n                     getKey().getAction(), index.getName());\n             } else {\n-                logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n-                    getKey().getAction(), index.getName(), destinationTier);\n+                if (Strings.hasText(availableDestinationTier)) {\n+                    logger.debug(\"[{}] migration of index [{}] to the [{}] tier cannot progress, as not all shards are active\",\n+                        getKey().getAction(), index.getName(), preferredTierConfiguration);\n+                } else {\n+                    logger.debug(\"[{}] migration of index [{}] to the next tier cannot progress as there is no available tier for the \" +\n+                            \"configured preferred tiers [{}] and not all shards are active\", getKey().getAction(), index.getName(),\n+                        preferredTierConfiguration);\n+                }\n             }\n             return new Result(false, waitingForActiveShardsAllocationInfo(idxMeta.getNumberOfReplicas()));\n         }\n \n-        if (Strings.isEmpty(destinationTier)) {\n-            logger.debug(\"index [{}] has no data tier routing setting configured and all its shards are active. considering the [{}] \" +\n-                \"step condition met and continuing to the next step\", index.getName(), getKey().getName());\n+        if (Strings.isEmpty(preferredTierConfiguration)) {\n+            logger.debug(\"index [{}] has no data tier routing preference setting configured and all its shards are active. considering \" +\n+                \"the [{}] step condition met and continuing to the next step\", index.getName(), getKey().getName());\n             // the user removed the tier routing setting and all the shards are active so we'll cary on\n             return new Result(true, null);\n         }\n \n         int allocationPendingAllShards = getPendingAllocations(index, ALLOCATION_DECIDERS, clusterState);\n \n         if (allocationPendingAllShards > 0) {\n-            boolean targetTierNodeFound = false;\n-            for (DiscoveryNode node : clusterState.nodes()) {\n-                for (DiscoveryNodeRole role : node.getRoles()) {\n-                    if (role.roleName().equals(DATA_ROLE.roleName()) || role.roleName().equals(destinationTier)) {\n-                        targetTierNodeFound = true;\n-                        break;\n-                    }\n-                }\n+            String statusMessage;\n+            if (Strings.hasText(availableDestinationTier)) {\n+                statusMessage = String.format(Locale.ROOT, \"[%s] lifecycle action [%s] waiting for [%s] shards to be moved to the [%s] \" +\n+                    \"tier\", index.getName(), getKey().getAction(), allocationPendingAllShards, availableDestinationTier);\n+            } else {\n+                statusMessage = String.format(Locale.ROOT, \"index [%s] has a preference for tiers [%s], \" +\n+                    \"but no nodes for any of those tiers are available in the cluster\", index.getName(), preferredTierConfiguration);\n             }\n-            String statusMessage = String.format(Locale.ROOT, \"%s lifecycle action [%s] waiting for [%s] shards to be moved to the [%s] \" +\n-                    \"tier\" + (targetTierNodeFound ? \"\" : \" but there are currently no [%s] nodes in the cluster\"),\n-                index, getKey().getAction(), allocationPendingAllShards, destinationTier, destinationTier);\n             logger.debug(statusMessage);\n             return new Result(false, new AllocationInfo(idxMeta.getNumberOfReplicas(), allocationPendingAllShards, true, statusMessage));\n         } else {\n-            logger.debug(\"[{}] migration of index [{}] to tier [{}] complete\", getKey().getAction(), index, destinationTier);\n+            logger.debug(\"[{}] migration of index [{}] to tier [{}] complete\", getKey().getAction(), index, availableDestinationTier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTU0Mzg2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1Mzo1OVrOHWymRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1Mzo1OVrOHWymRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTcxNg==", "bodyText": "Super minor nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(indexOfTargetTier == -1) {\n          \n          \n            \n                    if (indexOfTargetTier == -1) {", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r493659716", "createdAt": "2020-09-23T14:53:59Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/MigrateAction.java", "diffHunk": "@@ -102,6 +106,23 @@ public boolean isSafeAction() {\n         }\n     }\n \n+    /**\n+     * Based on the provided target tier it will return a comma separated list of preferred tiers.\n+     * ie. if `data_cold` is the target tier, it will return `data_cold,data_warm,data_hot`\n+     * This is usually used in conjunction with {@link DataTierAllocationDecider#INDEX_ROUTING_PREFER_SETTING}\n+     */\n+    static String getPreferredTiersConfiguration(String targetTier) {\n+        int indexOfTargetTier = COLD_TO_HOT_TIERS.indexOf(targetTier);\n+        if(indexOfTargetTier == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTU1ODU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/MigrateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1Njo0NFrOHWyvUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyNjo1MVrOHW0KWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MjAzMg==", "bodyText": "If we keep this, we could reverse the double negative with\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Strings.hasText(preferredTiers) == false) {\n          \n          \n            \n                    if (Strings.isEmpty(preferredTiers)) {\n          \n      \n    \n    \n  \n\nBut what I'm trying to understand is how this would actually be empty, even in the hot phase the stream skip above would at least return \"data_hot\", and we check that the index is not -1 above, so I'm not sure how it actually gets into this state?", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r493662032", "createdAt": "2020-09-23T14:56:44Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/MigrateAction.java", "diffHunk": "@@ -102,6 +106,23 @@ public boolean isSafeAction() {\n         }\n     }\n \n+    /**\n+     * Based on the provided target tier it will return a comma separated list of preferred tiers.\n+     * ie. if `data_cold` is the target tier, it will return `data_cold,data_warm,data_hot`\n+     * This is usually used in conjunction with {@link DataTierAllocationDecider#INDEX_ROUTING_PREFER_SETTING}\n+     */\n+    static String getPreferredTiersConfiguration(String targetTier) {\n+        int indexOfTargetTier = COLD_TO_HOT_TIERS.indexOf(targetTier);\n+        if(indexOfTargetTier == -1) {\n+            throw new IllegalArgumentException(\"invalid data tier [\" + targetTier + \"]\");\n+        }\n+        String preferredTiers = COLD_TO_HOT_TIERS.stream().skip(indexOfTargetTier).collect(Collectors.joining(\",\"));\n+        if (Strings.hasText(preferredTiers) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NTMzOA==", "bodyText": "this is my paranoia, you're right, I'll drop it", "url": "https://github.com/elastic/elasticsearch/pull/62829#discussion_r493685338", "createdAt": "2020-09-23T15:26:51Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/MigrateAction.java", "diffHunk": "@@ -102,6 +106,23 @@ public boolean isSafeAction() {\n         }\n     }\n \n+    /**\n+     * Based on the provided target tier it will return a comma separated list of preferred tiers.\n+     * ie. if `data_cold` is the target tier, it will return `data_cold,data_warm,data_hot`\n+     * This is usually used in conjunction with {@link DataTierAllocationDecider#INDEX_ROUTING_PREFER_SETTING}\n+     */\n+    static String getPreferredTiersConfiguration(String targetTier) {\n+        int indexOfTargetTier = COLD_TO_HOT_TIERS.indexOf(targetTier);\n+        if(indexOfTargetTier == -1) {\n+            throw new IllegalArgumentException(\"invalid data tier [\" + targetTier + \"]\");\n+        }\n+        String preferredTiers = COLD_TO_HOT_TIERS.stream().skip(indexOfTargetTier).collect(Collectors.joining(\",\"));\n+        if (Strings.hasText(preferredTiers) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MjAzMg=="}, "originalCommit": {"oid": "a77a99a1cca1a5188cddc8fd830f884ded6d9e88"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3442, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}