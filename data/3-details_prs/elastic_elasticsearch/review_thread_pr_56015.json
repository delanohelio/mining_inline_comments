{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzkwMTEz", "number": 56015, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMTo1NDoyM1rOD4Apqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoyODozOFrOD49yig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDU3NTE1OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/PreparedStatementTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMTo1NDoyM1rOGOl7RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMTo1NDoyM1rOGOl7RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1NDYyOQ==", "bodyText": "I've removed an index involvement mostly due to #56013. Using an index for this test doesn't seem to bring any particular value, but can revert if I'm missing anything.", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r417954629", "createdAt": "2020-04-30T11:54:23Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/PreparedStatementTestCase.java", "diffHunk": "@@ -16,16 +17,12 @@\n import java.sql.SQLException;\n import java.sql.SQLSyntaxErrorException;\n \n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.startsWith;\n \n public class PreparedStatementTestCase extends JdbcIntegrationTestCase {\n \n     public void testSupportedTypes() throws Exception {\n-        index(\"library\", builder -> {\n-            builder.field(\"name\", \"Don Quixote\");\n-            builder.field(\"page_count\", 1072);\n-        });\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20e4f08a09942d00fd21891ef8ef9e1f5fdbee3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDQzNjA1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTozODo0NlrOGP8lhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjowMjozM1rOGQHFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3NDQ3MQ==", "bodyText": "Why not delegate to the other getBigDecimal -> return getBigDecimal(column(columnLabel), scale) ?", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419374471", "createdAt": "2020-05-04T11:38:46Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java", "diffHunk": "@@ -547,7 +550,9 @@ public InputStream getBinaryStream(int columnIndex) throws SQLException {\n     @Override\n     @Deprecated\n     public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException {\n-        throw new SQLFeatureNotSupportedException(\"BigDecimal not supported\");\n+        BigDecimal bd = getBigDecimal(columnLabel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac1914518f613569881bd69f1699d1b2cda7795"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NjU1Nw==", "bodyText": "Right, good point! Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419546557", "createdAt": "2020-05-04T16:02:33Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java", "diffHunk": "@@ -547,7 +550,9 @@ public InputStream getBinaryStream(int columnIndex) throws SQLException {\n     @Override\n     @Deprecated\n     public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException {\n-        throw new SQLFeatureNotSupportedException(\"BigDecimal not supported\");\n+        BigDecimal bd = getBigDecimal(columnLabel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3NDQ3MQ=="}, "originalCommit": {"oid": "aac1914518f613569881bd69f1699d1b2cda7795"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU4ODE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoyNzoyNVrOGP-B6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoyNzoyNVrOGP-B6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5ODEyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for(Entry<String, Number> e : map.entrySet()) {\n          \n          \n            \n                        for (Entry<String, Number> e : map.entrySet()) {", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419398122", "createdAt": "2020-05-04T12:27:25Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java", "diffHunk": "@@ -791,7 +789,188 @@ public void testGettingInvalidFloat() throws Exception {\n                     sqle.getMessage());\n         });\n     }\n-    \n+\n+    //\n+    // BigDecimal fetching testing\n+    //\n+    static final Map<Class<? extends Number>, Integer> JAVA_TO_SQL_NUMERIC_TYPES_MAP = new HashMap<>() {{\n+        put(Byte.class, Types.TINYINT);\n+        put(Short.class, Types.SMALLINT);\n+        put(Integer.class, Types.INTEGER);\n+        put(Long.class, Types.BIGINT);\n+        put(Float.class, Types.REAL);\n+        put(Double.class, Types.DOUBLE);\n+        // TODO: no half & scaled float testing\n+    }};\n+\n+    private static <T extends Number> void validateBigDecimalWithoutCasting(ResultSet results, List<T> testValues)\n+        throws SQLException {\n+\n+        ResultSetMetaData resultSetMetaData = results.getMetaData();\n+\n+        Class<? extends Number> clazz = testValues.get(0).getClass();\n+        String primitiveName = clazz.getSimpleName().toLowerCase(Locale.ROOT);\n+\n+        BigDecimal testVal1 = new BigDecimal(testValues.get(0).toString());\n+        BigDecimal testVal2 = new BigDecimal(testValues.get(1).toString());\n+        BigDecimal testVal3 = new BigDecimal(testValues.get(2).toString());\n+\n+        assertEquals(3, resultSetMetaData.getColumnCount());\n+        assertEquals(JAVA_TO_SQL_NUMERIC_TYPES_MAP.get(clazz).longValue(), resultSetMetaData.getColumnType(1));\n+        assertEquals(JAVA_TO_SQL_NUMERIC_TYPES_MAP.get(clazz).longValue(), resultSetMetaData.getColumnType(2));\n+\n+        assertTrue(results.next());\n+\n+        assertEquals(testVal1, results.getBigDecimal(1));\n+        assertEquals(testVal1, results.getBigDecimal(\"test_\" + primitiveName));\n+        assertEquals(testVal1, results.getObject(\"test_\" + primitiveName, BigDecimal.class));\n+        assertEquals(results.getObject(1).getClass(), clazz);\n+\n+        assertNull(results.getBigDecimal(2));\n+        assertTrue(results.wasNull());\n+        assertNull(results.getObject(\"test_null_\" + primitiveName));\n+        assertTrue(results.wasNull());\n+\n+        assertTrue(results.next());\n+\n+        assertEquals(testVal2, results.getBigDecimal(1));\n+        assertEquals(testVal2, results.getBigDecimal(\"test_\" + primitiveName));\n+        assertEquals(results.getObject(1).getClass(), clazz);\n+        assertEquals(testVal3, results.getBigDecimal(\"test_keyword\"));\n+\n+        assertFalse(results.next());\n+    }\n+\n+    public void testGettingValidBigDecimalFromBooleanWithoutCasting() throws Exception {\n+        createTestDataForBooleanValueTests();\n+\n+        doWithQuery(\"SELECT test_boolean, test_null_boolean, test_keyword FROM test\", results -> {\n+            ResultSetMetaData resultSetMetaData = results.getMetaData();\n+            assertEquals(3, resultSetMetaData.getColumnCount());\n+            assertEquals(Types.BOOLEAN, resultSetMetaData.getColumnType(1));\n+            assertEquals(Types.BOOLEAN, resultSetMetaData.getColumnType(2));\n+\n+            assertTrue(results.next());\n+\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(1));\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(\"test_boolean\"));\n+            assertEquals(BigDecimal.ONE, results.getObject(1, BigDecimal.class));\n+\n+            assertNull(results.getBigDecimal(2));\n+            assertTrue(results.wasNull());\n+            assertNull(results.getBigDecimal(\"test_null_boolean\"));\n+            assertTrue(results.wasNull());\n+\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(3));\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(\"test_keyword\"));\n+\n+            assertTrue(results.next());\n+\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(1));\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(\"test_boolean\"));\n+            assertEquals(BigDecimal.ZERO, results.getObject(1, BigDecimal.class));\n+\n+            assertNull(results.getBigDecimal(2));\n+            assertTrue(results.wasNull());\n+            assertNull(results.getBigDecimal(\"test_null_boolean\"));\n+            assertTrue(results.wasNull());\n+\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(3));\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(\"test_keyword\"));\n+\n+            assertFalse(results.next());\n+        });\n+    }\n+    public void testGettingValidBigDecimalFromByteWithoutCasting() throws Exception {\n+        List<Byte> byteTestValues = createTestDataForNumericValueTests(ESTestCase::randomByte);\n+        doWithQuery(\"SELECT test_byte, test_null_byte, test_keyword FROM test\", byteTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromShortWithoutCasting() throws Exception {\n+        List<Short> shortTestValues = createTestDataForNumericValueTests(ESTestCase::randomShort);\n+        doWithQuery(\"SELECT test_short, test_null_short, test_keyword FROM test\", shortTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromIntegerWithoutCasting() throws Exception {\n+        List<Integer> integerTestValues = createTestDataForNumericValueTests(ESTestCase::randomInt);\n+        doWithQuery(\"SELECT test_integer, test_null_integer, test_keyword FROM test\", integerTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromLongWithoutCasting() throws Exception {\n+        List<Long> longTestValues = createTestDataForNumericValueTests(ESTestCase::randomLong);\n+        doWithQuery(\"SELECT test_long, test_null_long, test_keyword FROM test\", longTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromFloatWithoutCasting() throws Exception {\n+        List<Float> floatTestValues = createTestDataForNumericValueTests(ESTestCase::randomFloat);\n+        doWithQuery(\"SELECT test_float, test_null_float, test_keyword FROM test\", floatTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromDoubleWithoutCasting() throws Exception {\n+        List<Double> doubleTestValues = createTestDataForNumericValueTests(ESTestCase::randomDouble);\n+        doWithQuery(\"SELECT test_double, test_null_double, test_keyword FROM test\", doubleTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+\n+    public void testGettingValidBigDecimalWithCasting() throws Exception {\n+        Map<String,Number> map = createTestDataForNumericValueTypes(() -> randomDouble());\n+\n+        doWithQuery(SELECT_WILDCARD, (results) -> {\n+            results.next();\n+            for(Entry<String, Number> e : map.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac1914518f613569881bd69f1699d1b2cda7795"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU5MjEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoyODozOFrOGP-EUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxMDoyOVrOGQHbJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5ODczNw==", "bodyText": "Why not adding those too?", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419398737", "createdAt": "2020-05-04T12:28:38Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java", "diffHunk": "@@ -791,7 +789,188 @@ public void testGettingInvalidFloat() throws Exception {\n                     sqle.getMessage());\n         });\n     }\n-    \n+\n+    //\n+    // BigDecimal fetching testing\n+    //\n+    static final Map<Class<? extends Number>, Integer> JAVA_TO_SQL_NUMERIC_TYPES_MAP = new HashMap<>() {{\n+        put(Byte.class, Types.TINYINT);\n+        put(Short.class, Types.SMALLINT);\n+        put(Integer.class, Types.INTEGER);\n+        put(Long.class, Types.BIGINT);\n+        put(Float.class, Types.REAL);\n+        put(Double.class, Types.DOUBLE);\n+        // TODO: no half & scaled float testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac1914518f613569881bd69f1699d1b2cda7795"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MjAzOQ==", "bodyText": "It probably should be done indeed, but I was thinking to keep it focused on BigDecimal for now, since adding coverage for half- and scaled- floats would require extending the testing for the rest of the types too.", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419552039", "createdAt": "2020-05-04T16:10:29Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java", "diffHunk": "@@ -791,7 +789,188 @@ public void testGettingInvalidFloat() throws Exception {\n                     sqle.getMessage());\n         });\n     }\n-    \n+\n+    //\n+    // BigDecimal fetching testing\n+    //\n+    static final Map<Class<? extends Number>, Integer> JAVA_TO_SQL_NUMERIC_TYPES_MAP = new HashMap<>() {{\n+        put(Byte.class, Types.TINYINT);\n+        put(Short.class, Types.SMALLINT);\n+        put(Integer.class, Types.INTEGER);\n+        put(Long.class, Types.BIGINT);\n+        put(Float.class, Types.REAL);\n+        put(Double.class, Types.DOUBLE);\n+        // TODO: no half & scaled float testing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5ODczNw=="}, "originalCommit": {"oid": "aac1914518f613569881bd69f1699d1b2cda7795"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2418, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}