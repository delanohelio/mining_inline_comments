{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjEwNTg5", "number": 53033, "title": "Add more tests in GeoBoundsAggregatorTests", "bodyText": "this commit introduces more thorough field-type support tests\nas well as tests for unmapped and missing values.\nrelates #42949.", "createdAt": "2020-03-02T21:12:54Z", "url": "https://github.com/elastic/elasticsearch/pull/53033", "merged": true, "mergeCommit": {"oid": "4b33908e292493c3cd045f982fba9b71fbb0d949"}, "closed": true, "closedAt": "2020-03-03T18:59:05Z", "author": {"login": "talevy"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ0UyPAH2gAyMzgyNjEwNTg5Ojg1Mzg2ZWUwYTVjOTQ2Yjc1ZWRjNmI4OWZiY2JlMWM3ZmEzNDZkZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKFTcIgH2gAyMzgyNjEwNTg5OjU0MTY4YzA4NmVlY2MzMDBmM2Y5MGE2ZWZjOWFlMWJiZmFlZWEzYTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/85386ee0a5c946b75edc6b89fbcbe1c7fa346de0", "committedDate": "2020-03-02T21:09:10Z", "message": "Add more tests in GeoBoundsAggregatorTests\n\nthis commit introduces more thorough field-type support tests\nas well as tests for unmapped and missing values.\n\nrelates #42949."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDUzODc1", "url": "https://github.com/elastic/elasticsearch/pull/53033#pullrequestreview-368053875", "createdAt": "2020-03-03T15:03:11Z", "commit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMzoxMlrOFxJeyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxODo0NlrOFxKI0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTg4Mw==", "bodyText": "This looks like it has a mapped field, just no docs indexed against it, so I don't think it's correct to call it an \"Unmapped\" test? or am I missing something?", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387079883", "createdAt": "2020-03-03T15:03:12Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -26,20 +26,29 @@\n import org.apache.lucene.search.IndexSearcher;\n import org.apache.lucene.search.MatchAllDocsQuery;\n import org.apache.lucene.store.Directory;\n+import org.elasticsearch.ElasticsearchParseException;\n import org.elasticsearch.common.geo.GeoPoint;\n+import org.elasticsearch.geo.GeometryTestUtils;\n+import org.elasticsearch.geometry.Point;\n import org.elasticsearch.index.mapper.GeoPointFieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorTestCase;\n import org.elasticsearch.search.aggregations.support.AggregationInspectionHelper;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n import org.elasticsearch.test.geo.RandomGeoGenerator;\n \n+import java.util.List;\n+\n import static org.elasticsearch.search.aggregations.metrics.InternalGeoBoundsTests.GEOHASH_TOLERANCE;\n import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.startsWith;\n \n public class GeoBoundsAggregatorTests extends AggregatorTestCase {\n-    public void testEmpty() throws Exception {\n-        try (Directory dir = newDirectory();\n-             RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+    public void testUnmappedWithNoDocs() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NjIwNg==", "bodyText": "Nit - I think it would be clearer that the aggregation isn't operating on this field if we used some completely different type, like a keyword or a number.", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387086206", "createdAt": "2020-03-03T15:12:28Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -61,6 +70,83 @@ public void testEmpty() throws Exception {\n         }\n     }\n \n+    public void testUnmappedFieldWithDocs() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            if (randomBoolean()) {\n+                Document doc = new Document();\n+                doc.add(new LatLonDocValuesField(\"field\", 0.0, 0.0));\n+                w.addDocument(doc);\n+            }\n+\n+            GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                .field(\"non_existent\")\n+                .wrapLongitude(false);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+            try (IndexReader reader = w.getReader()) {\n+                IndexSearcher searcher = new IndexSearcher(reader);\n+                InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                assertTrue(Double.isInfinite(bounds.top));\n+                assertTrue(Double.isInfinite(bounds.bottom));\n+                assertTrue(Double.isInfinite(bounds.posLeft));\n+                assertTrue(Double.isInfinite(bounds.posRight));\n+                assertTrue(Double.isInfinite(bounds.negLeft));\n+                assertTrue(Double.isInfinite(bounds.negRight));\n+                assertFalse(AggregationInspectionHelper.hasValue(bounds));\n+            }\n+        }\n+    }\n+\n+    public void testMissing() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            Document doc = new Document();\n+            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDY0Mg==", "bodyText": "Nit - I would split this into two tests, for valid and invalid missing cases.", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387090642", "createdAt": "2020-03-03T15:18:46Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -61,6 +70,83 @@ public void testEmpty() throws Exception {\n         }\n     }\n \n+    public void testUnmappedFieldWithDocs() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            if (randomBoolean()) {\n+                Document doc = new Document();\n+                doc.add(new LatLonDocValuesField(\"field\", 0.0, 0.0));\n+                w.addDocument(doc);\n+            }\n+\n+            GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                .field(\"non_existent\")\n+                .wrapLongitude(false);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+            try (IndexReader reader = w.getReader()) {\n+                IndexSearcher searcher = new IndexSearcher(reader);\n+                InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                assertTrue(Double.isInfinite(bounds.top));\n+                assertTrue(Double.isInfinite(bounds.bottom));\n+                assertTrue(Double.isInfinite(bounds.posLeft));\n+                assertTrue(Double.isInfinite(bounds.posRight));\n+                assertTrue(Double.isInfinite(bounds.negLeft));\n+                assertTrue(Double.isInfinite(bounds.negRight));\n+                assertFalse(AggregationInspectionHelper.hasValue(bounds));\n+            }\n+        }\n+    }\n+\n+    public void testMissing() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            Document doc = new Document();\n+            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));\n+            w.addDocument(doc);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+\n+            Point point = GeometryTestUtils.randomPoint(false);\n+            double lon = point.getX();\n+            double lat = point.getY();\n+\n+            // valid missing values\n+            for (Object missingVal : List.of(\"POINT(\" + lon + \" \" + lat + \")\", lat + \", \" + lon, new GeoPoint(lat, lon))) {\n+                GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                    .field(\"field\")\n+                    .missing(missingVal)\n+                    .wrapLongitude(false);\n+\n+                try (IndexReader reader = w.getReader()) {\n+                    IndexSearcher searcher = new IndexSearcher(reader);\n+                    InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                    assertThat(bounds.top, equalTo(lat));\n+                    assertThat(bounds.bottom, equalTo(lat));\n+                    assertThat(bounds.posLeft, equalTo(lon >= 0 ? lon : Double.POSITIVE_INFINITY));\n+                    assertThat(bounds.posRight, equalTo(lon >= 0 ? lon : Double.NEGATIVE_INFINITY));\n+                    assertThat(bounds.negLeft, equalTo(lon >= 0 ? Double.POSITIVE_INFINITY : lon));\n+                    assertThat(bounds.negRight, equalTo(lon >= 0 ? Double.NEGATIVE_INFINITY : lon));\n+                }\n+            }\n+\n+            // invalid missing values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be81c3d163a8e51abb6c5a5d964cced2c376167", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/9be81c3d163a8e51abb6c5a5d964cced2c376167", "committedDate": "2020-03-03T16:47:36Z", "message": "Merge remote-tracking branch 'elastic/master' into geobounds-unittests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54168c086eecc300f3f90a6efc9ae1bbfaeea3a8", "author": {"user": {"login": "talevy", "name": "Tal Levy"}}, "url": "https://github.com/elastic/elasticsearch/commit/54168c086eecc300f3f90a6efc9ae1bbfaeea3a8", "committedDate": "2020-03-03T16:56:05Z", "message": "respond to review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1912, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}