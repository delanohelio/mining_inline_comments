{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTA4NTE3", "number": 58684, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNDowOFrOEJ_SXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozOTo1MVrOEJ_sqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTA5NTMyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/regression/MeanSquaredLogarithmicErrorMetric.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNDowOFrOGqxaUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo1NzoxMlrOGqywiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMjkzMQ==", "bodyText": "The field name \"error\" is confusing could this be \"msle\"", "url": "https://github.com/elastic/elasticsearch/pull/58684#discussion_r447502931", "createdAt": "2020-06-30T08:24:08Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/regression/MeanSquaredLogarithmicErrorMetric.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: msle = 1/n * \u03a3(log(y + offset) - log(y\u00b4 + offset))^2\n+ * where offset is used to make sure the argument to log function is always positive\n+ */\n+public class MeanSquaredLogarithmicErrorMetric implements EvaluationMetric {\n+\n+    public static final String NAME = \"mean_squared_logarithmic_error\";\n+\n+    public static final ParseField OFFSET = new ParseField(\"offset\");\n+\n+    private static final ConstructingObjectParser<MeanSquaredLogarithmicErrorMetric, Void> PARSER =\n+        new ConstructingObjectParser<>(NAME, true, args -> new MeanSquaredLogarithmicErrorMetric((Double) args[0]));\n+\n+    static {\n+        PARSER.declareDouble(optionalConstructorArg(), OFFSET);\n+    }\n+\n+    public static MeanSquaredLogarithmicErrorMetric fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    private final Double offset;\n+\n+    public MeanSquaredLogarithmicErrorMetric(@Nullable Double offset) {\n+        this.offset = offset;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        builder.startObject();\n+        if (offset != null) {\n+            builder.field(OFFSET.getPreferredName(), offset);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        MeanSquaredLogarithmicErrorMetric that = (MeanSquaredLogarithmicErrorMetric) o;\n+        return Objects.equals(this.offset, that.offset);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(offset);\n+    }\n+\n+    public static class Result implements EvaluationMetric.Result  {\n+\n+        public static final ParseField ERROR = new ParseField(\"error\");\n+        private final double error;\n+\n+        public static Result fromXContent(XContentParser parser) {\n+            return PARSER.apply(parser, null);\n+        }\n+\n+        private static final ConstructingObjectParser<Result, Void> PARSER =\n+            new ConstructingObjectParser<>(\"mean_squared_error_result\", true, args -> new Result((double) args[0]));\n+\n+        static {\n+            PARSER.declareDouble(constructorArg(), ERROR);\n+        }\n+\n+        public Result(double error) {\n+            this.error = error;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+            builder.startObject();\n+            builder.field(ERROR.getPreferredName(), error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33ade4d77a8c603c3ba4cc2bf5722e21b209401"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxODMwMQ==", "bodyText": "Actually I see MeanSquaredError also has a field \"error\" and in the context of the result object it makes sense", "url": "https://github.com/elastic/elasticsearch/pull/58684#discussion_r447518301", "createdAt": "2020-06-30T08:46:55Z", "author": {"login": "davidkyle"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/regression/MeanSquaredLogarithmicErrorMetric.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: msle = 1/n * \u03a3(log(y + offset) - log(y\u00b4 + offset))^2\n+ * where offset is used to make sure the argument to log function is always positive\n+ */\n+public class MeanSquaredLogarithmicErrorMetric implements EvaluationMetric {\n+\n+    public static final String NAME = \"mean_squared_logarithmic_error\";\n+\n+    public static final ParseField OFFSET = new ParseField(\"offset\");\n+\n+    private static final ConstructingObjectParser<MeanSquaredLogarithmicErrorMetric, Void> PARSER =\n+        new ConstructingObjectParser<>(NAME, true, args -> new MeanSquaredLogarithmicErrorMetric((Double) args[0]));\n+\n+    static {\n+        PARSER.declareDouble(optionalConstructorArg(), OFFSET);\n+    }\n+\n+    public static MeanSquaredLogarithmicErrorMetric fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    private final Double offset;\n+\n+    public MeanSquaredLogarithmicErrorMetric(@Nullable Double offset) {\n+        this.offset = offset;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        builder.startObject();\n+        if (offset != null) {\n+            builder.field(OFFSET.getPreferredName(), offset);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        MeanSquaredLogarithmicErrorMetric that = (MeanSquaredLogarithmicErrorMetric) o;\n+        return Objects.equals(this.offset, that.offset);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(offset);\n+    }\n+\n+    public static class Result implements EvaluationMetric.Result  {\n+\n+        public static final ParseField ERROR = new ParseField(\"error\");\n+        private final double error;\n+\n+        public static Result fromXContent(XContentParser parser) {\n+            return PARSER.apply(parser, null);\n+        }\n+\n+        private static final ConstructingObjectParser<Result, Void> PARSER =\n+            new ConstructingObjectParser<>(\"mean_squared_error_result\", true, args -> new Result((double) args[0]));\n+\n+        static {\n+            PARSER.declareDouble(constructorArg(), ERROR);\n+        }\n+\n+        public Result(double error) {\n+            this.error = error;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+            builder.startObject();\n+            builder.field(ERROR.getPreferredName(), error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMjkzMQ=="}, "originalCommit": {"oid": "e33ade4d77a8c603c3ba4cc2bf5722e21b209401"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNTAwMQ==", "bodyText": "I'm also tempted to rename the error field in both MeanSquaredError and MeanSquaredLogarithmicError to value, just like in RSquared. Then, I could use the same result class for all 3 metrics. WDYT?\nUpdate:\nI just saw @droberts195 mentioning the existing issue that aims at doing exactly the unification mentioned above ^^^\nWill implement that in a separate PR", "url": "https://github.com/elastic/elasticsearch/pull/58684#discussion_r447525001", "createdAt": "2020-06-30T08:57:12Z", "author": {"login": "przemekwitek"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/evaluation/regression/MeanSquaredLogarithmicErrorMetric.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.evaluation.regression;\n+\n+import org.elasticsearch.client.ml.dataframe.evaluation.EvaluationMetric;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+\n+/**\n+ * Calculates the mean squared error between two known numerical fields.\n+ *\n+ * equation: msle = 1/n * \u03a3(log(y + offset) - log(y\u00b4 + offset))^2\n+ * where offset is used to make sure the argument to log function is always positive\n+ */\n+public class MeanSquaredLogarithmicErrorMetric implements EvaluationMetric {\n+\n+    public static final String NAME = \"mean_squared_logarithmic_error\";\n+\n+    public static final ParseField OFFSET = new ParseField(\"offset\");\n+\n+    private static final ConstructingObjectParser<MeanSquaredLogarithmicErrorMetric, Void> PARSER =\n+        new ConstructingObjectParser<>(NAME, true, args -> new MeanSquaredLogarithmicErrorMetric((Double) args[0]));\n+\n+    static {\n+        PARSER.declareDouble(optionalConstructorArg(), OFFSET);\n+    }\n+\n+    public static MeanSquaredLogarithmicErrorMetric fromXContent(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    private final Double offset;\n+\n+    public MeanSquaredLogarithmicErrorMetric(@Nullable Double offset) {\n+        this.offset = offset;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        builder.startObject();\n+        if (offset != null) {\n+            builder.field(OFFSET.getPreferredName(), offset);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        MeanSquaredLogarithmicErrorMetric that = (MeanSquaredLogarithmicErrorMetric) o;\n+        return Objects.equals(this.offset, that.offset);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(offset);\n+    }\n+\n+    public static class Result implements EvaluationMetric.Result  {\n+\n+        public static final ParseField ERROR = new ParseField(\"error\");\n+        private final double error;\n+\n+        public static Result fromXContent(XContentParser parser) {\n+            return PARSER.apply(parser, null);\n+        }\n+\n+        private static final ConstructingObjectParser<Result, Void> PARSER =\n+            new ConstructingObjectParser<>(\"mean_squared_error_result\", true, args -> new Result((double) args[0]));\n+\n+        static {\n+            PARSER.declareDouble(constructorArg(), ERROR);\n+        }\n+\n+        public Result(double error) {\n+            this.error = error;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+            builder.startObject();\n+            builder.field(ERROR.getPreferredName(), error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMjkzMQ=="}, "originalCommit": {"oid": "e33ade4d77a8c603c3ba4cc2bf5722e21b209401"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTE2MjY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionEvaluationIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozOTo1MVrOGqyDlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo1ODoyNFrOGqyzsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMzQ5Mw==", "bodyText": "?? I would expect this to be set in the test setup but I don't see that", "url": "https://github.com/elastic/elasticsearch/pull/58684#discussion_r447513493", "createdAt": "2020-06-30T08:39:51Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionEvaluationIT.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.ml.action.EvaluateDataFrameAction;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.MeanSquaredError;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.MeanSquaredLogarithmicError;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.RSquared;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.Regression;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.util.List;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+public class RegressionEvaluationIT extends MlNativeDataFrameAnalyticsIntegTestCase {\n+\n+    private static final String HOUSES_DATA_INDEX = \"test-evaluate-houses-index\";\n+\n+    private static final String PRICE_FIELD = \"price\";\n+    private static final String PRICE_PREDICTION_FIELD = \"price_prediction\";\n+\n+    @Before\n+    public void setup() {\n+        createHousesIndex(HOUSES_DATA_INDEX);\n+        indexHousesData(HOUSES_DATA_INDEX);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanUp();\n+        client().admin().cluster()\n+            .prepareUpdateSettings()\n+            .setTransientSettings(Settings.builder().putNull(\"search.max_buckets\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33ade4d77a8c603c3ba4cc2bf5722e21b209401"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNTgxMA==", "bodyText": "This is a copy-paste thing (made sense in ClassificationEvaluationIT).\nThanks for noticing!", "url": "https://github.com/elastic/elasticsearch/pull/58684#discussion_r447525810", "createdAt": "2020-06-30T08:58:24Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionEvaluationIT.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.action.bulk.BulkRequestBuilder;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.ml.action.EvaluateDataFrameAction;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.EvaluationMetricResult;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.MeanSquaredError;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.MeanSquaredLogarithmicError;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.RSquared;\n+import org.elasticsearch.xpack.core.ml.dataframe.evaluation.regression.Regression;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.util.List;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+public class RegressionEvaluationIT extends MlNativeDataFrameAnalyticsIntegTestCase {\n+\n+    private static final String HOUSES_DATA_INDEX = \"test-evaluate-houses-index\";\n+\n+    private static final String PRICE_FIELD = \"price\";\n+    private static final String PRICE_PREDICTION_FIELD = \"price_prediction\";\n+\n+    @Before\n+    public void setup() {\n+        createHousesIndex(HOUSES_DATA_INDEX);\n+        indexHousesData(HOUSES_DATA_INDEX);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanUp();\n+        client().admin().cluster()\n+            .prepareUpdateSettings()\n+            .setTransientSettings(Settings.builder().putNull(\"search.max_buckets\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMzQ5Mw=="}, "originalCommit": {"oid": "e33ade4d77a8c603c3ba4cc2bf5722e21b209401"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2251, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}