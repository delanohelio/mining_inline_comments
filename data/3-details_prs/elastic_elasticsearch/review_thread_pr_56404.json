{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MDk4NjU3", "number": 56404, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowMzoyNFrOD69_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNjowMVrOD7mcGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTU5NTYzOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/string.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowMzoyNFrOGTDLZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowMzoyNFrOGTDLZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODE5OQ==", "bodyText": "maybe add info about the null handling?", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422628199", "createdAt": "2020-05-10T11:03:24Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/string.asciidoc", "diffHunk": "@@ -422,6 +422,30 @@ SPACE(count) <1>\n include-tagged::{sql-specs}/docs/docs.csv-spec[stringSpace]\n --------------------------------------------------\n \n+[[sql-functions-string-startswith]]\n+==== `STARTS_WITH`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+STARTS_WITH(\n+    source,   <1>\n+    pattern)  <2>\n+--------------------------------------------------\n+*Input*:\n+\n+<1> string expression\n+<2> string expression\n+\n+*Output*: boolean value\n+\n+*Description*: Returns `true` if the source expression starts with the specified pattern, `false` otherwise. The matching is case sensitive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTU5OTEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWith.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowNjozOVrOGTDM_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjozNTo0NlrOGTkMBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODYwNg==", "bodyText": "Maybe add isCaseSensitive to the ql configuration with default value and avoid the cast?", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422628606", "createdAt": "2020-05-10T11:06:39Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWith.java", "diffHunk": "@@ -6,115 +6,20 @@\n \n package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n \n+import org.elasticsearch.xpack.eql.session.EqlConfiguration;\n import org.elasticsearch.xpack.ql.expression.Expression;\n-import org.elasticsearch.xpack.ql.expression.Expressions;\n-import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n-import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n-import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n-import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n-import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n-import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n-import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.session.Configuration;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.type.DataType;\n-import org.elasticsearch.xpack.ql.type.DataTypes;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Locale;\n+public class StartsWith extends org.elasticsearch.xpack.ql.expression.function.scalar.string.StartsWith {\n \n-import static java.lang.String.format;\n-import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StartsWithFunctionProcessor.doProcess;\n-import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n-import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n-\n-/**\n- * Function that checks if first parameter starts with the second parameter. Both parameters should be strings\n- * and the function returns a boolean value. The function is case insensitive.\n- */\n-public class StartsWith extends ScalarFunction {\n-\n-    private final Expression source;\n-    private final Expression pattern;\n-\n-    public StartsWith(Source source, Expression src, Expression pattern) {\n-        super(source, Arrays.asList(src, pattern));\n-        this.source = src;\n-        this.pattern = pattern;\n-    }\n-\n-    @Override\n-    protected TypeResolution resolveType() {\n-        if (!childrenResolved()) {\n-            return new TypeResolution(\"Unresolved children\");\n-        }\n-\n-        TypeResolution sourceResolution = isStringAndExact(source, sourceText(), ParamOrdinal.FIRST);\n-        if (sourceResolution.unresolved()) {\n-            return sourceResolution;\n-        }\n-\n-        return isStringAndExact(pattern, sourceText(), ParamOrdinal.SECOND);\n+    public StartsWith(Source source, Expression field, Expression pattern, Configuration configuration) {\n+        super(source, field, pattern, configuration);\n     }\n \n     @Override\n-    protected Pipe makePipe() {\n-        return new StartsWithFunctionPipe(source(), this, Expressions.pipe(source), Expressions.pipe(pattern));\n-    }\n-\n-    @Override\n-    public boolean foldable() {\n-        return source.foldable() && pattern.foldable();\n-    }\n-\n-    @Override\n-    public Object fold() {\n-        return doProcess(source.fold(), pattern.fold());\n-    }\n-\n-    @Override\n-    protected NodeInfo<? extends Expression> info() {\n-        return NodeInfo.create(this, StartsWith::new, source, pattern);\n-    }\n-\n-    @Override\n-    public ScriptTemplate asScript() {\n-        ScriptTemplate sourceScript = asScript(source);\n-        ScriptTemplate patternScript = asScript(pattern);\n-\n-        return asScriptFrom(sourceScript, patternScript);\n-    }\n-    \n-    protected ScriptTemplate asScriptFrom(ScriptTemplate sourceScript, ScriptTemplate patternScript) {\n-        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s,%s)\"),\n-                \"startsWith\",\n-                sourceScript.template(),\n-                patternScript.template()),\n-                paramsBuilder()\n-                    .script(sourceScript.params())\n-                    .script(patternScript.params())\n-                    .build(), dataType());\n-    }\n-\n-    @Override\n-    public ScriptTemplate scriptWithField(FieldAttribute field) {\n-        return new ScriptTemplate(processScript(Scripts.DOC_VALUE),\n-                paramsBuilder().variable(field.exactAttribute().name()).build(),\n-                dataType());\n-    }\n-\n-    @Override\n-    public DataType dataType() {\n-        return DataTypes.BOOLEAN;\n-    }\n-\n-    @Override\n-    public Expression replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n-        }\n-\n-        return new StartsWith(source(), newChildren.get(0), newChildren.get(1));\n+    public boolean isCaseSensitive() {\n+        return ((EqlConfiguration) configuration()).isCaseSensitive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2OTAzMQ==", "bodyText": "I disagree - that would cause SqlConfiguration to have a case sensitivity option that is meaningless.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423169031", "createdAt": "2020-05-11T16:35:46Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWith.java", "diffHunk": "@@ -6,115 +6,20 @@\n \n package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n \n+import org.elasticsearch.xpack.eql.session.EqlConfiguration;\n import org.elasticsearch.xpack.ql.expression.Expression;\n-import org.elasticsearch.xpack.ql.expression.Expressions;\n-import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n-import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n-import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n-import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n-import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n-import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n-import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.session.Configuration;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.type.DataType;\n-import org.elasticsearch.xpack.ql.type.DataTypes;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Locale;\n+public class StartsWith extends org.elasticsearch.xpack.ql.expression.function.scalar.string.StartsWith {\n \n-import static java.lang.String.format;\n-import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StartsWithFunctionProcessor.doProcess;\n-import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n-import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n-\n-/**\n- * Function that checks if first parameter starts with the second parameter. Both parameters should be strings\n- * and the function returns a boolean value. The function is case insensitive.\n- */\n-public class StartsWith extends ScalarFunction {\n-\n-    private final Expression source;\n-    private final Expression pattern;\n-\n-    public StartsWith(Source source, Expression src, Expression pattern) {\n-        super(source, Arrays.asList(src, pattern));\n-        this.source = src;\n-        this.pattern = pattern;\n-    }\n-\n-    @Override\n-    protected TypeResolution resolveType() {\n-        if (!childrenResolved()) {\n-            return new TypeResolution(\"Unresolved children\");\n-        }\n-\n-        TypeResolution sourceResolution = isStringAndExact(source, sourceText(), ParamOrdinal.FIRST);\n-        if (sourceResolution.unresolved()) {\n-            return sourceResolution;\n-        }\n-\n-        return isStringAndExact(pattern, sourceText(), ParamOrdinal.SECOND);\n+    public StartsWith(Source source, Expression field, Expression pattern, Configuration configuration) {\n+        super(source, field, pattern, configuration);\n     }\n \n     @Override\n-    protected Pipe makePipe() {\n-        return new StartsWithFunctionPipe(source(), this, Expressions.pipe(source), Expressions.pipe(pattern));\n-    }\n-\n-    @Override\n-    public boolean foldable() {\n-        return source.foldable() && pattern.foldable();\n-    }\n-\n-    @Override\n-    public Object fold() {\n-        return doProcess(source.fold(), pattern.fold());\n-    }\n-\n-    @Override\n-    protected NodeInfo<? extends Expression> info() {\n-        return NodeInfo.create(this, StartsWith::new, source, pattern);\n-    }\n-\n-    @Override\n-    public ScriptTemplate asScript() {\n-        ScriptTemplate sourceScript = asScript(source);\n-        ScriptTemplate patternScript = asScript(pattern);\n-\n-        return asScriptFrom(sourceScript, patternScript);\n-    }\n-    \n-    protected ScriptTemplate asScriptFrom(ScriptTemplate sourceScript, ScriptTemplate patternScript) {\n-        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s,%s)\"),\n-                \"startsWith\",\n-                sourceScript.template(),\n-                patternScript.template()),\n-                paramsBuilder()\n-                    .script(sourceScript.params())\n-                    .script(patternScript.params())\n-                    .build(), dataType());\n-    }\n-\n-    @Override\n-    public ScriptTemplate scriptWithField(FieldAttribute field) {\n-        return new ScriptTemplate(processScript(Scripts.DOC_VALUE),\n-                paramsBuilder().variable(field.exactAttribute().name()).build(),\n-                dataType());\n-    }\n-\n-    @Override\n-    public DataType dataType() {\n-        return DataTypes.BOOLEAN;\n-    }\n-\n-    @Override\n-    public Expression replaceChildren(List<Expression> newChildren) {\n-        if (newChildren.size() != 2) {\n-            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n-        }\n-\n-        return new StartsWith(source(), newChildren.get(0), newChildren.get(1));\n+    public boolean isCaseSensitive() {\n+        return ((EqlConfiguration) configuration()).isCaseSensitive();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODYwNg=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTU5OTkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/resources/org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowNzozNlrOGTDNYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MToxNlrOGT5_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODcwNw==", "bodyText": "Why did you add an extra ASCII Functions block?\nhttps://github.com/elastic/elasticsearch/pull/56404/files#diff-610841f585d6bbff1fd42fb91c3c424aR65", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422628707", "createdAt": "2020-05-10T11:07:36Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/resources/org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt", "diffHunk": "@@ -18,6 +18,11 @@ class org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQl\n   double nullSafeSortNumeric(Number)\n   String nullSafeSortString(Object)\n \n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxODU2Mw==", "bodyText": "This ASCII block is under a different ScriptUtils class. The method comes via QL, whereas the other ASCII block handles EQL specific functions.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423518563", "createdAt": "2020-05-12T07:27:28Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/resources/org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt", "diffHunk": "@@ -18,6 +18,11 @@ class org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQl\n   double nullSafeSortNumeric(Number)\n   String nullSafeSortString(Object)\n \n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODcwNw=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjIxMQ==", "bodyText": "Sorry, missed that.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423526211", "createdAt": "2020-05-12T07:41:16Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/resources/org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt", "diffHunk": "@@ -18,6 +18,11 @@ class org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQl\n   double nullSafeSortNumeric(Number)\n   String nullSafeSortString(Object)\n \n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODcwNw=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYwMDMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowODowMlrOGTDNmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowODowMlrOGTDNmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODc2MQ==", "bodyText": "minor: whitespace", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422628761", "createdAt": "2020-05-10T11:08:02Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java", "diffHunk": "@@ -1,11 +1,12 @@\n /*\n- * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+  * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYwNTY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToxMzo0NlrOGTDQMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToxMzo0NlrOGTDQMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTQyNQ==", "bodyText": "Could you please add test with just changing the case sensitive flag?\nand maybe one more where all of field/pattern/caseSensitive/flag are changed.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422629425", "createdAt": "2020-05-10T11:13:46Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipeTests.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.TestUtils;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.AbstractNodeTestCase;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import static org.elasticsearch.xpack.ql.expression.Expressions.pipe;\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomStringLiteral;\n+import static org.elasticsearch.xpack.ql.tree.SourceTests.randomSource;\n+\n+public class StartsWithFunctionPipeTests extends AbstractNodeTestCase<StartsWithFunctionPipe, Pipe> {\n+\n+    @Override\n+    protected StartsWithFunctionPipe randomInstance() {\n+        return randomStartsWithFunctionPipe();\n+    }\n+    \n+    private Expression randomStartsWithFunctionExpression() {\n+        return randomStartsWithFunctionPipe().expression();\n+    }\n+    \n+    public static StartsWithFunctionPipe randomStartsWithFunctionPipe() {\n+        return (StartsWithFunctionPipe) (new StartsWith(randomSource(),\n+                            randomStringLiteral(),\n+                            randomStringLiteral(),\n+                            TestUtils.randomConfiguration())\n+                .makePipe());\n+    }\n+\n+    @Override\n+    public void testTransform() {\n+        // test transforming only the properties (source, expression),\n+        // skipping the children (the two parameters of the binary function) which are tested separately\n+        StartsWithFunctionPipe b1 = randomInstance();\n+        Expression newExpression = randomValueOtherThan(b1.expression(), () -> randomStartsWithFunctionExpression());\n+        StartsWithFunctionPipe newB = new StartsWithFunctionPipe(\n+            b1.source(),\n+            newExpression,\n+            b1.field(),\n+            b1.pattern(),\n+            b1.isCaseSensitive());\n+\n+        assertEquals(newB, b1.transformPropertiesOnly(v -> Objects.equals(v, b1.expression()) ? newExpression : v, Expression.class));\n+        \n+        StartsWithFunctionPipe b2 = randomInstance();\n+        Source newLoc = randomValueOtherThan(b2.source(), () -> randomSource());\n+        newB = new StartsWithFunctionPipe(\n+                newLoc,\n+                b2.expression(),\n+                b2.field(),\n+                b2.pattern(),\n+                b2.isCaseSensitive());\n+\n+        assertEquals(newB,\n+                b2.transformPropertiesOnly(v -> Objects.equals(v, b2.source()) ? newLoc : v, Source.class));\n+    }\n+\n+    @Override\n+    public void testReplaceChildren() {\n+        StartsWithFunctionPipe b = randomInstance();\n+        Pipe newField = pipe(((Expression) randomValueOtherThan(b.field(), () -> randomStringLiteral())));\n+        Pipe newPattern = pipe(((Expression) randomValueOtherThan(b.pattern(), () -> randomStringLiteral())));\n+        \n+        StartsWithFunctionPipe newB = new StartsWithFunctionPipe(b.source(), b.expression(), b.field(), b.pattern(), b.isCaseSensitive());\n+        StartsWithFunctionPipe transformed = (StartsWithFunctionPipe) newB.replaceChildren(newField, b.pattern());\n+        assertEquals(transformed.field(), newField);\n+        assertEquals(transformed.source(), b.source());\n+        assertEquals(transformed.expression(), b.expression());\n+        assertEquals(transformed.pattern(), b.pattern());\n+        \n+        transformed = (StartsWithFunctionPipe) newB.replaceChildren(b.field(), newPattern);\n+        assertEquals(transformed.field(), b.field());\n+        assertEquals(transformed.source(), b.source());\n+        assertEquals(transformed.expression(), b.expression());\n+        assertEquals(transformed.pattern(), newPattern);\n+        \n+        transformed = (StartsWithFunctionPipe) newB.replaceChildren(newField, newPattern);\n+        assertEquals(transformed.field(), newField);\n+        assertEquals(transformed.source(), b.source());\n+        assertEquals(transformed.expression(), b.expression());\n+        assertEquals(transformed.pattern(), newPattern);\n+    }\n+\n+    @Override\n+    protected StartsWithFunctionPipe mutate(StartsWithFunctionPipe instance) {\n+        List<Function<StartsWithFunctionPipe, StartsWithFunctionPipe>> randoms = new ArrayList<>();\n+        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n+                f.expression(),\n+                pipe(((Expression) randomValueOtherThan(f.field(), () -> randomStringLiteral()))),\n+                f.pattern(),\n+                f.isCaseSensitive()));\n+        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n+                f.expression(),\n+                f.field(),\n+                pipe(((Expression) randomValueOtherThan(f.pattern(), () -> randomStringLiteral()))),\n+                f.isCaseSensitive()));\n+        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n+                f.expression(),\n+                pipe(((Expression) randomValueOtherThan(f.field(), () -> randomStringLiteral()))),\n+                pipe(((Expression) randomValueOtherThan(f.pattern(), () -> randomStringLiteral()))),\n+                f.isCaseSensitive()));\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYwODY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/resources/org/elasticsearch/xpack/sql/plugin/sql_whitelist.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToxNjo0OFrOGTDRqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo1ODoxM1rOGT6m0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTgwMA==", "bodyText": "Same here, there is a block for ascii functions: https://github.com/elastic/elasticsearch/pull/56404/files#diff-edef662ace9df6873edfc33572672eeeR144", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422629800", "createdAt": "2020-05-10T11:16:48Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/resources/org/elasticsearch/xpack/sql/plugin/sql_whitelist.txt", "diffHunk": "@@ -29,6 +29,11 @@ class org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQl\n   double nullSafeSortNumeric(Number)\n   String nullSafeSortString(Object)\n \n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNjMzNg==", "bodyText": "Yep, same here. Different ScriptUtils class that feeds the painless method in sql.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423536336", "createdAt": "2020-05-12T07:58:13Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/resources/org/elasticsearch/xpack/sql/plugin/sql_whitelist.txt", "diffHunk": "@@ -29,6 +29,11 @@ class org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQl\n   double nullSafeSortNumeric(Number)\n   String nullSafeSortString(Object)\n \n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTgwMA=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYwOTQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/resources/docs/docs.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToxNzo0OFrOGTDSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToxNzo0OFrOGTDSHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTkxNw==", "bodyText": "Maybe and example with different case so it returns false.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422629917", "createdAt": "2020-05-10T11:17:48Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/resources/docs/docs.csv-spec", "diffHunk": "@@ -1798,6 +1799,16 @@ SELECT SPACE(3);\n // end::stringSpace\n ;\n \n+stringStartsWith\n+// tag::stringStartsWith\n+SELECT STARTS_WITH('Elasticsearch', 'Elastic');\n+\n+STARTS_WITH('Elasticsearch', 'Elastic')\n+--------------------------------\n+true    \n+// end::stringStartsWith\n+;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYxMjg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToyMDo1MlrOGTDTrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowNDo0MVrOGT61VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDMxNg==", "bodyText": "Maybe remove the Function as we don't normally use it in processor names.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422630316", "createdAt": "2020-05-10T11:20:52Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -20,43 +20,51 @@\n \n     private final Processor source;\n     private final Processor pattern;\n+    private final boolean isCaseSensitive;\n \n-    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern, boolean isCaseSensitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MDA1Mw==", "bodyText": "There are functions where this pattern is used - String functions.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423540053", "createdAt": "2020-05-12T08:04:41Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -20,43 +20,51 @@\n \n     private final Processor source;\n     private final Processor pattern;\n+    private final boolean isCaseSensitive;\n \n-    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern, boolean isCaseSensitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDMxNg=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYxMzIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipe.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToyMToxMVrOGTDT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToyMToxMVrOGTDT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDM2MQ==", "bodyText": "Maybe remove Function from the name.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r422630361", "createdAt": "2020-05-10T11:21:11Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipe.java", "diffHunk": "@@ -17,13 +17,15 @@\n \n public class StartsWithFunctionPipe extends Pipe {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTE3ODE1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjoxOTozOFrOGTjkgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjoxOTozOFrOGTjkgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1ODkxMg==", "bodyText": "It's idiomatic to use assume which will indicate to the framework that the test has not actually ran.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423158912", "createdAt": "2020-05-11T16:19:38Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java", "diffHunk": "@@ -114,6 +110,11 @@ private static void addSpec(ArrayList<Object[]> arr, String name, String query,\n     }\n \n     public void test() {\n+        // skip tests that do not make sense from case sensitivity point of view", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTE5NzE4OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjoyNDoyOFrOGTjwng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoyMzowNFrOGT7iAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2MjAxNA==", "bodyText": "What's the advantage of using Configuration instead of SqlConfiguration?", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423162014", "createdAt": "2020-05-11T16:24:28Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java", "diffHunk": "@@ -22,7 +22,7 @@\n import org.elasticsearch.xpack.sql.planner.Planner;\n import org.elasticsearch.xpack.sql.planner.PlanningException;\n import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;\n-import org.elasticsearch.xpack.sql.session.Configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1MTQ5MA==", "bodyText": "This is just a rename. The SQL's Configuration => SqlConfiguration.\nThe same for Eql. EQL's Configuration was renamed to EqlConfiguration.\nI found it a bit confusing to have Configuration in three separate projects.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423551490", "createdAt": "2020-05-12T08:23:04Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java", "diffHunk": "@@ -22,7 +22,7 @@\n import org.elasticsearch.xpack.sql.planner.Planner;\n import org.elasticsearch.xpack.sql.planner.PlanningException;\n import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;\n-import org.elasticsearch.xpack.sql.session.Configuration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2MjAxNA=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTIyNjAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/NoArgumentsConfigurationFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjozMjowNVrOGTkDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoyNDoxMVrOGT7kuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2Njc3Ng==", "bodyText": "The name is unfortunate - how about SqlConfigurationFunction, BasicConfigurationFunction or DefaultConfigurationFunction, etc...", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423166776", "createdAt": "2020-05-11T16:32:05Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/NoArgumentsConfigurationFunction.java", "diffHunk": "@@ -17,14 +17,14 @@\n import java.util.List;\n import java.util.Objects;\n \n-public abstract class ConfigurationFunction extends ScalarFunction {\n+import static java.util.Collections.emptyList;\n+\n+public abstract class NoArgumentsConfigurationFunction extends ConfigurationFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1MjE4Nw==", "bodyText": "Agree. Will change.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423552187", "createdAt": "2020-05-12T08:24:11Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/NoArgumentsConfigurationFunction.java", "diffHunk": "@@ -17,14 +17,14 @@\n import java.util.List;\n import java.util.Objects;\n \n-public abstract class ConfigurationFunction extends ScalarFunction {\n+import static java.util.Collections.emptyList;\n+\n+public abstract class NoArgumentsConfigurationFunction extends ConfigurationFunction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2Njc3Ng=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTIzMzg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/session/EqlSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjozNDowOFrOGTkIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoyOTo1MlrOGT7zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2ODAxNA==", "bodyText": "That's unfortunate - do we need a Verifier instance each time?", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423168014", "createdAt": "2020-05-11T16:34:08Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/session/EqlSession.java", "diffHunk": "@@ -27,22 +29,22 @@\n public class EqlSession {\n \n     private final Client client;\n-    private final Configuration configuration;\n+    private final EqlConfiguration configuration;\n     private final IndexResolver indexResolver;\n \n     private final PreAnalyzer preAnalyzer;\n     private final Analyzer analyzer;\n     private final Optimizer optimizer;\n     private final Planner planner;\n \n-    public EqlSession(Client client, Configuration cfg, IndexResolver indexResolver, PreAnalyzer preAnalyzer, Analyzer analyzer,\n-            Optimizer optimizer, Planner planner, PlanExecutor planExecutor) {\n+    public EqlSession(Client client, EqlConfiguration cfg, IndexResolver indexResolver, PreAnalyzer preAnalyzer,\n+            FunctionRegistry functionRegistry, Optimizer optimizer, Planner planner, PlanExecutor planExecutor) {\n \n         this.client = new ParentTaskAssigningClient(client, cfg.getTaskId());\n         this.configuration = cfg;\n         this.indexResolver = indexResolver;\n         this.preAnalyzer = preAnalyzer;\n-        this.analyzer = analyzer;\n+        this.analyzer = new Analyzer(cfg, functionRegistry, new Verifier());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1NTk4Mw==", "bodyText": "You are correct. We can create the Verifier once in the plan executor and pass that along. Will change.", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423555983", "createdAt": "2020-05-12T08:29:52Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/session/EqlSession.java", "diffHunk": "@@ -27,22 +29,22 @@\n public class EqlSession {\n \n     private final Client client;\n-    private final Configuration configuration;\n+    private final EqlConfiguration configuration;\n     private final IndexResolver indexResolver;\n \n     private final PreAnalyzer preAnalyzer;\n     private final Analyzer analyzer;\n     private final Optimizer optimizer;\n     private final Planner planner;\n \n-    public EqlSession(Client client, Configuration cfg, IndexResolver indexResolver, PreAnalyzer preAnalyzer, Analyzer analyzer,\n-            Optimizer optimizer, Planner planner, PlanExecutor planExecutor) {\n+    public EqlSession(Client client, EqlConfiguration cfg, IndexResolver indexResolver, PreAnalyzer preAnalyzer,\n+            FunctionRegistry functionRegistry, Optimizer optimizer, Planner planner, PlanExecutor planExecutor) {\n \n         this.client = new ParentTaskAssigningClient(client, cfg.getTaskId());\n         this.configuration = cfg;\n         this.indexResolver = indexResolver;\n         this.preAnalyzer = preAnalyzer;\n-        this.analyzer = analyzer;\n+        this.analyzer = new Analyzer(cfg, functionRegistry, new Verifier());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2ODAxNA=="}, "originalCommit": {"oid": "166c232dba6e9eb18aefebb8de38ec238f87e96d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODIyMTA1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipeTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNToxM1rOGUBcnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNToxM1rOGUBcnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0ODQxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(int i = 1; i < 4; i++) {\n          \n          \n            \n                    for (int i = 1; i < 4; i++) {", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423648415", "createdAt": "2020-05-12T11:05:13Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipeTests.java", "diffHunk": "@@ -97,21 +99,18 @@ public void testReplaceChildren() {\n     @Override\n     protected StartsWithFunctionPipe mutate(StartsWithFunctionPipe instance) {\n         List<Function<StartsWithFunctionPipe, StartsWithFunctionPipe>> randoms = new ArrayList<>();\n-        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n-                f.expression(),\n-                pipe(((Expression) randomValueOtherThan(f.field(), () -> randomStringLiteral()))),\n-                f.pattern(),\n-                f.isCaseSensitive()));\n-        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n-                f.expression(),\n-                f.field(),\n-                pipe(((Expression) randomValueOtherThan(f.pattern(), () -> randomStringLiteral()))),\n-                f.isCaseSensitive()));\n-        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n-                f.expression(),\n-                pipe(((Expression) randomValueOtherThan(f.field(), () -> randomStringLiteral()))),\n-                pipe(((Expression) randomValueOtherThan(f.pattern(), () -> randomStringLiteral()))),\n-                f.isCaseSensitive()));\n+        for(int i = 1; i < 4; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b39a6e4596580cc7a9e38261a121a0d9500bdbf0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODIyMzYwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipeTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNjowMVrOGUBeRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowNjowMVrOGUBeRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0ODgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for(BitSet comb : new Combinations(3, i)) {\n          \n          \n            \n                        for (BitSet comb : new Combinations(3, i)) {", "url": "https://github.com/elastic/elasticsearch/pull/56404#discussion_r423648838", "createdAt": "2020-05-12T11:06:01Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/expression/function/scalar/string/StartsWithFunctionPipeTests.java", "diffHunk": "@@ -97,21 +99,18 @@ public void testReplaceChildren() {\n     @Override\n     protected StartsWithFunctionPipe mutate(StartsWithFunctionPipe instance) {\n         List<Function<StartsWithFunctionPipe, StartsWithFunctionPipe>> randoms = new ArrayList<>();\n-        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n-                f.expression(),\n-                pipe(((Expression) randomValueOtherThan(f.field(), () -> randomStringLiteral()))),\n-                f.pattern(),\n-                f.isCaseSensitive()));\n-        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n-                f.expression(),\n-                f.field(),\n-                pipe(((Expression) randomValueOtherThan(f.pattern(), () -> randomStringLiteral()))),\n-                f.isCaseSensitive()));\n-        randoms.add(f -> new StartsWithFunctionPipe(f.source(),\n-                f.expression(),\n-                pipe(((Expression) randomValueOtherThan(f.field(), () -> randomStringLiteral()))),\n-                pipe(((Expression) randomValueOtherThan(f.pattern(), () -> randomStringLiteral()))),\n-                f.isCaseSensitive()));\n+        for(int i = 1; i < 4; i++) {\n+            for(BitSet comb : new Combinations(3, i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b39a6e4596580cc7a9e38261a121a0d9500bdbf0"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 650, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}