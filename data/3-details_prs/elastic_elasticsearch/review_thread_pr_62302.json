{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NTMwNjc1", "number": 62302, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToyOToxOVrOEjFNFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowODoxOFrOEjF_Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjIwODg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/bytes/AbstractBytesReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToyOToxOVrOHRPduw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToyOToxOVrOHRPduw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0MTIxMQ==", "bodyText": "neat :)", "url": "https://github.com/elastic/elasticsearch/pull/62302#discussion_r487841211", "createdAt": "2020-09-14T11:29:19Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/AbstractBytesReference.java", "diffHunk": "@@ -308,11 +309,16 @@ public long skip(long n) throws IOException {\n \n         @Override\n         public void reset() throws IOException {\n-            iterator = iterator();\n-            slice = iterator.next();\n-            sliceStartOffset = 0;\n-            sliceIndex = 0;\n-            skip(mark);\n+            if (sliceStartOffset <= mark) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e80e997e2e75813e78c822a97d47a0e1ea30093"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjMzNzE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/bytes/AbstractBytesReference.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowODoxOFrOHRQqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNzozNVrOHRTTbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2MDkwNw==", "bodyText": "Not sure I'm the biggest fan of this, it's just a slower method on the hot path (much larger and won't always inline perfectly I think) isn't it + it requires the reader to look into what ByteSizeUnit.BYTES.toIntBytes does when the previous version was crystal clear here?", "url": "https://github.com/elastic/elasticsearch/pull/62302#discussion_r487860907", "createdAt": "2020-09-14T12:08:18Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/AbstractBytesReference.java", "diffHunk": "@@ -293,8 +295,7 @@ protected void ensureCanReadBytes(int bytesToRead) throws EOFException {\n \n         @Override\n         public long skip(long n) throws IOException {\n-            final int skip = (int) Math.min(Integer.MAX_VALUE, n);\n-            final int numBytesSkipped =  Math.min(skip, length() - offset());\n+            final int numBytesSkipped = ByteSizeUnit.BYTES.toIntBytes(Math.min(n, length() - offset()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e80e997e2e75813e78c822a97d47a0e1ea30093"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDExMA==", "bodyText": "Yeah ok we don't really need this assertion. There's a latent bug in the original code if called with n < Integer.MIN_VALUE: the cast would overflow and maybe we'd skip too much, and also the callers are not all super-strict at checking we skipped what we wanted to. Changed to a different assertion and lighter code in 5bb4280.", "url": "https://github.com/elastic/elasticsearch/pull/62302#discussion_r487904110", "createdAt": "2020-09-14T13:17:35Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/bytes/AbstractBytesReference.java", "diffHunk": "@@ -293,8 +295,7 @@ protected void ensureCanReadBytes(int bytesToRead) throws EOFException {\n \n         @Override\n         public long skip(long n) throws IOException {\n-            final int skip = (int) Math.min(Integer.MAX_VALUE, n);\n-            final int numBytesSkipped =  Math.min(skip, length() - offset());\n+            final int numBytesSkipped = ByteSizeUnit.BYTES.toIntBytes(Math.min(n, length() - offset()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2MDkwNw=="}, "originalCommit": {"oid": "4e80e997e2e75813e78c822a97d47a0e1ea30093"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1540, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}