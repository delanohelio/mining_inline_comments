{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MjQ0MDQy", "number": 53572, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MjoyMlrODoS_nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MjoyMlrODoS_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTgwODI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/TransformIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MjoyMlrOF2wiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MjoyMlrOF2wiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MjY5OQ==", "bodyText": "This feels like debug to me.", "url": "https://github.com/elastic/elasticsearch/pull/53572#discussion_r392962699", "createdAt": "2020-03-16T11:52:22Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/TransformIndex.java", "diffHunk": "@@ -10,99 +10,135 @@\n import org.apache.logging.log4j.Logger;\n import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.alias.Alias;\n import org.elasticsearch.action.admin.indices.create.CreateIndexAction;\n import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n import org.elasticsearch.client.Client;\n import org.elasticsearch.cluster.metadata.IndexMetaData;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.xpack.core.transform.TransformField;\n import org.elasticsearch.xpack.core.transform.TransformMessages;\n import org.elasticsearch.xpack.core.transform.transforms.TransformConfig;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformDestIndexSettings;\n \n-import java.io.IOException;\n import java.time.Clock;\n+import java.util.HashMap;\n import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n-import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;\n+import java.util.Set;\n \n public final class TransformIndex {\n     private static final Logger logger = LogManager.getLogger(TransformIndex.class);\n \n     private static final String PROPERTIES = \"properties\";\n-    private static final String TYPE = \"type\";\n     private static final String META = \"_meta\";\n \n-    private TransformIndex() {\n-    }\n+    private TransformIndex() {}\n \n-    public static void createDestinationIndex(Client client,\n-                                              Clock clock,\n-                                              TransformConfig transformConfig,\n-                                              Map<String, String> mappings,\n-                                              ActionListener<Boolean> listener) {\n+    public static void createDestinationIndex(\n+        Client client,\n+        TransformConfig transformConfig,\n+        TransformDestIndexSettings destIndexSettings,\n+        ActionListener<Boolean> listener\n+    ) {\n         CreateIndexRequest request = new CreateIndexRequest(transformConfig.getDestination().getIndex());\n \n-        // TODO: revisit number of shards, number of replicas\n-        request.settings(Settings.builder() // <1>\n-                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n-                .put(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS, \"0-1\"));\n-\n-        request.mapping(createMappingXContent(mappings, transformConfig.getId(), clock));\n-\n-        client.execute(CreateIndexAction.INSTANCE, request, ActionListener.wrap(createIndexResponse -> {\n-            listener.onResponse(true);\n-        }, e -> {\n-            String message = TransformMessages.getMessage(TransformMessages.FAILED_TO_CREATE_DESTINATION_INDEX,\n-                    transformConfig.getDestination().getIndex(), transformConfig.getId());\n-            logger.error(message);\n-            listener.onFailure(new RuntimeException(message, e));\n-        }));\n-    }\n-\n-    private static XContentBuilder createMappingXContent(Map<String, String> mappings,\n-                                                         String id,\n-                                                         Clock clock) {\n-        try {\n-            XContentBuilder builder = jsonBuilder().startObject();\n-            builder.startObject(SINGLE_MAPPING_NAME);\n-            addProperties(builder, mappings);\n-            addMetaData(builder, id, clock);\n-            builder.endObject(); // _doc type\n-            return builder.endObject();\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n+        request.settings(destIndexSettings.getSettings());\n+        request.mapping(destIndexSettings.getMappings());\n+        for (Alias alias : destIndexSettings.getAliases()) {\n+            request.alias(alias);\n         }\n+\n+        client.execute(\n+            CreateIndexAction.INSTANCE,\n+            request,\n+            ActionListener.wrap(createIndexResponse -> { listener.onResponse(true); }, e -> {\n+                String message = TransformMessages.getMessage(\n+                    TransformMessages.FAILED_TO_CREATE_DESTINATION_INDEX,\n+                    transformConfig.getDestination().getIndex(),\n+                    transformConfig.getId()\n+                );\n+                logger.error(message);\n+                listener.onFailure(new RuntimeException(message, e));\n+            })\n+        );\n     }\n \n-    private static XContentBuilder addProperties(XContentBuilder builder,\n-                                                 Map<String, String> mappings) throws IOException {\n-        builder.startObject(PROPERTIES);\n-        for (Entry<String, String> field : mappings.entrySet()) {\n-            String fieldName = field.getKey();\n-            String fieldType = field.getValue();\n+    public static TransformDestIndexSettings createTransformDestIndexSettings(Map<String, String> mappings, String id, Clock clock) {\n+        Map<String, Object> indexMappings = new HashMap<>();\n+        indexMappings.put(PROPERTIES, createMappingsFromStringMap(mappings));\n+        indexMappings.put(META, createMetaData(id, clock));\n \n-            builder.startObject(fieldName);\n-            builder.field(TYPE, fieldType);\n+        Settings settings = createSettings();\n \n-            builder.endObject();\n-        }\n-        builder.endObject(); // PROPERTIES\n-        return builder;\n+        // transform does not create aliases, however the user might customize this in future\n+        Set<Alias> aliases = null;\n+        logger.info(\"mapping {} setting {}\", indexMappings, settings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b466fb058ba59ab39d4c19865cb2ae18c6ceee4b"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3250, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}