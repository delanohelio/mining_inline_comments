{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDYxODM0", "number": 52712, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1MDoyNlrODioiQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1Nzo1MFrODjxioA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQyMzA1OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/transform-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1MDoyNlrOFt_YZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1MDoyNlrOFt_YZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2ODY3Nw==", "bodyText": "^ @elastic/ml-docs", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r383768677", "createdAt": "2020-02-25T09:50:26Z", "author": {"login": "hendrikmuhs"}, "path": "docs/reference/settings/transform-settings.asciidoc", "diffHunk": "@@ -9,17 +9,28 @@\n \n You do not need to configure any settings to use {transforms}. It is enabled by default.\n \n-All of these settings can be added to the `elasticsearch.yml` configuration file. \n-The dynamic settings can also be updated across a cluster with the \n+All of these settings can be added to the `elasticsearch.yml` configuration file.\n+The dynamic settings can also be updated across a cluster with the\n <<cluster-update-settings,cluster update settings API>>.\n \n-TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml` \n+TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml`\n file.\n \n [float]\n-[[general-data-frames-settings]]\n+[[general-transform-settings]]\n ==== General {transforms} settings\n \n+`node.transform`::\n+Set to `true` (default) to identify the node as a _transform node_. +\n++\n+If set to `false` in `elasticsearch.yml`, the node cannot run transforms. If set to\n+`true` but `xpack.transform.enabled` is set to `false`, the `node.transform` setting is\n+ignored and the node cannot run transforms. If you want to run transforms, there must be at\n+least one transform node in your cluster. +\n++\n+IMPORTANT: It is advised to use the `node.transform` setting to constrain the execution\n+of transforms to certain nodes instead of using `xpack.transform.enabled`.\n+\n `xpack.transform.enabled`::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc72b3cbb5b826135c69631dd12bdf0ceda5075"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjUxODIwOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/transform-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoxNjo1OFrOFuATCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoxNjo1OFrOFuATCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4MzY5MA==", "bodyText": "Maybe also copy across the important note from https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html#general-ml-settings\n\nOn dedicated coordinating nodes or dedicated master nodes, disable the node.transform role.\n\nIf we thought that was important enough to say for ML nodes then it should be important enough to say for transform nodes.", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r383783690", "createdAt": "2020-02-25T10:16:58Z", "author": {"login": "droberts195"}, "path": "docs/reference/settings/transform-settings.asciidoc", "diffHunk": "@@ -9,17 +9,28 @@\n \n You do not need to configure any settings to use {transforms}. It is enabled by default.\n \n-All of these settings can be added to the `elasticsearch.yml` configuration file. \n-The dynamic settings can also be updated across a cluster with the \n+All of these settings can be added to the `elasticsearch.yml` configuration file.\n+The dynamic settings can also be updated across a cluster with the\n <<cluster-update-settings,cluster update settings API>>.\n \n-TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml` \n+TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml`\n file.\n \n [float]\n-[[general-data-frames-settings]]\n+[[general-transform-settings]]\n ==== General {transforms} settings\n \n+`node.transform`::\n+Set to `true` (default) to identify the node as a _transform node_. +\n++\n+If set to `false` in `elasticsearch.yml`, the node cannot run transforms. If set to\n+`true` but `xpack.transform.enabled` is set to `false`, the `node.transform` setting is\n+ignored and the node cannot run transforms. If you want to run transforms, there must be at\n+least one transform node in your cluster. +\n++\n+IMPORTANT: It is advised to use the `node.transform` setting to constrain the execution\n+of transforms to certain nodes instead of using `xpack.transform.enabled`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb49f86e6f6e96fddf4b507ae68efe8a1f88ad5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjU5ODU1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDozODowNFrOFuBClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDozODowNFrOFuBClg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc5NTg2Mg==", "bodyText": "nit: two strings appended on same line could be made into a single string", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r383795862", "createdAt": "2020-02-25T10:38:04Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "diffHunk": "@@ -296,13 +321,40 @@ protected XPackLicenseState getLicenseState() {\n         // the transform services should have been created\n         assert transformServices.get() != null;\n \n-        return Collections.singletonList(new TransformPersistentTasksExecutor(client, transformServices.get(), threadPool, clusterService,\n-            settingsModule.getSettings(), expressionResolver));\n+        return Collections.singletonList(\n+            new TransformPersistentTasksExecutor(\n+                client,\n+                transformServices.get(),\n+                threadPool,\n+                clusterService,\n+                settingsModule.getSettings(),\n+                expressionResolver\n+            )\n+        );\n     }\n \n     @Override\n     public List<Setting<?>> getSettings() {\n-        return Collections.singletonList(NUM_FAILURE_RETRIES_SETTING);\n+        return Collections.unmodifiableList(Arrays.asList(TRANSFORM_ENABLED_NODE, NUM_FAILURE_RETRIES_SETTING));\n+    }\n+\n+    @Override\n+    public Settings additionalSettings() {\n+        String transformEnabledNodeAttribute = \"node.attr.\" + TRANSFORM_ENABLED_NODE_ATTR;\n+        String transformRemoteEnabledNodeAttribute = \"node.attr.\" + TRANSFORM_REMOTE_ENABLED_NODE_ATTR;\n+\n+        if (settings.get(transformEnabledNodeAttribute) != null || settings.get(transformRemoteEnabledNodeAttribute) != null) {\n+            throw new IllegalArgumentException(\n+                \"Directly setting transform node attributes is not permitted,\" + \" please use the documented node settings instead\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb49f86e6f6e96fddf4b507ae68efe8a1f88ad5"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjYxNjEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDo0Mjo1MVrOFuBMvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDo0Mjo1MVrOFuBMvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc5ODQ2MA==", "bodyText": "It should return Settings.EMPTY here if enabled == false.\nSame as ML does in \n  \n    \n      elasticsearch/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java\n    \n    \n         Line 463\n      in\n      0d1e67d\n    \n    \n    \n    \n\n        \n          \n           return Settings.EMPTY;", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r383798460", "createdAt": "2020-02-25T10:42:51Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "diffHunk": "@@ -296,13 +321,40 @@ protected XPackLicenseState getLicenseState() {\n         // the transform services should have been created\n         assert transformServices.get() != null;\n \n-        return Collections.singletonList(new TransformPersistentTasksExecutor(client, transformServices.get(), threadPool, clusterService,\n-            settingsModule.getSettings(), expressionResolver));\n+        return Collections.singletonList(\n+            new TransformPersistentTasksExecutor(\n+                client,\n+                transformServices.get(),\n+                threadPool,\n+                clusterService,\n+                settingsModule.getSettings(),\n+                expressionResolver\n+            )\n+        );\n     }\n \n     @Override\n     public List<Setting<?>> getSettings() {\n-        return Collections.singletonList(NUM_FAILURE_RETRIES_SETTING);\n+        return Collections.unmodifiableList(Arrays.asList(TRANSFORM_ENABLED_NODE, NUM_FAILURE_RETRIES_SETTING));\n+    }\n+\n+    @Override\n+    public Settings additionalSettings() {\n+        String transformEnabledNodeAttribute = \"node.attr.\" + TRANSFORM_ENABLED_NODE_ATTR;\n+        String transformRemoteEnabledNodeAttribute = \"node.attr.\" + TRANSFORM_REMOTE_ENABLED_NODE_ATTR;\n+\n+        if (settings.get(transformEnabledNodeAttribute) != null || settings.get(transformRemoteEnabledNodeAttribute) != null) {\n+            throw new IllegalArgumentException(\n+                \"Directly setting transform node attributes is not permitted,\" + \" please use the documented node settings instead\"\n+            );\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb49f86e6f6e96fddf4b507ae68efe8a1f88ad5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjY0Nzc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformPersistentTasksExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDo1MTozM1rOFuBf6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDo1MTozM1rOFuBf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgwMzM3MA==", "bodyText": "I think this should only be checked for nodes that are on versions earlier than 7.7.\nTo match the documentation transforms should run on nodes that are defined as transform nodes, regardless of whether they are also data nodes.\nAnd then since we didn't have transform nodes prior to 7.7 the BWC logic should be that pre-7.7 nodes are transform nodes if and only if they are data nodes.", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r383803370", "createdAt": "2020-02-25T10:51:33Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformPersistentTasksExecutor.java", "diffHunk": "@@ -97,11 +100,69 @@ public TransformPersistentTasksExecutor(\n             logger.debug(reason);\n             return new PersistentTasksCustomMetaData.Assignment(null, reason);\n         }\n-        DiscoveryNode discoveryNode = selectLeastLoadedNode(\n-            clusterState,\n-            (node) -> node.isDataNode() && node.getVersion().onOrAfter(params.getVersion())\n-        );\n-        return discoveryNode == null ? NO_NODE_FOUND : new PersistentTasksCustomMetaData.Assignment(discoveryNode.getId(), \"\");\n+        DiscoveryNode discoveryNode = selectLeastLoadedNode(clusterState, (node) -> nodeCanRunThisTransform(node, params, null));\n+\n+        if (discoveryNode == null) {\n+            Map<String, String> explainWhyAssignmentFailed = new TreeMap<>();\n+            for (DiscoveryNode node : clusterState.getNodes()) {\n+                nodeCanRunThisTransform(node, params, explainWhyAssignmentFailed);\n+            }\n+            String reason = \"Not starting transform [\"\n+                + params.getId()\n+                + \"], reasons [\"\n+                + explainWhyAssignmentFailed.entrySet().stream().map(e -> e.getKey() + \":\" + e.getValue()).collect(Collectors.joining(\"|\"))\n+                + \"]\";\n+\n+            logger.debug(reason);\n+            return new PersistentTasksCustomMetaData.Assignment(null, reason);\n+        }\n+\n+        return new PersistentTasksCustomMetaData.Assignment(discoveryNode.getId(), \"\");\n+    }\n+\n+    public static boolean nodeCanRunThisTransform(DiscoveryNode node, TransformTaskParams params, Map<String, String> explain) {\n+        // data node?\n+        if (node.isDataNode() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb49f86e6f6e96fddf4b507ae68efe8a1f88ad5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Njk4OTI2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo0NDo0NFrOFuErug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo0NDo0NFrOFuErug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1NTU0Ng==", "bodyText": "I realised that in my previous review where I suggested not taking node.data into account in the assignment that this could cause a surprise to users who don't adjust their elasticsearch.yml after upgrading to 7.7, because it would mean transforms would start running on all types of nodes instead of just data nodes.\nSo an additional change I would suggest to prevent this is that the default value of node.transform be xpack.transform.enabled && node.data.  In other words, if node.transform is not explicitly specified then it is false if either xpack.transform.enabled is false or node.data is false, and true otherwise.\nThis complex default value can be implemented using the Setting factory method that takes a Function for the default value: \n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n    \n    \n         Line 1264\n      in\n      012746d\n    \n    \n    \n    \n\n        \n          \n           public static Setting<Boolean> boolSetting(String key, Function<Settings, String> defaultValueFn, Property... properties) {", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r383855546", "createdAt": "2020-02-25T12:44:44Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "diffHunk": "@@ -137,6 +139,23 @@\n         Setting.Property.Dynamic\n     );\n \n+    /**\n+     * Node attributes for transform, automatically created and retrievable via cluster state.\n+     * These attributes should never be set directly, use the node setting counter parts instead.\n+     */\n+    public static final String TRANSFORM_ENABLED_NODE_ATTR = \"transform.node\";\n+    public static final String TRANSFORM_REMOTE_ENABLED_NODE_ATTR = \"transform.remote_connect\";\n+\n+    /**\n+     * Setting whether transform (the coordinator task) can run on this node and REST API's are available,\n+     * respects xpack.transform.enabled (for the whole plugin) as fallback\n+     */\n+    public static final Setting<Boolean> TRANSFORM_ENABLED_NODE = Setting.boolSetting(\n+        \"node.transform\",\n+        XPackSettings.TRANSFORM_ENABLED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb49f86e6f6e96fddf4b507ae68efe8a1f88ad5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Njk5NjE2OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/transform-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo0NzowMFrOFuEv5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo0NzowMFrOFuEv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1NjYxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Set to `true` (default) to identify the node as a _transform node_. +\n          \n          \n            \n            Set to `true` to identify the node as a _transform node_. The default is `false` if either `node.data` or `xpack.transform.enabled` is `false` for the node, and `true` otherwise. +\n          \n      \n    \n    \n  \n\n(This assumes the idea from my other comment in this batch is implemented.)", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r383856615", "createdAt": "2020-02-25T12:47:00Z", "author": {"login": "droberts195"}, "path": "docs/reference/settings/transform-settings.asciidoc", "diffHunk": "@@ -9,17 +9,28 @@\n \n You do not need to configure any settings to use {transforms}. It is enabled by default.\n \n-All of these settings can be added to the `elasticsearch.yml` configuration file. \n-The dynamic settings can also be updated across a cluster with the \n+All of these settings can be added to the `elasticsearch.yml` configuration file.\n+The dynamic settings can also be updated across a cluster with the\n <<cluster-update-settings,cluster update settings API>>.\n \n-TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml` \n+TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml`\n file.\n \n [float]\n-[[general-data-frames-settings]]\n+[[general-transform-settings]]\n ==== General {transforms} settings\n \n+`node.transform`::\n+Set to `true` (default) to identify the node as a _transform node_. +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb49f86e6f6e96fddf4b507ae68efe8a1f88ad5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODI3NDU1OnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/transform-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDoyMjozNVrOFvwH7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1OTowNFrOFvxLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYxNTg1Mw==", "bodyText": "Typo node.ml -> node.transform", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r385615853", "createdAt": "2020-02-28T10:22:35Z", "author": {"login": "droberts195"}, "path": "docs/reference/settings/transform-settings.asciidoc", "diffHunk": "@@ -9,17 +9,30 @@\n \n You do not need to configure any settings to use {transforms}. It is enabled by default.\n \n-All of these settings can be added to the `elasticsearch.yml` configuration file. \n-The dynamic settings can also be updated across a cluster with the \n+All of these settings can be added to the `elasticsearch.yml` configuration file.\n+The dynamic settings can also be updated across a cluster with the\n <<cluster-update-settings,cluster update settings API>>.\n \n-TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml` \n+TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml`\n file.\n \n [float]\n-[[general-data-frames-settings]]\n+[[general-transform-settings]]\n ==== General {transforms} settings\n \n+`node.transform`::\n+Set to `true` to identify the node as a _transform node_. The default is `false` if\n+either `node.data` or `xpack.transform.enabled` is `false` for the node, and `true` otherwise. +\n++\n+If set to `false` in `elasticsearch.yml`, the node cannot run transforms. If set to\n+`true` but `xpack.transform.enabled` is set to `false`, the `node.transform` setting is\n+ignored and the node cannot run transforms. If you want to run transforms, there must be at\n+least one transform node in your cluster. +\n++\n+IMPORTANT: It is advised to use the `node.transform` setting to constrain the execution\n+of transforms to certain nodes instead of using `xpack.transform.enabled`. On dedicated\n+coordinating nodes or dedicated master nodes, disable the node.ml role.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c50424852b1e6fdb48fb69227325b64b6d6d26"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzE3Ng==", "bodyText": "Thanks for spotting it, I fixed.", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r385633176", "createdAt": "2020-02-28T10:59:04Z", "author": {"login": "szabosteve"}, "path": "docs/reference/settings/transform-settings.asciidoc", "diffHunk": "@@ -9,17 +9,30 @@\n \n You do not need to configure any settings to use {transforms}. It is enabled by default.\n \n-All of these settings can be added to the `elasticsearch.yml` configuration file. \n-The dynamic settings can also be updated across a cluster with the \n+All of these settings can be added to the `elasticsearch.yml` configuration file.\n+The dynamic settings can also be updated across a cluster with the\n <<cluster-update-settings,cluster update settings API>>.\n \n-TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml` \n+TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml`\n file.\n \n [float]\n-[[general-data-frames-settings]]\n+[[general-transform-settings]]\n ==== General {transforms} settings\n \n+`node.transform`::\n+Set to `true` to identify the node as a _transform node_. The default is `false` if\n+either `node.data` or `xpack.transform.enabled` is `false` for the node, and `true` otherwise. +\n++\n+If set to `false` in `elasticsearch.yml`, the node cannot run transforms. If set to\n+`true` but `xpack.transform.enabled` is set to `false`, the `node.transform` setting is\n+ignored and the node cannot run transforms. If you want to run transforms, there must be at\n+least one transform node in your cluster. +\n++\n+IMPORTANT: It is advised to use the `node.transform` setting to constrain the execution\n+of transforms to certain nodes instead of using `xpack.transform.enabled`. On dedicated\n+coordinating nodes or dedicated master nodes, disable the node.ml role.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYxNTg1Mw=="}, "originalCommit": {"oid": "24c50424852b1e6fdb48fb69227325b64b6d6d26"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODMxMTEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDozNDozNlrOFvwd5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDozNDozNlrOFvwd5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyMTQ3OA==", "bodyText": "In the ML plugin we ban these node attributes even when the plugin is disabled.  In other words the enabled == false check comes after the check that throws this error.  I think it's best because otherwise you can get the weird situation where somebody sets the node attribute directly when the plugin is disabled on a node and then other nodes in the cluster might assign transform persistent tasks to the node.  Such tasks wouldn't do anything because no plugin would be watching for them on the node they're assigned to.\n(Of course, this is an extreme edge case and unlikely to ever happen.  It also ties in with the conversation about whether it should be permitted to disable plugins on just a subset of nodes.  Moving to a world where transforms is always enabled will simplify things a lot.)", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r385621478", "createdAt": "2020-02-28T10:34:36Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/Transform.java", "diffHunk": "@@ -296,13 +322,44 @@ protected XPackLicenseState getLicenseState() {\n         // the transform services should have been created\n         assert transformServices.get() != null;\n \n-        return Collections.singletonList(new TransformPersistentTasksExecutor(client, transformServices.get(), threadPool, clusterService,\n-            settingsModule.getSettings(), expressionResolver));\n+        return Collections.singletonList(\n+            new TransformPersistentTasksExecutor(\n+                client,\n+                transformServices.get(),\n+                threadPool,\n+                clusterService,\n+                settingsModule.getSettings(),\n+                expressionResolver\n+            )\n+        );\n     }\n \n     @Override\n     public List<Setting<?>> getSettings() {\n-        return Collections.singletonList(NUM_FAILURE_RETRIES_SETTING);\n+        return Collections.unmodifiableList(Arrays.asList(TRANSFORM_ENABLED_NODE, NUM_FAILURE_RETRIES_SETTING));\n+    }\n+\n+    @Override\n+    public Settings additionalSettings() {\n+        String transformEnabledNodeAttribute = \"node.attr.\" + TRANSFORM_ENABLED_NODE_ATTR;\n+        String transformRemoteEnabledNodeAttribute = \"node.attr.\" + TRANSFORM_REMOTE_ENABLED_NODE_ATTR;\n+\n+        if (enabled == false) {\n+            return Settings.EMPTY;\n+        }\n+\n+        if (settings.get(transformEnabledNodeAttribute) != null || settings.get(transformRemoteEnabledNodeAttribute) != null) {\n+            throw new IllegalArgumentException(\n+                \"Directly setting transform node attributes is not permitted, please use the documented node settings instead\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c50424852b1e6fdb48fb69227325b64b6d6d26"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODM1NDM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformPersistentTasksExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo0ODoxMlrOFvw3nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo0ODoxMlrOFvw3nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyODA2MA==", "bodyText": "I would use the phrase not a transform node instead of transform not enabled.  Users can see this reason and not a transform node more clearly ties the reason to the node.transform setting and the docs about transform nodes.  It's also more consistent with not a data node from line 136.", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r385628060", "createdAt": "2020-02-28T10:48:12Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformPersistentTasksExecutor.java", "diffHunk": "@@ -99,9 +102,88 @@ public TransformPersistentTasksExecutor(\n         }\n         DiscoveryNode discoveryNode = selectLeastLoadedNode(\n             clusterState,\n-            (node) -> node.isDataNode() && node.getVersion().onOrAfter(params.getVersion())\n+            (node) -> node.getVersion().onOrAfter(Version.V_8_0_0)\n+                ? nodeCanRunThisTransform(node, params, null)\n+                : nodeCanRunThisTransformPre77(node, params, null)\n         );\n-        return discoveryNode == null ? NO_NODE_FOUND : new PersistentTasksCustomMetaData.Assignment(discoveryNode.getId(), \"\");\n+\n+        if (discoveryNode == null) {\n+            Map<String, String> explainWhyAssignmentFailed = new TreeMap<>();\n+            for (DiscoveryNode node : clusterState.getNodes()) {\n+                if (node.getVersion().onOrAfter(Version.V_8_0_0)) { // todo: V_7_7_0, remove from 8.0\n+                    nodeCanRunThisTransform(node, params, explainWhyAssignmentFailed);\n+                } else {\n+                    nodeCanRunThisTransformPre77(node, params, explainWhyAssignmentFailed);\n+                }\n+            }\n+            String reason = \"Not starting transform [\"\n+                + params.getId()\n+                + \"], reasons [\"\n+                + explainWhyAssignmentFailed.entrySet().stream().map(e -> e.getKey() + \":\" + e.getValue()).collect(Collectors.joining(\"|\"))\n+                + \"]\";\n+\n+            logger.debug(reason);\n+            return new PersistentTasksCustomMetaData.Assignment(null, reason);\n+        }\n+\n+        return new PersistentTasksCustomMetaData.Assignment(discoveryNode.getId(), \"\");\n+    }\n+\n+    // todo: this can be removed for 8.0 after backport\n+    public static boolean nodeCanRunThisTransformPre77(DiscoveryNode node, TransformTaskParams params, Map<String, String> explain) {\n+        if (node.isDataNode() == false) {\n+            if (explain != null) {\n+                explain.put(node.getId(), \"not a data node\");\n+            }\n+            return false;\n+        }\n+\n+        // version of the transform run on a node that has at least the same version\n+        if (node.getVersion().onOrAfter(params.getVersion()) == false) {\n+            if (explain != null) {\n+                explain.put(\n+                    node.getId(),\n+                    \"node has version: \" + node.getVersion() + \" but transform requires at least \" + params.getVersion()\n+                );\n+            }\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean nodeCanRunThisTransform(DiscoveryNode node, TransformTaskParams params, Map<String, String> explain) {\n+        // version of the transform run on a node that has at least the same version\n+        if (node.getVersion().onOrAfter(params.getVersion()) == false) {\n+            if (explain != null) {\n+                explain.put(\n+                    node.getId(),\n+                    \"node has version: \" + node.getVersion() + \" but transform requires at least \" + params.getVersion()\n+                );\n+            }\n+            return false;\n+        }\n+\n+        final Map<String, String> nodeAttributes = node.getAttributes();\n+\n+        // transform enabled?\n+        if (Boolean.parseBoolean(nodeAttributes.get(Transform.TRANSFORM_ENABLED_NODE_ATTR)) == false) {\n+            if (explain != null) {\n+                explain.put(node.getId(), \"transform not enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c50424852b1e6fdb48fb69227325b64b6d6d26"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODM4NDMyOnYy", "diffSide": "RIGHT", "path": "docs/reference/settings/transform-settings.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1Nzo1MVrOFvxJZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1Nzo1MVrOFvxJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMjYxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            coordinating nodes or dedicated master nodes, disable the node.ml role.\n          \n          \n            \n            coordinating nodes or dedicated master nodes, disable the node.transform role.", "url": "https://github.com/elastic/elasticsearch/pull/52712#discussion_r385632615", "createdAt": "2020-02-28T10:57:51Z", "author": {"login": "szabosteve"}, "path": "docs/reference/settings/transform-settings.asciidoc", "diffHunk": "@@ -9,17 +9,30 @@\n \n You do not need to configure any settings to use {transforms}. It is enabled by default.\n \n-All of these settings can be added to the `elasticsearch.yml` configuration file. \n-The dynamic settings can also be updated across a cluster with the \n+All of these settings can be added to the `elasticsearch.yml` configuration file.\n+The dynamic settings can also be updated across a cluster with the\n <<cluster-update-settings,cluster update settings API>>.\n \n-TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml` \n+TIP: Dynamic settings take precedence over settings in the `elasticsearch.yml`\n file.\n \n [float]\n-[[general-data-frames-settings]]\n+[[general-transform-settings]]\n ==== General {transforms} settings\n \n+`node.transform`::\n+Set to `true` to identify the node as a _transform node_. The default is `false` if\n+either `node.data` or `xpack.transform.enabled` is `false` for the node, and `true` otherwise. +\n++\n+If set to `false` in `elasticsearch.yml`, the node cannot run transforms. If set to\n+`true` but `xpack.transform.enabled` is set to `false`, the `node.transform` setting is\n+ignored and the node cannot run transforms. If you want to run transforms, there must be at\n+least one transform node in your cluster. +\n++\n+IMPORTANT: It is advised to use the `node.transform` setting to constrain the execution\n+of transforms to certain nodes instead of using `xpack.transform.enabled`. On dedicated\n+coordinating nodes or dedicated master nodes, disable the node.ml role.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c50424852b1e6fdb48fb69227325b64b6d6d26"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3757, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}