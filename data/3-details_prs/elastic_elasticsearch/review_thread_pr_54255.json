{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDUyMjU1", "number": 54255, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozMDoxNFrODrmlaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozMDoxNFrODrmlaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDQ3NTI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/MulticlassConfusionMatrix.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozMDoxNFrOF8Ck5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozNTowMVrOF8M1kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTA5NA==", "bodyText": "This will analyze the input string. Which might be ok, but it will mean if we have classNames Foo and foo we will treat them as the same.\nWhich, having two classes only differ by case is pathological and probably SHOULD result in error :)", "url": "https://github.com/elastic/elasticsearch/pull/54255#discussion_r398501094", "createdAt": "2020-03-26T11:30:14Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/MulticlassConfusionMatrix.java", "diffHunk": "@@ -142,7 +142,7 @@ public int getSize() {\n         if (result.get() == null) {  // These are steps 2, 3, 4 etc.\n             KeyedFilter[] keyedFiltersPredicted =\n                 topActualClassNames.get().stream()\n-                    .map(className -> new KeyedFilter(className, QueryBuilders.termQuery(predictedField, className)))\n+                    .map(className -> new KeyedFilter(className, QueryBuilders.matchQuery(predictedField, className).lenient(true)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a853e829b29bce3dabc25e4673b5d9f477bb348a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMzQxNQ==", "bodyText": "This will analyze the input string. Which might be ok, but it will mean if we have classNames Foo and foo we will treat them as the same.\n\nI added a test testEvaluate_AllMetrics_KeywordField_CaseSensitivity to verify that and it turns out casing is sensitive, i.e. \"crocodile\" does not match \"cRoCoDiLe\". This is because dependent variable can be of type keyword but not of type text.\nI think comparing class labels in a case-sensitive manner is ok as long as we document it clearly. LMK if you think otherwise.\n\nWhich, having two classes only differ by case is pathological and probably SHOULD result in error :)\n\nMaybe or maybe not. E.g.: I could think of some scientific experiment results in which there would be class names named \"a\", \"b\", \"c\", \"A\", \"B\", \"C\" where \"a\" and \"A\" mean different things. I'm open to suggestions here as I don't have a strong opinion on that.", "url": "https://github.com/elastic/elasticsearch/pull/54255#discussion_r398633415", "createdAt": "2020-03-26T14:50:35Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/MulticlassConfusionMatrix.java", "diffHunk": "@@ -142,7 +142,7 @@ public int getSize() {\n         if (result.get() == null) {  // These are steps 2, 3, 4 etc.\n             KeyedFilter[] keyedFiltersPredicted =\n                 topActualClassNames.get().stream()\n-                    .map(className -> new KeyedFilter(className, QueryBuilders.termQuery(predictedField, className)))\n+                    .map(className -> new KeyedFilter(className, QueryBuilders.matchQuery(predictedField, className).lenient(true)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTA5NA=="}, "originalCommit": {"oid": "a853e829b29bce3dabc25e4673b5d9f477bb348a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTIwMA==", "bodyText": "WOOT! Ok, I did not think of the keyword mapping. Indeed, those are not analyzed. Scratch my previous concern.", "url": "https://github.com/elastic/elasticsearch/pull/54255#discussion_r398669200", "createdAt": "2020-03-26T15:35:01Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/MulticlassConfusionMatrix.java", "diffHunk": "@@ -142,7 +142,7 @@ public int getSize() {\n         if (result.get() == null) {  // These are steps 2, 3, 4 etc.\n             KeyedFilter[] keyedFiltersPredicted =\n                 topActualClassNames.get().stream()\n-                    .map(className -> new KeyedFilter(className, QueryBuilders.termQuery(predictedField, className)))\n+                    .map(className -> new KeyedFilter(className, QueryBuilders.matchQuery(predictedField, className).lenient(true)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTA5NA=="}, "originalCommit": {"oid": "a853e829b29bce3dabc25e4673b5d9f477bb348a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4119, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}