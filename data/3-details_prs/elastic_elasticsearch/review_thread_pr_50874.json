{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjA3MjQ5", "number": 50874, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo1OTozOVrODX1qOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxNTowNlrODX17QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzIzMDAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo1OTozOVrOFdWnIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoyMTowM1rOFdXMdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyMzQ4OA==", "bodyText": "I think it's better how it was before [{}]", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366323488", "createdAt": "2020-01-14T12:59:39Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -20,27 +21,40 @@\n \n     private InferenceHelpers() { }\n \n-    public static List<ClassificationInferenceResults.TopClassEntry> topClasses(List<Double> probabilities,\n-                                                                                List<String> classificationLabels,\n-                                                                                int numToInclude) {\n-        if (numToInclude == 0) {\n-            return Collections.emptyList();\n-        }\n-        int[] sortedIndices = IntStream.range(0, probabilities.size())\n-            .boxed()\n-            .sorted(Comparator.comparing(probabilities::get).reversed())\n-            .mapToInt(i -> i)\n-            .toArray();\n+    /**\n+     * @return Tuple of the highest scored index and the top classes\n+     */\n+    public static Tuple<Integer, List<ClassificationInferenceResults.TopClassEntry>> topClasses(List<Double> probabilities,\n+                                                                                                List<String> classificationLabels,\n+                                                                                                @Nullable double[] classificationWeights,\n+                                                                                                int numToInclude) {\n \n         if (classificationLabels != null && probabilities.size() != classificationLabels.size()) {\n             throw ExceptionsHelper\n                 .serverError(\n-                    \"model returned classification probabilities of size [{}] which is not equal to classification labels size [{}]\",\n+                    \"model returned classification probabilities of size [{}] which is not equal to classification labels size {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMTg4NQ==", "bodyText": "\ud83e\udd14 possibly? I might want to switch this around a bit. It is writing out the classification labels array not the size. Woops!", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366331885", "createdAt": "2020-01-14T13:18:32Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -20,27 +21,40 @@\n \n     private InferenceHelpers() { }\n \n-    public static List<ClassificationInferenceResults.TopClassEntry> topClasses(List<Double> probabilities,\n-                                                                                List<String> classificationLabels,\n-                                                                                int numToInclude) {\n-        if (numToInclude == 0) {\n-            return Collections.emptyList();\n-        }\n-        int[] sortedIndices = IntStream.range(0, probabilities.size())\n-            .boxed()\n-            .sorted(Comparator.comparing(probabilities::get).reversed())\n-            .mapToInt(i -> i)\n-            .toArray();\n+    /**\n+     * @return Tuple of the highest scored index and the top classes\n+     */\n+    public static Tuple<Integer, List<ClassificationInferenceResults.TopClassEntry>> topClasses(List<Double> probabilities,\n+                                                                                                List<String> classificationLabels,\n+                                                                                                @Nullable double[] classificationWeights,\n+                                                                                                int numToInclude) {\n \n         if (classificationLabels != null && probabilities.size() != classificationLabels.size()) {\n             throw ExceptionsHelper\n                 .serverError(\n-                    \"model returned classification probabilities of size [{}] which is not equal to classification labels size [{}]\",\n+                    \"model returned classification probabilities of size [{}] which is not equal to classification labels size {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyMzQ4OA=="}, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMzA0Nw==", "bodyText": "Ha", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366333047", "createdAt": "2020-01-14T13:21:03Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -20,27 +21,40 @@\n \n     private InferenceHelpers() { }\n \n-    public static List<ClassificationInferenceResults.TopClassEntry> topClasses(List<Double> probabilities,\n-                                                                                List<String> classificationLabels,\n-                                                                                int numToInclude) {\n-        if (numToInclude == 0) {\n-            return Collections.emptyList();\n-        }\n-        int[] sortedIndices = IntStream.range(0, probabilities.size())\n-            .boxed()\n-            .sorted(Comparator.comparing(probabilities::get).reversed())\n-            .mapToInt(i -> i)\n-            .toArray();\n+    /**\n+     * @return Tuple of the highest scored index and the top classes\n+     */\n+    public static Tuple<Integer, List<ClassificationInferenceResults.TopClassEntry>> topClasses(List<Double> probabilities,\n+                                                                                                List<String> classificationLabels,\n+                                                                                                @Nullable double[] classificationWeights,\n+                                                                                                int numToInclude) {\n \n         if (classificationLabels != null && probabilities.size() != classificationLabels.size()) {\n             throw ExceptionsHelper\n                 .serverError(\n-                    \"model returned classification probabilities of size [{}] which is not equal to classification labels size [{}]\",\n+                    \"model returned classification probabilities of size [{}] which is not equal to classification labels size {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyMzQ4OA=="}, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzI2NjE1OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/langident/LangIdentNeuralNetwork.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxMjoyNlrOFdW9GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxMjoyNlrOFdW9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyOTExMw==", "bodyText": "Consider adding LANGUAGE_NAMES to toXContent and the parser. Tree includes the labels in its xcontent representation", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366329113", "createdAt": "2020-01-14T13:12:26Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/langident/LangIdentNeuralNetwork.java", "diffHunk": "@@ -156,11 +146,6 @@ public TargetType targetType() {\n         return TargetType.CLASSIFICATION;\n     }\n \n-    @Override\n-    public List<String> classificationLabels() {\n-        return LANGUAGE_NAMES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzI3MTY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxNDoyNVrOFdXApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxOToxM1rOFdXJQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMDAyMA==", "bodyText": "Is there no test for this method?", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366330020", "createdAt": "2020-01-14T13:14:25Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -20,27 +21,40 @@\n \n     private InferenceHelpers() { }\n \n-    public static List<ClassificationInferenceResults.TopClassEntry> topClasses(List<Double> probabilities,\n-                                                                                List<String> classificationLabels,\n-                                                                                int numToInclude) {\n-        if (numToInclude == 0) {\n-            return Collections.emptyList();\n-        }\n-        int[] sortedIndices = IntStream.range(0, probabilities.size())\n-            .boxed()\n-            .sorted(Comparator.comparing(probabilities::get).reversed())\n-            .mapToInt(i -> i)\n-            .toArray();\n+    /**\n+     * @return Tuple of the highest scored index and the top classes\n+     */\n+    public static Tuple<Integer, List<ClassificationInferenceResults.TopClassEntry>> topClasses(List<Double> probabilities,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMjIyNg==", "bodyText": "There is coverage through functional tests.", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366332226", "createdAt": "2020-01-14T13:19:13Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -20,27 +21,40 @@\n \n     private InferenceHelpers() { }\n \n-    public static List<ClassificationInferenceResults.TopClassEntry> topClasses(List<Double> probabilities,\n-                                                                                List<String> classificationLabels,\n-                                                                                int numToInclude) {\n-        if (numToInclude == 0) {\n-            return Collections.emptyList();\n-        }\n-        int[] sortedIndices = IntStream.range(0, probabilities.size())\n-            .boxed()\n-            .sorted(Comparator.comparing(probabilities::get).reversed())\n-            .mapToInt(i -> i)\n-            .toArray();\n+    /**\n+     * @return Tuple of the highest scored index and the top classes\n+     */\n+    public static Tuple<Integer, List<ClassificationInferenceResults.TopClassEntry>> topClasses(List<Double> probabilities,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMDAyMA=="}, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzI3MzYxOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/TrainedModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxNTowNlrOFdXB0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxOTo1MlrOFdXKXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMDMyMA==", "bodyText": "Both these methods are just not called anywhere? Is that why they are removed? If so \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366330320", "createdAt": "2020-01-14T13:15:06Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/TrainedModel.java", "diffHunk": "@@ -6,21 +6,14 @@\n package org.elasticsearch.xpack.core.ml.inference.trainedmodel;\n \n import org.apache.lucene.util.Accountable;\n-import org.elasticsearch.common.Nullable;\n import org.elasticsearch.common.io.stream.NamedWriteable;\n import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n import org.elasticsearch.xpack.core.ml.utils.NamedXContentObject;\n \n-import java.util.List;\n import java.util.Map;\n \n public interface TrainedModel extends NamedXContentObject, NamedWriteable, Accountable {\n \n-    /**\n-     * @return List of featureNames expected by the model. In the order that they are expected\n-     */\n-    List<String> getFeatureNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMjUxMQ==", "bodyText": "Yes, I am cleaning up the interface. I added a bunch of stuff that I thought \"all\" models would need, and it turns out that that is not the case.", "url": "https://github.com/elastic/elasticsearch/pull/50874#discussion_r366332511", "createdAt": "2020-01-14T13:19:52Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/TrainedModel.java", "diffHunk": "@@ -6,21 +6,14 @@\n package org.elasticsearch.xpack.core.ml.inference.trainedmodel;\n \n import org.apache.lucene.util.Accountable;\n-import org.elasticsearch.common.Nullable;\n import org.elasticsearch.common.io.stream.NamedWriteable;\n import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n import org.elasticsearch.xpack.core.ml.utils.NamedXContentObject;\n \n-import java.util.List;\n import java.util.Map;\n \n public interface TrainedModel extends NamedXContentObject, NamedWriteable, Accountable {\n \n-    /**\n-     * @return List of featureNames expected by the model. In the order that they are expected\n-     */\n-    List<String> getFeatureNames();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMDMyMA=="}, "originalCommit": {"oid": "53bb9ba01a108c33eb4d3ef89bf501532f0dc673"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4852, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}