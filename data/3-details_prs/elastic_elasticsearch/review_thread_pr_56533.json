{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MjQxNTM1", "number": 56533, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo0MDowOVrOD7bb1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NjozMFrOEDE6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQyMDY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/TotalBucketCardinality.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo0MDowOVrOGTv39w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzo1Nzo1MFrOGTxalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MDUwMw==", "bodyText": "A better name for this might be CardinalityEstimate or CardinalityUpperBound.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r423360503", "createdAt": "2020-05-11T22:40:09Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/TotalBucketCardinality.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;\n+import org.elasticsearch.search.aggregations.metrics.MetricsAggregator;\n+\n+/**\n+ * Rough measure of how many buckets this {@link Aggregator} will collect\n+ * used to pick data structures used during collection. Just \"none\", \"one\",\n+ * and \"many\".\n+ * <p>\n+ * Unlike {@link AggregationBuilder.BucketCardinality} this is influenced\n+ * by the number of buckets that the parent aggregation collect.\n+ */\n+public enum TotalBucketCardinality {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46c3267e5f94a54d50ca73143c42f6d96ad100"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MTA3MA==", "bodyText": "I think removing \"bucket\" from the name would prevent some confusion. And it'd force it into something as simple as an upper bound on the owningBucketOrd passed to the collect method.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r423361070", "createdAt": "2020-05-11T22:41:51Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/TotalBucketCardinality.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;\n+import org.elasticsearch.search.aggregations.metrics.MetricsAggregator;\n+\n+/**\n+ * Rough measure of how many buckets this {@link Aggregator} will collect\n+ * used to pick data structures used during collection. Just \"none\", \"one\",\n+ * and \"many\".\n+ * <p>\n+ * Unlike {@link AggregationBuilder.BucketCardinality} this is influenced\n+ * by the number of buckets that the parent aggregation collect.\n+ */\n+public enum TotalBucketCardinality {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MDUwMw=="}, "originalCommit": {"oid": "2a46c3267e5f94a54d50ca73143c42f6d96ad100"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzcwNw==", "bodyText": "That isn't what it is now, but it could be!", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r423363707", "createdAt": "2020-05-11T22:49:33Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/TotalBucketCardinality.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;\n+import org.elasticsearch.search.aggregations.metrics.MetricsAggregator;\n+\n+/**\n+ * Rough measure of how many buckets this {@link Aggregator} will collect\n+ * used to pick data structures used during collection. Just \"none\", \"one\",\n+ * and \"many\".\n+ * <p>\n+ * Unlike {@link AggregationBuilder.BucketCardinality} this is influenced\n+ * by the number of buckets that the parent aggregation collect.\n+ */\n+public enum TotalBucketCardinality {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MDUwMw=="}, "originalCommit": {"oid": "2a46c3267e5f94a54d50ca73143c42f6d96ad100"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4NTc0OA==", "bodyText": "Thinking about it again, there are really two cardinalities to measure and they are both useful.\n\nThe Aggregator's cardinality. This is the thing I keep calling parentCardinatlity in the PR. It is an upper bound for the value of owningBucketOrd that will be passed to collect.\nThe Aggregator's bucket's cardinality. This is the thing I was calling bucketCardinality in the PR. Confusingly, it is only a thing in BucketsAggregations.\n\nAlso confusingly, there are a couple of relationships between these things:\n\nAn Aggregator can calculate its bucket's cardinality - sometimes exactly like range and sometimes not like terms.\nAn Aggregator's bucket's cardinality is the cardinality of is sub-aggregations.\n\nThis PR, as it stands now, mixes those two things up and gives them funny names. I'd like to rework it.\nTo be clear: this is useful because knowing an Aggregator's cardinality with some precision would let us pick smarter aggregation implementations. This PR only gives three levels of precision: NONE, ONE, and MANY. But we can do better in a follow up when we're sure how we're going to use it. Right now it is useful to have the distinction between NONE and ONE and MANY. Or, rather, it would be useful if I got the names straight. Right now I'm fairly sure it is wrong.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r423385748", "createdAt": "2020-05-11T23:57:50Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/TotalBucketCardinality.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;\n+import org.elasticsearch.search.aggregations.metrics.MetricsAggregator;\n+\n+/**\n+ * Rough measure of how many buckets this {@link Aggregator} will collect\n+ * used to pick data structures used during collection. Just \"none\", \"one\",\n+ * and \"many\".\n+ * <p>\n+ * Unlike {@link AggregationBuilder.BucketCardinality} this is influenced\n+ * by the number of buckets that the parent aggregation collect.\n+ */\n+public enum TotalBucketCardinality {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MDUwMw=="}, "originalCommit": {"oid": "2a46c3267e5f94a54d50ca73143c42f6d96ad100"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODkyNDk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/TotalBucketCardinality.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDowNjoxM1rOGUIWvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDowNjoxM1rOGUIWvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2MTU5Nw==", "bodyText": "This should return NONE if passed 0.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r423761597", "createdAt": "2020-05-12T14:06:13Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/TotalBucketCardinality.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;\n+import org.elasticsearch.search.aggregations.metrics.MetricsAggregator;\n+\n+/**\n+ * Rough measure of how many buckets this {@link Aggregator} will collect\n+ * used to pick data structures used during collection. Just \"none\", \"one\",\n+ * and \"many\".\n+ * <p>\n+ * Unlike {@link AggregationBuilder.BucketCardinality} this is influenced\n+ * by the number of buckets that the parent aggregation collect.\n+ */\n+public enum TotalBucketCardinality {\n+    /**\n+     * {@link Aggregator}s with this cardinality won't collect any buckets.\n+     * This could be because they are {@link MetricsAggregator}s which don't\n+     * support buckets at all. Or they could be {@link BucketsAggregator}\n+     * that are configured in such a way that they collect any buckets. \n+     */\n+    NONE {\n+        @Override\n+        public TotalBucketCardinality forKnownBucketAggregator(int bucketCount) {\n+            return NONE;\n+        }\n+    },\n+\n+    /**\n+     * {@link Aggregator}s with this cardinality will collect only a single\n+     * bucket. This will only be true for top level {@linkplain Aggregator}s\n+     * and for descendants of aggregation\n+     */\n+    ONE {\n+        @Override\n+        public TotalBucketCardinality forKnownBucketAggregator(int bucketCount) {\n+            switch (bucketCount) {\n+                case 0:\n+                    return NONE;\n+                case 1:\n+                    return ONE;\n+                default:\n+                    return MANY;\n+            }\n+        }\n+    },\n+    /**\n+     * {@link Aggregator}s with this cardinality will collect many buckets.\n+     * Most {@link BucketsAggregator}s will have this cardinality.\n+     */\n+    MANY {\n+        @Override\n+        public TotalBucketCardinality forKnownBucketAggregator(int bucketCount) {\n+            return MANY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46c3267e5f94a54d50ca73143c42f6d96ad100"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDY5MTEyOnYy", "diffSide": "RIGHT", "path": "modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/support/ArrayValuesSourceAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDowMjoyN1rOGVBgVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyMDo1OVrOGVCHEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5Nzk0Mg==", "bodyText": "This isn't accurate.  If the user specified a script, we might not have a mapped field at this point.  Or for that matter, if we couldn't map a field but the user provided a missing value.  It would be accurate to say we are creating the aggregator for a non-empty values source.\nIn fact, a large point of the values source abstraction is to not have to know at this point if we have a mapped field or not.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r424697942", "createdAt": "2020-05-13T20:02:27Z", "author": {"login": "not-napoleon"}, "path": "modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/support/ArrayValuesSourceAggregatorFactory.java", "diffHunk": "@@ -58,17 +59,27 @@ public Aggregator createInternal(SearchContext searchContext,\n         if (valuesSources.isEmpty()) {\n             return createUnmapped(searchContext, parent, metadata);\n         }\n-        return doCreateInternal(valuesSources, searchContext, parent, collectsFromSingleBucket, metadata);\n+        return doCreateInternal(valuesSources, searchContext, parent, cardinality, metadata);\n     }\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a field that isn't mapped.\n+     */\n     protected abstract Aggregator createUnmapped(SearchContext searchContext,\n                                                     Aggregator parent,\n                                                     Map<String, Object> metadata) throws IOException;\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a mapped field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfe6ef9ed2dd840081b30b659a6d45a6275f7da"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNzg1Nw==", "bodyText": "Bah. I meant to revert that too after our conversation yesterday.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r424707857", "createdAt": "2020-05-13T20:20:59Z", "author": {"login": "nik9000"}, "path": "modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/support/ArrayValuesSourceAggregatorFactory.java", "diffHunk": "@@ -58,17 +59,27 @@ public Aggregator createInternal(SearchContext searchContext,\n         if (valuesSources.isEmpty()) {\n             return createUnmapped(searchContext, parent, metadata);\n         }\n-        return doCreateInternal(valuesSources, searchContext, parent, collectsFromSingleBucket, metadata);\n+        return doCreateInternal(valuesSources, searchContext, parent, cardinality, metadata);\n     }\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a field that isn't mapped.\n+     */\n     protected abstract Aggregator createUnmapped(SearchContext searchContext,\n                                                     Aggregator parent,\n                                                     Map<String, Object> metadata) throws IOException;\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a mapped field.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5Nzk0Mg=="}, "originalCommit": {"oid": "ddfe6ef9ed2dd840081b30b659a6d45a6275f7da"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDY5NDUxOnYy", "diffSide": "RIGHT", "path": "modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/support/ArrayValuesSourceAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDowMzoyOVrOGVBiag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyMTo1MFrOGVCItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODQ3NA==", "bodyText": "As noted on doCreateInternal, it's more accurate to say this is used when we have no values.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r424698474", "createdAt": "2020-05-13T20:03:29Z", "author": {"login": "not-napoleon"}, "path": "modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/support/ArrayValuesSourceAggregatorFactory.java", "diffHunk": "@@ -58,17 +59,27 @@ public Aggregator createInternal(SearchContext searchContext,\n         if (valuesSources.isEmpty()) {\n             return createUnmapped(searchContext, parent, metadata);\n         }\n-        return doCreateInternal(valuesSources, searchContext, parent, collectsFromSingleBucket, metadata);\n+        return doCreateInternal(valuesSources, searchContext, parent, cardinality, metadata);\n     }\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a field that isn't mapped.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfe6ef9ed2dd840081b30b659a6d45a6275f7da"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwODI3Nw==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r424708277", "createdAt": "2020-05-13T20:21:50Z", "author": {"login": "nik9000"}, "path": "modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/support/ArrayValuesSourceAggregatorFactory.java", "diffHunk": "@@ -58,17 +59,27 @@ public Aggregator createInternal(SearchContext searchContext,\n         if (valuesSources.isEmpty()) {\n             return createUnmapped(searchContext, parent, metadata);\n         }\n-        return doCreateInternal(valuesSources, searchContext, parent, collectsFromSingleBucket, metadata);\n+        return doCreateInternal(valuesSources, searchContext, parent, cardinality, metadata);\n     }\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a field that isn't mapped.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODQ3NA=="}, "originalCommit": {"oid": "ddfe6ef9ed2dd840081b30b659a6d45a6275f7da"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDcxNzgzOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoxMDo0MVrOGVBxdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoxMDo0MVrOGVBxdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMjMyNg==", "bodyText": "+1 for dropping this comment.  3 lines to say nothing the type declaration didn't.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r424702326", "createdAt": "2020-05-13T20:10:41Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java", "diffHunk": "@@ -226,28 +226,20 @@ public void doValidate() {\n \n     protected abstract Aggregator createInternal(SearchContext searchContext,\n                                                     Aggregator parent,\n-                                                    boolean collectsFromSingleBucket,\n+                                                    CardinalityUpperBound cardinality,\n                                                     Map<String, Object> metadata) throws IOException;\n \n     /**\n-     * Creates the aggregator\n+     * Creates the aggregator.\n      *\n-     *\n-     * @param searchContext\n-     *            The search context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfe6ef9ed2dd840081b30b659a6d45a6275f7da"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU2NjI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/global/GlobalAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToyNTozMVrOGf6q0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToyNTozMVrOGf6q0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMDI3NA==", "bodyText": "nit: I know it was like this when you found it, but since you're touching this anyway, maybe add a message to the exception?", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r436120274", "createdAt": "2020-06-05T19:25:31Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/global/GlobalAggregatorFactory.java", "diffHunk": "@@ -42,13 +43,13 @@ public GlobalAggregatorFactory(String name,\n     @Override\n     public Aggregator createInternal(SearchContext searchContext,\n                                         Aggregator parent,\n-                                        boolean collectsFromSingleBucket,\n+                                        CardinalityUpperBound cardinality,\n                                         Map<String, Object> metadata) throws IOException {\n         if (parent != null) {\n             throw new AggregationExecutionException(\"Aggregation [\" + parent.name() + \"] cannot have a global \" + \"sub-aggregation [\" + name\n                     + \"]. Global aggregations can only be defined as top level aggregations\");\n         }\n-        if (collectsFromSingleBucket == false) {\n+        if (cardinality != CardinalityUpperBound.ONE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd02bd2fb442d7ed96a5042ba5819dcb540cee7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjYwMTczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantLongTermsAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozOTo1NFrOGf7CCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToxNDowOVrOGjPA6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNjIxNg==", "bodyText": "Why is this always ONE?", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r436126216", "createdAt": "2020-06-05T19:39:54Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantLongTermsAggregator.java", "diffHunk": "@@ -47,7 +48,7 @@ public SignificantLongTermsAggregator(String name, AggregatorFactories factories\n             IncludeExclude.LongFilter includeExclude, Map<String, Object> metadata) throws IOException {\n \n         super(name, factories, valuesSource, format, null, bucketCountThresholds, context, parent,\n-                SubAggCollectionMode.BREADTH_FIRST, false, includeExclude, false, metadata);\n+                SubAggCollectionMode.BREADTH_FIRST, false, includeExclude, CardinalityUpperBound.ONE, metadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd02bd2fb442d7ed96a5042ba5819dcb540cee7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5OTMzNw==", "bodyText": "This has since been removed. It was ONE because that agg was wrapped in asMultiBucketAggregator.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r439599337", "createdAt": "2020-06-12T19:14:09Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantLongTermsAggregator.java", "diffHunk": "@@ -47,7 +48,7 @@ public SignificantLongTermsAggregator(String name, AggregatorFactories factories\n             IncludeExclude.LongFilter includeExclude, Map<String, Object> metadata) throws IOException {\n \n         super(name, factories, valuesSource, format, null, bucketCountThresholds, context, parent,\n-                SubAggCollectionMode.BREADTH_FIRST, false, includeExclude, false, metadata);\n+                SubAggCollectionMode.BREADTH_FIRST, false, includeExclude, CardinalityUpperBound.ONE, metadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNjIxNg=="}, "originalCommit": {"oid": "7fd02bd2fb442d7ed96a5042ba5819dcb540cee7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjYxNTEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NToyMlrOGf7Kjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NToyMlrOGf7Kjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyODM5OA==", "bodyText": "I liked your comment for this method on MultiValuesSourceAggregationBuilder better.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r436128398", "createdAt": "2020-06-05T19:45:22Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregatorFactory.java", "diffHunk": "@@ -40,23 +41,35 @@ public ValuesSourceAggregatorFactory(String name, ValuesSourceConfig config, Que\n     }\n \n     @Override\n-    public Aggregator createInternal(SearchContext searchContext, Aggregator parent, boolean collectsFromSingleBucket,\n+    public Aggregator createInternal(SearchContext searchContext, Aggregator parent, CardinalityUpperBound cardinality,\n                                      Map<String, Object> metadata) throws IOException {\n         ValuesSource vs = config.toValuesSource();\n         if (vs == null) {\n             return createUnmapped(searchContext, parent, metadata);\n         }\n-        return doCreateInternal(vs, searchContext, parent, collectsFromSingleBucket, metadata);\n+        return doCreateInternal(vs, searchContext, parent, cardinality, metadata);\n     }\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a field that couldn't be resolved\n+     * to a {@link ValuesSource}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd02bd2fb442d7ed96a5042ba5819dcb540cee7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjYxODIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NjozMFrOGf7Mcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NjozMFrOGf7Mcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyODg4Mg==", "bodyText": "Nit - there doesn't have to be a field here.  Could be a script, for example.  I prefer to say a values source that has values to return, which is still clunky but English.", "url": "https://github.com/elastic/elasticsearch/pull/56533#discussion_r436128882", "createdAt": "2020-06-05T19:46:30Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregatorFactory.java", "diffHunk": "@@ -40,23 +41,35 @@ public ValuesSourceAggregatorFactory(String name, ValuesSourceConfig config, Que\n     }\n \n     @Override\n-    public Aggregator createInternal(SearchContext searchContext, Aggregator parent, boolean collectsFromSingleBucket,\n+    public Aggregator createInternal(SearchContext searchContext, Aggregator parent, CardinalityUpperBound cardinality,\n                                      Map<String, Object> metadata) throws IOException {\n         ValuesSource vs = config.toValuesSource();\n         if (vs == null) {\n             return createUnmapped(searchContext, parent, metadata);\n         }\n-        return doCreateInternal(vs, searchContext, parent, collectsFromSingleBucket, metadata);\n+        return doCreateInternal(vs, searchContext, parent, cardinality, metadata);\n     }\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a field that couldn't be resolved\n+     * to a {@link ValuesSource}.\n+     */\n     protected abstract Aggregator createUnmapped(SearchContext searchContext,\n                                                  Aggregator parent,\n                                                  Map<String, Object> metadata) throws IOException;\n \n+    /**\n+     * Create the {@linkplain Aggregator} for a field that was resolved to a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd02bd2fb442d7ed96a5042ba5819dcb540cee7"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 542, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}