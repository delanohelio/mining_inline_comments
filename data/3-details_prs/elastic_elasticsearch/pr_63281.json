{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDY5NjUw", "number": 63281, "title": "[ML] prefer secondary auth headers on data frame analytics _explain", "bodyText": "We should prefer secondary auth headers when calling _explain", "createdAt": "2020-10-05T19:31:51Z", "url": "https://github.com/elastic/elasticsearch/pull/63281", "merged": true, "mergeCommit": {"oid": "025b741952e116c18265d44234875a675afd2d31"}, "closed": true, "closedAt": "2020-10-06T12:36:16Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPpLIfAH2gAyNDk4MDY5NjUwOmY4ZDI3YTgyNzJjZmE1YTAzZTI2NTM3MGFhNDU4MTM0ODAxNWJmNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP3RM6AFqTUwMjg3MDEwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8d27a8272cfa5a03e265370aa4581348015bf78", "committedDate": "2020-10-05T19:44:22Z", "message": "[ML] prefer secondary auth headers on data frame analytics _explain"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05da59019ffb18b19d08b935300bdca3789e8b6e", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/05da59019ffb18b19d08b935300bdca3789e8b6e", "committedDate": "2020-10-05T19:30:05Z", "message": "[ML] prefer secondary auth headers on data frame analytics _explain"}, "afterCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8d27a8272cfa5a03e265370aa4581348015bf78", "committedDate": "2020-10-05T19:44:22Z", "message": "[ML] prefer secondary auth headers on data frame analytics _explain"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjAyMjg5", "url": "https://github.com/elastic/elasticsearch/pull/63281#pullrequestreview-502602289", "createdAt": "2020-10-06T05:54:07Z", "commit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTo1NDowN1rOHc23pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTo1Njo1MVrOHc27LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTE1OQ==", "bodyText": "What does \"always\" mean in this context? We're in the conditional branch, that's why I'm asking.", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500021159", "createdAt": "2020-10-06T05:54:07Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {\n+                // Use secondary auth headers for the request always", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTIyOA==", "bodyText": "this. is reduntant here AFAICT", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500021228", "createdAt": "2020-10-06T05:54:20Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMjA2MA==", "bodyText": "Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500022060", "createdAt": "2020-10-06T05:56:51Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+public class ExplainDataFrameAnalyticsRestIT extends ESRestTestCase {\n+\n+    private static String basicAuth(String user) {\n+        return UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n+    }\n+    private static final String SUPER_USER = \"x_pack_rest_user\";\n+    private static final String ML_ADMIN = \"ml_admin\";\n+    private static final String BASIC_AUTH_VALUE_SUPER_USER = basicAuth(SUPER_USER);\n+    private static final String AUTH_KEY = \"Authorization\";\n+    private static final String SECONDARY_AUTH_KEY = \"es-secondary-authorization\";\n+\n+    private static RequestOptions.Builder addAuthHeader(RequestOptions.Builder builder, String user) {\n+        builder.addHeader(AUTH_KEY, basicAuth(user));\n+        return builder;\n+    }\n+\n+    private static RequestOptions.Builder addSecondaryAuthHeader(RequestOptions.Builder builder, String user) {\n+        builder.addHeader(SECONDARY_AUTH_KEY, basicAuth(user));\n+        return builder;\n+    }\n+\n+    @Override\n+    protected Settings restClientSettings() {\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", BASIC_AUTH_VALUE_SUPER_USER).build();\n+    }\n+\n+    private void setupUser(String user, List<String> roles) throws IOException {\n+        String password = new String(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING.getChars());\n+\n+        Request request = new Request(\"PUT\", \"/_security/user/\" + user);\n+        request.setJsonEntity(\"{\"\n+                + \"  \\\"password\\\" : \\\"\" + password + \"\\\",\"\n+                + \"  \\\"roles\\\" : [ \" + roles.stream().map(unquoted -> \"\\\"\" + unquoted + \"\\\"\").collect(Collectors.joining(\", \")) + \" ]\"\n+                + \"}\");\n+        client().performRequest(request);\n+    }\n+\n+    @Before\n+    public void setUpData() throws Exception {\n+        // This user has admin rights on machine learning, but (importantly for the tests) no rights\n+        // on any of the data indexes\n+        setupUser(ML_ADMIN, Collections.singletonList(\"machine_learning_admin\"));\n+        addAirlineData();\n+    }\n+\n+    private void addAirlineData() throws IOException {\n+        StringBuilder bulk = new StringBuilder();\n+\n+        // Create index with source = enabled, doc_values = enabled, stored = false + multi-field\n+        Request createAirlineDataRequest = new Request(\"PUT\", \"/airline-data\");\n+        createAirlineDataRequest.setJsonEntity(\"{\"\n+                + \"  \\\"mappings\\\": {\"\n+                + \"    \\\"properties\\\": {\"\n+                + \"      \\\"time stamp\\\": { \\\"type\\\":\\\"date\\\"},\" // space in 'time stamp' is intentional\n+                + \"      \\\"airline\\\": {\"\n+                + \"        \\\"type\\\":\\\"keyword\\\"\"\n+                + \"       },\"\n+                + \"      \\\"responsetime\\\": { \\\"type\\\":\\\"float\\\"}\"\n+            + \"    }\"\n+                + \"  }\"\n+                + \"}\");\n+        client().performRequest(createAirlineDataRequest);\n+\n+        bulk.append(\"{\\\"index\\\": {\\\"_index\\\": \\\"airline-data\\\", \\\"_id\\\": 1}}\\n\");\n+        bulk.append(\"{\\\"time stamp\\\":\\\"2016-06-01T00:00:00Z\\\",\\\"airline\\\":\\\"AAA\\\",\\\"responsetime\\\":135.22}\\n\");\n+        bulk.append(\"{\\\"index\\\": {\\\"_index\\\": \\\"airline-data\\\", \\\"_id\\\": 2}}\\n\");\n+        bulk.append(\"{\\\"time stamp\\\":\\\"2016-06-01T01:59:00Z\\\",\\\"airline\\\":\\\"AAA\\\",\\\"responsetime\\\":541.76}\\n\");\n+\n+        bulkIndex(bulk.toString());\n+    }\n+\n+    public void testExplain_GivenSecondaryHeadersAndConfig() throws IOException {\n+        String config = \"{\\n\" +\n+            \"  \\\"source\\\": {\\n\" +\n+            \"    \\\"index\\\": \\\"airline-data\\\"\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"analysis\\\": {\\n\" +\n+            \"    \\\"regression\\\": {\\n\" +\n+            \"      \\\"dependent_variable\\\": \\\"responsetime\\\"\\n\" +\n+            \"    }\\n\" +\n+            \"  }\\n\" +\n+            \"}\";\n+\n+\n+        { // Request with secondary headers without perms\n+            Request explain = explainRequestViaConfig(config);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, SUPER_USER);\n+            addSecondaryAuthHeader(options, ML_ADMIN);\n+            explain.setOptions(options);\n+            // Should throw\n+            ResponseException ex = expectThrows(ResponseException.class, () -> client().performRequest(explain));\n+            assertThat(ex.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        }\n+        { // request with secondary headers with perms\n+            Request explain = explainRequestViaConfig(config);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, ML_ADMIN);\n+            addSecondaryAuthHeader(options, SUPER_USER);\n+            explain.setOptions(options);\n+            // Should not throw\n+            client().performRequest(explain);\n+        }\n+    }\n+\n+    public void testExplain_GivenSecondaryHeadersAndPreviouslyStoredConfig() throws IOException {\n+        String config = \"{\\n\" +\n+            \"  \\\"source\\\": {\\n\" +\n+            \"    \\\"index\\\": \\\"airline-data\\\"\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"dest\\\": {\\n\" +\n+            \"    \\\"index\\\": \\\"response_prediction\\\"\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"analysis\\\":\\n\" +\n+            \"    {\\n\" +\n+            \"      \\\"regression\\\": {\\n\" +\n+            \"        \\\"dependent_variable\\\": \\\"responsetime\\\"\\n\" +\n+            \"      }\\n\" +\n+            \"    }\\n\" +\n+            \"}\";\n+\n+        String configId = \"explain_test\";\n+\n+        Request storeConfig = new Request(\"PUT\", \"_ml/data_frame/analytics/\" + configId);\n+        storeConfig.setJsonEntity(config);\n+        client().performRequest(storeConfig);\n+\n+        { // Request with secondary headers without perms\n+            Request explain = explainRequestConfigId(configId);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, SUPER_USER);\n+            addSecondaryAuthHeader(options, ML_ADMIN);\n+            explain.setOptions(options);\n+            // Should throw\n+            ResponseException ex = expectThrows(ResponseException.class, () -> client().performRequest(explain));\n+            assertThat(ex.getResponse().getStatusLine().getStatusCode(), equalTo(403));\n+        }\n+        { // request with secondary headers with perms\n+            Request explain = explainRequestConfigId(configId);\n+            RequestOptions.Builder options = explain.getOptions().toBuilder();\n+            addAuthHeader(options, ML_ADMIN);\n+            addSecondaryAuthHeader(options, SUPER_USER);\n+            explain.setOptions(options);\n+            // Should not throw\n+            client().performRequest(explain);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjQyNTU4", "url": "https://github.com/elastic/elasticsearch/pull/63281#pullrequestreview-502642558", "createdAt": "2020-10-06T07:12:17Z", "commit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxMjoxOFrOHc4x-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzoxMjoxOFrOHc4x-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MjQ3Mg==", "bodyText": "nit: new line after end of method", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500052472", "createdAt": "2020-10-06T07:12:18Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+public class ExplainDataFrameAnalyticsRestIT extends ESRestTestCase {\n+\n+    private static String basicAuth(String user) {\n+        return UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODUxNzM2", "url": "https://github.com/elastic/elasticsearch/pull/63281#pullrequestreview-502851736", "createdAt": "2020-10-06T11:45:29Z", "commit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0NTozMFrOHdCYUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0ODo0MFrOHdCepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwOTc0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500209747", "createdAt": "2020-10-06T11:45:30Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/ExplainDataFrameAnalyticsRestIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.SecuritySettingsSourceField;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+public class ExplainDataFrameAnalyticsRestIT extends ESRestTestCase {\n+\n+    private static String basicAuth(String user) {\n+        return UsernamePasswordToken.basicAuthHeaderValue(user, SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxMDMzNA==", "bodyText": "I like using this. It prevents the cognitive load of worrying about if the this is a member or a new variable.", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500210334", "createdAt": "2020-10-06T11:46:41Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTIyOA=="}, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxMTM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Use secondary auth headers for the request always\n          \n          \n            \n                            // Set the auth headers (preferring the secondary headers) to the caller's. \n          \n          \n            \n                            // Regardless if the config was previously stored or not.", "url": "https://github.com/elastic/elasticsearch/pull/63281#discussion_r500211364", "createdAt": "2020-10-06T11:48:40Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportExplainDataFrameAnalyticsAction.java", "diffHunk": "@@ -84,17 +100,37 @@ protected void doExecute(Task task,\n \n     private void explain(Task task, PutDataFrameAnalyticsAction.Request request,\n                          ActionListener<ExplainDataFrameAnalyticsAction.Response> listener) {\n-        ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory =\n-                new ExtractedFieldsDetectorFactory(new ParentTaskAssigningClient(client, task.getParentTaskId()));\n-        extractedFieldsDetectorFactory.createFromSource(\n-            request.getConfig(),\n-            ActionListener.wrap(\n-                extractedFieldsDetector -> explain(task, request, extractedFieldsDetector, listener),\n-                listener::onFailure)\n+\n+        final ExtractedFieldsDetectorFactory extractedFieldsDetectorFactory = new ExtractedFieldsDetectorFactory(\n+            new ParentTaskAssigningClient(client, task.getParentTaskId())\n         );\n+        if (licenseState.isSecurityEnabled()) {\n+            useSecondaryAuthIfAvailable(this.securityContext, () -> {\n+                // Use secondary auth headers for the request always", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d27a8272cfa5a03e265370aa4581348015bf78"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "186a93735ed90d0db77c4d05faefafd375c55050", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/186a93735ed90d0db77c4d05faefafd375c55050", "committedDate": "2020-10-06T11:49:27Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Przemys\u0142aw Witek <przemyslaw.witek@elastic.co>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODYyMDcz", "url": "https://github.com/elastic/elasticsearch/pull/63281#pullrequestreview-502862073", "createdAt": "2020-10-06T11:59:40Z", "commit": {"oid": "186a93735ed90d0db77c4d05faefafd375c55050"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODcwMTAy", "url": "https://github.com/elastic/elasticsearch/pull/63281#pullrequestreview-502870102", "createdAt": "2020-10-06T12:09:40Z", "commit": {"oid": "186a93735ed90d0db77c4d05faefafd375c55050"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4437, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}