{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNDU0NjU3", "number": 50741, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjowNDo1OFrODWlxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozMzoyNVrODWmZZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDE0MTE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/env/NodeEnvironment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjowNDo1OFrOFbbsyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzoxNjozNVrOFbd8vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMwOTcwNA==", "bodyText": "Given that we have to keep the node metadata around to prevent invalid downgrades, we may as well validate that it's consistent with the new-format metadata whether metaData is set or not.", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364309704", "createdAt": "2020-01-08T16:04:58Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/env/NodeEnvironment.java", "diffHunk": "@@ -497,36 +498,36 @@ private void maybeLogHeapDetails() {\n \n     /**\n      * scans the node paths and loads existing metaData file. If not found a new meta data will be generated\n-     * and persisted into the nodePaths\n      */\n-    private static NodeMetaData loadOrCreateNodeMetaData(Settings settings, Logger logger,\n-                                                         NodePath... nodePaths) throws IOException {\n+    private static NodeMetaData loadNodeMetaData(Settings settings, Logger logger,\n+                                                 NodePath... nodePaths) throws IOException {\n         final Path[] paths = Arrays.stream(nodePaths).map(np -> np.path).toArray(Path[]::new);\n-\n-        final Set<String> nodeIds = new HashSet<>();\n-        for (final Path path : paths) {\n-            final NodeMetaData metaData = NodeMetaData.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, path);\n-            if (metaData != null) {\n-                nodeIds.add(metaData.nodeId());\n-            }\n-        }\n-        if (nodeIds.size() > 1) {\n-            throw new IllegalStateException(\n-                \"data paths \" + Arrays.toString(paths) + \" belong to multiple nodes with IDs \" + nodeIds);\n-        }\n-\n-        NodeMetaData metaData = NodeMetaData.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, paths);\n+        NodeMetaData metaData = PersistedClusterStateService.nodeMetaData(paths);\n         if (metaData == null) {\n-            assert nodeIds.isEmpty() : nodeIds;\n-            metaData = new NodeMetaData(generateNodeId(settings), Version.CURRENT);\n-        } else {\n-            assert nodeIds.equals(Collections.singleton(metaData.nodeId())) : nodeIds + \" doesn't match \" + metaData;\n-            metaData = metaData.upgradeToCurrentVersion();\n+            // load legacy metadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0NjU1Ng==", "bodyText": "This would mean reading the node metadata even though it might not be required.\nI would prefer to keep as is (but can change it if you feel strongly about this), as I would like for the Lucene index to be the only authoritative source. If for example we were to have a tool that changes the node id, it would have to update both Lucene and the old-style node meta here, and doing so atomically would be difficult.", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364346556", "createdAt": "2020-01-08T17:16:35Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/env/NodeEnvironment.java", "diffHunk": "@@ -497,36 +498,36 @@ private void maybeLogHeapDetails() {\n \n     /**\n      * scans the node paths and loads existing metaData file. If not found a new meta data will be generated\n-     * and persisted into the nodePaths\n      */\n-    private static NodeMetaData loadOrCreateNodeMetaData(Settings settings, Logger logger,\n-                                                         NodePath... nodePaths) throws IOException {\n+    private static NodeMetaData loadNodeMetaData(Settings settings, Logger logger,\n+                                                 NodePath... nodePaths) throws IOException {\n         final Path[] paths = Arrays.stream(nodePaths).map(np -> np.path).toArray(Path[]::new);\n-\n-        final Set<String> nodeIds = new HashSet<>();\n-        for (final Path path : paths) {\n-            final NodeMetaData metaData = NodeMetaData.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, path);\n-            if (metaData != null) {\n-                nodeIds.add(metaData.nodeId());\n-            }\n-        }\n-        if (nodeIds.size() > 1) {\n-            throw new IllegalStateException(\n-                \"data paths \" + Arrays.toString(paths) + \" belong to multiple nodes with IDs \" + nodeIds);\n-        }\n-\n-        NodeMetaData metaData = NodeMetaData.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, paths);\n+        NodeMetaData metaData = PersistedClusterStateService.nodeMetaData(paths);\n         if (metaData == null) {\n-            assert nodeIds.isEmpty() : nodeIds;\n-            metaData = new NodeMetaData(generateNodeId(settings), Version.CURRENT);\n-        } else {\n-            assert nodeIds.equals(Collections.singleton(metaData.nodeId())) : nodeIds + \" doesn't match \" + metaData;\n-            metaData = metaData.upgradeToCurrentVersion();\n+            // load legacy metadata", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMwOTcwNA=="}, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDIxNjg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjoyNjoxOFrOFbcbcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzoxOTozNlrOFbeB9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMTY0OA==", "bodyText": "nodeId is always null at this point.", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364321648", "createdAt": "2020-01-08T16:26:18Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "diffHunk": "@@ -218,6 +228,67 @@ public boolean empty() {\n         }\n     }\n \n+    /**\n+     * Returns the node metadata for the given data paths, and checks if the node ids are unique\n+     * @param dataPaths the data paths to scan\n+     */\n+    @Nullable\n+    public static NodeMetaData nodeMetaData(Path... dataPaths) throws IOException {\n+        String nodeId = null;\n+        Version version = null;\n+        for (final Path dataPath : dataPaths) {\n+            final Path indexPath = dataPath.resolve(METADATA_DIRECTORY_NAME);\n+            if (Files.exists(indexPath)) {\n+                try (DirectoryReader reader = DirectoryReader.open(new SimpleFSDirectory(dataPath.resolve(METADATA_DIRECTORY_NAME)))) {\n+                    final Map<String, String> userData = reader.getIndexCommit().getUserData();\n+                    assert userData.get(NODE_VERSION_KEY) != null;\n+\n+                    final String thisNodeId = userData.get(NODE_ID_KEY);\n+                    assert thisNodeId != null;\n+                    if (nodeId != null && nodeId.equals(thisNodeId) == false) {\n+                        throw new IllegalStateException(\"unexpected node ID in metadata, found [\" + thisNodeId +\n+                            \"] in [\" + dataPath + \"] but expected [\" + nodeId + \"]\");\n+                    } else if (nodeId == null) {\n+                        nodeId = thisNodeId;\n+                        version = Version.fromId(Integer.parseInt(userData.get(NODE_VERSION_KEY)));\n+                    }\n+                    return new NodeMetaData(thisNodeId, Version.fromId(Integer.parseInt(userData.get(NODE_VERSION_KEY))));\n+                } catch (IndexNotFoundException e) {\n+                    logger.debug(new ParameterizedMessage(\"no on-disk state at {}\", indexPath), e);\n+                }\n+            }\n+        }\n+        if (nodeId == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0NjU5NQ==", "bodyText": "gosh, I did not want to  return early from this method, but check consistency here. I've amended this method in a1b5aa4, invalidating the other comments here.", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364346595", "createdAt": "2020-01-08T17:16:40Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "diffHunk": "@@ -218,6 +228,67 @@ public boolean empty() {\n         }\n     }\n \n+    /**\n+     * Returns the node metadata for the given data paths, and checks if the node ids are unique\n+     * @param dataPaths the data paths to scan\n+     */\n+    @Nullable\n+    public static NodeMetaData nodeMetaData(Path... dataPaths) throws IOException {\n+        String nodeId = null;\n+        Version version = null;\n+        for (final Path dataPath : dataPaths) {\n+            final Path indexPath = dataPath.resolve(METADATA_DIRECTORY_NAME);\n+            if (Files.exists(indexPath)) {\n+                try (DirectoryReader reader = DirectoryReader.open(new SimpleFSDirectory(dataPath.resolve(METADATA_DIRECTORY_NAME)))) {\n+                    final Map<String, String> userData = reader.getIndexCommit().getUserData();\n+                    assert userData.get(NODE_VERSION_KEY) != null;\n+\n+                    final String thisNodeId = userData.get(NODE_ID_KEY);\n+                    assert thisNodeId != null;\n+                    if (nodeId != null && nodeId.equals(thisNodeId) == false) {\n+                        throw new IllegalStateException(\"unexpected node ID in metadata, found [\" + thisNodeId +\n+                            \"] in [\" + dataPath + \"] but expected [\" + nodeId + \"]\");\n+                    } else if (nodeId == null) {\n+                        nodeId = thisNodeId;\n+                        version = Version.fromId(Integer.parseInt(userData.get(NODE_VERSION_KEY)));\n+                    }\n+                    return new NodeMetaData(thisNodeId, Version.fromId(Integer.parseInt(userData.get(NODE_VERSION_KEY))));\n+                } catch (IndexNotFoundException e) {\n+                    logger.debug(new ParameterizedMessage(\"no on-disk state at {}\", indexPath), e);\n+                }\n+            }\n+        }\n+        if (nodeId == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMTY0OA=="}, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0Nzg5NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364347894", "createdAt": "2020-01-08T17:19:36Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "diffHunk": "@@ -218,6 +228,67 @@ public boolean empty() {\n         }\n     }\n \n+    /**\n+     * Returns the node metadata for the given data paths, and checks if the node ids are unique\n+     * @param dataPaths the data paths to scan\n+     */\n+    @Nullable\n+    public static NodeMetaData nodeMetaData(Path... dataPaths) throws IOException {\n+        String nodeId = null;\n+        Version version = null;\n+        for (final Path dataPath : dataPaths) {\n+            final Path indexPath = dataPath.resolve(METADATA_DIRECTORY_NAME);\n+            if (Files.exists(indexPath)) {\n+                try (DirectoryReader reader = DirectoryReader.open(new SimpleFSDirectory(dataPath.resolve(METADATA_DIRECTORY_NAME)))) {\n+                    final Map<String, String> userData = reader.getIndexCommit().getUserData();\n+                    assert userData.get(NODE_VERSION_KEY) != null;\n+\n+                    final String thisNodeId = userData.get(NODE_ID_KEY);\n+                    assert thisNodeId != null;\n+                    if (nodeId != null && nodeId.equals(thisNodeId) == false) {\n+                        throw new IllegalStateException(\"unexpected node ID in metadata, found [\" + thisNodeId +\n+                            \"] in [\" + dataPath + \"] but expected [\" + nodeId + \"]\");\n+                    } else if (nodeId == null) {\n+                        nodeId = thisNodeId;\n+                        version = Version.fromId(Integer.parseInt(userData.get(NODE_VERSION_KEY)));\n+                    }\n+                    return new NodeMetaData(thisNodeId, Version.fromId(Integer.parseInt(userData.get(NODE_VERSION_KEY))));\n+                } catch (IndexNotFoundException e) {\n+                    logger.debug(new ParameterizedMessage(\"no on-disk state at {}\", indexPath), e);\n+                }\n+            }\n+        }\n+        if (nodeId == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMTY0OA=="}, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDIyNTI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjoyODozNFrOFbcggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjoyODozNFrOFbcggA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMjk0NA==", "bodyText": "nodeId is always null at this point.", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364322944", "createdAt": "2020-01-08T16:28:34Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "diffHunk": "@@ -218,6 +228,67 @@ public boolean empty() {\n         }\n     }\n \n+    /**\n+     * Returns the node metadata for the given data paths, and checks if the node ids are unique\n+     * @param dataPaths the data paths to scan\n+     */\n+    @Nullable\n+    public static NodeMetaData nodeMetaData(Path... dataPaths) throws IOException {\n+        String nodeId = null;\n+        Version version = null;\n+        for (final Path dataPath : dataPaths) {\n+            final Path indexPath = dataPath.resolve(METADATA_DIRECTORY_NAME);\n+            if (Files.exists(indexPath)) {\n+                try (DirectoryReader reader = DirectoryReader.open(new SimpleFSDirectory(dataPath.resolve(METADATA_DIRECTORY_NAME)))) {\n+                    final Map<String, String> userData = reader.getIndexCommit().getUserData();\n+                    assert userData.get(NODE_VERSION_KEY) != null;\n+\n+                    final String thisNodeId = userData.get(NODE_ID_KEY);\n+                    assert thisNodeId != null;\n+                    if (nodeId != null && nodeId.equals(thisNodeId) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDIyODA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjoyOToyMVrOFbciPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjoyOToyMVrOFbciPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMzM4OA==", "bodyText": "This assignment is unnecessary: nodeId is not used again.", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364323388", "createdAt": "2020-01-08T16:29:21Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "diffHunk": "@@ -218,6 +228,67 @@ public boolean empty() {\n         }\n     }\n \n+    /**\n+     * Returns the node metadata for the given data paths, and checks if the node ids are unique\n+     * @param dataPaths the data paths to scan\n+     */\n+    @Nullable\n+    public static NodeMetaData nodeMetaData(Path... dataPaths) throws IOException {\n+        String nodeId = null;\n+        Version version = null;\n+        for (final Path dataPath : dataPaths) {\n+            final Path indexPath = dataPath.resolve(METADATA_DIRECTORY_NAME);\n+            if (Files.exists(indexPath)) {\n+                try (DirectoryReader reader = DirectoryReader.open(new SimpleFSDirectory(dataPath.resolve(METADATA_DIRECTORY_NAME)))) {\n+                    final Map<String, String> userData = reader.getIndexCommit().getUserData();\n+                    assert userData.get(NODE_VERSION_KEY) != null;\n+\n+                    final String thisNodeId = userData.get(NODE_ID_KEY);\n+                    assert thisNodeId != null;\n+                    if (nodeId != null && nodeId.equals(thisNodeId) == false) {\n+                        throw new IllegalStateException(\"unexpected node ID in metadata, found [\" + thisNodeId +\n+                            \"] in [\" + dataPath + \"] but expected [\" + nodeId + \"]\");\n+                    } else if (nodeId == null) {\n+                        nodeId = thisNodeId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDI0MzU3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozMzoyNVrOFbcrpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozMzoyNVrOFbcrpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyNTc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the node metadata for the given data paths, and checks if the node ids are unique\n          \n          \n            \n                 * Returns the node metadata for one of the given data paths, or {@code null} if no node metadata is found in any of these paths.", "url": "https://github.com/elastic/elasticsearch/pull/50741#discussion_r364325798", "createdAt": "2020-01-08T16:33:25Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/gateway/PersistedClusterStateService.java", "diffHunk": "@@ -218,6 +228,67 @@ public boolean empty() {\n         }\n     }\n \n+    /**\n+     * Returns the node metadata for the given data paths, and checks if the node ids are unique", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9325a786890ca5fa51b697d708078b172cf330d1"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4935, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}