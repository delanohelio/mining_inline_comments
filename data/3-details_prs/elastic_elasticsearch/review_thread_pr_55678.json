{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3OTY4MTM2", "number": 55678, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0Mjo0N1rOD1T2IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1MjozMVrOD3KE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI2MjczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/datafeed/AggProviderWireSerializationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0Mjo0N1rOGKrz2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0Mjo0N1rOGKrz2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1NjcyOA==", "bodyText": "toXContent for the agg provider should only provide the agg map. This test is to make sure that we appropriate write between nodes of various versions.", "url": "https://github.com/elastic/elasticsearch/pull/55678#discussion_r413856728", "createdAt": "2020-04-23T14:42:47Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/datafeed/AggProviderWireSerializationTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.datafeed;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.search.SearchModule;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.xpack.core.ml.AbstractBWCWireSerializationTestCase;\n+import org.elasticsearch.xpack.core.ml.utils.XContentObjectTransformer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public class AggProviderWireSerializationTests extends AbstractBWCWireSerializationTestCase<AggProvider> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b9d0eaa8d03af29374adfa84e68aa219680029b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI3NDAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfigAutoUpdater.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NDo0NlrOGKr6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NDo0NlrOGKr6sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODQ4MA==", "bodyText": "If there are no datafeed configs, that also means there won't be any updates.\nThis is ok, as all new datafeed configs enforce the appropriate date_histogram agg format.", "url": "https://github.com/elastic/elasticsearch/pull/55678#discussion_r413858480", "createdAt": "2020-04-23T14:44:46Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfigAutoUpdater.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.datafeed;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedUpdate;\n+import org.elasticsearch.xpack.ml.MlAutoUpdateService;\n+import org.elasticsearch.xpack.ml.datafeed.persistence.DatafeedConfigProvider;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class DatafeedConfigAutoUpdater implements MlAutoUpdateService.UpdateAction {\n+\n+    private static final Logger logger = LogManager.getLogger(DatafeedConfigAutoUpdater.class);\n+    private final DatafeedConfigProvider provider;\n+\n+    public DatafeedConfigAutoUpdater(DatafeedConfigProvider provider) {\n+        this.provider = provider;\n+    }\n+\n+    @Override\n+    public boolean minNodeSupported(Version minNodeVersion) {\n+        return minNodeVersion.onOrAfter(Version.V_8_0_0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"datafeed_aggs_updater\";\n+    }\n+\n+    @Override\n+    public void runUpdate() {\n+        PlainActionFuture<List<DatafeedConfig.Builder>> getdatafeeds = PlainActionFuture.newFuture();\n+        provider.expandDatafeedConfigs(\"_all\", true, getdatafeeds);\n+        List<DatafeedConfig.Builder> datafeedConfigBuilders = getdatafeeds.actionGet();\n+        List<DatafeedUpdate> updates = datafeedConfigBuilders.stream()\n+            .map(DatafeedConfig.Builder::build)\n+            .filter(DatafeedConfig::aggsRewritten)\n+            .map(datafeedConfig -> new DatafeedUpdate.Builder()\n+                .setAggregations(datafeedConfig.getAggProvider())\n+                .setId(datafeedConfig.getId())\n+                .build())\n+            .collect(Collectors.toList());\n+        if (updates.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b9d0eaa8d03af29374adfa84e68aa219680029b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTYxMTY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlAutoUpdateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo0NjoxNVrOGNQDUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo0NjoxNVrOGNQDUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NzY2Nw==", "bodyText": "It's bad practice to pass a reference to this to some other service before the object is fully constructed.  There is currently a drive to refactor code where this is done - see #38560 - so it would be best not to add any more cases of this.  You'll have to add an extra method to add this to the listener once the constructor returns, for example see https://github.com/elastic/elasticsearch/pull/45517/files", "url": "https://github.com/elastic/elasticsearch/pull/55678#discussion_r416547667", "createdAt": "2020-04-28T11:46:15Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlAutoUpdateService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterChangedEvent;\n+import org.elasticsearch.cluster.ClusterStateListener;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+public class MlAutoUpdateService implements ClusterStateListener {\n+    private static final Logger logger = LogManager.getLogger(MlAutoUpdateService.class);\n+\n+    public interface UpdateAction {\n+        boolean minNodeSupported(Version minNodeVersion);\n+        String getName();\n+        void runUpdate();\n+    }\n+\n+    private final List<UpdateAction> updateActions;\n+    private final Set<String> currentlyUpdating;\n+    private final Set<String> completedUpdates;\n+    private final ThreadPool threadPool;\n+\n+    public MlAutoUpdateService(ThreadPool threadPool, ClusterService clusterService, List<UpdateAction> updateActions) {\n+        clusterService.addListener(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1eae6e2471b7471e701aeaef5b7d8db5c2c3e80"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTYzMzgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfigAutoUpdater.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1MjozMVrOGNQQsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1MjozMVrOGNQQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU1MTA4OA==", "bodyText": "When I saw this method name at the point of use it confused me enough that I had to look at the definition.  Therefore it might be clearer to rename it to isMinNodeVersionSupported.", "url": "https://github.com/elastic/elasticsearch/pull/55678#discussion_r416551088", "createdAt": "2020-04-28T11:52:31Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfigAutoUpdater.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.datafeed;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedUpdate;\n+import org.elasticsearch.xpack.ml.MlAutoUpdateService;\n+import org.elasticsearch.xpack.ml.datafeed.persistence.DatafeedConfigProvider;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class DatafeedConfigAutoUpdater implements MlAutoUpdateService.UpdateAction {\n+\n+    private static final Logger logger = LogManager.getLogger(DatafeedConfigAutoUpdater.class);\n+    private final DatafeedConfigProvider provider;\n+\n+    public DatafeedConfigAutoUpdater(DatafeedConfigProvider provider) {\n+        this.provider = provider;\n+    }\n+\n+    @Override\n+    public boolean minNodeSupported(Version minNodeVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1eae6e2471b7471e701aeaef5b7d8db5c2c3e80"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2692, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}