{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NDYzNzQ1", "number": 56696, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODo1Njo0NlrOD8YshA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOToxMjo1N1rOD8ZFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjQ1NzY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/transform/preview_transforms.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODo1Njo0NlrOGVSm3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODo1Njo0NlrOGVSm3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3ODE0MA==", "bodyText": "\ud83d\ude04", "url": "https://github.com/elastic/elasticsearch/pull/56696#discussion_r424978140", "createdAt": "2020-05-14T08:56:46Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/transform/preview_transforms.yml", "diffHunk": "@@ -265,12 +265,12 @@ setup:\n               \"group_by\": {\n                 \"time\": {\"date_histogram\": {\"fixed_interval\": \"1h\", \"field\": \"time\"}}},\n               \"aggs\": {\n-                \"vals\": {\"terms\": {\"field\":\"airline\"}}\n+                \"vals\": {\"significant_terms\": {\"field\":\"airline\"}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b6ea4638fe7ce56ff3b4dff9eaa00a3f03574c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjQ3NTYzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/AggregationResultUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTowMDo1NlrOGVSyOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoyNTozOFrOGVe3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4MTA1MA==", "bodyText": "\ud83d\udc4d this is almost exactly the way I implemented it, too (well, there is probably no other way).", "url": "https://github.com/elastic/elasticsearch/pull/56696#discussion_r424981050", "createdAt": "2020-05-14T09:00:56Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/AggregationResultUtils.java", "diffHunk": "@@ -246,6 +250,35 @@ public Object value(Aggregation agg, Map<String, String> fieldTypeMap, String lo\n         }\n     }\n \n+    static class MultiBucketsAggExtractor implements AggValueExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b6ea4638fe7ce56ff3b4dff9eaa00a3f03574c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3ODg4NQ==", "bodyText": "Great minds think alike.", "url": "https://github.com/elastic/elasticsearch/pull/56696#discussion_r425178885", "createdAt": "2020-05-14T14:25:38Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/AggregationResultUtils.java", "diffHunk": "@@ -246,6 +250,35 @@ public Object value(Aggregation agg, Map<String, String> fieldTypeMap, String lo\n         }\n     }\n \n+    static class MultiBucketsAggExtractor implements AggValueExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4MTA1MA=="}, "originalCommit": {"oid": "d9b6ea4638fe7ce56ff3b4dff9eaa00a3f03574c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjUyMTA5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/AggregationResultUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOToxMjo1N1rOGVTP7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoyNjowMFrOGVe4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4ODY1NA==", "bodyText": "it would be good to cover this branch and have a test with nested terms aggs, like your common user example, broke down by e.g. businesses or filtered by something", "url": "https://github.com/elastic/elasticsearch/pull/56696#discussion_r424988654", "createdAt": "2020-05-14T09:12:57Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/AggregationResultUtils.java", "diffHunk": "@@ -246,6 +250,35 @@ public Object value(Aggregation agg, Map<String, String> fieldTypeMap, String lo\n         }\n     }\n \n+    static class MultiBucketsAggExtractor implements AggValueExtractor {\n+        @Override\n+        public Object value(Aggregation agg, Map<String, String> fieldTypeMap, String lookupFieldPrefix) {\n+            MultiBucketsAggregation aggregation = (MultiBucketsAggregation) agg;\n+\n+            HashMap<String, Object> nested = new HashMap<>();\n+\n+            for (MultiBucketsAggregation.Bucket bucket : aggregation.getBuckets()) {\n+                if (bucket.getAggregations().iterator().hasNext() == false) {\n+                    nested.put(bucket.getKeyAsString(), bucket.getDocCount());\n+                } else {\n+                    HashMap<String, Object> nestedBucketObject = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b6ea4638fe7ce56ff3b4dff9eaa00a3f03574c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3OTE5MQ==", "bodyText": "OK, will do.", "url": "https://github.com/elastic/elasticsearch/pull/56696#discussion_r425179191", "createdAt": "2020-05-14T14:26:00Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/AggregationResultUtils.java", "diffHunk": "@@ -246,6 +250,35 @@ public Object value(Aggregation agg, Map<String, String> fieldTypeMap, String lo\n         }\n     }\n \n+    static class MultiBucketsAggExtractor implements AggValueExtractor {\n+        @Override\n+        public Object value(Aggregation agg, Map<String, String> fieldTypeMap, String lookupFieldPrefix) {\n+            MultiBucketsAggregation aggregation = (MultiBucketsAggregation) agg;\n+\n+            HashMap<String, Object> nested = new HashMap<>();\n+\n+            for (MultiBucketsAggregation.Bucket bucket : aggregation.getBuckets()) {\n+                if (bucket.getAggregations().iterator().hasNext() == false) {\n+                    nested.put(bucket.getKeyAsString(), bucket.getDocCount());\n+                } else {\n+                    HashMap<String, Object> nestedBucketObject = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4ODY1NA=="}, "originalCommit": {"oid": "d9b6ea4638fe7ce56ff3b4dff9eaa00a3f03574c"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 381, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}