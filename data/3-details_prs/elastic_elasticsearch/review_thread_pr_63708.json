{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjg3NzQ0", "number": 63708, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyMzowM1rOEt1GVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNToxMDoyNlrOFF-x1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDkxMzUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyMzowM1rOHh2eeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyMzowM1rOHh2eeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI1NzU5Mw==", "bodyText": "the new audit method.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r505257593", "createdAt": "2020-10-15T07:23:03Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "diffHunk": "@@ -47,6 +48,10 @@ void accessGranted(String requestId, Authentication authentication, String actio\n     void accessDenied(String requestId, Authentication authentication, String action, TransportRequest transportRequest,\n                       AuthorizationInfo authorizationInfo);\n \n+    // this is the only audit method that is called *after* the action executed, when the response is available\n+    void actionResponse(String requestId, Authentication authentication, String action, TransportRequest transportRequest,\n+                        TransportResponse transportResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d647eee633e193a6f2059dbee18188606039f4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTM3ODEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODozMTowOFrOHh7ZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODozMTowOFrOHh7ZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMzODI0MA==", "bodyText": "This intercepts the response for the action that is executed inside the rest handler (that do NOT go to other cluster nodes).", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r505338240", "createdAt": "2020-10-15T08:31:08Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,25 +86,24 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n+            final ActionListener<Response> postActionExecutionListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, response) -> {\n+                        String requestId = AuditUtil.extractRequestId(threadContext);\n+                        Authentication authentication = securityContext.getAuthentication();\n+                        auditTrailService.get().actionResponse(requestId, authentication, action, request, response);\n+                        contextPreservingListener.onResponse(response);\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d647eee633e193a6f2059dbee18188606039f4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTM5ODQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODozNDo1NlrOHh7mpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODozNDo1NlrOHh7mpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM0MTYwNw==", "bodyText": "This intercepts the response for actions executed on other cluster nodes (when an action on the coordinating node submits requests to other nodes - or even the same node)", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r505341607", "createdAt": "2020-10-15T08:34:56Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java", "diffHunk": "@@ -225,7 +237,36 @@ public void onFailure(Exception e) {\n \n                 @Override\n                 protected void doRun() throws Exception {\n-                    handler.messageReceived(request, channel, task);\n+                    handler.messageReceived(request, new TransportChannel() {\n+\n+                        @Override\n+                        public String getProfileName() {\n+                            return channel.getProfileName();\n+                        }\n+\n+                        @Override\n+                        public String getChannelType() {\n+                            return channel.getChannelType();\n+                        }\n+\n+                        @Override\n+                        public Version getVersion() {\n+                            return channel.getVersion();\n+                        }\n+\n+                        @Override\n+                        public void sendResponse(TransportResponse response) throws IOException {\n+                            String requestId = AuditUtil.extractRequestId(threadContext);\n+                            Authentication authentication = securityContext.getAuthentication();\n+                            auditTrailService.get().actionResponse(requestId, authentication, action, request, response);\n+                            channel.sendResponse(response);\n+                        }\n+\n+                        @Override\n+                        public void sendResponse(Exception exception) throws IOException {\n+                            channel.sendResponse(exception);\n+                        }\n+                    }, task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d647eee633e193a6f2059dbee18188606039f4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjE0MjQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToyMToxNlrOHiDAtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzoyNTowM1rOHqyICw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Mjk2NA==", "bodyText": "I haven't mentioned this as a drawback when we discussed it. I think I wasn't fully confident in my ability to clearly explain it. But this is part of the complexity and maintenance burden that I've mentioned, so I'll try to explain it here:\nIn order to pass the requestId and authentication as arguments to the new audit method, they need to be pulled from the thread context. Currently the requestId and authentication ARE present in the thread context when the listener is called with the response. But to ensure this forward we'll have to introduce an assertion (probably at this very place in the code). Even then, we cannot guarantee it because tests don't cover all the paths in an action handler: it could be that some handler stashes the thread context and calls the listener with a response (without calling another transport action, which is the usual course of action when stashing the context).\nAlternatively, we could enforce it more stringently. Instead of an assert we could hard fail (reroute the call to listener.onResponse to listener.onFailure) if we detect that the thread context has been altered.\nI favour the latter, but maybe this is overdoing it since the \"danger\" is inaccurate (missing requestId and authentication) audit logging for action responses (for which there is not concrete use case atm, but think of auditing creating API keys as an example).\nWe could also opt for assets in the minor and hard fail in the major release, similar to what we've discussed for indices privileges.\nThis is no longer true because the requestId and the authentication are now pulled from the threadContext after authorization, but before action execution, and are stored to be used as arguments to the new audit method, after the action executes.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r505462964", "createdAt": "2020-10-15T11:21:16Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,25 +86,24 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n+            final ActionListener<Response> postActionExecutionListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, response) -> {\n+                        String requestId = AuditUtil.extractRequestId(threadContext);\n+                        Authentication authentication = securityContext.getAuthentication();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d647eee633e193a6f2059dbee18188606039f4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwOTQ0Ng==", "bodyText": "Alternatively, we could enforce it more stringently. Instead of an assert we could hard fail (reroute the call to listener.onResponse to listener.onFailure) if we detect that the thread context has been altered.\n\nI've pushed 2f5e546\nto better illustrate what I mean.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r505509446", "createdAt": "2020-10-15T12:42:58Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,25 +86,24 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n+            final ActionListener<Response> postActionExecutionListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, response) -> {\n+                        String requestId = AuditUtil.extractRequestId(threadContext);\n+                        Authentication authentication = securityContext.getAuthentication();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Mjk2NA=="}, "originalCommit": {"oid": "48d647eee633e193a6f2059dbee18188606039f4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzQ5OQ==", "bodyText": "I've iterated on the issue, this is no longer a problem.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r514623499", "createdAt": "2020-10-29T23:25:03Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,25 +86,24 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n+            final ActionListener<Response> postActionExecutionListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, response) -> {\n+                        String requestId = AuditUtil.extractRequestId(threadContext);\n+                        Authentication authentication = securityContext.getAuthentication();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Mjk2NA=="}, "originalCommit": {"oid": "48d647eee633e193a6f2059dbee18188606039f4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU2MzI4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/AuthenticationServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzoyODoyM1rOHqyMEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzoyODoyM1rOHqyMEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNDUyOA==", "bodyText": "Tests in this class have been modified to ensure that a requestId is set when done.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r514624528", "createdAt": "2020-10-29T23:28:23Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/AuthenticationServiceTests.java", "diffHunk": "@@ -297,17 +299,26 @@ public void testTokenMissing() throws Exception {\n \n             Mockito.doReturn(List.of(secondRealm)).when(realms).getUnlicensedRealms();\n             Mockito.doReturn(List.of(firstRealm)).when(realms).asList();\n-            final String reqId = AuditUtil.getOrGenerateRequestId(threadContext);\n+            boolean requestIdAlreadyPresent = randomBoolean();\n+            SetOnce<String> reqId = new SetOnce<>();\n+            if (requestIdAlreadyPresent) {\n+                reqId.set(AuditUtil.getOrGenerateRequestId(threadContext));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU2Njg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizationServiceTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozMDowMFrOHqyN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozMDowMFrOHqyN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNTAyMQ==", "bodyText": "Similarly to the changes in the AuthenticationServiceTests, the tests in this class have been modified to assert that the requestId is set following a successful authz.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r514625021", "createdAt": "2020-10-29T23:30:00Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizationServiceTests.java", "diffHunk": "@@ -274,7 +276,8 @@ public void setup() {\n             null, Collections.emptySet(), licenseState, new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)));\n     }\n \n-    private void authorize(Authentication authentication, String action, TransportRequest request) {\n+    private void authorize(Authentication authentication, String action, TransportRequest request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTg3MjQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjo0NjowNFrOHr0yrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMDowMjowMVrOIARW6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxNTc1Nw==", "bodyText": "Nit (kinda of): By the contract of ActionListener#delegateFailure, I'd prefer to not ignore the delegated listener. For this particular usage, it does not make any functional difference, but it feels abit strange to have (ignore, aVoid). I am also not entirely sure (this could be nothing) whether there could be any low level optimisation concerns, e.g. code compliation/rewriting, JIT, inlining etc (because one is captured in the form of method argument and the other is captured as scope variable)\nAlternatively, we could just use ActionListener#wrap if we do wanna ignore the delegated listener.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r515715757", "createdAt": "2020-11-02T02:46:04Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,29 +88,38 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n-            ActionListener<Void> authenticatedListener = ActionListener.wrap(\n-                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);\n+            final ActionListener<Void> postAuthzListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, aVoid) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM1MTEyOA==", "bodyText": "it feels abit strange to have (ignore, aVoid)\n\nSure, but the alternative of having variables similarly named pointing to the same thing is not preferable IMO.\n\nAlternatively, we could just use ActionListener#wrap if we do wanna ignore the delegated listener.\n\nI don't know about this either. I think that If I were to come up with the ActionListener#wrap in the first place, I might be getting the converse suggestion (no flame).", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r516351128", "createdAt": "2020-11-03T00:09:41Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,29 +88,38 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n-            ActionListener<Void> authenticatedListener = ActionListener.wrap(\n-                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);\n+            final ActionListener<Void> postAuthzListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, aVoid) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxNTc1Nw=="}, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1NTMwNg==", "bodyText": "This is not a big issue. So I am happy to let it slide.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r537155306", "createdAt": "2020-12-07T00:02:01Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,29 +88,38 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n-            ActionListener<Void> authenticatedListener = ActionListener.wrap(\n-                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);\n+            final ActionListener<Void> postAuthzListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, aVoid) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxNTc1Nw=="}, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTg3NTc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjo0OTowNVrOHr00rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjo0OTowNVrOHr00rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxNjI2OA==", "bodyText": "Similar ignored delegate listener here. See above also.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r515716268", "createdAt": "2020-11-02T02:49:05Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -83,29 +88,38 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n-            ActionListener<Void> authenticatedListener = ActionListener.wrap(\n-                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);\n+            final ActionListener<Void> postAuthzListener = ActionListener.delegateFailure(contextPreservingListener,\n+                    (ignore, aVoid) -> {\n+                        // extract the requestId and the authentication from the threadContext before executing the action\n+                        final String requestId = AuditUtil.extractRequestId(threadContext);\n+                        if (requestId == null) {\n+                            contextPreservingListener.onFailure(new ElasticsearchSecurityException(\"requestId is unexpectedly missing\"));\n+                            return;\n+                        }\n+                        final Authentication authentication = securityContext.getAuthentication();\n+                        if (authentication == null) {\n+                            contextPreservingListener.onFailure(new ElasticsearchSecurityException(\"authn is unexpectedly missing\"));\n+                            return;\n+                        }\n+                        chain.proceed(task, action, request, ActionListener.delegateFailure(contextPreservingListener,\n+                                (ignore2, response) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTg5MDgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjo1OTo1MVrOHr09Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzo1NTozM1rOHsbJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODQzOA==", "bodyText": "Good catch! Is this technically a bug?", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r515718438", "createdAt": "2020-11-02T02:59:51Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -188,14 +188,15 @@ public void authorize(final Authentication authentication, final String action,\n             if (auditId == null) {\n                 // We would like to assert that there is an existing request-id, but if this is a system action, then that might not be\n                 // true because the request-id is generated during authentication\n-                if (isInternalUser(authentication.getUser()) != false) {\n+                if (isInternalUser(authentication.getUser())) {\n                     auditId = AuditUtil.getOrGenerateRequestId(threadContext);\n                 } else {\n                     auditTrailService.get().tamperedRequest(null, authentication, action, originalRequest);\n                     final String message = \"Attempt to authorize action [\" + action + \"] for [\" + authentication.getUser().principal()\n                             + \"] without an existing request-id\";\n                     assert false : message;\n                     listener.onFailure(new ElasticsearchSecurityException(message));\n+                    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0NDE1NQ==", "bodyText": "yes", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r516344155", "createdAt": "2020-11-02T23:55:33Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -188,14 +188,15 @@ public void authorize(final Authentication authentication, final String action,\n             if (auditId == null) {\n                 // We would like to assert that there is an existing request-id, but if this is a system action, then that might not be\n                 // true because the request-id is generated during authentication\n-                if (isInternalUser(authentication.getUser()) != false) {\n+                if (isInternalUser(authentication.getUser())) {\n                     auditId = AuditUtil.getOrGenerateRequestId(threadContext);\n                 } else {\n                     auditTrailService.get().tamperedRequest(null, authentication, action, originalRequest);\n                     final String message = \"Attempt to authorize action [\" + action + \"] for [\" + authentication.getUser().principal()\n                             + \"] without an existing request-id\";\n                     assert false : message;\n                     listener.onFailure(new ElasticsearchSecurityException(message));\n+                    return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODQzOA=="}, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTg5MTE2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzowMDowMlrOHr09UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo1ODoxMVrOHtOlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODQ4MA==", "bodyText": "Why do we flip the logic here?", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r515718480", "createdAt": "2020-11-02T03:00:02Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -188,14 +188,15 @@ public void authorize(final Authentication authentication, final String action,\n             if (auditId == null) {\n                 // We would like to assert that there is an existing request-id, but if this is a system action, then that might not be\n                 // true because the request-id is generated during authentication\n-                if (isInternalUser(authentication.getUser()) != false) {\n+                if (isInternalUser(authentication.getUser())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0Mzk5Mw==", "bodyText": "We don't ;)", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r516343993", "createdAt": "2020-11-02T23:55:16Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -188,14 +188,15 @@ public void authorize(final Authentication authentication, final String action,\n             if (auditId == null) {\n                 // We would like to assert that there is an existing request-id, but if this is a system action, then that might not be\n                 // true because the request-id is generated during authentication\n-                if (isInternalUser(authentication.getUser()) != false) {\n+                if (isInternalUser(authentication.getUser())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODQ4MA=="}, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4Njg4MQ==", "bodyText": "Right, sorry I thought it was ==.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r517186881", "createdAt": "2020-11-04T08:58:11Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -188,14 +188,15 @@ public void authorize(final Authentication authentication, final String action,\n             if (auditId == null) {\n                 // We would like to assert that there is an existing request-id, but if this is a system action, then that might not be\n                 // true because the request-id is generated during authentication\n-                if (isInternalUser(authentication.getUser()) != false) {\n+                if (isInternalUser(authentication.getUser())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODQ4MA=="}, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTg5MzgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzowMTo1M1rOHr0-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzowMTo1M1rOHr0-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODgzOQ==", "bodyText": "We have User#isInternal which does the same and I think this method here can be dropped.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r515718839", "createdAt": "2020-11-02T03:01:53Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java", "diffHunk": "@@ -436,7 +437,8 @@ private TransportRequest maybeUnwrapRequest(Authentication authentication, Trans\n         return request;\n     }\n \n-    private boolean isInternalUser(User user) {\n+    // protected for tests\n+    protected static boolean isInternalUser(User user) {\n         return SystemUser.is(user) || XPackUser.is(user) || XPackSecurityUser.is(user) || AsyncSearchUser.is(user);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c031671e2aeb5fcd0fc3870792bfe120faeb845"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODI1NjU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzo1MTo1NVrOIBLsOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzo1MTo1NVrOIBLsOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExMTAzMw==", "bodyText": "I wonder whether it would be better to create a different Runnable depending on whether security is enabled instead of testing securityEnabled inside the Runnable.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r538111033", "createdAt": "2020-12-08T07:51:55Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java", "diffHunk": "@@ -241,9 +296,10 @@ public String toString() {\n \n         @Override\n         public void messageReceived(T request, TransportChannel channel, Task task) throws Exception {\n-            final AbstractRunnable receiveMessage = getReceiveRunnable(request, channel, task);\n+            final boolean securityEnabled = licenseState.isSecurityEnabled();\n+            final AbstractRunnable receiveMessage = getReceiveRunnable(request, channel, task, securityEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a730658647ddcaaad3f3159f127e9b37312be40d"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjg5MjQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxMjoxOVrOIGAesA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTowODowM1rOIG_7eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MDIyNA==", "bodyText": "This is not technically true, some actions' (TransportMasterNodeAction) responses are intercepted on the coordinating node, as well as on the master node.\nThe naming and descriptions are difficult to write to convey the subset of actions that are covered.\nWe could also bleed some internals in here and mention the SecurityActionFilter.\nOpen to suggestions.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r543170224", "createdAt": "2020-12-15T09:12:19Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "diffHunk": "@@ -81,4 +82,9 @@ void runAsDenied(String requestId, Authentication authentication, RestRequest re\n     void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,\n                                   String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);\n \n+    // this is the only audit method that is called *after* the action executed, when the response is available\n+    // it is however *only called for coordinating actions*, which are the actions that a client invokes as opposed to\n+    // the actions that a node invokes in order to service a client request\n+    void coordinatingActionResponse(String requestId, Authentication authentication, String action, TransportRequest transportRequest,\n+                                    TransportResponse transportResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ddb6e2313d840c12e35e1b08ab961bc3049cf1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjk0NA==", "bodyText": "I think we could keep the previous name, i.e. actionResponse. Please let me explain: When I suggested pulling out the code from SecurityServerTransportInterceptor, it was in the context of getting auditing for API key ID in for v7.11.0. The reasons are:\n\nThe response in SecurityServerTransportInterceptor is a fairly low level indexing response and does not really provide extra valuable information than the one in the coordinating node. Therefore auditing on just the coordinating node is sufficient.\nCreating API key is underlyingly a TransportReplicationAction. Unlike TransportMasterNodeAction, it does not go through the SecurityActionFilter (on the remote node). This means: on the remote node, we will not get another auditing entry from SecurityActionFilter, i.e. there will only be a single auditing entry about API key creation and it is on the coordinating node.\n\nSo my motivation was rather narrowly focused on the particular use case. The agreement, as I understand it, is to defer the auditing code in SecurityServerTransportInterceptor until the next release. Because it is not necessary for API key auditing in this release and if it is not in use, it's better to be left out. But we also agreed that it could still be useful when we expand the usage scenario and this is subject to further discussion.\nIIUC, your intention of changing the method name is for the possibility to have two different audit event types. I should have been clear that it was not my proposal. I consider whether auditing inside SecurityServerTransportInterceptor an implementation detail, which we chose to opt out for initial release, but could choose to add it later as an enhancement. For verbosity and duplication control, I'd prefer to solve it in a different way other than splitting it into different audit event types. I hope this makes sense.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r543322944", "createdAt": "2020-12-15T13:02:49Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "diffHunk": "@@ -81,4 +82,9 @@ void runAsDenied(String requestId, Authentication authentication, RestRequest re\n     void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,\n                                   String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);\n \n+    // this is the only audit method that is called *after* the action executed, when the response is available\n+    // it is however *only called for coordinating actions*, which are the actions that a client invokes as opposed to\n+    // the actions that a node invokes in order to service a client request\n+    void coordinatingActionResponse(String requestId, Authentication authentication, String action, TransportRequest transportRequest,\n+                                    TransportResponse transportResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MDIyNA=="}, "originalCommit": {"oid": "e5ddb6e2313d840c12e35e1b08ab961bc3049cf1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4NzA0MA==", "bodyText": "Thanks for the detailed explanation Yang, but I would like to focus the conversation on the scope of this PR only. We should consider the broader picture, as you describe, but ultimately this PR is what gets merged as a unit, and what we merge in the future is subject to debate still.\nIf we merge this PR, which adds the audit hook for the responses of actions intercepted by the SecurityActionFilter only, we add to the interface of the LoggingAuditTrail .\nWhen we later merge the code to allow intercepting the responses of the other actions, we have the options to:\n\nreuse the same LoggingAuditTrail hook method\nrename the existing hook method, or\nadd a new audit response hook method.\n(or any mix of them, really, if we feel wild)\n\nBecause this is a private interface, I don't believe we have to name it in anticipation of its use. We should name it for the purpose that it serves right now, as we can always tinker with it later. For this reason, I would not favor the actionResponse name.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r543387040", "createdAt": "2020-12-15T14:21:57Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "diffHunk": "@@ -81,4 +82,9 @@ void runAsDenied(String requestId, Authentication authentication, RestRequest re\n     void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,\n                                   String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);\n \n+    // this is the only audit method that is called *after* the action executed, when the response is available\n+    // it is however *only called for coordinating actions*, which are the actions that a client invokes as opposed to\n+    // the actions that a node invokes in order to service a client request\n+    void coordinatingActionResponse(String requestId, Authentication authentication, String action, TransportRequest transportRequest,\n+                                    TransportResponse transportResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MDIyNA=="}, "originalCommit": {"oid": "e5ddb6e2313d840c12e35e1b08ab961bc3049cf1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk5MTAwNA==", "bodyText": "Just trying to brainstorm here: How about calling this one actionResponse and the other one transportResponse?\nAs you said, this is a private interface, so we don't have to struggle too much with its name now. So please feel free to use whatever works for you.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r543991004", "createdAt": "2020-12-16T05:47:28Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "diffHunk": "@@ -81,4 +82,9 @@ void runAsDenied(String requestId, Authentication authentication, RestRequest re\n     void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,\n                                   String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);\n \n+    // this is the only audit method that is called *after* the action executed, when the response is available\n+    // it is however *only called for coordinating actions*, which are the actions that a client invokes as opposed to\n+    // the actions that a node invokes in order to service a client request\n+    void coordinatingActionResponse(String requestId, Authentication authentication, String action, TransportRequest transportRequest,\n+                                    TransportResponse transportResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MDIyNA=="}, "originalCommit": {"oid": "e5ddb6e2313d840c12e35e1b08ab961bc3049cf1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwOTc4NA==", "bodyText": "Yeah, this could work. I'll keep this in mind when we'll iterate on the interface.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r544209784", "createdAt": "2020-12-16T11:08:03Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java", "diffHunk": "@@ -81,4 +82,9 @@ void runAsDenied(String requestId, Authentication authentication, RestRequest re\n     void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,\n                                   String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);\n \n+    // this is the only audit method that is called *after* the action executed, when the response is available\n+    // it is however *only called for coordinating actions*, which are the actions that a client invokes as opposed to\n+    // the actions that a node invokes in order to service a client request\n+    void coordinatingActionResponse(String requestId, Authentication authentication, String action, TransportRequest transportRequest,\n+                                    TransportResponse transportResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MDIyNA=="}, "originalCommit": {"oid": "e5ddb6e2313d840c12e35e1b08ab961bc3049cf1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA2MTgwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNDoyOVrOIGLH5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNDoyOVrOIGLH5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NDYxMw==", "bodyText": "Nit: now there is no actual change to this constructor, probably wanna get rid of the unnecessary format change as well.", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r543344613", "createdAt": "2020-12-15T13:34:29Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java", "diffHunk": "@@ -519,9 +519,10 @@ protected Clock getClock() {\n         components.add(ipFilter.get());\n         DestructiveOperations destructiveOperations = new DestructiveOperations(settings, clusterService.getClusterSettings());\n         securityInterceptor.set(new SecurityServerTransportInterceptor(settings, threadPool, authcService.get(),\n-                authzService, getLicenseState(), getSslService(), securityContext.get(), destructiveOperations, clusterService));\n+                authzService, getLicenseState(), getSslService(), securityContext.get(), destructiveOperations,\n+                clusterService));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7851883f7bb0b770c3f2b0319c6482f13fda5c38"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDE5NDM1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/AuthenticationServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMDo0OVrOIGMUoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMDo0OVrOIGMUoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NDI1Nw==", "bodyText": "Nit: this assertion of reqId.get() being non-null does not exist in other places. Do we need it here?", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r543364257", "createdAt": "2020-12-15T14:00:49Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/AuthenticationServiceTests.java", "diffHunk": "@@ -331,10 +342,20 @@ public void testAuthenticateBothSupportSecondSucceeds() throws Exception {\n         } else {\n             when(secondRealm.token(threadContext)).thenReturn(token);\n         }\n-        final String reqId = AuditUtil.getOrGenerateRequestId(threadContext);\n+        boolean requestIdAlreadyPresent = randomBoolean();\n+        SetOnce<String> reqId = new SetOnce<>();\n+        if (requestIdAlreadyPresent) {\n+            reqId.set(AuditUtil.getOrGenerateRequestId(threadContext));\n+            assertThat(reqId.get(), not(nullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7851883f7bb0b770c3f2b0319c6482f13fda5c38"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODE1NzY0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNToxMDoyNlrOIGw23A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNToxMDoyNlrOIGw23A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2Mjg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private <Request extends ActionRequest, Response extends ActionResponse> void applyInternal(Task task, ActionFilterChain<Request,\n          \n          \n            \n                        Response> chain, String action, Request request, ActionListener<Response> listener) {\n          \n          \n            \n                private <Request extends ActionRequest, Response extends ActionResponse> void applyInternal(Task task,\n          \n          \n            \n                        ActionFilterChain<Request, Response> chain, String action, Request request, ActionListener<Response> listener) {", "url": "https://github.com/elastic/elasticsearch/pull/63708#discussion_r543962844", "createdAt": "2020-12-16T05:10:26Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -130,13 +124,13 @@ public int order() {\n         return Integer.MIN_VALUE;\n     }\n \n-    private <Request extends ActionRequest> void applyInternal(String action, Request request,\n-                                                               ActionListener<Void> listener) throws IOException {\n+    private <Request extends ActionRequest, Response extends ActionResponse> void applyInternal(Task task, ActionFilterChain<Request,\n+            Response> chain, String action, Request request, ActionListener<Response> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a2852b85fa33da2d36446c6a6d0f859cb73d1a"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2877, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}