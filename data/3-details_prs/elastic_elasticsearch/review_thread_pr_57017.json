{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDI2OTIw", "number": 57017, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODozNjoyMFrOD-hP7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjozNDoxMVrOD-qq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODgzMDUzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODozNjoyMFrOGYq0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo0OToyOFrOGYzf7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyMDU4MA==", "bodyText": "No big deal, but might this be a little easier to grok as follows?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String name = file.name.substring(0, file.name.length() - '-NOTICE.txt'.length())\n          \n          \n            \n                        String name = file.name.replaceFirst(\"-NOTICE\\.txt$\", \"\")", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428520580", "createdAt": "2020-05-21T08:36:20Z", "author": {"login": "pugnascotia"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "diffHunk": "@@ -50,46 +55,122 @@ public class NoticeTask extends DefaultTask {\n     }\n \n     /** Add notices from the specified directory. */\n-    public void licensesDir(File licensesDir) {\n+    void licensesDir(File licensesDir) {\n         licensesDirs.add(licensesDir)\n     }\n \n+    void source(Object source) {\n+        if (sources == null) {\n+            sources = project.fileTree(source)\n+        } else {\n+            sources += project.fileTree(source)\n+        }\n+    }\n+\n+    void source(SourceDirectorySet source) {\n+        if (sources == null) {\n+            sources = source\n+        } else {\n+            sources += source\n+        }\n+    }\n+\n     @TaskAction\n-    public void generateNotice() {\n+    void generateNotice() {\n         StringBuilder output = new StringBuilder()\n         output.append(inputFile.getText('UTF-8'))\n         output.append('\\n\\n')\n         // This is a map rather than a set so that the sort order is the 3rd\n         // party component names, unaffected by the full path to the various files\n         Map<String, File> seen = new TreeMap<>()\n-        for (File licensesDir : licensesDirs) {\n-            licensesDir.eachFileMatch({ it ==~ /.*-NOTICE\\.txt/ }) { File file ->\n-                String name = file.name.substring(0, file.name.length() - '-NOTICE.txt'.length())\n-                if (seen.containsKey(name)) {\n-                    File prevFile = seen.get(name)\n-                    if (prevFile.text != file.text) {\n-                        throw new RuntimeException(\"Two different notices exist for dependency '\" +\n-                                name + \"': \" + prevFile + \" and \" + file)\n-                    }\n-                } else {\n-                    seen.put(name, file)\n+        noticeFiles.each { File file ->\n+            String name = file.name.substring(0, file.name.length() - '-NOTICE.txt'.length())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cca9badb6e778d543f364c54855892f555e22eb"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Mjc2Ng==", "bodyText": "No doubt \ud83d\ude04", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428662766", "createdAt": "2020-05-21T13:49:28Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "diffHunk": "@@ -50,46 +55,122 @@ public class NoticeTask extends DefaultTask {\n     }\n \n     /** Add notices from the specified directory. */\n-    public void licensesDir(File licensesDir) {\n+    void licensesDir(File licensesDir) {\n         licensesDirs.add(licensesDir)\n     }\n \n+    void source(Object source) {\n+        if (sources == null) {\n+            sources = project.fileTree(source)\n+        } else {\n+            sources += project.fileTree(source)\n+        }\n+    }\n+\n+    void source(SourceDirectorySet source) {\n+        if (sources == null) {\n+            sources = source\n+        } else {\n+            sources += source\n+        }\n+    }\n+\n     @TaskAction\n-    public void generateNotice() {\n+    void generateNotice() {\n         StringBuilder output = new StringBuilder()\n         output.append(inputFile.getText('UTF-8'))\n         output.append('\\n\\n')\n         // This is a map rather than a set so that the sort order is the 3rd\n         // party component names, unaffected by the full path to the various files\n         Map<String, File> seen = new TreeMap<>()\n-        for (File licensesDir : licensesDirs) {\n-            licensesDir.eachFileMatch({ it ==~ /.*-NOTICE\\.txt/ }) { File file ->\n-                String name = file.name.substring(0, file.name.length() - '-NOTICE.txt'.length())\n-                if (seen.containsKey(name)) {\n-                    File prevFile = seen.get(name)\n-                    if (prevFile.text != file.text) {\n-                        throw new RuntimeException(\"Two different notices exist for dependency '\" +\n-                                name + \"': \" + prevFile + \" and \" + file)\n-                    }\n-                } else {\n-                    seen.put(name, file)\n+        noticeFiles.each { File file ->\n+            String name = file.name.substring(0, file.name.length() - '-NOTICE.txt'.length())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyMDU4MA=="}, "originalCommit": {"oid": "2cca9badb6e778d543f364c54855892f555e22eb"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDE2NjA0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNTo0MjowOFrOGY4A1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNTo0MjowOFrOGY4A1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczNjcyNA==", "bodyText": "I think you have a rogue quote in there.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String name = file.name.replaceFirst(/-NOTICE\\.txt$\"/, \"\")\n          \n          \n            \n                        String name = file.name.replaceFirst(/-NOTICE\\.txt$/, \"\")", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428736724", "createdAt": "2020-05-21T15:42:08Z", "author": {"login": "pugnascotia"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "diffHunk": "@@ -84,7 +84,7 @@ class NoticeTask extends DefaultTask {\n         // party component names, unaffected by the full path to the various files\n         Map<String, File> seen = new TreeMap<>()\n         noticeFiles.each { File file ->\n-            String name = file.name.replaceFirst(\"-NOTICE\\.txt$\", \"\")\n+            String name = file.name.replaceFirst(/-NOTICE\\.txt$\"/, \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDI5ODkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/collect/EvictingQueue.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoxMzoxOVrOGY5WuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozMDoxMVrOGbX6Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1ODcxMg==", "bodyText": "One challenge here is that we have made modifications to these files, and my understanding is that we're suppose to indicate that. That is, this is not a direct copy of EvictingQueue from Guava, but rather the starting point, and then we made some modifications in place which are of course not copyright the Guava authors.", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428758712", "createdAt": "2020-05-21T16:13:19Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/common/collect/EvictingQueue.java", "diffHunk": "@@ -1,20 +1,17 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n+/* @notice\n+ * Copyright (C) 2012 The Guava Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2ODE1NA==", "bodyText": "Same situation for our Guice fork. What's the right course of action here? Do we require a slightly different header, or include both the ES one and the vendored one?", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428868154", "createdAt": "2020-05-21T19:33:15Z", "author": {"login": "mark-vieira"}, "path": "server/src/main/java/org/elasticsearch/common/collect/EvictingQueue.java", "diffHunk": "@@ -1,20 +1,17 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n+/* @notice\n+ * Copyright (C) 2012 The Guava Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1ODcxMg=="}, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNTA5Mw==", "bodyText": "@jasontedor can we push forward on this as-is or do you suspect we need to change these headers?\n@tomcallahan do you have thoughts on the proper way to handle vendored code that is not a direct copy, but has been modified?", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r431325093", "createdAt": "2020-05-27T17:41:32Z", "author": {"login": "mark-vieira"}, "path": "server/src/main/java/org/elasticsearch/common/collect/EvictingQueue.java", "diffHunk": "@@ -1,20 +1,17 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n+/* @notice\n+ * Copyright (C) 2012 The Guava Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1ODcxMg=="}, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1NjQzNQ==", "bodyText": "@mark-vieira - @jasontedor is correct that we should flag the fact that we've modified these files. I think it would be fine to simply add something like this:\nModifications copyright (C) <year> Elasticsearch B.V.\nafter the Guava copyright", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r431356435", "createdAt": "2020-05-27T18:30:11Z", "author": {"login": "tomcallahan"}, "path": "server/src/main/java/org/elasticsearch/common/collect/EvictingQueue.java", "diffHunk": "@@ -1,20 +1,17 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n+/* @notice\n+ * Copyright (C) 2012 The Guava Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1ODcxMg=="}, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDM1MjYzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/BCrypt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoyODoyMVrOGY54sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoyODoyMVrOGY54sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2NzQxMA==", "bodyText": "nit: this comment block should be before the package statement, for consistency with the rest of our files", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428767410", "createdAt": "2020-05-21T16:28:21Z", "author": {"login": "rjernst"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/BCrypt.java", "diffHunk": "@@ -1,18 +1,20 @@\n package org.elasticsearch.xpack.core.security.authc.support;\n \n-// Copyright (c) 2006 Damien Miller <djm@mindrot.org>\n-//\n-// Permission to use, copy, modify, and distribute this software for any\n-// purpose with or without fee is hereby granted, provided that the above\n-// copyright notice and this permission notice appear in all copies.\n-//\n-// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n-// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n-// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n-// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n-// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n-// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n-// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n+/* @notice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDM3Mzk5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjozNDoxMVrOGY6F6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoxNjozM1rOGY7k1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3MDc5NQ==", "bodyText": "Shouldn't this always be not-null since we set it above?", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428770795", "createdAt": "2020-05-21T16:34:11Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "diffHunk": "@@ -50,46 +55,122 @@ public class NoticeTask extends DefaultTask {\n     }\n \n     /** Add notices from the specified directory. */\n-    public void licensesDir(File licensesDir) {\n+    void licensesDir(File licensesDir) {\n         licensesDirs.add(licensesDir)\n     }\n \n+    void source(Object source) {\n+        if (sources == null) {\n+            sources = project.fileTree(source)\n+        } else {\n+            sources += project.fileTree(source)\n+        }\n+    }\n+\n+    void source(SourceDirectorySet source) {\n+        if (sources == null) {\n+            sources = source\n+        } else {\n+            sources += source\n+        }\n+    }\n+\n     @TaskAction\n-    public void generateNotice() {\n+    void generateNotice() {\n         StringBuilder output = new StringBuilder()\n         output.append(inputFile.getText('UTF-8'))\n         output.append('\\n\\n')\n         // This is a map rather than a set so that the sort order is the 3rd\n         // party component names, unaffected by the full path to the various files\n         Map<String, File> seen = new TreeMap<>()\n-        for (File licensesDir : licensesDirs) {\n-            licensesDir.eachFileMatch({ it ==~ /.*-NOTICE\\.txt/ }) { File file ->\n-                String name = file.name.substring(0, file.name.length() - '-NOTICE.txt'.length())\n-                if (seen.containsKey(name)) {\n-                    File prevFile = seen.get(name)\n-                    if (prevFile.text != file.text) {\n-                        throw new RuntimeException(\"Two different notices exist for dependency '\" +\n-                                name + \"': \" + prevFile + \" and \" + file)\n-                    }\n-                } else {\n-                    seen.put(name, file)\n+        noticeFiles.each { File file ->\n+            String name = file.name.replaceFirst(/-NOTICE\\.txt$\"/, \"\")\n+            if (seen.containsKey(name)) {\n+                File prevFile = seen.get(name)\n+                if (prevFile.text != file.text) {\n+                    throw new RuntimeException(\"Two different notices exist for dependency '\" +\n+                            name + \"': \" + prevFile + \" and \" + file)\n                 }\n+            } else {\n+                seen.put(name, file)\n             }\n         }\n+\n+        // Add all LICENSE and NOTICE files in licenses directory\n         for (Map.Entry<String, File> entry : seen.entrySet()) {\n             String name = entry.getKey()\n             File file = entry.getValue()\n             appendFile(file, name, 'NOTICE', output)\n             appendFile(new File(file.parentFile, \"${name}-LICENSE.txt\"), name, 'LICENSE', output)\n         }\n+\n+        // Find any source files with \"@notice\" annotated license header\n+        for (File sourceFile : sources.files) {\n+            boolean isPackageInfo = sourceFile.name == 'package-info.java'\n+            boolean foundNotice = false\n+            boolean inNotice = false\n+            StringBuilder header = new StringBuilder()\n+            String packageDeclaration\n+\n+            for (String line : sourceFile.readLines()) {\n+                if (isPackageInfo && packageDeclaration == null && line.startsWith('package')) {\n+                    packageDeclaration = line\n+                }\n+\n+                if (foundNotice == false) {\n+                    foundNotice = line.contains('@notice')\n+                    inNotice = true\n+                } else {\n+                    if (line.contains('*/')) {\n+                        inNotice = false\n+\n+                        if (!isPackageInfo) {\n+                            break\n+                        }\n+                    } else if (inNotice) {\n+                        header.append(line.stripMargin('*'))\n+                        header.append('\\n')\n+                    }\n+                }\n+            }\n+\n+            if (foundNotice) {\n+                appendText(header.toString(), isPackageInfo ? packageDeclaration : sourceFile.name, '', output)\n+            }\n+        }\n         outputFile.setText(output.toString(), 'UTF-8')\n     }\n \n+    @InputFiles\n+    @Optional\n+    FileCollection getNoticeFiles() {\n+        FileTree tree\n+        licensesDirs.each { dir ->\n+            if (tree == null) {\n+                tree = project.fileTree(dir)\n+            } else {\n+                tree += project.fileTree(dir)\n+            }\n+        }\n+\n+        return tree?.matching { include '**/*-NOTICE.txt' }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NTA5Mw==", "bodyText": "We only set it if licenseDirs is non-empty. Not all subprojects have a license dir, so this needs to be optional.", "url": "https://github.com/elastic/elasticsearch/pull/57017#discussion_r428795093", "createdAt": "2020-05-21T17:16:33Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy", "diffHunk": "@@ -50,46 +55,122 @@ public class NoticeTask extends DefaultTask {\n     }\n \n     /** Add notices from the specified directory. */\n-    public void licensesDir(File licensesDir) {\n+    void licensesDir(File licensesDir) {\n         licensesDirs.add(licensesDir)\n     }\n \n+    void source(Object source) {\n+        if (sources == null) {\n+            sources = project.fileTree(source)\n+        } else {\n+            sources += project.fileTree(source)\n+        }\n+    }\n+\n+    void source(SourceDirectorySet source) {\n+        if (sources == null) {\n+            sources = source\n+        } else {\n+            sources += source\n+        }\n+    }\n+\n     @TaskAction\n-    public void generateNotice() {\n+    void generateNotice() {\n         StringBuilder output = new StringBuilder()\n         output.append(inputFile.getText('UTF-8'))\n         output.append('\\n\\n')\n         // This is a map rather than a set so that the sort order is the 3rd\n         // party component names, unaffected by the full path to the various files\n         Map<String, File> seen = new TreeMap<>()\n-        for (File licensesDir : licensesDirs) {\n-            licensesDir.eachFileMatch({ it ==~ /.*-NOTICE\\.txt/ }) { File file ->\n-                String name = file.name.substring(0, file.name.length() - '-NOTICE.txt'.length())\n-                if (seen.containsKey(name)) {\n-                    File prevFile = seen.get(name)\n-                    if (prevFile.text != file.text) {\n-                        throw new RuntimeException(\"Two different notices exist for dependency '\" +\n-                                name + \"': \" + prevFile + \" and \" + file)\n-                    }\n-                } else {\n-                    seen.put(name, file)\n+        noticeFiles.each { File file ->\n+            String name = file.name.replaceFirst(/-NOTICE\\.txt$\"/, \"\")\n+            if (seen.containsKey(name)) {\n+                File prevFile = seen.get(name)\n+                if (prevFile.text != file.text) {\n+                    throw new RuntimeException(\"Two different notices exist for dependency '\" +\n+                            name + \"': \" + prevFile + \" and \" + file)\n                 }\n+            } else {\n+                seen.put(name, file)\n             }\n         }\n+\n+        // Add all LICENSE and NOTICE files in licenses directory\n         for (Map.Entry<String, File> entry : seen.entrySet()) {\n             String name = entry.getKey()\n             File file = entry.getValue()\n             appendFile(file, name, 'NOTICE', output)\n             appendFile(new File(file.parentFile, \"${name}-LICENSE.txt\"), name, 'LICENSE', output)\n         }\n+\n+        // Find any source files with \"@notice\" annotated license header\n+        for (File sourceFile : sources.files) {\n+            boolean isPackageInfo = sourceFile.name == 'package-info.java'\n+            boolean foundNotice = false\n+            boolean inNotice = false\n+            StringBuilder header = new StringBuilder()\n+            String packageDeclaration\n+\n+            for (String line : sourceFile.readLines()) {\n+                if (isPackageInfo && packageDeclaration == null && line.startsWith('package')) {\n+                    packageDeclaration = line\n+                }\n+\n+                if (foundNotice == false) {\n+                    foundNotice = line.contains('@notice')\n+                    inNotice = true\n+                } else {\n+                    if (line.contains('*/')) {\n+                        inNotice = false\n+\n+                        if (!isPackageInfo) {\n+                            break\n+                        }\n+                    } else if (inNotice) {\n+                        header.append(line.stripMargin('*'))\n+                        header.append('\\n')\n+                    }\n+                }\n+            }\n+\n+            if (foundNotice) {\n+                appendText(header.toString(), isPackageInfo ? packageDeclaration : sourceFile.name, '', output)\n+            }\n+        }\n         outputFile.setText(output.toString(), 'UTF-8')\n     }\n \n+    @InputFiles\n+    @Optional\n+    FileCollection getNoticeFiles() {\n+        FileTree tree\n+        licensesDirs.each { dir ->\n+            if (tree == null) {\n+                tree = project.fileTree(dir)\n+            } else {\n+                tree += project.fileTree(dir)\n+            }\n+        }\n+\n+        return tree?.matching { include '**/*-NOTICE.txt' }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3MDc5NQ=="}, "originalCommit": {"oid": "f6a73cf2a8eb1c5511722037c1b76b7c5f4f8cc6"}, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 256, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}